begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|VectorizedRowGroupGenUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  * TestColumnScalarOperationVectorExpressionEvaluation.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestColumnScalarOperationVectorExpressionEvaluation
block|{
specifier|private
specifier|static
specifier|final
name|int
name|BATCH_SIZE
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|SEED
init|=
literal|0xfa57
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddLongScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColAddLongScalar
name|vectorExpression
init|=
operator|new
name|LongColAddLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColAddLongScalar
name|vectorExpression
init|=
operator|new
name|LongColAddLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddLongScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColAddLongScalar
name|vectorExpression
init|=
operator|new
name|LongColAddLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddLongScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColAddLongScalar
name|vectorExpression
init|=
operator|new
name|LongColAddLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddLongScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColAddLongScalar
name|vectorExpression
init|=
operator|new
name|LongColAddLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractLongScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColSubtractLongScalar
name|vectorExpression
init|=
operator|new
name|LongColSubtractLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColSubtractLongScalar
name|vectorExpression
init|=
operator|new
name|LongColSubtractLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractLongScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColSubtractLongScalar
name|vectorExpression
init|=
operator|new
name|LongColSubtractLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractLongScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColSubtractLongScalar
name|vectorExpression
init|=
operator|new
name|LongColSubtractLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractLongScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColSubtractLongScalar
name|vectorExpression
init|=
operator|new
name|LongColSubtractLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyLongScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColMultiplyLongScalar
name|vectorExpression
init|=
operator|new
name|LongColMultiplyLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColMultiplyLongScalar
name|vectorExpression
init|=
operator|new
name|LongColMultiplyLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyLongScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColMultiplyLongScalar
name|vectorExpression
init|=
operator|new
name|LongColMultiplyLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyLongScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColMultiplyLongScalar
name|vectorExpression
init|=
operator|new
name|LongColMultiplyLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyLongScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColMultiplyLongScalar
name|vectorExpression
init|=
operator|new
name|LongColMultiplyLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloLongScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColModuloLongScalar
name|vectorExpression
init|=
operator|new
name|LongColModuloLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColModuloLongScalar
name|vectorExpression
init|=
operator|new
name|LongColModuloLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloLongScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColModuloLongScalar
name|vectorExpression
init|=
operator|new
name|LongColModuloLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloLongScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColModuloLongScalar
name|vectorExpression
init|=
operator|new
name|LongColModuloLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloLongScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColModuloLongScalar
name|vectorExpression
init|=
operator|new
name|LongColModuloLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColAddDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColAddDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColAddDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColAddDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColAddDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColAddDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColAddDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColAddDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColAddDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColAddDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColSubtractDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColSubtractDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColSubtractDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColSubtractDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColSubtractDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColSubtractDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColSubtractDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColSubtractDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColSubtractDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColSubtractDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColMultiplyDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColMultiplyDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColMultiplyDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColMultiplyDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColMultiplyDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColMultiplyDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColMultiplyDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColMultiplyDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColMultiplyDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColMultiplyDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColDivideDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColDivideDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColDivideDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColDivideDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColDivideDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColDivideDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColDivideDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColDivideDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColDivideDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColDivideDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColDivideDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColDivideDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColDivideDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColDivideDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColDivideDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColModuloDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColModuloDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColModuloDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColModuloDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColModuloDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColModuloDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColModuloDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColModuloDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColModuloDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColModuloDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddLongScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColAddLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColAddLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColAddLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColAddLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddLongScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColAddLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColAddLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddLongScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColAddLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColAddLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddLongScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColAddLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColAddLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractLongScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColSubtractLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColSubtractLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractLongScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColSubtractLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractLongScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColSubtractLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractLongScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColSubtractLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyLongScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColMultiplyLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColMultiplyLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyLongScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColMultiplyLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyLongScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColMultiplyLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyLongScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColMultiplyLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideLongScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColDivideLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColDivideLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColDivideLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColDivideLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideLongScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColDivideLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColDivideLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideLongScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColDivideLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColDivideLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideLongScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColDivideLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColDivideLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloLongScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColModuloLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColModuloLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColModuloLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColModuloLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloLongScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColModuloLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColModuloLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloLongScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColModuloLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColModuloLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloLongScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColModuloLongScalar
name|vectorExpression
init|=
operator|new
name|DoubleColModuloLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColAddDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColAddDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColAddDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColAddDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColAddDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColAddDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColAddDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColAddDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColAddDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColAddDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColSubtractDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColSubtractDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColSubtractDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColSubtractDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColSubtractDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColMultiplyDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColMultiplyDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColMultiplyDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColMultiplyDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColMultiplyDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColDivideDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColDivideDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColDivideDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColDivideDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColDivideDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColDivideDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColDivideDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColDivideDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColDivideDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColDivideDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColModuloDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColModuloDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColModuloDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColModuloDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColModuloDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColModuloDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColModuloDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColModuloDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColModuloDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColModuloDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarAddLongColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarAddLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarAddLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarAddLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarAddLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarAddLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarAddLongColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarAddLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarAddLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarAddLongColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarAddLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarAddLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarAddLongColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarAddLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarAddLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarSubtractLongColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarSubtractLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarSubtractLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarSubtractLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarSubtractLongColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarSubtractLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarSubtractLongColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarSubtractLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarSubtractLongColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarSubtractLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarMultiplyLongColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarMultiplyLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarMultiplyLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarMultiplyLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarMultiplyLongColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarMultiplyLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarMultiplyLongColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarMultiplyLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarMultiplyLongColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarMultiplyLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarModuloLongColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarModuloLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarModuloLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarModuloLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarModuloLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarModuloLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarModuloLongColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarModuloLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarModuloLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarModuloLongColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarModuloLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarModuloLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarModuloLongColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarModuloLongColumn
name|vectorExpression
init|=
operator|new
name|LongScalarModuloLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarAddDoubleColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarAddDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarAddDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarAddDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarAddDoubleColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarAddDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarAddDoubleColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarAddDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarAddDoubleColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarAddDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarSubtractDoubleColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarSubtractDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarSubtractDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarSubtractDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarSubtractDoubleColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarSubtractDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarSubtractDoubleColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarSubtractDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarSubtractDoubleColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarSubtractDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarMultiplyDoubleColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarMultiplyDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarMultiplyDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarMultiplyDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarMultiplyDoubleColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarMultiplyDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarMultiplyDoubleColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarMultiplyDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarMultiplyDoubleColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarMultiplyDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarDivideDoubleColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarDivideDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarDivideDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarDivideDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarDivideDoubleColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarDivideDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarDivideDoubleColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarDivideDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarDivideDoubleColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarDivideDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarModuloDoubleColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarModuloDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarModuloDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarModuloDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarModuloDoubleColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarModuloDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarModuloDoubleColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarModuloDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarModuloDoubleColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongScalarModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongScalarModuloDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarAddLongColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarAddLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarAddLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarAddLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarAddLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarAddLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarAddLongColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarAddLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarAddLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarAddLongColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarAddLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarAddLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarAddLongColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarAddLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarAddLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarSubtractLongColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarSubtractLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarSubtractLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarSubtractLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarSubtractLongColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarSubtractLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarSubtractLongColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarSubtractLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarSubtractLongColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarSubtractLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarMultiplyLongColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarMultiplyLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarMultiplyLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarMultiplyLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarMultiplyLongColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarMultiplyLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarMultiplyLongColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarMultiplyLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarMultiplyLongColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarMultiplyLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarDivideLongColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarDivideLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarDivideLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarDivideLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarDivideLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarDivideLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarDivideLongColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarDivideLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarDivideLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarDivideLongColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarDivideLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarDivideLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarDivideLongColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarDivideLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarDivideLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarModuloLongColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarModuloLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarModuloLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarModuloLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarModuloLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarModuloLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarModuloLongColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarModuloLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarModuloLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarModuloLongColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarModuloLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarModuloLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarModuloLongColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarModuloLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarModuloLongColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarAddDoubleColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarAddDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarAddDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarAddDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarAddDoubleColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarAddDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarAddDoubleColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarAddDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarAddDoubleColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarAddDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarSubtractDoubleColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarSubtractDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarSubtractDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarSubtractDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarSubtractDoubleColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarSubtractDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarSubtractDoubleColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarSubtractDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarSubtractDoubleColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarSubtractDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarMultiplyDoubleColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarMultiplyDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarMultiplyDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarMultiplyDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarMultiplyDoubleColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarMultiplyDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarMultiplyDoubleColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarMultiplyDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarMultiplyDoubleColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarMultiplyDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarDivideDoubleColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarDivideDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarDivideDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarDivideDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarDivideDoubleColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarDivideDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarDivideDoubleColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarDivideDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarDivideDoubleColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarDivideDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarModuloDoubleColumnOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarModuloDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarModuloDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarModuloDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarModuloDoubleColumnOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarModuloDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarModuloDoubleColumnOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarModuloDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarModuloDoubleColumnOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleScalarModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleScalarModuloDoubleColumn
argument_list|(
name|scalarValue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColEqualDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColEqualDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColEqualDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColEqualDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColEqualDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColEqualDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColEqualDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColEqualDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColEqualDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColEqualDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColNotEqualDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColNotEqualDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColNotEqualDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColNotEqualDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColNotEqualDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColNotEqualDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColNotEqualDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColNotEqualDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColNotEqualDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColNotEqualDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColLessDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColLessDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColLessDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColLessDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColLessDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColLessDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColLessDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColLessDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColLessDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColLessDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColLessEqualDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColLessEqualDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColLessEqualDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColLessEqualDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColLessEqualDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColLessEqualDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColLessEqualDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColLessEqualDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColLessEqualDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColLessEqualDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColGreaterDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColGreaterDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColGreaterDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColGreaterDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColGreaterDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColGreaterDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColGreaterDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColGreaterDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColGreaterDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColGreaterDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColGreaterEqualDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColGreaterEqualDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColGreaterEqualDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColGreaterEqualDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColGreaterEqualDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|LongColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|LongColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColGreaterEqualDoubleScalarOutRepeatsColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColGreaterEqualDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColGreaterEqualDoubleScalarOutNullsColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColGreaterEqualDoubleScalarOutNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColGreaterEqualDoubleScalarOutNullsColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|DoubleColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|DoubleColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector is repeating state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand column"
argument_list|,
name|inputColumnVector
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vector's is null state for index"
argument_list|,
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

