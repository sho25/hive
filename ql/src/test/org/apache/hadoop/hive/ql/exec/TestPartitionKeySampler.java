begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * PartitionKeySampler Test.  */
end_comment

begin_class
specifier|public
class|class
name|TestPartitionKeySampler
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|tmp100
init|=
literal|"100"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|tmp200
init|=
literal|"200"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|tmp300
init|=
literal|"300"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|tmp400
init|=
literal|"400"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// current random sampling implementation in InputSampler always returns
comment|// value of index 3, 5, 8, which can be same with previous partition key.
comment|// That induces "Split points are out of order" exception in TotalOrderPartitioner causing HIVE-7699
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Throwable
block|{
name|byte
index|[]
index|[]
name|sampled
decl_stmt|;
name|sampled
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
name|tmp100
block|,
name|tmp100
block|,
name|tmp100
block|,
name|tmp100
block|,
name|tmp100
block|,
name|tmp100
block|,
name|tmp100
block|,
name|tmp100
block|,
name|tmp100
block|,
name|tmp100
block|}
expr_stmt|;
name|assertKeys
argument_list|(
name|sampled
argument_list|,
name|tmp100
argument_list|)
expr_stmt|;
comment|// 3
name|sampled
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
name|tmp100
block|,
name|tmp100
block|,
name|tmp100
block|,
name|tmp100
block|,
name|tmp100
block|,
name|tmp100
block|,
name|tmp100
block|,
name|tmp100
block|,
name|tmp200
block|,
name|tmp200
block|}
expr_stmt|;
name|assertKeys
argument_list|(
name|sampled
argument_list|,
name|tmp100
argument_list|,
name|tmp200
argument_list|)
expr_stmt|;
comment|// 3, 8
name|sampled
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
name|tmp100
block|,
name|tmp100
block|,
name|tmp100
block|,
name|tmp100
block|,
name|tmp200
block|,
name|tmp200
block|,
name|tmp200
block|,
name|tmp300
block|,
name|tmp300
block|,
name|tmp300
block|}
expr_stmt|;
name|assertKeys
argument_list|(
name|sampled
argument_list|,
name|tmp100
argument_list|,
name|tmp200
argument_list|,
name|tmp300
argument_list|)
expr_stmt|;
comment|// 3, 5, 8
name|sampled
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
name|tmp100
block|,
name|tmp200
block|,
name|tmp200
block|,
name|tmp200
block|,
name|tmp200
block|,
name|tmp200
block|,
name|tmp200
block|,
name|tmp300
block|,
name|tmp300
block|,
name|tmp400
block|}
expr_stmt|;
name|assertKeys
argument_list|(
name|sampled
argument_list|,
name|tmp200
argument_list|,
name|tmp300
argument_list|,
name|tmp400
argument_list|)
expr_stmt|;
comment|// 3, 7, 9
name|sampled
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
name|tmp100
block|,
name|tmp200
block|,
name|tmp300
block|,
name|tmp400
block|,
name|tmp400
block|,
name|tmp400
block|,
name|tmp400
block|,
name|tmp400
block|,
name|tmp400
block|,
name|tmp400
block|}
expr_stmt|;
name|assertKeys
argument_list|(
name|sampled
argument_list|,
name|tmp400
argument_list|)
expr_stmt|;
comment|// 3
block|}
specifier|private
name|void
name|assertKeys
parameter_list|(
name|byte
index|[]
index|[]
name|sampled
parameter_list|,
name|byte
index|[]
modifier|...
name|expected
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|keys
init|=
name|PartitionKeySampler
operator|.
name|toPartitionKeys
argument_list|(
name|sampled
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|keys
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|keys
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

