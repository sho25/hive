begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|BinarySortableSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|fast
operator|.
name|BinarySortableDeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|fast
operator|.
name|BinarySortableSerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|DeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|VerifyLazy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|fast
operator|.
name|LazySimpleDeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|fast
operator|.
name|LazySimpleSerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|fast
operator|.
name|StringToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|fast
operator|.
name|LazyBinaryDeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|fast
operator|.
name|LazyBinarySerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|SerializeWrite
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit test for the vectorized serialize and deserialize row.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorSerDeRow
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
enum|enum
name|SerializationType
block|{
name|NONE
block|,
name|BINARY_SORTABLE
block|,
name|LAZY_BINARY
block|,
name|LAZY_SIMPLE
block|}
specifier|private
name|void
name|verifyRead
parameter_list|(
name|DeserializeRead
name|deserializeRead
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|,
name|Object
name|expectedObject
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|VectorVerifyFast
operator|.
name|verifyDeserializeRead
argument_list|(
name|deserializeRead
argument_list|,
name|typeInfo
argument_list|,
name|expectedObject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|complexFieldObj
init|=
name|VectorVerifyFast
operator|.
name|deserializeReadComplexType
argument_list|(
name|deserializeRead
argument_list|,
name|typeInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedObject
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|complexFieldObj
operator|!=
literal|null
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Field reports not null but object is null (class "
operator|+
name|complexFieldObj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|", "
operator|+
name|complexFieldObj
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|complexFieldObj
operator|==
literal|null
condition|)
block|{
comment|// It's hard to distinguish a union with null from a null union.
if|if
condition|(
name|expectedObject
operator|instanceof
name|UnionObject
condition|)
block|{
name|UnionObject
name|expectedUnion
init|=
operator|(
name|UnionObject
operator|)
name|expectedObject
decl_stmt|;
if|if
condition|(
name|expectedUnion
operator|.
name|getObject
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
block|}
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Field reports null but object is not null (class "
operator|+
name|expectedObject
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|", "
operator|+
name|expectedObject
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|VerifyLazy
operator|.
name|lazyCompare
argument_list|(
name|typeInfo
argument_list|,
name|complexFieldObj
argument_list|,
name|expectedObject
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Comparision failed typeInfo "
operator|+
name|typeInfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|deserializeAndVerify
parameter_list|(
name|Output
name|output
parameter_list|,
name|DeserializeRead
name|deserializeRead
parameter_list|,
name|VectorRandomRowSource
name|source
parameter_list|,
name|Object
index|[]
name|expectedRow
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
name|deserializeRead
operator|.
name|set
argument_list|(
name|output
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|TypeInfo
index|[]
name|typeInfos
init|=
name|source
operator|.
name|typeInfos
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|expected
init|=
name|expectedRow
index|[
name|i
index|]
decl_stmt|;
name|TypeInfo
name|typeInfo
init|=
name|typeInfos
index|[
name|i
index|]
decl_stmt|;
name|verifyRead
argument_list|(
name|deserializeRead
argument_list|,
name|typeInfo
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|TestCase
operator|.
name|assertTrue
argument_list|(
name|deserializeRead
operator|.
name|isEndOfInputReached
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|serializeBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|VectorSerializeRow
name|vectorSerializeRow
parameter_list|,
name|DeserializeRead
name|deserializeRead
parameter_list|,
name|VectorRandomRowSource
name|source
parameter_list|,
name|Object
index|[]
index|[]
name|randomRows
parameter_list|,
name|int
name|firstRandomRowIndex
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
name|Output
name|output
init|=
operator|new
name|Output
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|reset
argument_list|()
expr_stmt|;
name|vectorSerializeRow
operator|.
name|setOutput
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|vectorSerializeRow
operator|.
name|serializeWrite
argument_list|(
name|batch
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedRow
init|=
name|randomRows
index|[
name|firstRandomRowIndex
operator|+
name|i
index|]
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|output
operator|.
name|getData
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|output
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|chars
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
name|chars
index|[
name|c
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|bytes
index|[
name|c
index|]
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
name|deserializeAndVerify
argument_list|(
name|output
argument_list|,
name|deserializeRead
argument_list|,
name|source
argument_list|,
name|expectedRow
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|testVectorSerializeRow
parameter_list|(
name|Random
name|r
parameter_list|,
name|SerializationType
name|serializationType
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
throws|,
name|SerDeException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|innerTestVectorSerializeRow
argument_list|(
name|r
argument_list|,
name|serializationType
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|innerTestVectorSerializeRow
parameter_list|(
name|Random
name|r
parameter_list|,
name|SerializationType
name|serializationType
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
throws|,
name|SerDeException
block|{
name|String
index|[]
name|emptyScratchTypeNames
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|VectorRandomRowSource
name|source
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|source
operator|.
name|init
argument_list|(
name|r
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|VectorizedRowBatchCtx
name|batchContext
init|=
operator|new
name|VectorizedRowBatchCtx
argument_list|()
decl_stmt|;
name|batchContext
operator|.
name|init
argument_list|(
name|source
operator|.
name|rowStructObjectInspector
argument_list|()
argument_list|,
name|emptyScratchTypeNames
argument_list|)
expr_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|batchContext
operator|.
name|createVectorizedRowBatch
argument_list|()
decl_stmt|;
name|VectorAssignRow
name|vectorAssignRow
init|=
operator|new
name|VectorAssignRow
argument_list|()
decl_stmt|;
name|vectorAssignRow
operator|.
name|init
argument_list|(
name|source
operator|.
name|typeNames
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|fieldCount
init|=
name|source
operator|.
name|typeNames
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|DeserializeRead
name|deserializeRead
decl_stmt|;
name|SerializeWrite
name|serializeWrite
decl_stmt|;
switch|switch
condition|(
name|serializationType
condition|)
block|{
case|case
name|BINARY_SORTABLE
case|:
name|deserializeRead
operator|=
operator|new
name|BinarySortableDeserializeRead
argument_list|(
name|source
operator|.
name|typeInfos
argument_list|()
argument_list|,
comment|/* useExternalBuffer */
literal|false
argument_list|)
expr_stmt|;
name|serializeWrite
operator|=
operator|new
name|BinarySortableSerializeWrite
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
break|break;
case|case
name|LAZY_BINARY
case|:
name|deserializeRead
operator|=
operator|new
name|LazyBinaryDeserializeRead
argument_list|(
name|source
operator|.
name|typeInfos
argument_list|()
argument_list|,
comment|/* useExternalBuffer */
literal|false
argument_list|)
expr_stmt|;
name|serializeWrite
operator|=
operator|new
name|LazyBinarySerializeWrite
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
break|break;
case|case
name|LAZY_SIMPLE
case|:
block|{
name|StructObjectInspector
name|rowObjectInspector
init|=
name|source
operator|.
name|rowStructObjectInspector
argument_list|()
decl_stmt|;
comment|// Use different separator values.
name|byte
index|[]
name|separators
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|9
block|,
operator|(
name|byte
operator|)
literal|2
block|,
operator|(
name|byte
operator|)
literal|3
block|,
operator|(
name|byte
operator|)
literal|4
block|,
operator|(
name|byte
operator|)
literal|5
block|,
operator|(
name|byte
operator|)
literal|6
block|,
operator|(
name|byte
operator|)
literal|7
block|,
operator|(
name|byte
operator|)
literal|8
block|}
decl_stmt|;
name|LazySerDeParameters
name|lazySerDeParams
init|=
name|getSerDeParams
argument_list|(
name|rowObjectInspector
argument_list|,
name|separators
argument_list|)
decl_stmt|;
name|deserializeRead
operator|=
operator|new
name|LazySimpleDeserializeRead
argument_list|(
name|source
operator|.
name|typeInfos
argument_list|()
argument_list|,
comment|/* useExternalBuffer */
literal|false
argument_list|,
name|lazySerDeParams
argument_list|)
expr_stmt|;
name|serializeWrite
operator|=
operator|new
name|LazySimpleSerializeWrite
argument_list|(
name|fieldCount
argument_list|,
name|lazySerDeParams
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unknown serialization type "
operator|+
name|serializationType
argument_list|)
throw|;
block|}
name|VectorSerializeRow
name|vectorSerializeRow
init|=
operator|new
name|VectorSerializeRow
argument_list|(
name|serializeWrite
argument_list|)
decl_stmt|;
name|vectorSerializeRow
operator|.
name|init
argument_list|(
name|source
operator|.
name|typeNames
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
index|[]
name|randomRows
init|=
name|source
operator|.
name|randomRows
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|int
name|firstRandomRowIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomRows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
index|[]
name|row
init|=
name|randomRows
index|[
name|i
index|]
decl_stmt|;
name|vectorAssignRow
operator|.
name|assignRow
argument_list|(
name|batch
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|++
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|size
operator|==
name|batch
operator|.
name|DEFAULT_SIZE
condition|)
block|{
name|serializeBatch
argument_list|(
name|batch
argument_list|,
name|vectorSerializeRow
argument_list|,
name|deserializeRead
argument_list|,
name|source
argument_list|,
name|randomRows
argument_list|,
name|firstRandomRowIndex
argument_list|)
expr_stmt|;
name|firstRandomRowIndex
operator|=
name|i
operator|+
literal|1
expr_stmt|;
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|batch
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|serializeBatch
argument_list|(
name|batch
argument_list|,
name|vectorSerializeRow
argument_list|,
name|deserializeRead
argument_list|,
name|source
argument_list|,
name|randomRows
argument_list|,
name|firstRandomRowIndex
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|examineBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|VectorExtractRow
name|vectorExtractRow
parameter_list|,
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|Object
index|[]
index|[]
name|randomRows
parameter_list|,
name|int
name|firstRandomRowIndex
parameter_list|)
block|{
name|int
name|rowSize
init|=
name|vectorExtractRow
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|Object
index|[]
name|row
init|=
operator|new
name|Object
index|[
name|rowSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
name|vectorExtractRow
operator|.
name|extractRow
argument_list|(
name|batch
argument_list|,
name|i
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedRow
init|=
name|randomRows
index|[
name|firstRandomRowIndex
operator|+
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|rowSize
condition|;
name|c
operator|++
control|)
block|{
name|Object
name|rowObj
init|=
name|row
index|[
name|c
index|]
decl_stmt|;
name|Object
name|expectedObj
init|=
name|expectedRow
index|[
name|c
index|]
decl_stmt|;
if|if
condition|(
name|rowObj
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|expectedObj
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|fail
argument_list|(
literal|"Unexpected NULL from extractRow.  Expected class "
operator|+
name|typeInfos
index|[
name|c
index|]
operator|.
name|getCategory
argument_list|()
operator|+
literal|" value "
operator|+
name|expectedObj
operator|+
literal|" batch index "
operator|+
name|i
operator|+
literal|" firstRandomRowIndex "
operator|+
name|firstRandomRowIndex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rowObj
operator|.
name|equals
argument_list|(
name|expectedObj
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Row "
operator|+
operator|(
name|firstRandomRowIndex
operator|+
name|i
operator|)
operator|+
literal|" and column "
operator|+
name|c
operator|+
literal|" mismatch ("
operator|+
name|typeInfos
index|[
name|c
index|]
operator|.
name|getCategory
argument_list|()
operator|+
literal|" actual value "
operator|+
name|rowObj
operator|+
literal|" and expected value "
operator|+
name|expectedObj
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Output
name|serializeRow
parameter_list|(
name|Object
index|[]
name|row
parameter_list|,
name|VectorRandomRowSource
name|source
parameter_list|,
name|SerializeWrite
name|serializeWrite
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
name|Output
name|output
init|=
operator|new
name|Output
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|set
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|TypeInfo
index|[]
name|typeInfos
init|=
name|source
operator|.
name|typeInfos
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|VectorVerifyFast
operator|.
name|serializeWrite
argument_list|(
name|serializeWrite
argument_list|,
name|typeInfos
index|[
name|i
index|]
argument_list|,
name|row
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|output
return|;
block|}
specifier|private
name|void
name|addToProperties
parameter_list|(
name|Properties
name|tbl
parameter_list|,
name|String
name|fieldNames
parameter_list|,
name|String
name|fieldTypes
parameter_list|)
block|{
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
name|fieldTypes
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|,
literal|"\\N"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|LazySerDeParameters
name|getSerDeParams
parameter_list|(
name|StructObjectInspector
name|rowObjectInspector
parameter_list|,
name|byte
index|[]
name|separators
parameter_list|)
throws|throws
name|SerDeException
block|{
return|return
name|getSerDeParams
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|,
name|rowObjectInspector
argument_list|,
name|separators
argument_list|)
return|;
block|}
specifier|private
name|LazySerDeParameters
name|getSerDeParams
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|,
name|StructObjectInspector
name|rowObjectInspector
parameter_list|,
name|byte
index|[]
name|separators
parameter_list|)
throws|throws
name|SerDeException
block|{
name|String
name|fieldNames
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldNames
argument_list|(
name|rowObjectInspector
argument_list|)
decl_stmt|;
name|String
name|fieldTypes
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldTypes
argument_list|(
name|rowObjectInspector
argument_list|)
decl_stmt|;
name|addToProperties
argument_list|(
name|tbl
argument_list|,
name|fieldNames
argument_list|,
name|fieldTypes
argument_list|)
expr_stmt|;
name|LazySerDeParameters
name|lazySerDeParams
init|=
operator|new
name|LazySerDeParameters
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|,
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|separators
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|lazySerDeParams
operator|.
name|setSeparator
argument_list|(
name|i
argument_list|,
name|separators
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|lazySerDeParams
return|;
block|}
name|void
name|testVectorDeserializeRow
parameter_list|(
name|Random
name|r
parameter_list|,
name|SerializationType
name|serializationType
parameter_list|,
name|boolean
name|alternate1
parameter_list|,
name|boolean
name|alternate2
parameter_list|,
name|boolean
name|useExternalBuffer
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
throws|,
name|SerDeException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|innerTestVectorDeserializeRow
argument_list|(
name|r
argument_list|,
name|serializationType
argument_list|,
name|alternate1
argument_list|,
name|alternate2
argument_list|,
name|useExternalBuffer
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|innerTestVectorDeserializeRow
parameter_list|(
name|Random
name|r
parameter_list|,
name|SerializationType
name|serializationType
parameter_list|,
name|boolean
name|alternate1
parameter_list|,
name|boolean
name|alternate2
parameter_list|,
name|boolean
name|useExternalBuffer
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
throws|,
name|SerDeException
block|{
name|String
index|[]
name|emptyScratchTypeNames
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|VectorRandomRowSource
name|source
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|source
operator|.
name|init
argument_list|(
name|r
argument_list|,
name|VectorRandomRowSource
operator|.
name|SupportedTypes
operator|.
name|ALL
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|VectorizedRowBatchCtx
name|batchContext
init|=
operator|new
name|VectorizedRowBatchCtx
argument_list|()
decl_stmt|;
name|batchContext
operator|.
name|init
argument_list|(
name|source
operator|.
name|rowStructObjectInspector
argument_list|()
argument_list|,
name|emptyScratchTypeNames
argument_list|)
expr_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|batchContext
operator|.
name|createVectorizedRowBatch
argument_list|()
decl_stmt|;
comment|// junk the destination for the 1st pass
for|for
control|(
name|ColumnVector
name|cv
range|:
name|batch
operator|.
name|cols
control|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|cv
operator|.
name|isNull
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|TypeInfo
index|[]
name|typeInfos
init|=
name|source
operator|.
name|typeInfos
argument_list|()
decl_stmt|;
name|int
name|fieldCount
init|=
name|source
operator|.
name|typeNames
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|DeserializeRead
name|deserializeRead
decl_stmt|;
name|SerializeWrite
name|serializeWrite
decl_stmt|;
switch|switch
condition|(
name|serializationType
condition|)
block|{
case|case
name|BINARY_SORTABLE
case|:
name|boolean
name|useColumnSortOrderIsDesc
init|=
name|alternate1
decl_stmt|;
if|if
condition|(
operator|!
name|useColumnSortOrderIsDesc
condition|)
block|{
name|deserializeRead
operator|=
operator|new
name|BinarySortableDeserializeRead
argument_list|(
name|source
operator|.
name|typeInfos
argument_list|()
argument_list|,
name|useExternalBuffer
argument_list|)
expr_stmt|;
name|serializeWrite
operator|=
operator|new
name|BinarySortableSerializeWrite
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
index|[]
name|columnSortOrderIsDesc
init|=
operator|new
name|boolean
index|[
name|fieldCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|columnSortOrderIsDesc
index|[
name|i
index|]
operator|=
name|r
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|columnNullMarker
init|=
operator|new
name|byte
index|[
name|fieldCount
index|]
decl_stmt|;
name|byte
index|[]
name|columnNotNullMarker
init|=
operator|new
name|byte
index|[
name|fieldCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|columnSortOrderIsDesc
index|[
name|i
index|]
condition|)
block|{
comment|// Descending
comment|// Null last (default for descending order)
name|columnNullMarker
index|[
name|i
index|]
operator|=
name|BinarySortableSerDe
operator|.
name|ZERO
expr_stmt|;
name|columnNotNullMarker
index|[
name|i
index|]
operator|=
name|BinarySortableSerDe
operator|.
name|ONE
expr_stmt|;
block|}
else|else
block|{
comment|// Ascending
comment|// Null first (default for ascending order)
name|columnNullMarker
index|[
name|i
index|]
operator|=
name|BinarySortableSerDe
operator|.
name|ZERO
expr_stmt|;
name|columnNotNullMarker
index|[
name|i
index|]
operator|=
name|BinarySortableSerDe
operator|.
name|ONE
expr_stmt|;
block|}
block|}
name|serializeWrite
operator|=
operator|new
name|BinarySortableSerializeWrite
argument_list|(
name|columnSortOrderIsDesc
argument_list|,
name|columnNullMarker
argument_list|,
name|columnNotNullMarker
argument_list|)
expr_stmt|;
name|deserializeRead
operator|=
operator|new
name|BinarySortableDeserializeRead
argument_list|(
name|source
operator|.
name|typeInfos
argument_list|()
argument_list|,
name|useExternalBuffer
argument_list|,
name|columnSortOrderIsDesc
argument_list|,
name|columnNullMarker
argument_list|,
name|columnNotNullMarker
argument_list|)
expr_stmt|;
block|}
name|boolean
name|useBinarySortableCharsNeedingEscape
init|=
name|alternate2
decl_stmt|;
if|if
condition|(
name|useBinarySortableCharsNeedingEscape
condition|)
block|{
name|source
operator|.
name|addBinarySortableAlphabets
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|LAZY_BINARY
case|:
name|deserializeRead
operator|=
operator|new
name|LazyBinaryDeserializeRead
argument_list|(
name|source
operator|.
name|typeInfos
argument_list|()
argument_list|,
name|useExternalBuffer
argument_list|)
expr_stmt|;
name|serializeWrite
operator|=
operator|new
name|LazyBinarySerializeWrite
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
break|break;
case|case
name|LAZY_SIMPLE
case|:
block|{
name|StructObjectInspector
name|rowObjectInspector
init|=
name|source
operator|.
name|rowStructObjectInspector
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|,
literal|"\t"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LINE_DELIM
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|byte
name|separator
init|=
operator|(
name|byte
operator|)
literal|'\t'
decl_stmt|;
name|boolean
name|useLazySimpleEscapes
init|=
name|alternate1
decl_stmt|;
if|if
condition|(
name|useLazySimpleEscapes
condition|)
block|{
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|QUOTE_CHAR
argument_list|,
literal|"'"
argument_list|)
expr_stmt|;
name|String
name|escapeString
init|=
literal|"\\"
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|ESCAPE_CHAR
argument_list|,
name|escapeString
argument_list|)
expr_stmt|;
block|}
name|LazySerDeParameters
name|lazySerDeParams
init|=
name|getSerDeParams
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|,
name|rowObjectInspector
argument_list|,
operator|new
name|byte
index|[]
block|{
name|separator
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|useLazySimpleEscapes
condition|)
block|{
comment|// LazySimple seems to throw away everything but \n and \r.
name|boolean
index|[]
name|needsEscape
init|=
name|lazySerDeParams
operator|.
name|getNeedsEscape
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|needsEscape
index|[
literal|'\n'
index|]
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needsEscape
index|[
literal|'\r'
index|]
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
block|}
comment|// for (int i = 0; i< needsEscape.length; i++) {
comment|//  if (needsEscape[i]) {
comment|//    sb.append((char) i);
comment|//  }
comment|// }
name|String
name|needsEscapeStr
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|needsEscapeStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|source
operator|.
name|addEscapables
argument_list|(
name|needsEscapeStr
argument_list|)
expr_stmt|;
block|}
block|}
name|deserializeRead
operator|=
operator|new
name|LazySimpleDeserializeRead
argument_list|(
name|source
operator|.
name|typeInfos
argument_list|()
argument_list|,
name|useExternalBuffer
argument_list|,
name|lazySerDeParams
argument_list|)
expr_stmt|;
name|serializeWrite
operator|=
operator|new
name|LazySimpleSerializeWrite
argument_list|(
name|fieldCount
argument_list|,
name|lazySerDeParams
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unknown serialization type "
operator|+
name|serializationType
argument_list|)
throw|;
block|}
name|VectorDeserializeRow
name|vectorDeserializeRow
init|=
operator|new
name|VectorDeserializeRow
argument_list|(
name|deserializeRead
argument_list|)
decl_stmt|;
name|vectorDeserializeRow
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// junk the destination for the 1st pass
for|for
control|(
name|ColumnVector
name|cv
range|:
name|batch
operator|.
name|cols
control|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|cv
operator|.
name|isNull
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cv
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
name|VectorExtractRow
name|vectorExtractRow
init|=
operator|new
name|VectorExtractRow
argument_list|()
decl_stmt|;
name|vectorExtractRow
operator|.
name|init
argument_list|(
name|source
operator|.
name|typeNames
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
index|[]
name|randomRows
init|=
name|source
operator|.
name|randomRows
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|int
name|firstRandomRowIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomRows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
index|[]
name|row
init|=
name|randomRows
index|[
name|i
index|]
decl_stmt|;
name|Output
name|output
init|=
name|serializeRow
argument_list|(
name|row
argument_list|,
name|source
argument_list|,
name|serializeWrite
argument_list|)
decl_stmt|;
name|vectorDeserializeRow
operator|.
name|setBytes
argument_list|(
name|output
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|vectorDeserializeRow
operator|.
name|deserialize
argument_list|(
name|batch
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"\nDeserializeRead details: "
operator|+
name|vectorDeserializeRow
operator|.
name|getDetailedReadPositionString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|batch
operator|.
name|size
operator|++
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|size
operator|==
name|batch
operator|.
name|DEFAULT_SIZE
condition|)
block|{
name|examineBatch
argument_list|(
name|batch
argument_list|,
name|vectorExtractRow
argument_list|,
name|typeInfos
argument_list|,
name|randomRows
argument_list|,
name|firstRandomRowIndex
argument_list|)
expr_stmt|;
name|firstRandomRowIndex
operator|=
name|i
operator|+
literal|1
expr_stmt|;
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|batch
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|examineBatch
argument_list|(
name|batch
argument_list|,
name|vectorExtractRow
argument_list|,
name|typeInfos
argument_list|,
name|randomRows
argument_list|,
name|firstRandomRowIndex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testVectorBinarySortableSerializeRow
parameter_list|()
throws|throws
name|Throwable
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|8732
argument_list|)
decl_stmt|;
name|testVectorSerializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|BINARY_SORTABLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testVectorLazyBinarySerializeRow
parameter_list|()
throws|throws
name|Throwable
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|8732
argument_list|)
decl_stmt|;
name|testVectorSerializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|LAZY_BINARY
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testVectorLazySimpleSerializeRow
parameter_list|()
throws|throws
name|Throwable
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|8732
argument_list|)
decl_stmt|;
name|testVectorSerializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|LAZY_SIMPLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testVectorBinarySortableDeserializeRow
parameter_list|()
throws|throws
name|Throwable
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|8732
argument_list|)
decl_stmt|;
name|testVectorDeserializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|BINARY_SORTABLE
argument_list|,
comment|/* alternate1 = useColumnSortOrderIsDesc */
literal|false
argument_list|,
comment|/* alternate2 = useBinarySortableCharsNeedingEscape */
literal|false
argument_list|,
comment|/* useExternalBuffer */
literal|false
argument_list|)
expr_stmt|;
name|testVectorDeserializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|BINARY_SORTABLE
argument_list|,
comment|/* alternate1 = useColumnSortOrderIsDesc */
literal|true
argument_list|,
comment|/* alternate2 = useBinarySortableCharsNeedingEscape */
literal|false
argument_list|,
comment|/* useExternalBuffer */
literal|false
argument_list|)
expr_stmt|;
name|testVectorDeserializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|BINARY_SORTABLE
argument_list|,
comment|/* alternate1 = useColumnSortOrderIsDesc */
literal|false
argument_list|,
comment|/* alternate2 = useBinarySortableCharsNeedingEscape */
literal|false
argument_list|,
comment|/* useExternalBuffer */
literal|true
argument_list|)
expr_stmt|;
name|testVectorDeserializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|BINARY_SORTABLE
argument_list|,
comment|/* alternate1 = useColumnSortOrderIsDesc */
literal|true
argument_list|,
comment|/* alternate2 = useBinarySortableCharsNeedingEscape */
literal|false
argument_list|,
comment|/* useExternalBuffer */
literal|true
argument_list|)
expr_stmt|;
name|testVectorDeserializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|BINARY_SORTABLE
argument_list|,
comment|/* alternate1 = useColumnSortOrderIsDesc */
literal|false
argument_list|,
comment|/* alternate2 = useBinarySortableCharsNeedingEscape */
literal|true
argument_list|,
comment|/* useExternalBuffer */
literal|false
argument_list|)
expr_stmt|;
name|testVectorDeserializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|BINARY_SORTABLE
argument_list|,
comment|/* alternate1 = useColumnSortOrderIsDesc */
literal|true
argument_list|,
comment|/* alternate2 = useBinarySortableCharsNeedingEscape */
literal|true
argument_list|,
comment|/* useExternalBuffer */
literal|false
argument_list|)
expr_stmt|;
name|testVectorDeserializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|BINARY_SORTABLE
argument_list|,
comment|/* alternate1 = useColumnSortOrderIsDesc */
literal|false
argument_list|,
comment|/* alternate2 = useBinarySortableCharsNeedingEscape */
literal|true
argument_list|,
comment|/* useExternalBuffer */
literal|true
argument_list|)
expr_stmt|;
name|testVectorDeserializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|BINARY_SORTABLE
argument_list|,
comment|/* alternate1 = useColumnSortOrderIsDesc */
literal|true
argument_list|,
comment|/* alternate2 = useBinarySortableCharsNeedingEscape */
literal|true
argument_list|,
comment|/* useExternalBuffer */
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testVectorLazyBinaryDeserializeRow
parameter_list|()
throws|throws
name|Throwable
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|8732
argument_list|)
decl_stmt|;
name|testVectorDeserializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|LAZY_BINARY
argument_list|,
comment|/* alternate1 = unused */
literal|false
argument_list|,
comment|/* alternate2 = unused */
literal|false
argument_list|,
comment|/* useExternalBuffer */
literal|false
argument_list|)
expr_stmt|;
name|testVectorDeserializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|LAZY_BINARY
argument_list|,
comment|/* alternate1 = unused */
literal|false
argument_list|,
comment|/* alternate2 = unused */
literal|false
argument_list|,
comment|/* useExternalBuffer */
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testVectorLazySimpleDeserializeRow
parameter_list|()
throws|throws
name|Throwable
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|8732
argument_list|)
decl_stmt|;
name|testVectorDeserializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|LAZY_SIMPLE
argument_list|,
comment|/* alternate1 = useLazySimpleEscapes */
literal|false
argument_list|,
comment|/* alternate2 = unused */
literal|false
argument_list|,
comment|/* useExternalBuffer */
literal|false
argument_list|)
expr_stmt|;
name|testVectorDeserializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|LAZY_SIMPLE
argument_list|,
comment|/* alternate1 = useLazySimpleEscapes */
literal|false
argument_list|,
comment|/* alternate2 = unused */
literal|false
argument_list|,
comment|/* useExternalBuffer */
literal|true
argument_list|)
expr_stmt|;
name|testVectorDeserializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|LAZY_SIMPLE
argument_list|,
comment|/* alternate1 = useLazySimpleEscapes */
literal|true
argument_list|,
comment|/* alternate2 = unused */
literal|false
argument_list|,
comment|/* useExternalBuffer */
literal|false
argument_list|)
expr_stmt|;
name|testVectorDeserializeRow
argument_list|(
name|r
argument_list|,
name|SerializationType
operator|.
name|LAZY_SIMPLE
argument_list|,
comment|/* alternate1 = useLazySimpleEscapes */
literal|true
argument_list|,
comment|/* alternate2 = unused */
literal|false
argument_list|,
comment|/* useExternalBuffer */
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

