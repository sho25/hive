begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|fast
operator|.
name|BinarySortableDeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|fast
operator|.
name|BinarySortableSerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|DeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|fast
operator|.
name|LazySimpleDeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|fast
operator|.
name|LazySimpleSerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|fast
operator|.
name|LazyBinaryDeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|fast
operator|.
name|LazyBinarySerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|SerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Unit test for the vectorized serialize and deserialize row.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorSerDeRow
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
enum|enum
name|SerializationType
block|{
name|NONE
block|,
name|BINARY_SORTABLE
block|,
name|LAZY_BINARY
block|,
name|LAZY_SIMPLE
block|}
name|void
name|deserializeAndVerify
parameter_list|(
name|Output
name|output
parameter_list|,
name|DeserializeRead
name|deserializeRead
parameter_list|,
name|VectorRandomRowSource
name|source
parameter_list|,
name|Object
index|[]
name|expectedRow
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
name|deserializeRead
operator|.
name|set
argument_list|(
name|output
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|PrimitiveCategory
index|[]
name|primitiveCategories
init|=
name|source
operator|.
name|primitiveCategories
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|primitiveCategories
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|expected
init|=
name|expectedRow
index|[
name|i
index|]
decl_stmt|;
name|PrimitiveCategory
name|primitiveCategory
init|=
name|primitiveCategories
index|[
name|i
index|]
decl_stmt|;
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
name|source
operator|.
name|primitiveTypeInfos
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unexpected NULL"
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
name|Boolean
name|value
init|=
name|deserializeRead
operator|.
name|currentBoolean
decl_stmt|;
name|BooleanWritable
name|expectedWritable
init|=
operator|(
name|BooleanWritable
operator|)
name|expected
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expectedWritable
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Boolean field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|BYTE
case|:
block|{
name|Byte
name|value
init|=
name|deserializeRead
operator|.
name|currentByte
decl_stmt|;
name|ByteWritable
name|expectedWritable
init|=
operator|(
name|ByteWritable
operator|)
name|expected
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expectedWritable
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Byte field mismatch (expected "
operator|+
operator|(
name|int
operator|)
name|expected
operator|+
literal|" found "
operator|+
operator|(
name|int
operator|)
name|value
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|SHORT
case|:
block|{
name|Short
name|value
init|=
name|deserializeRead
operator|.
name|currentShort
decl_stmt|;
name|ShortWritable
name|expectedWritable
init|=
operator|(
name|ShortWritable
operator|)
name|expected
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expectedWritable
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Short field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INT
case|:
block|{
name|Integer
name|value
init|=
name|deserializeRead
operator|.
name|currentInt
decl_stmt|;
name|IntWritable
name|expectedWritable
init|=
operator|(
name|IntWritable
operator|)
name|expected
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expectedWritable
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Int field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|LONG
case|:
block|{
name|Long
name|value
init|=
name|deserializeRead
operator|.
name|currentLong
decl_stmt|;
name|LongWritable
name|expectedWritable
init|=
operator|(
name|LongWritable
operator|)
name|expected
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expectedWritable
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Long field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DATE
case|:
block|{
name|DateWritable
name|value
init|=
name|deserializeRead
operator|.
name|currentDateWritable
decl_stmt|;
name|DateWritable
name|expectedWritable
init|=
operator|(
name|DateWritable
operator|)
name|expected
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expectedWritable
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Date field mismatch (expected "
operator|+
name|expected
operator|.
name|toString
argument_list|()
operator|+
literal|" found "
operator|+
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|FLOAT
case|:
block|{
name|Float
name|value
init|=
name|deserializeRead
operator|.
name|currentFloat
decl_stmt|;
name|FloatWritable
name|expectedWritable
init|=
operator|(
name|FloatWritable
operator|)
name|expected
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expectedWritable
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Float field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DOUBLE
case|:
block|{
name|Double
name|value
init|=
name|deserializeRead
operator|.
name|currentDouble
decl_stmt|;
name|DoubleWritable
name|expectedWritable
init|=
operator|(
name|DoubleWritable
operator|)
name|expected
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expectedWritable
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Double field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
case|case
name|BINARY
case|:
block|{
name|byte
index|[]
name|stringBytes
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
operator|+
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|)
decl_stmt|;
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
name|stringBytes
argument_list|)
decl_stmt|;
name|String
name|string
init|=
name|text
operator|.
name|toString
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|STRING
case|:
block|{
name|Text
name|expectedWritable
init|=
operator|(
name|Text
operator|)
name|expected
decl_stmt|;
if|if
condition|(
operator|!
name|string
operator|.
name|equals
argument_list|(
name|expectedWritable
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"String field mismatch (expected '"
operator|+
name|expectedWritable
operator|.
name|toString
argument_list|()
operator|+
literal|"' found '"
operator|+
name|string
operator|+
literal|"')"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CHAR
case|:
block|{
name|HiveChar
name|hiveChar
init|=
operator|new
name|HiveChar
argument_list|(
name|string
argument_list|,
operator|(
operator|(
name|CharTypeInfo
operator|)
name|primitiveTypeInfo
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|HiveCharWritable
name|expectedWritable
init|=
operator|(
name|HiveCharWritable
operator|)
name|expected
decl_stmt|;
if|if
condition|(
operator|!
name|hiveChar
operator|.
name|equals
argument_list|(
name|expectedWritable
operator|.
name|getHiveChar
argument_list|()
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Char field mismatch (expected '"
operator|+
name|expectedWritable
operator|.
name|getHiveChar
argument_list|()
operator|+
literal|"' found '"
operator|+
name|hiveChar
operator|+
literal|"')"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|VARCHAR
case|:
block|{
name|HiveVarchar
name|hiveVarchar
init|=
operator|new
name|HiveVarchar
argument_list|(
name|string
argument_list|,
operator|(
operator|(
name|VarcharTypeInfo
operator|)
name|primitiveTypeInfo
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|HiveVarcharWritable
name|expectedWritable
init|=
operator|(
name|HiveVarcharWritable
operator|)
name|expected
decl_stmt|;
if|if
condition|(
operator|!
name|hiveVarchar
operator|.
name|equals
argument_list|(
name|expectedWritable
operator|.
name|getHiveVarchar
argument_list|()
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Varchar field mismatch (expected '"
operator|+
name|expectedWritable
operator|.
name|getHiveVarchar
argument_list|()
operator|+
literal|"' found '"
operator|+
name|hiveVarchar
operator|+
literal|"')"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|BINARY
case|:
block|{
name|BytesWritable
name|expectedWritable
init|=
operator|(
name|BytesWritable
operator|)
name|expected
decl_stmt|;
if|if
condition|(
name|stringBytes
operator|.
name|length
operator|!=
name|expectedWritable
operator|.
name|getLength
argument_list|()
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Byte Array field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|stringBytes
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|expectedBytes
init|=
name|expectedWritable
operator|.
name|getBytes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
name|stringBytes
operator|.
name|length
condition|;
name|b
operator|++
control|)
block|{
if|if
condition|(
name|stringBytes
index|[
name|b
index|]
operator|!=
name|expectedBytes
index|[
name|b
index|]
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Byte Array field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|stringBytes
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unexpected primitive category "
operator|+
name|primitiveCategory
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|DECIMAL
case|:
block|{
name|HiveDecimal
name|value
init|=
name|deserializeRead
operator|.
name|currentHiveDecimalWritable
operator|.
name|getHiveDecimal
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Decimal field evaluated to NULL"
argument_list|)
expr_stmt|;
block|}
name|HiveDecimalWritable
name|expectedWritable
init|=
operator|(
name|HiveDecimalWritable
operator|)
name|expected
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expectedWritable
operator|.
name|getHiveDecimal
argument_list|()
argument_list|)
condition|)
block|{
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|primitiveTypeInfo
decl_stmt|;
name|int
name|precision
init|=
name|decimalTypeInfo
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
name|int
name|scale
init|=
name|decimalTypeInfo
operator|.
name|getScale
argument_list|()
decl_stmt|;
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Decimal field mismatch (expected "
operator|+
name|expectedWritable
operator|.
name|getHiveDecimal
argument_list|()
operator|+
literal|" found "
operator|+
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|") precision "
operator|+
name|precision
operator|+
literal|", scale "
operator|+
name|scale
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|TIMESTAMP
case|:
block|{
name|Timestamp
name|value
init|=
name|deserializeRead
operator|.
name|currentTimestampWritable
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|TimestampWritable
name|expectedWritable
init|=
operator|(
name|TimestampWritable
operator|)
name|expected
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expectedWritable
operator|.
name|getTimestamp
argument_list|()
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Timestamp field mismatch (expected "
operator|+
name|expectedWritable
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|" found "
operator|+
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
block|{
name|HiveIntervalYearMonth
name|value
init|=
name|deserializeRead
operator|.
name|currentHiveIntervalYearMonthWritable
operator|.
name|getHiveIntervalYearMonth
argument_list|()
decl_stmt|;
name|HiveIntervalYearMonthWritable
name|expectedWritable
init|=
operator|(
name|HiveIntervalYearMonthWritable
operator|)
name|expected
decl_stmt|;
name|HiveIntervalYearMonth
name|expectedValue
init|=
name|expectedWritable
operator|.
name|getHiveIntervalYearMonth
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expectedValue
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"HiveIntervalYearMonth field mismatch (expected "
operator|+
name|expectedValue
operator|+
literal|" found "
operator|+
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
block|{
name|HiveIntervalDayTime
name|value
init|=
name|deserializeRead
operator|.
name|currentHiveIntervalDayTimeWritable
operator|.
name|getHiveIntervalDayTime
argument_list|()
decl_stmt|;
name|HiveIntervalDayTimeWritable
name|expectedWritable
init|=
operator|(
name|HiveIntervalDayTimeWritable
operator|)
name|expected
decl_stmt|;
name|HiveIntervalDayTime
name|expectedValue
init|=
name|expectedWritable
operator|.
name|getHiveIntervalDayTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expectedValue
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"HiveIntervalDayTime field mismatch (expected "
operator|+
name|expectedValue
operator|+
literal|" found "
operator|+
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unexpected primitive category "
operator|+
name|primitiveCategory
argument_list|)
throw|;
block|}
block|}
name|deserializeRead
operator|.
name|extraFieldsCheck
argument_list|()
expr_stmt|;
name|TestCase
operator|.
name|assertTrue
argument_list|(
operator|!
name|deserializeRead
operator|.
name|readBeyondConfiguredFieldsWarned
argument_list|()
argument_list|)
expr_stmt|;
name|TestCase
operator|.
name|assertTrue
argument_list|(
operator|!
name|deserializeRead
operator|.
name|bufferRangeHasExtraDataWarned
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|serializeBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|VectorSerializeRow
name|vectorSerializeRow
parameter_list|,
name|DeserializeRead
name|deserializeRead
parameter_list|,
name|VectorRandomRowSource
name|source
parameter_list|,
name|Object
index|[]
index|[]
name|randomRows
parameter_list|,
name|int
name|firstRandomRowIndex
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
name|Output
name|output
init|=
operator|new
name|Output
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|reset
argument_list|()
expr_stmt|;
name|vectorSerializeRow
operator|.
name|setOutput
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|vectorSerializeRow
operator|.
name|serializeWrite
argument_list|(
name|batch
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedRow
init|=
name|randomRows
index|[
name|firstRandomRowIndex
operator|+
name|i
index|]
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|output
operator|.
name|getData
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|output
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|chars
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
name|chars
index|[
name|c
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|bytes
index|[
name|c
index|]
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
name|deserializeAndVerify
argument_list|(
name|output
argument_list|,
name|deserializeRead
argument_list|,
name|source
argument_list|,
name|expectedRow
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|testVectorSerializeRow
parameter_list|(
name|int
name|caseNum
parameter_list|,
name|Random
name|r
parameter_list|,
name|SerializationType
name|serializationType
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
throws|,
name|SerDeException
block|{
name|String
index|[]
name|emptyScratchTypeNames
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|VectorRandomRowSource
name|source
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|source
operator|.
name|init
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|VectorizedRowBatchCtx
name|batchContext
init|=
operator|new
name|VectorizedRowBatchCtx
argument_list|()
decl_stmt|;
name|batchContext
operator|.
name|init
argument_list|(
name|source
operator|.
name|rowStructObjectInspector
argument_list|()
argument_list|,
name|emptyScratchTypeNames
argument_list|)
expr_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|batchContext
operator|.
name|createVectorizedRowBatch
argument_list|()
decl_stmt|;
name|VectorAssignRow
name|vectorAssignRow
init|=
operator|new
name|VectorAssignRow
argument_list|()
decl_stmt|;
name|vectorAssignRow
operator|.
name|init
argument_list|(
name|source
operator|.
name|typeNames
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|fieldCount
init|=
name|source
operator|.
name|typeNames
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|DeserializeRead
name|deserializeRead
decl_stmt|;
name|SerializeWrite
name|serializeWrite
decl_stmt|;
switch|switch
condition|(
name|serializationType
condition|)
block|{
case|case
name|BINARY_SORTABLE
case|:
name|deserializeRead
operator|=
operator|new
name|BinarySortableDeserializeRead
argument_list|(
name|source
operator|.
name|primitiveTypeInfos
argument_list|()
argument_list|)
expr_stmt|;
name|serializeWrite
operator|=
operator|new
name|BinarySortableSerializeWrite
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
break|break;
case|case
name|LAZY_BINARY
case|:
name|deserializeRead
operator|=
operator|new
name|LazyBinaryDeserializeRead
argument_list|(
name|source
operator|.
name|primitiveTypeInfos
argument_list|()
argument_list|)
expr_stmt|;
name|serializeWrite
operator|=
operator|new
name|LazyBinarySerializeWrite
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
break|break;
case|case
name|LAZY_SIMPLE
case|:
block|{
name|StructObjectInspector
name|rowObjectInspector
init|=
name|source
operator|.
name|rowStructObjectInspector
argument_list|()
decl_stmt|;
name|LazySerDeParameters
name|lazySerDeParams
init|=
name|getSerDeParams
argument_list|(
name|rowObjectInspector
argument_list|)
decl_stmt|;
name|byte
name|separator
init|=
operator|(
name|byte
operator|)
literal|'\t'
decl_stmt|;
name|deserializeRead
operator|=
operator|new
name|LazySimpleDeserializeRead
argument_list|(
name|source
operator|.
name|primitiveTypeInfos
argument_list|()
argument_list|,
name|separator
argument_list|,
name|lazySerDeParams
argument_list|)
expr_stmt|;
name|serializeWrite
operator|=
operator|new
name|LazySimpleSerializeWrite
argument_list|(
name|fieldCount
argument_list|,
name|separator
argument_list|,
name|lazySerDeParams
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unknown serialization type "
operator|+
name|serializationType
argument_list|)
throw|;
block|}
name|VectorSerializeRow
name|vectorSerializeRow
init|=
operator|new
name|VectorSerializeRow
argument_list|(
name|serializeWrite
argument_list|)
decl_stmt|;
name|vectorSerializeRow
operator|.
name|init
argument_list|(
name|source
operator|.
name|typeNames
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
index|[]
name|randomRows
init|=
name|source
operator|.
name|randomRows
argument_list|(
literal|100000
argument_list|)
decl_stmt|;
name|int
name|firstRandomRowIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomRows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
index|[]
name|row
init|=
name|randomRows
index|[
name|i
index|]
decl_stmt|;
name|vectorAssignRow
operator|.
name|assignRow
argument_list|(
name|batch
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|++
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|size
operator|==
name|batch
operator|.
name|DEFAULT_SIZE
condition|)
block|{
name|serializeBatch
argument_list|(
name|batch
argument_list|,
name|vectorSerializeRow
argument_list|,
name|deserializeRead
argument_list|,
name|source
argument_list|,
name|randomRows
argument_list|,
name|firstRandomRowIndex
argument_list|)
expr_stmt|;
name|firstRandomRowIndex
operator|=
name|i
operator|+
literal|1
expr_stmt|;
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|batch
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|serializeBatch
argument_list|(
name|batch
argument_list|,
name|vectorSerializeRow
argument_list|,
name|deserializeRead
argument_list|,
name|source
argument_list|,
name|randomRows
argument_list|,
name|firstRandomRowIndex
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|examineBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|VectorExtractRow
name|vectorExtractRow
parameter_list|,
name|Object
index|[]
index|[]
name|randomRows
parameter_list|,
name|int
name|firstRandomRowIndex
parameter_list|)
block|{
name|int
name|rowSize
init|=
name|vectorExtractRow
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|Object
index|[]
name|row
init|=
operator|new
name|Object
index|[
name|rowSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
name|vectorExtractRow
operator|.
name|extractRow
argument_list|(
name|batch
argument_list|,
name|i
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedRow
init|=
name|randomRows
index|[
name|firstRandomRowIndex
operator|+
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|rowSize
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
name|row
index|[
name|c
index|]
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Unexpected NULL from extractRow"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|row
index|[
name|c
index|]
operator|.
name|equals
argument_list|(
name|expectedRow
index|[
name|c
index|]
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Row "
operator|+
operator|(
name|firstRandomRowIndex
operator|+
name|i
operator|)
operator|+
literal|" and column "
operator|+
name|c
operator|+
literal|" mismatch"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Output
name|serializeRow
parameter_list|(
name|Object
index|[]
name|row
parameter_list|,
name|VectorRandomRowSource
name|source
parameter_list|,
name|SerializeWrite
name|serializeWrite
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
name|Output
name|output
init|=
operator|new
name|Output
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|set
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
init|=
name|source
operator|.
name|primitiveTypeInfos
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|primitiveTypeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|object
init|=
name|row
index|[
name|i
index|]
decl_stmt|;
name|PrimitiveCategory
name|primitiveCategory
init|=
name|primitiveTypeInfos
index|[
name|i
index|]
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
name|BooleanWritable
name|expectedWritable
init|=
operator|(
name|BooleanWritable
operator|)
name|object
decl_stmt|;
name|boolean
name|value
init|=
name|expectedWritable
operator|.
name|get
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeBoolean
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BYTE
case|:
block|{
name|ByteWritable
name|expectedWritable
init|=
operator|(
name|ByteWritable
operator|)
name|object
decl_stmt|;
name|byte
name|value
init|=
name|expectedWritable
operator|.
name|get
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeByte
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SHORT
case|:
block|{
name|ShortWritable
name|expectedWritable
init|=
operator|(
name|ShortWritable
operator|)
name|object
decl_stmt|;
name|short
name|value
init|=
name|expectedWritable
operator|.
name|get
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeShort
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INT
case|:
block|{
name|IntWritable
name|expectedWritable
init|=
operator|(
name|IntWritable
operator|)
name|object
decl_stmt|;
name|int
name|value
init|=
name|expectedWritable
operator|.
name|get
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeInt
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LONG
case|:
block|{
name|LongWritable
name|expectedWritable
init|=
operator|(
name|LongWritable
operator|)
name|object
decl_stmt|;
name|long
name|value
init|=
name|expectedWritable
operator|.
name|get
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DATE
case|:
block|{
name|DateWritable
name|expectedWritable
init|=
operator|(
name|DateWritable
operator|)
name|object
decl_stmt|;
name|Date
name|value
init|=
name|expectedWritable
operator|.
name|get
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeDate
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FLOAT
case|:
block|{
name|FloatWritable
name|expectedWritable
init|=
operator|(
name|FloatWritable
operator|)
name|object
decl_stmt|;
name|float
name|value
init|=
name|expectedWritable
operator|.
name|get
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeFloat
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DOUBLE
case|:
block|{
name|DoubleWritable
name|expectedWritable
init|=
operator|(
name|DoubleWritable
operator|)
name|object
decl_stmt|;
name|double
name|value
init|=
name|expectedWritable
operator|.
name|get
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STRING
case|:
block|{
name|Text
name|text
init|=
operator|(
name|Text
operator|)
name|object
decl_stmt|;
name|serializeWrite
operator|.
name|writeString
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CHAR
case|:
block|{
name|HiveCharWritable
name|expectedWritable
init|=
operator|(
name|HiveCharWritable
operator|)
name|object
decl_stmt|;
name|HiveChar
name|value
init|=
name|expectedWritable
operator|.
name|getHiveChar
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeHiveChar
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VARCHAR
case|:
block|{
name|HiveVarcharWritable
name|expectedWritable
init|=
operator|(
name|HiveVarcharWritable
operator|)
name|object
decl_stmt|;
name|HiveVarchar
name|value
init|=
name|expectedWritable
operator|.
name|getHiveVarchar
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeHiveVarchar
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BINARY
case|:
block|{
name|BytesWritable
name|expectedWritable
init|=
operator|(
name|BytesWritable
operator|)
name|object
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|expectedWritable
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|expectedWritable
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeBinary
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
block|{
name|TimestampWritable
name|expectedWritable
init|=
operator|(
name|TimestampWritable
operator|)
name|object
decl_stmt|;
name|Timestamp
name|value
init|=
name|expectedWritable
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeTimestamp
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
block|{
name|HiveIntervalYearMonthWritable
name|expectedWritable
init|=
operator|(
name|HiveIntervalYearMonthWritable
operator|)
name|object
decl_stmt|;
name|HiveIntervalYearMonth
name|value
init|=
name|expectedWritable
operator|.
name|getHiveIntervalYearMonth
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeHiveIntervalYearMonth
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
block|{
name|HiveIntervalDayTimeWritable
name|expectedWritable
init|=
operator|(
name|HiveIntervalDayTimeWritable
operator|)
name|object
decl_stmt|;
name|HiveIntervalDayTime
name|value
init|=
name|expectedWritable
operator|.
name|getHiveIntervalDayTime
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeHiveIntervalDayTime
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DECIMAL
case|:
block|{
name|HiveDecimalWritable
name|expectedWritable
init|=
operator|(
name|HiveDecimalWritable
operator|)
name|object
decl_stmt|;
name|HiveDecimal
name|value
init|=
name|expectedWritable
operator|.
name|getHiveDecimal
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeHiveDecimal
argument_list|(
name|value
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|primitiveTypeInfos
index|[
name|i
index|]
operator|)
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unexpected primitive category "
operator|+
name|primitiveCategory
argument_list|)
throw|;
block|}
block|}
return|return
name|output
return|;
block|}
specifier|private
name|Properties
name|createProperties
parameter_list|(
name|String
name|fieldNames
parameter_list|,
name|String
name|fieldTypes
parameter_list|)
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
name|fieldTypes
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|,
literal|"NULL"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|LazySerDeParameters
name|getSerDeParams
parameter_list|(
name|StructObjectInspector
name|rowObjectInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
name|String
name|fieldNames
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldNames
argument_list|(
name|rowObjectInspector
argument_list|)
decl_stmt|;
name|String
name|fieldTypes
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldTypes
argument_list|(
name|rowObjectInspector
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createProperties
argument_list|(
name|fieldNames
argument_list|,
name|fieldTypes
argument_list|)
decl_stmt|;
return|return
operator|new
name|LazySerDeParameters
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|,
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|void
name|testVectorDeserializeRow
parameter_list|(
name|int
name|caseNum
parameter_list|,
name|Random
name|r
parameter_list|,
name|SerializationType
name|serializationType
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
throws|,
name|SerDeException
block|{
name|String
index|[]
name|emptyScratchTypeNames
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|VectorRandomRowSource
name|source
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|source
operator|.
name|init
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|VectorizedRowBatchCtx
name|batchContext
init|=
operator|new
name|VectorizedRowBatchCtx
argument_list|()
decl_stmt|;
name|batchContext
operator|.
name|init
argument_list|(
name|source
operator|.
name|rowStructObjectInspector
argument_list|()
argument_list|,
name|emptyScratchTypeNames
argument_list|)
expr_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|batchContext
operator|.
name|createVectorizedRowBatch
argument_list|()
decl_stmt|;
comment|// junk the destination for the 1st pass
for|for
control|(
name|ColumnVector
name|cv
range|:
name|batch
operator|.
name|cols
control|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|cv
operator|.
name|isNull
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|int
name|fieldCount
init|=
name|source
operator|.
name|typeNames
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|DeserializeRead
name|deserializeRead
decl_stmt|;
name|SerializeWrite
name|serializeWrite
decl_stmt|;
switch|switch
condition|(
name|serializationType
condition|)
block|{
case|case
name|BINARY_SORTABLE
case|:
name|deserializeRead
operator|=
operator|new
name|BinarySortableDeserializeRead
argument_list|(
name|source
operator|.
name|primitiveTypeInfos
argument_list|()
argument_list|)
expr_stmt|;
name|serializeWrite
operator|=
operator|new
name|BinarySortableSerializeWrite
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
break|break;
case|case
name|LAZY_BINARY
case|:
name|deserializeRead
operator|=
operator|new
name|LazyBinaryDeserializeRead
argument_list|(
name|source
operator|.
name|primitiveTypeInfos
argument_list|()
argument_list|)
expr_stmt|;
name|serializeWrite
operator|=
operator|new
name|LazyBinarySerializeWrite
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
break|break;
case|case
name|LAZY_SIMPLE
case|:
block|{
name|StructObjectInspector
name|rowObjectInspector
init|=
name|source
operator|.
name|rowStructObjectInspector
argument_list|()
decl_stmt|;
name|LazySerDeParameters
name|lazySerDeParams
init|=
name|getSerDeParams
argument_list|(
name|rowObjectInspector
argument_list|)
decl_stmt|;
name|byte
name|separator
init|=
operator|(
name|byte
operator|)
literal|'\t'
decl_stmt|;
name|deserializeRead
operator|=
operator|new
name|LazySimpleDeserializeRead
argument_list|(
name|source
operator|.
name|primitiveTypeInfos
argument_list|()
argument_list|,
name|separator
argument_list|,
name|lazySerDeParams
argument_list|)
expr_stmt|;
name|serializeWrite
operator|=
operator|new
name|LazySimpleSerializeWrite
argument_list|(
name|fieldCount
argument_list|,
name|separator
argument_list|,
name|lazySerDeParams
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unknown serialization type "
operator|+
name|serializationType
argument_list|)
throw|;
block|}
name|VectorDeserializeRow
name|vectorDeserializeRow
init|=
operator|new
name|VectorDeserializeRow
argument_list|(
name|deserializeRead
argument_list|)
decl_stmt|;
name|vectorDeserializeRow
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// junk the destination for the 1st pass
for|for
control|(
name|ColumnVector
name|cv
range|:
name|batch
operator|.
name|cols
control|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|cv
operator|.
name|isNull
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cv
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
name|VectorExtractRow
name|vectorExtractRow
init|=
operator|new
name|VectorExtractRow
argument_list|()
decl_stmt|;
name|vectorExtractRow
operator|.
name|init
argument_list|(
name|source
operator|.
name|typeNames
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
index|[]
name|randomRows
init|=
name|source
operator|.
name|randomRows
argument_list|(
literal|100000
argument_list|)
decl_stmt|;
name|int
name|firstRandomRowIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomRows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
index|[]
name|row
init|=
name|randomRows
index|[
name|i
index|]
decl_stmt|;
name|Output
name|output
init|=
name|serializeRow
argument_list|(
name|row
argument_list|,
name|source
argument_list|,
name|serializeWrite
argument_list|)
decl_stmt|;
name|vectorDeserializeRow
operator|.
name|setBytes
argument_list|(
name|output
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|vectorDeserializeRow
operator|.
name|deserialize
argument_list|(
name|batch
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|++
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|size
operator|==
name|batch
operator|.
name|DEFAULT_SIZE
condition|)
block|{
name|examineBatch
argument_list|(
name|batch
argument_list|,
name|vectorExtractRow
argument_list|,
name|randomRows
argument_list|,
name|firstRandomRowIndex
argument_list|)
expr_stmt|;
name|firstRandomRowIndex
operator|=
name|i
operator|+
literal|1
expr_stmt|;
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|batch
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|examineBatch
argument_list|(
name|batch
argument_list|,
name|vectorExtractRow
argument_list|,
name|randomRows
argument_list|,
name|firstRandomRowIndex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testVectorSerDeRow
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|5678
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
literal|10
condition|;
name|c
operator|++
control|)
block|{
name|testVectorSerializeRow
argument_list|(
name|c
argument_list|,
name|r
argument_list|,
name|SerializationType
operator|.
name|BINARY_SORTABLE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
literal|10
condition|;
name|c
operator|++
control|)
block|{
name|testVectorSerializeRow
argument_list|(
name|c
argument_list|,
name|r
argument_list|,
name|SerializationType
operator|.
name|LAZY_BINARY
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
literal|10
condition|;
name|c
operator|++
control|)
block|{
name|testVectorSerializeRow
argument_list|(
name|c
argument_list|,
name|r
argument_list|,
name|SerializationType
operator|.
name|LAZY_SIMPLE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
literal|10
condition|;
name|c
operator|++
control|)
block|{
name|testVectorDeserializeRow
argument_list|(
name|c
argument_list|,
name|r
argument_list|,
name|SerializationType
operator|.
name|BINARY_SORTABLE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
literal|10
condition|;
name|c
operator|++
control|)
block|{
name|testVectorDeserializeRow
argument_list|(
name|c
argument_list|,
name|r
argument_list|,
name|SerializationType
operator|.
name|LAZY_BINARY
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
literal|10
condition|;
name|c
operator|++
control|)
block|{
name|testVectorDeserializeRow
argument_list|(
name|c
argument_list|,
name|r
argument_list|,
name|SerializationType
operator|.
name|LAZY_SIMPLE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

