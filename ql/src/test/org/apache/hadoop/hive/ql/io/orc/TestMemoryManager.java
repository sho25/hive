begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|BaseMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doubleThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_comment
comment|/**  * Test the ORC memory manager.  */
end_comment

begin_class
specifier|public
class|class
name|TestMemoryManager
block|{
specifier|private
specifier|static
specifier|final
name|double
name|ERROR
init|=
literal|0.000001
decl_stmt|;
specifier|private
specifier|static
class|class
name|NullCallback
implements|implements
name|MemoryManager
operator|.
name|Callback
block|{
specifier|public
name|boolean
name|checkMemory
parameter_list|(
name|double
name|newScale
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MemoryManager
name|mgr
init|=
operator|new
name|MemoryManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|NullCallback
name|callback
init|=
operator|new
name|NullCallback
argument_list|()
decl_stmt|;
name|long
name|poolSize
init|=
name|mgr
operator|.
name|getTotalMemoryPool
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
operator|*
literal|0.5d
argument_list|)
argument_list|,
name|poolSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|mgr
operator|.
name|getAllocationScale
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addWriter
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
literal|1000
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|mgr
operator|.
name|getAllocationScale
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addWriter
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|poolSize
operator|/
literal|2
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|mgr
operator|.
name|getAllocationScale
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addWriter
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|poolSize
operator|/
literal|2
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|mgr
operator|.
name|getAllocationScale
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addWriter
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p3"
argument_list|)
argument_list|,
name|poolSize
operator|/
literal|2
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.6666667
argument_list|,
name|mgr
operator|.
name|getAllocationScale
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addWriter
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p4"
argument_list|)
argument_list|,
name|poolSize
operator|/
literal|2
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|mgr
operator|.
name|getAllocationScale
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addWriter
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p4"
argument_list|)
argument_list|,
literal|3
operator|*
name|poolSize
operator|/
literal|2
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.3333333
argument_list|,
name|mgr
operator|.
name|getAllocationScale
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|removeWriter
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|removeWriter
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|mgr
operator|.
name|getAllocationScale
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|removeWriter
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|mgr
operator|.
name|getAllocationScale
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.exec.orc.memory.pool"
argument_list|,
literal|"0.9"
argument_list|)
expr_stmt|;
name|MemoryManager
name|mgr
init|=
operator|new
name|MemoryManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|mem
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Memory = "
operator|+
name|mem
argument_list|)
expr_stmt|;
name|long
name|pool
init|=
name|mgr
operator|.
name|getTotalMemoryPool
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Pool too small: "
operator|+
name|pool
argument_list|,
name|mem
operator|*
literal|0.899
operator|<
name|pool
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Pool too big: "
operator|+
name|pool
argument_list|,
name|pool
operator|<
name|mem
operator|*
literal|0.901
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|DoubleMatcher
extends|extends
name|BaseMatcher
argument_list|<
name|Double
argument_list|>
block|{
specifier|final
name|double
name|expected
decl_stmt|;
specifier|final
name|double
name|error
decl_stmt|;
name|DoubleMatcher
parameter_list|(
name|double
name|expected
parameter_list|,
name|double
name|error
parameter_list|)
block|{
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|val
parameter_list|)
block|{
name|double
name|dbl
init|=
operator|(
name|Double
operator|)
name|val
decl_stmt|;
return|return
name|Math
operator|.
name|abs
argument_list|(
name|dbl
operator|-
name|expected
argument_list|)
operator|<=
name|error
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|"not sufficiently close to "
argument_list|)
expr_stmt|;
name|description
operator|.
name|appendText
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|DoubleMatcher
name|closeTo
parameter_list|(
name|double
name|value
parameter_list|,
name|double
name|error
parameter_list|)
block|{
return|return
operator|new
name|DoubleMatcher
argument_list|(
name|value
argument_list|,
name|error
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCallback
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MemoryManager
name|mgr
init|=
operator|new
name|MemoryManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|pool
init|=
name|mgr
operator|.
name|getTotalMemoryPool
argument_list|()
decl_stmt|;
name|MemoryManager
operator|.
name|Callback
index|[]
name|calls
init|=
operator|new
name|MemoryManager
operator|.
name|Callback
index|[
literal|20
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|calls
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|calls
index|[
name|i
index|]
operator|=
name|mock
argument_list|(
name|MemoryManager
operator|.
name|Callback
operator|.
name|class
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|pool
operator|/
literal|4
argument_list|,
name|calls
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// add enough rows to get the memory manager to check the limits
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
operator|++
name|i
control|)
block|{
name|mgr
operator|.
name|addedRow
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|call
init|=
literal|0
init|;
name|call
operator|<
name|calls
operator|.
name|length
condition|;
operator|++
name|call
control|)
block|{
name|verify
argument_list|(
name|calls
index|[
name|call
index|]
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|checkMemory
argument_list|(
name|doubleThat
argument_list|(
name|closeTo
argument_list|(
literal|0.2
argument_list|,
name|ERROR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

