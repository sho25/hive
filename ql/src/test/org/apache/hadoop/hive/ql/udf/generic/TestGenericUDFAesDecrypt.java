begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredJavaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestGenericUDFAesDecrypt
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAesDec128ConstStr
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFAesDecrypt
name|udf
init|=
operator|new
name|GenericUDFAesDecrypt
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
decl_stmt|;
name|Text
name|keyWr
init|=
operator|new
name|Text
argument_list|(
literal|"1234567890123456"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|keyWr
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"y6Ss+zCYObpCbgfWfyNWTw=="
argument_list|,
name|keyWr
argument_list|,
literal|"ABC"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"BQGHoM3lqYcsurCRq3PlUw=="
argument_list|,
name|keyWr
argument_list|,
literal|""
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// null
name|runAndVerifyStr
argument_list|(
literal|null
argument_list|,
name|keyWr
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAesDec256ConstStr
parameter_list|()
throws|throws
name|HiveException
throws|,
name|NoSuchAlgorithmException
block|{
name|int
name|maxKeyLen
init|=
name|Cipher
operator|.
name|getMaxAllowedKeyLength
argument_list|(
literal|"AES"
argument_list|)
decl_stmt|;
comment|// skip the test if Java Cryptography Extension (JCE) Unlimited Strength
comment|// Jurisdiction Policy Files not installed
if|if
condition|(
name|maxKeyLen
operator|<
literal|256
condition|)
block|{
return|return;
block|}
name|GenericUDFAesDecrypt
name|udf
init|=
operator|new
name|GenericUDFAesDecrypt
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
decl_stmt|;
name|Text
name|keyWr
init|=
operator|new
name|Text
argument_list|(
literal|"1234567890123456"
operator|+
literal|"1234567890123456"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|keyWr
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"nYfCuJeRd5eD60yXDw7WEA=="
argument_list|,
name|keyWr
argument_list|,
literal|"ABC"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"mVClVqZ6W4VF6b842FOgCA=="
argument_list|,
name|keyWr
argument_list|,
literal|""
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// null
name|runAndVerifyStr
argument_list|(
literal|null
argument_list|,
name|keyWr
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAesDec128Str
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFAesDecrypt
name|udf
init|=
operator|new
name|GenericUDFAesDecrypt
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|Text
name|keyWr
init|=
operator|new
name|Text
argument_list|(
literal|"1234567890123456"
argument_list|)
decl_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"y6Ss+zCYObpCbgfWfyNWTw=="
argument_list|,
name|keyWr
argument_list|,
literal|"ABC"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"BQGHoM3lqYcsurCRq3PlUw=="
argument_list|,
name|keyWr
argument_list|,
literal|""
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// null
name|runAndVerifyStr
argument_list|(
literal|null
argument_list|,
name|keyWr
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAesDec128ConstBin
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFAesDecrypt
name|udf
init|=
operator|new
name|GenericUDFAesDecrypt
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
decl_stmt|;
name|BytesWritable
name|keyWr
init|=
operator|new
name|BytesWritable
argument_list|(
literal|"1234567890123456"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|binaryTypeInfo
argument_list|,
name|keyWr
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerifyBin
argument_list|(
literal|"y6Ss+zCYObpCbgfWfyNWTw=="
argument_list|,
name|keyWr
argument_list|,
literal|"ABC"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyBin
argument_list|(
literal|"BQGHoM3lqYcsurCRq3PlUw=="
argument_list|,
name|keyWr
argument_list|,
literal|""
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// null
name|runAndVerifyBin
argument_list|(
literal|null
argument_list|,
name|keyWr
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAesDec128Bin
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFAesDecrypt
name|udf
init|=
operator|new
name|GenericUDFAesDecrypt
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|BytesWritable
name|keyWr
init|=
operator|new
name|BytesWritable
argument_list|(
literal|"1234567890123456"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|runAndVerifyBin
argument_list|(
literal|"y6Ss+zCYObpCbgfWfyNWTw=="
argument_list|,
name|keyWr
argument_list|,
literal|"ABC"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyBin
argument_list|(
literal|"BQGHoM3lqYcsurCRq3PlUw=="
argument_list|,
name|keyWr
argument_list|,
literal|""
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// null
name|runAndVerifyBin
argument_list|(
literal|null
argument_list|,
name|keyWr
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAesDec192Bin
parameter_list|()
throws|throws
name|HiveException
throws|,
name|NoSuchAlgorithmException
block|{
name|int
name|maxKeyLen
init|=
name|Cipher
operator|.
name|getMaxAllowedKeyLength
argument_list|(
literal|"AES"
argument_list|)
decl_stmt|;
comment|// skip the test if Java Cryptography Extension (JCE) Unlimited Strength
comment|// Jurisdiction Policy Files not installed
if|if
condition|(
name|maxKeyLen
operator|<
literal|192
condition|)
block|{
return|return;
block|}
name|GenericUDFAesDecrypt
name|udf
init|=
operator|new
name|GenericUDFAesDecrypt
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|BytesWritable
name|keyWr
init|=
operator|new
name|BytesWritable
argument_list|(
operator|(
literal|"1234567890123456"
operator|+
literal|"12345678"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|runAndVerifyBin
argument_list|(
literal|"ucvvpP9r2/LfQ6BilQuFtA=="
argument_list|,
name|keyWr
argument_list|,
literal|"ABC"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerifyBin
argument_list|(
literal|"KqMT3cF6VwSISMaUVUB4Qw=="
argument_list|,
name|keyWr
argument_list|,
literal|""
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// null
name|runAndVerifyBin
argument_list|(
literal|null
argument_list|,
name|keyWr
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAesDecKeyNullConstStr
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFAesDecrypt
name|udf
init|=
operator|new
name|GenericUDFAesDecrypt
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
decl_stmt|;
name|Text
name|keyWr
init|=
literal|null
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|keyWr
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"y6Ss+zCYObpCbgfWfyNWTw=="
argument_list|,
name|keyWr
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAesDecKeyNullStr
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFAesDecrypt
name|udf
init|=
operator|new
name|GenericUDFAesDecrypt
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|Text
name|keyWr
init|=
literal|null
decl_stmt|;
name|runAndVerifyStr
argument_list|(
literal|"y6Ss+zCYObpCbgfWfyNWTw=="
argument_list|,
name|keyWr
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAesDecKeyNullConstBin
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFAesDecrypt
name|udf
init|=
operator|new
name|GenericUDFAesDecrypt
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
decl_stmt|;
name|BytesWritable
name|keyWr
init|=
literal|null
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|binaryTypeInfo
argument_list|,
name|keyWr
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerifyBin
argument_list|(
literal|"y6Ss+zCYObpCbgfWfyNWTw=="
argument_list|,
name|keyWr
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAesDecKeyNullBin
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFAesDecrypt
name|udf
init|=
operator|new
name|GenericUDFAesDecrypt
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|BytesWritable
name|keyWr
init|=
literal|null
decl_stmt|;
name|runAndVerifyBin
argument_list|(
literal|"y6Ss+zCYObpCbgfWfyNWTw=="
argument_list|,
name|keyWr
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runAndVerifyStr
parameter_list|(
name|String
name|strBase64
parameter_list|,
name|Text
name|keyWr
parameter_list|,
name|String
name|expResult
parameter_list|,
name|GenericUDFAesDecrypt
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
name|DeferredObject
name|valueObj0
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|strBase64
operator|!=
literal|null
condition|?
operator|new
name|BytesWritable
argument_list|(
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|strBase64
argument_list|)
argument_list|)
else|:
literal|null
argument_list|)
decl_stmt|;
name|DeferredObject
name|valueObj1
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|keyWr
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
block|{
name|valueObj0
block|,
name|valueObj1
block|}
decl_stmt|;
name|BytesWritable
name|output
init|=
operator|(
name|BytesWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|String
name|expResultHex
init|=
name|expResult
operator|==
literal|null
condition|?
literal|null
else|:
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|expResult
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"aes_decrypt() test "
argument_list|,
name|expResultHex
argument_list|,
name|output
operator|!=
literal|null
condition|?
name|copyBytesAndHex
argument_list|(
name|output
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runAndVerifyBin
parameter_list|(
name|String
name|strBase64
parameter_list|,
name|BytesWritable
name|keyWr
parameter_list|,
name|String
name|expResult
parameter_list|,
name|GenericUDFAesDecrypt
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
name|DeferredObject
name|valueObj0
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|strBase64
operator|!=
literal|null
condition|?
operator|new
name|BytesWritable
argument_list|(
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|strBase64
argument_list|)
argument_list|)
else|:
literal|null
argument_list|)
decl_stmt|;
name|DeferredObject
name|valueObj1
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|keyWr
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
block|{
name|valueObj0
block|,
name|valueObj1
block|}
decl_stmt|;
name|BytesWritable
name|output
init|=
operator|(
name|BytesWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|String
name|expResultHex
init|=
name|expResult
operator|==
literal|null
condition|?
literal|null
else|:
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|expResult
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"aes_decrypt() test "
argument_list|,
name|expResultHex
argument_list|,
name|output
operator|!=
literal|null
condition|?
name|copyBytesAndHex
argument_list|(
name|output
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|copyBytesAndHex
parameter_list|(
name|BytesWritable
name|bw
parameter_list|)
block|{
name|int
name|size
init|=
name|bw
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bw
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|bytes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

