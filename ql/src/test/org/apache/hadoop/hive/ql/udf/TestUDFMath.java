begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestUDFMath
block|{
specifier|private
name|HiveDecimalWritable
name|input
init|=
literal|null
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testAcos
parameter_list|()
throws|throws
name|HiveException
block|{
name|UDFAcos
name|udf
init|=
operator|new
name|UDFAcos
argument_list|()
decl_stmt|;
name|input
operator|=
name|createDecimal
argument_list|(
literal|"0.716"
argument_list|)
expr_stmt|;
name|DoubleWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.7727408115633954
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsin
parameter_list|()
throws|throws
name|HiveException
block|{
name|UDFAsin
name|udf
init|=
operator|new
name|UDFAsin
argument_list|()
decl_stmt|;
name|input
operator|=
name|createDecimal
argument_list|(
literal|"0.716"
argument_list|)
expr_stmt|;
name|DoubleWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.7980555152315012
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAtan
parameter_list|()
throws|throws
name|HiveException
block|{
name|UDFAtan
name|udf
init|=
operator|new
name|UDFAtan
argument_list|()
decl_stmt|;
name|input
operator|=
name|createDecimal
argument_list|(
literal|"1.0"
argument_list|)
expr_stmt|;
name|DoubleWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.7853981633974483
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCos
parameter_list|()
throws|throws
name|HiveException
block|{
name|UDFCos
name|udf
init|=
operator|new
name|UDFCos
argument_list|()
decl_stmt|;
name|input
operator|=
name|createDecimal
argument_list|(
literal|"0.7727408115633954"
argument_list|)
expr_stmt|;
name|DoubleWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.716
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSin
parameter_list|()
throws|throws
name|HiveException
block|{
name|UDFSin
name|udf
init|=
operator|new
name|UDFSin
argument_list|()
decl_stmt|;
name|input
operator|=
name|createDecimal
argument_list|(
literal|"0.7980555152315012"
argument_list|)
expr_stmt|;
name|DoubleWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.716
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTan
parameter_list|()
throws|throws
name|HiveException
block|{
name|UDFTan
name|udf
init|=
operator|new
name|UDFTan
argument_list|()
decl_stmt|;
name|input
operator|=
name|createDecimal
argument_list|(
literal|"0.7853981633974483"
argument_list|)
expr_stmt|;
name|DoubleWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExp
parameter_list|()
throws|throws
name|HiveException
block|{
name|UDFExp
name|udf
init|=
operator|new
name|UDFExp
argument_list|()
decl_stmt|;
name|input
operator|=
name|createDecimal
argument_list|(
literal|"2.0"
argument_list|)
expr_stmt|;
name|DoubleWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7.38905609893065
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLn
parameter_list|()
throws|throws
name|HiveException
block|{
name|UDFLn
name|udf
init|=
operator|new
name|UDFLn
argument_list|()
decl_stmt|;
name|input
operator|=
name|createDecimal
argument_list|(
literal|"7.38905609893065"
argument_list|)
expr_stmt|;
name|DoubleWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLog
parameter_list|()
throws|throws
name|HiveException
block|{
name|UDFLog
name|udf
init|=
operator|new
name|UDFLog
argument_list|()
decl_stmt|;
name|input
operator|=
name|createDecimal
argument_list|(
literal|"7.38905609893065"
argument_list|)
expr_stmt|;
name|DoubleWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
name|res
operator|=
name|udf
operator|.
name|evaluate
argument_list|(
name|createDecimal
argument_list|(
literal|"3.0"
argument_list|)
argument_list|,
name|createDecimal
argument_list|(
literal|"9.0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLog10
parameter_list|()
throws|throws
name|HiveException
block|{
name|UDFLog10
name|udf
init|=
operator|new
name|UDFLog10
argument_list|()
decl_stmt|;
name|input
operator|=
name|createDecimal
argument_list|(
literal|"100.0"
argument_list|)
expr_stmt|;
name|DoubleWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLog2
parameter_list|()
throws|throws
name|HiveException
block|{
name|UDFLog2
name|udf
init|=
operator|new
name|UDFLog2
argument_list|()
decl_stmt|;
name|input
operator|=
name|createDecimal
argument_list|(
literal|"8.0"
argument_list|)
expr_stmt|;
name|DoubleWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3.0
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRadians
parameter_list|()
throws|throws
name|HiveException
block|{
name|UDFRadians
name|udf
init|=
operator|new
name|UDFRadians
argument_list|()
decl_stmt|;
name|input
operator|=
name|createDecimal
argument_list|(
literal|"45.0"
argument_list|)
expr_stmt|;
name|DoubleWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.7853981633974483
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDegrees
parameter_list|()
throws|throws
name|HiveException
block|{
name|UDFDegrees
name|udf
init|=
operator|new
name|UDFDegrees
argument_list|()
decl_stmt|;
name|input
operator|=
name|createDecimal
argument_list|(
literal|"0.7853981633974483"
argument_list|)
expr_stmt|;
name|DoubleWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|45.0
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSqrt
parameter_list|()
throws|throws
name|HiveException
block|{
name|UDFSqrt
name|udf
init|=
operator|new
name|UDFSqrt
argument_list|()
decl_stmt|;
name|input
operator|=
name|createDecimal
argument_list|(
literal|"49.0"
argument_list|)
expr_stmt|;
name|DoubleWritable
name|res
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7.0
argument_list|,
name|res
operator|.
name|get
argument_list|()
argument_list|,
literal|0.000001
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HiveDecimalWritable
name|createDecimal
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
operator|new
name|HiveDecimalWritable
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

