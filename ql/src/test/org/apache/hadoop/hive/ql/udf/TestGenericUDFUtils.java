begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestGenericUDFUtils
extends|extends
name|TestCase
block|{
annotation|@
name|Test
specifier|public
name|void
name|testFindText
parameter_list|()
throws|throws
name|Exception
block|{
comment|// http://dev.mysql.com/doc/refman/5.1/en/string-functions.html#function_locate
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foobarbar"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foobarbar"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foobarbar"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"xbar"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foobarbar"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foobarbar"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foobarbar"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foobarbar"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foobarbar"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
comment|//Unicode case.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|"НАСТРОЕние"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"Р"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|"НАСТРОЕние НАСТРОЕние"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"Р"
argument_list|)
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
comment|//surrogate pair case
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|"123\uD801\uDC00456"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"\uD801\uDC00"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|GenericUDFUtils
operator|.
name|findText
argument_list|(
operator|new
name|Text
argument_list|(
literal|"123\uD801\uDC00456"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"4"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

