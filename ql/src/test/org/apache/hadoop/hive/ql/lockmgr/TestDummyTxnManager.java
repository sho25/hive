begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLockObject
operator|.
name|HiveLockObjectData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|TestDummyTxnManager
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDedupLockObjects
parameter_list|()
block|{
name|List
argument_list|<
name|HiveLockObj
argument_list|>
name|lockObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveLockObj
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|path1
init|=
literal|"path1"
decl_stmt|;
name|String
name|path2
init|=
literal|"path2"
decl_stmt|;
name|HiveLockObjectData
name|lockData1
init|=
operator|new
name|HiveLockObjectData
argument_list|(
literal|"query1"
argument_list|,
literal|"1"
argument_list|,
literal|"IMPLICIT"
argument_list|,
literal|"drop table table1"
argument_list|)
decl_stmt|;
name|HiveLockObjectData
name|lockData2
init|=
operator|new
name|HiveLockObjectData
argument_list|(
literal|"query1"
argument_list|,
literal|"1"
argument_list|,
literal|"IMPLICIT"
argument_list|,
literal|"drop table table1"
argument_list|)
decl_stmt|;
comment|// Start with the following locks:
comment|// [path1, shared]
comment|// [path1, exclusive]
comment|// [path2, shared]
comment|// [path2, shared]
comment|// [path2, shared]
name|lockObjs
operator|.
name|add
argument_list|(
operator|new
name|HiveLockObj
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
name|path1
argument_list|,
name|lockData1
argument_list|)
argument_list|,
name|HiveLockMode
operator|.
name|SHARED
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|name1
init|=
name|lockObjs
operator|.
name|get
argument_list|(
name|lockObjs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|lockObjs
operator|.
name|add
argument_list|(
operator|new
name|HiveLockObj
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
name|path1
argument_list|,
name|lockData1
argument_list|)
argument_list|,
name|HiveLockMode
operator|.
name|EXCLUSIVE
argument_list|)
argument_list|)
expr_stmt|;
name|lockObjs
operator|.
name|add
argument_list|(
operator|new
name|HiveLockObj
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
name|path2
argument_list|,
name|lockData2
argument_list|)
argument_list|,
name|HiveLockMode
operator|.
name|SHARED
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|name2
init|=
name|lockObjs
operator|.
name|get
argument_list|(
name|lockObjs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|lockObjs
operator|.
name|add
argument_list|(
operator|new
name|HiveLockObj
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
name|path2
argument_list|,
name|lockData2
argument_list|)
argument_list|,
name|HiveLockMode
operator|.
name|SHARED
argument_list|)
argument_list|)
expr_stmt|;
name|lockObjs
operator|.
name|add
argument_list|(
operator|new
name|HiveLockObj
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
name|path2
argument_list|,
name|lockData2
argument_list|)
argument_list|,
name|HiveLockMode
operator|.
name|SHARED
argument_list|)
argument_list|)
expr_stmt|;
name|DummyTxnManager
operator|.
name|dedupLockObjects
argument_list|(
name|lockObjs
argument_list|)
expr_stmt|;
comment|// After dedup we should be left with 2 locks:
comment|// [path1, exclusive]
comment|// [path2, shared]
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Locks should be deduped"
argument_list|,
literal|2
argument_list|,
name|lockObjs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Comparator
argument_list|<
name|HiveLockObj
argument_list|>
name|cmp
init|=
operator|new
name|Comparator
argument_list|<
name|HiveLockObj
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|HiveLockObj
name|lock1
parameter_list|,
name|HiveLockObj
name|lock2
parameter_list|)
block|{
return|return
name|lock1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|lock2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|lockObjs
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|HiveLockObj
name|lockObj
init|=
name|lockObjs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|name1
argument_list|,
name|lockObj
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveLockMode
operator|.
name|EXCLUSIVE
argument_list|,
name|lockObj
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|lockObj
operator|=
name|lockObjs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|name2
argument_list|,
name|lockObj
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveLockMode
operator|.
name|SHARED
argument_list|,
name|lockObj
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

