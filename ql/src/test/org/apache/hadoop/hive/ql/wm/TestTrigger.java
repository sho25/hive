begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|TestTrigger
block|{
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSimpleQueryTrigger
parameter_list|()
block|{
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|"hdfs"
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|BYTES_READ
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|Trigger
name|trigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"hdfs_read_heavy"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"counter: HDFS_BYTES_READ limit: 1024"
argument_list|,
name|expression
operator|.
name|getCounterLimit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|trigger
operator|.
name|apply
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|trigger
operator|.
name|apply
argument_list|(
literal|1025
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|"hdfs"
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|BYTES_WRITTEN
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|trigger
operator|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"hdfs_write_heavy"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"counter: HDFS_BYTES_WRITTEN limit: 1024"
argument_list|,
name|expression
operator|.
name|getCounterLimit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|trigger
operator|.
name|apply
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|trigger
operator|.
name|apply
argument_list|(
literal|1025
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|""
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|BYTES_READ
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|trigger
operator|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"local_read_heavy"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"counter: BYTES_READ limit: 1024"
argument_list|,
name|expression
operator|.
name|getCounterLimit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|trigger
operator|.
name|apply
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|trigger
operator|.
name|apply
argument_list|(
literal|1025
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|""
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|BYTES_WRITTEN
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|trigger
operator|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"local_write_heavy"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"counter: BYTES_WRITTEN limit: 1024"
argument_list|,
name|expression
operator|.
name|getCounterLimit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|trigger
operator|.
name|apply
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|trigger
operator|.
name|apply
argument_list|(
literal|1025
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|""
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|SHUFFLE_BYTES
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|trigger
operator|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"shuffle_heavy"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"counter: SHUFFLE_BYTES limit: 1024"
argument_list|,
name|expression
operator|.
name|getCounterLimit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|trigger
operator|.
name|apply
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|trigger
operator|.
name|apply
argument_list|(
literal|1025
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|TimeCounterLimit
argument_list|(
name|TimeCounterLimit
operator|.
name|TimeCounter
operator|.
name|EXECUTION_TIME
argument_list|,
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|trigger
operator|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"slow_query"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|MOVE_TO_POOL
operator|.
name|setPoolName
argument_list|(
literal|"fake_pool"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"counter: EXECUTION_TIME limit: 10000"
argument_list|,
name|expression
operator|.
name|getCounterLimit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|trigger
operator|.
name|apply
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|trigger
operator|.
name|apply
argument_list|(
literal|100000
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|VertexCounterLimit
argument_list|(
name|VertexCounterLimit
operator|.
name|VertexCounter
operator|.
name|TOTAL_TASKS
argument_list|,
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|trigger
operator|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"highly_parallel"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"counter: TOTAL_TASKS limit: 10000"
argument_list|,
name|expression
operator|.
name|getCounterLimit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|trigger
operator|.
name|apply
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|trigger
operator|.
name|apply
argument_list|(
literal|100000
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpressionFromString
parameter_list|()
block|{
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"BYTES_READ>1024"
argument_list|)
decl_stmt|;
name|Expression
name|expected
init|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|""
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|BYTES_READ
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"BYTES_READ> 1024"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
name|expected
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|toString
argument_list|()
argument_list|,
name|expression
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"  BYTES_READ>   1024  "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"BYTES_WRITTEN> 1024"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|""
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|BYTES_WRITTEN
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" HDFS_BYTES_READ> 1024 "
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|"hdfs"
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|BYTES_READ
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" HDFS_BYTES_WRITTEN> 1024"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|"hdfs"
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|BYTES_WRITTEN
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" S3A_BYTES_READ> 1024"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|"s3a"
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|BYTES_READ
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" S3A_BYTES_WRITTEN> 1024"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|"s3a"
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|BYTES_WRITTEN
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" s3a_ByTeS_WRiTTeN> 1024"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|"s3a"
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|BYTES_WRITTEN
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" SHUFFLE_BYTES> 1024"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|""
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|SHUFFLE_BYTES
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" EXECUTION_TIME> 300"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|TimeCounterLimit
argument_list|(
name|TimeCounterLimit
operator|.
name|TimeCounter
operator|.
name|EXECUTION_TIME
argument_list|,
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" ELAPSED_TIME> 300"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|TimeCounterLimit
argument_list|(
name|TimeCounterLimit
operator|.
name|TimeCounter
operator|.
name|ELAPSED_TIME
argument_list|,
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" elapsed_TIME> 300"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|TimeCounterLimit
argument_list|(
name|TimeCounterLimit
operator|.
name|TimeCounter
operator|.
name|ELAPSED_TIME
argument_list|,
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" TOTAL_TASKS> 10000"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|VertexCounterLimit
argument_list|(
name|VertexCounterLimit
operator|.
name|VertexCounter
operator|.
name|TOTAL_TASKS
argument_list|,
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"counter: TOTAL_TASKS limit: 10000"
argument_list|,
name|expression
operator|.
name|getCounterLimit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSizeValidationInTrigger
parameter_list|()
block|{
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" SHUFFLE_BYTES> 100MB"
argument_list|)
decl_stmt|;
name|Expression
name|expected
init|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|""
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|SHUFFLE_BYTES
argument_list|,
literal|100
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" SHUFFLE_BYTES> 1 gB"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|""
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|SHUFFLE_BYTES
argument_list|,
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" SHUFFLE_BYTES> 1 TB"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|""
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|SHUFFLE_BYTES
argument_list|,
literal|1024L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" SHUFFLE_BYTES> 100 B"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|""
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|SHUFFLE_BYTES
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" SHUFFLE_BYTES> 100bytes"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|""
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|SHUFFLE_BYTES
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalSizeCounterValue1
parameter_list|()
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Invalid size unit"
argument_list|)
expr_stmt|;
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" SHUFFLE_BYTES> 300GiB"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalSizeCounterValue2
parameter_list|()
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Invalid size unit"
argument_list|)
expr_stmt|;
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" SHUFFLE_BYTES> 300 foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimeValidationInTrigger
parameter_list|()
block|{
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" elapsed_TIME> 300 s"
argument_list|)
decl_stmt|;
name|Expression
name|expected
init|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|TimeCounterLimit
argument_list|(
name|TimeCounterLimit
operator|.
name|TimeCounter
operator|.
name|ELAPSED_TIME
argument_list|,
literal|300000
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" elapsed_TIME> 300 seconds"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|TimeCounterLimit
argument_list|(
name|TimeCounterLimit
operator|.
name|TimeCounter
operator|.
name|ELAPSED_TIME
argument_list|,
literal|300000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" elapsed_TIME> 300 sec"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|TimeCounterLimit
argument_list|(
name|TimeCounterLimit
operator|.
name|TimeCounter
operator|.
name|ELAPSED_TIME
argument_list|,
literal|300000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" elapsed_TIME> 300s"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|TimeCounterLimit
argument_list|(
name|TimeCounterLimit
operator|.
name|TimeCounter
operator|.
name|ELAPSED_TIME
argument_list|,
literal|300000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" elapsed_TIME> 300seconds"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|TimeCounterLimit
argument_list|(
name|TimeCounterLimit
operator|.
name|TimeCounter
operator|.
name|ELAPSED_TIME
argument_list|,
literal|300000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" elapsed_TIME> 300sec"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|TimeCounterLimit
argument_list|(
name|TimeCounterLimit
operator|.
name|TimeCounter
operator|.
name|ELAPSED_TIME
argument_list|,
literal|300000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" elapsed_TIME> 300000000 microseconds"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|TimeCounterLimit
argument_list|(
name|TimeCounterLimit
operator|.
name|TimeCounter
operator|.
name|ELAPSED_TIME
argument_list|,
literal|300000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" elapsed_TIME> 1DAY"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|TimeCounterLimit
argument_list|(
name|TimeCounterLimit
operator|.
name|TimeCounter
operator|.
name|ELAPSED_TIME
argument_list|,
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hashCode
argument_list|()
argument_list|,
name|expression
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalTimeCounterValue1
parameter_list|()
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Invalid time unit"
argument_list|)
expr_stmt|;
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" elapsed_TIME> 300 light years"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalTimeCounterValue2
parameter_list|()
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Invalid time unit"
argument_list|)
expr_stmt|;
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" elapsed_TIME> 300secTOR"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTriggerClone
parameter_list|()
block|{
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|createExpression
argument_list|(
operator|new
name|FileSystemCounterLimit
argument_list|(
literal|"hdfs"
argument_list|,
name|FileSystemCounterLimit
operator|.
name|FSCounter
operator|.
name|BYTES_READ
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|Trigger
name|trigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"hdfs_read_heavy"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|Trigger
name|clonedTrigger
init|=
name|trigger
operator|.
name|clone
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|trigger
argument_list|)
argument_list|,
name|System
operator|.
name|identityHashCode
argument_list|(
name|clonedTrigger
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|trigger
operator|.
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|System
operator|.
name|identityHashCode
argument_list|(
name|clonedTrigger
operator|.
name|getExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|trigger
operator|.
name|getExpression
argument_list|()
operator|.
name|getCounterLimit
argument_list|()
argument_list|)
argument_list|,
name|System
operator|.
name|identityHashCode
argument_list|(
name|clonedTrigger
operator|.
name|getExpression
argument_list|()
operator|.
name|getCounterLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|trigger
argument_list|,
name|clonedTrigger
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|trigger
operator|.
name|hashCode
argument_list|()
argument_list|,
name|clonedTrigger
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|" ELAPSED_TIME> 300"
argument_list|)
expr_stmt|;
name|trigger
operator|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"slow_query"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
expr_stmt|;
name|clonedTrigger
operator|=
name|trigger
operator|.
name|clone
argument_list|()
expr_stmt|;
name|assertNotEquals
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|trigger
argument_list|)
argument_list|,
name|System
operator|.
name|identityHashCode
argument_list|(
name|clonedTrigger
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|trigger
operator|.
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|System
operator|.
name|identityHashCode
argument_list|(
name|clonedTrigger
operator|.
name|getExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|trigger
operator|.
name|getExpression
argument_list|()
operator|.
name|getCounterLimit
argument_list|()
argument_list|)
argument_list|,
name|System
operator|.
name|identityHashCode
argument_list|(
name|clonedTrigger
operator|.
name|getExpression
argument_list|()
operator|.
name|getCounterLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|trigger
argument_list|,
name|clonedTrigger
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|trigger
operator|.
name|hashCode
argument_list|()
argument_list|,
name|clonedTrigger
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalExpressionsUnsupportedPredicate
parameter_list|()
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Invalid predicate in expression"
argument_list|)
expr_stmt|;
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"BYTES_READ< 1024"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalExpressionsMissingLimit
parameter_list|()
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Invalid predicate in expression"
argument_list|)
expr_stmt|;
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"BYTES_READ>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalExpressionsMissingCounter
parameter_list|()
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Counter name cannot be empty!"
argument_list|)
expr_stmt|;
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"> 1024"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalExpressionsMultipleLimit
parameter_list|()
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Invalid predicate in expression"
argument_list|)
expr_stmt|;
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"BYTES_READ> 1024> 1025"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalExpressionsMultipleCounters
parameter_list|()
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Invalid predicate in expression"
argument_list|)
expr_stmt|;
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"BYTES_READ> BYTES_READ> 1025"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalExpressionsInvalidLimitPost
parameter_list|()
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Invalid size unit"
argument_list|)
expr_stmt|;
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"BYTES_READ> 1024aaaa"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalExpressionsInvalidLimitPre
parameter_list|()
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Invalid counter value"
argument_list|)
expr_stmt|;
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"BYTES_READ> foo1024"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalExpressionsInvalidNegativeLimit
parameter_list|()
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Illegal value for counter limit. Expected a positive long value."
argument_list|)
expr_stmt|;
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"BYTES_READ> -1024"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

