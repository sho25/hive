begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExpressionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorGroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFSumLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncAbsLongToLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestVectorizer
block|{
specifier|static
name|VectorizationContext
name|vContext
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|columnMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|columnMap
operator|.
name|put
argument_list|(
literal|"col1"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|columnMap
operator|.
name|put
argument_list|(
literal|"col2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|columnMap
operator|.
name|put
argument_list|(
literal|"col3"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|//Generate vectorized expression
name|vContext
operator|=
operator|new
name|VectorizationContext
argument_list|(
name|columnMap
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"fake"
argument_list|,
name|value
operator|=
literal|"FAKE"
argument_list|)
specifier|static
class|class
name|FakeGenericUDF
extends|extends
name|GenericUDF
block|{
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
return|return
literal|"fake"
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregateOnUDF
parameter_list|()
throws|throws
name|HiveException
block|{
name|AggregationDesc
name|aggDesc
init|=
operator|new
name|AggregationDesc
argument_list|()
decl_stmt|;
name|aggDesc
operator|.
name|setGenericUDAFName
argument_list|(
literal|"sum"
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|exprNodeDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|exprNodeDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|exprNodeDesc
argument_list|)
expr_stmt|;
name|aggDesc
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|GenericUDFAbs
name|absUdf
init|=
operator|new
name|GenericUDFAbs
argument_list|()
decl_stmt|;
name|exprNodeDesc
operator|.
name|setGenericUDF
argument_list|(
name|absUdf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ExprNodeColumnDesc
name|colExprA
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"T"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|colExprB
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"col2"
argument_list|,
literal|"T"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colExprA
argument_list|)
expr_stmt|;
name|exprNodeDesc
operator|.
name|setChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|outputColumnNames
operator|.
name|add
argument_list|(
literal|"_col0"
argument_list|)
expr_stmt|;
name|GroupByDesc
name|desc
init|=
operator|new
name|GroupByDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setOutputColumnNames
argument_list|(
name|outputColumnNames
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
name|aggDescList
init|=
operator|new
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
argument_list|()
decl_stmt|;
name|aggDescList
operator|.
name|add
argument_list|(
name|aggDesc
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setAggregators
argument_list|(
name|aggDescList
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|grpByKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|grpByKeys
operator|.
name|add
argument_list|(
name|colExprB
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setKeys
argument_list|(
name|grpByKeys
argument_list|)
expr_stmt|;
name|GroupByOperator
name|gbyOp
init|=
operator|new
name|GroupByOperator
argument_list|()
decl_stmt|;
name|gbyOp
operator|.
name|setConf
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|Vectorizer
name|v
init|=
operator|new
name|Vectorizer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|v
operator|.
name|validateMapWorkOperator
argument_list|(
name|gbyOp
argument_list|)
argument_list|)
expr_stmt|;
name|VectorGroupByOperator
name|vectorOp
init|=
operator|(
name|VectorGroupByOperator
operator|)
name|v
operator|.
name|vectorizeOperator
argument_list|(
name|gbyOp
argument_list|,
name|vContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VectorUDAFSumLong
operator|.
name|class
argument_list|,
name|vectorOp
operator|.
name|getAggregators
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|VectorUDAFSumLong
name|udaf
init|=
operator|(
name|VectorUDAFSumLong
operator|)
name|vectorOp
operator|.
name|getAggregators
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FuncAbsLongToLong
operator|.
name|class
argument_list|,
name|udaf
operator|.
name|getInputExpression
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateNestedExpressions
parameter_list|()
block|{
name|ExprNodeColumnDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|new
name|Integer
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|GenericUDFOPGreaterThan
name|udf
init|=
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|greaterExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|greaterExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|greaterExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|greaterExprDesc
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|FakeGenericUDF
name|udf2
init|=
operator|new
name|FakeGenericUDF
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|nonSupportedExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|nonSupportedExpr
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|nonSupportedExpr
operator|.
name|setGenericUDF
argument_list|(
name|udf2
argument_list|)
expr_stmt|;
name|GenericUDFOPAnd
name|andUdf
init|=
operator|new
name|GenericUDFOPAnd
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|andExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|andExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|andExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|andUdf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children3
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children3
operator|.
name|add
argument_list|(
name|greaterExprDesc
argument_list|)
expr_stmt|;
name|children3
operator|.
name|add
argument_list|(
name|nonSupportedExpr
argument_list|)
expr_stmt|;
name|andExprDesc
operator|.
name|setChildren
argument_list|(
name|children3
argument_list|)
expr_stmt|;
name|Vectorizer
name|v
init|=
operator|new
name|Vectorizer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|v
operator|.
name|validateExprNodeDesc
argument_list|(
name|andExprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|v
operator|.
name|validateExprNodeDesc
argument_list|(
name|andExprDesc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**   * prepareAbstractMapJoin prepares a join operator descriptor, used as helper by SMB and Map join tests.    */
specifier|private
name|void
name|prepareAbstractMapJoin
parameter_list|(
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
name|mop
parameter_list|,
name|MapJoinDesc
name|mjdesc
parameter_list|)
block|{
name|mjdesc
operator|.
name|setPosBigTable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|expr
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|expr
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"col1"
argument_list|,
literal|"T"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|keyMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|keyMap
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|mjdesc
operator|.
name|setKeys
argument_list|(
name|keyMap
argument_list|)
expr_stmt|;
name|mjdesc
operator|.
name|setExprs
argument_list|(
name|keyMap
argument_list|)
expr_stmt|;
comment|//Set filter expression
name|GenericUDFOPEqual
name|udf
init|=
operator|new
name|GenericUDFOPEqual
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|equalExprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|equalExprDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|equalExprDesc
operator|.
name|setGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children1
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children1
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"col2"
argument_list|,
literal|"T1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|children1
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"col3"
argument_list|,
literal|"T2"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|equalExprDesc
operator|.
name|setChildren
argument_list|(
name|children1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|filterExpr
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|filterExpr
operator|.
name|add
argument_list|(
name|equalExprDesc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|filterMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|filterMap
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|mjdesc
operator|.
name|setFilters
argument_list|(
name|filterMap
argument_list|)
expr_stmt|;
block|}
comment|/**   * testValidateMapJoinOperator validates that the Map join operator can be vectorized.   */
annotation|@
name|Test
specifier|public
name|void
name|testValidateMapJoinOperator
parameter_list|()
block|{
name|MapJoinOperator
name|mop
init|=
operator|new
name|MapJoinOperator
argument_list|()
decl_stmt|;
name|MapJoinDesc
name|mjdesc
init|=
operator|new
name|MapJoinDesc
argument_list|()
decl_stmt|;
name|prepareAbstractMapJoin
argument_list|(
name|mop
argument_list|,
name|mjdesc
argument_list|)
expr_stmt|;
name|mop
operator|.
name|setConf
argument_list|(
name|mjdesc
argument_list|)
expr_stmt|;
name|Vectorizer
name|vectorizer
init|=
operator|new
name|Vectorizer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorizer
operator|.
name|validateMapWorkOperator
argument_list|(
name|mop
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**   * testValidateSMBJoinOperator validates that the SMB join operator can be vectorized.   */
annotation|@
name|Test
specifier|public
name|void
name|testValidateSMBJoinOperator
parameter_list|()
block|{
name|SMBMapJoinOperator
name|mop
init|=
operator|new
name|SMBMapJoinOperator
argument_list|()
decl_stmt|;
name|SMBJoinDesc
name|mjdesc
init|=
operator|new
name|SMBJoinDesc
argument_list|()
decl_stmt|;
name|prepareAbstractMapJoin
argument_list|(
name|mop
argument_list|,
name|mjdesc
argument_list|)
expr_stmt|;
name|mop
operator|.
name|setConf
argument_list|(
name|mjdesc
argument_list|)
expr_stmt|;
name|Vectorizer
name|vectorizer
init|=
operator|new
name|Vectorizer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorizer
operator|.
name|validateMapWorkOperator
argument_list|(
name|mop
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

