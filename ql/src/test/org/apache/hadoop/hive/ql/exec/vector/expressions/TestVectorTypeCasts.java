begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Decimal128
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test VectorExpression classes for vectorized implementations of type casts.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorTypeCasts
block|{
comment|// Number of nanoseconds in one second
specifier|private
specifier|static
specifier|final
name|long
name|NANOS_PER_SECOND
init|=
literal|1000000000
decl_stmt|;
comment|// Number of microseconds in one second
specifier|private
specifier|static
specifier|final
name|long
name|MICROS_PER_SECOND
init|=
literal|1000000
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testVectorCastLongToDouble
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|TestVectorMathFunctions
operator|.
name|getVectorizedRowBatchLongInDoubleOut
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastLongToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorCastDoubleToLong
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|TestVectorMathFunctions
operator|.
name|getVectorizedRowBatchDoubleInLongOut
argument_list|()
decl_stmt|;
name|LongColumnVector
name|resultV
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastDoubleToLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastDoubleToBoolean
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|TestVectorMathFunctions
operator|.
name|getVectorizedRowBatchDoubleInLongOut
argument_list|()
decl_stmt|;
name|LongColumnVector
name|resultV
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastDoubleToBooleanViaDoubleToLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastDoubleToTimestamp
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|TestVectorMathFunctions
operator|.
name|getVectorizedRowBatchDoubleInLongOut
argument_list|()
decl_stmt|;
name|LongColumnVector
name|resultV
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastDoubleToTimestampViaDoubleToLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
call|(
name|long
call|)
argument_list|(
literal|0.5d
operator|*
name|NANOS_PER_SECOND
argument_list|)
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastLongToBoolean
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|TestVectorMathFunctions
operator|.
name|getVectorizedRowBatchLongInLongOut
argument_list|()
decl_stmt|;
name|LongColumnVector
name|inV
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|inV
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
comment|// make one entry produce false in result
name|LongColumnVector
name|resultV
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastLongToBooleanViaLongToLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastLongToTimestamp
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|TestVectorMathFunctions
operator|.
name|getVectorizedRowBatchLongInLongOut
argument_list|()
decl_stmt|;
name|LongColumnVector
name|resultV
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastLongToTimestampViaLongToLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|2
operator|*
name|MICROS_PER_SECOND
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|MICROS_PER_SECOND
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastTimestampToLong
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|TestVectorMathFunctions
operator|.
name|getVectorizedRowBatchLongInLongOut
argument_list|()
decl_stmt|;
name|LongColumnVector
name|inV
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|inV
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|NANOS_PER_SECOND
expr_stmt|;
comment|// Make one entry produce interesting result
comment|// (1 sec after epoch).
name|LongColumnVector
name|resultV
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastTimestampToLongViaLongToLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastTimestampToDouble
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|TestVectorMathFunctions
operator|.
name|getVectorizedRowBatchLongInDoubleOut
argument_list|()
decl_stmt|;
name|LongColumnVector
name|inV
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|DoubleColumnVector
name|resultV
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastTimestampToDoubleViaLongToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1E
operator|-
literal|9D
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1E
operator|-
literal|9D
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|toBytes
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
literal|null
decl_stmt|;
try|try
block|{
name|b
operator|=
name|s
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not convert string to UTF-8 byte array."
argument_list|)
throw|;
block|}
return|return
name|b
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastLongToString
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|TestVectorMathFunctions
operator|.
name|getBatchForStringMath
argument_list|()
decl_stmt|;
name|BytesColumnVector
name|resultV
init|=
operator|(
name|BytesColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastLongToString
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|byte
index|[]
name|num255
init|=
name|toBytes
argument_list|(
literal|"255"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|num255
argument_list|,
literal|0
argument_list|,
name|num255
operator|.
name|length
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|resultV
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|resultV
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastBooleanToString
parameter_list|()
block|{
name|byte
index|[]
name|t
init|=
name|toBytes
argument_list|(
literal|"TRUE"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|f
init|=
name|toBytes
argument_list|(
literal|"FALSE"
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|b
init|=
name|TestVectorMathFunctions
operator|.
name|getBatchForStringMath
argument_list|()
decl_stmt|;
name|LongColumnVector
name|inV
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|BytesColumnVector
name|resultV
init|=
operator|(
name|BytesColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|inV
operator|.
name|vector
index|[
literal|1
index|]
operator|=
literal|1
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastBooleanToStringViaLongToString
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|f
argument_list|,
literal|0
argument_list|,
name|f
operator|.
name|length
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|resultV
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|resultV
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|t
argument_list|,
literal|0
argument_list|,
name|t
operator|.
name|length
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|resultV
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|resultV
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastDecimalToLong
parameter_list|()
block|{
comment|// test basic case
name|VectorizedRowBatch
name|b
init|=
name|getBatchDecimalLong
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastDecimalToLong
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|LongColumnVector
name|r
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9999999999999999L
argument_list|,
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// test with nulls in input
name|b
operator|=
name|getBatchDecimalLong
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test repeating case
name|b
operator|=
name|getBatchDecimalLong
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test repeating nulls case
name|b
operator|=
name|getBatchDecimalLong
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|/* Just spot check the basic case because code path is the same as    * for cast of decimal to long due to inheritance.    */
specifier|public
name|void
name|testCastDecimalToBoolean
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getBatchDecimalLong
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastDecimalToBoolean
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DecimalColumnVector
name|in
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|in
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|update
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|LongColumnVector
name|r
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VectorizedRowBatch
name|getBatchDecimalLong
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|DecimalColumnVector
name|dv
decl_stmt|;
name|short
name|scale
init|=
literal|2
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|dv
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
literal|18
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|b
operator|.
name|size
operator|=
literal|3
expr_stmt|;
name|dv
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|update
argument_list|(
literal|"1.1"
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|dv
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|update
argument_list|(
literal|"-2.2"
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|dv
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|update
argument_list|(
literal|"9999999999999999.00"
argument_list|,
name|scale
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastDecimalToDouble
parameter_list|()
block|{
specifier|final
name|double
name|eps
init|=
literal|0.000001d
decl_stmt|;
comment|// tolerance to check double equality
comment|// test basic case
name|VectorizedRowBatch
name|b
init|=
name|getBatchDecimalDouble
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastDecimalToDouble
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DoubleColumnVector
name|r
init|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1.1d
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|eps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2.2d
argument_list|,
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|eps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9999999999999999.0d
argument_list|,
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|eps
argument_list|)
expr_stmt|;
comment|// test with nulls in input
name|b
operator|=
name|getBatchDecimalDouble
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.1d
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|eps
argument_list|)
expr_stmt|;
comment|// test repeating case
name|b
operator|=
name|getBatchDecimalDouble
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.1d
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|eps
argument_list|)
expr_stmt|;
comment|// test repeating nulls case
name|b
operator|=
name|getBatchDecimalDouble
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VectorizedRowBatch
name|getBatchDecimalDouble
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|DecimalColumnVector
name|dv
decl_stmt|;
name|short
name|scale
init|=
literal|2
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|dv
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
literal|18
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|b
operator|.
name|size
operator|=
literal|3
expr_stmt|;
name|dv
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|update
argument_list|(
literal|"1.1"
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|dv
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|update
argument_list|(
literal|"-2.2"
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|dv
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|update
argument_list|(
literal|"9999999999999999.00"
argument_list|,
name|scale
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastDecimalToString
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getBatchDecimalString
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastDecimalToString
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|r
init|=
operator|(
name|BytesColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|byte
index|[]
name|v
init|=
name|toBytes
argument_list|(
literal|"1.1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|v
argument_list|,
literal|0
argument_list|,
name|v
operator|.
name|length
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|r
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|r
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|v
operator|=
name|toBytes
argument_list|(
literal|"-2.2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|v
argument_list|,
literal|0
argument_list|,
name|v
operator|.
name|length
argument_list|,
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|r
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|r
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|v
operator|=
name|toBytes
argument_list|(
literal|"9999999999999999"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|v
argument_list|,
literal|0
argument_list|,
name|v
operator|.
name|length
argument_list|,
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|r
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|r
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VectorizedRowBatch
name|getBatchDecimalString
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|DecimalColumnVector
name|dv
decl_stmt|;
name|short
name|scale
init|=
literal|2
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|dv
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
literal|18
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|b
operator|.
name|size
operator|=
literal|3
expr_stmt|;
name|dv
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|update
argument_list|(
literal|"1.1"
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|dv
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|update
argument_list|(
literal|"-2.2"
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|dv
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|update
argument_list|(
literal|"9999999999999999.00"
argument_list|,
name|scale
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastDecimalToTimestamp
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getBatchDecimalLong2
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastDecimalToTimestamp
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|LongColumnVector
name|r
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1111111111L
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2222222222L
argument_list|,
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|31536000999999999L
argument_list|,
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VectorizedRowBatch
name|getBatchDecimalLong2
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|DecimalColumnVector
name|dv
decl_stmt|;
name|short
name|scale
init|=
literal|9
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|dv
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
literal|18
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|b
operator|.
name|size
operator|=
literal|3
expr_stmt|;
name|dv
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|update
argument_list|(
literal|"1.111111111"
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|dv
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|update
argument_list|(
literal|"-2.222222222"
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|dv
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|update
argument_list|(
literal|"31536000.999999999"
argument_list|,
name|scale
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastLongToDecimal
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getBatchLongDecimal
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastLongToDecimal
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
operator|new
name|Decimal128
argument_list|(
operator|-
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|99999999999999L
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VectorizedRowBatch
name|getBatchLongDecimal
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lv
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|lv
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
literal|18
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|lv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|lv
operator|.
name|vector
index|[
literal|1
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|lv
operator|.
name|vector
index|[
literal|2
index|]
operator|=
literal|99999999999999L
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastDoubleToDecimal
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getBatchDoubleDecimal
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastDoubleToDecimal
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|scale
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
operator|new
name|Decimal128
argument_list|(
operator|-
literal|1
argument_list|,
name|r
operator|.
name|scale
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|"99999999999999.0"
argument_list|,
name|r
operator|.
name|scale
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VectorizedRowBatch
name|getBatchDoubleDecimal
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|dv
decl_stmt|;
name|short
name|scale
init|=
literal|2
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|dv
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
literal|18
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|b
operator|.
name|size
operator|=
literal|3
expr_stmt|;
name|dv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|0d
expr_stmt|;
name|dv
operator|.
name|vector
index|[
literal|1
index|]
operator|=
operator|-
literal|1d
expr_stmt|;
name|dv
operator|.
name|vector
index|[
literal|2
index|]
operator|=
literal|99999999999999.0d
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastStringToDecimal
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|getBatchStringDecimal
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastStringToDecimal
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|"1.10"
argument_list|,
name|r
operator|.
name|scale
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|"-2.20"
argument_list|,
name|r
operator|.
name|scale
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|"99999999999999.0"
argument_list|,
name|r
operator|.
name|scale
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VectorizedRowBatch
name|getBatchStringDecimal
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|bv
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|bv
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
literal|18
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|bv
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
name|byte
index|[]
name|x0
init|=
name|toBytes
argument_list|(
literal|"1.10"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|x1
init|=
name|toBytes
argument_list|(
literal|"-2.20"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|x2
init|=
name|toBytes
argument_list|(
literal|"99999999999999.0"
argument_list|)
decl_stmt|;
name|bv
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
name|x0
argument_list|,
literal|0
argument_list|,
name|x0
operator|.
name|length
argument_list|)
expr_stmt|;
name|bv
operator|.
name|setVal
argument_list|(
literal|1
argument_list|,
name|x1
argument_list|,
literal|0
argument_list|,
name|x1
operator|.
name|length
argument_list|)
expr_stmt|;
name|bv
operator|.
name|setVal
argument_list|(
literal|2
argument_list|,
name|x2
argument_list|,
literal|0
argument_list|,
name|x2
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastTimestampToDecimal
parameter_list|()
block|{
comment|// The input timestamps are stored as long values
comment|// measured in nanoseconds from the epoch.
name|VectorizedRowBatch
name|b
init|=
name|getBatchLongDecimal
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastTimestampToDecimal
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inL
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|inL
operator|.
name|vector
index|[
literal|1
index|]
operator|=
operator|-
literal|1990000000L
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|"-1.99"
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|"100000.00"
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try again with a value that won't fit in 5 digits, to make
comment|// sure that NULL is produced.
name|b
operator|=
name|getBatchLongDecimalPrec5Scale2
argument_list|()
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
comment|/* This batch has output decimal column precision 5 and scale 2.    * The goal is to allow testing of input long values that, when    * converted to decimal, will not fit in the given precision.    * Then it will be possible to check that the results are NULL.    */
specifier|private
name|VectorizedRowBatch
name|getBatchLongDecimalPrec5Scale2
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lv
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|lv
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|lv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|lv
operator|.
name|vector
index|[
literal|1
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|lv
operator|.
name|vector
index|[
literal|2
index|]
operator|=
literal|99999999999999L
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastDecimalToDecimal
parameter_list|()
block|{
comment|// test casting from one precision and scale to another.
name|VectorizedRowBatch
name|b
init|=
name|getBatchDecimalDecimal
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastDecimalToDecimal
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|r
init|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|"10.00"
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// test an increase in precision/scale
name|b
operator|=
name|getBatchDecimalDecimal
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|CastDecimalToDecimal
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|"100.01"
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|"-200.02"
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VectorizedRowBatch
name|getBatchDecimalDecimal
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|DecimalColumnVector
name|v0
decl_stmt|,
name|v1
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v0
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
literal|18
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|v1
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|v0
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|update
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|"10.0001"
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|v0
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|update
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|"-9999999.9999"
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|v1
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|update
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|"100.01"
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|v1
operator|.
name|vector
index|[
literal|1
index|]
operator|.
name|update
argument_list|(
operator|new
name|Decimal128
argument_list|(
literal|"-200.02"
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|size
operator|=
literal|2
expr_stmt|;
return|return
name|b
return|;
block|}
block|}
end_class

end_unit

