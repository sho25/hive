begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetOpenTxnsInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|DummyPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|AcidHouseKeeperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link DbTxnManager}.  * See additional tests in {@link org.apache.hadoop.hive.ql.lockmgr.TestDbTxnManager2}  */
end_comment

begin_class
specifier|public
class|class
name|TestDbTxnManager
block|{
specifier|private
specifier|static
specifier|final
name|int
name|TEST_TIMED_OUT_TXN_ABORT_BATCH_SIZE
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
specifier|private
name|HiveTxnManager
name|txnMgr
decl_stmt|;
specifier|private
name|AcidHouseKeeperService
name|houseKeeperService
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Context
name|ctx
decl_stmt|;
specifier|private
name|int
name|nextInput
decl_stmt|;
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|readEntities
decl_stmt|;
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|writeEntities
decl_stmt|;
specifier|public
name|TestDbTxnManager
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ctx
operator|=
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleReadTable
parameter_list|()
throws|throws
name|Exception
block|{
name|addTableInput
argument_list|()
expr_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|QUERY
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countLockComponents
argument_list|(
operator|(
operator|(
name|DbLockManager
operator|.
name|DbHiveLock
operator|)
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|lockId
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|locks
operator|=
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleReadPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|addPartitionInput
argument_list|(
name|newTable
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|QUERY
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countLockComponents
argument_list|(
operator|(
operator|(
name|DbLockManager
operator|.
name|DbHiveLock
operator|)
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|lockId
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|locks
operator|=
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleReadMultiPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|addPartitionInput
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|addPartitionInput
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|addPartitionInput
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|QUERY
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|TxnDbUtil
operator|.
name|countLockComponents
argument_list|(
operator|(
operator|(
name|DbLockManager
operator|.
name|DbHiveLock
operator|)
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|lockId
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|locks
operator|=
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJoin
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|addPartitionInput
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|addPartitionInput
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|addPartitionInput
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|addTableInput
argument_list|()
expr_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|QUERY
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|TxnDbUtil
operator|.
name|countLockComponents
argument_list|(
operator|(
operator|(
name|DbLockManager
operator|.
name|DbHiveLock
operator|)
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|lockId
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|locks
operator|=
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleWriteTable
parameter_list|()
throws|throws
name|Exception
block|{
name|WriteEntity
name|we
init|=
name|addTableOutput
argument_list|(
name|WriteEntity
operator|.
name|WriteType
operator|.
name|INSERT
argument_list|)
decl_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|QUERY
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countLockComponents
argument_list|(
operator|(
operator|(
name|DbLockManager
operator|.
name|DbHiveLock
operator|)
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|lockId
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|locks
operator|=
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleWritePartition
parameter_list|()
throws|throws
name|Exception
block|{
name|WriteEntity
name|we
init|=
name|addPartitionOutput
argument_list|(
name|newTable
argument_list|(
literal|true
argument_list|)
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|INSERT
argument_list|)
decl_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|QUERY
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countLockComponents
argument_list|(
operator|(
operator|(
name|DbLockManager
operator|.
name|DbHiveLock
operator|)
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|lockId
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|locks
operator|=
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteDynamicPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|WriteEntity
name|we
init|=
name|addDynamicPartitionedOutput
argument_list|(
name|newTable
argument_list|(
literal|true
argument_list|)
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|INSERT
argument_list|)
decl_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|QUERY
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|/*Assert.assertEquals(1,         TxnDbUtil.countLockComponents(((DbLockManager.DbHiveLock) locks.get(0)).lockId));     */
comment|// Make sure we're locking the whole table, since this is dynamic partitioning
name|ShowLocksResponse
name|rsp
init|=
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|getLocks
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|elms
init|=
name|rsp
operator|.
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|elms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|elms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|elms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartname
argument_list|()
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|locks
operator|=
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * aborts timed out transactions    */
specifier|private
name|void
name|runReaper
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|lastCount
init|=
name|houseKeeperService
operator|.
name|getIsAliveCounter
argument_list|()
decl_stmt|;
name|houseKeeperService
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|maxIter
init|=
literal|10
decl_stmt|;
name|int
name|iterCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|houseKeeperService
operator|.
name|getIsAliveCounter
argument_list|()
operator|<=
name|lastCount
condition|)
block|{
if|if
condition|(
name|iterCount
operator|++
operator|>=
name|maxIter
condition|)
block|{
comment|//prevent test hangs
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Reaper didn't run after "
operator|+
name|iterCount
operator|+
literal|" waits"
argument_list|)
throw|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|//make sure it has run at least once
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|//...
block|}
block|}
name|houseKeeperService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|addPartitionOutput
argument_list|(
name|newTable
argument_list|(
literal|true
argument_list|)
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|INSERT
argument_list|)
expr_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|QUERY
argument_list|)
decl_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"NicholasII"
argument_list|,
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|*
literal|2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|runReaper
argument_list|()
expr_stmt|;
name|LockException
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|ex
parameter_list|)
block|{
name|exception
operator|=
name|ex
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Expected exception1"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong Exception1"
argument_list|,
name|ErrorMsg
operator|.
name|TXN_ABORTED
argument_list|,
name|exception
operator|.
name|getCanonicalErrorMsg
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"AlexanderIII"
argument_list|,
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|*
literal|2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|runReaper
argument_list|()
expr_stmt|;
comment|//this will abort the txn
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|GetOpenTxnsInfoResponse
name|txnsInfo
init|=
name|txnHandler
operator|.
name|getOpenTxnsInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|txnsInfo
operator|.
name|getTxn_high_water_mark
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|rollbackTxn
argument_list|()
expr_stmt|;
comment|//this is idempotent
block|}
annotation|@
name|Ignore
argument_list|(
literal|"This seems useless now that we have a txn for everything"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testLockTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|addPartitionInput
argument_list|(
name|newTable
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|QUERY
argument_list|)
decl_stmt|;
comment|//make sure it works with nothing to expire
name|testLockExpiration
argument_list|(
name|txnMgr
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//create a few read locks, all on the same resource
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"PeterI"
operator|+
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// No heartbeat
block|}
name|testLockExpiration
argument_list|(
name|txnMgr
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//create a lot of locks
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_TIMED_OUT_TXN_ABORT_BATCH_SIZE
operator|+
literal|17
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"PeterI"
operator|+
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// No heartbeat
block|}
name|testLockExpiration
argument_list|(
name|txnMgr
argument_list|,
name|TEST_TIMED_OUT_TXN_ABORT_BATCH_SIZE
operator|+
literal|17
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Create a lock, but send the heartbeat with a long delay. The lock will get expired.
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocksWithHeartbeatDelay
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"bob"
argument_list|,
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|*
literal|10
argument_list|)
expr_stmt|;
name|testLockExpiration
argument_list|(
name|txnMgr
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Create a lock and trigger a heartbeat. With heartbeat, the lock won't expire.
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"peter"
argument_list|)
expr_stmt|;
name|testLockExpiration
argument_list|(
name|txnMgr
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testLockExpiration
parameter_list|(
name|HiveTxnManager
name|txnMgr
parameter_list|,
name|int
name|numLocksBefore
parameter_list|,
name|boolean
name|shouldExpire
parameter_list|)
throws|throws
name|Exception
block|{
name|DbLockManager
name|lockManager
init|=
operator|(
name|DbLockManager
operator|)
name|txnMgr
operator|.
name|getLockManager
argument_list|()
decl_stmt|;
name|ShowLocksResponse
name|resp
init|=
name|lockManager
operator|.
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong number of locks before expire"
argument_list|,
name|numLocksBefore
argument_list|,
name|resp
operator|.
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|runReaper
argument_list|()
expr_stmt|;
name|resp
operator|=
name|lockManager
operator|.
name|getLocks
argument_list|()
expr_stmt|;
if|if
condition|(
name|shouldExpire
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected all locks to expire"
argument_list|,
literal|0
argument_list|,
name|resp
operator|.
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|lockManager
operator|.
name|clearLocalLockRecords
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No lock should expire because there is heartbeating"
argument_list|,
name|numLocksBefore
argument_list|,
name|resp
operator|.
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|addPartitionInput
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|addPartitionInput
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|addPartitionInput
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|WriteEntity
name|we
init|=
name|addTableOutput
argument_list|(
name|WriteEntity
operator|.
name|WriteType
operator|.
name|INSERT
argument_list|)
decl_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|QUERY
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|TxnDbUtil
operator|.
name|countLockComponents
argument_list|(
operator|(
operator|(
name|DbLockManager
operator|.
name|DbHiveLock
operator|)
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|lockId
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|locks
operator|=
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|WriteEntity
name|we
init|=
name|addTableOutput
argument_list|(
name|WriteEntity
operator|.
name|WriteType
operator|.
name|UPDATE
argument_list|)
decl_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|QUERY
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countLockComponents
argument_list|(
operator|(
operator|(
name|DbLockManager
operator|.
name|DbHiveLock
operator|)
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|lockId
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|locks
operator|=
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|WriteEntity
name|we
init|=
name|addTableOutput
argument_list|(
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DELETE
argument_list|)
decl_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|QUERY
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countLockComponents
argument_list|(
operator|(
operator|(
name|DbLockManager
operator|.
name|DbHiveLock
operator|)
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|lockId
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|locks
operator|=
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|WriteEntity
name|we
init|=
name|addTableOutput
argument_list|(
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DELETE
argument_list|)
decl_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|QUERY
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countLockComponents
argument_list|(
operator|(
operator|(
name|DbLockManager
operator|.
name|DbHiveLock
operator|)
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|lockId
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|rollbackTxn
argument_list|()
expr_stmt|;
name|locks
operator|=
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDDLExclusive
parameter_list|()
throws|throws
name|Exception
block|{
name|WriteEntity
name|we
init|=
name|addTableOutput
argument_list|(
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_EXCLUSIVE
argument_list|)
decl_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|DROPTABLE
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countLockComponents
argument_list|(
operator|(
operator|(
name|DbLockManager
operator|.
name|DbHiveLock
operator|)
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|lockId
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|rollbackTxn
argument_list|()
expr_stmt|;
name|locks
operator|=
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDDLShared
parameter_list|()
throws|throws
name|Exception
block|{
name|WriteEntity
name|we
init|=
name|addTableOutput
argument_list|(
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_SHARED
argument_list|)
decl_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|ALTERTABLE_EXCHANGEPARTITION
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countLockComponents
argument_list|(
operator|(
operator|(
name|DbLockManager
operator|.
name|DbHiveLock
operator|)
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|lockId
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|locks
operator|=
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDDLNoLock
parameter_list|()
throws|throws
name|Exception
block|{
name|WriteEntity
name|we
init|=
name|addTableOutput
argument_list|(
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
decl_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|CREATEDATABASE
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|locks
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|rollbackTxn
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|concurrencyFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|badConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|badConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DbTxnManager"
argument_list|)
expr_stmt|;
name|badConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|sawException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|badConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|sawException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockAcquisitionAndRelease
parameter_list|()
throws|throws
name|Exception
block|{
name|addTableInput
argument_list|()
expr_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|QUERY
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|locks
operator|=
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeartbeater
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|txnMgr
operator|instanceof
name|DbTxnManager
argument_list|)
expr_stmt|;
name|addTableInput
argument_list|()
expr_stmt|;
name|LockException
name|exception
init|=
literal|null
decl_stmt|;
name|QueryPlan
name|qp
init|=
operator|new
name|MockQueryPlan
argument_list|(
name|this
argument_list|,
name|HiveOperation
operator|.
name|QUERY
argument_list|)
decl_stmt|;
comment|// Case 1: If there's no delay for the heartbeat, txn should be able to commit
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"fred"
argument_list|)
expr_stmt|;
comment|// heartbeat started..
name|runReaper
argument_list|()
expr_stmt|;
try|try
block|{
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Txn commit should be successful"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
comment|// Case 2: If there's delay for the heartbeat, but the delay is within the reaper's tolerance,
comment|//         then txt should be able to commit
comment|// Start the heartbeat after a delay, which is shorter than  the HIVE_TXN_TIMEOUT
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"tom"
argument_list|,
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|/
literal|2
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"tom"
argument_list|)
expr_stmt|;
name|runReaper
argument_list|()
expr_stmt|;
try|try
block|{
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Txn commit should also be successful"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
comment|// Case 3: If there's delay for the heartbeat, and the delay is long enough to trigger the reaper,
comment|//         then the txn will time out and be aborted.
comment|//         Here we just don't send the heartbeat at all - an infinite delay.
comment|// Start the heartbeat after a delay, which exceeds the HIVE_TXN_TIMEOUT
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"jerry"
argument_list|,
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|*
literal|2
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|qp
argument_list|,
name|ctx
argument_list|,
literal|"jerry"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|runReaper
argument_list|()
expr_stmt|;
try|try
block|{
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Txn should have been aborted"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorMsg
operator|.
name|TXN_ABORTED
argument_list|,
name|exception
operator|.
name|getCanonicalErrorMsg
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TxnDbUtil
operator|.
name|prepDb
argument_list|()
expr_stmt|;
name|txnMgr
operator|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
expr_stmt|;
comment|//init lock manager
name|Assert
operator|.
name|assertTrue
argument_list|(
name|txnMgr
operator|instanceof
name|DbTxnManager
argument_list|)
expr_stmt|;
name|nextInput
operator|=
literal|1
expr_stmt|;
name|readEntities
operator|=
operator|new
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
argument_list|()
expr_stmt|;
name|writeEntities
operator|=
operator|new
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TIMEDOUT_TXN_REAPER_START
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|houseKeeperService
operator|=
operator|new
name|AcidHouseKeeperService
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|houseKeeperService
operator|!=
literal|null
condition|)
name|houseKeeperService
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|txnMgr
operator|!=
literal|null
condition|)
name|txnMgr
operator|.
name|closeTxnManager
argument_list|()
expr_stmt|;
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|MockQueryPlan
extends|extends
name|QueryPlan
block|{
specifier|private
specifier|final
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|queryId
decl_stmt|;
name|MockQueryPlan
parameter_list|(
name|TestDbTxnManager
name|test
parameter_list|,
name|HiveOperation
name|operation
parameter_list|)
block|{
name|super
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|inputs
operator|.
name|addAll
argument_list|(
name|test
operator|.
name|readEntities
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|addAll
argument_list|(
name|test
operator|.
name|writeEntities
argument_list|)
expr_stmt|;
name|queryId
operator|=
name|makeQueryId
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|getInputs
parameter_list|()
block|{
return|return
name|inputs
return|;
block|}
annotation|@
name|Override
specifier|public
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|getOutputs
parameter_list|()
block|{
return|return
name|outputs
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getQueryId
parameter_list|()
block|{
return|return
name|queryId
return|;
block|}
block|}
specifier|private
name|Table
name|newTable
parameter_list|(
name|boolean
name|isPartitioned
parameter_list|)
block|{
name|Table
name|t
init|=
operator|new
name|Table
argument_list|(
literal|"default"
argument_list|,
literal|"table"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|nextInput
operator|++
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPartitioned
condition|)
block|{
name|FieldSchema
name|fs
init|=
operator|new
name|FieldSchema
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setName
argument_list|(
literal|"version"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setType
argument_list|(
literal|"String"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPartCols
argument_list|(
name|partCols
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblProps
init|=
name|t
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|tblProps
operator|==
literal|null
condition|)
block|{
name|tblProps
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|tblProps
operator|.
name|put
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_IS_TRANSACTIONAL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setParameters
argument_list|(
name|tblProps
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|private
name|void
name|addTableInput
parameter_list|()
block|{
name|ReadEntity
name|re
init|=
operator|new
name|ReadEntity
argument_list|(
name|newTable
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|readEntities
operator|.
name|add
argument_list|(
name|re
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addPartitionInput
parameter_list|(
name|Table
name|t
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partSpec
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|nextInput
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|p
init|=
operator|new
name|Partition
argument_list|(
name|t
argument_list|,
name|partSpec
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/dev/null"
argument_list|)
argument_list|)
decl_stmt|;
name|ReadEntity
name|re
init|=
operator|new
name|ReadEntity
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|readEntities
operator|.
name|add
argument_list|(
name|re
argument_list|)
expr_stmt|;
block|}
specifier|private
name|WriteEntity
name|addTableOutput
parameter_list|(
name|WriteEntity
operator|.
name|WriteType
name|writeType
parameter_list|)
block|{
name|WriteEntity
name|we
init|=
operator|new
name|WriteEntity
argument_list|(
name|newTable
argument_list|(
literal|false
argument_list|)
argument_list|,
name|writeType
argument_list|)
decl_stmt|;
name|writeEntities
operator|.
name|add
argument_list|(
name|we
argument_list|)
expr_stmt|;
return|return
name|we
return|;
block|}
specifier|private
name|WriteEntity
name|addPartitionOutput
parameter_list|(
name|Table
name|t
parameter_list|,
name|WriteEntity
operator|.
name|WriteType
name|writeType
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partSpec
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|nextInput
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|p
init|=
operator|new
name|Partition
argument_list|(
name|t
argument_list|,
name|partSpec
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/dev/null"
argument_list|)
argument_list|)
decl_stmt|;
name|WriteEntity
name|we
init|=
operator|new
name|WriteEntity
argument_list|(
name|p
argument_list|,
name|writeType
argument_list|)
decl_stmt|;
name|writeEntities
operator|.
name|add
argument_list|(
name|we
argument_list|)
expr_stmt|;
return|return
name|we
return|;
block|}
specifier|private
name|WriteEntity
name|addDynamicPartitionedOutput
parameter_list|(
name|Table
name|t
parameter_list|,
name|WriteEntity
operator|.
name|WriteType
name|writeType
parameter_list|)
throws|throws
name|Exception
block|{
name|DummyPartition
name|dp
init|=
operator|new
name|DummyPartition
argument_list|(
name|t
argument_list|,
literal|"no clue what I should call this"
argument_list|)
decl_stmt|;
name|WriteEntity
name|we
init|=
operator|new
name|WriteEntity
argument_list|(
name|dp
argument_list|,
name|writeType
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|writeEntities
operator|.
name|add
argument_list|(
name|we
argument_list|)
expr_stmt|;
return|return
name|we
return|;
block|}
block|}
end_class

end_unit

