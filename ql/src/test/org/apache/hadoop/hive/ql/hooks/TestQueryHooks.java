begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
specifier|public
class|class
name|TestQueryHooks
block|{
specifier|private
specifier|static
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|static
name|QueryLifeTimeHookContext
index|[]
name|ctxs
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestQueryHooks
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_QUERY_LIFETIME_HOOKS
argument_list|,
name|TestLifeTimeHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUpBefore
parameter_list|()
block|{
name|ctxs
operator|=
operator|new
name|QueryLifeTimeHookContext
index|[
literal|4
index|]
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompile
parameter_list|()
throws|throws
name|Exception
block|{
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|driver
operator|.
name|compile
argument_list|(
literal|"SELECT 1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected compilation to succeed"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ctxs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ctxs
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ctxs
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ctxs
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SELECT 1"
argument_list|,
name|ctxs
index|[
literal|0
index|]
operator|.
name|getCommand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SELECT 1"
argument_list|,
name|ctxs
index|[
literal|1
index|]
operator|.
name|getCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompileFailure
parameter_list|()
block|{
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|driver
operator|.
name|compile
argument_list|(
literal|"SELECT * FROM foo"
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"Expected compilation to fail"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ctxs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ctxs
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ctxs
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ctxs
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SELECT * FROM foo"
argument_list|,
name|ctxs
index|[
literal|0
index|]
operator|.
name|getCommand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SELECT * FROM foo"
argument_list|,
name|ctxs
index|[
literal|1
index|]
operator|.
name|getCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"SELECT 1"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected query to run"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ctxs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ctxs
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ctxs
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ctxs
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ctxs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"SELECT 1"
argument_list|,
name|ctxs
index|[
name|i
index|]
operator|.
name|getCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|ctxs
index|[
literal|2
index|]
operator|.
name|getHookContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ctxs
index|[
literal|3
index|]
operator|.
name|getHookContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Driver
name|createDriver
parameter_list|()
block|{
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Driver
name|driver
init|=
operator|new
name|Driver
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|driver
operator|.
name|init
argument_list|()
expr_stmt|;
return|return
name|driver
return|;
block|}
comment|/**    * Testing hook which just saves the context    */
specifier|private
specifier|static
class|class
name|TestLifeTimeHook
implements|implements
name|QueryLifeTimeHook
block|{
specifier|public
name|TestLifeTimeHook
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|beforeCompile
parameter_list|(
name|QueryLifeTimeHookContext
name|ctx
parameter_list|)
block|{
name|ctxs
index|[
literal|0
index|]
operator|=
name|ctx
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCompile
parameter_list|(
name|QueryLifeTimeHookContext
name|ctx
parameter_list|,
name|boolean
name|hasError
parameter_list|)
block|{
name|ctxs
index|[
literal|1
index|]
operator|=
name|ctx
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeExecution
parameter_list|(
name|QueryLifeTimeHookContext
name|ctx
parameter_list|)
block|{
name|ctxs
index|[
literal|2
index|]
operator|=
name|ctx
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterExecution
parameter_list|(
name|QueryLifeTimeHookContext
name|ctx
parameter_list|,
name|boolean
name|hasError
parameter_list|)
block|{
name|ctxs
index|[
literal|3
index|]
operator|=
name|ctx
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

