begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
specifier|public
class|class
name|TestQueryHooks
block|{
specifier|private
specifier|static
name|HiveConf
name|conf
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestQueryHooks
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllQueryLifeTimeWithParseHooks
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
literal|"select 1"
decl_stmt|;
name|ArgumentMatcher
argument_list|<
name|QueryLifeTimeHookContext
argument_list|>
name|argMatcher
init|=
operator|new
name|QueryLifeTimeHookContextMatcher
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|QueryLifeTimeHookWithParseHooks
name|mockHook
init|=
name|mock
argument_list|(
name|QueryLifeTimeHookWithParseHooks
operator|.
name|class
argument_list|)
decl_stmt|;
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getHookRunner
argument_list|()
operator|.
name|addLifeTimeHook
argument_list|(
name|mockHook
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|beforeParse
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|afterParse
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|beforeCompile
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|afterCompile
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|beforeExecution
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|afterExecution
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryLifeTimeWithParseHooksWithParseError
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
literal|"invalidquery"
decl_stmt|;
name|ArgumentMatcher
argument_list|<
name|QueryLifeTimeHookContext
argument_list|>
name|argMatcher
init|=
operator|new
name|QueryLifeTimeHookContextMatcher
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|QueryLifeTimeHookWithParseHooks
name|mockHook
init|=
name|mock
argument_list|(
name|QueryLifeTimeHookWithParseHooks
operator|.
name|class
argument_list|)
decl_stmt|;
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getHookRunner
argument_list|()
operator|.
name|addLifeTimeHook
argument_list|(
name|mockHook
argument_list|)
expr_stmt|;
try|try
block|{
name|driver
operator|.
name|run
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected parsing to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandProcessorException
name|e
parameter_list|)
block|{
comment|// we expect to get here
block|}
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|beforeParse
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|afterParse
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|beforeCompile
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|afterCompile
argument_list|(
name|any
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|beforeExecution
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|afterExecution
argument_list|(
name|any
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryLifeTimeWithParseHooksWithCompileError
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
literal|"select * from foo"
decl_stmt|;
name|ArgumentMatcher
argument_list|<
name|QueryLifeTimeHookContext
argument_list|>
name|argMatcher
init|=
operator|new
name|QueryLifeTimeHookContextMatcher
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|QueryLifeTimeHookWithParseHooks
name|mockHook
init|=
name|mock
argument_list|(
name|QueryLifeTimeHookWithParseHooks
operator|.
name|class
argument_list|)
decl_stmt|;
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getHookRunner
argument_list|()
operator|.
name|addLifeTimeHook
argument_list|(
name|mockHook
argument_list|)
expr_stmt|;
try|try
block|{
name|driver
operator|.
name|run
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected compilation to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandProcessorException
name|e
parameter_list|)
block|{
comment|// we expect to get here
block|}
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|beforeParse
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|afterParse
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|beforeCompile
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|afterCompile
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|beforeExecution
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|afterExecution
argument_list|(
name|any
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllQueryLifeTimeHooks
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
literal|"select 1"
decl_stmt|;
name|ArgumentMatcher
argument_list|<
name|QueryLifeTimeHookContext
argument_list|>
name|argMatcher
init|=
operator|new
name|QueryLifeTimeHookContextMatcher
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|QueryLifeTimeHook
name|mockHook
init|=
name|mock
argument_list|(
name|QueryLifeTimeHook
operator|.
name|class
argument_list|)
decl_stmt|;
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getHookRunner
argument_list|()
operator|.
name|addLifeTimeHook
argument_list|(
name|mockHook
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|beforeCompile
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|afterCompile
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|beforeExecution
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|afterExecution
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryLifeTimeWithCompileError
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
literal|"select * from foo"
decl_stmt|;
name|ArgumentMatcher
argument_list|<
name|QueryLifeTimeHookContext
argument_list|>
name|argMatcher
init|=
operator|new
name|QueryLifeTimeHookContextMatcher
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|QueryLifeTimeHook
name|mockHook
init|=
name|mock
argument_list|(
name|QueryLifeTimeHook
operator|.
name|class
argument_list|)
decl_stmt|;
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getHookRunner
argument_list|()
operator|.
name|addLifeTimeHook
argument_list|(
name|mockHook
argument_list|)
expr_stmt|;
try|try
block|{
name|driver
operator|.
name|run
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected compilation to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandProcessorException
name|e
parameter_list|)
block|{
comment|// we expect to get here
block|}
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|beforeCompile
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|)
operator|.
name|afterCompile
argument_list|(
name|argThat
argument_list|(
name|argMatcher
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|beforeExecution
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHook
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|afterExecution
argument_list|(
name|any
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Driver
name|createDriver
parameter_list|()
throws|throws
name|IllegalAccessException
throws|,
name|ClassNotFoundException
throws|,
name|InstantiationException
block|{
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Driver
name|driver
init|=
operator|new
name|Driver
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|driver
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|QueryLifeTimeHookContextMatcher
extends|extends
name|ArgumentMatcher
argument_list|<
name|QueryLifeTimeHookContext
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|command
decl_stmt|;
specifier|private
name|QueryLifeTimeHookContextMatcher
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|(
operator|(
name|QueryLifeTimeHookContext
operator|)
name|o
operator|)
operator|.
name|getCommand
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|command
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

