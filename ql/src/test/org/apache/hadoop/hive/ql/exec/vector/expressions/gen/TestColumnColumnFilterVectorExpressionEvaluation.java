begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|VectorizedRowGroupGenUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  * TestColumnColumnFilterVectorExpressionEvaluation.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestColumnColumnFilterVectorExpressionEvaluation
block|{
specifier|private
specifier|static
specifier|final
name|int
name|BATCH_SIZE
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|SEED
init|=
literal|0xfa57
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualDoubleColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualDoubleColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualDoubleColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualDoubleColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualDoubleColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualDoubleColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualDoubleColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualDoubleColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualDoubleColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualDoubleColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualDoubleColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualDoubleColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualDoubleColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualDoubleColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualDoubleColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualDoubleColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessDoubleColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessDoubleColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessDoubleColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessDoubleColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessDoubleColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessDoubleColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessDoubleColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessDoubleColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualDoubleColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualDoubleColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualDoubleColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualDoubleColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualDoubleColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualDoubleColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualDoubleColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualDoubleColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterDoubleColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterDoubleColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterDoubleColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterDoubleColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterDoubleColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterDoubleColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterDoubleColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterDoubleColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualDoubleColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualDoubleColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualDoubleColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualDoubleColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualDoubleColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualDoubleColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualDoubleColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualDoubleColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualLongColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualLongColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualLongColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualLongColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualLongColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualLongColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualLongColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualLongColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualLongColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualLongColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualLongColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualLongColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualLongColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualLongColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualLongColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualLongColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessLongColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessLongColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessLongColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessLongColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessLongColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessLongColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessLongColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessLongColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualLongColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualLongColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualLongColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualLongColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualLongColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualLongColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualLongColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualLongColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterLongColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterLongColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterLongColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterLongColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterLongColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterLongColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterLongColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterLongColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualLongColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualLongColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualLongColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualLongColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterLongColGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualLongColumnC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualLongColumnC1NullsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualLongColumnC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualLongColumnC1NullsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|FilterDoubleColGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
if|if
condition|(
operator|!
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector1
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|inputColumnVector2
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

