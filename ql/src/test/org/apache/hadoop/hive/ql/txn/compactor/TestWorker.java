begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactResponseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
operator|.
name|StringableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Tests for the worker thread and its MR jobs.  * todo: most delta files in this test suite use txn id range, i.e. [N,N+M]  * That means that they all look like they were created by compaction or by streaming api.  * Delta files created by SQL should have [N,N] range (and a suffix in v1.3 and later)  * Need to change some of these to have better test coverage.  */
end_comment

begin_class
specifier|public
class|class
name|TestWorker
extends|extends
name|CompactorTest
block|{
specifier|static
specifier|final
specifier|private
name|String
name|CLASS_NAME
init|=
name|TestWorker
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|public
name|TestWorker
parameter_list|()
throws|throws
name|Exception
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nothing
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that the whole things works when there's nothing in the queue.  This is just a
comment|// survival test.
name|startWorker
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringableMap
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Empty map case
name|StringableMap
name|m
init|=
operator|new
name|StringableMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|m
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0:"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|StringableMap
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|m
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|base
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|base
operator|.
name|put
argument_list|(
literal|"mary"
argument_list|,
literal|"poppins"
argument_list|)
expr_stmt|;
name|base
operator|.
name|put
argument_list|(
literal|"bert"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|base
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|"banks"
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|StringableMap
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|s
operator|=
name|m
operator|.
name|toString
argument_list|()
expr_stmt|;
name|m
operator|=
operator|new
name|StringableMap
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|m
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|saw
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|saw
operator|.
name|put
argument_list|(
literal|"mary"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|saw
operator|.
name|put
argument_list|(
literal|"bert"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|saw
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|saw
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"mary"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"poppins"
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|"bert"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
name|Assert
operator|.
name|assertNull
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|null
operator|==
name|e
operator|.
name|getKey
argument_list|()
condition|)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"banks"
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected value "
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|saw
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|saw
operator|.
name|get
argument_list|(
literal|"mary"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|saw
operator|.
name|get
argument_list|(
literal|"bert"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|saw
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringableList
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Empty list case
name|CompactorMR
operator|.
name|StringableList
name|ls
init|=
operator|new
name|CompactorMR
operator|.
name|StringableList
argument_list|()
decl_stmt|;
name|String
name|s
init|=
name|ls
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0:"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|ls
operator|=
operator|new
name|CompactorMR
operator|.
name|StringableList
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ls
operator|=
operator|new
name|CompactorMR
operator|.
name|StringableList
argument_list|()
expr_stmt|;
name|ls
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|ls
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/usr"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|ls
operator|.
name|toString
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected 2:4:/tmp4:/usr or 2:4:/usr4:/tmp, got "
operator|+
name|s
argument_list|,
literal|"2:4:/tmp4:/usr"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|||
literal|"2:4:/usr4:/tmp"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|ls
operator|=
operator|new
name|CompactorMR
operator|.
name|StringableList
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|sawTmp
init|=
literal|false
decl_stmt|,
name|sawUsr
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|ls
control|)
block|{
if|if
condition|(
literal|"/tmp"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
name|sawTmp
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
literal|"/usr"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
name|sawUsr
operator|=
literal|true
expr_stmt|;
else|else
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected path "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawTmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawUsr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|inputSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|basename
init|=
literal|"/warehouse/foo/base_1"
decl_stmt|;
name|String
name|delta1
init|=
literal|"/warehouse/foo/delta_2_3"
decl_stmt|;
name|String
name|delta2
init|=
literal|"/warehouse/foo/delta_4_7"
decl_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
literal|"newWriteInputSplitTest"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|os
operator|.
name|writeBytes
argument_list|(
literal|"mary had a little lamb its fleece was white as snow\n"
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|Path
index|[]
name|deltas
init|=
operator|new
name|Path
index|[
literal|2
index|]
decl_stmt|;
name|deltas
index|[
literal|0
index|]
operator|=
operator|new
name|Path
argument_list|(
name|delta1
argument_list|)
expr_stmt|;
name|deltas
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|delta2
argument_list|)
expr_stmt|;
name|CompactorMR
operator|.
name|CompactorInputSplit
name|split
init|=
operator|new
name|CompactorMR
operator|.
name|CompactorInputSplit
argument_list|(
name|conf
argument_list|,
literal|3
argument_list|,
name|files
argument_list|,
operator|new
name|Path
argument_list|(
name|basename
argument_list|)
argument_list|,
name|deltas
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|520L
argument_list|,
name|split
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|locations
init|=
name|split
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|locations
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutput
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|split
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|split
operator|=
operator|new
name|CompactorMR
operator|.
name|CompactorInputSplit
argument_list|()
expr_stmt|;
name|DataInput
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|split
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|split
operator|.
name|getBucket
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|basename
argument_list|,
name|split
operator|.
name|getBaseDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|deltas
operator|=
name|split
operator|.
name|getDeltaDirs
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|deltas
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|delta1
argument_list|,
name|deltas
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|delta2
argument_list|,
name|deltas
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|inputSplitNullBase
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|delta1
init|=
literal|"/warehouse/foo/delta_2_3"
decl_stmt|;
name|String
name|delta2
init|=
literal|"/warehouse/foo/delta_4_7"
decl_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
literal|"newWriteInputSplitTest"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|os
operator|.
name|writeBytes
argument_list|(
literal|"mary had a little lamb its fleece was white as snow\n"
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|Path
index|[]
name|deltas
init|=
operator|new
name|Path
index|[
literal|2
index|]
decl_stmt|;
name|deltas
index|[
literal|0
index|]
operator|=
operator|new
name|Path
argument_list|(
name|delta1
argument_list|)
expr_stmt|;
name|deltas
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|delta2
argument_list|)
expr_stmt|;
name|CompactorMR
operator|.
name|CompactorInputSplit
name|split
init|=
operator|new
name|CompactorMR
operator|.
name|CompactorInputSplit
argument_list|(
name|conf
argument_list|,
literal|3
argument_list|,
name|files
argument_list|,
literal|null
argument_list|,
name|deltas
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutput
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|split
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|split
operator|=
operator|new
name|CompactorMR
operator|.
name|CompactorInputSplit
argument_list|()
expr_stmt|;
name|DataInput
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|split
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|split
operator|.
name|getBucket
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|split
operator|.
name|getBaseDir
argument_list|()
argument_list|)
expr_stmt|;
name|deltas
operator|=
name|split
operator|.
name|getDeltaDirs
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|deltas
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|delta1
argument_list|,
name|deltas
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|delta2
argument_list|,
name|deltas
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortedTable
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
init|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|sortCols
operator|.
name|add
argument_list|(
operator|new
name|Order
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"st"
argument_list|,
literal|false
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
name|sortCols
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addBaseFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|20L
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|21L
argument_list|,
literal|22L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|23L
argument_list|,
literal|24L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|21L
argument_list|,
literal|24L
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"st"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
comment|// There should still be four directories in the location.
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stat
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortedPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
init|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|sortCols
operator|.
name|add
argument_list|(
operator|new
name|Order
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"sp"
argument_list|,
literal|true
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
name|sortCols
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Partition
name|p
init|=
name|newPartition
argument_list|(
name|t
argument_list|,
literal|"today"
argument_list|,
name|sortCols
argument_list|)
decl_stmt|;
name|addBaseFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|20L
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|21L
argument_list|,
literal|22L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|23L
argument_list|,
literal|24L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|21L
argument_list|,
literal|24L
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"sp"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setPartitionname
argument_list|(
literal|"ds=today"
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
comment|// There should still be four directories in the location.
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stat
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minorTableWithBase
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting minorTableWithBase"
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"mtwb"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addBaseFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|20L
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|21L
argument_list|,
literal|22L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|23L
argument_list|,
literal|24L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"mtwb"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should still now be 5 directories in the location
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stat
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Find the new delta file and make sure it has the right contents
name|boolean
name|sawNewDelta
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|makeDeltaDirNameCompacted
argument_list|(
literal|21
argument_list|,
literal|24
argument_list|)
argument_list|)
condition|)
block|{
name|sawNewDelta
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|208L
argument_list|,
name|buckets
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|208L
argument_list|,
name|buckets
index|[
literal|1
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"This is not the delta file you are looking for "
operator|+
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawNewDelta
argument_list|)
expr_stmt|;
block|}
comment|/**    * todo: fix https://issues.apache.org/jira/browse/HIVE-9995    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|minorWithOpenInMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting minorWithOpenInMiddle"
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"mtwb"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addBaseFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|20L
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|21L
argument_list|,
literal|22L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|23L
argument_list|,
literal|25L
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|addLengthFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|23L
argument_list|,
literal|25L
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|26L
argument_list|,
literal|27L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|27
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|23L
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"mtwb"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should still now be 5 directories in the location
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stat
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Find the new delta file and make sure it has the right contents
name|Arrays
operator|.
name|sort
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"base_20"
argument_list|,
name|stat
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|makeDeltaDirNameCompacted
argument_list|(
literal|21
argument_list|,
literal|22
argument_list|)
argument_list|,
name|stat
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|makeDeltaDirName
argument_list|(
literal|23
argument_list|,
literal|25
argument_list|)
argument_list|,
name|stat
index|[
literal|2
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|makeDeltaDirName
argument_list|(
literal|26
argument_list|,
literal|27
argument_list|)
argument_list|,
name|stat
index|[
literal|3
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minorWithAborted
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting minorWithAborted"
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"mtwb"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addBaseFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|20L
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|21L
argument_list|,
literal|22L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|23L
argument_list|,
literal|25L
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|addLengthFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|23L
argument_list|,
literal|25L
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|26L
argument_list|,
literal|27L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|27
argument_list|,
literal|null
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|24L
argument_list|,
literal|25L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"mtwb"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should still now be 5 directories in the location
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stat
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Find the new delta file and make sure it has the right contents
name|Arrays
operator|.
name|sort
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"base_20"
argument_list|,
name|stat
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|makeDeltaDirName
argument_list|(
literal|21
argument_list|,
literal|22
argument_list|)
argument_list|,
name|stat
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|makeDeltaDirNameCompacted
argument_list|(
literal|21
argument_list|,
literal|27
argument_list|)
argument_list|,
name|stat
index|[
literal|2
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|makeDeltaDirName
argument_list|(
literal|23
argument_list|,
literal|25
argument_list|)
argument_list|,
name|stat
index|[
literal|3
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|makeDeltaDirName
argument_list|(
literal|26
argument_list|,
literal|27
argument_list|)
argument_list|,
name|stat
index|[
literal|4
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minorPartitionWithBase
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"mpwb"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Partition
name|p
init|=
name|newPartition
argument_list|(
name|t
argument_list|,
literal|"today"
argument_list|)
decl_stmt|;
name|addBaseFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|20L
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|21L
argument_list|,
literal|22L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|23L
argument_list|,
literal|24L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"mpwb"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setPartitionname
argument_list|(
literal|"ds=today"
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should still be four directories in the location.
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stat
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Find the new delta file and make sure it has the right contents
name|boolean
name|sawNewDelta
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|makeDeltaDirNameCompacted
argument_list|(
literal|21
argument_list|,
literal|24
argument_list|)
argument_list|)
condition|)
block|{
name|sawNewDelta
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|208L
argument_list|,
name|buckets
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|208L
argument_list|,
name|buckets
index|[
literal|1
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"This is not the delta file you are looking for "
operator|+
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawNewDelta
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minorTableNoBase
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting minorTableWithBase"
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"mtnb"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"mtnb"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should still now be 5 directories in the location
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stat
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Find the new delta file and make sure it has the right contents
name|boolean
name|sawNewDelta
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|makeDeltaDirNameCompacted
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
condition|)
block|{
name|sawNewDelta
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|208L
argument_list|,
name|buckets
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|208L
argument_list|,
name|buckets
index|[
literal|1
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"This is not the delta file you are looking for "
operator|+
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawNewDelta
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|majorTableWithBase
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting majorTableWithBase"
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"matwb"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addBaseFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|20L
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|21L
argument_list|,
literal|22L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|23L
argument_list|,
literal|24L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"matwb"
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should still now be 5 directories in the location
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stat
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Find the new delta file and make sure it has the right contents
name|boolean
name|sawNewBase
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"base_0000024"
argument_list|)
condition|)
block|{
name|sawNewBase
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|624L
argument_list|,
name|buckets
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|624L
argument_list|,
name|buckets
index|[
literal|1
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"This is not the file you are looking for "
operator|+
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawNewBase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minorNoBaseLotsOfDeltas
parameter_list|()
throws|throws
name|Exception
block|{
name|compactNoBaseLotsOfDeltas
argument_list|(
name|CompactionType
operator|.
name|MINOR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|majorNoBaseLotsOfDeltas
parameter_list|()
throws|throws
name|Exception
block|{
name|compactNoBaseLotsOfDeltas
argument_list|(
name|CompactionType
operator|.
name|MAJOR
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compactNoBaseLotsOfDeltas
parameter_list|(
name|CompactionType
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|COMPACTOR_MAX_NUM_DELTA
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"mapwb"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Partition
name|p
init|=
name|newPartition
argument_list|(
name|t
argument_list|,
literal|"today"
argument_list|)
decl_stmt|;
comment|//    addBaseFile(t, p, 20L, 20);
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|21L
argument_list|,
literal|21L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|23L
argument_list|,
literal|23L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|//make it look like streaming API use case
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|25L
argument_list|,
literal|29L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|31L
argument_list|,
literal|32L
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|//make it looks like 31-32 has been compacted, but not cleaned
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|31L
argument_list|,
literal|33L
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|35L
argument_list|,
literal|35L
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|/*since COMPACTOR_MAX_NUM_DELTA=2,     we expect files 1,2 to be minor compacted by 1 job to produce delta_21_23     * 3,5 to be minor compacted by 2nd job (file 4 is obsolete) to make delta_25_33 (4th is skipped)     *     * and then the 'requested'     * minor compaction to combine delta_21_23, delta_25_33 and delta_35_35 to make delta_21_35     * or major compaction to create base_35*/
name|burnThroughTransactions
argument_list|(
literal|35
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"mapwb"
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setPartitionname
argument_list|(
literal|"ds=today"
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|stat
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Find the new delta file and make sure it has the right contents
name|BitSet
name|matchesFound
init|=
operator|new
name|BitSet
argument_list|(
literal|9
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|makeDeltaDirName
argument_list|(
literal|21
argument_list|,
literal|21
argument_list|)
argument_list|)
condition|)
block|{
name|matchesFound
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|makeDeltaDirName
argument_list|(
literal|23
argument_list|,
literal|23
argument_list|)
argument_list|)
condition|)
block|{
name|matchesFound
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|makeDeltaDirNameCompacted
argument_list|(
literal|25
argument_list|,
literal|29
argument_list|)
argument_list|)
condition|)
block|{
name|matchesFound
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|makeDeltaDirNameCompacted
argument_list|(
literal|31
argument_list|,
literal|32
argument_list|)
argument_list|)
condition|)
block|{
name|matchesFound
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|makeDeltaDirNameCompacted
argument_list|(
literal|31
argument_list|,
literal|33
argument_list|)
argument_list|)
condition|)
block|{
name|matchesFound
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|makeDeltaDirName
argument_list|(
literal|35
argument_list|,
literal|35
argument_list|)
argument_list|)
condition|)
block|{
name|matchesFound
operator|.
name|set
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|makeDeltaDirNameCompacted
argument_list|(
literal|21
argument_list|,
literal|23
argument_list|)
argument_list|)
condition|)
block|{
name|matchesFound
operator|.
name|set
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|makeDeltaDirNameCompacted
argument_list|(
literal|25
argument_list|,
literal|33
argument_list|)
argument_list|)
condition|)
block|{
name|matchesFound
operator|.
name|set
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
comment|//yes, both do set(8)
case|case
name|MINOR
case|:
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|makeDeltaDirNameCompacted
argument_list|(
literal|21
argument_list|,
literal|35
argument_list|)
argument_list|)
condition|)
block|{
name|matchesFound
operator|.
name|set
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAJOR
case|:
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|AcidUtils
operator|.
name|baseDir
argument_list|(
literal|35
argument_list|)
argument_list|)
condition|)
block|{
name|matchesFound
operator|.
name|set
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
block|}
name|StringBuilder
name|sb
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|matchesFound
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
name|sb
operator|==
literal|null
condition|)
block|{
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"Some files are missing at index: "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sb
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|majorPartitionWithBase
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting majorPartitionWithBase"
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"mapwb"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Partition
name|p
init|=
name|newPartition
argument_list|(
name|t
argument_list|,
literal|"today"
argument_list|)
decl_stmt|;
name|addBaseFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|20L
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|21L
argument_list|,
literal|22L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|23L
argument_list|,
literal|24L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"mapwb"
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setPartitionname
argument_list|(
literal|"ds=today"
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should still be four directories in the location.
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stat
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Find the new delta file and make sure it has the right contents
name|boolean
name|sawNewBase
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"base_0000024"
argument_list|)
condition|)
block|{
name|sawNewBase
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|624L
argument_list|,
name|buckets
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|624L
argument_list|,
name|buckets
index|[
literal|1
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"This is not the file you are looking for "
operator|+
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawNewBase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|majorTableNoBase
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting majorTableNoBase"
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"matnb"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"matnb"
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should now be 3 directories in the location
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stat
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Find the new delta file and make sure it has the right contents
name|boolean
name|sawNewBase
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"base_0000004"
argument_list|)
condition|)
block|{
name|sawNewBase
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|104L
argument_list|,
name|buckets
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|104L
argument_list|,
name|buckets
index|[
literal|1
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"This is not the file you are looking for "
operator|+
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawNewBase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|majorTableLegacy
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting majorTableLegacy"
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"matl"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addLegacyFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|21L
argument_list|,
literal|22L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|23L
argument_list|,
literal|24L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"matl"
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should still now be 5 directories in the location
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//Assert.assertEquals(4, stat.length);
comment|// Find the new delta file and make sure it has the right contents
name|boolean
name|sawNewBase
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"base_0000024"
argument_list|)
condition|)
block|{
name|sawNewBase
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|624L
argument_list|,
name|buckets
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|624L
argument_list|,
name|buckets
index|[
literal|1
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"This is not the file you are looking for "
operator|+
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawNewBase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minorTableLegacy
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting minorTableLegacy"
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"mtl"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addLegacyFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|21L
argument_list|,
literal|22L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|23L
argument_list|,
literal|24L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"mtl"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should still now be 5 directories in the location
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Find the new delta file and make sure it has the right contents
name|boolean
name|sawNewDelta
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|makeDeltaDirNameCompacted
argument_list|(
literal|21
argument_list|,
literal|24
argument_list|)
argument_list|)
condition|)
block|{
name|sawNewDelta
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"This is not the file you are looking for "
operator|+
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawNewDelta
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|majorPartitionWithBaseMissingBuckets
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting majorPartitionWithBaseMissingBuckets"
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"mapwbmb"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Partition
name|p
init|=
name|newPartition
argument_list|(
name|t
argument_list|,
literal|"today"
argument_list|)
decl_stmt|;
name|addBaseFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|20L
argument_list|,
literal|20
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|21L
argument_list|,
literal|22L
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|23L
argument_list|,
literal|26L
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|27
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"mapwbmb"
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setPartitionname
argument_list|(
literal|"ds=today"
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should still be four directories in the location.
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stat
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Find the new delta file and make sure it has the right contents
name|boolean
name|sawNewBase
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stat
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"base_0000026"
argument_list|)
condition|)
block|{
name|sawNewBase
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Bucket 0 should be small and bucket 1 should be large, make sure that's the case
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
literal|"bucket_00000"
operator|.
name|equals
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
literal|104L
operator|==
name|buckets
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
operator|&&
literal|"bucket_00001"
operator|.
name|equals
argument_list|(
name|buckets
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
literal|676L
operator|==
name|buckets
index|[
literal|1
index|]
operator|.
name|getLen
argument_list|()
operator|)
operator|||
operator|(
literal|"bucket_00000"
operator|.
name|equals
argument_list|(
name|buckets
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
literal|104L
operator|==
name|buckets
index|[
literal|1
index|]
operator|.
name|getLen
argument_list|()
operator|&&
literal|"bucket_00001"
operator|.
name|equals
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
literal|676L
operator|==
name|buckets
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"This is not the file you are looking for "
operator|+
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawNewBase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|majorWithOpenInMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting majorWithOpenInMiddle"
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"mtwb"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addBaseFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|20L
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|21L
argument_list|,
literal|22L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|23L
argument_list|,
literal|25L
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|addLengthFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|23L
argument_list|,
literal|25L
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|26L
argument_list|,
literal|27L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|27
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|23L
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"mtwb"
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should still now be 5 directories in the location
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stat
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Find the new delta file and make sure it has the right contents
name|Arrays
operator|.
name|sort
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"base_0000022"
argument_list|,
name|stat
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"base_20"
argument_list|,
name|stat
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|makeDeltaDirName
argument_list|(
literal|21
argument_list|,
literal|22
argument_list|)
argument_list|,
name|stat
index|[
literal|2
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|makeDeltaDirName
argument_list|(
literal|23
argument_list|,
literal|25
argument_list|)
argument_list|,
name|stat
index|[
literal|3
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|makeDeltaDirName
argument_list|(
literal|26
argument_list|,
literal|27
argument_list|)
argument_list|,
name|stat
index|[
literal|4
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|majorWithAborted
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting majorWithAborted"
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"mtwb"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addBaseFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|20L
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|21L
argument_list|,
literal|22L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|23L
argument_list|,
literal|25L
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|addLengthFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|23L
argument_list|,
literal|25L
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|26L
argument_list|,
literal|27L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|27
argument_list|,
literal|null
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|24L
argument_list|,
literal|25L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"mtwb"
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should still now be 5 directories in the location
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stat
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Find the new delta file and make sure it has the right contents
name|Arrays
operator|.
name|sort
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"base_0000027"
argument_list|,
name|stat
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"base_20"
argument_list|,
name|stat
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|makeDeltaDirName
argument_list|(
literal|21
argument_list|,
literal|22
argument_list|)
argument_list|,
name|stat
index|[
literal|2
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|makeDeltaDirName
argument_list|(
literal|23
argument_list|,
literal|25
argument_list|)
argument_list|,
name|stat
index|[
literal|3
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|makeDeltaDirName
argument_list|(
literal|26
argument_list|,
literal|27
argument_list|)
argument_list|,
name|stat
index|[
literal|4
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|useHive130DeltaDirName
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|droppedTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"dt"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"dt"
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|ms
operator|.
name|dropTable
argument_list|(
literal|"default"
argument_list|,
literal|"dt"
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|TxnStore
operator|.
name|SUCCEEDED_RESPONSE
operator|.
name|equals
argument_list|(
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|droppedPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|t
init|=
name|newTable
argument_list|(
literal|"default"
argument_list|,
literal|"dp"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Partition
name|p
init|=
name|newPartition
argument_list|(
name|t
argument_list|,
literal|"today"
argument_list|)
decl_stmt|;
name|addBaseFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|20L
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|21L
argument_list|,
literal|22L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addDeltaFile
argument_list|(
name|t
argument_list|,
name|p
argument_list|,
literal|23L
argument_list|,
literal|24L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|burnThroughTransactions
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"default"
argument_list|,
literal|"dp"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setPartitionname
argument_list|(
literal|"ds=today"
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|ms
operator|.
name|dropPartition
argument_list|(
literal|"default"
argument_list|,
literal|"dp"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"today"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|startWorker
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|TxnStore
operator|.
name|SUCCEEDED_RESPONSE
operator|.
name|equals
argument_list|(
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

