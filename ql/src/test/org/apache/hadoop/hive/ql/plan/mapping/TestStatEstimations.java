begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapping
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|IDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
operator|.
name|PlanMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|testutils
operator|.
name|HiveTestEnvSetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_class
specifier|public
class|class
name|TestStatEstimations
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
name|HiveTestEnvSetup
name|env_setup
init|=
operator|new
name|HiveTestEnvSetup
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestRule
name|methodRule
init|=
name|env_setup
operator|.
name|getMethodRule
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|dropTables
argument_list|(
name|driver
argument_list|)
expr_stmt|;
name|String
name|cmds
index|[]
init|=
block|{
comment|// @formatter:off
literal|"create table t2(a integer, b string) STORED AS ORC"
block|,
literal|"insert into t2 values(1, 'AAA'),(2, 'AAA'),(3, 'AAA'),(4, 'AAA'),(5, 'AAA'),"
operator|+
literal|"(6, 'BBB'),(7, 'BBB'),(8, 'BBB'),(9, 'BBB'),(10, 'BBB')"
block|,
literal|"analyze table t2 compute statistics for columns"
comment|// @formatter:on
block|}
decl_stmt|;
for|for
control|(
name|String
name|cmd
range|:
name|cmds
control|)
block|{
name|int
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|dropTables
argument_list|(
name|driver
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|dropTables
parameter_list|(
name|IDriver
name|driver
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|tables
index|[]
init|=
block|{
literal|"t2"
block|}
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|tables
control|)
block|{
name|int
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists "
operator|+
name|t
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PlanMapper
name|getMapperForQuery
parameter_list|(
name|IDriver
name|driver
parameter_list|,
name|String
name|query
parameter_list|)
block|{
name|int
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
name|query
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|PlanMapper
name|pm0
init|=
name|driver
operator|.
name|getContext
argument_list|()
operator|.
name|getPlanMapper
argument_list|()
decl_stmt|;
return|return
name|pm0
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterIntIn
parameter_list|()
throws|throws
name|ParseException
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"explain select a from t2 where a IN (-1,0,1,2,10,20,30,40) order by a"
decl_stmt|;
name|PlanMapper
name|pm
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FilterOperator
argument_list|>
name|fos
init|=
name|pm
operator|.
name|getAll
argument_list|(
name|FilterOperator
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// the same operator is present 2 times
name|fos
operator|.
name|sort
argument_list|(
name|TestCounterMapping
operator|.
name|OPERATOR_ID_COMPARATOR
operator|.
name|reversed
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fos
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|FilterOperator
name|fop
init|=
name|fos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// all outside elements should be ignored from stat estimation
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fop
operator|.
name|getStatistics
argument_list|()
operator|.
name|getNumRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|IDriver
name|createDriver
parameter_list|()
block|{
name|HiveConf
name|conf
init|=
name|env_setup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
decl_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|IDriver
name|driver
init|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|driver
return|;
block|}
block|}
end_class

end_unit

