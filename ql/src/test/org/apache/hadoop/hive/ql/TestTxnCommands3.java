begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*   * Licensed to the Apache Software Foundation (ASF) under one   * or more contributor license agreements.  See the NOTICE file   * distributed with this work for additional information   * regarding copyright ownership.  The ASF licenses this file   * to you under the Apache License, Version 2.0 (the   * "License"); you may not use this file except in compliance   * with the License.  You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|TestVectorizedOrcAcidRowBatchReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|TestTxnCommands3
extends|extends
name|TxnCommandsBaseForTests
block|{
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestTxnCommands3
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DATA_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|TestTxnCommands3
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|String
name|getTestDataDir
parameter_list|()
block|{
return|return
name|TEST_DATA_DIR
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRenameTable
parameter_list|()
throws|throws
name|Exception
block|{
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CREATE_TABLES_AS_ACID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop database if exists mydb1 cascade"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop database if exists mydb2 cascade"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create database mydb1"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create database mydb2"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table mydb1.T(a int, b int) stored as orc"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into mydb1.T values(1,2),(4,5)"
argument_list|)
expr_stmt|;
comment|//put something in WRITE_SET
name|runStatementOnDriver
argument_list|(
literal|"update mydb1.T set b = 6 where b = 5"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table mydb1.T compact 'minor'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table mydb1.T RENAME TO mydb1.S"
argument_list|)
expr_stmt|;
name|String
name|testQuery
init|=
literal|"select ROW__ID, a, b, INPUT__FILE__NAME from mydb1.S"
decl_stmt|;
name|String
index|[]
index|[]
name|expected
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":0}\t1\t2"
block|,
literal|"s/delta_0000001_0000001_0000/bucket_00000"
block|}
block|,
block|{
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":0}\t4\t6"
block|,
literal|"s/delta_0000002_0000002_0000/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected
argument_list|,
name|testQuery
argument_list|,
literal|false
argument_list|,
literal|"check data"
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_TABLE='t'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from COMPACTION_QUEUE where CQ_TABLE='t'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from WRITE_SET where WS_TABLE='t'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from TXN_TO_WRITE_ID where T2W_TABLE='t'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from NEXT_WRITE_ID where NWI_TABLE='t'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|hiveConf
argument_list|,
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_TABLE='s'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from COMPACTION_QUEUE where CQ_TABLE='s'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from WRITE_SET where WS_TABLE='s'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from TXN_TO_WRITE_ID where T2W_TABLE='s'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from NEXT_WRITE_ID where NWI_TABLE='s'"
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table mydb1.S RENAME TO mydb2.bar"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
name|hiveConf
argument_list|,
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_TABLE='bar'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from COMPACTION_QUEUE where CQ_TABLE='bar'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from WRITE_SET where WS_TABLE='bar'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from TXN_TO_WRITE_ID where T2W_TABLE='bar'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
name|hiveConf
argument_list|,
literal|"select count(*) from NEXT_WRITE_ID where NWI_TABLE='bar'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteEventPruningOn
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testDeleteEventPruning
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteEventPruningOff
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FILTER_DELETE_EVENTS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testDeleteEventPruning
argument_list|()
expr_stmt|;
block|}
comment|/**    * run with and w/o event fitlering enabled - should get the same results    * {@link TestVectorizedOrcAcidRowBatchReader#testDeleteEventFiltering()}    *    * todo: add .q test using VerifyNumReducersHook.num.reducers to make sure    * it does have 1 split for each input file.    * Will need to crate VerifyNumMappersHook    *    * Also, consider    * HiveSplitGenerator.java    * RAW_INPUT_SPLITS and GROUPED_INPUT_SPLITS are the counters before and    * after grouping splits PostExecTezSummaryPrinter post exec hook can be    * used to printout specific counters    */
specifier|private
name|void
name|testDeleteEventPruning
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"T"
block|}
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create transactional table T(a int, b int) stored as orc"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into T values(1,2),(4,5)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into T values(4,6),(1,3)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"delete from T where a = 1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select ROW__ID, a, b from T order by a, b"
argument_list|)
decl_stmt|;
name|boolean
name|isVectorized
init|=
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|)
decl_stmt|;
name|String
name|testQuery
init|=
name|isVectorized
condition|?
literal|"select ROW__ID, a, b from T order by a, b"
else|:
literal|"select ROW__ID, a, b, INPUT__FILE__NAME from T order by a, b"
decl_stmt|;
name|String
index|[]
index|[]
name|expected
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":1}\t4\t5"
block|,
literal|"warehouse/t/delta_0000001_0000001_0000/bucket_00000"
block|}
block|,
block|{
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":0}\t4\t6"
block|,
literal|"warehouse/t/delta_0000002_0000002_0000/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"after delete"
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table T compact 'MAJOR'"
argument_list|)
expr_stmt|;
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|ShowCompactResponse
name|resp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of compactions in history"
argument_list|,
literal|1
argument_list|,
name|resp
operator|.
name|getCompactsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected 0 compaction state"
argument_list|,
name|TxnStore
operator|.
name|CLEANING_RESPONSE
argument_list|,
name|resp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHadoopJobId
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"job_local"
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected2
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":1}\t4\t5"
block|,
literal|"warehouse/t/base_0000001/bucket_00000"
block|}
block|,
block|{
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":0}\t4\t6"
block|,
literal|"warehouse/t/base_0000002/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected2
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"after compaction"
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
comment|/**    * HIVE-19985    */
annotation|@
name|Test
specifier|public
name|void
name|testAcidMetaColumsDecode
parameter_list|()
throws|throws
name|Exception
block|{
comment|//this only applies in vectorized mode
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CREATE_TABLES_AS_ACID
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int) stored as orc"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|data1
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into T"
operator|+
name|makeValuesClause
argument_list|(
name|data1
argument_list|)
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|data2
init|=
block|{
block|{
literal|5
block|,
literal|6
block|}
block|,
block|{
literal|7
block|,
literal|8
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into T"
operator|+
name|makeValuesClause
argument_list|(
name|data2
argument_list|)
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|dataAll
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|,
block|{
literal|5
block|,
literal|6
block|}
block|,
block|{
literal|7
block|,
literal|8
block|}
block|}
decl_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|OPTIMIZE_ACID_META_COLUMNS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a, b from T order by a, b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|dataAll
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|OPTIMIZE_ACID_META_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a, b from T order by a, b"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|dataAll
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table T compact 'major'"
argument_list|)
expr_stmt|;
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|//check status of compaction job
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|ShowCompactResponse
name|resp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of compactions in history"
argument_list|,
literal|1
argument_list|,
name|resp
operator|.
name|getCompactsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected 0 compaction state"
argument_list|,
name|TxnStore
operator|.
name|CLEANING_RESPONSE
argument_list|,
name|resp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHadoopJobId
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"job_local"
argument_list|)
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|OPTIMIZE_ACID_META_COLUMNS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a, b from T order by a, b"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|dataAll
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|OPTIMIZE_ACID_META_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a, b from T order by a, b"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|dataAll
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that rows are routed to proper files based on bucket col/ROW__ID    * Only the Vectorized Acid Reader checks if bucketId in ROW__ID inside the file    * matches the file name and only for files in delete_delta    */
annotation|@
name|Test
specifier|public
name|void
name|testSdpoBucketed
parameter_list|()
throws|throws
name|Exception
block|{
name|testSdpoBucketed
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testSdpoBucketed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testSdpoBucketed
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testSdpoBucketed
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testSdpoBucketed
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|testSdpoBucketed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|testSdpoBucketed
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|testSdpoBucketed
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testSdpoBucketed
parameter_list|(
name|boolean
name|isVectorized
parameter_list|,
name|boolean
name|isSdpo
parameter_list|,
name|int
name|bucketing_version
parameter_list|)
throws|throws
name|Exception
block|{
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
name|isVectorized
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEOPTSORTDYNAMICPARTITION
argument_list|,
name|isSdpo
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists acid_uap"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create transactional table acid_uap(a int, b varchar(128)) "
operator|+
literal|"partitioned by (ds string) clustered by (a) into 2 buckets stored as orc TBLPROPERTIES "
operator|+
literal|"('bucketing_version'='"
operator|+
name|bucketing_version
operator|+
literal|"')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into table acid_uap partition (ds='tomorrow') "
operator|+
literal|"values (1, 'bah'),(2, 'yah')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into table acid_uap partition (ds='today') "
operator|+
literal|"values (1, 'bah'),(2, 'yah')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"select a,b, ds from acid_uap order by a,b, ds"
argument_list|)
expr_stmt|;
name|String
name|testQuery
init|=
name|isVectorized
condition|?
literal|"select ROW__ID, a, b, ds from acid_uap order by ds, a, b"
else|:
literal|"select ROW__ID, a, b, ds, INPUT__FILE__NAME from acid_uap order by ds, a, b"
decl_stmt|;
name|String
index|[]
index|[]
name|expected
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"writeid\":2,\"bucketid\":536936448,\"rowid\":0}\t1\tbah\ttoday"
block|,
literal|"warehouse/acid_uap/ds=today/delta_0000002_0000002_0000/bucket_00001"
block|}
block|,
block|{
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":0}\t2\tyah\ttoday"
block|,
literal|"warehouse/acid_uap/ds=today/delta_0000002_0000002_0000/bucket_00000"
block|}
block|,
block|{
literal|"{\"writeid\":1,\"bucketid\":536936448,\"rowid\":0}\t1\tbah\ttomorrow"
block|,
literal|"warehouse/acid_uap/ds=tomorrow/delta_0000001_0000001_0000/bucket_00001"
block|}
block|,
block|{
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":0}\t2\tyah\ttomorrow"
block|,
literal|"warehouse/acid_uap/ds=tomorrow/delta_0000001_0000001_0000/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"after insert"
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"update acid_uap set b = 'fred'"
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected2
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"writeid\":3,\"bucketid\":536936448,\"rowid\":0}\t1\tfred\ttoday"
block|,
literal|"warehouse/acid_uap/ds=today/delta_0000003_0000003_0000/bucket_00001"
block|}
block|,
block|{
literal|"{\"writeid\":3,\"bucketid\":536870912,\"rowid\":0}\t2\tfred\ttoday"
block|,
literal|"warehouse/acid_uap/ds=today/delta_0000003_0000003_0000/bucket_00000"
block|}
block|,
block|{
literal|"{\"writeid\":3,\"bucketid\":536936448,\"rowid\":0}\t1\tfred\ttomorrow"
block|,
literal|"warehouse/acid_uap/ds=tomorrow/delta_0000003_0000003_0000/bucket_00001"
block|}
block|,
block|{
literal|"{\"writeid\":3,\"bucketid\":536870912,\"rowid\":0}\t2\tfred\ttomorrow"
block|,
literal|"warehouse/acid_uap/ds=tomorrow/delta_0000003_0000003_0000/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected2
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"after update"
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

