begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|VectorizedRowGroupGenUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  * TestColumnScalarFilterVectorExpressionEvaluation.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestColumnScalarFilterVectorExpressionEvaluation
block|{
specifier|private
specifier|static
specifier|final
name|int
name|BATCH_SIZE
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|SEED
init|=
literal|0xfa57
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualDoubleScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualDoubleScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualDoubleScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualDoubleScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualDoubleScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualDoubleScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualDoubleScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualDoubleScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualDoubleScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualDoubleScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualDoubleScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualDoubleScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColNotEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessDoubleScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessDoubleScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessDoubleScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessDoubleScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessDoubleScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessDoubleScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColLessDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualDoubleScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualDoubleScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualDoubleScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualDoubleScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualDoubleScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualDoubleScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColLessEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterDoubleScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterDoubleScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterDoubleScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterDoubleScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterDoubleScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterDoubleScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColGreaterDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualDoubleScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualDoubleScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualDoubleScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualDoubleScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualDoubleScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualDoubleScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualDoubleScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColGreaterEqualDoubleScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualDoubleScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualLongScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualLongScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColEqualLongScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualLongScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualLongScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColEqualLongScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|==
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"=="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualLongScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColNotEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualLongScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColNotEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColNotEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColNotEqualLongScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColNotEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColNotEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualLongScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColNotEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualLongScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColNotEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColNotEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColNotEqualLongScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColNotEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColNotEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"!="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessLongScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColLessLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColLessLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessLongScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColLessLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColLessLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColLessLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColLessLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessLongScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColLessLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColLessLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessLongScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColLessLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessLongScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColLessLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColLessLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessLongScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColLessLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualLongScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColLessEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualLongScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColLessEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColLessEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColLessEqualLongScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColLessEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColLessEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualLongScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColLessEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualLongScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColLessEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColLessEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColLessEqualLongScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColLessEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColLessEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|<=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|"<="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterLongScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColGreaterLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterLongScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColGreaterLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColGreaterLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterLongScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColGreaterLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterLongScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColGreaterLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterLongScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColGreaterLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColGreaterLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterLongScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColGreaterLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">"
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualLongScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColGreaterEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualLongScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColGreaterEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColGreaterEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongColGreaterEqualLongScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongColGreaterEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterLongColGreaterEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualLongScalarColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColGreaterEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualLongScalarColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColGreaterEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualLongScalar
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColGreaterEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleColGreaterEqualLongScalarColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleColGreaterEqualLongScalar
name|vectorExpression
init|=
operator|new
name|FilterDoubleColGreaterEqualLongScalar
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|>=
name|scalarValue
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|">="
operator|+
name|scalarValue
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarEqualDoubleColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"=="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarEqualDoubleColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"=="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarEqualDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"=="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarEqualDoubleColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"=="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarEqualDoubleColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"=="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarEqualDoubleColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"=="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarEqualDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"=="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarEqualDoubleColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"=="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarNotEqualDoubleColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"!="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarNotEqualDoubleColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"!="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarNotEqualDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"!="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarNotEqualDoubleColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"!="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarNotEqualDoubleColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"!="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarNotEqualDoubleColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"!="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarNotEqualDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"!="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarNotEqualDoubleColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarNotEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarNotEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"!="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarLessDoubleColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarLessDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarLessDoubleColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarLessDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarLessDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarLessDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarLessDoubleColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarLessDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarLessDoubleColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarLessDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarLessDoubleColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarLessDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarLessDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarLessDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarLessDoubleColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarLessDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarLessDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarLessEqualDoubleColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarLessEqualDoubleColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarLessEqualDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarLessEqualDoubleColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarLessEqualDoubleColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarLessEqualDoubleColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarLessEqualDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarLessEqualDoubleColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarLessEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarLessEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarGreaterDoubleColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarGreaterDoubleColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarGreaterDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarGreaterDoubleColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarGreaterDoubleColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarGreaterDoubleColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarGreaterDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarGreaterDoubleColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarGreaterDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarGreaterDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarGreaterEqualDoubleColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarGreaterEqualDoubleColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarGreaterEqualDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarGreaterEqualDoubleColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarGreaterEqualDoubleColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarGreaterEqualDoubleColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarGreaterEqualDoubleColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarGreaterEqualDoubleColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarGreaterEqualDoubleColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarGreaterEqualDoubleColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarEqualLongColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"=="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarEqualLongColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"=="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarEqualLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"=="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarEqualLongColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"=="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarEqualLongColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"=="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarEqualLongColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"=="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarEqualLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"=="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarEqualLongColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|==
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"=="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarNotEqualLongColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"!="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarNotEqualLongColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"!="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarNotEqualLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"!="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarNotEqualLongColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"!="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarNotEqualLongColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"!="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarNotEqualLongColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"!="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarNotEqualLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"!="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarNotEqualLongColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarNotEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarNotEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|!=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"!="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarLessLongColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarLessLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarLessLongColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarLessLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarLessLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarLessLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarLessLongColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarLessLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarLessLongColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarLessLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarLessLongColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarLessLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarLessLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarLessLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarLessLongColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarLessLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarLessLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarLessEqualLongColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarLessEqualLongColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarLessEqualLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarLessEqualLongColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarLessEqualLongColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarLessEqualLongColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarLessEqualLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarLessEqualLongColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarLessEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarLessEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|<=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|"<="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarGreaterLongColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarGreaterLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarGreaterLongColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarGreaterLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarGreaterLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarGreaterLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarGreaterLongColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarGreaterLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarGreaterLongColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarGreaterLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarGreaterLongColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarGreaterLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarGreaterLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarGreaterLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarGreaterLongColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarGreaterLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarGreaterLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">"
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarGreaterEqualLongColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarGreaterEqualLongColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarGreaterEqualLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterLongScalarGreaterEqualLongColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|long
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterLongScalarGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterLongScalarGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarGreaterEqualLongColumnColNullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarGreaterEqualLongColumnColNulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarGreaterEqualLongColumn
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterDoubleScalarGreaterEqualLongColumnColRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|1
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector
expr_stmt|;
name|double
name|scalarValue
init|=
literal|0
decl_stmt|;
do|do
block|{
name|scalarValue
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|scalarValue
operator|==
literal|0
condition|)
do|;
name|FilterDoubleScalarGreaterEqualLongColumn
name|vectorExpression
init|=
operator|new
name|FilterDoubleScalarGreaterEqualLongColumn
argument_list|(
literal|0
argument_list|,
name|scalarValue
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//check for isRepeating optimization
if|if
condition|(
name|inputColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|//null vector is safe to check, as it is always initialized to match the data vector
name|selectedIndex
operator|=
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|?
name|BATCH_SIZE
else|:
literal|0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|scalarValue
operator|>=
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Vector index that passes filter "
operator|+
name|scalarValue
operator|+
literal|">="
operator|+
name|inputColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|+
literal|" is not in rowBatch selected index"
argument_list|,
name|i
argument_list|,
name|rowBatch
operator|.
name|selected
index|[
name|selectedIndex
index|]
argument_list|)
expr_stmt|;
name|selectedIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Row batch size not set to number of selected rows: "
operator|+
name|selectedIndex
argument_list|,
name|selectedIndex
argument_list|,
name|rowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedIndex
operator|>
literal|0
operator|&&
name|selectedIndex
operator|<
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should be set when> 0 and< entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|true
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|BATCH_SIZE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"selectedInUse should not be set when entire batch("
operator|+
name|BATCH_SIZE
operator|+
literal|") is selected: "
operator|+
name|selectedIndex
argument_list|,
literal|false
argument_list|,
name|rowBatch
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

