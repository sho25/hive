begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AlterTableSimpleDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Tests for parsing and semantic analysis of ALTER TABLE ... compact.  */
end_comment

begin_class
specifier|public
class|class
name|TestQBCompact
block|{
specifier|static
name|QueryState
name|queryState
decl_stmt|;
specifier|static
name|HiveConf
name|conf
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|queryState
operator|=
operator|new
name|QueryState
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|conf
operator|=
name|queryState
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Create a table so we can work against it
name|Hive
name|h
init|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
literal|"ds"
argument_list|)
expr_stmt|;
name|h
operator|.
name|createTable
argument_list|(
literal|"foo"
argument_list|,
name|cols
argument_list|,
name|partCols
argument_list|,
name|OrcInputFormat
operator|.
name|class
argument_list|,
name|OrcOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|h
operator|.
name|getTable
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partSpec
operator|.
name|put
argument_list|(
literal|"ds"
argument_list|,
literal|"today"
argument_list|)
expr_stmt|;
name|h
operator|.
name|createPartition
argument_list|(
name|t
argument_list|,
name|partSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|deInit
parameter_list|()
throws|throws
name|Exception
block|{
name|Hive
name|h
init|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|h
operator|.
name|dropTable
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parseAndAnalyze
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|Exception
block|{
name|ParseDriver
name|hd
init|=
operator|new
name|ParseDriver
argument_list|()
decl_stmt|;
name|ASTNode
name|head
init|=
operator|(
name|ASTNode
operator|)
name|hd
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BaseSemanticAnalyzer
name|a
init|=
name|SemanticAnalyzerFactory
operator|.
name|get
argument_list|(
name|queryState
argument_list|,
name|head
argument_list|)
decl_stmt|;
name|a
operator|.
name|analyze
argument_list|(
name|head
argument_list|,
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|roots
init|=
name|a
operator|.
name|getRootTasks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|AlterTableSimpleDesc
name|parseAndAnalyzeAlterTable
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|Exception
block|{
name|ParseDriver
name|hd
init|=
operator|new
name|ParseDriver
argument_list|()
decl_stmt|;
name|ASTNode
name|head
init|=
operator|(
name|ASTNode
operator|)
name|hd
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BaseSemanticAnalyzer
name|a
init|=
name|SemanticAnalyzerFactory
operator|.
name|get
argument_list|(
name|queryState
argument_list|,
name|head
argument_list|)
decl_stmt|;
name|a
operator|.
name|analyze
argument_list|(
name|head
argument_list|,
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|roots
init|=
name|a
operator|.
name|getRootTasks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|DDLWork
operator|)
name|roots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWork
argument_list|()
operator|)
operator|.
name|getAlterTblSimpleDesc
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonPartitionedTable
parameter_list|()
throws|throws
name|Exception
block|{
name|AlterTableSimpleDesc
name|desc
init|=
name|parseAndAnalyzeAlterTable
argument_list|(
literal|"alter table foo compact 'major'"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"major"
argument_list|,
name|desc
operator|.
name|getCompactionType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default.foo"
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBogusLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|sawException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|parseAndAnalyze
argument_list|(
literal|"alter table foo partition(ds = 'today') compact 'bogus'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|sawException
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_COMPACTION_TYPE
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMajor
parameter_list|()
throws|throws
name|Exception
block|{
name|AlterTableSimpleDesc
name|desc
init|=
name|parseAndAnalyzeAlterTable
argument_list|(
literal|"alter table foo partition(ds = 'today') compact 'major'"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"major"
argument_list|,
name|desc
operator|.
name|getCompactionType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default.foo"
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parts
init|=
name|desc
operator|.
name|getPartSpec
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"today"
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|"ds"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinor
parameter_list|()
throws|throws
name|Exception
block|{
name|AlterTableSimpleDesc
name|desc
init|=
name|parseAndAnalyzeAlterTable
argument_list|(
literal|"alter table foo partition(ds = 'today') compact 'minor'"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"minor"
argument_list|,
name|desc
operator|.
name|getCompactionType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default.foo"
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parts
init|=
name|desc
operator|.
name|getPartSpec
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"today"
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|"ds"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|showCompactions
parameter_list|()
throws|throws
name|Exception
block|{
name|parseAndAnalyze
argument_list|(
literal|"show compactions"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|showTxns
parameter_list|()
throws|throws
name|Exception
block|{
name|parseAndAnalyze
argument_list|(
literal|"show transactions"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

