begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|DDLSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * Util function for authorization tests  */
end_comment

begin_class
specifier|public
class|class
name|AuthorizationTestUtil
block|{
comment|/**    * Create DDLWork from given ast    * @param ast    * @param conf    * @param db    * @return    * @throws Exception    */
specifier|public
specifier|static
name|DDLWork
name|analyze
parameter_list|(
name|ASTNode
name|ast
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|Hive
name|db
parameter_list|)
throws|throws
name|Exception
block|{
name|DDLSemanticAnalyzer
name|analyzer
init|=
operator|new
name|DDLSemanticAnalyzer
argument_list|(
name|conf
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|analyze
argument_list|(
name|ast
argument_list|,
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
init|=
name|analyzer
operator|.
name|getRootTasks
argument_list|()
decl_stmt|;
return|return
operator|(
name|DDLWork
operator|)
name|inList
argument_list|(
name|rootTasks
argument_list|)
operator|.
name|ofSize
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWork
argument_list|()
return|;
block|}
comment|/**    * Create DDLWork from given command string    * @param command    * @param conf    * @param db    * @return    * @throws Exception    */
specifier|public
specifier|static
name|DDLWork
name|analyze
parameter_list|(
name|String
name|command
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|Hive
name|db
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|analyze
argument_list|(
name|parse
argument_list|(
name|command
argument_list|)
argument_list|,
name|conf
argument_list|,
name|db
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ASTNode
name|parse
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ParseUtils
operator|.
name|findRootNonNullToken
argument_list|(
operator|(
operator|new
name|ParseDriver
argument_list|()
operator|)
operator|.
name|parse
argument_list|(
name|command
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Helper class that lets you check the size and return the list in one line.    *    * @param<E>    */
specifier|public
specifier|static
class|class
name|ListSizeMatcher
parameter_list|<
name|E
parameter_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|E
argument_list|>
name|list
decl_stmt|;
specifier|private
name|ListSizeMatcher
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|list
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|E
argument_list|>
name|ofSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|list
operator|.
name|toString
argument_list|()
argument_list|,
name|size
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ListSizeMatcher
argument_list|<
name|E
argument_list|>
name|inList
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|list
parameter_list|)
block|{
return|return
operator|new
name|ListSizeMatcher
argument_list|<
name|E
argument_list|>
argument_list|(
name|list
argument_list|)
return|;
block|}
block|}
end_class

end_unit

