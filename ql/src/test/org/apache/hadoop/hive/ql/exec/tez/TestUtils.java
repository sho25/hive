begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|LlapServiceInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|LlapServiceInstanceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|InactiveServiceInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapFixedRegistryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapRegistryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapZookeeperRegistryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|split
operator|.
name|SplitLocationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryTypeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|MockitoAnnotations
operator|.
name|initMocks
import|;
end_import

begin_comment
comment|/**  * Test class for Utils methods.  */
end_comment

begin_class
specifier|public
class|class
name|TestUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INACTIVE
init|=
literal|"inactive"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACTIVE
init|=
literal|"dynamic"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DISABLED
init|=
literal|"disabled"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FIXED
init|=
literal|"fix"
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|LlapRegistryService
name|mockRegistry
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|LlapServiceInstanceSet
name|mockInstanceSet
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|initMocks
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSplitLocationProvider
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
comment|// Create test LlapServiceInstances to make sure that we can handle all of the instance types
name|List
argument_list|<
name|LlapServiceInstance
argument_list|>
name|instances
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// Set 1 inactive instance to make sure that this does not cause problem for us
name|LlapServiceInstance
name|inactive
init|=
operator|new
name|InactiveServiceInstance
argument_list|(
name|INACTIVE
argument_list|)
decl_stmt|;
name|instances
operator|.
name|add
argument_list|(
name|inactive
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ZOOKEEPER_QUORUM
operator|.
name|varname
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|LlapZookeeperRegistryImpl
name|dynRegistry
init|=
operator|new
name|LlapZookeeperRegistryImpl
argument_list|(
literal|"dyn"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Endpoint
name|rpcEndpoint
init|=
name|RegistryTypeUtils
operator|.
name|ipcEndpoint
argument_list|(
literal|"llap"
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
name|ACTIVE
argument_list|,
literal|4000
argument_list|)
argument_list|)
decl_stmt|;
name|Endpoint
name|shuffle
init|=
name|RegistryTypeUtils
operator|.
name|ipcEndpoint
argument_list|(
literal|"shuffle"
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
name|ACTIVE
argument_list|,
literal|4000
argument_list|)
argument_list|)
decl_stmt|;
name|Endpoint
name|mng
init|=
name|RegistryTypeUtils
operator|.
name|ipcEndpoint
argument_list|(
literal|"llapmng"
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
name|ACTIVE
argument_list|,
literal|4000
argument_list|)
argument_list|)
decl_stmt|;
name|Endpoint
name|outputFormat
init|=
name|RegistryTypeUtils
operator|.
name|ipcEndpoint
argument_list|(
literal|"llapoutputformat"
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
name|ACTIVE
argument_list|,
literal|4000
argument_list|)
argument_list|)
decl_stmt|;
name|Endpoint
name|services
init|=
name|RegistryTypeUtils
operator|.
name|webEndpoint
argument_list|(
literal|"services"
argument_list|,
operator|new
name|URI
argument_list|(
name|ACTIVE
operator|+
literal|":4000"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Set 1 active instance
name|ServiceRecord
name|enabledSrv
init|=
operator|new
name|ServiceRecord
argument_list|()
decl_stmt|;
name|enabledSrv
operator|.
name|addInternalEndpoint
argument_list|(
name|rpcEndpoint
argument_list|)
expr_stmt|;
name|enabledSrv
operator|.
name|addInternalEndpoint
argument_list|(
name|shuffle
argument_list|)
expr_stmt|;
name|enabledSrv
operator|.
name|addInternalEndpoint
argument_list|(
name|mng
argument_list|)
expr_stmt|;
name|enabledSrv
operator|.
name|addInternalEndpoint
argument_list|(
name|outputFormat
argument_list|)
expr_stmt|;
name|enabledSrv
operator|.
name|addExternalEndpoint
argument_list|(
name|services
argument_list|)
expr_stmt|;
name|enabledSrv
operator|.
name|set
argument_list|(
name|LlapRegistryService
operator|.
name|LLAP_DAEMON_NUM_ENABLED_EXECUTORS
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|enabledSrv
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_MEMORY_PER_INSTANCE_MB
operator|.
name|varname
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|LlapZookeeperRegistryImpl
operator|.
name|DynamicServiceInstance
name|dynamic
init|=
name|dynRegistry
operator|.
expr|new
name|DynamicServiceInstance
argument_list|(
name|enabledSrv
argument_list|)
decl_stmt|;
name|instances
operator|.
name|add
argument_list|(
name|dynamic
argument_list|)
expr_stmt|;
comment|// Set 1 instance with 0 executors
name|ServiceRecord
name|disabledSrv
init|=
operator|new
name|ServiceRecord
argument_list|(
name|enabledSrv
argument_list|)
decl_stmt|;
name|disabledSrv
operator|.
name|set
argument_list|(
name|LlapRegistryService
operator|.
name|LLAP_DAEMON_NUM_ENABLED_EXECUTORS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|LlapZookeeperRegistryImpl
operator|.
name|DynamicServiceInstance
name|disabled
init|=
name|dynRegistry
operator|.
expr|new
name|DynamicServiceInstance
argument_list|(
name|disabledSrv
argument_list|)
decl_stmt|;
name|disabled
operator|.
name|setHost
argument_list|(
name|DISABLED
argument_list|)
expr_stmt|;
name|instances
operator|.
name|add
argument_list|(
name|disabled
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRegistry
operator|.
name|getInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockInstanceSet
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockInstanceSet
operator|.
name|getAllInstancesOrdered
argument_list|(
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|instances
argument_list|)
expr_stmt|;
name|SplitLocationProvider
name|provider
init|=
name|Utils
operator|.
name|getCustomSplitLocationProvider
argument_list|(
name|mockRegistry
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
name|assertLocations
argument_list|(
operator|(
name|HostAffinitySplitLocationProvider
operator|)
name|provider
argument_list|,
operator|new
name|String
index|[]
block|{
name|ACTIVE
block|}
argument_list|)
expr_stmt|;
comment|// Check if fixed stuff is working as well
name|LlapFixedRegistryImpl
name|fixRegistry
init|=
operator|new
name|LlapFixedRegistryImpl
argument_list|(
literal|"llap"
argument_list|,
operator|new
name|HiveConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// Instance for testing fixed registry instances
name|LlapServiceInstance
name|fixed
init|=
name|fixRegistry
operator|.
expr|new
name|FixedServiceInstance
argument_list|(
name|FIXED
argument_list|)
decl_stmt|;
name|instances
operator|.
name|remove
argument_list|(
name|dynamic
argument_list|)
expr_stmt|;
name|instances
operator|.
name|add
argument_list|(
name|fixed
argument_list|)
expr_stmt|;
name|provider
operator|=
name|Utils
operator|.
name|getCustomSplitLocationProvider
argument_list|(
name|mockRegistry
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|assertLocations
argument_list|(
operator|(
name|HostAffinitySplitLocationProvider
operator|)
name|provider
argument_list|,
operator|new
name|String
index|[]
block|{
name|FIXED
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertLocations
parameter_list|(
name|HostAffinitySplitLocationProvider
name|provider
parameter_list|,
name|String
index|[]
name|expectedLocations
parameter_list|)
throws|throws
name|IOException
block|{
name|InputSplit
name|inputSplit1
init|=
name|TestHostAffinitySplitLocationProvider
operator|.
name|createMockFileSplit
argument_list|(
literal|true
argument_list|,
literal|"path2"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"HOST-1"
block|,
literal|"HOST-2"
block|}
argument_list|)
decl_stmt|;
comment|// Check that the provider does not return disabled/inactive instances and returns onl 1 location
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|provider
operator|.
name|getLocations
argument_list|(
name|inputSplit1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|INACTIVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|DISABLED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Since we can not check the results for every input, dig into the provider internal data to
comment|// make sure that we have only the available host name in the location list
comment|// Remove nulls
name|Set
argument_list|<
name|String
argument_list|>
name|knownLocations
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|knownLocations
operator|.
name|addAll
argument_list|(
name|provider
operator|.
name|locations
argument_list|)
expr_stmt|;
name|knownLocations
operator|.
name|remove
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedLocations
argument_list|,
name|knownLocations
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

