begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|UserPoolMapping
operator|.
name|MappingInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMResourcePlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMFullResourcePlan
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|State
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestWorkloadManager
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestWorkloadManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
class|class
name|GetSessionRunnable
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|WmTezSession
argument_list|>
name|session
decl_stmt|;
specifier|private
specifier|final
name|WorkloadManager
name|wm
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|cdl
decl_stmt|;
specifier|private
specifier|final
name|String
name|userName
decl_stmt|;
specifier|private
name|GetSessionRunnable
parameter_list|(
name|AtomicReference
argument_list|<
name|WmTezSession
argument_list|>
name|session
parameter_list|,
name|WorkloadManager
name|wm
parameter_list|,
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|CountDownLatch
name|cdl
parameter_list|,
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|wm
operator|=
name|wm
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|cdl
operator|=
name|cdl
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|WmTezSession
name|old
init|=
name|session
operator|.
name|get
argument_list|()
decl_stmt|;
name|session
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|cdl
operator|!=
literal|null
condition|)
block|{
name|cdl
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|session
operator|.
name|set
argument_list|(
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
name|old
argument_list|,
operator|new
name|MappingInput
argument_list|(
name|userName
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|MockQam
implements|implements
name|QueryAllocationManager
block|{
name|boolean
name|isCalled
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|updateSessionsAsync
parameter_list|(
name|Double
name|totalMaxAlloc
parameter_list|,
name|List
argument_list|<
name|WmTezSession
argument_list|>
name|sessions
parameter_list|)
block|{
name|isCalled
operator|=
literal|true
expr_stmt|;
block|}
name|void
name|assertWasCalled
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|isCalled
argument_list|)
expr_stmt|;
name|isCalled
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|WMResourcePlan
name|plan
parameter_list|()
block|{
return|return
operator|new
name|WMResourcePlan
argument_list|(
literal|"rp"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|WMPool
name|pool
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|qp
parameter_list|,
name|double
name|alloc
parameter_list|)
block|{
name|WMPool
name|pool
init|=
operator|new
name|WMPool
argument_list|(
literal|"rp"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|pool
operator|.
name|setAllocFraction
argument_list|(
name|alloc
argument_list|)
expr_stmt|;
name|pool
operator|.
name|setQueryParallelism
argument_list|(
name|qp
argument_list|)
expr_stmt|;
return|return
name|pool
return|;
block|}
specifier|public
specifier|static
name|WMMapping
name|mapping
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|pool
parameter_list|)
block|{
name|WMMapping
name|mapping
init|=
operator|new
name|WMMapping
argument_list|(
literal|"rp"
argument_list|,
literal|"USER"
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|setPoolName
argument_list|(
name|pool
argument_list|)
expr_stmt|;
return|return
name|mapping
return|;
block|}
specifier|public
specifier|static
class|class
name|WorkloadManagerForTest
extends|extends
name|WorkloadManager
block|{
specifier|public
name|WorkloadManagerForTest
parameter_list|(
name|String
name|yarnQueue
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|int
name|numSessions
parameter_list|,
name|QueryAllocationManager
name|qam
parameter_list|)
block|{
name|super
argument_list|(
name|yarnQueue
argument_list|,
name|conf
argument_list|,
name|qam
argument_list|,
name|createDummyPlan
argument_list|(
name|numSessions
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WorkloadManagerForTest
parameter_list|(
name|String
name|yarnQueue
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|QueryAllocationManager
name|qam
parameter_list|,
name|WMFullResourcePlan
name|plan
parameter_list|)
block|{
name|super
argument_list|(
name|yarnQueue
argument_list|,
name|conf
argument_list|,
name|qam
argument_list|,
name|plan
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|WMFullResourcePlan
name|createDummyPlan
parameter_list|(
name|int
name|numSessions
parameter_list|)
block|{
name|WMFullResourcePlan
name|plan
init|=
operator|new
name|WMFullResourcePlan
argument_list|(
operator|new
name|WMResourcePlan
argument_list|(
literal|"rp"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"llap"
argument_list|,
name|numSessions
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|plan
operator|.
name|getPlan
argument_list|()
operator|.
name|setDefaultPoolPath
argument_list|(
literal|"llap"
argument_list|)
expr_stmt|;
return|return
name|plan
return|;
block|}
annotation|@
name|Override
specifier|protected
name|WmTezSession
name|createSessionObject
parameter_list|(
name|String
name|sessionId
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
name|conf
operator|=
name|conf
operator|==
literal|null
condition|?
operator|new
name|HiveConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
else|:
name|conf
expr_stmt|;
return|return
operator|new
name|SampleTezSessionState
argument_list|(
name|sessionId
argument_list|,
name|this
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TezSessionState
name|getSession
parameter_list|(
name|TezSessionState
name|session
parameter_list|,
name|MappingInput
name|input
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|// We want to wait for the iteration to finish and set the cluster fraction.
name|TezSessionState
name|state
init|=
name|super
operator|.
name|getSession
argument_list|(
name|session
argument_list|,
name|input
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ensureWm
argument_list|()
expr_stmt|;
return|return
name|state
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|(
name|TezSessionState
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|destroy
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|ensureWm
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|ensureWm
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|addTestEvent
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Wait for the events to be processed.
block|}
annotation|@
name|Override
specifier|public
name|void
name|returnAfterUse
parameter_list|(
name|TezSessionPoolSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|returnAfterUse
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|ensureWm
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TezSessionState
name|reopen
parameter_list|(
name|TezSessionState
name|session
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|additionalFiles
parameter_list|)
throws|throws
name|Exception
block|{
name|session
operator|=
name|super
operator|.
name|reopen
argument_list|(
name|session
argument_list|,
name|conf
argument_list|,
name|additionalFiles
argument_list|)
expr_stmt|;
name|ensureWm
argument_list|()
expr_stmt|;
return|return
name|session
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testReuse
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|MockQam
name|qam
init|=
operator|new
name|MockQam
argument_list|()
decl_stmt|;
name|WorkloadManager
name|wm
init|=
operator|new
name|WorkloadManagerForTest
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
literal|1
argument_list|,
name|qam
argument_list|)
decl_stmt|;
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
name|TezSessionState
name|nonPool
init|=
name|mock
argument_list|(
name|TezSessionState
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nonPool
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|nonPool
argument_list|)
operator|.
name|close
argument_list|(
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|TezSessionState
name|session
init|=
name|wm
operator|.
name|getSession
argument_list|(
name|nonPool
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|nonPool
argument_list|)
operator|.
name|close
argument_list|(
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|nonPool
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|session
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|TezSessionPoolSession
name|diffPool
init|=
name|mock
argument_list|(
name|TezSessionPoolSession
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|diffPool
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|diffPool
argument_list|)
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|session
operator|=
name|wm
operator|.
name|getSession
argument_list|(
name|diffPool
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|diffPool
argument_list|)
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|assertNotSame
argument_list|(
name|diffPool
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|TezSessionState
name|session2
init|=
name|wm
operator|.
name|getSession
argument_list|(
name|session
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|session
argument_list|,
name|session2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testQueueName
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|MockQam
name|qam
init|=
operator|new
name|MockQam
argument_list|()
decl_stmt|;
name|WorkloadManager
name|wm
init|=
operator|new
name|WorkloadManagerForTest
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
literal|1
argument_list|,
name|qam
argument_list|)
decl_stmt|;
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// The queue should be ignored.
name|conf
operator|.
name|set
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_QUEUE_NAME
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|TezSessionState
name|session
init|=
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|session
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|setQueueName
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|session
operator|=
name|wm
operator|.
name|getSession
argument_list|(
name|session
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|session
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Note (unrelated to epsilon): all the fraction checks are valid with the current logic in the
comment|//                              absence of policies. This will change when there are policies.
specifier|private
specifier|final
specifier|static
name|double
name|EPSILON
init|=
literal|0.001
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testReopen
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We should always get a different object, and cluster fraction should be propagated.
name|HiveConf
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|MockQam
name|qam
init|=
operator|new
name|MockQam
argument_list|()
decl_stmt|;
name|WorkloadManager
name|wm
init|=
operator|new
name|WorkloadManagerForTest
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
literal|1
argument_list|,
name|qam
argument_list|)
decl_stmt|;
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
name|WmTezSession
name|session
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|session
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|qam
operator|.
name|assertWasCalled
argument_list|()
expr_stmt|;
name|WmTezSession
name|session2
init|=
operator|(
name|WmTezSession
operator|)
name|session
operator|.
name|reopen
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|session
argument_list|,
name|session2
argument_list|)
expr_stmt|;
name|wm
operator|.
name|addTestEvent
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|session2
operator|.
name|toString
argument_list|()
argument_list|,
literal|1.0
argument_list|,
name|session2
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|session
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|qam
operator|.
name|assertWasCalled
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testDestroyAndReturn
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Session should not be lost; however the fraction should be discarded.
name|HiveConf
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|MockQam
name|qam
init|=
operator|new
name|MockQam
argument_list|()
decl_stmt|;
name|WorkloadManager
name|wm
init|=
operator|new
name|WorkloadManagerForTest
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
literal|2
argument_list|,
name|qam
argument_list|)
decl_stmt|;
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
name|WmTezSession
name|session
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|session
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|qam
operator|.
name|assertWasCalled
argument_list|()
expr_stmt|;
name|WmTezSession
name|session2
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|session
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|session2
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|qam
operator|.
name|assertWasCalled
argument_list|()
expr_stmt|;
name|assertNotSame
argument_list|(
name|session
argument_list|,
name|session2
argument_list|)
expr_stmt|;
name|session
operator|.
name|destroy
argument_list|()
expr_stmt|;
comment|// Destroy before returning to the pool.
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|session2
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|session
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|qam
operator|.
name|assertWasCalled
argument_list|()
expr_stmt|;
comment|// We never lose pool session, so we should still be able to get.
name|session
operator|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|session
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|session2
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|session
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|qam
operator|.
name|assertWasCalled
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testClusterFractions
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|MockQam
name|qam
init|=
operator|new
name|MockQam
argument_list|()
decl_stmt|;
name|WMFullResourcePlan
name|plan
init|=
operator|new
name|WMFullResourcePlan
argument_list|(
name|plan
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"r1"
argument_list|,
literal|1
argument_list|,
literal|0.6f
argument_list|)
argument_list|,
name|pool
argument_list|(
literal|"r2"
argument_list|,
literal|1
argument_list|,
literal|0.4f
argument_list|)
argument_list|,
name|pool
argument_list|(
literal|"r1.p1"
argument_list|,
literal|1
argument_list|,
literal|0.5f
argument_list|)
argument_list|,
name|pool
argument_list|(
literal|"r1.p2"
argument_list|,
literal|2
argument_list|,
literal|0.3f
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|plan
operator|.
name|setMappings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapping
argument_list|(
literal|"p1"
argument_list|,
literal|"r1.p1"
argument_list|)
argument_list|,
name|mapping
argument_list|(
literal|"p2"
argument_list|,
literal|"r1.p2"
argument_list|)
argument_list|,
name|mapping
argument_list|(
literal|"r1"
argument_list|,
literal|"r1"
argument_list|)
argument_list|,
name|mapping
argument_list|(
literal|"r2"
argument_list|,
literal|"r2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|WorkloadManager
name|wm
init|=
operator|new
name|WorkloadManagerForTest
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
name|qam
argument_list|,
name|plan
argument_list|)
decl_stmt|;
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|wm
operator|.
name|getNumSessions
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get all the 5 sessions; validate cluster fractions.
name|WmTezSession
name|session05of06
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.3
argument_list|,
name|session05of06
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|WmTezSession
name|session03of06
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.18
argument_list|,
name|session03of06
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|WmTezSession
name|session03of06_2
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.09
argument_list|,
name|session03of06
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.09
argument_list|,
name|session03of06_2
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|WmTezSession
name|session02of06
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"r1"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.12
argument_list|,
name|session02of06
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|WmTezSession
name|session04
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"r2"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.4
argument_list|,
name|session04
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|session05of06
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|session03of06
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|session03of06_2
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|session02of06
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|session04
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testQueueing
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HiveConf
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|MockQam
name|qam
init|=
operator|new
name|MockQam
argument_list|()
decl_stmt|;
name|WMFullResourcePlan
name|plan
init|=
operator|new
name|WMFullResourcePlan
argument_list|(
name|plan
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"A"
argument_list|,
literal|2
argument_list|,
literal|0.5f
argument_list|)
argument_list|,
name|pool
argument_list|(
literal|"B"
argument_list|,
literal|2
argument_list|,
literal|0.5f
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|plan
operator|.
name|setMappings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapping
argument_list|(
literal|"A"
argument_list|,
literal|"A"
argument_list|)
argument_list|,
name|mapping
argument_list|(
literal|"B"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|WorkloadManager
name|wm
init|=
operator|new
name|WorkloadManagerForTest
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
name|qam
argument_list|,
name|plan
argument_list|)
decl_stmt|;
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
name|WmTezSession
name|sessionA1
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|,
name|sessionA2
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|,
name|sessionB1
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|WmTezSession
argument_list|>
name|sessionA3
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|,
name|sessionA4
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|cdl
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|GetSessionRunnable
argument_list|(
name|sessionA3
argument_list|,
name|wm
argument_list|,
name|error
argument_list|,
name|conf
argument_list|,
name|cdl
argument_list|,
literal|"A"
argument_list|)
argument_list|)
decl_stmt|,
name|t2
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|GetSessionRunnable
argument_list|(
name|sessionA4
argument_list|,
name|wm
argument_list|,
name|error
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
literal|"A"
argument_list|)
argument_list|)
decl_stmt|;
name|waitForThreadToBlock
argument_list|(
name|cdl
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|sessionA3
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|sessionA4
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|checkError
argument_list|(
name|error
argument_list|)
expr_stmt|;
comment|// While threads are blocked on A, we should still be able to get and return a B session.
name|WmTezSession
name|sessionB2
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|sessionB1
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|sessionB2
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|sessionA3
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|sessionA4
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|checkError
argument_list|(
name|error
argument_list|)
expr_stmt|;
comment|// Now release a single session from A.
name|sessionA1
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
name|checkError
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sessionA3
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|sessionA4
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|sessionA3
operator|.
name|get
argument_list|()
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|()
expr_stmt|;
name|checkError
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sessionA4
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|sessionA4
operator|.
name|get
argument_list|()
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|sessionA2
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testReuseWithQueueing
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HiveConf
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|MockQam
name|qam
init|=
operator|new
name|MockQam
argument_list|()
decl_stmt|;
specifier|final
name|WorkloadManager
name|wm
init|=
operator|new
name|WorkloadManagerForTest
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
literal|2
argument_list|,
name|qam
argument_list|)
decl_stmt|;
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
name|WmTezSession
name|session1
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// First, try to reuse from the same pool - should "just work".
name|WmTezSession
name|session1a
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
name|session1
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|session1
argument_list|,
name|session1a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|session1
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
comment|// Should still be able to get the 2nd session.
name|WmTezSession
name|session2
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Now try to reuse with no other sessions remaining. Should still work.
name|WmTezSession
name|session2a
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
name|session2
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|session2
argument_list|,
name|session2a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|session1
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|session2
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
comment|// Finally try to reuse with something in the queue. Due to fairness this won't work.
specifier|final
name|AtomicReference
argument_list|<
name|WmTezSession
argument_list|>
name|session3
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|,
comment|// We will try to reuse this, but session3 is queued before us.
name|session4
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
name|session2
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|CountDownLatch
name|cdl
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|,
name|cdl2
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|GetSessionRunnable
argument_list|(
name|session3
argument_list|,
name|wm
argument_list|,
name|error
argument_list|,
name|conf
argument_list|,
name|cdl
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|,
name|t2
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|GetSessionRunnable
argument_list|(
name|session4
argument_list|,
name|wm
argument_list|,
name|error
argument_list|,
name|conf
argument_list|,
name|cdl2
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|waitForThreadToBlock
argument_list|(
name|cdl
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|session3
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|checkError
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|cdl2
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|session4
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// We have released the session by trying to reuse it and going back into queue, s3 can start.
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
name|checkError
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|session3
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|session3
operator|.
name|get
argument_list|()
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
comment|// Now release another session; the thread that gave up on reuse can proceed.
name|session1
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|()
expr_stmt|;
name|checkError
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|session4
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|session2
argument_list|,
name|session4
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|session4
operator|.
name|get
argument_list|()
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|session3
operator|.
name|get
argument_list|()
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|session4
operator|.
name|get
argument_list|()
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|waitForThreadToBlock
parameter_list|(
name|CountDownLatch
name|cdl
parameter_list|,
name|Thread
name|t1
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|cdl
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wait for t1 to block, just be sure. Not ideal...
name|State
name|s
decl_stmt|;
do|do
block|{
name|s
operator|=
name|t1
operator|.
name|getState
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|s
operator|!=
name|State
operator|.
name|TIMED_WAITING
operator|&&
name|s
operator|!=
name|State
operator|.
name|BLOCKED
operator|&&
name|s
operator|!=
name|State
operator|.
name|WAITING
condition|)
do|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testReuseWithDifferentPool
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HiveConf
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|MockQam
name|qam
init|=
operator|new
name|MockQam
argument_list|()
decl_stmt|;
name|WMFullResourcePlan
name|plan
init|=
operator|new
name|WMFullResourcePlan
argument_list|(
name|plan
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"A"
argument_list|,
literal|2
argument_list|,
literal|0.6f
argument_list|)
argument_list|,
name|pool
argument_list|(
literal|"B"
argument_list|,
literal|1
argument_list|,
literal|0.4f
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|plan
operator|.
name|setMappings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapping
argument_list|(
literal|"A"
argument_list|,
literal|"A"
argument_list|)
argument_list|,
name|mapping
argument_list|(
literal|"B"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|WorkloadManager
name|wm
init|=
operator|new
name|WorkloadManagerForTest
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
name|qam
argument_list|,
name|plan
argument_list|)
decl_stmt|;
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
name|WmTezSession
name|sessionA1
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|,
name|sessionA2
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|sessionA1
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.3f
argument_list|,
name|sessionA1
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|sessionA2
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.3f
argument_list|,
name|sessionA2
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|WmTezSession
name|sessionB1
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
name|sessionA1
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|sessionA1
argument_list|,
name|sessionB1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"B"
argument_list|,
name|sessionB1
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.4f
argument_list|,
name|sessionB1
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.6f
argument_list|,
name|sessionA2
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
comment|// A1 removed from A.
comment|// Make sure that we can still get a session from A.
name|WmTezSession
name|sessionA3
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|sessionA3
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.3f
argument_list|,
name|sessionA3
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.3f
argument_list|,
name|sessionA3
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|sessionA3
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|sessionB1
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|sessionA2
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testApplyPlanUserMapping
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HiveConf
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|MockQam
name|qam
init|=
operator|new
name|MockQam
argument_list|()
decl_stmt|;
name|WMFullResourcePlan
name|plan
init|=
operator|new
name|WMFullResourcePlan
argument_list|(
name|plan
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"A"
argument_list|,
literal|1
argument_list|,
literal|0.5f
argument_list|)
argument_list|,
name|pool
argument_list|(
literal|"B"
argument_list|,
literal|1
argument_list|,
literal|0.5f
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|plan
operator|.
name|setMappings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapping
argument_list|(
literal|"U"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|WorkloadManager
name|wm
init|=
operator|new
name|WorkloadManagerForTest
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
name|qam
argument_list|,
name|plan
argument_list|)
decl_stmt|;
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// One session will be running, the other will be queued in "A"
name|WmTezSession
name|sessionA1
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"U"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|sessionA1
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5f
argument_list|,
name|sessionA1
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|WmTezSession
argument_list|>
name|sessionA2
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|cdl
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|GetSessionRunnable
argument_list|(
name|sessionA2
argument_list|,
name|wm
argument_list|,
name|error
argument_list|,
name|conf
argument_list|,
name|cdl
argument_list|,
literal|"U"
argument_list|)
argument_list|)
decl_stmt|;
name|waitForThreadToBlock
argument_list|(
name|cdl
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|sessionA2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|checkError
argument_list|(
name|error
argument_list|)
expr_stmt|;
comment|// Now change the resource plan - change the mapping for the user.
name|plan
operator|=
operator|new
name|WMFullResourcePlan
argument_list|(
name|plan
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"A"
argument_list|,
literal|1
argument_list|,
literal|0.6f
argument_list|)
argument_list|,
name|pool
argument_list|(
literal|"B"
argument_list|,
literal|1
argument_list|,
literal|0.4f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setMappings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapping
argument_list|(
literal|"U"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wm
operator|.
name|updateResourcePlanAsync
argument_list|(
name|plan
argument_list|)
expr_stmt|;
comment|// The session will go to B with the new mapping; check it.
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
name|checkError
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sessionA2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"B"
argument_list|,
name|sessionA2
operator|.
name|get
argument_list|()
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.4f
argument_list|,
name|sessionA2
operator|.
name|get
argument_list|()
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
comment|// The new session will also go to B now.
name|sessionA2
operator|.
name|get
argument_list|()
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|WmTezSession
name|sessionB1
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"U"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"B"
argument_list|,
name|sessionB1
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.4f
argument_list|,
name|sessionB1
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|sessionA1
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|sessionB1
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testApplyPlanQpChanges
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HiveConf
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|MockQam
name|qam
init|=
operator|new
name|MockQam
argument_list|()
decl_stmt|;
name|WMFullResourcePlan
name|plan
init|=
operator|new
name|WMFullResourcePlan
argument_list|(
name|plan
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"A"
argument_list|,
literal|1
argument_list|,
literal|0.35f
argument_list|)
argument_list|,
name|pool
argument_list|(
literal|"B"
argument_list|,
literal|2
argument_list|,
literal|0.15f
argument_list|)
argument_list|,
name|pool
argument_list|(
literal|"C"
argument_list|,
literal|2
argument_list|,
literal|0.3f
argument_list|)
argument_list|,
name|pool
argument_list|(
literal|"D"
argument_list|,
literal|1
argument_list|,
literal|0.3f
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|plan
operator|.
name|setMappings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapping
argument_list|(
literal|"A"
argument_list|,
literal|"A"
argument_list|)
argument_list|,
name|mapping
argument_list|(
literal|"B"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
name|mapping
argument_list|(
literal|"C"
argument_list|,
literal|"C"
argument_list|)
argument_list|,
name|mapping
argument_list|(
literal|"D"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|WorkloadManager
name|wm
init|=
operator|new
name|WorkloadManagerForTest
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
name|qam
argument_list|,
name|plan
argument_list|)
decl_stmt|;
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// A: 1/1 running, 1 queued; B: 2/2 running, C: 1/2 running, D: 1/1 running, 1 queued.
comment|// Total: 5/6 running.
name|WmTezSession
name|sessionA1
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|,
name|sessionB1
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|,
name|sessionB2
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|,
name|sessionC1
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|,
name|sessionD1
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"D"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|WmTezSession
argument_list|>
name|sessionA2
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|,
name|sessionD2
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|cdl1
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|,
name|cdl2
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|GetSessionRunnable
argument_list|(
name|sessionA2
argument_list|,
name|wm
argument_list|,
name|error
argument_list|,
name|conf
argument_list|,
name|cdl1
argument_list|,
literal|"A"
argument_list|)
argument_list|)
decl_stmt|,
name|t2
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|GetSessionRunnable
argument_list|(
name|sessionD2
argument_list|,
name|wm
argument_list|,
name|error
argument_list|,
name|conf
argument_list|,
name|cdl2
argument_list|,
literal|"D"
argument_list|)
argument_list|)
decl_stmt|;
name|waitForThreadToBlock
argument_list|(
name|cdl1
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|waitForThreadToBlock
argument_list|(
name|cdl2
argument_list|,
name|t2
argument_list|)
expr_stmt|;
name|checkError
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.3f
argument_list|,
name|sessionC1
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.3f
argument_list|,
name|sessionD1
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
comment|// Change the resource plan - resize B and C down, D up, and remove A remapping users to B.
comment|// Everything will be killed in A and B, C won't change, D will start one more query from
comment|// the queue, and the query queued in A will be re-queued in B and started.
comment|// The fractions will also all change.
comment|// Total: 4/4 running.
name|plan
operator|=
operator|new
name|WMFullResourcePlan
argument_list|(
name|plan
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"B"
argument_list|,
literal|1
argument_list|,
literal|0.3f
argument_list|)
argument_list|,
name|pool
argument_list|(
literal|"C"
argument_list|,
literal|1
argument_list|,
literal|0.2f
argument_list|)
argument_list|,
name|pool
argument_list|(
literal|"D"
argument_list|,
literal|2
argument_list|,
literal|0.5f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setMappings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapping
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
name|mapping
argument_list|(
literal|"B"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
name|mapping
argument_list|(
literal|"C"
argument_list|,
literal|"C"
argument_list|)
argument_list|,
name|mapping
argument_list|(
literal|"D"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wm
operator|.
name|updateResourcePlanAsync
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|wm
operator|.
name|addTestEvent
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|()
expr_stmt|;
name|checkError
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sessionA2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sessionD2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"D"
argument_list|,
name|sessionD2
operator|.
name|get
argument_list|()
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"B"
argument_list|,
name|sessionA2
operator|.
name|get
argument_list|()
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"C"
argument_list|,
name|sessionC1
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.3f
argument_list|,
name|sessionA2
operator|.
name|get
argument_list|()
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.2f
argument_list|,
name|sessionC1
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.25f
argument_list|,
name|sessionD1
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertKilledByWm
argument_list|(
name|sessionA1
argument_list|)
expr_stmt|;
name|assertKilledByWm
argument_list|(
name|sessionB1
argument_list|)
expr_stmt|;
name|assertKilledByWm
argument_list|(
name|sessionB2
argument_list|)
expr_stmt|;
comment|// Wait for another iteration to make sure event gets processed for D2 to receive allocation.
name|sessionA2
operator|.
name|get
argument_list|()
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.25f
argument_list|,
name|sessionD2
operator|.
name|get
argument_list|()
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|sessionD2
operator|.
name|get
argument_list|()
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|sessionC1
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|sessionD1
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
comment|// Try to "return" stuff that was killed from "under" us. Should be a no-op.
name|sessionA1
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|sessionB1
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|sessionB2
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|wm
operator|.
name|getTezAmPool
argument_list|()
operator|.
name|getCurrentSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testAmPoolInteractions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HiveConf
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|MockQam
name|qam
init|=
operator|new
name|MockQam
argument_list|()
decl_stmt|;
name|WMFullResourcePlan
name|plan
init|=
operator|new
name|WMFullResourcePlan
argument_list|(
name|plan
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"A"
argument_list|,
literal|1
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|plan
operator|.
name|setMappings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapping
argument_list|(
literal|"A"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|WorkloadManager
name|wm
init|=
operator|new
name|WorkloadManagerForTest
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
name|qam
argument_list|,
name|plan
argument_list|)
decl_stmt|;
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Take away the only session, as if it was expiring.
name|TezSessionPool
argument_list|<
name|WmTezSession
argument_list|>
name|pool
init|=
name|wm
operator|.
name|getTezAmPool
argument_list|()
decl_stmt|;
name|WmTezSession
name|oob
init|=
name|pool
operator|.
name|getSession
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|WmTezSession
argument_list|>
name|sessionA1
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|cdl1
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|GetSessionRunnable
argument_list|(
name|sessionA1
argument_list|,
name|wm
argument_list|,
name|error
argument_list|,
name|conf
argument_list|,
name|cdl1
argument_list|,
literal|"A"
argument_list|)
argument_list|)
decl_stmt|;
name|waitForThreadToBlock
argument_list|(
name|cdl1
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|checkError
argument_list|(
name|error
argument_list|)
expr_stmt|;
comment|// Replacing it directly in the pool should unblock get.
name|pool
operator|.
name|replaceSession
argument_list|(
name|oob
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|sessionA1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|sessionA1
operator|.
name|get
argument_list|()
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Increase qp, check that the pool grows.
name|plan
operator|=
operator|new
name|WMFullResourcePlan
argument_list|(
name|plan
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"A"
argument_list|,
literal|4
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setMappings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapping
argument_list|(
literal|"A"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wm
operator|.
name|updateResourcePlanAsync
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|WmTezSession
name|oob2
init|=
name|pool
operator|.
name|getSession
argument_list|()
decl_stmt|,
name|oob3
init|=
name|pool
operator|.
name|getSession
argument_list|()
decl_stmt|,
name|oob4
init|=
name|pool
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|pool
operator|.
name|returnSession
argument_list|(
name|oob2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pool
operator|.
name|getCurrentSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Decrease qp, check that the pool shrinks incl. killing the unused and returned sessions.
name|plan
operator|=
operator|new
name|WMFullResourcePlan
argument_list|(
name|plan
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"A"
argument_list|,
literal|1
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setMappings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapping
argument_list|(
literal|"A"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wm
operator|.
name|updateResourcePlanAsync
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|wm
operator|.
name|addTestEvent
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|getCurrentSize
argument_list|()
argument_list|)
expr_stmt|;
name|sessionA1
operator|.
name|get
argument_list|()
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|pool
operator|.
name|returnSession
argument_list|(
name|oob3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|getCurrentSize
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|.
name|returnSession
argument_list|(
name|oob4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pool
operator|.
name|getCurrentSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Decrease, then increase qp - sessions should not be killed on return.
name|plan
operator|=
operator|new
name|WMFullResourcePlan
argument_list|(
name|plan
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"A"
argument_list|,
literal|2
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setMappings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapping
argument_list|(
literal|"A"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wm
operator|.
name|updateResourcePlanAsync
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|oob2
operator|=
name|pool
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|oob3
operator|=
name|pool
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|getCurrentSize
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
operator|new
name|WMFullResourcePlan
argument_list|(
name|plan
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"A"
argument_list|,
literal|1
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setMappings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapping
argument_list|(
literal|"A"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wm
operator|.
name|updateResourcePlanAsync
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|plan
operator|=
operator|new
name|WMFullResourcePlan
argument_list|(
name|plan
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"A"
argument_list|,
literal|2
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setMappings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapping
argument_list|(
literal|"A"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wm
operator|.
name|updateResourcePlanAsync
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|wm
operator|.
name|addTestEvent
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|getCurrentSize
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|.
name|returnSession
argument_list|(
name|oob3
argument_list|)
expr_stmt|;
name|pool
operator|.
name|returnSession
argument_list|(
name|oob4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pool
operator|.
name|getCurrentSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testAsyncSessionInitFailures
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HiveConf
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|MockQam
name|qam
init|=
operator|new
name|MockQam
argument_list|()
decl_stmt|;
name|WMFullResourcePlan
name|plan
init|=
operator|new
name|WMFullResourcePlan
argument_list|(
name|plan
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"A"
argument_list|,
literal|1
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|plan
operator|.
name|setMappings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapping
argument_list|(
literal|"A"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|WorkloadManager
name|wm
init|=
operator|new
name|WorkloadManagerForTest
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
name|qam
argument_list|,
name|plan
argument_list|)
decl_stmt|;
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Make sure session init gets stuck in init.
name|TezSessionPool
argument_list|<
name|WmTezSession
argument_list|>
name|pool
init|=
name|wm
operator|.
name|getTezAmPool
argument_list|()
decl_stmt|;
name|SampleTezSessionState
name|theOnlySession
init|=
operator|(
name|SampleTezSessionState
operator|)
name|pool
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|SettableFuture
argument_list|<
name|Boolean
argument_list|>
name|blockedWait
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|theOnlySession
operator|.
name|setWaitForAmRegistryFuture
argument_list|(
name|blockedWait
argument_list|)
expr_stmt|;
name|pool
operator|.
name|returnSession
argument_list|(
name|theOnlySession
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pool
operator|.
name|getCurrentSize
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|WmTezSession
argument_list|>
name|sessionA
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|CountDownLatch
name|cdl
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|GetSessionRunnable
argument_list|(
name|sessionA
argument_list|,
name|wm
argument_list|,
name|error
argument_list|,
name|conf
argument_list|,
name|cdl
argument_list|,
literal|"A"
argument_list|)
argument_list|)
decl_stmt|;
name|waitForThreadToBlock
argument_list|(
name|cdl
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|checkError
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|wm
operator|.
name|addTestEvent
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// The session is taken out of the pool, but is waiting for registration.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|getCurrentSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the resource plan, so that the session gets killed.
name|plan
operator|=
operator|new
name|WMFullResourcePlan
argument_list|(
name|plan
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"B"
argument_list|,
literal|1
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setMappings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapping
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wm
operator|.
name|updateResourcePlanAsync
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|wm
operator|.
name|addTestEvent
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|blockedWait
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Meanwhile, the init succeeds!
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
try|try
block|{
name|sessionA
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an error but got "
operator|+
name|sessionA
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Expected.
block|}
try|try
block|{
comment|// The get-session call should also fail.
name|checkError
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Expected.
block|}
name|error
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|theOnlySession
operator|=
name|validatePoolAfterCleanup
argument_list|(
name|theOnlySession
argument_list|,
name|conf
argument_list|,
name|wm
argument_list|,
name|pool
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
comment|// Initialization fails, no resource plan change.
name|SettableFuture
argument_list|<
name|Boolean
argument_list|>
name|failedWait
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|failedWait
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|theOnlySession
operator|.
name|setWaitForAmRegistryFuture
argument_list|(
name|failedWait
argument_list|)
expr_stmt|;
try|try
block|{
name|TezSessionState
name|r
init|=
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected an error but got "
operator|+
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Expected.
block|}
name|theOnlySession
operator|=
name|validatePoolAfterCleanup
argument_list|(
name|theOnlySession
argument_list|,
name|conf
argument_list|,
name|wm
argument_list|,
name|pool
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
comment|// Init fails, but the session is also killed by WM before that.
name|failedWait
operator|=
name|SettableFuture
operator|.
name|create
argument_list|()
expr_stmt|;
name|theOnlySession
operator|.
name|setWaitForAmRegistryFuture
argument_list|(
name|failedWait
argument_list|)
expr_stmt|;
name|sessionA
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cdl
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|t1
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|GetSessionRunnable
argument_list|(
name|sessionA
argument_list|,
name|wm
argument_list|,
name|error
argument_list|,
name|conf
argument_list|,
name|cdl
argument_list|,
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|waitForThreadToBlock
argument_list|(
name|cdl
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|wm
operator|.
name|addTestEvent
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// The session is taken out of the pool, but is waiting for registration.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|getCurrentSize
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|=
operator|new
name|WMFullResourcePlan
argument_list|(
name|plan
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|pool
argument_list|(
literal|"A"
argument_list|,
literal|1
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setMappings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapping
argument_list|(
literal|"A"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wm
operator|.
name|updateResourcePlanAsync
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|wm
operator|.
name|addTestEvent
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|failedWait
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"moo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Meanwhile, the init fails.
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
try|try
block|{
name|sessionA
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an error but got "
operator|+
name|sessionA
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Expected.
block|}
try|try
block|{
comment|// The get-session call should also fail.
name|checkError
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Expected.
block|}
name|validatePoolAfterCleanup
argument_list|(
name|theOnlySession
argument_list|,
name|conf
argument_list|,
name|wm
argument_list|,
name|pool
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SampleTezSessionState
name|validatePoolAfterCleanup
parameter_list|(
name|SampleTezSessionState
name|oldSession
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|WorkloadManager
name|wm
parameter_list|,
name|TezSessionPool
argument_list|<
name|WmTezSession
argument_list|>
name|pool
parameter_list|,
name|String
name|sessionPoolName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Make sure the cleanup doesn't leave the pool without a session.
name|SampleTezSessionState
name|theOnlySession
init|=
operator|(
name|SampleTezSessionState
operator|)
name|pool
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|theOnlySession
argument_list|)
expr_stmt|;
name|theOnlySession
operator|.
name|setWaitForAmRegistryFuture
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|oldSession
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0f
argument_list|,
name|oldSession
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|pool
operator|.
name|returnSession
argument_list|(
name|theOnlySession
argument_list|)
expr_stmt|;
comment|// Make sure we can actually get a session still - parallelism/etc. should not be affected.
name|WmTezSession
name|result
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
operator|new
name|MappingInput
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sessionPoolName
argument_list|,
name|result
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1f
argument_list|,
name|result
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|result
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
return|return
name|theOnlySession
return|;
block|}
specifier|private
name|void
name|assertKilledByWm
parameter_list|(
name|WmTezSession
name|session
parameter_list|)
block|{
name|assertNull
argument_list|(
name|session
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0f
argument_list|,
name|session
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|session
operator|.
name|isIrrelevantForWm
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkError
parameter_list|(
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
parameter_list|)
throws|throws
name|Exception
block|{
name|Throwable
name|t
init|=
name|error
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
return|return;
throw|throw
operator|new
name|Exception
argument_list|(
name|t
argument_list|)
throw|;
block|}
specifier|private
name|HiveConf
name|createConf
parameter_list|()
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TEZ_SESSION_LIFETIME
operator|.
name|varname
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|LLAP_TASK_SCHEDULER_AM_REGISTRY_NAME
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

