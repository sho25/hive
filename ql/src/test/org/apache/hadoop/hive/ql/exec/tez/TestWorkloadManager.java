begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConfiguration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestWorkloadManager
block|{
specifier|private
specifier|static
class|class
name|MockQam
implements|implements
name|QueryAllocationManager
block|{
name|boolean
name|isCalled
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|updateSessionsAsync
parameter_list|(
name|double
name|totalMaxAlloc
parameter_list|,
name|List
argument_list|<
name|WmTezSession
argument_list|>
name|sessions
parameter_list|)
block|{
name|isCalled
operator|=
literal|true
expr_stmt|;
block|}
name|void
name|assertWasCalled
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|isCalled
argument_list|)
expr_stmt|;
name|isCalled
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|WorkloadManagerForTest
extends|extends
name|WorkloadManager
block|{
name|WorkloadManagerForTest
parameter_list|(
name|String
name|yarnQueue
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|int
name|numSessions
parameter_list|,
name|QueryAllocationManager
name|qam
parameter_list|)
block|{
name|super
argument_list|(
name|yarnQueue
argument_list|,
name|conf
argument_list|,
name|numSessions
argument_list|,
name|qam
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|WmTezSession
name|createSessionObject
parameter_list|(
name|String
name|sessionId
parameter_list|)
block|{
return|return
operator|new
name|SampleTezSessionState
argument_list|(
name|sessionId
argument_list|,
name|this
argument_list|,
operator|new
name|HiveConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|ensureAmIsRegistered
parameter_list|(
name|WmTezSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testReuse
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|MockQam
name|qam
init|=
operator|new
name|MockQam
argument_list|()
decl_stmt|;
name|WorkloadManager
name|wm
init|=
operator|new
name|WorkloadManagerForTest
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
literal|1
argument_list|,
name|qam
argument_list|)
decl_stmt|;
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
name|TezSessionState
name|nonPool
init|=
name|mock
argument_list|(
name|TezSessionState
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nonPool
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|nonPool
argument_list|)
operator|.
name|close
argument_list|(
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|TezSessionState
name|session
init|=
name|wm
operator|.
name|getSession
argument_list|(
name|nonPool
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|nonPool
argument_list|)
operator|.
name|close
argument_list|(
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|nonPool
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|session
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|TezSessionPoolSession
name|diffPool
init|=
name|mock
argument_list|(
name|TezSessionPoolSession
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|diffPool
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|diffPool
argument_list|)
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|session
operator|=
name|wm
operator|.
name|getSession
argument_list|(
name|diffPool
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|diffPool
argument_list|)
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|assertNotSame
argument_list|(
name|diffPool
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|TezSessionState
name|session2
init|=
name|wm
operator|.
name|getSession
argument_list|(
name|session
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|session
argument_list|,
name|session2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testQueueName
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|MockQam
name|qam
init|=
operator|new
name|MockQam
argument_list|()
decl_stmt|;
name|WorkloadManager
name|wm
init|=
operator|new
name|WorkloadManagerForTest
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
literal|1
argument_list|,
name|qam
argument_list|)
decl_stmt|;
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// The queue should be ignored.
name|conf
operator|.
name|set
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_QUEUE_NAME
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|TezSessionState
name|session
init|=
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|session
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|setQueueName
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|session
operator|=
name|wm
operator|.
name|getSession
argument_list|(
name|session
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|session
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Note (unrelated to epsilon): all the fraction checks are valid with the current logic in the
comment|//                              absence of policies. This will change when there are policies.
specifier|private
specifier|final
specifier|static
name|double
name|EPSILON
init|=
literal|0.001
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testReopen
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We should always get a different object, and cluster fraction should be propagated.
name|HiveConf
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|MockQam
name|qam
init|=
operator|new
name|MockQam
argument_list|()
decl_stmt|;
name|WorkloadManager
name|wm
init|=
operator|new
name|WorkloadManagerForTest
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
literal|1
argument_list|,
name|qam
argument_list|)
decl_stmt|;
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
name|WmTezSession
name|session
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|session
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|qam
operator|.
name|assertWasCalled
argument_list|()
expr_stmt|;
name|WmTezSession
name|session2
init|=
operator|(
name|WmTezSession
operator|)
name|session
operator|.
name|reopen
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|session
argument_list|,
name|session2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|session2
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|session
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|qam
operator|.
name|assertWasCalled
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testDestroyAndReturn
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Session should not be lost; however the fraction should be discarded.
name|HiveConf
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|MockQam
name|qam
init|=
operator|new
name|MockQam
argument_list|()
decl_stmt|;
name|WorkloadManager
name|wm
init|=
operator|new
name|WorkloadManagerForTest
argument_list|(
literal|"test"
argument_list|,
name|conf
argument_list|,
literal|2
argument_list|,
name|qam
argument_list|)
decl_stmt|;
name|wm
operator|.
name|start
argument_list|()
expr_stmt|;
name|WmTezSession
name|session
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|session
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|qam
operator|.
name|assertWasCalled
argument_list|()
expr_stmt|;
name|WmTezSession
name|session2
init|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|session
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|session2
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|qam
operator|.
name|assertWasCalled
argument_list|()
expr_stmt|;
name|assertNotSame
argument_list|(
name|session
argument_list|,
name|session2
argument_list|)
expr_stmt|;
name|session
operator|.
name|destroy
argument_list|()
expr_stmt|;
comment|// Destroy before returning to the pool.
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|session2
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|session
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|qam
operator|.
name|assertWasCalled
argument_list|()
expr_stmt|;
comment|// We never lose pool session, so we should still be able to get.
name|session
operator|=
operator|(
name|WmTezSession
operator|)
name|wm
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|session
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|session2
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|session
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|qam
operator|.
name|assertWasCalled
argument_list|()
expr_stmt|;
comment|// Now destroy the returned session (which is technically not valid) and confirm correctness.
name|session
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|session2
operator|.
name|getClusterFraction
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
comment|//qam.assertWasNotCalled();
block|}
specifier|private
name|HiveConf
name|createConf
parameter_list|()
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TEZ_SESSION_LIFETIME
operator|.
name|varname
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|LLAP_TASK_SCHEDULER_AM_REGISTRY_NAME
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

