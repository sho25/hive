begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|reflect
operator|.
name|FieldUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ColStatistics
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spark_project
operator|.
name|guava
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
specifier|public
class|class
name|TestStatsUtils
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCombinedRange1
parameter_list|()
block|{
name|Range
name|r1
init|=
operator|new
name|Range
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Range
name|r2
init|=
operator|new
name|Range
argument_list|(
literal|1
argument_list|,
literal|11
argument_list|)
decl_stmt|;
name|Range
name|r3
init|=
name|StatsUtils
operator|.
name|combineRange
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r3
argument_list|)
expr_stmt|;
name|rangeContains
argument_list|(
name|r3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rangeContains
argument_list|(
name|r3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rangeContains
argument_list|(
name|r3
argument_list|,
literal|11
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCombinedRange2
parameter_list|()
block|{
name|checkCombinedRange
argument_list|(
literal|false
argument_list|,
operator|new
name|Range
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
operator|new
name|Range
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|checkCombinedRange
argument_list|(
literal|true
argument_list|,
operator|new
name|Range
argument_list|(
operator|-
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|Range
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|checkCombinedRange
argument_list|(
literal|true
argument_list|,
operator|new
name|Range
argument_list|(
operator|-
literal|2
argument_list|,
literal|11
argument_list|)
argument_list|,
operator|new
name|Range
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|checkCombinedRange
argument_list|(
literal|true
argument_list|,
operator|new
name|Range
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|Range
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|checkCombinedRange
argument_list|(
literal|true
argument_list|,
operator|new
name|Range
argument_list|(
literal|1
argument_list|,
literal|11
argument_list|)
argument_list|,
operator|new
name|Range
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|checkCombinedRange
argument_list|(
literal|false
argument_list|,
operator|new
name|Range
argument_list|(
literal|11
argument_list|,
literal|12
argument_list|)
argument_list|,
operator|new
name|Range
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkCombinedRange
parameter_list|(
name|boolean
name|valid
parameter_list|,
name|Range
name|r1
parameter_list|,
name|Range
name|r2
parameter_list|)
block|{
name|Range
name|r3a
init|=
name|StatsUtils
operator|.
name|combineRange
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
decl_stmt|;
name|Range
name|r3b
init|=
name|StatsUtils
operator|.
name|combineRange
argument_list|(
name|r2
argument_list|,
name|r1
argument_list|)
decl_stmt|;
if|if
condition|(
name|valid
condition|)
block|{
name|assertNotNull
argument_list|(
name|r3a
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|r3b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|r3a
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r3b
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|rangeContains
parameter_list|(
name|Range
name|range
parameter_list|,
name|Number
name|f
parameter_list|)
block|{
name|double
name|m
init|=
name|range
operator|.
name|minValue
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|double
name|M
init|=
name|range
operator|.
name|maxValue
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|double
name|v
init|=
name|f
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
return|return
name|m
operator|<=
name|v
operator|&&
name|v
operator|<=
name|M
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveSizeEstimations
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|exclusions
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|exclusions
operator|.
name|add
argument_list|(
name|serdeConstants
operator|.
name|VOID_TYPE_NAME
argument_list|)
expr_stmt|;
name|exclusions
operator|.
name|add
argument_list|(
name|serdeConstants
operator|.
name|LIST_TYPE_NAME
argument_list|)
expr_stmt|;
name|exclusions
operator|.
name|add
argument_list|(
name|serdeConstants
operator|.
name|MAP_TYPE_NAME
argument_list|)
expr_stmt|;
name|exclusions
operator|.
name|add
argument_list|(
name|serdeConstants
operator|.
name|STRUCT_TYPE_NAME
argument_list|)
expr_stmt|;
name|exclusions
operator|.
name|add
argument_list|(
name|serdeConstants
operator|.
name|UNION_TYPE_NAME
argument_list|)
expr_stmt|;
name|Field
index|[]
name|serdeFields
init|=
name|serdeConstants
operator|.
name|class
operator|.
name|getFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|serdeFields
control|)
block|{
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|field
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"_TYPE_NAME"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|typeName
init|=
operator|(
name|String
operator|)
name|FieldUtils
operator|.
name|readStaticField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|exclusions
operator|.
name|contains
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|long
name|siz
init|=
name|StatsUtils
operator|.
name|getSizeOfPrimitiveTypeArraysFromType
argument_list|(
name|typeName
argument_list|,
literal|3
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|field
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|siz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

