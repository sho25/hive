begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|sqlstd
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|HadoopDefaultAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|DisallowTransformHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzPluginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzSessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzSessionContext
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzSessionContext
operator|.
name|CLIENT_TYPE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_comment
comment|/**  * Test SQLStdHiveAccessController  */
end_comment

begin_class
specifier|public
class|class
name|TestSQLStdHiveAccessControllerHS2
block|{
comment|/**    * Test if SQLStdHiveAccessController is applying configuration security    * policy on hiveconf correctly    *    * @throws HiveAuthzPluginException    * @throws IllegalAccessException    * @throws NoSuchFieldException    * @throws IllegalArgumentException    * @throws SecurityException    */
annotation|@
name|Test
specifier|public
name|void
name|testConfigProcessing
parameter_list|()
throws|throws
name|HiveAuthzPluginException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|HiveConf
name|processedConf
init|=
name|newAuthEnabledConf
argument_list|()
decl_stmt|;
name|SQLStdHiveAccessController
name|accessController
init|=
operator|new
name|SQLStdHiveAccessController
argument_list|(
literal|null
argument_list|,
name|processedConf
argument_list|,
operator|new
name|HadoopDefaultAuthenticator
argument_list|()
argument_list|,
name|getHS2SessionCtx
argument_list|()
argument_list|)
decl_stmt|;
name|accessController
operator|.
name|applyAuthorizationConfigPolicy
argument_list|(
name|processedConf
argument_list|)
expr_stmt|;
comment|// check that hook to disable transforms has been added
name|assertTrue
argument_list|(
literal|"Check for transform query disabling hook"
argument_list|,
name|processedConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|PREEXECHOOKS
argument_list|)
operator|.
name|contains
argument_list|(
name|DisallowTransformHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|settableParams
init|=
name|getSettableParams
argument_list|()
decl_stmt|;
name|verifyParamSettability
argument_list|(
name|settableParams
argument_list|,
name|processedConf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HiveConf
name|newAuthEnabledConf
parameter_list|()
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * @return list of parameters that should be possible to set    */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getSettableParams
parameter_list|()
throws|throws
name|SecurityException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
comment|// get all the variable names being converted to regex in HiveConf, using reflection
name|Field
name|varNameField
init|=
name|HiveConf
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"sqlStdAuthSafeVarNames"
argument_list|)
decl_stmt|;
name|varNameField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|confVarList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|String
index|[]
operator|)
name|varNameField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
comment|// create list with variables that match some of the regexes
name|List
argument_list|<
name|String
argument_list|>
name|confVarRegexList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hive.convert.join.bucket.mapjoin.tez"
argument_list|,
literal|"hive.optimize.index.filter.compact.maxsize"
argument_list|,
literal|"hive.tez.dummy"
argument_list|,
literal|"tez.task.dummy"
argument_list|,
literal|"hive.exec.dynamic.partition"
argument_list|,
literal|"hive.exec.dynamic.partition.mode"
argument_list|,
literal|"hive.exec.max.dynamic.partitions"
argument_list|,
literal|"hive.exec.max.dynamic.partitions.pernode"
argument_list|,
literal|"oozie.HadoopAccessorService.created"
argument_list|,
literal|"tez.queue.name"
argument_list|,
literal|"hive.druid.select.distribute"
argument_list|,
literal|"distcp.options.px"
argument_list|,
literal|"hive.materializedview.rewriting"
argument_list|)
decl_stmt|;
comment|// combine two lists
name|List
argument_list|<
name|String
argument_list|>
name|varList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|varList
operator|.
name|addAll
argument_list|(
name|confVarList
argument_list|)
expr_stmt|;
name|varList
operator|.
name|addAll
argument_list|(
name|confVarRegexList
argument_list|)
expr_stmt|;
return|return
name|varList
return|;
block|}
specifier|private
name|HiveAuthzSessionContext
name|getHS2SessionCtx
parameter_list|()
block|{
name|Builder
name|ctxBuilder
init|=
operator|new
name|HiveAuthzSessionContext
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|ctxBuilder
operator|.
name|setClientType
argument_list|(
name|CLIENT_TYPE
operator|.
name|HIVESERVER2
argument_list|)
expr_stmt|;
return|return
name|ctxBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Verify that params in settableParams can be modified, and other random ones can't be modified    * @param settableParams    * @param processedConf    */
specifier|private
name|void
name|verifyParamSettability
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|settableParams
parameter_list|,
name|HiveConf
name|processedConf
parameter_list|)
block|{
comment|// verify that the whitlelist params can be set
for|for
control|(
name|String
name|param
range|:
name|settableParams
control|)
block|{
try|try
block|{
name|processedConf
operator|.
name|verifyAndSet
argument_list|(
name|param
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unable to set value for parameter in whitelist "
operator|+
name|param
operator|+
literal|" "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// verify that non whitelist params can't be set
name|assertConfModificationException
argument_list|(
name|processedConf
argument_list|,
literal|"dummy.param"
argument_list|)
expr_stmt|;
comment|// does not make sense to have any of the metastore config variables to be
comment|// modifiable
for|for
control|(
name|ConfVars
name|metaVar
range|:
name|HiveConf
operator|.
name|metaVars
control|)
block|{
name|assertConfModificationException
argument_list|(
name|processedConf
argument_list|,
name|metaVar
operator|.
name|varname
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that setting HIVE_AUTHORIZATION_SQL_STD_AUTH_CONFIG_WHITELIST_APPEND config works    * @throws HiveAuthzPluginException    */
annotation|@
name|Test
specifier|public
name|void
name|testConfigProcessingCustomSetWhitelistAppend
parameter_list|()
throws|throws
name|HiveAuthzPluginException
block|{
comment|// append new config params to whitelist
name|List
argument_list|<
name|String
argument_list|>
name|paramRegexes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hive.ctest.param"
argument_list|,
literal|"hive.abc..*"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|settableParams
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hive.ctest.param"
argument_list|,
literal|"hive.abc.def"
argument_list|)
decl_stmt|;
name|verifySettability
argument_list|(
name|paramRegexes
argument_list|,
name|settableParams
argument_list|,
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_SQL_STD_AUTH_CONFIG_WHITELIST_APPEND
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that setting HIVE_AUTHORIZATION_SQL_STD_AUTH_CONFIG_WHITELIST config works    * @throws HiveAuthzPluginException    */
annotation|@
name|Test
specifier|public
name|void
name|testConfigProcessingCustomSetWhitelist
parameter_list|()
throws|throws
name|HiveAuthzPluginException
block|{
comment|// append new config params to whitelist
name|List
argument_list|<
name|String
argument_list|>
name|paramRegexes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hive.ctest.param"
argument_list|,
literal|"hive.abc..*"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|settableParams
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hive.ctest.param"
argument_list|,
literal|"hive.abc.def"
argument_list|)
decl_stmt|;
name|verifySettability
argument_list|(
name|paramRegexes
argument_list|,
name|settableParams
argument_list|,
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_SQL_STD_AUTH_CONFIG_WHITELIST
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifySettability
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|paramRegexes
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|settableParams
parameter_list|,
name|ConfVars
name|whiteListParam
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
name|HiveConf
name|processedConf
init|=
name|newAuthEnabledConf
argument_list|()
decl_stmt|;
name|processedConf
operator|.
name|setVar
argument_list|(
name|whiteListParam
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|"|"
argument_list|)
operator|.
name|join
argument_list|(
name|paramRegexes
argument_list|)
argument_list|)
expr_stmt|;
name|SQLStdHiveAccessController
name|accessController
init|=
operator|new
name|SQLStdHiveAccessController
argument_list|(
literal|null
argument_list|,
name|processedConf
argument_list|,
operator|new
name|HadoopDefaultAuthenticator
argument_list|()
argument_list|,
name|getHS2SessionCtx
argument_list|()
argument_list|)
decl_stmt|;
name|accessController
operator|.
name|applyAuthorizationConfigPolicy
argument_list|(
name|processedConf
argument_list|)
expr_stmt|;
name|verifyParamSettability
argument_list|(
name|settableParams
argument_list|,
name|processedConf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertConfModificationException
parameter_list|(
name|HiveConf
name|processedConf
parameter_list|,
name|String
name|param
parameter_list|)
block|{
name|boolean
name|caughtEx
init|=
literal|false
decl_stmt|;
try|try
block|{
name|processedConf
operator|.
name|verifyAndSet
argument_list|(
name|param
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|caughtEx
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Exception should be thrown while modifying the param "
operator|+
name|param
argument_list|,
name|caughtEx
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

