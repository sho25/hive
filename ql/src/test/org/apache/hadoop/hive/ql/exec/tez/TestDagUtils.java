begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BaseWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|DAG
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|TestDagUtils
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCredentialsNotOverwritten
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|UserGroupInformation
name|testUser
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"test_user"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|DagUtils
name|dagUtils
init|=
name|DagUtils
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Credentials
name|originalCredentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|Text
name|testTokenAlias
init|=
operator|new
name|Text
argument_list|(
literal|"my_test_token"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|testToken
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|originalCredentials
operator|.
name|addToken
argument_list|(
name|testTokenAlias
argument_list|,
name|testToken
argument_list|)
expr_stmt|;
name|Credentials
name|testUserCredentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|testUser
operator|.
name|addCredentials
argument_list|(
name|testUserCredentials
argument_list|)
expr_stmt|;
specifier|final
name|BaseWork
name|work
init|=
name|mock
argument_list|(
name|BaseWork
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|DAG
name|dag
init|=
name|DAG
operator|.
name|create
argument_list|(
literal|"test_credentials_dag"
argument_list|)
decl_stmt|;
name|dag
operator|.
name|setCredentials
argument_list|(
name|originalCredentials
argument_list|)
expr_stmt|;
name|testUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|dagUtils
operator|.
name|addCredentials
argument_list|(
name|work
argument_list|,
name|dag
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|actualToken
init|=
name|dag
operator|.
name|getCredentials
argument_list|()
operator|.
name|getToken
argument_list|(
name|testTokenAlias
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testToken
argument_list|,
name|actualToken
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

