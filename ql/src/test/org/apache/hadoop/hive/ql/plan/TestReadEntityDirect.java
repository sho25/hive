begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|AbstractSemanticAnalyzerHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveSemanticAnalyzerHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test if ReadEntity isDirect flag is set correctly to indicate if  * the entity represents a direct or indirect dependency. See documentation  * of flag in ReadEntity.  */
end_comment

begin_class
specifier|public
class|class
name|TestReadEntityDirect
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|onetimeSetup
parameter_list|()
throws|throws
name|CommandNeedRetryException
block|{
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table t1(i int)"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create view v1 as select * from t1"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|onetimeTeardown
parameter_list|()
throws|throws
name|Exception
block|{
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table t1"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop view v1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|CheckInputReadEntityDirect
operator|.
name|readEntities
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * No views in the query so it should be a direct entity    *    * @throws ParseException    */
annotation|@
name|Test
specifier|public
name|void
name|testSelectEntityDirect
parameter_list|()
throws|throws
name|ParseException
block|{
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|driver
operator|.
name|compile
argument_list|(
literal|"select * from t1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|CheckInputReadEntityDirect
operator|.
name|readEntities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"isDirect"
argument_list|,
name|CheckInputReadEntityDirect
operator|.
name|readEntities
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Underlying table of view should be marked as indirect    *    * @throws ParseException    */
annotation|@
name|Test
specifier|public
name|void
name|testSelectEntityInDirect
parameter_list|()
throws|throws
name|ParseException
block|{
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|driver
operator|.
name|compile
argument_list|(
literal|"select * from v1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|CheckInputReadEntityDirect
operator|.
name|readEntities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ReadEntity
name|readEntity
range|:
name|CheckInputReadEntityDirect
operator|.
name|readEntities
control|)
block|{
if|if
condition|(
name|readEntity
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"default@t1"
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
literal|"not direct"
argument_list|,
name|readEntity
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readEntity
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"default@v1"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"direct"
argument_list|,
name|readEntity
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"unexpected entity name "
operator|+
name|readEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Underlying table of view should be marked as direct, as it is also accessed    * directly in the join query    *    * @throws ParseException    */
annotation|@
name|Test
specifier|public
name|void
name|testSelectEntityViewDirectJoin
parameter_list|()
throws|throws
name|ParseException
block|{
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|driver
operator|.
name|compile
argument_list|(
literal|"select * from v1 join t1 on (v1.i = t1.i)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|CheckInputReadEntityDirect
operator|.
name|readEntities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ReadEntity
name|readEntity
range|:
name|CheckInputReadEntityDirect
operator|.
name|readEntities
control|)
block|{
if|if
condition|(
name|readEntity
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"default@t1"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"direct"
argument_list|,
name|readEntity
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readEntity
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"default@v1"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"direct"
argument_list|,
name|readEntity
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"unexpected entity name "
operator|+
name|readEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Underlying table of view should be marked as direct, as it is also accessed    * directly in the union-all query    *    * @throws ParseException    */
annotation|@
name|Test
specifier|public
name|void
name|testSelectEntityViewDirectUnion
parameter_list|()
throws|throws
name|ParseException
block|{
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|driver
operator|.
name|compile
argument_list|(
literal|"select * from ( select * from v1 union all select * from t1) uv1t1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|CheckInputReadEntityDirect
operator|.
name|readEntities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ReadEntity
name|readEntity
range|:
name|CheckInputReadEntityDirect
operator|.
name|readEntities
control|)
block|{
if|if
condition|(
name|readEntity
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"default@t1"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"direct"
argument_list|,
name|readEntity
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readEntity
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"default@v1"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"direct"
argument_list|,
name|readEntity
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"unexpected entity name "
operator|+
name|readEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Underlying table of view should be marked as indirect. Query with join of views and aliases    *    * @throws ParseException    */
annotation|@
name|Test
specifier|public
name|void
name|testSelectEntityInDirectJoinAlias
parameter_list|()
throws|throws
name|ParseException
block|{
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|driver
operator|.
name|compile
argument_list|(
literal|"select * from v1 as a join v1 as b on (a.i = b.i)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|CheckInputReadEntityDirect
operator|.
name|readEntities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ReadEntity
name|readEntity
range|:
name|CheckInputReadEntityDirect
operator|.
name|readEntities
control|)
block|{
if|if
condition|(
name|readEntity
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"default@t1"
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
literal|"not direct"
argument_list|,
name|readEntity
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|readEntity
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"default@v1"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"direct"
argument_list|,
name|readEntity
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"unexpected entity name "
operator|+
name|readEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create driver with the test hook set in config    */
specifier|private
specifier|static
name|Driver
name|createDriver
parameter_list|()
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|Driver
operator|.
name|class
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SEMANTIC_ANALYZER_HOOK
argument_list|,
name|CheckInputReadEntityDirect
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Driver
name|driver
init|=
operator|new
name|Driver
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|driver
return|;
block|}
comment|/**    * Hook used in the test to capture the set of ReadEntities    */
specifier|public
specifier|static
class|class
name|CheckInputReadEntityDirect
extends|extends
name|AbstractSemanticAnalyzerHook
block|{
specifier|public
specifier|static
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|readEntities
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|postAnalyze
parameter_list|(
name|HiveSemanticAnalyzerHookContext
name|context
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|)
throws|throws
name|SemanticException
block|{
name|readEntities
operator|=
name|context
operator|.
name|getInputs
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

