begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TezEdgeProperty
operator|.
name|EdgeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
specifier|public
class|class
name|TestTezWork
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MR_JAR_PROPERTY
init|=
literal|"tmpjars"
decl_stmt|;
specifier|private
name|List
argument_list|<
name|BaseWork
argument_list|>
name|nodes
decl_stmt|;
specifier|private
name|TezWork
name|work
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|nodes
operator|=
operator|new
name|LinkedList
argument_list|<
name|BaseWork
argument_list|>
argument_list|()
expr_stmt|;
name|work
operator|=
operator|new
name|TezWork
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addWork
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addWork
parameter_list|(
name|int
name|n
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|BaseWork
name|w
init|=
operator|new
name|MapWork
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|work
operator|.
name|add
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getAllWork
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getRoots
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getLeaves
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BaseWork
name|w
range|:
name|nodes
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getParents
argument_list|(
name|w
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getChildren
argument_list|(
name|w
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnect
parameter_list|()
throws|throws
name|Exception
block|{
name|BaseWork
name|parent
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BaseWork
name|child
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TezEdgeProperty
name|edgeProp
init|=
operator|new
name|TezEdgeProperty
argument_list|(
name|EdgeType
operator|.
name|SIMPLE_EDGE
argument_list|)
decl_stmt|;
name|work
operator|.
name|connect
argument_list|(
name|parent
argument_list|,
name|child
argument_list|,
name|edgeProp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getParents
argument_list|(
name|child
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getChildren
argument_list|(
name|parent
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getChildren
argument_list|(
name|parent
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getParents
argument_list|(
name|child
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|work
operator|.
name|getRoots
argument_list|()
operator|.
name|contains
argument_list|(
name|parent
argument_list|)
operator|&&
operator|!
name|work
operator|.
name|getRoots
argument_list|()
operator|.
name|contains
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|work
operator|.
name|getLeaves
argument_list|()
operator|.
name|contains
argument_list|(
name|parent
argument_list|)
operator|&&
name|work
operator|.
name|getLeaves
argument_list|()
operator|.
name|contains
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BaseWork
name|w
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|w
operator|==
name|parent
operator|||
name|w
operator|==
name|child
condition|)
block|{
continue|continue;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getParents
argument_list|(
name|w
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getChildren
argument_list|(
name|w
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getEdgeProperty
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
operator|.
name|getEdgeType
argument_list|()
argument_list|,
name|EdgeType
operator|.
name|SIMPLE_EDGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBroadcastConnect
parameter_list|()
throws|throws
name|Exception
block|{
name|BaseWork
name|parent
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BaseWork
name|child
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TezEdgeProperty
name|edgeProp
init|=
operator|new
name|TezEdgeProperty
argument_list|(
name|EdgeType
operator|.
name|BROADCAST_EDGE
argument_list|)
decl_stmt|;
name|work
operator|.
name|connect
argument_list|(
name|parent
argument_list|,
name|child
argument_list|,
name|edgeProp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getParents
argument_list|(
name|child
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getChildren
argument_list|(
name|parent
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getChildren
argument_list|(
name|parent
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getParents
argument_list|(
name|child
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|work
operator|.
name|getRoots
argument_list|()
operator|.
name|contains
argument_list|(
name|parent
argument_list|)
operator|&&
operator|!
name|work
operator|.
name|getRoots
argument_list|()
operator|.
name|contains
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|work
operator|.
name|getLeaves
argument_list|()
operator|.
name|contains
argument_list|(
name|parent
argument_list|)
operator|&&
name|work
operator|.
name|getLeaves
argument_list|()
operator|.
name|contains
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BaseWork
name|w
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|w
operator|==
name|parent
operator|||
name|w
operator|==
name|child
condition|)
block|{
continue|continue;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getParents
argument_list|(
name|w
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getChildren
argument_list|(
name|w
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getEdgeProperty
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
operator|.
name|getEdgeType
argument_list|()
argument_list|,
name|EdgeType
operator|.
name|BROADCAST_EDGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|BaseWork
name|parent
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BaseWork
name|children
index|[]
init|=
block|{
name|nodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
block|,
name|nodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
block|}
decl_stmt|;
name|TezEdgeProperty
name|edgeProp
init|=
operator|new
name|TezEdgeProperty
argument_list|(
name|EdgeType
operator|.
name|SIMPLE_EDGE
argument_list|)
decl_stmt|;
name|work
operator|.
name|connect
argument_list|(
name|parent
argument_list|,
name|children
index|[
literal|0
index|]
argument_list|,
name|edgeProp
argument_list|)
expr_stmt|;
name|work
operator|.
name|connect
argument_list|(
name|parent
argument_list|,
name|children
index|[
literal|1
index|]
argument_list|,
name|edgeProp
argument_list|)
expr_stmt|;
name|work
operator|.
name|disconnect
argument_list|(
name|parent
argument_list|,
name|children
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|work
operator|.
name|getChildren
argument_list|(
name|parent
argument_list|)
operator|.
name|contains
argument_list|(
name|children
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|work
operator|.
name|getChildren
argument_list|(
name|parent
argument_list|)
operator|.
name|contains
argument_list|(
name|children
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|work
operator|.
name|getRoots
argument_list|()
operator|.
name|contains
argument_list|(
name|parent
argument_list|)
operator|&&
name|work
operator|.
name|getRoots
argument_list|()
operator|.
name|contains
argument_list|(
name|children
index|[
literal|0
index|]
argument_list|)
operator|&&
operator|!
name|work
operator|.
name|getRoots
argument_list|()
operator|.
name|contains
argument_list|(
name|children
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|work
operator|.
name|getLeaves
argument_list|()
operator|.
name|contains
argument_list|(
name|parent
argument_list|)
operator|&&
name|work
operator|.
name|getLeaves
argument_list|()
operator|.
name|contains
argument_list|(
name|children
index|[
literal|0
index|]
argument_list|)
operator|&&
name|work
operator|.
name|getLeaves
argument_list|()
operator|.
name|contains
argument_list|(
name|children
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|BaseWork
name|parent
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BaseWork
name|children
index|[]
init|=
block|{
name|nodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
block|,
name|nodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
block|}
decl_stmt|;
name|TezEdgeProperty
name|edgeProp
init|=
operator|new
name|TezEdgeProperty
argument_list|(
name|EdgeType
operator|.
name|SIMPLE_EDGE
argument_list|)
decl_stmt|;
name|work
operator|.
name|connect
argument_list|(
name|parent
argument_list|,
name|children
index|[
literal|0
index|]
argument_list|,
name|edgeProp
argument_list|)
expr_stmt|;
name|work
operator|.
name|connect
argument_list|(
name|parent
argument_list|,
name|children
index|[
literal|1
index|]
argument_list|,
name|edgeProp
argument_list|)
expr_stmt|;
name|work
operator|.
name|remove
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getParents
argument_list|(
name|children
index|[
literal|0
index|]
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getParents
argument_list|(
name|children
index|[
literal|1
index|]
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getAllWork
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getRoots
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|work
operator|.
name|getLeaves
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAllWork
parameter_list|()
throws|throws
name|Exception
block|{
name|TezEdgeProperty
name|edgeProp
init|=
operator|new
name|TezEdgeProperty
argument_list|(
name|EdgeType
operator|.
name|SIMPLE_EDGE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|4
init|;
name|i
operator|>
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|work
operator|.
name|connect
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|nodes
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|,
name|edgeProp
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|BaseWork
argument_list|>
name|sorted
init|=
name|work
operator|.
name|getAllWork
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sorted
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|nodes
operator|.
name|get
argument_list|(
literal|4
operator|-
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigureJars
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MR_JAR_PROPERTY
argument_list|,
literal|"file:///tmp/foo1.jar"
argument_list|)
expr_stmt|;
name|BaseWork
name|baseWork
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|BaseWork
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|conf
operator|.
name|set
argument_list|(
name|MR_JAR_PROPERTY
argument_list|,
literal|"file:///tmp/foo2.jar"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|baseWork
argument_list|)
operator|.
name|configureJobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|work
operator|.
name|add
argument_list|(
name|baseWork
argument_list|)
expr_stmt|;
name|work
operator|.
name|configureJobConfAndExtractJars
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:///tmp/foo1.jar,file:///tmp/foo2.jar"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|MR_JAR_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigureJarsNoExtraJars
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MR_JAR_PROPERTY
argument_list|,
literal|"file:///tmp/foo1.jar"
argument_list|)
expr_stmt|;
name|BaseWork
name|baseWork
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|BaseWork
operator|.
name|class
argument_list|)
decl_stmt|;
name|work
operator|.
name|add
argument_list|(
name|baseWork
argument_list|)
expr_stmt|;
name|work
operator|.
name|configureJobConfAndExtractJars
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:///tmp/foo1.jar"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|MR_JAR_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigureJarsWithNull
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MR_JAR_PROPERTY
argument_list|,
literal|"file:///tmp/foo1.jar"
argument_list|)
expr_stmt|;
name|BaseWork
name|baseWork
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|BaseWork
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|conf
operator|.
name|unset
argument_list|(
name|MR_JAR_PROPERTY
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|baseWork
argument_list|)
operator|.
name|configureJobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|work
operator|.
name|add
argument_list|(
name|baseWork
argument_list|)
expr_stmt|;
name|work
operator|.
name|configureJobConfAndExtractJars
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:///tmp/foo1.jar"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|MR_JAR_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigureJarsStartingWithNull
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|MR_JAR_PROPERTY
argument_list|)
expr_stmt|;
name|BaseWork
name|baseWork
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|BaseWork
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|conf
operator|.
name|setStrings
argument_list|(
name|MR_JAR_PROPERTY
argument_list|,
literal|"file:///tmp/foo1.jar"
argument_list|,
literal|"file:///tmp/foo2.jar"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|baseWork
argument_list|)
operator|.
name|configureJobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|work
operator|.
name|add
argument_list|(
name|baseWork
argument_list|)
expr_stmt|;
name|work
operator|.
name|configureJobConfAndExtractJars
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:///tmp/foo1.jar,file:///tmp/foo2.jar"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|MR_JAR_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

