begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestUDFXPathUtil
block|{
annotation|@
name|Test
specifier|public
name|void
name|testEvalIllegalArgs
parameter_list|()
block|{
name|UDFXPathUtil
name|util
init|=
operator|new
name|UDFXPathUtil
argument_list|()
decl_stmt|;
comment|// null args:
name|assertNull
argument_list|(
name|util
operator|.
name|eval
argument_list|(
literal|null
argument_list|,
literal|"a/text()"
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|util
operator|.
name|eval
argument_list|(
literal|"<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>"
argument_list|,
literal|null
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|util
operator|.
name|eval
argument_list|(
literal|"<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>"
argument_list|,
literal|"a/text()"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// empty String args:
name|assertNull
argument_list|(
name|util
operator|.
name|eval
argument_list|(
literal|""
argument_list|,
literal|"a/text()"
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|util
operator|.
name|eval
argument_list|(
literal|"<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>"
argument_list|,
literal|""
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
comment|// wrong expression:
name|assertNull
argument_list|(
name|util
operator|.
name|eval
argument_list|(
literal|"<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>"
argument_list|,
literal|"a/text("
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvalPositive
parameter_list|()
block|{
name|UDFXPathUtil
name|util
init|=
operator|new
name|UDFXPathUtil
argument_list|()
decl_stmt|;
name|Object
name|result
init|=
name|util
operator|.
name|eval
argument_list|(
literal|"<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>"
argument_list|,
literal|"a/c[2]/text()"
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"c2"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|util
operator|.
name|evalBoolean
argument_list|(
literal|"<a><b>true</b><b>false</b><b>b3</b><c>c1</c><c>c2</c></a>"
argument_list|,
literal|"a/b[1]/text()"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|util
operator|.
name|evalBoolean
argument_list|(
literal|"<a><b>true</b><b>false</b><b>b3</b><c>c1</c><c>c2</c></a>"
argument_list|,
literal|"a/b[4]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|util
operator|.
name|evalString
argument_list|(
literal|"<a><b>true</b><b>false</b><b>b3</b><c>c1</c><c>c2</c></a>"
argument_list|,
literal|"a/b[3]/text()"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b3"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|util
operator|.
name|evalString
argument_list|(
literal|"<a><b>true</b><b>false</b><b>b3</b><c>c1</c><c>c2</c></a>"
argument_list|,
literal|"a/b[4]/text()"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|util
operator|.
name|evalString
argument_list|(
literal|"<a><b>true</b><b k=\"foo\">FALSE</b><b>b3</b><c>c1</c><c>c2</c></a>"
argument_list|,
literal|"a/b[2]/@k"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|util
operator|.
name|evalNumber
argument_list|(
literal|"<a><b>true</b><b>false</b><b>b3</b><c>c1</c><c>-77</c></a>"
argument_list|,
literal|"a/c[2]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|77.0d
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|util
operator|.
name|evalNumber
argument_list|(
literal|"<a><b>true</b><b k=\"foo\">FALSE</b><b>b3</b><c>c1</c><c>c2</c></a>"
argument_list|,
literal|"a/b[2]/@k"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|util
operator|.
name|evalNode
argument_list|(
literal|"<a><b>true</b><b>false</b><b>b3</b><c>c1</c><c>-77</c></a>"
argument_list|,
literal|"a/c[2]"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|Node
argument_list|)
expr_stmt|;
name|result
operator|=
name|util
operator|.
name|evalNodeList
argument_list|(
literal|"<a><b>true</b><b>false</b><b>b3</b><c>c1</c><c>-77</c></a>"
argument_list|,
literal|"a/*"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|NodeList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
operator|(
operator|(
name|NodeList
operator|)
name|result
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

