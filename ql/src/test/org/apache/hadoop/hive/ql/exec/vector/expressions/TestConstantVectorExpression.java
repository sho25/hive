begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|VectorizedRowGroupGenUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test vector expressions with constants.  */
end_comment

begin_class
specifier|public
class|class
name|TestConstantVectorExpression
block|{
annotation|@
name|Test
specifier|public
name|void
name|testConstantExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|ConstantVectorExpression
name|longCve
init|=
operator|new
name|ConstantVectorExpression
argument_list|(
literal|0
argument_list|,
literal|17
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
decl_stmt|;
name|ConstantVectorExpression
name|doubleCve
init|=
operator|new
name|ConstantVectorExpression
argument_list|(
literal|1
argument_list|,
literal|17.34
argument_list|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|)
decl_stmt|;
name|String
name|str
init|=
literal|"alpha"
decl_stmt|;
name|ConstantVectorExpression
name|bytesCve
init|=
operator|new
name|ConstantVectorExpression
argument_list|(
literal|2
argument_list|,
name|str
operator|.
name|getBytes
argument_list|()
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
decl_stmt|;
name|HiveDecimal
name|decVal
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"25.8"
argument_list|)
decl_stmt|;
name|ConstantVectorExpression
name|decimalCve
init|=
operator|new
name|ConstantVectorExpression
argument_list|(
literal|3
argument_list|,
name|decVal
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|)
decl_stmt|;
name|ConstantVectorExpression
name|nullCve
init|=
operator|new
name|ConstantVectorExpression
argument_list|(
literal|4
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|size
init|=
literal|20
decl_stmt|;
name|VectorizedRowBatch
name|vrg
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|getVectorizedRowBatch
argument_list|(
name|size
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|vrg
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|DoubleColumnVector
name|dcv
init|=
operator|new
name|DoubleColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|bcv
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|DecimalColumnVector
name|dv
init|=
operator|new
name|DecimalColumnVector
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|bcvn
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|vrg
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|dcv
expr_stmt|;
name|vrg
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|bcv
expr_stmt|;
name|vrg
operator|.
name|cols
index|[
literal|3
index|]
operator|=
name|dv
expr_stmt|;
name|vrg
operator|.
name|cols
index|[
literal|4
index|]
operator|=
name|bcvn
expr_stmt|;
name|longCve
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
name|doubleCve
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
name|bytesCve
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
name|decimalCve
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
name|nullCve
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lcv
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dcv
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bcv
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|lcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|17.34
operator|==
name|dcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bcvn
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bcvn
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|bcvn
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|byte
index|[]
name|alphaBytes
init|=
literal|"alpha"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|bcv
operator|.
name|length
index|[
literal|0
index|]
operator|==
name|alphaBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sameFirstKBytes
argument_list|(
name|alphaBytes
argument_list|,
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|alphaBytes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|// Evaluation of the bytes Constant Vector Expression after the vector is
comment|// modified.
operator|(
call|(
name|BytesColumnVector
call|)
argument_list|(
name|vrg
operator|.
name|cols
index|[
literal|2
index|]
argument_list|)
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|"beta"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|bytesCve
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bcv
operator|.
name|length
index|[
literal|0
index|]
operator|==
name|alphaBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sameFirstKBytes
argument_list|(
name|alphaBytes
argument_list|,
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|alphaBytes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|25.8
operator|==
name|dv
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Evaluation of the decimal Constant Vector Expression after the vector is
comment|// modified.
operator|(
call|(
name|DecimalColumnVector
call|)
argument_list|(
name|vrg
operator|.
name|cols
index|[
literal|3
index|]
argument_list|)
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"39.7"
argument_list|)
argument_list|)
expr_stmt|;
name|decimalCve
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|25.8
operator|==
name|dv
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|sameFirstKBytes
parameter_list|(
name|byte
index|[]
name|o1
parameter_list|,
name|byte
index|[]
name|o2
parameter_list|,
name|int
name|k
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|k
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|o1
index|[
name|i
index|]
operator|!=
name|o2
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

