begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|VectorizedRowGroupGenUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestConstantVectorExpression
block|{
annotation|@
name|Test
specifier|public
name|void
name|testConstantExpression
parameter_list|()
block|{
name|ConstantVectorExpression
name|longCve
init|=
operator|new
name|ConstantVectorExpression
argument_list|(
literal|0
argument_list|,
literal|17
argument_list|)
decl_stmt|;
name|ConstantVectorExpression
name|doubleCve
init|=
operator|new
name|ConstantVectorExpression
argument_list|(
literal|1
argument_list|,
literal|17.34
argument_list|)
decl_stmt|;
name|ConstantVectorExpression
name|bytesCve
init|=
operator|new
name|ConstantVectorExpression
argument_list|(
literal|2
argument_list|,
literal|"alpha"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|size
init|=
literal|20
decl_stmt|;
name|VectorizedRowBatch
name|vrg
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|getVectorizedRowBatch
argument_list|(
name|size
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|vrg
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|DoubleColumnVector
name|dcv
init|=
operator|new
name|DoubleColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|bcv
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|vrg
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|dcv
expr_stmt|;
name|vrg
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|bcv
expr_stmt|;
name|longCve
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
name|doubleCve
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
name|bytesCve
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lcv
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dcv
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bcv
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|lcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|17.34
operator|==
name|dcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
literal|"alpha"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

