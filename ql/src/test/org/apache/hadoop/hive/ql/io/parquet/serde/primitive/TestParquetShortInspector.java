begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|serde
operator|.
name|primitive
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestParquetShortInspector
block|{
specifier|private
name|ParquetShortInspector
name|inspector
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|inspector
operator|=
operator|new
name|ParquetShortInspector
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShortWritable
parameter_list|()
block|{
name|ShortWritable
name|obj
init|=
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|obj
argument_list|,
name|inspector
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
name|inspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntWritable
parameter_list|()
block|{
name|IntWritable
name|obj
init|=
operator|new
name|IntWritable
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|10
argument_list|)
argument_list|,
name|inspector
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|10
argument_list|,
name|inspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNull
parameter_list|()
block|{
name|assertNull
argument_list|(
name|inspector
operator|.
name|getPrimitiveWritableObject
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|inspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreate
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|8
argument_list|)
argument_list|,
name|inspector
operator|.
name|create
argument_list|(
operator|(
name|short
operator|)
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSet
parameter_list|()
block|{
name|ShortWritable
name|obj
init|=
operator|new
name|ShortWritable
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|12
argument_list|)
argument_list|,
name|inspector
operator|.
name|set
argument_list|(
name|obj
argument_list|,
operator|(
name|short
operator|)
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|ShortWritable
name|obj
init|=
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|15
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|15
argument_list|,
name|inspector
operator|.
name|get
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

