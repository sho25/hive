begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_comment
comment|/**  * TestOperators.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestStatsPublisher
extends|extends
name|TestCase
block|{
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|String
name|statsImplementationClass
decl_stmt|;
specifier|public
name|TestStatsPublisher
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"StatPublisher Test"
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|JobConf
argument_list|(
name|TestStatsPublisher
operator|.
name|class
argument_list|)
expr_stmt|;
name|statsImplementationClass
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSDBCLASS
argument_list|)
expr_stmt|;
name|StatsFactory
operator|.
name|setImplementation
argument_list|(
name|statsImplementationClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStatsPublisherOneStat
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"StatsPublisher - one stat published per key - aggregating matching key"
argument_list|)
expr_stmt|;
comment|// instantiate stats publisher
name|StatsPublisher
name|statsPublisher
init|=
name|Utilities
operator|.
name|getStatsPublisher
argument_list|(
operator|(
name|JobConf
operator|)
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|statsPublisher
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|connect
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// instantiate stats aggregator
name|StatsAggregator
name|statsAggregator
init|=
name|StatsFactory
operator|.
name|getStatsAggregator
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|statsAggregator
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsAggregator
operator|.
name|connect
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// publish stats
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00000"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"200"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00001"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"400"
argument_list|)
argument_list|)
expr_stmt|;
comment|// aggregate existing stats for prefixes
name|String
name|rows0
init|=
name|statsAggregator
operator|.
name|aggregateStats
argument_list|(
literal|"file_00000"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"200"
argument_list|,
name|rows0
argument_list|)
expr_stmt|;
name|String
name|rows1
init|=
name|statsAggregator
operator|.
name|aggregateStats
argument_list|(
literal|"file_00001"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"400"
argument_list|,
name|rows1
argument_list|)
expr_stmt|;
comment|// close connections
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|closeConnection
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsAggregator
operator|.
name|closeConnection
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"StatsPublisher - one stat published per key - aggregating matching key - OK"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testStatsPublisher
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"StatsPublisher - basic functionality"
argument_list|)
expr_stmt|;
comment|// instantiate stats publisher
name|StatsPublisher
name|statsPublisher
init|=
name|Utilities
operator|.
name|getStatsPublisher
argument_list|(
operator|(
name|JobConf
operator|)
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|statsPublisher
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|connect
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// instantiate stats aggregator
name|StatsAggregator
name|statsAggregator
init|=
name|StatsFactory
operator|.
name|getStatsAggregator
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|statsAggregator
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsAggregator
operator|.
name|connect
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// publish stats
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00000_a"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"200"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00000_b"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"300"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00001_a"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"400"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00001_b"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"500"
argument_list|)
argument_list|)
expr_stmt|;
comment|// aggregate existing stats for prefixes
name|String
name|rows0
init|=
name|statsAggregator
operator|.
name|aggregateStats
argument_list|(
literal|"file_00000"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"500"
argument_list|,
name|rows0
argument_list|)
expr_stmt|;
name|String
name|rows1
init|=
name|statsAggregator
operator|.
name|aggregateStats
argument_list|(
literal|"file_00001"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"900"
argument_list|,
name|rows1
argument_list|)
expr_stmt|;
comment|// aggregate non-existent stats
name|String
name|rowsX
init|=
name|statsAggregator
operator|.
name|aggregateStats
argument_list|(
literal|"file_00002"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|rowsX
argument_list|)
expr_stmt|;
comment|// close connections
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|closeConnection
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsAggregator
operator|.
name|closeConnection
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"StatsPublisher - basic functionality - OK"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testStatsPublisherMultipleUpdates
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"StatsPublisher - multiple updates"
argument_list|)
expr_stmt|;
comment|// instantiate stats publisher
name|StatsPublisher
name|statsPublisher
init|=
name|Utilities
operator|.
name|getStatsPublisher
argument_list|(
operator|(
name|JobConf
operator|)
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|statsPublisher
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|connect
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// instantiate stats aggregator
name|StatsAggregator
name|statsAggregator
init|=
name|StatsFactory
operator|.
name|getStatsAggregator
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|statsAggregator
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsAggregator
operator|.
name|connect
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// publish stats
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00000_a"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"200"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00000_b"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"300"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00001_a"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"400"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00001_b"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"500"
argument_list|)
argument_list|)
expr_stmt|;
comment|// repetitive update - should not change the stored value - as the published values are
comment|// smaller than the current ones
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00000_a"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00000_b"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"150"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should change the stored value - the published values are greater than the current values
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00001_a"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"500"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00001_b"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"600"
argument_list|)
argument_list|)
expr_stmt|;
comment|// aggregate stats
name|String
name|rows0
init|=
name|statsAggregator
operator|.
name|aggregateStats
argument_list|(
literal|"file_00000"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"500"
argument_list|,
name|rows0
argument_list|)
expr_stmt|;
name|String
name|rows1
init|=
name|statsAggregator
operator|.
name|aggregateStats
argument_list|(
literal|"file_00001"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1100"
argument_list|,
name|rows1
argument_list|)
expr_stmt|;
comment|// close connections
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|closeConnection
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsAggregator
operator|.
name|closeConnection
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"StatsPublisher - multiple updates - OK"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testStatsPublisherAfterAggregationCleanUp
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"StatsPublisher - clean-up after aggregation"
argument_list|)
expr_stmt|;
comment|// instantiate stats publisher
name|StatsPublisher
name|statsPublisher
init|=
name|Utilities
operator|.
name|getStatsPublisher
argument_list|(
operator|(
name|JobConf
operator|)
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|statsPublisher
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|connect
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// instantiate stats aggregator
name|StatsAggregator
name|statsAggregator
init|=
name|StatsFactory
operator|.
name|getStatsAggregator
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|statsAggregator
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsAggregator
operator|.
name|connect
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// publish stats
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00000_a"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"200"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00000_b"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"300"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00001_a"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"400"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00001_b"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"500"
argument_list|)
argument_list|)
expr_stmt|;
comment|// aggregate stats
name|String
name|rows0
init|=
name|statsAggregator
operator|.
name|aggregateStats
argument_list|(
literal|"file_00000"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"500"
argument_list|,
name|rows0
argument_list|)
expr_stmt|;
name|String
name|rows1
init|=
name|statsAggregator
operator|.
name|aggregateStats
argument_list|(
literal|"file_00001"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"900"
argument_list|,
name|rows1
argument_list|)
expr_stmt|;
comment|// now the table should be empty
name|rows0
operator|=
name|statsAggregator
operator|.
name|aggregateStats
argument_list|(
literal|"file_00000"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|rows0
argument_list|)
expr_stmt|;
name|rows1
operator|=
name|statsAggregator
operator|.
name|aggregateStats
argument_list|(
literal|"file_00001"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|rows1
argument_list|)
expr_stmt|;
comment|// close connections
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|closeConnection
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsAggregator
operator|.
name|closeConnection
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"StatsPublisher - clean-up after aggregation - OK"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testStatsAggregatorCleanUp
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"StatsAggregator - clean-up"
argument_list|)
expr_stmt|;
comment|// instantiate stats publisher
name|StatsPublisher
name|statsPublisher
init|=
name|Utilities
operator|.
name|getStatsPublisher
argument_list|(
operator|(
name|JobConf
operator|)
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|statsPublisher
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|connect
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// instantiate stats aggregator
name|StatsAggregator
name|statsAggregator
init|=
name|StatsFactory
operator|.
name|getStatsAggregator
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|statsAggregator
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsAggregator
operator|.
name|connect
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// publish stats
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00000_a"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"200"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|publishStat
argument_list|(
literal|"file_00000_b"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"300"
argument_list|)
argument_list|)
expr_stmt|;
comment|// cleanUp (closes the connection)
name|assertTrue
argument_list|(
name|statsAggregator
operator|.
name|cleanUp
argument_list|(
literal|"file_00000"
argument_list|)
argument_list|)
expr_stmt|;
comment|// now the connection should be closed (aggregator will report an error)
name|String
name|rows0
init|=
name|statsAggregator
operator|.
name|aggregateStats
argument_list|(
literal|"file_00000"
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|rows0
argument_list|)
expr_stmt|;
comment|// close connections
name|assertTrue
argument_list|(
name|statsPublisher
operator|.
name|closeConnection
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsAggregator
operator|.
name|closeConnection
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"StatsAggregator - clean-up - OK"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

