begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringColEqualStringScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringColLessStringScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringColLessStringCol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringColGreaterEqualStringScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Test vectorized expression and filter evaluation for strings.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorStringExpressions
block|{
specifier|private
specifier|static
name|byte
index|[]
name|red
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|redred
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|red2
decl_stmt|;
comment|// second copy of red, different object
specifier|private
specifier|static
name|byte
index|[]
name|green
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|greenred
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|redgreen
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|greengreen
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|blue
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|emptyString
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|mixedUp
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|mixedUpLower
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|mixedUpUpper
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|multiByte
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|mixPercentPattern
decl_stmt|;
static|static
block|{
try|try
block|{
name|blue
operator|=
literal|"blue"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|red
operator|=
literal|"red"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|redred
operator|=
literal|"redred"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|green
operator|=
literal|"green"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|greenred
operator|=
literal|"greenred"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|redgreen
operator|=
literal|"redgreen"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|greengreen
operator|=
literal|"greengreen"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|emptyString
operator|=
literal|""
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|mixedUp
operator|=
literal|"mixedUp"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|mixedUpLower
operator|=
literal|"mixedup"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|mixedUpUpper
operator|=
literal|"MIXEDUP"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|mixPercentPattern
operator|=
literal|"mix%"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
comment|// for use as wildcard pattern to test LIKE
name|multiByte
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|addMultiByteChars
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|red2
operator|=
operator|new
name|byte
index|[
name|red
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
name|red2
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// add some multi-byte characters to test length routine later.
comment|// total characters = 4; byte length = 10
specifier|static
name|void
name|addMultiByteChars
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x41
expr_stmt|;
comment|// letter "A" (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xC3
expr_stmt|;
comment|// Latin capital A with grave (2 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x80
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE2
expr_stmt|;
comment|// Euro sign (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x82
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xAC
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xF0
expr_stmt|;
comment|// Asian character U+24B62 (4 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA4
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xAD
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA2
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Load a BytesColumnVector by copying in large data, enough to force
comment|// the buffer to expand.
specifier|public
name|void
name|testLoadBytesColumnVectorByValueLargeData
parameter_list|()
block|{
name|BytesColumnVector
name|bcv
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|bcv
operator|.
name|initBuffer
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// initialize with estimated element size 10
name|String
name|s
init|=
literal|"0123456789"
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|length
argument_list|()
operator|<
literal|500
condition|)
block|{
name|s
operator|+=
name|s
expr_stmt|;
block|}
name|byte
index|[]
name|b
init|=
literal|null
decl_stmt|;
try|try
block|{
name|b
operator|=
name|s
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|bcv
operator|.
name|setVal
argument_list|(
name|i
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bcv
operator|.
name|bufferSize
argument_list|()
operator|>=
name|b
operator|.
name|length
operator|*
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// set values by reference, copy the data out, and verify equality
specifier|public
name|void
name|testLoadBytesColumnVectorByRef
parameter_list|()
block|{
name|BytesColumnVector
name|bcv
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|String
name|s
init|=
literal|"red"
decl_stmt|;
name|byte
index|[]
name|b
init|=
literal|null
decl_stmt|;
try|try
block|{
name|b
operator|=
name|s
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|bcv
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// verify
name|byte
index|[]
name|v
init|=
operator|new
name|byte
index|[
name|b
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bcv
operator|.
name|length
index|[
name|i
index|]
operator|==
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bcv
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|bcv
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|v
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|b
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
comment|// Test string column to string literal comparison
specifier|public
name|void
name|testStringColCompareStringScalarFilter
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
name|expr
operator|=
operator|new
name|FilterStringColEqualStringScalar
argument_list|(
literal|0
argument_list|,
name|red2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// only red qualifies, and it's in entry 0
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterStringColLessStringScalar
argument_list|(
literal|0
argument_list|,
name|red2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// only green qualifies, and it's in entry 1
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterStringColGreaterEqualStringScalar
argument_list|(
literal|0
argument_list|,
name|green
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// green and red qualify
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|1
index|]
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringColCompareStringColFilter
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
decl_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
comment|/* input data      *       * col0       col1      * ===============      * blue       red      * green      green      * red        blue      * NULL       red            col0 data is empty string if we un-set NULL property      */
comment|// nulls possible on left, right
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterStringColLessStringCol
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// no nulls possible
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// nulls on left, no nulls on right
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// nulls on right, no nulls on left
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Now vary isRepeating
comment|// nulls possible on left, right
comment|// left repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// right repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// first 2 qualify
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// left and right repeat
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// Now vary isRepeating
comment|// nulls possible only on left
comment|// left repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// left repeats and is null
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// right repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// left and right repeat
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// Now vary isRepeating
comment|// nulls possible only on right
comment|// left repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// right repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// right repeats and is null
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// left and right repeat
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// left and right repeat and right is null
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
name|VectorizedRowBatch
name|makeStringBatch
parameter_list|()
block|{
comment|// create a batch with one string ("Bytes") column
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|v
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
comment|// to hold output if needed
comment|/*      * Add these 3 values:      *      * red      * green      * NULL      */
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|green
argument_list|,
literal|0
argument_list|,
name|green
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|3
expr_stmt|;
return|return
name|batch
return|;
block|}
name|VectorizedRowBatch
name|makeStringBatchMixedCase
parameter_list|()
block|{
comment|// create a batch with two string ("Bytes") columns
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|v
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|BytesColumnVector
name|outV
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
comment|/*      * Add these 3 values:      *      * mixedUp      * green      * NULL      */
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|mixedUp
argument_list|,
literal|0
argument_list|,
name|mixedUp
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|green
argument_list|,
literal|0
argument_list|,
name|green
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|3
expr_stmt|;
return|return
name|batch
return|;
block|}
name|VectorizedRowBatch
name|makeStringBatchMixedCharSize
parameter_list|()
block|{
comment|// create a new batch with one char column (for input) and one long column (for output)
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|v
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|LongColumnVector
name|outV
init|=
operator|new
name|LongColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
comment|/*      * Add these 3 values:      *      * mixedUp      * green      * NULL      *<4 char string with mult-byte chars>      */
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|mixedUp
argument_list|,
literal|0
argument_list|,
name|mixedUp
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|green
argument_list|,
literal|0
argument_list|,
name|green
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|3
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|4
expr_stmt|;
return|return
name|batch
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColLower
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatchMixedCase
argument_list|()
decl_stmt|;
name|StringLower
name|expr
init|=
operator|new
name|StringLower
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|mixedUpLower
argument_list|,
literal|0
argument_list|,
name|mixedUpLower
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|int
name|cmp2
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|green
argument_list|,
literal|0
argument_list|,
name|green
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
comment|// no nulls, not repeating
name|batch
operator|=
name|makeStringBatchMixedCase
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|mixedUpLower
argument_list|,
literal|0
argument_list|,
name|mixedUpLower
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// has nulls, is repeating
name|batch
operator|=
name|makeStringBatchMixedCase
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|mixedUpLower
argument_list|,
literal|0
argument_list|,
name|mixedUpLower
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// no nulls, is repeating
name|batch
operator|=
name|makeStringBatchMixedCase
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|mixedUpLower
argument_list|,
literal|0
argument_list|,
name|mixedUpLower
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColUpper
parameter_list|()
block|{
comment|// no nulls, not repeating
comment|/* We don't test all the combinations because (at least currently)      * the logic is inherited to be the same as testColLower, which checks all the cases).      */
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatchMixedCase
argument_list|()
decl_stmt|;
name|StringUpper
name|expr
init|=
operator|new
name|StringUpper
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|mixedUpUpper
argument_list|,
literal|0
argument_list|,
name|mixedUpUpper
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringLength
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatchMixedCharSize
argument_list|()
decl_stmt|;
name|StringLength
name|expr
init|=
operator|new
name|StringLength
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|LongColumnVector
name|outCol
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// length of green is 5
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// this one has the mixed-size chars
comment|// no nulls, not repeating
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// this one has the mixed-size chars
comment|// has nulls, is repeating
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// length of "mixedUp"
comment|// no nulls, is repeating
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// length of "mixedUp"
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VectorizedRowBatch
name|makeStringBatch2In1Out
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|v
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|BytesColumnVector
name|v2
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|v2
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|green
argument_list|,
literal|0
argument_list|,
name|green
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|)
expr_stmt|;
name|v2
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|green
argument_list|,
literal|0
argument_list|,
name|green
operator|.
name|length
argument_list|)
expr_stmt|;
name|v2
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|)
expr_stmt|;
name|v2
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|v2
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|3
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|private
name|VectorizedRowBatch
name|makeStringBatchForColColCompare
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|v
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|BytesColumnVector
name|v2
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|v2
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|green
argument_list|,
literal|0
argument_list|,
name|green
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|3
argument_list|,
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|)
expr_stmt|;
name|v2
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|green
argument_list|,
literal|0
argument_list|,
name|green
operator|.
name|length
argument_list|)
expr_stmt|;
name|v2
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
expr_stmt|;
name|v2
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|setRef
argument_list|(
literal|3
argument_list|,
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|)
expr_stmt|;
name|v2
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|4
expr_stmt|;
return|return
name|batch
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringLike
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
decl_stmt|;
name|Text
name|pattern
decl_stmt|;
name|int
name|initialBatchSize
decl_stmt|;
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|pattern
operator|=
operator|new
name|Text
argument_list|(
name|mixPercentPattern
argument_list|)
expr_stmt|;
name|FilterStringColLikeStringScalar
name|expr
init|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// verify that the beginning entry is the only one that matches
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// no nulls, not repeating
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// verify that the beginning entry is the only one that matches
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// has nulls, is repeating
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|initialBatchSize
operator|=
name|batch
operator|.
name|size
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// all rows qualify
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initialBatchSize
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// same, but repeating value is null
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// no rows qualify
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// no nulls, is repeating
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|initialBatchSize
operator|=
name|batch
operator|.
name|size
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// all rows qualify
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initialBatchSize
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStringLikePatternType
parameter_list|()
block|{
name|FilterStringColLikeStringScalar
name|expr
decl_stmt|;
comment|// BEGIN pattern
name|expr
operator|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|Text
argument_list|(
literal|"abc%"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FilterStringColLikeStringScalar
operator|.
name|PatternType
operator|.
name|BEGIN
argument_list|,
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// END pattern
name|expr
operator|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|Text
argument_list|(
literal|"%abc"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FilterStringColLikeStringScalar
operator|.
name|PatternType
operator|.
name|END
argument_list|,
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// MIDDLE pattern
name|expr
operator|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|Text
argument_list|(
literal|"%abc%"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FilterStringColLikeStringScalar
operator|.
name|PatternType
operator|.
name|MIDDLE
argument_list|,
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// COMPLEX pattern
name|expr
operator|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|Text
argument_list|(
literal|"%abc%de"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FilterStringColLikeStringScalar
operator|.
name|PatternType
operator|.
name|COMPLEX
argument_list|,
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// NONE pattern
name|expr
operator|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|Text
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FilterStringColLikeStringScalar
operator|.
name|PatternType
operator|.
name|NONE
argument_list|,
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStringLikeMultiByte
parameter_list|()
block|{
name|FilterStringColLikeStringScalar
name|expr
decl_stmt|;
name|VectorizedRowBatch
name|batch
decl_stmt|;
comment|// verify that a multi byte LIKE expression matches a matching string
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|Text
argument_list|(
literal|"%"
operator|+
name|multiByte
operator|+
literal|"%"
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|size
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// verify that a multi byte LIKE expression doesn't match a non-matching string
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|Text
argument_list|(
literal|"%"
operator|+
name|multiByte
operator|+
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColConcatScalar
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|StringConcatColScalar
name|expr
init|=
operator|new
name|StringConcatColScalar
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|red
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|int
name|cmp2
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|greenred
argument_list|,
literal|0
argument_list|,
name|greenred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// no nulls, not repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|cmp2
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|greenred
argument_list|,
literal|0
argument_list|,
name|greenred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|int
name|cmp3
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// has nulls, is repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// no nulls, is repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScalarConcatCol
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|StringConcatScalarCol
name|expr
init|=
operator|new
name|StringConcatScalarCol
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|int
name|cmp2
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// no nulls, not repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|cmp2
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|int
name|cmp3
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// has nulls, is repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// no nulls, is repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColConcatCol
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch2In1Out
argument_list|()
decl_stmt|;
name|StringConcatColCol
name|expr
init|=
operator|new
name|StringConcatColCol
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|int
name|cmp2
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|greengreen
argument_list|,
literal|0
argument_list|,
name|greengreen
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// no nulls, not repeating
name|batch
operator|=
name|makeStringBatch2In1Out
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|cmp2
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|greengreen
argument_list|,
literal|0
argument_list|,
name|greengreen
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|int
name|cmp3
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// has nulls, is repeating
name|batch
operator|=
name|makeStringBatch2In1Out
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// only left input repeating
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// same, but repeating input is not null
name|batch
operator|=
name|makeStringBatch2In1Out
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|//TEST FAILED
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch2In1Out
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// only right input repeating
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch2In1Out
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// both inputs repeat
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// no nulls, is repeating
name|batch
operator|=
name|makeStringBatch2In1Out
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// only right input repeating and has no nulls
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|greenred
argument_list|,
literal|0
argument_list|,
name|greenred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
comment|// try again with left input also having no nulls
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch2In1Out
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// only left input repeating and has no nulls
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch2In1Out
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// both inputs repeat
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

