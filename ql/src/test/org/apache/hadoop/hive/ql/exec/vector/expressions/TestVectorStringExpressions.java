begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|CharScalarEqualStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterCharScalarEqualStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterCharScalarGreaterStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterCharScalarLessEqualStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringGroupColEqualCharScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringGroupColEqualStringScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringGroupColEqualVarCharScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringGroupColGreaterEqualCharScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringGroupColGreaterEqualStringScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringGroupColGreaterEqualVarCharScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringGroupColLessCharScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringGroupColLessStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringGroupColLessStringScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringGroupColLessVarCharScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringScalarEqualStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringScalarGreaterStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterStringScalarLessEqualStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterVarCharScalarEqualStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterVarCharScalarGreaterStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FilterVarCharScalarLessEqualStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|StringGroupColEqualCharScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|StringGroupColEqualStringScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|StringGroupColEqualVarCharScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|StringGroupColLessStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|StringScalarEqualStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|VarCharScalarEqualStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|VectorizedRowGroupGenUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLike
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test vectorized expression and filter evaluation for strings.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorStringExpressions
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestVectorStringExpressions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|red
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|redred
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|red2
decl_stmt|;
comment|// second copy of red, different object
specifier|private
specifier|static
name|byte
index|[]
name|green
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|greenred
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|redgreen
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|greengreen
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|blue
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|emptyString
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|mixedUp
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|mixedUpLower
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|mixedUpUpper
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|multiByte
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|mixPercentPattern
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|blanksLeft
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|blanksRight
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|blanksBoth
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|blankString
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|blankRanges
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ascii_sentence
decl_stmt|;
static|static
block|{
try|try
block|{
name|blue
operator|=
literal|"blue"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|red
operator|=
literal|"red"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|redred
operator|=
literal|"redred"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|green
operator|=
literal|"green"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|greenred
operator|=
literal|"greenred"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|redgreen
operator|=
literal|"redgreen"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|greengreen
operator|=
literal|"greengreen"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|emptyString
operator|=
literal|""
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|mixedUp
operator|=
literal|"mixedUp"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|mixedUpLower
operator|=
literal|"mixedup"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|mixedUpUpper
operator|=
literal|"MIXEDUP"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|mixPercentPattern
operator|=
literal|"mix%"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
comment|// for use as wildcard pattern to test LIKE
name|multiByte
operator|=
operator|new
name|byte
index|[
literal|10
index|]
expr_stmt|;
name|addMultiByteChars
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|blanksLeft
operator|=
literal|"  foo"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|blanksRight
operator|=
literal|"foo  "
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|blanksBoth
operator|=
literal|"  foo  "
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|blankString
operator|=
literal|"  "
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|blankRanges
operator|=
literal|"   more  than a    bargain    "
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
comment|//012345678901234567890123456789
name|ascii_sentence
operator|=
literal|"The fox trotted over the fence."
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
comment|//0123456789012345678901234567890
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|red2
operator|=
operator|new
name|byte
index|[
name|red
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
name|red2
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// add some multi-byte characters to test length routine later.
comment|// total characters = 4; byte length = 10
specifier|static
name|void
name|addMultiByteChars
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x41
expr_stmt|;
comment|// letter "A" (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xC3
expr_stmt|;
comment|// Latin capital A with grave (2 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x80
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE2
expr_stmt|;
comment|// Euro sign (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x82
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xAC
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xF0
expr_stmt|;
comment|// Asian character U+24B62 (4 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA4
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xAD
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA2
expr_stmt|;
block|}
comment|//-------------------------------------------------------------
comment|// total characters = 2; byte length = 3
specifier|static
name|void
name|addMultiByteCharLeftPadded1_1
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xD0
expr_stmt|;
comment|// Cyrillic Capital DJE U+402 (2 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x82
expr_stmt|;
block|}
comment|// total characters = 3; byte length = 9
specifier|static
name|void
name|addMultiByteCharLeftPadded1_2
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xF0
expr_stmt|;
comment|// Smiling Face with Open Mouth and Smiling Eyes U+1F604 (4 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x9F
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x98
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x84
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xF0
expr_stmt|;
comment|// Grimacing Face U+1F62C (4 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x9F
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x98
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xAC
expr_stmt|;
block|}
comment|// total characters = 4; byte length = 6
specifier|static
name|void
name|addMultiByteCharLeftPadded3_1
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE4
expr_stmt|;
comment|// Asian character U+4824 (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA0
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA4
expr_stmt|;
block|}
comment|//-------------------------------------------------------------
comment|// total characters = 2; byte length = 4
specifier|static
name|void
name|addMultiByteCharRightPadded1_1
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE0
expr_stmt|;
comment|// Tamil Om U+0BD0 (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xAF
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x90
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
block|}
comment|// total characters = 3; byte length = 5
specifier|static
name|void
name|addMultiByteCharRightPadded1_2
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xEA
expr_stmt|;
comment|// Va Syllable MEE U+A521 (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x94
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA1
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x5A
expr_stmt|;
comment|// Latin Capital Letter Z U+005A (1 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
block|}
comment|// total characters = 4; byte length = 9
specifier|static
name|void
name|addMultiByteCharRightPadded1_3
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xCC
expr_stmt|;
comment|// COMBINING ACUTE ACENT U+0301 (2 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x81
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE0
expr_stmt|;
comment|// DEVENAGARI LETTER KA U+0915 (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA4
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x95
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE0
expr_stmt|;
comment|// DEVENAGARI SIGN VIRAMA U+094D (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA5
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x8D
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
block|}
comment|// total characters = 10; byte length = 26
specifier|static
name|int
name|addMultiByteCharSentenceOne
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|int
name|i
init|=
name|start
decl_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE1
expr_stmt|;
comment|// NEW TAI LUE LETTER THA U+1992 (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA6
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x92
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE1
expr_stmt|;
comment|// NEW TAI LUE LETTER LOW XA U+1986 (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA6
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x86
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE1
expr_stmt|;
comment|// NEW TAI LUE LETTER HIGH MA U+1996 (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA6
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x96
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE1
expr_stmt|;
comment|// NEW TAI LUE LETTER LOW QA U+1981 (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA6
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x81
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE1
expr_stmt|;
comment|// NEW TAI LUE LETTER LOW BA U+19A5 (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA6
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA5
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE1
expr_stmt|;
comment|// NEW TAI LUE LETTER HIGH LA U+199C (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA6
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x9C
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE1
expr_stmt|;
comment|// NEW TAI LUE LETTER LOW KVA U+19A8 (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA6
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA8
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE1
expr_stmt|;
comment|// NEW TAI LUE LETTER LOW FA U+199D (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA6
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x9D
expr_stmt|;
return|return
name|i
return|;
block|}
comment|// total characters = 13; byte length = 24
specifier|static
name|int
name|addMultiByteCharSentenceTwo
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|int
name|i
init|=
name|start
decl_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xC9
expr_stmt|;
comment|// LATIN SMALL LETTER TURNED A U+0250 (2 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x90
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xC9
expr_stmt|;
comment|// LATIN SMALL LETTER GAMMA U+0263 (2 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA3
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xC9
expr_stmt|;
comment|// LATIN SMALL LETTER TURNED M U+026F (2 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xAF
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xCA
expr_stmt|;
comment|// LATIN SMALL LETTER S WITH HOOK U+0282 (2 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x82
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xCA
expr_stmt|;
comment|// LATIN LETTER SMALL CAPITAL L U+029F (2 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x9F
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xCB
expr_stmt|;
comment|// MODIFIER LETTER TRIANGULAR COLON U+02D0 (2 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x90
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xCB
expr_stmt|;
comment|// RING ABOVE U+02DA (2 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x9A
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xCB
expr_stmt|;
comment|// MODIFIER LETTER SMALL L U+02E1 (2 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA1
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xCB
expr_stmt|;
comment|// MODIFIER LETTER SMALL X U+02E3 (2 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA3
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xCB
expr_stmt|;
comment|// MODIFIER LETTER UP ARROWHEAD U+02C4 (2 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x84
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x2E
expr_stmt|;
comment|// FULL STOP "." (1 byte)
return|return
name|i
return|;
block|}
comment|// total characters = 17; byte length = 30
specifier|static
name|int
name|addMultiByteCharSentenceBlankRanges
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|int
name|i
init|=
name|start
decl_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xF0
expr_stmt|;
comment|// INSCRIPTIONAL YODH U+10B49 (4 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x90
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xAD
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x89
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE1
expr_stmt|;
comment|// NEW TAI LUE LETTER LOW FA U+199D (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xA6
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x9D
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x2D
expr_stmt|;
comment|// hyphen-minus "-" U-002D (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x60
expr_stmt|;
comment|// grave accent "-" U-0060 (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE2
expr_stmt|;
comment|// BLACK SUN WITH RAYS U+2600 (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x98
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x80
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE2
expr_stmt|;
comment|// BALLOT BOX WITH X U+2612 (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x98
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x92
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE2
expr_stmt|;
comment|// WHITE START U+2606 (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x98
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x86
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xE2
expr_stmt|;
comment|// WHITE FLAG WITH HORIZONTAL MIDDLE BLACK STRIPE U+26FF (3 bytes)
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x9B
expr_stmt|;
name|b
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xBF
expr_stmt|;
return|return
name|i
return|;
block|}
specifier|static
name|int
name|addPads
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|int
name|i
init|=
name|start
decl_stmt|;
name|int
name|end
init|=
name|start
operator|+
name|count
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|b
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
literal|0x20
expr_stmt|;
comment|// blank " " (1 byte)
block|}
return|return
name|i
return|;
block|}
specifier|private
name|boolean
name|vectorEqual
parameter_list|(
name|BytesColumnVector
name|vector
parameter_list|,
name|int
name|i
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|byte
index|[]
name|bytesSlice
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|bytesSlice
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|int
name|vectorLength
init|=
name|vector
operator|.
name|length
index|[
name|i
index|]
decl_stmt|;
name|byte
index|[]
name|vectorSlice
init|=
operator|new
name|byte
index|[
name|vectorLength
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|vectorSlice
argument_list|,
literal|0
argument_list|,
name|vectorLength
argument_list|)
expr_stmt|;
name|boolean
name|equals
init|=
name|Arrays
operator|.
name|equals
argument_list|(
name|bytesSlice
argument_list|,
name|vectorSlice
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|equals
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"vectorEqual offset "
operator|+
name|offset
operator|+
literal|" length "
operator|+
name|length
operator|+
literal|" vectorSlice.length "
operator|+
name|vectorSlice
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"vectorEqual bytesSlice "
operator|+
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|bytesSlice
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"vectorEqual vectorSlice "
operator|+
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|vectorSlice
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|equals
return|;
block|}
specifier|private
name|int
name|vectorCharacterCount
parameter_list|(
name|BytesColumnVector
name|vector
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|length
index|[
name|i
index|]
argument_list|)
return|;
block|}
annotation|@
name|Test
comment|// Test basic assign to vector.
specifier|public
name|void
name|testAssignBytesColumnVector
parameter_list|()
block|{
name|BytesColumnVector
name|outV
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|outV
operator|.
name|initBuffer
argument_list|(
literal|35
argument_list|)
expr_stmt|;
comment|// initialize with estimated element size 35
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|expectedResultLen
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|assign
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blue
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|assign
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|redgreen
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|redgreen
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|assign
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|ascii_sentence
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|assign
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blanksLeft
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Multi-byte characters with blank ranges.
name|byte
index|[]
name|sentenceBlankRanges
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceBlankRangesLen
init|=
name|addMultiByteCharSentenceBlankRanges
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|)
operator|==
literal|17
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|assign
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceBlankRangesLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|assign
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceBlankRangesLen
operator|-
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Some non-zero offsets.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|4
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|4
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|assign
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|4
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|4
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceBlankRangesLen
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|4
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|assign
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|17
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Test basic right trim of bytes slice.
specifier|public
name|void
name|testRightTrimBytesSlice
parameter_list|()
block|{
name|int
name|resultLen
decl_stmt|;
comment|// Nothing to trim (ASCII).
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blue
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|redgreen
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|ascii_sentence
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blanksLeft
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Simple trims.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|)
operator|==
literal|7
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|)
operator|==
literal|30
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|26
argument_list|)
expr_stmt|;
comment|// Offset trims.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|,
name|blankString
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|,
name|blankString
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|26
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blankRanges
operator|.
name|length
operator|-
literal|4
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|22
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|)
operator|==
literal|24
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blankRanges
operator|.
name|length
operator|-
literal|6
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|20
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|)
operator|==
literal|23
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blankRanges
operator|.
name|length
operator|-
literal|7
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|19
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
literal|8
operator|-
literal|7
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
literal|8
operator|-
literal|7
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Multi-byte trims.
name|byte
index|[]
name|multiByte
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_3
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|8
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceOne
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceOneLen
init|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOneLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOneLen
operator|-
literal|3
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceTwo
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceTwoLen
init|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
expr_stmt|;
name|int
name|start
decl_stmt|;
comment|// Left pad longer strings with multi-byte characters.
name|byte
index|[]
name|sentenceOnePaddedLeft
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
name|sentenceOnePaddedLeftLen
init|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|)
operator|==
literal|3
operator|+
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOnePaddedLeftLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
operator|==
literal|3
operator|+
literal|9
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedLeft
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoPaddedLeftLen
init|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|)
operator|==
literal|2
operator|+
literal|13
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoPaddedLeftLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
operator|==
literal|2
operator|+
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
expr_stmt|;
comment|// Right pad longer strings with multi-byte characters.
name|byte
index|[]
name|sentenceOnePaddedRight
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|sentenceOnePaddedRightLen
init|=
name|addPads
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
name|start
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|)
operator|==
literal|10
operator|+
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOnePaddedRightLen
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedRight
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoPaddedRightLen
init|=
name|addPads
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
name|start
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|)
operator|==
literal|13
operator|+
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoPaddedRightLen
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Multi-byte characters with blank ranges.
name|byte
index|[]
name|sentenceBlankRanges
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceBlankRangesLen
init|=
name|addMultiByteCharSentenceBlankRanges
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|)
operator|==
literal|17
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceBlankRangesLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|12
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Test basic right trim to vector.
specifier|public
name|void
name|testRightTrimBytesColumnVector
parameter_list|()
block|{
name|BytesColumnVector
name|outV
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|outV
operator|.
name|initBuffer
argument_list|(
literal|30
argument_list|)
expr_stmt|;
comment|// initialize with estimated element size 35
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|expectedResultLen
decl_stmt|;
comment|// Nothing to trim (ASCII).
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blue
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|redgreen
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|redgreen
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|ascii_sentence
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blanksLeft
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Simple trims.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|)
operator|==
literal|7
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|5
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|)
operator|==
literal|30
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blankRanges
operator|.
name|length
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|26
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Offset trims.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|2
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|,
name|blankString
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|1
argument_list|,
name|blankString
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|1
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|26
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blankRanges
operator|.
name|length
operator|-
literal|4
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|22
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|)
operator|==
literal|24
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blankRanges
operator|.
name|length
operator|-
literal|6
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|20
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|)
operator|==
literal|23
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blankRanges
operator|.
name|length
operator|-
literal|7
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|19
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
literal|8
operator|-
literal|7
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
literal|8
operator|-
literal|7
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Multi-byte trims.
name|byte
index|[]
name|multiByte
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_3
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|8
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|byte
index|[]
name|sentenceOne
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceOneLen
init|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOneLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOneLen
operator|-
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|byte
index|[]
name|sentenceTwo
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceTwoLen
init|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoLen
operator|-
literal|5
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|int
name|start
decl_stmt|;
comment|// Left pad longer strings with multi-byte characters.
name|byte
index|[]
name|sentenceOnePaddedLeft
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
name|sentenceOnePaddedLeftLen
init|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|)
operator|==
literal|3
operator|+
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOnePaddedLeftLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
operator|==
literal|3
operator|+
literal|9
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOnePaddedLeftLen
operator|-
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedLeft
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoPaddedLeftLen
init|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|)
operator|==
literal|2
operator|+
literal|13
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoPaddedLeftLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
operator|==
literal|2
operator|+
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Right pad longer strings with multi-byte characters.
name|byte
index|[]
name|sentenceOnePaddedRight
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|sentenceOnePaddedRightLen
init|=
name|addPads
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
name|start
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|)
operator|==
literal|10
operator|+
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOnePaddedRightLen
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedRight
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoPaddedRightLen
init|=
name|addPads
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
name|start
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|)
operator|==
literal|13
operator|+
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoPaddedRightLen
operator|-
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Multi-byte characters with blank ranges.
name|byte
index|[]
name|sentenceBlankRanges
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceBlankRangesLen
init|=
name|addMultiByteCharSentenceBlankRanges
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|)
operator|==
literal|17
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceBlankRangesLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceBlankRangesLen
operator|-
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrim
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|12
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Test basic truncate of bytes slice.
specifier|public
name|void
name|testTruncateBytesSlice
parameter_list|()
block|{
name|int
name|largeMaxLength
init|=
literal|100
decl_stmt|;
name|int
name|resultLen
decl_stmt|;
comment|// No truncate (ASCII) -- maximum length large.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blue
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|redgreen
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|ascii_sentence
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blanksLeft
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// No truncate (ASCII) -- same maximum length.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blue
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|redgreen
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|ascii_sentence
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blanksLeft
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Simple truncation.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|14
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|)
operator|==
literal|7
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|)
operator|==
literal|30
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|,
literal|29
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|29
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|29
argument_list|)
expr_stmt|;
comment|// Offset truncation.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|26
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|22
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|22
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|)
operator|==
literal|24
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|7
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|7
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|)
operator|==
literal|23
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|20
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|20
argument_list|)
expr_stmt|;
comment|// Multi-byte truncation.
name|byte
index|[]
name|multiByte
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_3
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceOne
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceOneLen
init|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|20
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|9
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceTwo
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceTwoLen
init|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|16
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|11
argument_list|)
expr_stmt|;
name|int
name|start
decl_stmt|;
comment|// Left pad longer strings with multi-byte characters.
name|byte
index|[]
name|sentenceOnePaddedLeft
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
name|sentenceOnePaddedLeftLen
init|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|)
operator|==
literal|3
operator|+
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
operator|==
literal|3
operator|+
literal|9
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|13
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedLeft
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoPaddedLeftLen
init|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|)
operator|==
literal|2
operator|+
literal|13
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|24
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
operator|==
literal|2
operator|+
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|15
argument_list|)
expr_stmt|;
comment|// Right pad longer strings with multi-byte characters.
name|byte
index|[]
name|sentenceOnePaddedRight
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|sentenceOnePaddedRightLen
init|=
name|addPads
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
name|start
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|)
operator|==
literal|10
operator|+
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|13
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedRight
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoPaddedRightLen
init|=
name|addPads
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
name|start
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|)
operator|==
literal|13
operator|+
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|11
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|14
argument_list|)
expr_stmt|;
comment|// Multi-byte characters with blank ranges.
name|byte
index|[]
name|sentenceBlankRanges
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceBlankRangesLen
init|=
name|addMultiByteCharSentenceBlankRanges
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|)
operator|==
literal|17
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|23
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|15
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|11
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Test basic truncate to vector.
specifier|public
name|void
name|testTruncateBytesColumnVector
parameter_list|()
block|{
name|BytesColumnVector
name|outV
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|outV
operator|.
name|initBuffer
argument_list|(
literal|35
argument_list|)
expr_stmt|;
comment|// initialize with estimated element size 35
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|largeMaxLength
init|=
literal|100
decl_stmt|;
name|int
name|expectedResultLen
decl_stmt|;
comment|// No truncate (ASCII) -- maximum length large.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blue
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|redgreen
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|redgreen
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|ascii_sentence
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blanksLeft
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// No truncate (ASCII) -- same maximum length.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blue
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|redgreen
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|redgreen
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|ascii_sentence
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blanksLeft
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Simple truncation.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|6
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|redgreen
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|14
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|2
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|)
operator|==
literal|7
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|2
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|)
operator|==
literal|30
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|,
literal|29
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|29
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|29
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Offset truncation.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|2
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|26
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|22
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|22
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|)
operator|==
literal|24
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|7
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|7
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|)
operator|==
literal|23
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|20
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|20
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Multi-byte truncation.
name|byte
index|[]
name|multiByte
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_3
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|5
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|byte
index|[]
name|sentenceOne
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceOneLen
init|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|20
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|9
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|byte
index|[]
name|sentenceTwo
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceTwoLen
init|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|16
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|11
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|int
name|start
decl_stmt|;
comment|// Left pad longer strings with multi-byte characters.
name|byte
index|[]
name|sentenceOnePaddedLeft
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
name|sentenceOnePaddedLeftLen
init|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|)
operator|==
literal|3
operator|+
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|6
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
operator|==
literal|3
operator|+
literal|9
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|13
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedLeft
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoPaddedLeftLen
init|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|)
operator|==
literal|2
operator|+
literal|13
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|24
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
operator|==
literal|2
operator|+
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|15
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Right pad longer strings with multi-byte characters.
name|byte
index|[]
name|sentenceOnePaddedRight
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|sentenceOnePaddedRightLen
init|=
name|addPads
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
name|start
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|)
operator|==
literal|10
operator|+
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|13
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedRight
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoPaddedRightLen
init|=
name|addPads
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
name|start
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|)
operator|==
literal|13
operator|+
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|11
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|14
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Multi-byte characters with blank ranges.
name|byte
index|[]
name|sentenceBlankRanges
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceBlankRangesLen
init|=
name|addMultiByteCharSentenceBlankRanges
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|)
operator|==
literal|17
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|9
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|23
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|truncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|15
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|11
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Test basic truncate to vector.
specifier|public
name|void
name|testTruncateScalar
parameter_list|()
block|{
name|int
name|largeMaxLength
init|=
literal|100
decl_stmt|;
name|byte
index|[]
name|result
decl_stmt|;
comment|// No truncate (ASCII) -- maximum length large.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|blue
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|blue
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|redgreen
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|redgreen
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|ascii_sentence
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ascii_sentence
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|blanksLeft
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|blanksLeft
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// No truncate (ASCII) -- same maximum length.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|blue
argument_list|,
name|blue
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|blue
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|redgreen
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|redgreen
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|ascii_sentence
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ascii_sentence
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|blanksLeft
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|blanksLeft
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// Simple truncation.
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|blue
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|blue
argument_list|,
literal|3
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|redgreen
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|redgreen
argument_list|,
literal|6
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|ascii_sentence
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|ascii_sentence
argument_list|,
literal|14
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|blanksLeft
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|blanksLeft
argument_list|,
literal|2
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|blanksRight
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|blanksRight
argument_list|,
literal|4
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|blanksBoth
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|blanksBoth
argument_list|,
literal|2
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|blankRanges
argument_list|,
literal|29
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|blankRanges
argument_list|,
literal|29
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// Multi-byte truncation.
name|byte
index|[]
name|scratch
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|byte
index|[]
name|multiByte
decl_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
name|multiByte
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|multiByte
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
name|multiByte
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|multiByte
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|multiByte
argument_list|,
literal|4
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_3
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
name|multiByte
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|multiByte
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|multiByte
argument_list|,
literal|5
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
name|multiByte
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|scratch
argument_list|,
literal|3
argument_list|,
literal|3
operator|+
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|multiByte
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|multiByte
argument_list|,
literal|1
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|sentenceOneLen
init|=
name|addMultiByteCharSentenceOne
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sentenceOne
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
name|sentenceOneLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|sentenceOne
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOne
argument_list|,
literal|20
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceOnePortion
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOne
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePortion
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|sentenceOnePortion
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOnePortion
argument_list|,
literal|9
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoLen
init|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sentenceTwo
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
name|sentenceTwoLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|sentenceTwo
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwo
argument_list|,
literal|16
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPortion
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwo
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPortion
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|sentenceTwoPortion
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwoPortion
argument_list|,
literal|11
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|start
decl_stmt|;
comment|// Left pad longer strings with multi-byte characters.
name|start
operator|=
name|addPads
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
name|sentenceOnePaddedLeftLen
init|=
name|addMultiByteCharSentenceOne
argument_list|(
name|scratch
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sentenceOnePaddedLeft
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|)
operator|==
literal|3
operator|+
literal|10
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|6
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceOnePaddedLeftPortion
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeftPortion
argument_list|)
operator|==
literal|3
operator|+
literal|9
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|sentenceOnePaddedLeftPortion
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOnePaddedLeftPortion
argument_list|,
literal|13
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoPaddedLeftLen
init|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|scratch
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedLeft
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|)
operator|==
literal|2
operator|+
literal|13
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|24
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedLeftPortion
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeftPortion
argument_list|)
operator|==
literal|2
operator|+
literal|10
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|sentenceTwoPaddedLeftPortion
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwoPaddedLeftPortion
argument_list|,
literal|15
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// Right pad longer strings with multi-byte characters.
name|start
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|sentenceOnePaddedRightLen
init|=
name|addPads
argument_list|(
name|scratch
argument_list|,
name|start
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sentenceOnePaddedRight
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|)
operator|==
literal|10
operator|+
literal|4
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|3
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceOnePaddedRightPortion
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRightPortion
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|sentenceOnePaddedRightPortion
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOnePaddedRightPortion
argument_list|,
literal|13
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoPaddedRightLen
init|=
name|addPads
argument_list|(
name|scratch
argument_list|,
name|start
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedRight
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|)
operator|==
literal|13
operator|+
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|11
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedRightPortion
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRightPortion
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|sentenceTwoPaddedRightPortion
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwoPaddedRightPortion
argument_list|,
literal|14
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// Multi-byte characters with blank ranges.
name|int
name|sentenceBlankRangesLen
init|=
name|addMultiByteCharSentenceBlankRanges
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sentenceBlankRanges
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
name|sentenceBlankRangesLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|)
operator|==
literal|17
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|9
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceBlankRangesPortion
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceBlankRanges
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRangesPortion
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|sentenceBlankRangesPortion
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceBlankRangesPortion
argument_list|,
literal|23
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|sentenceBlankRangesPortion
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|7
operator|+
literal|17
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRangesPortion
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|truncateScalar
argument_list|(
name|sentenceBlankRangesPortion
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceBlankRangesPortion
argument_list|,
literal|15
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|result
argument_list|)
operator|==
literal|11
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Test basic right trim and truncate to vector.
specifier|public
name|void
name|testRightTrimAndTruncateBytesSlice
parameter_list|()
block|{
comment|// This first section repeats the tests of testRightTrimWithOffset with a large maxLength parameter.
comment|// (i.e. too large to have an effect).
name|int
name|largeMaxLength
init|=
literal|100
decl_stmt|;
name|int
name|resultLen
decl_stmt|;
comment|// Nothing to trim (ASCII).
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blue
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|redgreen
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|ascii_sentence
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blanksLeft
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Simple trims.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|)
operator|==
literal|7
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|)
operator|==
literal|30
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|26
argument_list|)
expr_stmt|;
comment|// Offset trims.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|,
name|blankString
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|,
name|blankString
operator|.
name|length
operator|-
literal|1
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|26
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blankRanges
operator|.
name|length
operator|-
literal|4
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|22
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|)
operator|==
literal|24
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blankRanges
operator|.
name|length
operator|-
literal|6
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|20
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|)
operator|==
literal|23
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blankRanges
operator|.
name|length
operator|-
literal|7
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|19
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
literal|8
operator|-
literal|7
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
literal|8
operator|-
literal|7
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Multi-byte trims.
name|byte
index|[]
name|multiByte
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_3
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|8
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceOne
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceOneLen
init|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOneLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOneLen
operator|-
literal|3
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceTwo
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceTwoLen
init|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
expr_stmt|;
name|int
name|start
decl_stmt|;
comment|// Left pad longer strings with multi-byte characters.
name|byte
index|[]
name|sentenceOnePaddedLeft
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
name|sentenceOnePaddedLeftLen
init|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|)
operator|==
literal|3
operator|+
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOnePaddedLeftLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
operator|==
literal|3
operator|+
literal|9
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedLeft
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoPaddedLeftLen
init|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|)
operator|==
literal|2
operator|+
literal|13
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoPaddedLeftLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
operator|==
literal|2
operator|+
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
expr_stmt|;
comment|// Right pad longer strings with multi-byte characters.
name|byte
index|[]
name|sentenceOnePaddedRight
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|sentenceOnePaddedRightLen
init|=
name|addPads
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
name|start
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|)
operator|==
literal|10
operator|+
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOnePaddedRightLen
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedRight
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoPaddedRightLen
init|=
name|addPads
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
name|start
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|)
operator|==
literal|13
operator|+
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoPaddedRightLen
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Multi-byte characters with blank ranges.
name|byte
index|[]
name|sentenceBlankRanges
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceBlankRangesLen
init|=
name|addMultiByteCharSentenceBlankRanges
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|)
operator|==
literal|17
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceBlankRangesLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|12
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
comment|// This next section repeats the tests of testRightTrimWithOffset with a maxLength parameter that is
comment|// exactly the number of current characters in the string.  This shouldn't affect the trim.
comment|// Nothing to trim (ASCII).
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blue
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|redgreen
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|ascii_sentence
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blanksLeft
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Simple trims.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|)
operator|==
literal|7
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|)
operator|==
literal|30
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|26
argument_list|)
expr_stmt|;
comment|// Offset trims.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|,
name|blankString
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|,
name|blankString
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|26
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|,
literal|26
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blankRanges
operator|.
name|length
operator|-
literal|4
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|22
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|)
operator|==
literal|24
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blankRanges
operator|.
name|length
operator|-
literal|6
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|20
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|)
operator|==
literal|23
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blankRanges
operator|.
name|length
operator|-
literal|7
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|19
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
literal|8
operator|-
literal|7
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
literal|8
operator|-
literal|7
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Multi-byte trims.
name|multiByte
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_3
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|8
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|sentenceOne
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|sentenceOneLen
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOneLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOneLen
operator|-
literal|3
argument_list|)
expr_stmt|;
name|sentenceTwo
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|sentenceTwoLen
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
expr_stmt|;
comment|// Left pad longer strings with multi-byte characters.
name|sentenceOnePaddedLeft
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|sentenceOnePaddedLeftLen
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|)
operator|==
literal|3
operator|+
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|,
literal|3
operator|+
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOnePaddedLeftLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
operator|==
literal|3
operator|+
literal|9
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|,
literal|3
operator|+
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
expr_stmt|;
name|sentenceTwoPaddedLeft
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|sentenceTwoPaddedLeftLen
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|)
operator|==
literal|2
operator|+
literal|13
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|,
literal|2
operator|+
literal|13
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoPaddedLeftLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
operator|==
literal|2
operator|+
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|,
literal|2
operator|+
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
expr_stmt|;
comment|// Right pad longer strings with multi-byte characters.
name|sentenceOnePaddedRight
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sentenceOnePaddedRightLen
operator|=
name|addPads
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
name|start
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|)
operator|==
literal|10
operator|+
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|,
literal|10
operator|+
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOnePaddedRightLen
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
expr_stmt|;
name|sentenceTwoPaddedRight
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sentenceTwoPaddedRightLen
operator|=
name|addPads
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
name|start
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|)
operator|==
literal|13
operator|+
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|,
literal|13
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoPaddedRightLen
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Multi-byte characters with blank ranges.
name|sentenceBlankRanges
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|sentenceBlankRangesLen
operator|=
name|addMultiByteCharSentenceBlankRanges
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|)
operator|==
literal|17
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceBlankRangesLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|12
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
comment|// This next section repeats the tests of testRightTrimWithOffset with a maxLength parameter that is
comment|// less than the number of current characters in the string and thus affects the trim.
comment|// Nothing to trim (ASCII).
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|30
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Simple trims.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|)
operator|==
literal|7
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|)
operator|==
literal|30
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|15
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|15
argument_list|)
expr_stmt|;
comment|// Offset trims.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|,
name|blankString
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|,
name|blankString
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
operator|==
literal|6
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankRanges
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|3
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|)
operator|==
literal|24
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|blankRanges
operator|.
name|length
operator|-
literal|6
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|20
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|)
operator|==
literal|23
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|8
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
literal|8
operator|-
literal|7
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
literal|8
operator|-
literal|7
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Multi-byte trims.
name|multiByte
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_3
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|8
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|sentenceOne
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|sentenceOneLen
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOneLen
operator|-
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|13
argument_list|)
expr_stmt|;
name|sentenceTwo
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|sentenceTwoLen
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
expr_stmt|;
comment|// Left pad longer strings with multi-byte characters.
name|sentenceOnePaddedLeft
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|sentenceOnePaddedLeftLen
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|)
operator|==
literal|3
operator|+
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|,
literal|3
operator|+
literal|8
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOnePaddedLeftLen
operator|-
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
operator|==
literal|3
operator|+
literal|9
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|,
literal|3
operator|+
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|16
argument_list|)
expr_stmt|;
name|sentenceTwoPaddedLeft
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|sentenceTwoPaddedLeftLen
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|)
operator|==
literal|2
operator|+
literal|13
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
operator|==
literal|2
operator|+
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|10
argument_list|)
expr_stmt|;
comment|// Right pad longer strings with multi-byte characters.
name|sentenceOnePaddedRight
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sentenceOnePaddedRightLen
operator|=
name|addPads
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
name|start
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|)
operator|==
literal|10
operator|+
literal|4
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceOnePaddedRightLen
operator|-
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|17
argument_list|)
expr_stmt|;
name|sentenceTwoPaddedRight
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sentenceTwoPaddedRightLen
operator|=
name|addPads
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
name|start
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|)
operator|==
literal|13
operator|+
literal|1
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
name|sentenceTwoPaddedRightLen
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|8
argument_list|)
expr_stmt|;
comment|// Multi-byte characters with blank ranges.
name|sentenceBlankRanges
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|sentenceBlankRangesLen
operator|=
name|addMultiByteCharSentenceBlankRanges
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|)
operator|==
literal|17
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|7
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|11
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|4
argument_list|,
literal|12
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|4
argument_list|,
literal|12
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|7
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|4
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|resultLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultLen
operator|==
literal|12
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
name|resultLen
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Test basic right trim and truncate to vector.
specifier|public
name|void
name|testRightTrimAndTruncateBytesColumnVector
parameter_list|()
block|{
name|BytesColumnVector
name|outV
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|outV
operator|.
name|initBuffer
argument_list|(
literal|35
argument_list|)
expr_stmt|;
comment|// initialize with estimated element size 35
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|// This first section repeats the tests of testRightTrimWithOffset with a large maxLength parameter.
comment|// (i.e. too large to have an effect).
name|int
name|largeMaxLength
init|=
literal|100
decl_stmt|;
name|int
name|expectedResultLen
decl_stmt|;
comment|// Nothing to trim (ASCII).
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blue
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|redgreen
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|redgreen
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|ascii_sentence
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blanksLeft
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Simple trims.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|)
operator|==
literal|7
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|5
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|)
operator|==
literal|30
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blankRanges
operator|.
name|length
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|26
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Offset trims.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|2
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|,
name|blankString
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|1
argument_list|,
name|blankString
operator|.
name|length
operator|-
literal|1
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|1
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|26
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blankRanges
operator|.
name|length
operator|-
literal|4
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|22
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|)
operator|==
literal|24
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blankRanges
operator|.
name|length
operator|-
literal|6
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|20
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|)
operator|==
literal|23
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blankRanges
operator|.
name|length
operator|-
literal|7
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|19
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
literal|8
operator|-
literal|7
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
literal|8
operator|-
literal|7
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Multi-byte trims.
name|byte
index|[]
name|multiByte
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_3
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|8
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|byte
index|[]
name|sentenceOne
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceOneLen
init|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOneLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOneLen
operator|-
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|byte
index|[]
name|sentenceTwo
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceTwoLen
init|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoLen
operator|-
literal|5
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|int
name|start
decl_stmt|;
comment|// Left pad longer strings with multi-byte characters.
name|byte
index|[]
name|sentenceOnePaddedLeft
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
name|sentenceOnePaddedLeftLen
init|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|)
operator|==
literal|3
operator|+
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOnePaddedLeftLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
operator|==
literal|3
operator|+
literal|9
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOnePaddedLeftLen
operator|-
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedLeft
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoPaddedLeftLen
init|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|)
operator|==
literal|2
operator|+
literal|13
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoPaddedLeftLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
operator|==
literal|2
operator|+
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Right pad longer strings with multi-byte characters.
name|byte
index|[]
name|sentenceOnePaddedRight
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|sentenceOnePaddedRightLen
init|=
name|addPads
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
name|start
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|)
operator|==
literal|10
operator|+
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOnePaddedRightLen
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedRight
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoPaddedRightLen
init|=
name|addPads
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
name|start
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|)
operator|==
literal|13
operator|+
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoPaddedRightLen
operator|-
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Multi-byte characters with blank ranges.
name|byte
index|[]
name|sentenceBlankRanges
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|int
name|sentenceBlankRangesLen
init|=
name|addMultiByteCharSentenceBlankRanges
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|)
operator|==
literal|17
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceBlankRangesLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceBlankRangesLen
operator|-
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|12
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// This next section repeats the tests of testRightTrimWithOffset with a maxLength parameter that is
comment|// exactly the number of current characters in the string.  This shouldn't affect the trim.
comment|// Nothing to trim (ASCII).
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blue
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|redgreen
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|redgreen
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|ascii_sentence
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blanksLeft
operator|.
name|length
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Simple trims.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|)
operator|==
literal|7
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|5
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|)
operator|==
literal|30
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blankRanges
operator|.
name|length
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|26
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Offset trims.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|2
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|,
name|blankString
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|1
argument_list|,
name|blankString
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|1
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|26
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|4
argument_list|,
literal|26
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blankRanges
operator|.
name|length
operator|-
literal|4
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|4
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|22
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|)
operator|==
literal|24
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blankRanges
operator|.
name|length
operator|-
literal|6
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|20
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|)
operator|==
literal|23
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blankRanges
operator|.
name|length
operator|-
literal|7
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|19
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
literal|8
operator|-
literal|7
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
literal|8
operator|-
literal|7
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Multi-byte trims.
name|multiByte
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_3
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|8
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|sentenceOne
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|sentenceOneLen
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOneLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOneLen
operator|-
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|sentenceTwo
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|sentenceTwoLen
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoLen
operator|-
literal|5
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Left pad longer strings with multi-byte characters.
name|sentenceOnePaddedLeft
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|sentenceOnePaddedLeftLen
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|)
operator|==
literal|3
operator|+
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|,
literal|3
operator|+
literal|10
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOnePaddedLeftLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
operator|==
literal|3
operator|+
literal|9
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|,
literal|3
operator|+
literal|9
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOnePaddedLeftLen
operator|-
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|sentenceTwoPaddedLeft
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|sentenceTwoPaddedLeftLen
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|)
operator|==
literal|2
operator|+
literal|13
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|,
literal|2
operator|+
literal|13
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoPaddedLeftLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
operator|==
literal|2
operator|+
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|,
literal|2
operator|+
literal|10
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Right pad longer strings with multi-byte characters.
name|sentenceOnePaddedRight
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sentenceOnePaddedRightLen
operator|=
name|addPads
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
name|start
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|)
operator|==
literal|10
operator|+
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|,
literal|10
operator|+
literal|4
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOnePaddedRightLen
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|sentenceTwoPaddedRight
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sentenceTwoPaddedRightLen
operator|=
name|addPads
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
name|start
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|)
operator|==
literal|13
operator|+
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|,
literal|13
operator|+
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoPaddedRightLen
operator|-
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Multi-byte characters with blank ranges.
name|sentenceBlankRanges
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|sentenceBlankRangesLen
operator|=
name|addMultiByteCharSentenceBlankRanges
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|)
operator|==
literal|17
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceBlankRangesLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceBlankRangesLen
operator|-
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|12
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// This next section repeats the tests of testRightTrimWithOffset with a maxLength parameter that is
comment|// less than the number of current characters in the string and thus affects the trim.
comment|// Nothing to trim (ASCII).
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|6
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|redgreen
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|30
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|ascii_sentence
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Simple trims.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|)
operator|==
literal|7
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|5
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|)
operator|==
literal|30
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|blankRanges
operator|.
name|length
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|15
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|15
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Offset trims.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|blanksRight
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|2
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksRight
argument_list|,
literal|1
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|4
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|blanksBoth
operator|.
name|length
operator|-
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blanksBoth
argument_list|,
literal|5
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|,
name|blankString
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|1
argument_list|,
name|blankString
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankString
argument_list|,
literal|1
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
operator|==
literal|6
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|3
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|)
operator|==
literal|24
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|6
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|blankRanges
operator|.
name|length
operator|-
literal|6
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|6
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|20
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|)
operator|==
literal|23
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|blankRanges
operator|.
name|length
operator|-
literal|7
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|8
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blankRanges
argument_list|,
literal|7
argument_list|,
literal|8
operator|-
literal|7
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
literal|8
operator|-
literal|7
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|blankRanges
argument_list|,
literal|7
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Multi-byte trims.
name|multiByte
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_3
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|8
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|multiByte
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|sentenceOne
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|sentenceOneLen
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOneLen
operator|-
literal|9
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|13
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOne
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|sentenceTwo
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|sentenceTwoLen
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoLen
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoLen
operator|-
literal|5
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwo
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Left pad longer strings with multi-byte characters.
name|sentenceOnePaddedLeft
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|sentenceOnePaddedLeftLen
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|)
operator|==
literal|3
operator|+
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|,
literal|3
operator|+
literal|8
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOnePaddedLeftLen
operator|-
literal|6
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
operator|==
literal|3
operator|+
literal|9
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|,
literal|3
operator|+
literal|6
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|16
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|sentenceTwoPaddedLeft
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|sentenceTwoPaddedLeftLen
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|)
operator|==
literal|2
operator|+
literal|13
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|10
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
operator|==
literal|2
operator|+
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|10
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedLeft
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Right pad longer strings with multi-byte characters.
name|sentenceOnePaddedRight
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sentenceOnePaddedRightLen
operator|=
name|addPads
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
name|start
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|)
operator|==
literal|10
operator|+
literal|4
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceOnePaddedRightLen
operator|-
literal|4
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|17
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceOnePaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|sentenceTwoPaddedRight
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sentenceTwoPaddedRightLen
operator|=
name|addPads
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
name|start
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|)
operator|==
literal|13
operator|+
literal|1
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
name|sentenceTwoPaddedRightLen
operator|-
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|8
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceTwoPaddedRight
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Multi-byte characters with blank ranges.
name|sentenceBlankRanges
operator|=
operator|new
name|byte
index|[
literal|100
index|]
expr_stmt|;
name|sentenceBlankRangesLen
operator|=
name|addMultiByteCharSentenceBlankRanges
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|)
operator|==
literal|17
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|7
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|11
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|0
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|4
argument_list|,
literal|12
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|4
argument_list|,
literal|12
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|7
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|4
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|expectedResultLen
operator|=
literal|12
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorEqual
argument_list|(
name|outV
argument_list|,
name|i
argument_list|,
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
name|expectedResultLen
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vectorCharacterCount
argument_list|(
name|outV
argument_list|,
name|i
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Test basic truncate to vector.
specifier|public
name|void
name|testRightTrimAndTruncateScalar
parameter_list|()
block|{
name|int
name|largeMaxLength
init|=
literal|100
decl_stmt|;
name|byte
index|[]
name|result
decl_stmt|;
comment|// No truncate (ASCII) -- maximum length large.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|blue
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|blue
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|redgreen
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|redgreen
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|ascii_sentence
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ascii_sentence
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|blanksLeft
argument_list|,
name|largeMaxLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|blanksLeft
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// No truncate (ASCII) -- same maximum length.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blue
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|blue
argument_list|,
name|blue
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|blue
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|redgreen
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|redgreen
argument_list|,
name|redgreen
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|redgreen
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|ascii_sentence
argument_list|)
operator|==
literal|31
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|ascii_sentence
argument_list|,
name|ascii_sentence
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ascii_sentence
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|blanksLeft
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|blanksLeft
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|blanksLeft
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// Simple truncation.
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|blue
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|blue
argument_list|,
literal|3
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|redgreen
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|redgreen
argument_list|,
literal|6
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|ascii_sentence
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|ascii_sentence
argument_list|,
literal|14
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|blanksLeft
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|blanksRight
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|blanksRight
argument_list|,
literal|3
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|blanksBoth
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|blankString
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|blankRanges
argument_list|,
literal|29
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|blankRanges
argument_list|,
literal|26
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// Multi-byte truncation.
name|byte
index|[]
name|scratch
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|byte
index|[]
name|multiByte
decl_stmt|;
name|addMultiByteCharRightPadded1_1
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
name|multiByte
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|multiByte
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|multiByte
argument_list|,
literal|3
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
name|multiByte
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|multiByte
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|multiByte
argument_list|,
literal|4
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_3
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
name|multiByte
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|multiByte
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|multiByte
argument_list|,
literal|5
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|addMultiByteCharRightPadded1_2
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
name|multiByte
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|scratch
argument_list|,
literal|3
argument_list|,
literal|3
operator|+
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|multiByte
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|multiByte
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|multiByte
argument_list|,
literal|1
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|sentenceOneLen
init|=
name|addMultiByteCharSentenceOne
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sentenceOne
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
name|sentenceOneLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOne
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|sentenceOne
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOne
argument_list|,
literal|20
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceOnePortion
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOne
argument_list|,
name|sentenceOneLen
operator|-
literal|3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePortion
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|sentenceOnePortion
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOnePortion
argument_list|,
literal|9
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoLen
init|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sentenceTwo
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
name|sentenceTwoLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwo
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|sentenceTwo
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwo
argument_list|,
literal|16
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPortion
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwo
argument_list|,
name|sentenceTwoLen
operator|-
literal|5
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPortion
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|sentenceTwoPortion
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwoPortion
argument_list|,
literal|11
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|start
decl_stmt|;
comment|// Left pad longer strings with multi-byte characters.
name|start
operator|=
name|addPads
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
name|sentenceOnePaddedLeftLen
init|=
name|addMultiByteCharSentenceOne
argument_list|(
name|scratch
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sentenceOnePaddedLeft
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
name|sentenceOnePaddedLeftLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeft
argument_list|)
operator|==
literal|3
operator|+
literal|10
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
literal|6
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceOnePaddedLeftPortion
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOnePaddedLeft
argument_list|,
name|sentenceOnePaddedLeftLen
operator|-
literal|3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedLeftPortion
argument_list|)
operator|==
literal|3
operator|+
literal|9
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|sentenceOnePaddedLeftPortion
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOnePaddedLeftPortion
argument_list|,
literal|12
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|addPads
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoPaddedLeftLen
init|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|scratch
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedLeft
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
name|sentenceTwoPaddedLeftLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|)
operator|==
literal|2
operator|+
literal|13
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
literal|24
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedLeftPortion
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwoPaddedLeft
argument_list|,
name|sentenceTwoPaddedLeftLen
operator|-
literal|5
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedLeftPortion
argument_list|)
operator|==
literal|2
operator|+
literal|10
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|sentenceTwoPaddedLeftPortion
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwoPaddedLeftPortion
argument_list|,
literal|15
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// Right pad longer strings with multi-byte characters.
name|start
operator|=
name|addMultiByteCharSentenceOne
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|sentenceOnePaddedRightLen
init|=
name|addPads
argument_list|(
name|scratch
argument_list|,
name|start
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sentenceOnePaddedRight
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
name|sentenceOnePaddedRightLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRight
argument_list|)
operator|==
literal|10
operator|+
literal|4
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
literal|3
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceOnePaddedRightPortion
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOnePaddedRight
argument_list|,
name|sentenceOnePaddedRightLen
operator|-
literal|3
operator|-
literal|4
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceOnePaddedRightPortion
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|sentenceOnePaddedRightPortion
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceOnePaddedRightPortion
argument_list|,
literal|13
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|addMultiByteCharSentenceTwo
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|sentenceTwoPaddedRightLen
init|=
name|addPads
argument_list|(
name|scratch
argument_list|,
name|start
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedRight
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
name|sentenceTwoPaddedRightLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRight
argument_list|)
operator|==
literal|13
operator|+
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
literal|11
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceTwoPaddedRightPortion
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwoPaddedRight
argument_list|,
name|sentenceTwoPaddedRightLen
operator|-
literal|5
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceTwoPaddedRightPortion
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|sentenceTwoPaddedRightPortion
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceTwoPaddedRightPortion
argument_list|,
literal|13
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// Multi-byte characters with blank ranges.
name|int
name|sentenceBlankRangesLen
init|=
name|addMultiByteCharSentenceBlankRanges
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sentenceBlankRanges
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratch
argument_list|,
name|sentenceBlankRangesLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRanges
argument_list|)
operator|==
literal|17
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sentenceBlankRangesPortion
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceBlankRanges
argument_list|,
name|sentenceBlankRangesLen
operator|-
literal|3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRangesPortion
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|sentenceBlankRangesPortion
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceBlankRangesPortion
argument_list|,
literal|19
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|sentenceBlankRangesPortion
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|sentenceBlankRanges
argument_list|,
literal|7
argument_list|,
literal|7
operator|+
literal|17
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|sentenceBlankRangesPortion
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|result
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncateScalar
argument_list|(
name|sentenceBlankRangesPortion
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sentenceBlankRangesPortion
argument_list|,
literal|12
argument_list|)
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StringExpr
operator|.
name|characterCount
argument_list|(
name|result
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Load a BytesColumnVector by copying in large data, enough to force
comment|// the buffer to expand.
specifier|public
name|void
name|testLoadBytesColumnVectorByValueLargeData
parameter_list|()
block|{
name|BytesColumnVector
name|bcv
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|bcv
operator|.
name|initBuffer
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// initialize with estimated element size 10
comment|// Record initial buffer size
name|int
name|initialBufferSize
init|=
name|bcv
operator|.
name|bufferSize
argument_list|()
decl_stmt|;
name|String
name|s
init|=
literal|"0123456789"
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|length
argument_list|()
operator|<
literal|500
condition|)
block|{
name|s
operator|+=
name|s
expr_stmt|;
block|}
name|byte
index|[]
name|b
init|=
literal|null
decl_stmt|;
try|try
block|{
name|b
operator|=
name|s
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|bcv
operator|.
name|setVal
argument_list|(
name|i
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// Current buffer size should be larger than initial size
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bcv
operator|.
name|bufferSize
argument_list|()
operator|>
name|initialBufferSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// set values by reference, copy the data out, and verify equality
specifier|public
name|void
name|testLoadBytesColumnVectorByRef
parameter_list|()
block|{
name|BytesColumnVector
name|bcv
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|String
name|s
init|=
literal|"red"
decl_stmt|;
name|byte
index|[]
name|b
init|=
literal|null
decl_stmt|;
try|try
block|{
name|b
operator|=
name|s
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|bcv
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// verify
name|byte
index|[]
name|v
init|=
operator|new
name|byte
index|[
name|b
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bcv
operator|.
name|length
index|[
name|i
index|]
operator|==
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bcv
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|bcv
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|v
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|b
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
comment|// Test string column to string literal comparison
specifier|public
name|void
name|testStringColCompareStringScalarFilter
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
name|expr
operator|=
operator|new
name|FilterStringGroupColEqualStringScalar
argument_list|(
literal|0
argument_list|,
name|red2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// only red qualifies, and it's in entry 0
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterStringGroupColLessStringScalar
argument_list|(
literal|0
argument_list|,
name|red2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// only green qualifies, and it's in entry 1
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterStringGroupColGreaterEqualStringScalar
argument_list|(
literal|0
argument_list|,
name|green
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// green and red qualify
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|1
index|]
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Test string column to CHAR literal comparison
specifier|public
name|void
name|testStringColCompareCharScalarFilter
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
name|expr
operator|=
operator|new
name|FilterStringGroupColEqualCharScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|HiveChar
argument_list|(
operator|new
name|String
argument_list|(
name|red2
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// only red qualifies, and it's in entry 0
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterStringGroupColLessCharScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|HiveChar
argument_list|(
operator|new
name|String
argument_list|(
name|red2
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// only green qualifies, and it's in entry 1
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterStringGroupColGreaterEqualCharScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|HiveChar
argument_list|(
operator|new
name|String
argument_list|(
name|green
argument_list|)
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// green and red qualify
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|1
index|]
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Test string column to VARCHAR literal comparison
specifier|public
name|void
name|testStringColCompareVarCharScalarFilter
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
name|expr
operator|=
operator|new
name|FilterStringGroupColEqualVarCharScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
operator|new
name|String
argument_list|(
name|red2
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// only red qualifies, and it's in entry 0
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterStringGroupColLessVarCharScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
operator|new
name|String
argument_list|(
name|red2
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// only green qualifies, and it's in entry 1
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterStringGroupColGreaterEqualVarCharScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
operator|new
name|String
argument_list|(
name|green
argument_list|)
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// green and red qualify
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|1
index|]
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringColCompareStringScalarProjection
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
name|expr
operator|=
operator|new
name|StringGroupColEqualStringScalar
argument_list|(
literal|0
argument_list|,
name|red2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|LongColumnVector
name|outVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|StringGroupColEqualStringScalar
argument_list|(
literal|0
argument_list|,
name|green
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringColCompareCharScalarProjection
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
name|expr
operator|=
operator|new
name|StringGroupColEqualCharScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|HiveChar
argument_list|(
operator|new
name|String
argument_list|(
name|red2
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|LongColumnVector
name|outVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|StringGroupColEqualCharScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|HiveChar
argument_list|(
operator|new
name|String
argument_list|(
name|green
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringColCompareVarCharScalarProjection
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
name|expr
operator|=
operator|new
name|StringGroupColEqualVarCharScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
operator|new
name|String
argument_list|(
name|red2
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|LongColumnVector
name|outVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|StringGroupColEqualVarCharScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
operator|new
name|String
argument_list|(
name|green
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Test string literal to string column comparison
specifier|public
name|void
name|testStringScalarCompareStringCol
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
name|expr
operator|=
operator|new
name|FilterStringScalarEqualStringGroupColumn
argument_list|(
name|red2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// only red qualifies, and it's in entry 0
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterStringScalarGreaterStringGroupColumn
argument_list|(
name|red2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// only green qualifies, and it's in entry 1
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterStringScalarLessEqualStringGroupColumn
argument_list|(
name|green
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// green and red qualify
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|1
index|]
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Test CHAR literal to string column comparison
specifier|public
name|void
name|testCharScalarCompareStringCol
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
name|expr
operator|=
operator|new
name|FilterCharScalarEqualStringGroupColumn
argument_list|(
operator|new
name|HiveChar
argument_list|(
operator|new
name|String
argument_list|(
name|red2
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// only red qualifies, and it's in entry 0
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterCharScalarGreaterStringGroupColumn
argument_list|(
operator|new
name|HiveChar
argument_list|(
operator|new
name|String
argument_list|(
name|red2
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// only green qualifies, and it's in entry 1
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterCharScalarLessEqualStringGroupColumn
argument_list|(
operator|new
name|HiveChar
argument_list|(
operator|new
name|String
argument_list|(
name|green
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// green and red qualify
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|1
index|]
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Test VARCHAR literal to string column comparison
specifier|public
name|void
name|testVarCharScalarCompareStringCol
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
name|expr
operator|=
operator|new
name|FilterVarCharScalarEqualStringGroupColumn
argument_list|(
operator|new
name|HiveVarchar
argument_list|(
operator|new
name|String
argument_list|(
name|red2
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// only red qualifies, and it's in entry 0
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterVarCharScalarGreaterStringGroupColumn
argument_list|(
operator|new
name|HiveVarchar
argument_list|(
operator|new
name|String
argument_list|(
name|red2
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// only green qualifies, and it's in entry 1
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterVarCharScalarLessEqualStringGroupColumn
argument_list|(
operator|new
name|HiveVarchar
argument_list|(
operator|new
name|String
argument_list|(
name|green
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// green and red qualify
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|size
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|selected
index|[
literal|1
index|]
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringScalarCompareStringColProjection
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
name|expr
operator|=
operator|new
name|StringScalarEqualStringGroupColumn
argument_list|(
name|red2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|LongColumnVector
name|outVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|StringScalarEqualStringGroupColumn
argument_list|(
name|green
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCharScalarCompareStringColProjection
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
name|expr
operator|=
operator|new
name|CharScalarEqualStringGroupColumn
argument_list|(
operator|new
name|HiveChar
argument_list|(
operator|new
name|String
argument_list|(
name|red2
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|LongColumnVector
name|outVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|CharScalarEqualStringGroupColumn
argument_list|(
operator|new
name|HiveChar
argument_list|(
operator|new
name|String
argument_list|(
name|green
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarCharScalarCompareStringColProjection
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
name|expr
operator|=
operator|new
name|VarCharScalarEqualStringGroupColumn
argument_list|(
operator|new
name|HiveVarchar
argument_list|(
operator|new
name|String
argument_list|(
name|red2
argument_list|)
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|LongColumnVector
name|outVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|VarCharScalarEqualStringGroupColumn
argument_list|(
operator|new
name|HiveVarchar
argument_list|(
operator|new
name|String
argument_list|(
name|green
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringColCompareStringColFilter
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
decl_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
comment|/* input data      *      * col0       col1      * ===============      * blue       red      * green      green      * red        blue      * NULL       red            col0 data is empty string if we un-set NULL property      */
comment|// nulls possible on left, right
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterStringGroupColLessStringGroupColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// no nulls possible
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// nulls on left, no nulls on right
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// nulls on right, no nulls on left
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Now vary isRepeating
comment|// nulls possible on left, right
comment|// left repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// right repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// first 2 qualify
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// left and right repeat
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// Now vary isRepeating
comment|// nulls possible only on left
comment|// left repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// left repeats and is null
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// right repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// left and right repeat
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// Now vary isRepeating
comment|// nulls possible only on right
comment|// left repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// right repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// right repeats and is null
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// left and right repeat
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// left and right repeat and right is null
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringColCompareStringColProjection
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
decl_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
name|long
index|[]
name|outVector
decl_stmt|;
comment|/* input data      *      * col0       col1      * ===============      * blue       red      * green      green      * red        blue      * NULL       red            col0 data is empty string if we un-set NULL property      */
comment|// nulls possible on left, right
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|StringGroupColLessStringGroupColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// no nulls possible
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// nulls on left, no nulls on right
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// nulls on right, no nulls on left
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// Now vary isRepeating
comment|// nulls possible on left, right
comment|// left repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// right repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// left and right repeat
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Now vary isRepeating
comment|// nulls possible only on left
comment|// left repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// left repeats and is null
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// right repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// left and right repeat
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Now vary isRepeating
comment|// nulls possible only on right
comment|// left repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// right repeats
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outVector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// right repeats and is null
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// left and right repeat
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|outVector
operator|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outVector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// left and right repeat and right is null
name|batch
operator|=
name|makeStringBatchForColColCompare
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|VectorizedRowBatch
name|makeStringBatch
parameter_list|()
block|{
comment|// create a batch with one string ("Bytes") column
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|v
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
comment|// to hold output if needed
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// to hold boolean output
comment|/*      * Add these 3 values:      *      * red      * green      * NULL      */
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|green
argument_list|,
literal|0
argument_list|,
name|green
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|3
expr_stmt|;
return|return
name|batch
return|;
block|}
name|VectorizedRowBatch
name|makeStringBatchMixedCase
parameter_list|()
block|{
comment|// create a batch with two string ("Bytes") columns
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|v
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|BytesColumnVector
name|outV
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|outV
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
comment|/*      * Add these 3 values:      *      * mixedUp      * green      * NULL      */
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|mixedUp
argument_list|,
literal|0
argument_list|,
name|mixedUp
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|green
argument_list|,
literal|0
argument_list|,
name|green
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|3
expr_stmt|;
return|return
name|batch
return|;
block|}
name|VectorizedRowBatch
name|makeStringBatchMixedCharSize
parameter_list|()
block|{
comment|// create a new batch with one char column (for input) and one long column (for output)
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|v
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|LongColumnVector
name|outV
init|=
operator|new
name|LongColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
comment|/*      * Add these 3 values:      *      * mixedUp      * green      * NULL      *<4 char string with mult-byte chars>      */
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|mixedUp
argument_list|,
literal|0
argument_list|,
name|mixedUp
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|green
argument_list|,
literal|0
argument_list|,
name|green
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|3
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|4
expr_stmt|;
return|return
name|batch
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColLower
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatchMixedCase
argument_list|()
decl_stmt|;
name|StringLower
name|expr
init|=
operator|new
name|StringLower
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|mixedUpLower
argument_list|,
literal|0
argument_list|,
name|mixedUpLower
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|int
name|cmp2
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|green
argument_list|,
literal|0
argument_list|,
name|green
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
comment|// no nulls, not repeating
name|batch
operator|=
name|makeStringBatchMixedCase
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|mixedUpLower
argument_list|,
literal|0
argument_list|,
name|mixedUpLower
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// has nulls, is repeating
name|batch
operator|=
name|makeStringBatchMixedCase
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|mixedUpLower
argument_list|,
literal|0
argument_list|,
name|mixedUpLower
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// no nulls, is repeating
name|batch
operator|=
name|makeStringBatchMixedCase
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|mixedUpLower
argument_list|,
literal|0
argument_list|,
name|mixedUpLower
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColUpper
parameter_list|()
block|{
comment|// no nulls, not repeating
comment|/* We don't test all the combinations because (at least currently)      * the logic is inherited to be the same as testColLower, which checks all the cases).      */
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatchMixedCase
argument_list|()
decl_stmt|;
name|StringUpper
name|expr
init|=
operator|new
name|StringUpper
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|mixedUpUpper
argument_list|,
literal|0
argument_list|,
name|mixedUpUpper
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringLength
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatchMixedCharSize
argument_list|()
decl_stmt|;
name|StringLength
name|expr
init|=
operator|new
name|StringLength
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|LongColumnVector
name|outCol
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// length of green is 5
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// this one has the mixed-size chars
comment|// no nulls, not repeating
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// this one has the mixed-size chars
comment|// has nulls, is repeating
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// length of "mixedUp"
comment|// no nulls, is repeating
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// length of "mixedUp"
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VectorizedRowBatch
name|makeStringBatch2In1Out
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|v
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|BytesColumnVector
name|v2
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|v2
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|green
argument_list|,
literal|0
argument_list|,
name|green
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|)
expr_stmt|;
name|v2
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|green
argument_list|,
literal|0
argument_list|,
name|green
operator|.
name|length
argument_list|)
expr_stmt|;
name|v2
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|)
expr_stmt|;
name|v2
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|v2
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|3
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|private
name|VectorizedRowBatch
name|makeStringBatchForColColCompare
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|v
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|BytesColumnVector
name|v2
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|v2
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|green
argument_list|,
literal|0
argument_list|,
name|green
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|3
argument_list|,
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|)
expr_stmt|;
name|v2
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|green
argument_list|,
literal|0
argument_list|,
name|green
operator|.
name|length
argument_list|)
expr_stmt|;
name|v2
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
expr_stmt|;
name|v2
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|setRef
argument_list|(
literal|3
argument_list|,
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|)
expr_stmt|;
name|v2
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|4
expr_stmt|;
return|return
name|batch
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringLike
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
decl_stmt|;
name|Text
name|pattern
decl_stmt|;
name|int
name|initialBatchSize
decl_stmt|;
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|pattern
operator|=
operator|new
name|Text
argument_list|(
name|mixPercentPattern
argument_list|)
expr_stmt|;
name|FilterStringColLikeStringScalar
name|expr
init|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
name|mixPercentPattern
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// verify that the beginning entry is the only one that matches
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// no nulls, not repeating
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// verify that the beginning entry is the only one that matches
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// has nulls, is repeating
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|initialBatchSize
operator|=
name|batch
operator|.
name|size
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// all rows qualify
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initialBatchSize
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// same, but repeating value is null
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// no rows qualify
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// no nulls, is repeating
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|initialBatchSize
operator|=
name|batch
operator|.
name|size
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// all rows qualify
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initialBatchSize
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringLikePatternType
parameter_list|()
throws|throws
name|UnsupportedEncodingException
throws|,
name|HiveException
block|{
name|FilterStringColLikeStringScalar
name|expr
decl_stmt|;
name|VectorizedRowBatch
name|vrb
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|getVectorizedRowBatch
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|vrb
operator|.
name|cols
index|[
literal|0
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|vrb
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|vrb
operator|.
name|size
operator|=
literal|0
expr_stmt|;
comment|// BEGIN pattern
name|expr
operator|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
literal|"abc%"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|vrb
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FilterStringColLikeStringScalar
operator|.
name|BeginChecker
operator|.
name|class
argument_list|,
name|expr
operator|.
name|checker
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// END pattern
name|expr
operator|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
literal|"%abc"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|vrb
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FilterStringColLikeStringScalar
operator|.
name|EndChecker
operator|.
name|class
argument_list|,
name|expr
operator|.
name|checker
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// MIDDLE pattern
name|expr
operator|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
literal|"%abc%"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|vrb
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FilterStringColLikeStringScalar
operator|.
name|MiddleChecker
operator|.
name|class
argument_list|,
name|expr
operator|.
name|checker
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// CHAIN pattern
name|expr
operator|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
literal|"%abc%de"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|vrb
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FilterStringColLikeStringScalar
operator|.
name|ChainedChecker
operator|.
name|class
argument_list|,
name|expr
operator|.
name|checker
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// COMPLEX pattern
name|expr
operator|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
literal|"%abc_%de"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|vrb
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FilterStringColLikeStringScalar
operator|.
name|ComplexChecker
operator|.
name|class
argument_list|,
name|expr
operator|.
name|checker
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// NONE pattern
name|expr
operator|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
literal|"abc"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|vrb
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FilterStringColLikeStringScalar
operator|.
name|NoneChecker
operator|.
name|class
argument_list|,
name|expr
operator|.
name|checker
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringLikeMultiByte
parameter_list|()
throws|throws
name|HiveException
throws|,
name|UnsupportedEncodingException
block|{
name|FilterStringColLikeStringScalar
name|expr
decl_stmt|;
name|VectorizedRowBatch
name|batch
decl_stmt|;
comment|// verify that a multi byte LIKE expression matches a matching string
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
operator|(
literal|'%'
operator|+
operator|new
name|String
argument_list|(
name|multiByte
argument_list|)
operator|+
literal|'%'
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// verify that a multi byte LIKE expression doesn't match a non-matching string
name|batch
operator|=
name|makeStringBatchMixedCharSize
argument_list|()
expr_stmt|;
name|expr
operator|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
operator|(
literal|'%'
operator|+
operator|new
name|String
argument_list|(
name|multiByte
argument_list|)
operator|+
literal|'x'
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|randomizePattern
parameter_list|(
name|Random
name|control
parameter_list|,
name|String
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|control
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
condition|)
block|{
default|default:
case|case
literal|0
case|:
block|{
return|return
name|value
return|;
block|}
case|case
literal|1
case|:
block|{
return|return
name|control
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
operator|+
name|value
return|;
block|}
case|case
literal|2
case|:
block|{
return|return
name|value
operator|+
name|control
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
return|;
block|}
case|case
literal|3
case|:
block|{
return|return
name|control
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
operator|+
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
case|case
literal|4
case|:
block|{
return|return
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
name|control
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
return|;
block|}
case|case
literal|5
case|:
block|{
return|return
name|control
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
operator|+
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
case|case
literal|6
case|:
block|{
return|return
literal|""
return|;
block|}
case|case
literal|7
case|:
block|{
return|return
name|value
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
case|case
literal|8
case|:
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|8
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|control
operator|.
name|nextInt
argument_list|(
literal|12
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
literal|'a'
operator|+
name|control
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
case|case
literal|9
case|:
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|8
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|control
operator|.
name|nextInt
argument_list|(
literal|12
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
literal|'A'
operator|+
name|control
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
specifier|private
name|String
name|generateCandidate
parameter_list|(
name|Random
name|control
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
specifier|final
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|pattern
argument_list|,
literal|"%"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|leftAnchor
init|=
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"%"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|rightAnchor
init|=
name|pattern
operator|.
name|endsWith
argument_list|(
literal|"%"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|chunk
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|leftAnchor
operator|&&
name|i
operator|==
literal|0
condition|)
block|{
comment|// first item
name|sb
operator|.
name|append
argument_list|(
name|randomizePattern
argument_list|(
name|control
argument_list|,
name|chunk
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rightAnchor
operator|&&
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// last item
name|sb
operator|.
name|append
argument_list|(
name|randomizePattern
argument_list|(
name|control
argument_list|,
name|chunk
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// middle item
name|sb
operator|.
name|append
argument_list|(
name|randomizePattern
argument_list|(
name|control
argument_list|,
name|chunk
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringLikeRandomized
parameter_list|()
throws|throws
name|HiveException
throws|,
name|UnsupportedEncodingException
block|{
specifier|final
name|String
index|[]
name|patterns
init|=
operator|new
name|String
index|[]
block|{
literal|"ABC%"
block|,
literal|"%ABC"
block|,
literal|"%ABC%"
block|,
literal|"ABC%DEF"
block|,
literal|"ABC%DEF%"
block|,
literal|"%ABC%DEF"
block|,
literal|"%ABC%DEF%"
block|,
literal|"ABC%DEF%EFG"
block|,
literal|"%ABC%DEF%EFG"
block|,
literal|"%ABC%DEF%EFG%H"
block|,     }
decl_stmt|;
name|long
name|positive
init|=
literal|0
decl_stmt|;
name|long
name|negative
init|=
literal|0
decl_stmt|;
name|Random
name|control
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
name|UDFLike
name|udf
init|=
operator|new
name|UDFLike
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|patterns
control|)
block|{
name|VectorExpression
name|expr
init|=
operator|new
name|FilterStringColLikeStringScalar
argument_list|(
literal|0
argument_list|,
name|pattern
operator|.
name|getBytes
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|getVectorizedRowBatch
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
operator|new
name|BytesColumnVector
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|Text
name|pText
init|=
operator|new
name|Text
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
name|i
operator|++
control|)
block|{
name|String
name|input
init|=
name|generateCandidate
argument_list|(
name|control
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
name|BooleanWritable
name|like
init|=
name|udf
operator|.
name|evaluate
argument_list|(
operator|new
name|Text
argument_list|(
name|input
argument_list|)
argument_list|,
name|pText
argument_list|)
decl_stmt|;
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
name|bcv
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
name|byte
index|[]
name|utf8
init|=
name|input
operator|.
name|getBytes
argument_list|(
literal|"utf-8"
argument_list|)
decl_stmt|;
name|bcv
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
name|utf8
argument_list|,
literal|0
argument_list|,
name|utf8
operator|.
name|length
argument_list|)
expr_stmt|;
name|bcv
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
if|if
condition|(
name|like
operator|.
name|get
argument_list|()
condition|)
block|{
name|positive
operator|++
expr_stmt|;
block|}
else|else
block|{
name|negative
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Checking '%s' against '%s'"
argument_list|,
name|input
argument_list|,
name|pattern
argument_list|)
argument_list|,
name|like
operator|.
name|get
argument_list|()
argument_list|,
operator|(
name|batch
operator|.
name|size
operator|!=
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Randomized testing: ran %d positive tests and %d negative tests"
argument_list|,
name|positive
argument_list|,
name|negative
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColConcatStringScalar
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|StringGroupColConcatStringScalar
name|expr
init|=
operator|new
name|StringGroupColConcatStringScalar
argument_list|(
literal|0
argument_list|,
name|red
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|int
name|cmp2
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|greenred
argument_list|,
literal|0
argument_list|,
name|greenred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// no nulls, not repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|cmp2
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|greenred
argument_list|,
literal|0
argument_list|,
name|greenred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|int
name|cmp3
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// has nulls, is repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// no nulls, is repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColConcatCharScalar
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|StringGroupColConcatCharScalar
name|expr
init|=
operator|new
name|StringGroupColConcatCharScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|HiveChar
argument_list|(
operator|new
name|String
argument_list|(
name|red
argument_list|)
argument_list|,
literal|6
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|int
name|cmp2
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|greenred
argument_list|,
literal|0
argument_list|,
name|greenred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// no nulls, not repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|cmp2
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|greenred
argument_list|,
literal|0
argument_list|,
name|greenred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|int
name|cmp3
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// has nulls, is repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// no nulls, is repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColConcatVarCharScalar
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|StringGroupColConcatVarCharScalar
name|expr
init|=
operator|new
name|StringGroupColConcatVarCharScalar
argument_list|(
literal|0
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
operator|new
name|String
argument_list|(
name|red
argument_list|)
argument_list|,
literal|14
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|int
name|cmp2
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|greenred
argument_list|,
literal|0
argument_list|,
name|greenred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// no nulls, not repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|cmp2
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|greenred
argument_list|,
literal|0
argument_list|,
name|greenred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|int
name|cmp3
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// has nulls, is repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// no nulls, is repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringScalarConcatCol
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|StringScalarConcatStringGroupCol
name|expr
init|=
operator|new
name|StringScalarConcatStringGroupCol
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|int
name|cmp2
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// no nulls, not repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|cmp2
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|int
name|cmp3
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// has nulls, is repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// no nulls, is repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCharScalarConcatCol
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|CharScalarConcatStringGroupCol
name|expr
init|=
operator|new
name|CharScalarConcatStringGroupCol
argument_list|(
operator|new
name|HiveChar
argument_list|(
operator|new
name|String
argument_list|(
name|red
argument_list|)
argument_list|,
literal|6
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|int
name|cmp2
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// no nulls, not repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|cmp2
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|int
name|cmp3
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// has nulls, is repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// no nulls, is repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarCharScalarConcatCol
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|VarCharScalarConcatStringGroupCol
name|expr
init|=
operator|new
name|VarCharScalarConcatStringGroupCol
argument_list|(
operator|new
name|HiveVarchar
argument_list|(
operator|new
name|String
argument_list|(
name|red
argument_list|)
argument_list|,
literal|14
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|int
name|cmp2
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// no nulls, not repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|cmp2
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|int
name|cmp3
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// has nulls, is repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// no nulls, is repeating
name|batch
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColConcatCol
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|makeStringBatch2In1Out
argument_list|()
decl_stmt|;
name|StringGroupConcatColCol
name|expr
init|=
operator|new
name|StringGroupConcatColCol
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|int
name|cmp2
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|greengreen
argument_list|,
literal|0
argument_list|,
name|greengreen
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// no nulls, not repeating
name|batch
operator|=
name|makeStringBatch2In1Out
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|cmp2
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|greengreen
argument_list|,
literal|0
argument_list|,
name|greengreen
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp2
argument_list|)
expr_stmt|;
name|int
name|cmp3
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// has nulls, is repeating
name|batch
operator|=
name|makeStringBatch2In1Out
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// only left input repeating
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// same, but repeating input is not null
name|batch
operator|=
name|makeStringBatch2In1Out
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|//TEST FAILED
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch2In1Out
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// only right input repeating
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch2In1Out
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// both inputs repeat
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// no nulls, is repeating
name|batch
operator|=
name|makeStringBatch2In1Out
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// only right input repeating and has no nulls
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|greenred
argument_list|,
literal|0
argument_list|,
name|greenred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
comment|// try again with left input also having no nulls
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch2In1Out
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// only left input repeating and has no nulls
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redgreen
argument_list|,
literal|0
argument_list|,
name|redgreen
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|batch
operator|=
name|makeStringBatch2In1Out
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// both inputs repeat
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outCol
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|redred
argument_list|,
literal|0
argument_list|,
name|redred
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubstrStart
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
comment|// Testing no nulls and no repeating
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|v
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|BytesColumnVector
name|outV
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
name|byte
index|[]
name|data1
init|=
literal|"abcd string"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data2
init|=
literal|"efgh string"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data3
init|=
literal|"efgh"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|3
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|data1
argument_list|,
literal|0
argument_list|,
name|data1
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|data2
argument_list|,
literal|0
argument_list|,
name|data2
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|data3
argument_list|,
literal|0
argument_list|,
name|data3
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|false
expr_stmt|;
name|StringSubstrColStart
name|expr
init|=
operator|new
name|StringSubstrColStart
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
literal|"string"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// This yields empty because starting idx is out of bounds.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|outCol
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outCol
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// Testing negative substring index.
comment|// Start index -6 should yield the last 6 characters of the string
name|expr
operator|=
operator|new
name|StringSubstrColStart
argument_list|(
literal|0
argument_list|,
operator|-
literal|6
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|outCol
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outCol
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// Testing substring starting from index 1
name|expr
operator|=
operator|new
name|StringSubstrColStart
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|data1
argument_list|,
literal|0
argument_list|,
name|data1
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|data2
argument_list|,
literal|0
argument_list|,
name|data2
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|data3
argument_list|,
literal|0
argument_list|,
name|data3
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// Testing with nulls
name|expr
operator|=
operator|new
name|StringSubstrColStart
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outV
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outV
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|outCol
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outCol
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
comment|// Testing with repeating and no nulls
name|outV
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|v
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|v
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|data1
argument_list|,
literal|0
argument_list|,
name|data1
operator|.
name|length
argument_list|)
expr_stmt|;
name|batch
operator|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|expected
operator|=
literal|"string"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outV
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outV
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Testing multiByte string substring
name|v
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|v
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|expr
operator|=
operator|new
name|StringSubstrColStart
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outV
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outV
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
comment|// 3nd char starts from index 3 and total length should be 7 bytes as max is 10
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|10
operator|-
literal|3
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Testing multiByte string with reference starting mid array
name|v
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|v
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
comment|// string is 2 chars long (a 3 byte and a 4 byte char)
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|expr
operator|=
operator|new
name|StringSubstrColStart
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outV
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outV
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
comment|// the result is the last 1 character, which occupies 4 bytes
name|multiByte
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubstrStartLen
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
comment|// Testing no nulls and no repeating
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|v
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|BytesColumnVector
name|outV
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
name|byte
index|[]
name|data1
init|=
literal|"abcd string"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data2
init|=
literal|"efgh string"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data3
init|=
literal|"efgh"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|batch
operator|.
name|size
operator|=
literal|3
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|data1
argument_list|,
literal|0
argument_list|,
name|data1
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|data2
argument_list|,
literal|0
argument_list|,
name|data2
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|data3
argument_list|,
literal|0
argument_list|,
name|data3
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|StringSubstrColStartLen
name|expr
init|=
operator|new
name|StringSubstrColStartLen
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
literal|"string"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Testing negative substring index
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|expr
operator|=
operator|new
name|StringSubstrColStartLen
argument_list|(
literal|0
argument_list|,
operator|-
literal|6
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// This yields empty because starting index is out of bounds
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|//Testing substring index starting with 1 and zero length
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|expr
operator|=
operator|new
name|StringSubstrColStartLen
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|data1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|data2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|data3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|//Testing substring index starting with 0 and length equal to array length
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|expr
operator|=
operator|new
name|StringSubstrColStartLen
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|data1
argument_list|,
literal|0
argument_list|,
name|data1
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|data2
argument_list|,
literal|0
argument_list|,
name|data2
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|data3
argument_list|,
literal|0
argument_list|,
name|data3
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Testing setting length larger than array length, which should cap to the length itself
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|expr
operator|=
operator|new
name|StringSubstrColStartLen
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
comment|// Testing with nulls
name|v
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outV
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outV
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|emptyString
argument_list|,
literal|0
argument_list|,
name|emptyString
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Testing with repeating and no nulls
name|outV
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|v
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|outV
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|data1
argument_list|,
literal|0
argument_list|,
name|data1
operator|.
name|length
argument_list|)
expr_stmt|;
name|batch
operator|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Testing with multiByte String
name|v
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|v
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|multiByte
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|expr
operator|=
operator|new
name|StringSubstrColStartLen
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outV
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outV
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
comment|// 3rd char starts at index 3, and with length 2 it is covering the rest of the array.
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|10
operator|-
literal|3
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Testing multiByte string with reference set to mid array
name|v
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|v
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|outV
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|multiByte
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|expr
operator|=
operator|new
name|StringSubstrColStartLen
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|outCol
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outV
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outV
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
comment|// 2nd substring index refers to the 6th index (last char in the array)
name|multiByte
argument_list|,
literal|6
argument_list|,
literal|10
operator|-
literal|6
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|outCol
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorLTrim
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|makeTrimBatch
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|StringLTrim
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outV
init|=
operator|(
name|BytesColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|emptyString
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|blanksLeft
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outV
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outV
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outV
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outV
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|blanksBoth
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|3
index|]
argument_list|,
name|outV
operator|.
name|start
index|[
literal|3
index|]
argument_list|,
name|outV
operator|.
name|length
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|,
name|outV
operator|.
name|start
index|[
literal|4
index|]
argument_list|,
name|outV
operator|.
name|length
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|5
index|]
argument_list|,
name|outV
operator|.
name|start
index|[
literal|5
index|]
argument_list|,
name|outV
operator|.
name|length
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorRTrim
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|makeTrimBatch
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|StringRTrim
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outV
init|=
operator|(
name|BytesColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|emptyString
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|blanksLeft
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outV
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outV
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outV
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outV
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|blanksBoth
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|3
index|]
argument_list|,
name|outV
operator|.
name|start
index|[
literal|3
index|]
argument_list|,
name|outV
operator|.
name|length
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|,
name|outV
operator|.
name|start
index|[
literal|4
index|]
argument_list|,
name|outV
operator|.
name|length
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|5
index|]
argument_list|,
name|outV
operator|.
name|start
index|[
literal|5
index|]
argument_list|,
name|outV
operator|.
name|length
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVectorTrim
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
name|makeTrimBatch
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|StringTrim
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|outV
init|=
operator|(
name|BytesColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|emptyString
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|blanksLeft
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|outV
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|outV
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|blanksRight
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|2
index|]
argument_list|,
name|outV
operator|.
name|start
index|[
literal|2
index|]
argument_list|,
name|outV
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|blanksBoth
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|3
index|]
argument_list|,
name|outV
operator|.
name|start
index|[
literal|3
index|]
argument_list|,
name|outV
operator|.
name|length
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|,
name|outV
operator|.
name|start
index|[
literal|4
index|]
argument_list|,
name|outV
operator|.
name|length
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringExpr
operator|.
name|compare
argument_list|(
name|blankString
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|5
index|]
argument_list|,
name|outV
operator|.
name|start
index|[
literal|5
index|]
argument_list|,
name|outV
operator|.
name|length
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Make a batch to test the trim functions.
specifier|private
name|VectorizedRowBatch
name|makeTrimBatch
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|inV
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|BytesColumnVector
name|outV
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inV
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|outV
expr_stmt|;
name|inV
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|emptyString
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|inV
operator|.
name|setRef
argument_list|(
literal|1
argument_list|,
name|blanksLeft
argument_list|,
literal|0
argument_list|,
name|blanksLeft
operator|.
name|length
argument_list|)
expr_stmt|;
name|inV
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|blanksRight
argument_list|,
literal|0
argument_list|,
name|blanksRight
operator|.
name|length
argument_list|)
expr_stmt|;
name|inV
operator|.
name|setRef
argument_list|(
literal|3
argument_list|,
name|blanksBoth
argument_list|,
literal|0
argument_list|,
name|blanksBoth
operator|.
name|length
argument_list|)
expr_stmt|;
name|inV
operator|.
name|setRef
argument_list|(
literal|4
argument_list|,
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|)
expr_stmt|;
name|inV
operator|.
name|setRef
argument_list|(
literal|5
argument_list|,
name|blankString
argument_list|,
literal|0
argument_list|,
name|blankString
operator|.
name|length
argument_list|)
expr_stmt|;
name|b
operator|.
name|size
operator|=
literal|5
expr_stmt|;
return|return
name|b
return|;
block|}
comment|// Test boolean-valued (non-filter) IN expression for strings
annotation|@
name|Test
specifier|public
name|void
name|testStringInExpr
parameter_list|()
block|{
comment|// test basic operation
name|VectorizedRowBatch
name|b
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|b
operator|.
name|size
operator|=
literal|2
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|byte
index|[]
index|[]
name|inVals
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|inVals
index|[
literal|0
index|]
operator|=
name|red
expr_stmt|;
name|inVals
index|[
literal|1
index|]
operator|=
name|blue
expr_stmt|;
name|StringColumnInList
name|expr
init|=
operator|new
name|StringColumnInList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|expr
operator|.
name|setInListValues
argument_list|(
name|inVals
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|LongColumnVector
name|outV
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// test null input
name|b
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|b
operator|.
name|size
operator|=
literal|2
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|outV
operator|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|!
name|outV
operator|.
name|noNulls
operator|&&
name|outV
operator|.
name|isNull
index|[
literal|0
index|]
operator|&&
operator|!
name|outV
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// test repeating logic
name|b
operator|=
name|makeStringBatch
argument_list|()
expr_stmt|;
name|b
operator|.
name|size
operator|=
literal|2
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|outV
operator|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outV
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test vectorized regex expression.    */
annotation|@
name|Test
specifier|public
name|void
name|testRegex
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|b
init|=
name|makeStringBatch
argument_list|()
decl_stmt|;
name|FilterStringColRegExpStringScalar
name|expr
init|=
operator|new
name|FilterStringColRegExpStringScalar
argument_list|(
literal|0
argument_list|,
literal|"a.*"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|size
operator|=
literal|5
expr_stmt|;
name|b
operator|.
name|selectedInUse
operator|=
literal|false
expr_stmt|;
name|BytesColumnVector
name|v
init|=
operator|(
name|BytesColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|v
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|String
name|s1
init|=
literal|"4kMasVoB7lX1wc5i64bNk"
decl_stmt|;
name|String
name|s2
init|=
literal|"a27V63IL7jK3o"
decl_stmt|;
name|String
name|s3
init|=
literal|"27V63IL7jK3oa"
decl_stmt|;
name|String
name|s4
init|=
literal|"27V63IL7jK3o"
decl_stmt|;
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|s1
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|s1
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|1
index|]
operator|=
literal|null
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|2
argument_list|,
name|s2
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|s2
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|3
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|3
argument_list|,
name|s3
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|s3
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|4
index|]
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|setRef
argument_list|(
literal|4
argument_list|,
name|s4
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|s4
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|b
operator|.
name|selectedInUse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|b
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|b
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|b
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|b
operator|.
name|selected
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

