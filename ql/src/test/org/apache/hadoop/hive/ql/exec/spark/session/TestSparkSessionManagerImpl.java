begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|session
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|TestSparkSessionManagerImpl
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSparkSessionManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SparkSessionManagerImpl
name|sessionManagerHS2
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|anyFailedSessionThread
decl_stmt|;
comment|// updated only when a thread has failed.
comment|/** Tests CLI scenario where we get a single session and use it multiple times. */
annotation|@
name|Test
specifier|public
name|void
name|testSingleSessionMultipleUse
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"spark.master"
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|SparkSessionManager
name|sessionManager
init|=
name|SparkSessionManagerImpl
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|SparkSession
name|sparkSession1
init|=
name|sessionManager
operator|.
name|getSession
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sparkSession1
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|SparkSession
name|sparkSession2
init|=
name|sessionManager
operator|.
name|getSession
argument_list|(
name|sparkSession1
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sparkSession1
operator|==
name|sparkSession2
argument_list|)
expr_stmt|;
comment|// Same session object is expected.
name|assertTrue
argument_list|(
name|sparkSession2
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|sessionManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sessionManager
operator|.
name|closeSession
argument_list|(
name|sparkSession1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests multi-user scenario (like HiveServer2) where each user gets a session    * and uses it multiple times.    */
annotation|@
name|Test
specifier|public
name|void
name|testMultiSessionMultipleUse
parameter_list|()
throws|throws
name|Exception
block|{
name|sessionManagerHS2
operator|=
name|SparkSessionManagerImpl
operator|.
name|getInstance
argument_list|()
expr_stmt|;
comment|// Shutdown existing session manager
name|sessionManagerHS2
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"spark.master"
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|sessionManagerHS2
operator|.
name|setup
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threadList
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|SessionThread
argument_list|()
argument_list|,
literal|"Session thread "
operator|+
name|i
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|threadList
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threadList
control|)
block|{
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Interrupted while waiting for test session threads."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
literal|"At least one of the session threads failed. See the test output for details."
argument_list|,
name|anyFailedSessionThread
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Ending SessionManagerHS2"
argument_list|)
expr_stmt|;
name|sessionManagerHS2
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/* Thread simulating a user session in HiveServer2. */
specifier|public
class|class
name|SessionThread
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|threadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|threadName
operator|+
literal|" started."
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"spark.master"
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|SparkSession
name|prevSession
init|=
literal|null
decl_stmt|;
name|SparkSession
name|currentSession
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|currentSession
operator|=
name|sessionManagerHS2
operator|.
name|getSession
argument_list|(
name|prevSession
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prevSession
operator|==
literal|null
operator|||
name|prevSession
operator|==
name|currentSession
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentSession
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s got session (%d): %s"
argument_list|,
name|threadName
argument_list|,
name|i
argument_list|,
name|currentSession
operator|.
name|getSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|+
literal|1
operator|)
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|sessionManagerHS2
operator|.
name|returnSession
argument_list|(
name|currentSession
argument_list|)
expr_stmt|;
name|prevSession
operator|=
name|currentSession
expr_stmt|;
block|}
name|sessionManagerHS2
operator|.
name|closeSession
argument_list|(
name|currentSession
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|threadName
operator|+
literal|" ended."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|anyFailedSessionThread
operator|=
literal|true
expr_stmt|;
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error executing '%s'"
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

