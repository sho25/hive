begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|timestamp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_class
specifier|public
class|class
name|TestNanoTimeUtils
block|{
comment|// 3:34:10.101010101 PM on 1 January 2000:
specifier|public
specifier|static
specifier|final
name|int
name|JAN_1_2000
init|=
literal|2451545
decl_stmt|;
comment|// according to Wikipedia
specifier|public
specifier|static
specifier|final
name|long
name|PM_3_34_10_101010101
init|=
operator|(
operator|(
literal|15L
operator|*
literal|60L
operator|+
literal|34L
operator|)
operator|*
literal|60L
operator|+
literal|10L
operator|)
operator|*
literal|1000000000L
operator|+
literal|101010101L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|NanoTime
name|KNOWN_TIME
init|=
operator|new
name|NanoTime
argument_list|(
name|JAN_1_2000
argument_list|,
name|PM_3_34_10_101010101
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|KNOWN_IN_MILLIS
init|=
literal|946740850101L
decl_stmt|;
comment|// currentmillis.com
specifier|public
specifier|static
specifier|final
name|TimeZone
name|UTC
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|TimeZone
name|PST
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"PST"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|TimeZone
name|CST
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"CST"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|TimeZone
name|PLUS_6
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT+6"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|TimeZone
name|MINUS_6
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT-6"
argument_list|)
decl_stmt|;
comment|// From Spark's NanoTime implementation
specifier|public
specifier|static
specifier|final
name|int
name|JULIAN_DAY_OF_EPOCH
init|=
literal|2440588
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|SECONDS_PER_DAY
init|=
literal|60
operator|*
literal|60
operator|*
literal|24L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|MICROS_PER_SECOND
init|=
literal|1000L
operator|*
literal|1000L
decl_stmt|;
comment|/**    * Returns the number of microseconds since epoch from Julian day    * and nanoseconds in a day    *    * This is Spark's NanoTime implementation    */
specifier|public
name|long
name|fromJulianDay
parameter_list|(
name|int
name|julianDay
parameter_list|,
name|long
name|nanoseconds
parameter_list|)
block|{
comment|// use Long to avoid rounding errors
name|long
name|seconds
init|=
operator|(
operator|(
operator|(
name|long
operator|)
name|julianDay
operator|)
operator|-
name|JULIAN_DAY_OF_EPOCH
operator|)
operator|*
name|SECONDS_PER_DAY
decl_stmt|;
return|return
name|seconds
operator|*
name|MICROS_PER_SECOND
operator|+
name|nanoseconds
operator|/
literal|1000L
return|;
block|}
comment|/**    * Returns a Calendar from number of micros since epoch.    *    * This is a reliable conversion from micros since epoch to local time.    */
specifier|public
name|Calendar
name|toCalendar
parameter_list|(
name|long
name|timestamp_us
parameter_list|,
name|TimeZone
name|zone
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|zone
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTimeInMillis
argument_list|(
name|timestamp_us
operator|/
literal|1000L
argument_list|)
expr_stmt|;
return|return
name|cal
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromJulianDay
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KNOWN_IN_MILLIS
argument_list|,
name|fromJulianDay
argument_list|(
name|JAN_1_2000
argument_list|,
name|PM_3_34_10_101010101
argument_list|)
operator|/
literal|1000L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKnownTimestampWithFromJulianDay
parameter_list|()
block|{
name|Calendar
name|known
init|=
name|toCalendar
argument_list|(
name|fromJulianDay
argument_list|(
name|JAN_1_2000
argument_list|,
name|PM_3_34_10_101010101
argument_list|)
argument_list|,
name|UTC
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2000
argument_list|,
name|known
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Calendar
operator|.
name|JANUARY
argument_list|,
name|known
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|known
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|known
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|34
argument_list|,
name|known
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|known
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
comment|// can't validate nanos because Calendar calculations are done in millis
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKnownTimestampWithoutConversion
parameter_list|()
block|{
comment|// a UTC calendar will produce the same values as not converting
name|Calendar
name|calendar
init|=
name|toCalendar
argument_list|(
name|fromJulianDay
argument_list|(
name|JAN_1_2000
argument_list|,
name|PM_3_34_10_101010101
argument_list|)
argument_list|,
name|UTC
argument_list|)
decl_stmt|;
name|Timestamp
name|known
init|=
name|NanoTimeUtils
operator|.
name|getTimestamp
argument_list|(
name|KNOWN_TIME
argument_list|,
literal|true
comment|/* skip conversion from UTC to local */
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|-
literal|1900
argument_list|,
name|known
operator|.
name|getYear
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|,
name|known
operator|.
name|getMonth
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
name|known
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|,
name|known
operator|.
name|getHours
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|,
name|known
operator|.
name|getMinutes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|,
name|known
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|101010101
argument_list|,
name|known
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|NanoTime
name|actualJD
init|=
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
name|known
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|actualJD
operator|.
name|getJulianDay
argument_list|()
argument_list|,
name|JAN_1_2000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|actualJD
operator|.
name|getTimeOfDayNanos
argument_list|()
argument_list|,
name|PM_3_34_10_101010101
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKnownTimestampWithConversion
parameter_list|()
block|{
comment|// a PST calendar will produce the same values when converting to local
name|Calendar
name|calendar
init|=
name|toCalendar
argument_list|(
name|fromJulianDay
argument_list|(
name|JAN_1_2000
argument_list|,
name|PM_3_34_10_101010101
argument_list|)
argument_list|,
name|PST
argument_list|)
decl_stmt|;
comment|// CHANGE ME IF LOCAL IS NOT PST
name|Timestamp
name|known
init|=
name|NanoTimeUtils
operator|.
name|getTimestamp
argument_list|(
name|KNOWN_TIME
argument_list|,
literal|false
comment|/* do not skip conversion from UTC to local */
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|-
literal|1900
argument_list|,
name|known
operator|.
name|getYear
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|,
name|known
operator|.
name|getMonth
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
name|known
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|,
name|known
operator|.
name|getHours
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|,
name|known
operator|.
name|getMinutes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|,
name|known
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|101010101
argument_list|,
name|known
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|NanoTime
name|actualJD
init|=
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
name|known
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|actualJD
operator|.
name|getJulianDay
argument_list|()
argument_list|,
name|JAN_1_2000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|actualJD
operator|.
name|getTimeOfDayNanos
argument_list|()
argument_list|,
name|PM_3_34_10_101010101
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKnownWithZoneArgumentUTC
parameter_list|()
block|{
comment|// EXPECTED BEHAVIOR
comment|// the UTC calendar should match the alternative implementation with UTC
name|Calendar
name|calendar
init|=
name|toCalendar
argument_list|(
name|fromJulianDay
argument_list|(
name|JAN_1_2000
argument_list|,
name|PM_3_34_10_101010101
argument_list|)
argument_list|,
name|UTC
argument_list|)
decl_stmt|;
name|Timestamp
name|known
init|=
name|NanoTimeUtils
operator|.
name|getTimestamp
argument_list|(
name|KNOWN_TIME
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|(
name|UTC
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|-
literal|1900
argument_list|,
name|known
operator|.
name|getYear
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|,
name|known
operator|.
name|getMonth
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
name|known
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|,
name|known
operator|.
name|getHours
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|,
name|known
operator|.
name|getMinutes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|,
name|known
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|101010101
argument_list|,
name|known
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|NanoTime
name|actualJD
init|=
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
name|known
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|(
name|UTC
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|actualJD
operator|.
name|getJulianDay
argument_list|()
argument_list|,
name|JAN_1_2000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|actualJD
operator|.
name|getTimeOfDayNanos
argument_list|()
argument_list|,
name|PM_3_34_10_101010101
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKnownWithZoneArgumentGMTP6
parameter_list|()
block|{
name|Calendar
name|calendar
init|=
name|toCalendar
argument_list|(
name|fromJulianDay
argument_list|(
name|JAN_1_2000
argument_list|,
name|PM_3_34_10_101010101
argument_list|)
argument_list|,
name|PLUS_6
argument_list|)
decl_stmt|;
name|Timestamp
name|known
init|=
name|NanoTimeUtils
operator|.
name|getTimestamp
argument_list|(
name|KNOWN_TIME
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|(
name|PLUS_6
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|-
literal|1900
argument_list|,
name|known
operator|.
name|getYear
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|,
name|known
operator|.
name|getMonth
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
name|known
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|,
name|known
operator|.
name|getHours
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|,
name|known
operator|.
name|getMinutes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|,
name|known
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|101010101
argument_list|,
name|known
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|NanoTime
name|actualJD
init|=
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
name|known
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|(
name|PLUS_6
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|actualJD
operator|.
name|getJulianDay
argument_list|()
argument_list|,
name|JAN_1_2000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|actualJD
operator|.
name|getTimeOfDayNanos
argument_list|()
argument_list|,
name|PM_3_34_10_101010101
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKnownWithZoneArgumentGMTM6
parameter_list|()
block|{
name|Calendar
name|calendar
init|=
name|toCalendar
argument_list|(
name|fromJulianDay
argument_list|(
name|JAN_1_2000
argument_list|,
name|PM_3_34_10_101010101
argument_list|)
argument_list|,
name|MINUS_6
argument_list|)
decl_stmt|;
name|Timestamp
name|known
init|=
name|NanoTimeUtils
operator|.
name|getTimestamp
argument_list|(
name|KNOWN_TIME
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|(
name|MINUS_6
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|-
literal|1900
argument_list|,
name|known
operator|.
name|getYear
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|,
name|known
operator|.
name|getMonth
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
name|known
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|,
name|known
operator|.
name|getHours
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|,
name|known
operator|.
name|getMinutes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|,
name|known
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|101010101
argument_list|,
name|known
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|NanoTime
name|actualJD
init|=
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
name|known
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|(
name|MINUS_6
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|actualJD
operator|.
name|getJulianDay
argument_list|()
argument_list|,
name|JAN_1_2000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|actualJD
operator|.
name|getTimeOfDayNanos
argument_list|()
argument_list|,
name|PM_3_34_10_101010101
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareDeprecatedTimeStampWithNewTimeStamp
parameter_list|()
block|{
name|Timestamp
name|newTsLocal
init|=
name|NanoTimeUtils
operator|.
name|getTimestamp
argument_list|(
name|KNOWN_TIME
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|Timestamp
name|depTsLocal
init|=
name|NanoTimeUtils
operator|.
name|getTimestamp
argument_list|(
name|KNOWN_TIME
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newTsLocal
argument_list|,
name|depTsLocal
argument_list|)
expr_stmt|;
name|Timestamp
name|newTsUTC
init|=
name|NanoTimeUtils
operator|.
name|getTimestamp
argument_list|(
name|KNOWN_TIME
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Timestamp
name|depTsUTC
init|=
name|NanoTimeUtils
operator|.
name|getTimestamp
argument_list|(
name|KNOWN_TIME
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newTsUTC
argument_list|,
name|depTsUTC
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareDeprecatedNanoTimeWithNewNanoTime
parameter_list|()
throws|throws
name|ParseException
block|{
name|Date
name|d
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss.SSS"
argument_list|)
operator|.
name|parse
argument_list|(
literal|"2001-01-01 15:34:01.101"
argument_list|)
decl_stmt|;
name|Timestamp
name|knownTimestamp
init|=
operator|new
name|Timestamp
argument_list|(
name|d
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|NanoTime
name|newNTLocal
init|=
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
name|knownTimestamp
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|NanoTime
name|depNTLocal
init|=
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
name|knownTimestamp
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newNTLocal
operator|.
name|getJulianDay
argument_list|()
argument_list|,
name|depNTLocal
operator|.
name|getJulianDay
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newNTLocal
operator|.
name|getTimeOfDayNanos
argument_list|()
argument_list|,
name|depNTLocal
operator|.
name|getTimeOfDayNanos
argument_list|()
argument_list|)
expr_stmt|;
name|NanoTime
name|newNTUTC
init|=
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
name|knownTimestamp
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NanoTime
name|depNTUTC
init|=
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
name|knownTimestamp
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newNTUTC
operator|.
name|getJulianDay
argument_list|()
argument_list|,
name|depNTUTC
operator|.
name|getJulianDay
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newNTUTC
operator|.
name|getTimeOfDayNanos
argument_list|()
argument_list|,
name|depNTUTC
operator|.
name|getTimeOfDayNanos
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

