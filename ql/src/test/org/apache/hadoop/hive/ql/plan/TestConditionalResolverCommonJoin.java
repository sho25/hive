begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_class
specifier|public
class|class
name|TestConditionalResolverCommonJoin
block|{
annotation|@
name|Test
specifier|public
name|void
name|testResolvingDriverAlias
parameter_list|()
throws|throws
name|Exception
block|{
name|ConditionalResolverCommonJoin
name|resolver
init|=
operator|new
name|ConditionalResolverCommonJoin
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliases
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|pathToAliases
operator|.
name|put
argument_list|(
literal|"path1"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"alias1"
argument_list|,
literal|"alias2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pathToAliases
operator|.
name|put
argument_list|(
literal|"path2"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"alias3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|aliasToKnownSize
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|aliasToKnownSize
operator|.
name|put
argument_list|(
literal|"alias1"
argument_list|,
literal|1024l
argument_list|)
expr_stmt|;
name|aliasToKnownSize
operator|.
name|put
argument_list|(
literal|"alias2"
argument_list|,
literal|2048l
argument_list|)
expr_stmt|;
name|aliasToKnownSize
operator|.
name|put
argument_list|(
literal|"alias3"
argument_list|,
literal|4096l
argument_list|)
expr_stmt|;
comment|// joins alias1, alias2, alias3 (alias1 was not eligible for big pos)
name|HashMap
argument_list|<
name|String
argument_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|aliasToTask
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|aliasToTask
operator|.
name|put
argument_list|(
literal|"alias2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|aliasToTask
operator|.
name|put
argument_list|(
literal|"alias3"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ConditionalResolverCommonJoin
operator|.
name|ConditionalResolverCommonJoinCtx
name|ctx
init|=
operator|new
name|ConditionalResolverCommonJoin
operator|.
name|ConditionalResolverCommonJoinCtx
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|setPathToAliases
argument_list|(
name|pathToAliases
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setAliasToTask
argument_list|(
name|aliasToTask
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setAliasToKnownSize
argument_list|(
name|aliasToKnownSize
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESMALLTABLESFILESIZE
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
comment|// alias3 only can be selected
name|String
name|resolved
init|=
name|resolver
operator|.
name|resolveMapJoinTask
argument_list|(
name|ctx
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"alias3"
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESMALLTABLESFILESIZE
argument_list|,
literal|65536
argument_list|)
expr_stmt|;
comment|// alias1, alias2, alias3 all can be selected but overriden by biggest one (alias3)
name|resolved
operator|=
name|resolver
operator|.
name|resolveMapJoinTask
argument_list|(
name|ctx
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"alias3"
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESMALLTABLESFILESIZE
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
comment|// not selected
name|resolved
operator|=
name|resolver
operator|.
name|resolveMapJoinTask
argument_list|(
name|ctx
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|resolved
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

