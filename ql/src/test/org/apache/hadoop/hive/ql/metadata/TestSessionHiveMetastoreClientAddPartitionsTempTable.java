begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|MetastoreCheckinTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SkewedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|CustomIgnoreRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|TestAddPartitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|AbstractMetaStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test class for adding partitions related methods on temporary tables.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
name|MetastoreCheckinTest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSessionHiveMetastoreClientAddPartitionsTempTable
extends|extends
name|TestAddPartitions
block|{
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|public
name|TestSessionHiveMetastoreClientAddPartitionsTempTable
parameter_list|(
name|String
name|name
parameter_list|,
name|AbstractMetaStoreService
name|metaStore
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|metaStore
argument_list|)
expr_stmt|;
name|ignoreRule
operator|=
operator|new
name|CustomIgnoreRule
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|initHiveConf
argument_list|()
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setClient
argument_list|(
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
operator|.
name|getMSC
argument_list|()
argument_list|)
expr_stmt|;
name|getClient
argument_list|()
operator|.
name|dropDatabase
argument_list|(
name|DB_NAME
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getMetaStore
argument_list|()
operator|.
name|cleanWarehouseDirs
argument_list|()
expr_stmt|;
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|create
argument_list|(
name|getClient
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initHiveConf
parameter_list|()
throws|throws
name|HiveException
block|{
name|conf
operator|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_FASTPATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Table
name|createTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
literal|"string"
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|addTableParam
argument_list|(
literal|"partTestTableParamKey"
argument_list|,
literal|"partTestTableParamValue"
argument_list|)
operator|.
name|setPartCols
argument_list|(
name|partCols
argument_list|)
operator|.
name|addStorageDescriptorParam
argument_list|(
literal|"partTestSDParamKey"
argument_list|,
literal|"partTestSDParamValue"
argument_list|)
operator|.
name|setSerdeName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setStoredAsSubDirectories
argument_list|(
literal|false
argument_list|)
operator|.
name|addSerdeParam
argument_list|(
literal|"partTestSerdeParamKey"
argument_list|,
literal|"partTestSerdeParamValue"
argument_list|)
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
operator|.
name|setTemporary
argument_list|(
literal|true
argument_list|)
operator|.
name|create
argument_list|(
name|getClient
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|getClient
argument_list|()
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|protected
name|void
name|createExternalTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_id"
argument_list|,
literal|"int"
argument_list|,
literal|"test col id"
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"test_value"
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|,
literal|"test col value"
argument_list|)
operator|.
name|addPartCol
argument_list|(
name|YEAR_COL_NAME
argument_list|,
name|DEFAULT_COL_TYPE
argument_list|)
operator|.
name|addTableParam
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
operator|.
name|setTemporary
argument_list|(
literal|true
argument_list|)
operator|.
name|create
argument_list|(
name|getClient
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|verifyPartition
parameter_list|(
name|Table
name|table
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|Partition
name|part
init|=
name|getClient
argument_list|()
operator|.
name|getPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"The partition should not be null."
argument_list|,
name|part
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The table name in the partition is not correct."
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partValues
init|=
name|part
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
name|partValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The partition has wrong values."
argument_list|,
name|partValues
operator|.
name|containsAll
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The DB name in the partition is not correct."
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The last access time is not correct."
argument_list|,
literal|123456
argument_list|,
name|part
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The partition's parameter map should contain the partparamkey - partparamvalue pair."
argument_list|,
name|DEFAULT_PARAM_VALUE
operator|+
name|index
argument_list|,
name|part
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|DEFAULT_PARAM_KEY
operator|+
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
name|part
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"The partition's storage descriptor must not be null."
argument_list|,
name|sd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The input format is not correct."
argument_list|,
literal|"TestInputFormat"
operator|+
name|index
argument_list|,
name|sd
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The output format is not correct."
argument_list|,
literal|"TestOutputFormat"
operator|+
name|index
argument_list|,
name|sd
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The serdeInfo name is not correct."
argument_list|,
literal|"partserde"
operator|+
name|index
argument_list|,
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The parameter map of the partition's storage descriptor should contain the partsdkey - partsdvalue pair."
argument_list|,
literal|"partsdvalue"
operator|+
name|index
argument_list|,
name|sd
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"partsdkey"
operator|+
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The parameter's location is not correct."
argument_list|,
name|getMetaStore
argument_list|()
operator|.
name|getWarehouseRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLE_NAME
operator|+
literal|"/"
operator|+
name|name
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The parameter's location should exist on the file system."
argument_list|,
name|getMetaStore
argument_list|()
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The partition should not inherit the table parameters."
argument_list|,
name|part
operator|.
name|getParameters
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|verifyPartitionAttributesDefaultValues
parameter_list|(
name|Partition
name|partition
parameter_list|,
name|String
name|tableLocation
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"The partition's last access time should be set."
argument_list|,
literal|0
argument_list|,
name|partition
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"The partition's create time should be set."
argument_list|,
literal|0
argument_list|,
name|partition
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
name|partition
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"The storage descriptor of the partition must not be null."
argument_list|,
name|sd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The partition location is not correct."
argument_list|,
name|tableLocation
operator|+
literal|"/year=2017"
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The input format doesn't have the default value."
argument_list|,
literal|"org.apache.hadoop.hive.ql.io.HiveInputFormat"
argument_list|,
name|sd
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The output format doesn't have the default value."
argument_list|,
literal|"org.apache.hadoop.hive.ql.io.HiveOutputFormat"
argument_list|,
name|sd
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The compressed attribute doesn't have the default value."
argument_list|,
name|sd
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The storedAsSubDirectories attribute doesn't have the default value."
argument_list|,
name|sd
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The numBuckets attribute doesn't have the default value."
argument_list|,
literal|0
argument_list|,
name|sd
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The default value of the attribute 'bucketCols' should be an empty list."
argument_list|,
name|sd
operator|.
name|getBucketCols
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The default value of the attribute 'sortCols' should be an empty list."
argument_list|,
name|sd
operator|.
name|getSortCols
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Per default the storage descriptor parameters should be empty."
argument_list|,
name|sd
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serdeInfo
init|=
name|sd
operator|.
name|getSerdeInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"The serdeInfo attribute should not be null."
argument_list|,
name|serdeInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"The default value of the serde's name attribute should be null."
argument_list|,
name|serdeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The serde's 'serializationLib' attribute doesn't have the default value."
argument_list|,
literal|"org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe"
argument_list|,
name|serdeInfo
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Per default the serde info parameters should be empty."
argument_list|,
name|serdeInfo
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|SkewedInfo
name|skewedInfo
init|=
name|sd
operator|.
name|getSkewedInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Per default the skewedInfo column names list should be empty."
argument_list|,
name|skewedInfo
operator|.
name|getSkewedColNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Per default the skewedInfo column value list should be empty."
argument_list|,
name|skewedInfo
operator|.
name|getSkewedColValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Per default the skewedInfo column value location map should be empty."
argument_list|,
name|skewedInfo
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Override
specifier|public
name|void
name|testAddPartitionNullLocationInTableToo
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|getClient
argument_list|()
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
name|getClient
argument_list|()
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=2017"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|getMetaStore
argument_list|()
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getTempTables
argument_list|()
operator|.
name|get
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|get
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/year=2017"
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Override
specifier|public
name|void
name|testAddPartitionForExternalTableNullLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"part_add_ext_table"
decl_stmt|;
name|createExternalTable
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|getClient
argument_list|()
operator|.
name|add_partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|Partition
name|resultPart
init|=
name|getClient
argument_list|()
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DEFAULT_YEAR_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|resultPart
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|resultPart
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getTempTables
argument_list|()
operator|.
name|get
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/year=2017"
argument_list|,
name|resultPart
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Override
specifier|public
name|void
name|testAddPartitionsNullLocationInTableToo
parameter_list|()
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Partition
name|partition
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
name|DEFAULT_YEAR_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|getClient
argument_list|()
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
name|getClient
argument_list|()
operator|.
name|getPartition
argument_list|(
name|DB_NAME
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"year=2017"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getTempTables
argument_list|()
operator|.
name|get
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|get
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/year=2017"
argument_list|,
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|getMetaStore
argument_list|()
operator|.
name|isPathExists
argument_list|(
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Override
specifier|public
name|void
name|testAddPartitionsForExternalTableNullLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"part_add_ext_table"
decl_stmt|;
name|createExternalTable
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Partition
name|partition1
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
literal|"2017"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Partition
name|partition2
init|=
name|buildPartition
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
literal|"2018"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partition1
argument_list|,
name|partition2
argument_list|)
decl_stmt|;
name|getClient
argument_list|()
operator|.
name|add_partitions
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|resultParts
init|=
name|getClient
argument_list|()
operator|.
name|getPartitionsByNames
argument_list|(
name|DB_NAME
argument_list|,
name|tableName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"year=2017"
argument_list|,
literal|"year=2018"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|resultParts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resultParts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|defaultTableLocation
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getTempTables
argument_list|()
operator|.
name|get
argument_list|(
name|DB_NAME
argument_list|)
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|String
name|defaultPartLocation1
init|=
name|defaultTableLocation
operator|+
literal|"/year=2017"
decl_stmt|;
name|String
name|defaultPartLocation2
init|=
name|defaultTableLocation
operator|+
literal|"/year=2018"
decl_stmt|;
if|if
condition|(
name|resultParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"2017"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultPartLocation1
argument_list|,
name|resultParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultPartLocation2
argument_list|,
name|resultParts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultPartLocation2
argument_list|,
name|resultParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultPartLocation1
argument_list|,
name|resultParts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

