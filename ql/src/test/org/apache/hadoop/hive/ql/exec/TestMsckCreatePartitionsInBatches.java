begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|CheckResult
operator|.
name|PartitionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Msck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|RetryUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveIgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
specifier|public
class|class
name|TestMsckCreatePartitionsInBatches
block|{
specifier|private
specifier|static
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
specifier|static
name|Msck
name|msck
decl_stmt|;
specifier|private
specifier|final
name|String
name|catName
init|=
literal|"hive"
decl_stmt|;
specifier|private
specifier|final
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
specifier|private
specifier|final
name|String
name|tableName
init|=
literal|"test_msck_batch"
decl_stmt|;
specifier|private
specifier|static
name|IMetaStoreClient
name|db
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|repairOutput
decl_stmt|;
specifier|private
name|Table
name|table
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupClass
parameter_list|()
throws|throws
name|HiveException
throws|,
name|MetaException
block|{
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestMsckCreatePartitionsInBatches
operator|.
name|class
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_MSCK_REPAIR_BATCH_SIZE
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|msck
operator|=
operator|new
name|Msck
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|msck
operator|.
name|init
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|createPartitionedTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|table
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|repairOutput
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanUpTableQuietly
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Table
name|createPartitionedTable
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|db
operator|.
name|dropTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|table
operator|.
name|setCatName
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|table
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|table
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|FieldSchema
name|col1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"key"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|FieldSchema
name|col2
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"value"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|FieldSchema
name|col3
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"city"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setOutputFormat
argument_list|(
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
argument_list|,
name|col2
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setPartitionKeys
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|col3
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|db
operator|.
name|getTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unable to drop and create table "
operator|+
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|+
literal|" because "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
specifier|private
name|void
name|cleanUpTableQuietly
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
try|try
block|{
name|db
operator|.
name|dropTable
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Set
argument_list|<
name|PartitionResult
argument_list|>
name|createPartsNotInMs
parameter_list|(
name|int
name|numOfParts
parameter_list|)
block|{
name|Set
argument_list|<
name|PartitionResult
argument_list|>
name|partsNotInMs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfParts
condition|;
name|i
operator|++
control|)
block|{
name|PartitionResult
name|result
init|=
operator|new
name|PartitionResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|setPartitionName
argument_list|(
literal|"city=dummyCity_"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|partsNotInMs
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|partsNotInMs
return|;
block|}
comment|/**    * Tests the number of times Hive.createPartitions calls are executed with total number of    * partitions to be added are equally divisible by batch size    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testNumberOfCreatePartitionCalls
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create 10 dummy partitions
name|Set
argument_list|<
name|PartitionResult
argument_list|>
name|partsNotInMs
init|=
name|createPartsNotInMs
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|IMetaStoreClient
name|spyDb
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|db
argument_list|)
decl_stmt|;
comment|// batch size of 5 and decaying factor of 2
name|msck
operator|.
name|createPartitionsInBatches
argument_list|(
name|spyDb
argument_list|,
name|repairOutput
argument_list|,
name|partsNotInMs
argument_list|,
name|table
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// there should be 2 calls to create partitions with each batch size of 5
name|ArgumentCaptor
argument_list|<
name|Boolean
argument_list|>
name|ifNotExistsArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|Boolean
argument_list|>
name|needResultsArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|argParts
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
operator|(
name|Class
operator|)
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|spyDb
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|add_partitions
argument_list|(
name|argParts
operator|.
name|capture
argument_list|()
argument_list|,
name|ifNotExistsArg
operator|.
name|capture
argument_list|()
argument_list|,
name|needResultsArg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
comment|// confirm the batch sizes were 5, 5 in the two calls to create partitions
name|List
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|apds
init|=
name|argParts
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
name|int
name|retryAttempt
init|=
literal|1
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected batch size in retry attempt %d "
argument_list|,
name|retryAttempt
operator|++
argument_list|)
argument_list|,
literal|5
argument_list|,
name|apds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected batch size in retry attempt %d "
argument_list|,
name|retryAttempt
operator|++
argument_list|)
argument_list|,
literal|5
argument_list|,
name|apds
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ifNotExistsArg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|needResultsArg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the number of times Hive.createPartitions calls are executed with total number of    * partitions to be added are not exactly divisible by batch size    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testUnevenNumberOfCreatePartitionCalls
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create 9 dummy partitions
name|Set
argument_list|<
name|PartitionResult
argument_list|>
name|partsNotInMs
init|=
name|createPartsNotInMs
argument_list|(
literal|9
argument_list|)
decl_stmt|;
name|IMetaStoreClient
name|spyDb
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|db
argument_list|)
decl_stmt|;
comment|// batch size of 5 and decaying factor of 2
name|msck
operator|.
name|createPartitionsInBatches
argument_list|(
name|spyDb
argument_list|,
name|repairOutput
argument_list|,
name|partsNotInMs
argument_list|,
name|table
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// there should be 2 calls to create partitions with batch sizes of 5, 4
name|ArgumentCaptor
argument_list|<
name|Boolean
argument_list|>
name|ifNotExistsArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|Boolean
argument_list|>
name|needResultsArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|argParts
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
operator|(
name|Class
operator|)
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|spyDb
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|add_partitions
argument_list|(
name|argParts
operator|.
name|capture
argument_list|()
argument_list|,
name|ifNotExistsArg
operator|.
name|capture
argument_list|()
argument_list|,
name|needResultsArg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
comment|// confirm the batch sizes were 5, 4 in the two calls to create partitions
name|List
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|apds
init|=
name|argParts
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
name|int
name|retryAttempt
init|=
literal|1
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected batch size in retry attempt %d "
argument_list|,
name|retryAttempt
operator|++
argument_list|)
argument_list|,
literal|5
argument_list|,
name|apds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected batch size in retry attempt %d "
argument_list|,
name|retryAttempt
operator|++
argument_list|)
argument_list|,
literal|4
argument_list|,
name|apds
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ifNotExistsArg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|needResultsArg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the number of times Hive.createPartitions calls are executed with total number of    * partitions exactly equal to batch size    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testEqualNumberOfPartitions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create 13 dummy partitions
name|Set
argument_list|<
name|PartitionResult
argument_list|>
name|partsNotInMs
init|=
name|createPartsNotInMs
argument_list|(
literal|13
argument_list|)
decl_stmt|;
name|IMetaStoreClient
name|spyDb
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|db
argument_list|)
decl_stmt|;
comment|// batch size of 13 and decaying factor of 2
name|msck
operator|.
name|createPartitionsInBatches
argument_list|(
name|spyDb
argument_list|,
name|repairOutput
argument_list|,
name|partsNotInMs
argument_list|,
name|table
argument_list|,
literal|13
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// there should be 1 call to create partitions with batch sizes of 13
name|ArgumentCaptor
argument_list|<
name|Boolean
argument_list|>
name|ifNotExistsArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|Boolean
argument_list|>
name|needResultsArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|argParts
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
operator|(
name|Class
operator|)
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// there should be 1 call to create partitions with batch sizes of 13
name|Mockito
operator|.
name|verify
argument_list|(
name|spyDb
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|add_partitions
argument_list|(
name|argParts
operator|.
name|capture
argument_list|()
argument_list|,
name|ifNotExistsArg
operator|.
name|capture
argument_list|()
argument_list|,
name|needResultsArg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of batch size"
argument_list|,
literal|13
argument_list|,
name|argParts
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ifNotExistsArg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|needResultsArg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the number of times Hive.createPartitions calls are executed with total number of    * partitions to is less than batch size    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSmallNumberOfPartitions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create 10 dummy partitions
name|Set
argument_list|<
name|PartitionResult
argument_list|>
name|partsNotInMs
init|=
name|createPartsNotInMs
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|IMetaStoreClient
name|spyDb
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|db
argument_list|)
decl_stmt|;
comment|// batch size of 20 and decaying factor of 2
name|msck
operator|.
name|createPartitionsInBatches
argument_list|(
name|spyDb
argument_list|,
name|repairOutput
argument_list|,
name|partsNotInMs
argument_list|,
name|table
argument_list|,
literal|20
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// there should be 1 call to create partitions with batch sizes of 10
name|Mockito
operator|.
name|verify
argument_list|(
name|spyDb
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|add_partitions
argument_list|(
name|Mockito
operator|.
name|anyObject
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Boolean
argument_list|>
name|ifNotExistsArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|Boolean
argument_list|>
name|needResultsArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|argParts
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
operator|(
name|Class
operator|)
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// there should be 1 call to create partitions with batch sizes of 10
name|Mockito
operator|.
name|verify
argument_list|(
name|spyDb
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|add_partitions
argument_list|(
name|argParts
operator|.
name|capture
argument_list|()
argument_list|,
name|ifNotExistsArg
operator|.
name|capture
argument_list|()
argument_list|,
name|needResultsArg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of batch size"
argument_list|,
literal|10
argument_list|,
name|argParts
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ifNotExistsArg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|needResultsArg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the number of calls to createPartitions and the respective batch sizes when first call to    * createPartitions throws HiveException. The batch size should be reduced by the decayingFactor    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testBatchingWhenException
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create 13 dummy partitions
name|Set
argument_list|<
name|PartitionResult
argument_list|>
name|partsNotInMs
init|=
name|createPartsNotInMs
argument_list|(
literal|23
argument_list|)
decl_stmt|;
name|IMetaStoreClient
name|spyDb
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|db
argument_list|)
decl_stmt|;
comment|// first call to createPartitions should throw exception
name|Mockito
operator|.
name|doThrow
argument_list|(
name|HiveException
operator|.
name|class
argument_list|)
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|spyDb
argument_list|)
operator|.
name|add_partitions
argument_list|(
name|Mockito
operator|.
name|anyObject
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with a batch size of 30 and decaying factor of 2
name|msck
operator|.
name|createPartitionsInBatches
argument_list|(
name|spyDb
argument_list|,
name|repairOutput
argument_list|,
name|partsNotInMs
argument_list|,
name|table
argument_list|,
literal|30
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// confirm the batch sizes were 23, 15, 8 in the three calls to create partitions
name|ArgumentCaptor
argument_list|<
name|Boolean
argument_list|>
name|ifNotExistsArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|Boolean
argument_list|>
name|needResultsArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|argParts
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
operator|(
name|Class
operator|)
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// there should be 3 calls to create partitions with batch sizes of 23, 15, 8
name|Mockito
operator|.
name|verify
argument_list|(
name|spyDb
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|add_partitions
argument_list|(
name|argParts
operator|.
name|capture
argument_list|()
argument_list|,
name|ifNotExistsArg
operator|.
name|capture
argument_list|()
argument_list|,
name|needResultsArg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|apds
init|=
name|argParts
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
name|int
name|retryAttempt
init|=
literal|1
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected batch size in retry attempt %d "
argument_list|,
name|retryAttempt
operator|++
argument_list|)
argument_list|,
literal|23
argument_list|,
name|apds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected batch size in retry attempt %d "
argument_list|,
name|retryAttempt
operator|++
argument_list|)
argument_list|,
literal|15
argument_list|,
name|apds
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected batch size in retry attempt %d "
argument_list|,
name|retryAttempt
operator|++
argument_list|)
argument_list|,
literal|8
argument_list|,
name|apds
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ifNotExistsArg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|needResultsArg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the retries exhausted case when Hive.createPartitions method call always keep throwing    * HiveException. The batch sizes should exponentially decreased based on the decaying factor and    * ultimately give up when it reaches 0    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testRetriesExhaustedBatchSize
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|PartitionResult
argument_list|>
name|partsNotInMs
init|=
name|createPartsNotInMs
argument_list|(
literal|17
argument_list|)
decl_stmt|;
name|IMetaStoreClient
name|spyDb
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
name|HiveException
operator|.
name|class
argument_list|)
operator|.
name|when
argument_list|(
name|spyDb
argument_list|)
operator|.
name|add_partitions
argument_list|(
name|Mockito
operator|.
name|anyObject
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|// batch size of 5 and decaying factor of 2
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|msck
operator|.
name|createPartitionsInBatches
argument_list|(
name|spyDb
argument_list|,
name|repairOutput
argument_list|,
name|partsNotInMs
argument_list|,
name|table
argument_list|,
literal|30
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|retryEx
parameter_list|)
block|{
name|ex
operator|=
name|retryEx
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Exception was expected but was not thrown"
argument_list|,
name|ex
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected class of exception thrown"
argument_list|,
name|ex
operator|instanceof
name|RetryUtilities
operator|.
name|RetryException
argument_list|)
expr_stmt|;
comment|// there should be 5 calls to create partitions with batch sizes of 17, 15, 7, 3, 1
name|ArgumentCaptor
argument_list|<
name|Boolean
argument_list|>
name|ifNotExistsArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|Boolean
argument_list|>
name|needResultsArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|argParts
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
operator|(
name|Class
operator|)
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// there should be 5 calls to create partitions with batch sizes of 17, 15, 7, 3, 1
name|Mockito
operator|.
name|verify
argument_list|(
name|spyDb
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|add_partitions
argument_list|(
name|argParts
operator|.
name|capture
argument_list|()
argument_list|,
name|ifNotExistsArg
operator|.
name|capture
argument_list|()
argument_list|,
name|needResultsArg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|apds
init|=
name|argParts
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
name|int
name|retryAttempt
init|=
literal|1
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected batch size in retry attempt %d "
argument_list|,
name|retryAttempt
operator|++
argument_list|)
argument_list|,
literal|17
argument_list|,
name|apds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected batch size in retry attempt %d "
argument_list|,
name|retryAttempt
operator|++
argument_list|)
argument_list|,
literal|15
argument_list|,
name|apds
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected batch size in retry attempt %d "
argument_list|,
name|retryAttempt
operator|++
argument_list|)
argument_list|,
literal|7
argument_list|,
name|apds
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected batch size in retry attempt %d "
argument_list|,
name|retryAttempt
operator|++
argument_list|)
argument_list|,
literal|3
argument_list|,
name|apds
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected batch size in retry attempt %d "
argument_list|,
name|retryAttempt
operator|++
argument_list|)
argument_list|,
literal|1
argument_list|,
name|apds
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ifNotExistsArg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|needResultsArg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the maximum retry attempts provided by configuration    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMaxRetriesReached
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|PartitionResult
argument_list|>
name|partsNotInMs
init|=
name|createPartsNotInMs
argument_list|(
literal|17
argument_list|)
decl_stmt|;
name|IMetaStoreClient
name|spyDb
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
name|HiveException
operator|.
name|class
argument_list|)
operator|.
name|when
argument_list|(
name|spyDb
argument_list|)
operator|.
name|add_partitions
argument_list|(
name|Mockito
operator|.
name|anyObject
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|// batch size of 5 and decaying factor of 2
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|msck
operator|.
name|createPartitionsInBatches
argument_list|(
name|spyDb
argument_list|,
name|repairOutput
argument_list|,
name|partsNotInMs
argument_list|,
name|table
argument_list|,
literal|30
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|retryEx
parameter_list|)
block|{
name|ex
operator|=
name|retryEx
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Exception was expected but was not thrown"
argument_list|,
name|ex
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected class of exception thrown"
argument_list|,
name|ex
operator|instanceof
name|RetryUtilities
operator|.
name|RetryException
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Boolean
argument_list|>
name|ifNotExistsArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|Boolean
argument_list|>
name|needResultsArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|argParts
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
operator|(
name|Class
operator|)
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|spyDb
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|add_partitions
argument_list|(
name|argParts
operator|.
name|capture
argument_list|()
argument_list|,
name|ifNotExistsArg
operator|.
name|capture
argument_list|()
argument_list|,
name|needResultsArg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|apds
init|=
name|argParts
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
name|int
name|retryAttempt
init|=
literal|1
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected batch size in retry attempt %d "
argument_list|,
name|retryAttempt
operator|++
argument_list|)
argument_list|,
literal|17
argument_list|,
name|apds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected batch size in retry attempt %d "
argument_list|,
name|retryAttempt
operator|++
argument_list|)
argument_list|,
literal|15
argument_list|,
name|apds
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ifNotExistsArg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|needResultsArg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests when max number of retries is set to 1. In this case the number of retries should    * be specified    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testOneMaxRetries
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|PartitionResult
argument_list|>
name|partsNotInMs
init|=
name|createPartsNotInMs
argument_list|(
literal|17
argument_list|)
decl_stmt|;
name|IMetaStoreClient
name|spyDb
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
name|HiveException
operator|.
name|class
argument_list|)
operator|.
name|when
argument_list|(
name|spyDb
argument_list|)
operator|.
name|add_partitions
argument_list|(
name|Mockito
operator|.
name|anyObject
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|// batch size of 5 and decaying factor of 2
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|msck
operator|.
name|createPartitionsInBatches
argument_list|(
name|spyDb
argument_list|,
name|repairOutput
argument_list|,
name|partsNotInMs
argument_list|,
name|table
argument_list|,
literal|30
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|retryEx
parameter_list|)
block|{
name|ex
operator|=
name|retryEx
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Exception was expected but was not thrown"
argument_list|,
name|ex
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected class of exception thrown"
argument_list|,
name|ex
operator|instanceof
name|RetryUtilities
operator|.
name|RetryException
argument_list|)
expr_stmt|;
comment|// there should be 5 calls to create partitions with batch sizes of 17, 15, 7, 3, 1
name|ArgumentCaptor
argument_list|<
name|Boolean
argument_list|>
name|ifNotExistsArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|Boolean
argument_list|>
name|needResultsArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|argParts
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
operator|(
name|Class
operator|)
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// there should be 5 calls to create partitions with batch sizes of 17, 15, 7, 3, 1
name|Mockito
operator|.
name|verify
argument_list|(
name|spyDb
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|add_partitions
argument_list|(
name|argParts
operator|.
name|capture
argument_list|()
argument_list|,
name|ifNotExistsArg
operator|.
name|capture
argument_list|()
argument_list|,
name|needResultsArg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|apds
init|=
name|argParts
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
name|int
name|retryAttempt
init|=
literal|1
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected batch size in retry attempt %d "
argument_list|,
name|retryAttempt
operator|++
argument_list|)
argument_list|,
literal|17
argument_list|,
name|apds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ifNotExistsArg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|needResultsArg
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

