begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
specifier|public
class|class
name|TestIOContextMap
block|{
specifier|private
name|void
name|syncThreadStart
parameter_list|(
specifier|final
name|CountDownLatch
name|cdlIn
parameter_list|,
specifier|final
name|CountDownLatch
name|cdlOut
parameter_list|)
block|{
name|cdlIn
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|cdlOut
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMRTezGlobalMap
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tests concurrent modification, and that results are the same per input across threads
comment|// but different between inputs.
specifier|final
name|int
name|THREAD_COUNT
init|=
literal|2
decl_stmt|,
name|ITER_COUNT
init|=
literal|1000
decl_stmt|;
specifier|final
name|AtomicInteger
name|countdown
init|=
operator|new
name|AtomicInteger
argument_list|(
name|ITER_COUNT
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|phase1End
init|=
operator|new
name|CountDownLatch
argument_list|(
name|THREAD_COUNT
argument_list|)
decl_stmt|;
specifier|final
name|IOContext
index|[]
name|results
init|=
operator|new
name|IOContext
index|[
name|ITER_COUNT
index|]
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|THREAD_COUNT
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|cdlIn
init|=
operator|new
name|CountDownLatch
argument_list|(
name|THREAD_COUNT
argument_list|)
decl_stmt|,
name|cdlOut
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|FutureTask
argument_list|<
name|Void
argument_list|>
index|[]
name|tasks
init|=
operator|new
name|FutureTask
index|[
name|THREAD_COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tasks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|tasks
index|[
name|i
index|]
operator|=
operator|new
name|FutureTask
argument_list|<
name|Void
argument_list|>
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|syncThreadStart
argument_list|(
name|cdlIn
argument_list|,
name|cdlOut
argument_list|)
expr_stmt|;
comment|// Phase 1 - create objects.
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|nextIx
init|=
name|countdown
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextIx
operator|<
literal|0
condition|)
break|break;
name|conf
operator|.
name|set
argument_list|(
name|Utilities
operator|.
name|INPUT_NAME
argument_list|,
literal|"Input "
operator|+
name|nextIx
argument_list|)
expr_stmt|;
name|results
index|[
name|nextIx
index|]
operator|=
name|IOContextMap
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextIx
operator|==
literal|0
condition|)
break|break;
block|}
name|phase1End
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|phase1End
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Phase 2 - verify we get the expected objects created by all threads.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITER_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|Utilities
operator|.
name|INPUT_NAME
argument_list|,
literal|"Input "
operator|+
name|i
argument_list|)
expr_stmt|;
name|IOContext
name|ctx
init|=
name|IOContextMap
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|results
index|[
name|i
index|]
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|tasks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|cdlIn
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wait for all threads to be ready.
name|cdlOut
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// Release them at the same time.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tasks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|tasks
index|[
name|i
index|]
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|IOContext
argument_list|>
name|resultSet
init|=
name|Sets
operator|.
name|newIdentityHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|add
argument_list|(
name|results
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// All the objects must be different.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTezLlapAttemptMap
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tests that different threads get the same object per attempt per input, and different
comment|// between attempts/inputs; that attempt is inherited between threads; and that clearing
comment|// the attempt produces a different result.
specifier|final
name|int
name|THREAD_COUNT
init|=
literal|2
decl_stmt|,
name|ITER_COUNT
init|=
literal|1000
decl_stmt|,
name|ATTEMPT_COUNT
init|=
literal|3
decl_stmt|;
specifier|final
name|AtomicInteger
name|countdown
init|=
operator|new
name|AtomicInteger
argument_list|(
name|ITER_COUNT
argument_list|)
decl_stmt|;
specifier|final
name|IOContext
index|[]
name|results
init|=
operator|new
name|IOContext
index|[
name|ITER_COUNT
operator|*
name|ATTEMPT_COUNT
index|]
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|THREAD_COUNT
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|cdlIn
init|=
operator|new
name|CountDownLatch
argument_list|(
name|THREAD_COUNT
argument_list|)
decl_stmt|,
name|cdlOut
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|FutureTask
argument_list|<
name|Void
argument_list|>
index|[]
name|tasks
init|=
operator|new
name|FutureTask
index|[
name|THREAD_COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tasks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|tasks
index|[
name|i
index|]
operator|=
operator|new
name|FutureTask
argument_list|<
name|Void
argument_list|>
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|,
name|conf2
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|syncThreadStart
argument_list|(
name|cdlIn
argument_list|,
name|cdlOut
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|nextIx
init|=
name|countdown
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextIx
operator|<
literal|0
condition|)
break|break;
name|String
name|input1
init|=
literal|"Input "
operator|+
name|nextIx
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Utilities
operator|.
name|INPUT_NAME
argument_list|,
name|input1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ATTEMPT_COUNT
condition|;
operator|++
name|j
control|)
block|{
name|String
name|attemptId
init|=
literal|"Attempt "
operator|+
name|nextIx
operator|+
literal|":"
operator|+
name|j
decl_stmt|;
name|IOContextMap
operator|.
name|setThreadAttemptId
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
specifier|final
name|IOContext
name|r1
init|=
name|results
index|[
operator|(
name|nextIx
operator|*
name|ATTEMPT_COUNT
operator|)
operator|+
name|j
index|]
operator|=
name|IOContextMap
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// For some attempts, check inheritance.
if|if
condition|(
operator|(
name|nextIx
operator|%
operator|(
name|ITER_COUNT
operator|/
literal|10
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
name|String
name|input2
init|=
literal|"Input2 "
operator|+
name|nextIx
decl_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|Utilities
operator|.
name|INPUT_NAME
argument_list|,
name|input2
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|IOContext
argument_list|>
name|ref2
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertSame
argument_list|(
name|r1
argument_list|,
name|IOContextMap
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|ref2
operator|.
name|set
argument_list|(
name|IOContextMap
operator|.
name|get
argument_list|(
name|conf2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|ref2
operator|.
name|get
argument_list|()
argument_list|,
name|IOContextMap
operator|.
name|get
argument_list|(
name|conf2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Don't clear the attempt ID, or the stuff will be cleared.
block|}
if|if
condition|(
name|nextIx
operator|==
literal|0
condition|)
break|break;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|tasks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|cdlIn
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wait for all threads to be ready.
name|cdlOut
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// Release them at the same time.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tasks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|tasks
index|[
name|i
index|]
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|IOContext
argument_list|>
name|resultSet
init|=
name|Sets
operator|.
name|newIdentityHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITER_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|Utilities
operator|.
name|INPUT_NAME
argument_list|,
literal|"Input "
operator|+
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ATTEMPT_COUNT
condition|;
operator|++
name|j
control|)
block|{
name|String
name|attemptId
init|=
literal|"Attempt "
operator|+
name|i
operator|+
literal|":"
operator|+
name|j
decl_stmt|;
name|IOContext
name|result
init|=
name|results
index|[
operator|(
name|i
operator|*
name|ATTEMPT_COUNT
operator|)
operator|+
name|j
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|add
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// All the objects must be different.
name|IOContextMap
operator|.
name|setThreadAttemptId
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|result
argument_list|,
name|IOContextMap
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Matching result for attemptId + input.
name|IOContextMap
operator|.
name|clearThreadAttempt
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|IOContextMap
operator|.
name|setThreadAttemptId
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|result
argument_list|,
name|IOContextMap
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Different result after clearing.
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSparkThreadLocal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that input name does not change IOContext returned, and that each thread gets its own.
specifier|final
name|Configuration
name|conf1
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf1
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
operator|.
name|varname
argument_list|,
literal|"spark"
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf2
init|=
operator|new
name|Configuration
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|Utilities
operator|.
name|INPUT_NAME
argument_list|,
literal|"Other input"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|THREAD_COUNT
init|=
literal|2
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|THREAD_COUNT
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|cdlIn
init|=
operator|new
name|CountDownLatch
argument_list|(
name|THREAD_COUNT
argument_list|)
decl_stmt|,
name|cdlOut
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|FutureTask
argument_list|<
name|IOContext
argument_list|>
index|[]
name|tasks
init|=
operator|new
name|FutureTask
index|[
name|THREAD_COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tasks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|tasks
index|[
name|i
index|]
operator|=
operator|new
name|FutureTask
argument_list|<
name|IOContext
argument_list|>
argument_list|(
operator|new
name|Callable
argument_list|<
name|IOContext
argument_list|>
argument_list|()
block|{
specifier|public
name|IOContext
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|syncThreadStart
argument_list|(
name|cdlIn
argument_list|,
name|cdlOut
argument_list|)
expr_stmt|;
name|IOContext
name|c1
init|=
name|IOContextMap
operator|.
name|get
argument_list|(
name|conf1
argument_list|)
decl_stmt|,
name|c2
init|=
name|IOContextMap
operator|.
name|get
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
expr_stmt|;
return|return
name|c1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|tasks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|cdlIn
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wait for all threads to be ready.
name|cdlOut
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// Release them at the same time.
name|Set
argument_list|<
name|IOContext
argument_list|>
name|results
init|=
name|Sets
operator|.
name|newIdentityHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tasks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|results
operator|.
name|add
argument_list|(
name|tasks
index|[
name|i
index|]
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// All the objects must be different.
block|}
block|}
block|}
end_class

end_unit

