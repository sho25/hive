begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|listbucketingpruner
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  * Test {@link DynamicMultiDimeContainer}  *  */
end_comment

begin_class
specifier|public
class|class
name|TestDynamicMultiDimeCollection
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
name|String
name|DEF_DIR
init|=
literal|"default"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testUniqueElementsList1
parameter_list|()
block|{
comment|// (1,a,x), (2,b,x), (1,c,x), (2,a,y)
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"a"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2"
argument_list|,
literal|"b"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v3
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"c"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v4
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2"
argument_list|,
literal|"a"
argument_list|,
literal|"y"
argument_list|)
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|v3
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|v4
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|actuals
init|=
name|ListBucketingPruner
operator|.
name|DynamicMultiDimensionalCollection
operator|.
name|uniqueElementsList
argument_list|(
name|values
argument_list|,
name|DEF_DIR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expecteds
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|v1
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|v2
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|v3
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|expecteds
operator|.
name|add
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|expecteds
operator|.
name|add
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|expecteds
operator|.
name|add
argument_list|(
name|v3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expecteds
argument_list|,
name|actuals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUniqueElementsList2
parameter_list|()
block|{
comment|// (1,a,x), (2,b,x), (1,c,x), (2,a,y)
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"a"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|actuals
init|=
name|ListBucketingPruner
operator|.
name|DynamicMultiDimensionalCollection
operator|.
name|uniqueElementsList
argument_list|(
name|values
argument_list|,
name|DEF_DIR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expecteds
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|v1
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v3
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|expecteds
operator|.
name|add
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|expecteds
operator|.
name|add
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|expecteds
operator|.
name|add
argument_list|(
name|v3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expecteds
argument_list|,
name|actuals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUniqueElementsList3
parameter_list|()
block|{
comment|// (1,a,x), (2,b,x), (1,c,x), (2,a,y)
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v3
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"3"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v4
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"4"
argument_list|)
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|v3
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|v4
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|actuals
init|=
name|ListBucketingPruner
operator|.
name|DynamicMultiDimensionalCollection
operator|.
name|uniqueElementsList
argument_list|(
name|values
argument_list|,
name|DEF_DIR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expecteds
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|v1
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|expecteds
operator|.
name|add
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expecteds
argument_list|,
name|actuals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlat3
parameter_list|()
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|uniqSkewedElements
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v3
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|uniqSkewedElements
operator|.
name|add
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|uniqSkewedElements
operator|.
name|add
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|uniqSkewedElements
operator|.
name|add
argument_list|(
name|v3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|actuals
init|=
name|ListBucketingPruner
operator|.
name|DynamicMultiDimensionalCollection
operator|.
name|flat
argument_list|(
name|uniqSkewedElements
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|actuals
operator|.
name|size
argument_list|()
operator|==
literal|36
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlat2
parameter_list|()
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|uniqSkewedElements
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
decl_stmt|;
name|uniqSkewedElements
operator|.
name|add
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|actual
init|=
name|ListBucketingPruner
operator|.
name|DynamicMultiDimensionalCollection
operator|.
name|flat
argument_list|(
name|uniqSkewedElements
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|v1
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2"
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlat1
parameter_list|()
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|uniqSkewedElements
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|)
decl_stmt|;
name|uniqSkewedElements
operator|.
name|add
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|uniqSkewedElements
operator|.
name|add
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|actual
init|=
name|ListBucketingPruner
operator|.
name|DynamicMultiDimensionalCollection
operator|.
name|flat
argument_list|(
name|uniqSkewedElements
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|v1
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|v2
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v3
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2"
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v4
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2"
argument_list|,
literal|"4"
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|v3
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|v4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

