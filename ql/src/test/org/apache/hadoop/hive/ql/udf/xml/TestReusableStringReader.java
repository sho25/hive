begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|UDFXPathUtil
operator|.
name|ReusableStringReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestReusableStringReader
block|{
specifier|private
specifier|static
specifier|final
name|String
name|fox
init|=
literal|"Quick brown fox jumps over the lazy dog."
decl_stmt|;
comment|/**    * Test empty {@link ReusableStringReader}     */
annotation|@
name|Test
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|IOException
block|{
name|Reader
name|reader
init|=
operator|new
name|ReusableStringReader
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|ch
init|=
name|reader
operator|.
name|read
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"IOException expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|boolean
name|ready
init|=
name|reader
operator|.
name|ready
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"IOException expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// expected
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMarkReset
parameter_list|()
throws|throws
name|IOException
block|{
name|Reader
name|reader
init|=
operator|new
name|ReusableStringReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|markSupported
argument_list|()
condition|)
block|{
operator|(
operator|(
name|ReusableStringReader
operator|)
name|reader
operator|)
operator|.
name|set
argument_list|(
name|fox
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|ready
argument_list|()
argument_list|)
expr_stmt|;
name|char
index|[]
name|cc
init|=
operator|new
name|char
index|[
literal|6
index|]
decl_stmt|;
name|int
name|read
decl_stmt|;
name|read
operator|=
name|reader
operator|.
name|read
argument_list|(
name|cc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Quick "
argument_list|,
operator|new
name|String
argument_list|(
name|cc
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|mark
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|read
operator|=
name|reader
operator|.
name|read
argument_list|(
name|cc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"brown "
argument_list|,
operator|new
name|String
argument_list|(
name|cc
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|reset
argument_list|()
expr_stmt|;
name|read
operator|=
name|reader
operator|.
name|read
argument_list|(
name|cc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"brown "
argument_list|,
operator|new
name|String
argument_list|(
name|cc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSkip
parameter_list|()
throws|throws
name|IOException
block|{
name|Reader
name|reader
init|=
operator|new
name|ReusableStringReader
argument_list|()
decl_stmt|;
operator|(
operator|(
name|ReusableStringReader
operator|)
name|reader
operator|)
operator|.
name|set
argument_list|(
name|fox
argument_list|)
expr_stmt|;
comment|// skip entire the data:
name|long
name|skipped
init|=
name|reader
operator|.
name|skip
argument_list|(
name|fox
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fox
operator|.
name|length
argument_list|()
argument_list|,
name|skipped
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|reader
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ReusableStringReader
operator|)
name|reader
operator|)
operator|.
name|set
argument_list|(
name|fox
argument_list|)
expr_stmt|;
comment|// reset the data
name|char
index|[]
name|cc
init|=
operator|new
name|char
index|[
literal|6
index|]
decl_stmt|;
name|int
name|read
decl_stmt|;
name|read
operator|=
name|reader
operator|.
name|read
argument_list|(
name|cc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Quick "
argument_list|,
operator|new
name|String
argument_list|(
name|cc
argument_list|)
argument_list|)
expr_stmt|;
comment|// skip some piece of data:
name|skipped
operator|=
name|reader
operator|.
name|skip
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|skipped
argument_list|)
expr_stmt|;
name|read
operator|=
name|reader
operator|.
name|read
argument_list|(
name|cc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dog."
argument_list|,
operator|new
name|String
argument_list|(
name|cc
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
argument_list|)
expr_stmt|;
comment|// skip when already at EOF:
name|skipped
operator|=
name|reader
operator|.
name|skip
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|skipped
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|reader
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

