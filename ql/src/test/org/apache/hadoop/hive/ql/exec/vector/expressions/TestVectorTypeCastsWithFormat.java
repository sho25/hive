begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Tests vectorized type cast udfs CastDateToStringWithFormat, CastTimestampToStringWithFormat,  * CastStringToDateWithFormat, CastStringToTimestampWithFormat.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorTypeCastsWithFormat
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCastDateToStringWithFormat
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|b
init|=
name|TestVectorMathFunctions
operator|.
name|getVectorizedRowBatchDateInStringOutFormatted
argument_list|()
decl_stmt|;
name|BytesColumnVector
name|resultV
init|=
operator|(
name|BytesColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastDateToStringWithFormat
argument_list|(
literal|0
argument_list|,
literal|"yyyy"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|verifyString
argument_list|(
literal|0
argument_list|,
literal|"2019"
argument_list|,
name|resultV
argument_list|)
expr_stmt|;
name|verifyString
argument_list|(
literal|1
argument_list|,
literal|"1776"
argument_list|,
name|resultV
argument_list|)
expr_stmt|;
name|verifyString
argument_list|(
literal|2
argument_list|,
literal|"2012"
argument_list|,
name|resultV
argument_list|)
expr_stmt|;
name|verifyString
argument_list|(
literal|3
argument_list|,
literal|"1580"
argument_list|,
name|resultV
argument_list|)
expr_stmt|;
name|verifyString
argument_list|(
literal|4
argument_list|,
literal|"0005"
argument_list|,
name|resultV
argument_list|)
expr_stmt|;
name|verifyString
argument_list|(
literal|5
argument_list|,
literal|"9999"
argument_list|,
name|resultV
argument_list|)
expr_stmt|;
name|expr
operator|=
operator|new
name|CastDateToStringWithFormat
argument_list|(
literal|0
argument_list|,
literal|"MM"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|resultV
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|resultV
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|verifyString
argument_list|(
literal|0
argument_list|,
literal|"12"
argument_list|,
name|resultV
argument_list|)
expr_stmt|;
name|verifyString
argument_list|(
literal|1
argument_list|,
literal|"07"
argument_list|,
name|resultV
argument_list|)
expr_stmt|;
name|verifyString
argument_list|(
literal|2
argument_list|,
literal|"02"
argument_list|,
name|resultV
argument_list|)
expr_stmt|;
name|verifyString
argument_list|(
literal|3
argument_list|,
literal|"08"
argument_list|,
name|resultV
argument_list|)
expr_stmt|;
name|verifyString
argument_list|(
literal|4
argument_list|,
literal|"01"
argument_list|,
name|resultV
argument_list|)
expr_stmt|;
name|verifyString
argument_list|(
literal|5
argument_list|,
literal|"12"
argument_list|,
name|resultV
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastTimestampToStringWithFormat
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|b
init|=
name|TestVectorMathFunctions
operator|.
name|getVectorizedRowBatchTimestampInStringOutFormatted
argument_list|()
decl_stmt|;
name|BytesColumnVector
name|resultV
init|=
operator|(
name|BytesColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastTimestampToStringWithFormat
argument_list|(
literal|0
argument_list|,
literal|"yyyy"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2019"
argument_list|,
name|getStringFromBytesColumnVector
argument_list|(
name|resultV
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1776"
argument_list|,
name|getStringFromBytesColumnVector
argument_list|(
name|resultV
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2012"
argument_list|,
name|getStringFromBytesColumnVector
argument_list|(
name|resultV
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1580"
argument_list|,
name|getStringFromBytesColumnVector
argument_list|(
name|resultV
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0005"
argument_list|,
name|getStringFromBytesColumnVector
argument_list|(
name|resultV
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"9999"
argument_list|,
name|getStringFromBytesColumnVector
argument_list|(
name|resultV
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|resultV
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|resultV
expr_stmt|;
name|expr
operator|=
operator|new
name|CastTimestampToStringWithFormat
argument_list|(
literal|0
argument_list|,
literal|"HH24"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"19"
argument_list|,
name|getStringFromBytesColumnVector
argument_list|(
name|resultV
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"17"
argument_list|,
name|getStringFromBytesColumnVector
argument_list|(
name|resultV
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"23"
argument_list|,
name|getStringFromBytesColumnVector
argument_list|(
name|resultV
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"00"
argument_list|,
name|getStringFromBytesColumnVector
argument_list|(
name|resultV
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"00"
argument_list|,
name|getStringFromBytesColumnVector
argument_list|(
name|resultV
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"23"
argument_list|,
name|getStringFromBytesColumnVector
argument_list|(
name|resultV
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastStringToTimestampWithFormat
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|b
init|=
name|TestVectorMathFunctions
operator|.
name|getVectorizedRowBatchStringInTimestampOutFormatted
argument_list|()
decl_stmt|;
name|TimestampColumnVector
name|resultV
decl_stmt|;
name|resultV
operator|=
operator|new
name|TimestampColumnVector
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|resultV
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastStringToTimestampWithFormat
argument_list|(
literal|0
argument_list|,
literal|"yyyy.mm.dd HH24.mi.ss.ff"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|verifyTimestamp
argument_list|(
literal|"2019-12-31 00:00:00.999999999"
argument_list|,
name|resultV
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyTimestamp
argument_list|(
literal|"1776-07-04 17:07:06.177617761"
argument_list|,
name|resultV
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyTimestamp
argument_list|(
literal|"2012-02-29 23:59:59.999999999"
argument_list|,
name|resultV
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyTimestamp
argument_list|(
literal|"1580-08-08 00:00:00"
argument_list|,
name|resultV
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verifyTimestamp
argument_list|(
literal|"0005-01-01 00:00:00"
argument_list|,
name|resultV
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|verifyTimestamp
argument_list|(
literal|"9999-12-31 23:59:59.999999999"
argument_list|,
name|resultV
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyTimestamp
parameter_list|(
name|String
name|tsString
parameter_list|,
name|TimestampColumnVector
name|resultV
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|tsString
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
argument_list|,
name|resultV
operator|.
name|time
index|[
name|index
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|tsString
argument_list|)
operator|.
name|getNanos
argument_list|()
argument_list|,
name|resultV
operator|.
name|nanos
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastStringToDateWithFormat
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|b
init|=
name|TestVectorMathFunctions
operator|.
name|getVectorizedRowBatchStringInDateOutFormatted
argument_list|()
decl_stmt|;
name|LongColumnVector
name|resultV
decl_stmt|;
name|resultV
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|resultV
expr_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|CastStringToDateWithFormat
argument_list|(
literal|0
argument_list|,
literal|"yyyy.mm.dd"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2019-12-31"
argument_list|)
operator|.
name|toEpochDay
argument_list|()
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1776-07-04"
argument_list|)
operator|.
name|toEpochDay
argument_list|()
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2012-02-29"
argument_list|)
operator|.
name|toEpochDay
argument_list|()
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1580-08-08"
argument_list|)
operator|.
name|toEpochDay
argument_list|()
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
literal|"0005-01-01"
argument_list|)
operator|.
name|toEpochDay
argument_list|()
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
literal|"9999-12-31"
argument_list|)
operator|.
name|toEpochDay
argument_list|()
argument_list|,
name|resultV
operator|.
name|vector
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyString
parameter_list|(
name|int
name|resultIndex
parameter_list|,
name|String
name|expected
parameter_list|,
name|BytesColumnVector
name|resultV
parameter_list|)
block|{
name|String
name|result
init|=
name|getStringFromBytesColumnVector
argument_list|(
name|resultV
argument_list|,
name|resultIndex
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getStringFromBytesColumnVector
parameter_list|(
name|BytesColumnVector
name|resultV
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|String
name|result
decl_stmt|;
name|byte
index|[]
name|resultBytes
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|resultV
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|resultV
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|resultV
operator|.
name|start
index|[
name|i
index|]
operator|+
name|resultV
operator|.
name|length
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|String
argument_list|(
name|resultBytes
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

