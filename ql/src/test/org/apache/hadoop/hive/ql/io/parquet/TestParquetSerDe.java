begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|serde
operator|.
name|ParquetHiveSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|writable
operator|.
name|BinaryWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ArrayWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Binary
import|;
end_import

begin_class
specifier|public
class|class
name|TestParquetSerDe
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testParquetHiveSerDe
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
comment|// Create the SerDe
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"test: testParquetHiveSerDe"
argument_list|)
expr_stmt|;
specifier|final
name|ParquetHiveSerDe
name|serDe
init|=
operator|new
name|ParquetHiveSerDe
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|Properties
name|tbl
init|=
name|createProperties
argument_list|()
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serDe
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Data
specifier|final
name|Writable
index|[]
name|arr
init|=
operator|new
name|Writable
index|[
literal|8
index|]
decl_stmt|;
name|arr
index|[
literal|0
index|]
operator|=
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|123
argument_list|)
expr_stmt|;
name|arr
index|[
literal|1
index|]
operator|=
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|456
argument_list|)
expr_stmt|;
name|arr
index|[
literal|2
index|]
operator|=
operator|new
name|IntWritable
argument_list|(
literal|789
argument_list|)
expr_stmt|;
name|arr
index|[
literal|3
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|1000l
argument_list|)
expr_stmt|;
name|arr
index|[
literal|4
index|]
operator|=
operator|new
name|DoubleWritable
argument_list|(
operator|(
name|double
operator|)
literal|5.3
argument_list|)
expr_stmt|;
name|arr
index|[
literal|5
index|]
operator|=
operator|new
name|BinaryWritable
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"hive and hadoop and parquet. Big family."
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Writable
index|[]
name|mapContainer
init|=
operator|new
name|Writable
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|Writable
index|[]
name|map
init|=
operator|new
name|Writable
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Writable
index|[]
name|pair
init|=
operator|new
name|Writable
index|[
literal|2
index|]
decl_stmt|;
name|pair
index|[
literal|0
index|]
operator|=
operator|new
name|BinaryWritable
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"key_"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|pair
index|[
literal|1
index|]
operator|=
operator|new
name|IntWritable
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|map
index|[
name|i
index|]
operator|=
operator|new
name|ArrayWritable
argument_list|(
name|Writable
operator|.
name|class
argument_list|,
name|pair
argument_list|)
expr_stmt|;
block|}
name|mapContainer
index|[
literal|0
index|]
operator|=
operator|new
name|ArrayWritable
argument_list|(
name|Writable
operator|.
name|class
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|arr
index|[
literal|6
index|]
operator|=
operator|new
name|ArrayWritable
argument_list|(
name|Writable
operator|.
name|class
argument_list|,
name|mapContainer
argument_list|)
expr_stmt|;
specifier|final
name|Writable
index|[]
name|arrayContainer
init|=
operator|new
name|Writable
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|Writable
index|[]
name|array
init|=
operator|new
name|Writable
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
operator|new
name|BinaryWritable
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
literal|"elem_"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|arrayContainer
index|[
literal|0
index|]
operator|=
operator|new
name|ArrayWritable
argument_list|(
name|Writable
operator|.
name|class
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|arr
index|[
literal|7
index|]
operator|=
operator|new
name|ArrayWritable
argument_list|(
name|Writable
operator|.
name|class
argument_list|,
name|arrayContainer
argument_list|)
expr_stmt|;
specifier|final
name|ArrayWritable
name|arrWritable
init|=
operator|new
name|ArrayWritable
argument_list|(
name|Writable
operator|.
name|class
argument_list|,
name|arr
argument_list|)
decl_stmt|;
comment|// Test
name|deserializeAndSerializeLazySimple
argument_list|(
name|serDe
argument_list|,
name|arrWritable
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"test: testParquetHiveSerDe - OK"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|deserializeAndSerializeLazySimple
parameter_list|(
specifier|final
name|ParquetHiveSerDe
name|serDe
parameter_list|,
specifier|final
name|ArrayWritable
name|t
parameter_list|)
throws|throws
name|SerDeException
block|{
comment|// Get the row structure
specifier|final
name|StructObjectInspector
name|oi
init|=
operator|(
name|StructObjectInspector
operator|)
name|serDe
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
comment|// Deserialize
specifier|final
name|Object
name|row
init|=
name|serDe
operator|.
name|deserialize
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"deserialization gives the wrong object class"
argument_list|,
name|row
operator|.
name|getClass
argument_list|()
argument_list|,
name|ArrayWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size correct after deserialization"
argument_list|,
name|serDe
operator|.
name|getSerDeStats
argument_list|()
operator|.
name|getRawDataSize
argument_list|()
argument_list|,
name|t
operator|.
name|get
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"deserialization gives the wrong object"
argument_list|,
name|t
argument_list|,
name|row
argument_list|)
expr_stmt|;
comment|// Serialize
specifier|final
name|ArrayWritable
name|serializedArr
init|=
operator|(
name|ArrayWritable
operator|)
name|serDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|oi
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"size correct after serialization"
argument_list|,
name|serDe
operator|.
name|getSerDeStats
argument_list|()
operator|.
name|getRawDataSize
argument_list|()
argument_list|,
name|serializedArr
operator|.
name|get
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"serialized object should be equal to starting object"
argument_list|,
name|arrayWritableEquals
argument_list|(
name|t
argument_list|,
name|serializedArr
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createProperties
parameter_list|()
block|{
specifier|final
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"abyte,ashort,aint,along,adouble,astring,amap,alist"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"tinyint:smallint:int:bigint:double:string:map<string,int>:array<string>"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|,
literal|"NULL"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|public
specifier|static
name|boolean
name|arrayWritableEquals
parameter_list|(
specifier|final
name|ArrayWritable
name|a1
parameter_list|,
specifier|final
name|ArrayWritable
name|a2
parameter_list|)
block|{
specifier|final
name|Writable
index|[]
name|a1Arr
init|=
name|a1
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|Writable
index|[]
name|a2Arr
init|=
name|a2
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|a1Arr
operator|.
name|length
operator|!=
name|a2Arr
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a1Arr
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|a1Arr
index|[
name|i
index|]
operator|instanceof
name|ArrayWritable
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|a2Arr
index|[
name|i
index|]
operator|instanceof
name|ArrayWritable
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|arrayWritableEquals
argument_list|(
operator|(
name|ArrayWritable
operator|)
name|a1Arr
index|[
name|i
index|]
argument_list|,
operator|(
name|ArrayWritable
operator|)
name|a2Arr
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|a1Arr
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|a2Arr
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

