begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFExtractUnion
operator|.
name|ObjectInspectorConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFExtractUnion
operator|.
name|ValueConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableConstantIntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestGenericUDFExtractUnion
block|{
annotation|@
name|Mock
specifier|private
name|ObjectInspectorConverter
name|objectInspectorConverter
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|ValueConverter
name|valueConverter
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|UnionObjectInspector
name|unionOI
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|WritableConstantIntObjectInspector
name|tagOI
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|ObjectInspector
name|initialiseResult
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|DeferredObject
name|deferredObject
decl_stmt|;
specifier|private
specifier|final
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Object
name|converted
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|GenericUDF
name|underTest
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|underTest
operator|=
operator|new
name|GenericUDFExtractUnion
argument_list|(
name|objectInspectorConverter
argument_list|,
name|valueConverter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|evaluate_SingleArgumentOnly
parameter_list|()
throws|throws
name|HiveException
block|{
name|when
argument_list|(
name|deferredObject
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|valueConverter
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|unionOI
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|converted
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|initialize
argument_list|(
operator|new
name|ObjectInspector
index|[]
block|{
name|unionOI
block|}
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|underTest
operator|.
name|evaluate
argument_list|(
operator|new
name|DeferredObject
index|[]
block|{
name|deferredObject
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|is
argument_list|(
name|converted
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|evaluate_UnionAndTagArguments_MatchesTag
parameter_list|()
throws|throws
name|HiveException
block|{
name|when
argument_list|(
name|unionOI
operator|.
name|getObjectInspectors
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableList
operator|.
expr|<
name|ObjectInspector
operator|>
name|of
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tagOI
operator|.
name|getWritableConstantValue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|deferredObject
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|unionOI
operator|.
name|getTag
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|unionOI
operator|.
name|getField
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|initialize
argument_list|(
operator|new
name|ObjectInspector
index|[]
block|{
name|unionOI
block|,
name|tagOI
block|}
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|underTest
operator|.
name|evaluate
argument_list|(
operator|new
name|DeferredObject
index|[]
block|{
name|deferredObject
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|is
argument_list|(
operator|(
name|Object
operator|)
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|evaluate_UnionAndTagArguments_NotMatchesTag
parameter_list|()
throws|throws
name|HiveException
block|{
name|when
argument_list|(
name|unionOI
operator|.
name|getObjectInspectors
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableList
operator|.
expr|<
name|ObjectInspector
operator|>
name|of
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tagOI
operator|.
name|getWritableConstantValue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|deferredObject
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|unionOI
operator|.
name|getTag
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|initialize
argument_list|(
operator|new
name|ObjectInspector
index|[]
block|{
name|unionOI
block|,
name|tagOI
block|}
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|underTest
operator|.
name|evaluate
argument_list|(
operator|new
name|DeferredObject
index|[]
block|{
name|deferredObject
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|initialize_SingleArgumentOnly
parameter_list|()
throws|throws
name|UDFArgumentException
block|{
name|when
argument_list|(
name|objectInspectorConverter
operator|.
name|convert
argument_list|(
name|unionOI
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|initialiseResult
argument_list|)
expr_stmt|;
name|ObjectInspector
name|result
init|=
name|underTest
operator|.
name|initialize
argument_list|(
operator|new
name|ObjectInspector
index|[]
block|{
name|unionOI
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|is
argument_list|(
name|initialiseResult
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|initialize_UnionAndTagArguments
parameter_list|()
throws|throws
name|UDFArgumentException
block|{
name|when
argument_list|(
name|unionOI
operator|.
name|getObjectInspectors
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableList
operator|.
expr|<
name|ObjectInspector
operator|>
name|of
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tagOI
operator|.
name|getWritableConstantValue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectInspector
name|result
init|=
name|underTest
operator|.
name|initialize
argument_list|(
operator|new
name|ObjectInspector
index|[]
block|{
name|unionOI
block|,
name|tagOI
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|is
argument_list|(
operator|(
name|ObjectInspector
operator|)
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UDFArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|initialize_NegativeTagThrowsException
parameter_list|()
throws|throws
name|UDFArgumentException
block|{
name|when
argument_list|(
name|tagOI
operator|.
name|getWritableConstantValue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|IntWritable
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|initialize
argument_list|(
operator|new
name|ObjectInspector
index|[]
block|{
name|unionOI
block|,
name|tagOI
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UDFArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|initialize_OutOfBoundsTagThrowsException
parameter_list|()
throws|throws
name|UDFArgumentException
block|{
name|when
argument_list|(
name|unionOI
operator|.
name|getObjectInspectors
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableList
operator|.
expr|<
name|ObjectInspector
operator|>
name|of
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tagOI
operator|.
name|getWritableConstantValue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|initialize
argument_list|(
operator|new
name|ObjectInspector
index|[]
block|{
name|unionOI
block|,
name|tagOI
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UDFArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|initialize_TagNotAnIntThrowsException
parameter_list|()
throws|throws
name|UDFArgumentException
block|{
name|underTest
operator|.
name|initialize
argument_list|(
operator|new
name|ObjectInspector
index|[]
block|{
name|unionOI
block|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UDFArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|initialize_UnionNotAUnionThrowsException
parameter_list|()
throws|throws
name|UDFArgumentException
block|{
name|underTest
operator|.
name|initialize
argument_list|(
operator|new
name|ObjectInspector
index|[]
block|{
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
block|,
name|tagOI
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UDFArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|initialize_NoArgumentsThrowsException
parameter_list|()
throws|throws
name|UDFArgumentException
block|{
name|underTest
operator|.
name|initialize
argument_list|(
operator|new
name|ObjectInspector
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UDFArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|initialize_TooManyArgumentsThrowsException
parameter_list|()
throws|throws
name|UDFArgumentException
block|{
name|underTest
operator|.
name|initialize
argument_list|(
operator|new
name|ObjectInspector
index|[]
block|{
name|unionOI
block|,
name|tagOI
block|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

