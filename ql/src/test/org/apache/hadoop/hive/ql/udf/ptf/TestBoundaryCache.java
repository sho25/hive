begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|ImmutablePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|BoundaryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|BoundaryDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|OrderExpressionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Optional
operator|.
name|ofNullable
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toCollection
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|Order
operator|.
name|ASC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|Order
operator|.
name|DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|Direction
operator|.
name|CURRENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|Direction
operator|.
name|FOLLOWING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|Direction
operator|.
name|PRECEDING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests BoundaryCache used for RANGE windows in PTF functions.  */
end_comment

begin_class
specifier|public
class|class
name|TestBoundaryCache
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBoundaryCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|LinkedList
argument_list|<
name|List
argument_list|<
name|IntWritable
argument_list|>
argument_list|>
name|TEST_PARTITION
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//Null for using no cache at all, 2 is minimum cache length, 5-9-15 for checking with smaller,
comment|// exactly equal and larger cache than needed.
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|CACHE_SIZES
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|null
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
literal|9
argument_list|,
literal|15
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|PTFInvocationSpec
operator|.
name|Order
argument_list|>
name|ORDERS
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ASC
argument_list|,
name|DESC
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ORDER_BY_COL
init|=
literal|2
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupTests
parameter_list|()
throws|throws
name|Exception
block|{
comment|//8 ranges, max cache content is 8+1=9 entries
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|11
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|13
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|14
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|15
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|17
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|18
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|19
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|TEST_PARTITION
argument_list|,
literal|21
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrecedingUnboundedFollowingUnbounded
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|PRECEDING
argument_list|,
name|UNBOUNDED_AMOUNT
argument_list|,
name|FOLLOWING
argument_list|,
name|UNBOUNDED_AMOUNT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrecedingUnboundedCurrentRow
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|PRECEDING
argument_list|,
name|UNBOUNDED_AMOUNT
argument_list|,
name|CURRENT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrecedingUnboundedPreceding2
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|PRECEDING
argument_list|,
name|UNBOUNDED_AMOUNT
argument_list|,
name|PRECEDING
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPreceding4Preceding1
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|PRECEDING
argument_list|,
literal|4
argument_list|,
name|PRECEDING
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPreceding2CurrentRow
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|PRECEDING
argument_list|,
literal|2
argument_list|,
name|CURRENT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPreceding2Following100
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|PRECEDING
argument_list|,
literal|1
argument_list|,
name|FOLLOWING
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCurrentRowFollowing3
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|CURRENT
argument_list|,
literal|0
argument_list|,
name|FOLLOWING
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCurrentRowFFollowingUnbounded
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|CURRENT
argument_list|,
literal|0
argument_list|,
name|FOLLOWING
argument_list|,
name|UNBOUNDED_AMOUNT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFollowing2Following4
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|FOLLOWING
argument_list|,
literal|2
argument_list|,
name|FOLLOWING
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFollowing2FollowingUnbounded
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|FOLLOWING
argument_list|,
literal|2
argument_list|,
name|FOLLOWING
argument_list|,
name|UNBOUNDED_AMOUNT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Executes test on a given window definition. Such a test will be executed against the values set    * in ORDERS and CACHE_SIZES, validating ORDERS X CACHE_SIZES test cases. Cache size of null will    * be used to setup baseline.    * @param startDirection    * @param startAmount    * @param endDirection    * @param endAmount    * @throws Exception    */
specifier|private
name|void
name|runTest
parameter_list|(
name|WindowingSpec
operator|.
name|Direction
name|startDirection
parameter_list|,
name|int
name|startAmount
parameter_list|,
name|WindowingSpec
operator|.
name|Direction
name|endDirection
parameter_list|,
name|int
name|endAmount
parameter_list|)
throws|throws
name|Exception
block|{
name|BoundaryDef
name|startBoundary
init|=
operator|new
name|BoundaryDef
argument_list|(
name|startDirection
argument_list|,
name|startAmount
argument_list|)
decl_stmt|;
name|BoundaryDef
name|endBoundary
init|=
operator|new
name|BoundaryDef
argument_list|(
name|endDirection
argument_list|,
name|endAmount
argument_list|)
decl_stmt|;
name|AtomicInteger
name|readCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
index|[]
name|expectedBoundaryStarts
init|=
operator|new
name|int
index|[
name|TEST_PARTITION
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
index|[]
name|expectedBoundaryEnds
init|=
operator|new
name|int
index|[
name|TEST_PARTITION
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|expectedReadCountWithoutCache
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|PTFInvocationSpec
operator|.
name|Order
name|order
range|:
name|ORDERS
control|)
block|{
for|for
control|(
name|Integer
name|cacheSize
range|:
name|CACHE_SIZES
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
index|[
literal|2
index|]
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cache: "
operator|+
name|cacheSize
operator|+
literal|" order: "
operator|+
name|order
argument_list|)
expr_stmt|;
name|BoundaryCache
name|cache
init|=
name|cacheSize
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|BoundaryCache
argument_list|(
name|cacheSize
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|PTFPartition
argument_list|,
name|ValueBoundaryScanner
argument_list|>
name|mocks
init|=
name|setupMocks
argument_list|(
name|TEST_PARTITION
argument_list|,
name|ORDER_BY_COL
argument_list|,
name|startBoundary
argument_list|,
name|endBoundary
argument_list|,
name|order
argument_list|,
name|cache
argument_list|,
name|readCounter
argument_list|)
decl_stmt|;
name|PTFPartition
name|ptfPartition
init|=
name|mocks
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|ValueBoundaryScanner
name|scanner
init|=
name|mocks
operator|.
name|getRight
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_PARTITION
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|scanner
operator|.
name|handleCache
argument_list|(
name|i
argument_list|,
name|ptfPartition
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|scanner
operator|.
name|computeStart
argument_list|(
name|i
argument_list|,
name|ptfPartition
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|scanner
operator|.
name|computeEnd
argument_list|(
name|i
argument_list|,
name|ptfPartition
argument_list|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
comment|//Cache-less version should be baseline
name|expectedBoundaryStarts
index|[
name|i
index|]
operator|=
name|start
expr_stmt|;
name|expectedBoundaryEnds
index|[
name|i
index|]
operator|=
name|end
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expectedBoundaryStarts
index|[
name|i
index|]
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBoundaryEnds
index|[
name|i
index|]
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
name|Integer
name|col0
init|=
name|ofNullable
argument_list|(
name|TEST_PARTITION
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|v
lambda|->
name|v
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Integer
name|col1
init|=
name|ofNullable
argument_list|(
name|TEST_PARTITION
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|v
lambda|->
name|v
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Integer
name|col2
init|=
name|ofNullable
argument_list|(
name|TEST_PARTITION
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|v
lambda|->
name|v
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%d|\t%d\t%d\t%d\t|%d-%d"
argument_list|,
name|i
argument_list|,
name|col0
argument_list|,
name|col1
argument_list|,
name|col2
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|expectedReadCountWithoutCache
operator|=
name|readCounter
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//Read count should be smaller with cache being used, but larger than the minimum of
comment|// reading every row once.
name|assertTrue
argument_list|(
name|expectedReadCountWithoutCache
operator|>=
name|readCounter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|startAmount
operator|!=
name|UNBOUNDED_AMOUNT
operator|||
name|endAmount
operator|!=
name|UNBOUNDED_AMOUNT
condition|)
block|{
name|assertTrue
argument_list|(
name|TEST_PARTITION
operator|.
name|size
argument_list|()
operator|<=
name|readCounter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|readCounter
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Sets up mock and spy objects used for testing.    * @param partition The real partition containing row values.    * @param orderByCol Index of column in the row used for separating ranges.    * @param start Window definition.    * @param end Window definition.    * @param order Window definition.    * @param cache BoundaryCache instance, it may come in various sizes.    * @param readCounter counts how many times reading was invoked    * @return Mocked PTFPartition instance and ValueBoundaryScanner spy.    * @throws Exception    */
specifier|private
specifier|static
name|Pair
argument_list|<
name|PTFPartition
argument_list|,
name|ValueBoundaryScanner
argument_list|>
name|setupMocks
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|IntWritable
argument_list|>
argument_list|>
name|partition
parameter_list|,
name|int
name|orderByCol
parameter_list|,
name|BoundaryDef
name|start
parameter_list|,
name|BoundaryDef
name|end
parameter_list|,
name|PTFInvocationSpec
operator|.
name|Order
name|order
parameter_list|,
name|BoundaryCache
name|cache
parameter_list|,
name|AtomicInteger
name|readCounter
parameter_list|)
throws|throws
name|Exception
block|{
name|PTFPartition
name|partitionMock
init|=
name|mock
argument_list|(
name|PTFPartition
operator|.
name|class
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
name|int
name|idx
init|=
name|invocationOnMock
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|partition
operator|.
name|get
argument_list|(
name|idx
argument_list|)
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|partitionMock
argument_list|)
operator|.
name|getAt
argument_list|(
name|any
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
return|return
name|partition
operator|.
name|size
argument_list|()
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|partitionMock
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|partitionMock
operator|.
name|getBoundaryCache
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|OrderExpressionDef
name|orderDef
init|=
name|mock
argument_list|(
name|OrderExpressionDef
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|orderDef
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|ValueBoundaryScanner
name|scan
init|=
operator|new
name|LongValueBoundaryScanner
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|orderDef
argument_list|,
name|order
operator|==
name|ASC
argument_list|)
decl_stmt|;
name|ValueBoundaryScanner
name|scannerSpy
init|=
name|spy
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
name|readCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|IntWritable
argument_list|>
name|row
init|=
name|invocationOnMock
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|row
operator|.
name|get
argument_list|(
name|orderByCol
argument_list|)
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|scannerSpy
argument_list|)
operator|.
name|computeValue
argument_list|(
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
name|IntWritable
name|v1
init|=
name|invocationOnMock
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
decl_stmt|;
name|IntWritable
name|v2
init|=
name|invocationOnMock
operator|.
name|getArgumentAt
argument_list|(
literal|1
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|v1
operator|!=
literal|null
operator|&&
name|v2
operator|!=
literal|null
operator|)
condition|?
name|v1
operator|.
name|get
argument_list|()
operator|==
name|v2
operator|.
name|get
argument_list|()
else|:
name|v1
operator|==
literal|null
operator|&&
name|v2
operator|==
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|scannerSpy
argument_list|)
operator|.
name|isEqual
argument_list|(
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
name|IntWritable
name|v1
init|=
name|invocationOnMock
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
decl_stmt|;
name|IntWritable
name|v2
init|=
name|invocationOnMock
operator|.
name|getArgumentAt
argument_list|(
literal|1
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
decl_stmt|;
name|Integer
name|amt
init|=
name|invocationOnMock
operator|.
name|getArgumentAt
argument_list|(
literal|2
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|v1
operator|!=
literal|null
operator|&&
name|v2
operator|!=
literal|null
operator|)
condition|?
operator|(
name|v1
operator|.
name|get
argument_list|()
operator|-
name|v2
operator|.
name|get
argument_list|()
operator|)
operator|>
name|amt
else|:
name|v1
operator|!=
literal|null
operator|||
name|v2
operator|!=
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|scannerSpy
argument_list|)
operator|.
name|isDistanceGreater
argument_list|(
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|setOrderOnTestPartitions
argument_list|(
name|order
argument_list|)
expr_stmt|;
return|return
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
name|partitionMock
argument_list|,
name|scannerSpy
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|addRow
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|IntWritable
argument_list|>
argument_list|>
name|partition
parameter_list|,
name|Integer
name|col0
parameter_list|,
name|Integer
name|col1
parameter_list|,
name|Integer
name|col2
parameter_list|)
block|{
name|partition
operator|.
name|add
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|col0
operator|!=
literal|null
condition|?
operator|new
name|IntWritable
argument_list|(
name|col0
argument_list|)
else|:
literal|null
argument_list|,
name|col1
operator|!=
literal|null
condition|?
operator|new
name|IntWritable
argument_list|(
name|col1
argument_list|)
else|:
literal|null
argument_list|,
name|col2
operator|!=
literal|null
condition|?
operator|new
name|IntWritable
argument_list|(
name|col2
argument_list|)
else|:
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reverses order on actual data if needed, based on order parameter.    * @param order    */
specifier|private
specifier|static
name|void
name|setOrderOnTestPartitions
parameter_list|(
name|PTFInvocationSpec
operator|.
name|Order
name|order
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|List
argument_list|<
name|IntWritable
argument_list|>
argument_list|>
name|notNulls
init|=
name|TEST_PARTITION
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|get
argument_list|(
name|ORDER_BY_COL
argument_list|)
operator|!=
literal|null
argument_list|)
operator|.
name|collect
argument_list|(
name|toCollection
argument_list|(
name|LinkedList
operator|::
operator|new
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|IntWritable
argument_list|>
argument_list|>
name|nulls
init|=
name|TEST_PARTITION
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|get
argument_list|(
name|ORDER_BY_COL
argument_list|)
operator|==
literal|null
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isAscCurrently
init|=
name|notNulls
operator|.
name|getFirst
argument_list|()
operator|.
name|get
argument_list|(
name|ORDER_BY_COL
argument_list|)
operator|.
name|get
argument_list|()
operator|<
name|notNulls
operator|.
name|getLast
argument_list|()
operator|.
name|get
argument_list|(
name|ORDER_BY_COL
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ASC
operator|.
name|equals
argument_list|(
name|order
argument_list|)
operator|&&
operator|!
name|isAscCurrently
operator|)
operator|||
operator|(
name|DESC
operator|.
name|equals
argument_list|(
name|order
argument_list|)
operator|&&
name|isAscCurrently
operator|)
condition|)
block|{
name|Collections
operator|.
name|reverse
argument_list|(
name|notNulls
argument_list|)
expr_stmt|;
name|TEST_PARTITION
operator|.
name|clear
argument_list|()
expr_stmt|;
name|TEST_PARTITION
operator|.
name|addAll
argument_list|(
name|notNulls
argument_list|)
expr_stmt|;
name|TEST_PARTITION
operator|.
name|addAll
argument_list|(
name|nulls
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

