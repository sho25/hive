begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Tests related to support of LOAD DATA with Acid tables  * Most tests run in vectorized and non-vectorized mode since we currently have a vectorized and  * a non-vectorized acid readers and it's critical that ROW_IDs are generated the same way.  */
end_comment

begin_class
specifier|public
class|class
name|TestTxnLoadData
extends|extends
name|TxnCommandsBaseForTests
block|{
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestTxnLoadData
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DATA_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|TestTxnLoadData
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|String
name|getTestDataDir
parameter_list|()
block|{
return|return
name|TEST_DATA_DIR
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|loadData
parameter_list|()
throws|throws
name|Exception
block|{
name|loadData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|loadDataVectorized
parameter_list|()
throws|throws
name|Exception
block|{
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|loadDataUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|loadDataUpdate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|loadDataUpdateVectorized
parameter_list|()
throws|throws
name|Exception
block|{
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|loadDataUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|loadDataNonAcid2AcidConversion
parameter_list|()
throws|throws
name|Exception
block|{
name|loadDataNonAcid2AcidConversion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|loadDataNonAcid2AcidConversionVectorized
parameter_list|()
throws|throws
name|Exception
block|{
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|loadDataNonAcid2AcidConversion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiStatement
parameter_list|()
throws|throws
name|Exception
block|{
name|testMultiStatement
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiStatementVectorized
parameter_list|()
throws|throws
name|Exception
block|{
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testMultiStatement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loadDataUpdate
parameter_list|(
name|boolean
name|isVectorized
parameter_list|)
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists Tstage"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int) stored as orc tblproperties('transactional'='true')"
argument_list|)
expr_stmt|;
comment|//Tstage is just a simple way to generate test data
name|runStatementOnDriver
argument_list|(
literal|"create table Tstage (a int, b int) stored as orc tblproperties('transactional'='false')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(1,2),(3,4)"
argument_list|)
expr_stmt|;
comment|//this creates an ORC data file with correct schema under table root
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
comment|//"load data local inpath" doesn't delete source files so clean it here
name|runStatementOnDriver
argument_list|(
literal|"truncate table Tstage"
argument_list|)
expr_stmt|;
comment|//and do a Load Data into the same table, which should now land in a delta_x_x.
comment|// 'data' is created by export command/
name|runStatementOnDriver
argument_list|(
literal|"load data local inpath '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1/data' into table T"
argument_list|)
expr_stmt|;
name|String
name|testQuery
init|=
name|isVectorized
condition|?
literal|"select ROW__ID, a, b from T order by ROW__ID"
else|:
literal|"select ROW__ID, a, b, INPUT__FILE__NAME from T order by ROW__ID"
decl_stmt|;
name|String
index|[]
index|[]
name|expected
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":20,\"bucketid\":536870912,\"rowid\":0}\t1\t2"
block|,
literal|"t/delta_0000020_0000020_0000/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":20,\"bucketid\":536870912,\"rowid\":1}\t3\t4"
block|,
literal|"t/delta_0000020_0000020_0000/000000_0"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"load data inpath"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"update T set b = 17 where a = 1"
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected2
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":20,\"bucketid\":536870912,\"rowid\":1}\t3\t4"
block|,
literal|"t/delta_0000020_0000020_0000/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":23,\"bucketid\":536870912,\"rowid\":0}\t1\t17"
block|,
literal|"t/delta_0000023_0000023_0000/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected2
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"update"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into T values(2,2)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"delete from T where a = 3"
argument_list|)
expr_stmt|;
comment|//test minor compaction
name|runStatementOnDriver
argument_list|(
literal|"alter table T compact 'minor'"
argument_list|)
expr_stmt|;
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected3
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":23,\"bucketid\":536870912,\"rowid\":0}\t1\t17"
block|,
literal|"t/delta_0000020_0000027/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":26,\"bucketid\":536870912,\"rowid\":0}\t2\t2"
block|,
literal|"t/delta_0000020_0000027/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected3
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"delete compact minor"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"load data local inpath '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1/data' overwrite into table T"
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected4
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":31,\"bucketid\":536870912,\"rowid\":0}\t1\t2"
block|,
literal|"t/base_0000031/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":31,\"bucketid\":536870912,\"rowid\":1}\t3\t4"
block|,
literal|"t/base_0000031/000000_0"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected4
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"load data inpath overwrite"
argument_list|)
expr_stmt|;
comment|//load same data again (additive)
name|runStatementOnDriver
argument_list|(
literal|"load data local inpath '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1/data' into table T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"update T set b = 17 where a = 1"
argument_list|)
expr_stmt|;
comment|//matches 2 rows
name|runStatementOnDriver
argument_list|(
literal|"delete from T where a = 3"
argument_list|)
expr_stmt|;
comment|//matches 2 rows
name|runStatementOnDriver
argument_list|(
literal|"insert into T values(2,2)"
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected5
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":35,\"bucketid\":536870912,\"rowid\":0}\t1\t17"
block|,
literal|"t/delta_0000035_0000035_0000/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":35,\"bucketid\":536870912,\"rowid\":1}\t1\t17"
block|,
literal|"t/delta_0000035_0000035_0000/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":37,\"bucketid\":536870912,\"rowid\":0}\t2\t2"
block|,
literal|"t/delta_0000037_0000037_0000/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected5
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"load data inpath overwrite update"
argument_list|)
expr_stmt|;
comment|//test major compaction
name|runStatementOnDriver
argument_list|(
literal|"alter table T compact 'major'"
argument_list|)
expr_stmt|;
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected6
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":35,\"bucketid\":536870912,\"rowid\":0}\t1\t17"
block|,
literal|"t/base_0000037/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":35,\"bucketid\":536870912,\"rowid\":1}\t1\t17"
block|,
literal|"t/base_0000037/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":37,\"bucketid\":536870912,\"rowid\":0}\t2\t2"
block|,
literal|"t/base_0000037/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected6
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"load data inpath compact major"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loadData
parameter_list|(
name|boolean
name|isVectorized
parameter_list|)
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists Tstage"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int) stored as orc tblproperties('transactional'='true')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into T values(0,2),(0,4)"
argument_list|)
expr_stmt|;
comment|//Tstage is just a simple way to generate test data
name|runStatementOnDriver
argument_list|(
literal|"create table Tstage (a int, b int) stored as orc tblproperties('transactional'='false')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(1,2),(3,4)"
argument_list|)
expr_stmt|;
comment|//this creates an ORC data file with correct schema under table root
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
comment|//"load data local inpath" doesn't delete source files so clean it here
name|runStatementOnDriver
argument_list|(
literal|"truncate table Tstage"
argument_list|)
expr_stmt|;
comment|//and do a Load Data into the same table, which should now land in a delta_x_x.
comment|// 'data' is created by export command/
name|runStatementOnDriver
argument_list|(
literal|"load data local inpath '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1/data' into table T"
argument_list|)
expr_stmt|;
name|String
name|testQuery
init|=
name|isVectorized
condition|?
literal|"select ROW__ID, a, b from T order by ROW__ID"
else|:
literal|"select ROW__ID, a, b, INPUT__FILE__NAME from T order by ROW__ID"
decl_stmt|;
name|String
index|[]
index|[]
name|expected
init|=
operator|new
name|String
index|[]
index|[]
block|{
comment|//normal insert
block|{
literal|"{\"transactionid\":16,\"bucketid\":536870912,\"rowid\":0}\t0\t2"
block|,
literal|"t/delta_0000016_0000016_0000/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":16,\"bucketid\":536870912,\"rowid\":1}\t0\t4"
block|,
literal|"t/delta_0000016_0000016_0000/bucket_00000"
block|}
block|,
comment|//Load Data
block|{
literal|"{\"transactionid\":21,\"bucketid\":536870912,\"rowid\":0}\t1\t2"
block|,
literal|"t/delta_0000021_0000021_0000/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":21,\"bucketid\":536870912,\"rowid\":1}\t3\t4"
block|,
literal|"t/delta_0000021_0000021_0000/000000_0"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"load data inpath"
argument_list|)
expr_stmt|;
comment|//test minor compaction
name|runStatementOnDriver
argument_list|(
literal|"alter table T compact 'minor'"
argument_list|)
expr_stmt|;
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected1
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":16,\"bucketid\":536870912,\"rowid\":0}\t0\t2"
block|,
literal|"t/delta_0000016_0000021/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":16,\"bucketid\":536870912,\"rowid\":1}\t0\t4"
block|,
literal|"t/delta_0000016_0000021/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":21,\"bucketid\":536870912,\"rowid\":0}\t1\t2"
block|,
literal|"t/delta_0000016_0000021/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":21,\"bucketid\":536870912,\"rowid\":1}\t3\t4"
block|,
literal|"t/delta_0000016_0000021/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected1
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"load data inpath (minor)"
argument_list|)
expr_stmt|;
comment|//test major compaction
name|runStatementOnDriver
argument_list|(
literal|"insert into T values(2,2)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table T compact 'major'"
argument_list|)
expr_stmt|;
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected2
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":16,\"bucketid\":536870912,\"rowid\":0}\t0\t2"
block|,
literal|"t/base_0000027/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":16,\"bucketid\":536870912,\"rowid\":1}\t0\t4"
block|,
literal|"t/base_0000027/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":21,\"bucketid\":536870912,\"rowid\":0}\t1\t2"
block|,
literal|"t/base_0000027/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":21,\"bucketid\":536870912,\"rowid\":1}\t3\t4"
block|,
literal|"t/base_0000027/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":27,\"bucketid\":536870912,\"rowid\":0}\t2\t2"
block|,
literal|"t/base_0000027/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected2
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"load data inpath (major)"
argument_list|)
expr_stmt|;
comment|//create more staging data and test Load Data Overwrite
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(5,6),(7,8)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/2'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"load data inpath '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/2/data' overwrite into table T"
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected3
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":33,\"bucketid\":536870912,\"rowid\":0}\t5\t6"
block|,
literal|"t/base_0000033/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":33,\"bucketid\":536870912,\"rowid\":1}\t7\t8"
block|,
literal|"t/base_0000033/000000_0"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected3
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"load data inpath overwrite"
argument_list|)
expr_stmt|;
comment|//one more major compaction
name|runStatementOnDriver
argument_list|(
literal|"insert into T values(6,6)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table T compact 'major'"
argument_list|)
expr_stmt|;
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected4
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":33,\"bucketid\":536870912,\"rowid\":0}\t5\t6"
block|,
literal|"t/base_0000036/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":33,\"bucketid\":536870912,\"rowid\":1}\t7\t8"
block|,
literal|"t/base_0000036/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":36,\"bucketid\":536870912,\"rowid\":0}\t6\t6"
block|,
literal|"t/base_0000036/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected4
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"load data inpath overwrite (major)"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Load Data [overwrite] in to an (un-)partitioned acid converted table    */
specifier|private
name|void
name|loadDataNonAcid2AcidConversion
parameter_list|(
name|boolean
name|isVectorized
parameter_list|)
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists Tstage"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int) stored as orc tblproperties('transactional'='false')"
argument_list|)
expr_stmt|;
comment|//per acid write to test nonAcid2acid conversion mixed with load data
name|runStatementOnDriver
argument_list|(
literal|"insert into T values(0,2),(0,4)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table Tstage (a int, b int) stored as orc tblproperties('transactional'='false')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(1,2),(3,4)"
argument_list|)
expr_stmt|;
comment|//make 2 more inserts so that we have 000000_0_copy_1, 000000_0_copy_2 files in export
comment|//export works at file level so if you have copy_N in the table dir, you'll have those in output
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(2,2),(3,3)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(4,4),(5,5)"
argument_list|)
expr_stmt|;
comment|//create a file we'll import later
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"truncate table Tstage"
argument_list|)
expr_stmt|;
comment|//clean the staging table
comment|//now convert T to acid
name|runStatementOnDriver
argument_list|(
literal|"alter table T SET TBLPROPERTIES ('transactional' = 'true')"
argument_list|)
expr_stmt|;
comment|//and do a Load Data into the same table, which should now land in a delta/
comment|// (with 000000_0, 000000_0_copy_1, 000000_0_copy_2)
name|runStatementOnDriver
argument_list|(
literal|"load data local inpath '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1/data' into table T"
argument_list|)
expr_stmt|;
name|String
name|testQuery
init|=
name|isVectorized
condition|?
literal|"select ROW__ID, a, b from T order by ROW__ID"
else|:
literal|"select ROW__ID, a, b, INPUT__FILE__NAME from T order by ROW__ID"
decl_stmt|;
comment|/* {"transactionid":0,"bucketid":536870912,"rowid":0}     0       2/000000_0 {"transactionid":0,"bucketid":536870912,"rowid":1}     0       4/000000_0 {"transactionid":24,"bucketid":536870912,"rowid":0}    4       4/delta_0000024_0000024_0000/000000_0 {"transactionid":24,"bucketid":536870912,"rowid":1}    5       5/delta_0000024_0000024_0000/000000_0 */
name|String
index|[]
index|[]
name|expected
init|=
operator|new
name|String
index|[]
index|[]
block|{
comment|//from pre-acid insert
block|{
literal|"{\"transactionid\":0,\"bucketid\":536870912,\"rowid\":0}\t0\t2"
block|,
literal|"t/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":0,\"bucketid\":536870912,\"rowid\":1}\t0\t4"
block|,
literal|"t/000000_0"
block|}
block|,
comment|//from Load Data into acid converted table
block|{
literal|"{\"transactionid\":24,\"bucketid\":536870912,\"rowid\":0}\t1\t2"
block|,
literal|"t/delta_0000024_0000024_0000/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":24,\"bucketid\":536870912,\"rowid\":1}\t3\t4"
block|,
literal|"t/delta_0000024_0000024_0000/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":24,\"bucketid\":536870912,\"rowid\":2}\t2\t2"
block|,
literal|"t/delta_0000024_0000024_0000/000000_0_copy_1"
block|}
block|,
block|{
literal|"{\"transactionid\":24,\"bucketid\":536870912,\"rowid\":3}\t3\t3"
block|,
literal|"t/delta_0000024_0000024_0000/000000_0_copy_1"
block|}
block|,
block|{
literal|"{\"transactionid\":24,\"bucketid\":536870912,\"rowid\":4}\t4\t4"
block|,
literal|"t/delta_0000024_0000024_0000/000000_0_copy_2"
block|}
block|,
block|{
literal|"{\"transactionid\":24,\"bucketid\":536870912,\"rowid\":5}\t5\t5"
block|,
literal|"t/delta_0000024_0000024_0000/000000_0_copy_2"
block|}
block|,     }
decl_stmt|;
name|checkResult
argument_list|(
name|expected
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"load data inpath"
argument_list|)
expr_stmt|;
comment|//create more staging data with copy_N files and do LD+Overwrite
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(5,6),(7,8)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(8,8)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/2'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"load data local inpath '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/2/data' overwrite into table T"
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected2
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":30,\"bucketid\":536870912,\"rowid\":0}\t5\t6"
block|,
literal|"t/base_0000030/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":30,\"bucketid\":536870912,\"rowid\":1}\t7\t8"
block|,
literal|"t/base_0000030/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":30,\"bucketid\":536870912,\"rowid\":2}\t8\t8"
block|,
literal|"t/base_0000030/000000_0_copy_1"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected2
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"load data inpath overwrite"
argument_list|)
expr_stmt|;
comment|//create 1 more delta_x_x so that compactor has> dir file to compact
name|runStatementOnDriver
argument_list|(
literal|"insert into T values(9,9)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table T compact 'major'"
argument_list|)
expr_stmt|;
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected3
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":30,\"bucketid\":536870912,\"rowid\":0}\t5\t6"
block|,
literal|"t/base_0000033/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":30,\"bucketid\":536870912,\"rowid\":1}\t7\t8"
block|,
literal|"t/base_0000033/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":30,\"bucketid\":536870912,\"rowid\":2}\t8\t8"
block|,
literal|"t/base_0000033/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":33,\"bucketid\":536870912,\"rowid\":0}\t9\t9"
block|,
literal|"t/base_0000033/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected3
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"load data inpath overwrite (major)"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Load Data [overwrite] in to a partitioned transactional table    */
annotation|@
name|Test
specifier|public
name|void
name|loadDataPartitioned
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists Tstage"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int) partitioned by (p int) stored as orc tblproperties('transactional'='true')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table Tstage (a int, b int) stored as orc tblproperties('transactional'='false')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(0,2),(0,4)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"truncate table Tstage"
argument_list|)
expr_stmt|;
comment|//because 'local' inpath doesn't delete source files
name|runStatementOnDriver
argument_list|(
literal|"load data local inpath '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1/data' into table T partition(p=0)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(1,2),(1,4)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/2'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"truncate table Tstage"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"load data local inpath '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/2/data' into table T partition(p=1)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(2,2),(2,4)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/3'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"truncate table Tstage"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"load data local inpath '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/3/data' into table T partition(p=1)"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select ROW__ID, p, a, b, INPUT__FILE__NAME from T order by p, ROW__ID"
argument_list|)
decl_stmt|;
name|String
index|[]
index|[]
name|expected
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":20,\"bucketid\":536870912,\"rowid\":0}\t0\t0\t2"
block|,
literal|"t/p=0/delta_0000020_0000020_0000/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":20,\"bucketid\":536870912,\"rowid\":1}\t0\t0\t4"
block|,
literal|"t/p=0/delta_0000020_0000020_0000/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":24,\"bucketid\":536870912,\"rowid\":0}\t1\t1\t2"
block|,
literal|"t/p=1/delta_0000024_0000024_0000/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":24,\"bucketid\":536870912,\"rowid\":1}\t1\t1\t4"
block|,
literal|"t/p=1/delta_0000024_0000024_0000/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":28,\"bucketid\":536870912,\"rowid\":0}\t1\t2\t2"
block|,
literal|"t/p=1/delta_0000028_0000028_0000/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":28,\"bucketid\":536870912,\"rowid\":1}\t1\t2\t4"
block|,
literal|"t/p=1/delta_0000028_0000028_0000/000000_0"
block|}
block|}
decl_stmt|;
name|checkExpected
argument_list|(
name|rs
argument_list|,
name|expected
argument_list|,
literal|"load data inpath partitioned"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(5,2),(5,4)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/4'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"truncate table Tstage"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"load data inpath '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/4/data' overwrite into table T partition(p=1)"
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected2
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":20,\"bucketid\":536870912,\"rowid\":0}\t0\t0\t2"
block|,
literal|"t/p=0/delta_0000020_0000020_0000/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":20,\"bucketid\":536870912,\"rowid\":1}\t0\t0\t4"
block|,
literal|"t/p=0/delta_0000020_0000020_0000/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":33,\"bucketid\":536870912,\"rowid\":0}\t1\t5\t2"
block|,
literal|"t/p=1/base_0000033/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":33,\"bucketid\":536870912,\"rowid\":1}\t1\t5\t4"
block|,
literal|"t/p=1/base_0000033/000000_0"
block|}
block|}
decl_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select ROW__ID, p, a, b, INPUT__FILE__NAME from T order by p, ROW__ID"
argument_list|)
expr_stmt|;
name|checkExpected
argument_list|(
name|rs
argument_list|,
name|expected2
argument_list|,
literal|"load data inpath partitioned overwrite"
argument_list|)
expr_stmt|;
block|}
comment|/**    * By default you can't load into bucketed tables.  Things will break badly in acid (data loss, etc)    * if loaded data is not bucketed properly.  This test is to capture that this is still the default.    * If the default is changed, Load Data should probably do more validation to ensure data is    * properly distributed into files and files are named correctly.    */
annotation|@
name|Test
specifier|public
name|void
name|testValidations
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists Tstage"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int) clustered by (a) into 2 buckets stored as orc tblproperties('transactional'='true')"
argument_list|)
expr_stmt|;
name|File
name|createdFile
init|=
name|folder
operator|.
name|newFile
argument_list|(
literal|"myfile.txt"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|createdFile
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table Tstage (a int, b int) stored as orc tblproperties('transactional'='false')"
argument_list|)
expr_stmt|;
comment|//this creates an ORC data file with correct schema under table root
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(1,2),(3,4)"
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|runStatementOnDriverNegative
argument_list|(
literal|"load data local inpath '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"' into table T"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cpr
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Load into bucketed tables are disabled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkExpected
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|rs
parameter_list|,
name|String
index|[]
index|[]
name|expected
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|super
operator|.
name|checkExpected
argument_list|(
name|rs
argument_list|,
name|expected
argument_list|,
name|msg
argument_list|,
name|LOG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMMOrcTable
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int) stored as orc tblproperties('transactional'='true', 'transactional_properties'='insert_only')"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|values
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into T "
operator|+
name|makeValuesClause
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a, b from T order by b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|stringifyValues
argument_list|(
name|values
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure Load Data assigns ROW_IDs correctly when there is statementId suffix on delta dir    * For example, delta_x_x_0001.    */
specifier|private
name|void
name|testMultiStatement
parameter_list|(
name|boolean
name|isVectorized
parameter_list|)
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists Tstage"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int) stored as orc tblproperties('transactional'='true')"
argument_list|)
expr_stmt|;
comment|//Tstage is just a simple way to generate test data
name|runStatementOnDriver
argument_list|(
literal|"create table Tstage (a int, b int) stored as orc tblproperties('transactional'='false')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(5,5),(6,6)"
argument_list|)
expr_stmt|;
comment|//this creates an ORC data file with correct schema under table root
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
comment|//and do a Load Data into the same table, which should now land in a delta_x_x.
comment|// 'data' is created by export command/
name|runStatementOnDriver
argument_list|(
literal|"START TRANSACTION"
argument_list|)
expr_stmt|;
comment|//statementId = 0
name|runStatementOnDriver
argument_list|(
literal|"insert into T values(1,2),(3,4)"
argument_list|)
expr_stmt|;
comment|//statementId = 1
name|runStatementOnDriver
argument_list|(
literal|"load data local inpath '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1/data' into table T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"COMMIT"
argument_list|)
expr_stmt|;
name|String
name|testQuery
init|=
name|isVectorized
condition|?
literal|"select ROW__ID, a, b from T order by ROW__ID"
else|:
literal|"select ROW__ID, a, b, INPUT__FILE__NAME from T order by ROW__ID"
decl_stmt|;
name|String
index|[]
index|[]
name|expected
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":19,\"bucketid\":536870912,\"rowid\":0}\t1\t2"
block|,
literal|"t/delta_0000019_0000019_0000/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":19,\"bucketid\":536870912,\"rowid\":1}\t3\t4"
block|,
literal|"t/delta_0000019_0000019_0000/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":19,\"bucketid\":536870913,\"rowid\":0}\t5\t5"
block|,
literal|"t/delta_0000019_0000019_0001/000000_0"
block|}
block|,
block|{
literal|"{\"transactionid\":19,\"bucketid\":536870913,\"rowid\":1}\t6\t6"
block|,
literal|"t/delta_0000019_0000019_0001/000000_0"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"load data inpath"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table T compact 'major'"
argument_list|)
expr_stmt|;
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected2
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":19,\"bucketid\":536870912,\"rowid\":0}\t1\t2"
block|,
literal|"t/base_0000019/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":19,\"bucketid\":536870912,\"rowid\":1}\t3\t4"
block|,
literal|"t/base_0000019/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":19,\"bucketid\":536870913,\"rowid\":0}\t5\t5"
block|,
literal|"t/base_0000019/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":19,\"bucketid\":536870913,\"rowid\":1}\t6\t6"
block|,
literal|"t/base_0000019/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected2
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"load data inpath (major)"
argument_list|)
expr_stmt|;
comment|//at lest for now, Load Data w/Overwrite is not allowed in a txn: HIVE-18154
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|isVectorized
init|=
literal|false
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists Tstage"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int) stored as orc tblproperties('transactional'='true')"
argument_list|)
expr_stmt|;
comment|//Tstage is just a simple way to generate test data
name|runStatementOnDriver
argument_list|(
literal|"create table Tstage (a int, b int) stored as orc tblproperties('transactional'='false')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(5,5),(6,6)"
argument_list|)
expr_stmt|;
comment|//this creates an ORC data file with correct schema under table root
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
comment|//and do a Load Data into the same table, which should now land in a delta_x_x.
comment|// 'data' is created by export command/
name|runStatementOnDriver
argument_list|(
literal|"insert into T values(1,2),(3,4)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"START TRANSACTION"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"load data local inpath '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1/data' into table T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"ROLLBACK"
argument_list|)
expr_stmt|;
name|String
name|testQuery
init|=
name|isVectorized
condition|?
literal|"select ROW__ID, a, b from T order by ROW__ID"
else|:
literal|"select ROW__ID, a, b, INPUT__FILE__NAME from T order by ROW__ID"
decl_stmt|;
name|String
index|[]
index|[]
name|expected
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"transactionid\":19,\"bucketid\":536870912,\"rowid\":0}\t1\t2"
block|,
literal|"t/delta_0000019_0000019_0000/bucket_00000"
block|}
block|,
block|{
literal|"{\"transactionid\":19,\"bucketid\":536870912,\"rowid\":1}\t3\t4"
block|,
literal|"t/delta_0000019_0000019_0000/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"load data inpath"
argument_list|)
expr_stmt|;
block|}
comment|/**    * We have to use a different query to check results for Vectorized tests because to get the    * file name info we need to use {@link org.apache.hadoop.hive.ql.metadata.VirtualColumn#FILENAME}    * which will currently make the query non-vectorizable.  This means we can't check the file name    * for vectorized version of the test.    */
specifier|private
name|void
name|checkResult
parameter_list|(
name|String
index|[]
index|[]
name|expectedResult
parameter_list|,
name|String
name|query
parameter_list|,
name|boolean
name|isVectorized
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|checkExpected
argument_list|(
name|rs
argument_list|,
name|expectedResult
argument_list|,
name|msg
operator|+
operator|(
name|isVectorized
condition|?
literal|" vect"
else|:
literal|""
operator|)
argument_list|,
name|LOG
argument_list|,
operator|!
name|isVectorized
argument_list|)
expr_stmt|;
name|assertVectorized
argument_list|(
name|isVectorized
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

