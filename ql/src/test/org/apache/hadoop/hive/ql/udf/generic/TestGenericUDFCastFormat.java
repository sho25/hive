begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser_IdentifiersParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ConstantObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests CAST (<TIMESTAMP/DATE> AS STRING/CHAR/VARCHAR FORMAT<STRING>) and  * CAST (<STRING/CHAR/VARCHAR> AS TIMESTAMP/DATE FORMAT<STRING>).  */
end_comment

begin_class
specifier|public
class|class
name|TestGenericUDFCastFormat
block|{
comment|//type codes
specifier|public
specifier|static
specifier|final
name|int
name|CHAR
init|=
name|HiveParser_IdentifiersParser
operator|.
name|TOK_CHAR
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|VARCHAR
init|=
name|HiveParser_IdentifiersParser
operator|.
name|TOK_VARCHAR
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|STRING
init|=
name|HiveParser_IdentifiersParser
operator|.
name|TOK_STRING
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DATE
init|=
name|HiveParser_IdentifiersParser
operator|.
name|TOK_DATE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TIMESTAMP
init|=
name|HiveParser_IdentifiersParser
operator|.
name|TOK_TIMESTAMP
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testDateToStringWithFormat
parameter_list|()
throws|throws
name|HiveException
block|{
name|ObjectInspector
name|inputOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
decl_stmt|;
name|testCast
argument_list|(
name|STRING
argument_list|,
name|inputOI
argument_list|,
name|date
argument_list|(
literal|"2009-07-30"
argument_list|)
argument_list|,
literal|"yyyy-MM-dd"
argument_list|,
literal|"2009-07-30"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|STRING
argument_list|,
name|inputOI
argument_list|,
name|date
argument_list|(
literal|"2009-07-30"
argument_list|)
argument_list|,
literal|"yyyy"
argument_list|,
literal|"2009"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|STRING
argument_list|,
name|inputOI
argument_list|,
name|date
argument_list|(
literal|"1969-07-30"
argument_list|)
argument_list|,
literal|"dd"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|CHAR
argument_list|,
literal|3
argument_list|,
name|inputOI
argument_list|,
name|date
argument_list|(
literal|"2009-07-30"
argument_list|)
argument_list|,
literal|"yyyy-MM-dd"
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|CHAR
argument_list|,
literal|3
argument_list|,
name|inputOI
argument_list|,
name|date
argument_list|(
literal|"2009-07-30"
argument_list|)
argument_list|,
literal|"yyyy"
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|CHAR
argument_list|,
literal|3
argument_list|,
name|inputOI
argument_list|,
name|date
argument_list|(
literal|"1969-07-30"
argument_list|)
argument_list|,
literal|"dd"
argument_list|,
literal|"30 "
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|VARCHAR
argument_list|,
literal|3
argument_list|,
name|inputOI
argument_list|,
name|date
argument_list|(
literal|"2009-07-30"
argument_list|)
argument_list|,
literal|"yyyy-MM-dd"
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|VARCHAR
argument_list|,
literal|3
argument_list|,
name|inputOI
argument_list|,
name|date
argument_list|(
literal|"2009-07-30"
argument_list|)
argument_list|,
literal|"yyyy"
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|VARCHAR
argument_list|,
literal|3
argument_list|,
name|inputOI
argument_list|,
name|date
argument_list|(
literal|"1969-07-30"
argument_list|)
argument_list|,
literal|"dd"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestampToStringTypesWithFormat
parameter_list|()
throws|throws
name|HiveException
block|{
name|ObjectInspector
name|inputOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
decl_stmt|;
name|testCast
argument_list|(
name|STRING
argument_list|,
name|inputOI
argument_list|,
name|timestamp
argument_list|(
literal|"2009-07-30 00:00:08"
argument_list|)
argument_list|,
literal|"yyyy-MM-dd HH24:mi:ss"
argument_list|,
literal|"2009-07-30 00:00:08"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|STRING
argument_list|,
name|inputOI
argument_list|,
name|timestamp
argument_list|(
literal|"2009-07-30 11:02:00"
argument_list|)
argument_list|,
literal|"MM/dd/yyyy hh24miss"
argument_list|,
literal|"07/30/2009 110200"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|STRING
argument_list|,
name|inputOI
argument_list|,
name|timestamp
argument_list|(
literal|"2009-07-30 01:02:03"
argument_list|)
argument_list|,
literal|"MM"
argument_list|,
literal|"07"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|STRING
argument_list|,
name|inputOI
argument_list|,
name|timestamp
argument_list|(
literal|"1969-07-30 00:00:00"
argument_list|)
argument_list|,
literal|"yy"
argument_list|,
literal|"69"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|CHAR
argument_list|,
literal|3
argument_list|,
name|inputOI
argument_list|,
name|timestamp
argument_list|(
literal|"2009-07-30 00:00:08"
argument_list|)
argument_list|,
literal|"yyyy-MM-dd HH24:mi:ss"
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|CHAR
argument_list|,
literal|3
argument_list|,
name|inputOI
argument_list|,
name|timestamp
argument_list|(
literal|"2009-07-30 11:02:00"
argument_list|)
argument_list|,
literal|"MM/dd/yyyy hh24miss"
argument_list|,
literal|"07/"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|CHAR
argument_list|,
literal|3
argument_list|,
name|inputOI
argument_list|,
name|timestamp
argument_list|(
literal|"2009-07-30 01:02:03"
argument_list|)
argument_list|,
literal|"MM"
argument_list|,
literal|"07 "
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|CHAR
argument_list|,
literal|3
argument_list|,
name|inputOI
argument_list|,
name|timestamp
argument_list|(
literal|"1969-07-30 00:00:00"
argument_list|)
argument_list|,
literal|"yy"
argument_list|,
literal|"69 "
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|VARCHAR
argument_list|,
literal|3
argument_list|,
name|inputOI
argument_list|,
name|timestamp
argument_list|(
literal|"2009-07-30 00:00:08"
argument_list|)
argument_list|,
literal|"yyyy-MM-dd HH24:mi:ss"
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|VARCHAR
argument_list|,
literal|3
argument_list|,
name|inputOI
argument_list|,
name|timestamp
argument_list|(
literal|"2009-07-30 11:02:00"
argument_list|)
argument_list|,
literal|"MM/dd/yyyy hh24miss"
argument_list|,
literal|"07/"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|VARCHAR
argument_list|,
literal|3
argument_list|,
name|inputOI
argument_list|,
name|timestamp
argument_list|(
literal|"2009-07-30 01:02:03"
argument_list|)
argument_list|,
literal|"MM"
argument_list|,
literal|"07"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|VARCHAR
argument_list|,
literal|3
argument_list|,
name|inputOI
argument_list|,
name|timestamp
argument_list|(
literal|"1969-07-30 00:00:00"
argument_list|)
argument_list|,
literal|"yy"
argument_list|,
literal|"69"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringTypesToDateWithFormat
parameter_list|()
throws|throws
name|HiveException
block|{
name|ObjectInspector
name|inputOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
decl_stmt|;
name|testCast
argument_list|(
name|DATE
argument_list|,
name|inputOI
argument_list|,
literal|"1969-07-30 13:00"
argument_list|,
literal|"yyyy-MM-dd hh24:mi"
argument_list|,
literal|"1969-07-30"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|DATE
argument_list|,
name|inputOI
argument_list|,
literal|"307-2009"
argument_list|,
literal|"ddmm-yyyy"
argument_list|,
literal|"2009-07-30"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|DATE
argument_list|,
name|inputOI
argument_list|,
literal|"307-2009"
argument_list|,
literal|"ddd-yyyy"
argument_list|,
literal|"2009-11-03"
argument_list|)
expr_stmt|;
name|inputOI
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaHiveCharObjectInspector
expr_stmt|;
name|testCast
argument_list|(
name|DATE
argument_list|,
name|inputOI
argument_list|,
operator|new
name|HiveChar
argument_list|(
literal|"1969-07-30 13:00"
argument_list|,
literal|15
argument_list|)
argument_list|,
literal|"yyyy-MM-dd hh24:mi"
argument_list|,
literal|"1969-07-30"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|DATE
argument_list|,
name|inputOI
argument_list|,
operator|new
name|HiveChar
argument_list|(
literal|"307-2009"
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|"ddmm-yyyy"
argument_list|,
literal|"2200-07-30"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|DATE
argument_list|,
name|inputOI
argument_list|,
operator|new
name|HiveChar
argument_list|(
literal|"307-2009"
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|"ddd-yyyy"
argument_list|,
literal|"2200-11-03"
argument_list|)
expr_stmt|;
name|inputOI
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaHiveVarcharObjectInspector
expr_stmt|;
name|testCast
argument_list|(
name|DATE
argument_list|,
name|inputOI
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
literal|"1969-07-30 13:00"
argument_list|,
literal|15
argument_list|)
argument_list|,
literal|"yyyy-MM-dd hh24:mi"
argument_list|,
literal|"1969-07-30"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|DATE
argument_list|,
name|inputOI
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
literal|"307-2009"
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|"ddmm-yyyy"
argument_list|,
literal|"2200-07-30"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|DATE
argument_list|,
name|inputOI
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
literal|"307-2009"
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|"ddd-yyyy"
argument_list|,
literal|"2200-11-03"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringTypesToTimestampWithFormat
parameter_list|()
throws|throws
name|HiveException
block|{
name|ObjectInspector
name|inputOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
decl_stmt|;
name|testCast
argument_list|(
name|TIMESTAMP
argument_list|,
name|inputOI
argument_list|,
literal|"2009-07-30 01:02:03"
argument_list|,
literal|"yyyy-MM-dd HH24:mi:ss"
argument_list|,
literal|"2009-07-30 01:02:03"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|TIMESTAMP
argument_list|,
name|inputOI
argument_list|,
literal|"07/30/2009 11:0200"
argument_list|,
literal|"MM/dd/yyyy hh24:miss"
argument_list|,
literal|"2009-07-30 11:02:00"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|TIMESTAMP
argument_list|,
name|inputOI
argument_list|,
literal|"969.07.30."
argument_list|,
literal|"yyy.MM.dd."
argument_list|,
literal|"2969-07-30 00:00:00"
argument_list|)
expr_stmt|;
name|inputOI
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaHiveCharObjectInspector
expr_stmt|;
name|testCast
argument_list|(
name|TIMESTAMP
argument_list|,
literal|13
argument_list|,
name|inputOI
argument_list|,
operator|new
name|HiveChar
argument_list|(
literal|"2009-07-30 01:02:03"
argument_list|,
literal|13
argument_list|)
argument_list|,
literal|"yyyy-MM-dd HH24"
argument_list|,
literal|"2009-07-30 01:00:00"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|TIMESTAMP
argument_list|,
literal|18
argument_list|,
name|inputOI
argument_list|,
operator|new
name|HiveChar
argument_list|(
literal|"07/30/2009 11:0200"
argument_list|,
literal|18
argument_list|)
argument_list|,
literal|"MM/dd/yyyy hh24:miss"
argument_list|,
literal|"2009-07-30 11:02:00"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|TIMESTAMP
argument_list|,
literal|10
argument_list|,
name|inputOI
argument_list|,
operator|new
name|HiveChar
argument_list|(
literal|"969.07.30.12:00"
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|"yyy.MM.dd."
argument_list|,
literal|"2969-07-30 00:00:00"
argument_list|)
expr_stmt|;
name|inputOI
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaHiveVarcharObjectInspector
expr_stmt|;
name|testCast
argument_list|(
name|TIMESTAMP
argument_list|,
literal|13
argument_list|,
name|inputOI
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
literal|"2009-07-30 01:02:03"
argument_list|,
literal|13
argument_list|)
argument_list|,
literal|"yyyy-MM-dd HH24"
argument_list|,
literal|"2009-07-30 01:00:00"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|TIMESTAMP
argument_list|,
literal|18
argument_list|,
name|inputOI
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
literal|"07/30/2009 11:0200"
argument_list|,
literal|18
argument_list|)
argument_list|,
literal|"MM/dd/yyyy hh24:miss"
argument_list|,
literal|"2009-07-30 11:02:00"
argument_list|)
expr_stmt|;
name|testCast
argument_list|(
name|TIMESTAMP
argument_list|,
literal|10
argument_list|,
name|inputOI
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
literal|"969.07.30.12:00"
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|"yyy.MM.dd."
argument_list|,
literal|"2969-07-30 00:00:00"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TimestampWritableV2
name|timestamp
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|TimestampWritableV2
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|DateWritableV2
name|date
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|DateWritableV2
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|testCast
parameter_list|(
name|int
name|typeCode
parameter_list|,
name|ObjectInspector
name|inputOI
parameter_list|,
name|Object
name|input
parameter_list|,
name|String
name|format
parameter_list|,
name|String
name|expOutput
parameter_list|)
throws|throws
name|HiveException
block|{
name|testCast
argument_list|(
name|typeCode
argument_list|,
literal|0
argument_list|,
name|inputOI
argument_list|,
name|input
argument_list|,
name|format
argument_list|,
name|expOutput
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testCast
parameter_list|(
name|int
name|typeCode
parameter_list|,
name|int
name|length
parameter_list|,
name|ObjectInspector
name|inputOI
parameter_list|,
name|Object
name|input
parameter_list|,
name|String
name|format
parameter_list|,
name|String
name|expOutput
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// initialize
name|GenericUDFCastFormat
name|udf
init|=
operator|new
name|GenericUDFCastFormat
argument_list|()
decl_stmt|;
name|ConstantObjectInspector
name|typeCodeOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"int"
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
name|typeCode
argument_list|)
argument_list|)
decl_stmt|;
name|ConstantObjectInspector
name|formatOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"string"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|format
argument_list|)
argument_list|)
decl_stmt|;
name|ConstantObjectInspector
name|lengthOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"int"
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
name|length
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|initArgs
init|=
block|{
name|typeCodeOI
block|,
name|inputOI
block|,
name|formatOI
block|,
name|lengthOI
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|initArgs
argument_list|)
expr_stmt|;
comment|// evaluate
name|GenericUDF
operator|.
name|DeferredObject
name|typeCodeObj
init|=
operator|new
name|GenericUDF
operator|.
name|DeferredJavaObject
argument_list|(
name|typeCode
argument_list|)
decl_stmt|;
name|GenericUDF
operator|.
name|DeferredObject
name|inputObj
init|=
operator|new
name|GenericUDF
operator|.
name|DeferredJavaObject
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|GenericUDF
operator|.
name|DeferredObject
name|formatObj
init|=
operator|new
name|GenericUDF
operator|.
name|DeferredJavaObject
argument_list|(
operator|new
name|Text
argument_list|(
name|format
argument_list|)
argument_list|)
decl_stmt|;
name|GenericUDF
operator|.
name|DeferredObject
name|lengthObj
init|=
operator|new
name|GenericUDF
operator|.
name|DeferredJavaObject
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|GenericUDF
operator|.
name|DeferredObject
index|[]
name|evalArgs
init|=
block|{
name|typeCodeObj
block|,
name|inputObj
block|,
name|formatObj
block|,
name|lengthObj
block|}
decl_stmt|;
name|Object
name|output
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|evalArgs
argument_list|)
decl_stmt|;
if|if
condition|(
name|output
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Cast "
operator|+
name|inputOI
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" \""
operator|+
name|input
operator|+
literal|"\" to "
operator|+
name|GenericUDFCastFormat
operator|.
name|OUTPUT_TYPES
operator|.
name|get
argument_list|(
name|typeCode
argument_list|)
operator|+
literal|" failed, output null"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Cast "
operator|+
name|inputOI
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" \""
operator|+
name|input
operator|+
literal|"\" to "
operator|+
name|GenericUDFCastFormat
operator|.
name|OUTPUT_TYPES
operator|.
name|get
argument_list|(
name|typeCode
argument_list|)
operator|+
literal|" failed "
argument_list|,
name|expOutput
argument_list|,
name|output
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try with null input
name|GenericUDF
operator|.
name|DeferredObject
index|[]
name|nullArgs
init|=
block|{
name|typeCodeObj
block|,
operator|new
name|GenericUDF
operator|.
name|DeferredJavaObject
argument_list|(
literal|null
argument_list|)
block|,
name|formatObj
block|,
name|lengthObj
block|}
decl_stmt|;
name|assertNull
argument_list|(
name|udf
operator|.
name|getFuncName
argument_list|()
operator|+
literal|" with NULL arguments failed"
argument_list|,
name|udf
operator|.
name|evaluate
argument_list|(
name|nullArgs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

