begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestRuleRegExp
block|{
specifier|public
class|class
name|TestNode
implements|implements
name|Node
block|{
specifier|private
name|String
name|name
decl_stmt|;
name|TestNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPatternWithoutWildCardChar
parameter_list|()
block|{
name|String
name|patternStr
init|=
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
operator|+
name|SelectOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
operator|+
name|FileSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
decl_stmt|;
name|RuleRegExp
name|rule1
init|=
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|patternStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rule1
operator|.
name|rulePatternIsValidWithoutWildCardChar
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rule1
operator|.
name|rulePatternIsValidWithWildCardChar
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// positive test
name|Stack
argument_list|<
name|Node
argument_list|>
name|ns1
init|=
operator|new
name|Stack
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|ns1
operator|.
name|push
argument_list|(
operator|new
name|TestNode
argument_list|(
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|push
argument_list|(
operator|new
name|TestNode
argument_list|(
name|SelectOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|push
argument_list|(
operator|new
name|TestNode
argument_list|(
name|FileSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|rule1
operator|.
name|cost
argument_list|(
name|ns1
argument_list|)
argument_list|,
name|patternStr
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// negative test
name|Stack
argument_list|<
name|Node
argument_list|>
name|ns2
init|=
operator|new
name|Stack
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|ns2
operator|.
name|push
argument_list|(
operator|new
name|TestNode
argument_list|(
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|push
argument_list|(
operator|new
name|TestNode
argument_list|(
name|TableScanOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|push
argument_list|(
operator|new
name|TestNode
argument_list|(
name|FileSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|rule1
operator|.
name|cost
argument_list|(
name|ns2
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPatternWithWildCardChar
parameter_list|()
block|{
name|RuleRegExp
name|rule1
init|=
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
literal|"("
operator|+
name|TableScanOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
operator|+
name|FilterOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%)|("
operator|+
name|TableScanOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
operator|+
name|FileSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rule1
operator|.
name|rulePatternIsValidWithoutWildCardChar
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rule1
operator|.
name|rulePatternIsValidWithWildCardChar
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// positive test
name|Stack
argument_list|<
name|Node
argument_list|>
name|ns1
init|=
operator|new
name|Stack
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|ns1
operator|.
name|push
argument_list|(
operator|new
name|TestNode
argument_list|(
name|TableScanOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|push
argument_list|(
operator|new
name|TestNode
argument_list|(
name|FilterOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Stack
argument_list|<
name|Node
argument_list|>
name|ns2
init|=
operator|new
name|Stack
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|ns2
operator|.
name|push
argument_list|(
operator|new
name|TestNode
argument_list|(
name|TableScanOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|push
argument_list|(
operator|new
name|TestNode
argument_list|(
name|FileSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertNotEquals
argument_list|(
name|rule1
operator|.
name|cost
argument_list|(
name|ns1
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|rule1
operator|.
name|cost
argument_list|(
name|ns2
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// negative test
name|Stack
argument_list|<
name|Node
argument_list|>
name|ns3
init|=
operator|new
name|Stack
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|ns3
operator|.
name|push
argument_list|(
operator|new
name|TestNode
argument_list|(
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ns3
operator|.
name|push
argument_list|(
operator|new
name|TestNode
argument_list|(
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ns3
operator|.
name|push
argument_list|(
operator|new
name|TestNode
argument_list|(
name|FileSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|rule1
operator|.
name|cost
argument_list|(
name|ns3
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

