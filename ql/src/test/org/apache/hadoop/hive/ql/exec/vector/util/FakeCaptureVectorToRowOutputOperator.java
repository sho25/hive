begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|rowobjects
operator|.
name|RowTestObjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExtractRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContextRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_comment
comment|/**  * Operator that captures output emitted by parent.  * Used in unit test only.  */
end_comment

begin_class
specifier|public
class|class
name|FakeCaptureVectorToRowOutputOperator
extends|extends
name|FakeCaptureOutputOperator
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
decl_stmt|;
specifier|private
name|TypeInfo
index|[]
name|outputTypeInfos
decl_stmt|;
specifier|private
name|ObjectInspector
index|[]
name|outputObjectInspectors
decl_stmt|;
specifier|private
name|VectorExtractRow
name|vectorExtractRow
decl_stmt|;
comment|/** Kryo ctor. */
specifier|protected
name|FakeCaptureVectorToRowOutputOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|FakeCaptureVectorToRowOutputOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
block|}
specifier|public
specifier|static
name|FakeCaptureVectorToRowOutputOperator
name|addCaptureOutputChild
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
block|{
name|FakeCaptureVectorToRowOutputOperator
name|out
init|=
operator|new
name|FakeCaptureVectorToRowOutputOperator
argument_list|(
name|ctx
argument_list|,
name|op
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|listParents
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|listParents
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|out
operator|.
name|setParentOperators
argument_list|(
name|listParents
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|listChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|listChildren
operator|.
name|add
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|op
operator|.
name|setChildOperators
argument_list|(
name|listChildren
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initializeOp
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|VectorizationContextRegion
name|vectorizationContextRegion
init|=
operator|(
name|VectorizationContextRegion
operator|)
name|op
decl_stmt|;
name|VectorizationContext
name|outputVectorizationContext
init|=
name|vectorizationContextRegion
operator|.
name|getOutputVectorizationContext
argument_list|()
decl_stmt|;
name|outputTypeInfos
operator|=
name|outputVectorizationContext
operator|.
name|getInitialTypeInfos
argument_list|()
expr_stmt|;
specifier|final
name|int
name|outputLength
init|=
name|outputTypeInfos
operator|.
name|length
decl_stmt|;
name|outputObjectInspectors
operator|=
operator|new
name|ObjectInspector
index|[
name|outputLength
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputLength
condition|;
name|i
operator|++
control|)
block|{
name|TypeInfo
name|typeInfo
init|=
name|outputTypeInfos
index|[
name|i
index|]
decl_stmt|;
name|outputObjectInspectors
index|[
name|i
index|]
operator|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|typeInfo
argument_list|)
expr_stmt|;
block|}
name|vectorExtractRow
operator|=
operator|new
name|VectorExtractRow
argument_list|()
expr_stmt|;
name|vectorExtractRow
operator|.
name|init
argument_list|(
name|outputTypeInfos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|(
name|VectorizedRowBatch
operator|)
name|row
decl_stmt|;
name|boolean
name|selectedInUse
init|=
name|batch
operator|.
name|selectedInUse
decl_stmt|;
name|int
index|[]
name|selected
init|=
name|batch
operator|.
name|selected
decl_stmt|;
for|for
control|(
name|int
name|logical
init|=
literal|0
init|;
name|logical
operator|<
name|batch
operator|.
name|size
condition|;
name|logical
operator|++
control|)
block|{
name|int
name|batchIndex
init|=
operator|(
name|selectedInUse
condition|?
name|selected
index|[
name|logical
index|]
else|:
name|logical
operator|)
decl_stmt|;
name|Object
index|[]
name|rowObjects
init|=
operator|new
name|Object
index|[
name|outputObjectInspectors
operator|.
name|length
index|]
decl_stmt|;
name|vectorExtractRow
operator|.
name|extractRow
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|rowObjects
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|rowObjects
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
switch|switch
condition|(
name|outputTypeInfos
index|[
name|c
index|]
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
name|rowObjects
index|[
name|c
index|]
operator|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|outputObjectInspectors
index|[
name|c
index|]
operator|)
operator|.
name|copyObject
argument_list|(
name|rowObjects
index|[
name|c
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
block|{
specifier|final
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|outputTypeInfos
index|[
name|c
index|]
decl_stmt|;
specifier|final
name|StandardStructObjectInspector
name|structInspector
init|=
operator|(
name|StandardStructObjectInspector
operator|)
name|outputObjectInspectors
index|[
name|c
index|]
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|fieldTypeInfos
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|structFields
init|=
name|structInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|oldStruct
init|=
name|rowObjects
index|[
name|c
index|]
decl_stmt|;
if|if
condition|(
name|oldStruct
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|currentStructData
init|=
name|structInspector
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|oldStruct
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|newStruct
init|=
name|structInspector
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StructField
name|structField
init|=
name|structFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|oldValue
init|=
name|currentStructData
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|newValue
decl_stmt|;
if|if
condition|(
name|oldValue
operator|!=
literal|null
condition|)
block|{
name|newValue
operator|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|structField
operator|.
name|getFieldObjectInspector
argument_list|()
operator|)
operator|.
name|copyObject
argument_list|(
name|oldValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newValue
operator|=
literal|null
expr_stmt|;
block|}
name|structInspector
operator|.
name|setStructFieldData
argument_list|(
name|newStruct
argument_list|,
name|structField
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
name|rowObjects
index|[
name|c
index|]
operator|=
operator|(
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|newStruct
operator|)
operator|.
name|toArray
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected category "
operator|+
name|outputTypeInfos
index|[
name|c
index|]
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|super
operator|.
name|process
argument_list|(
name|rowObjects
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

