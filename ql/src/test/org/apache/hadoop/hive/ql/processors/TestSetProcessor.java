begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|SystemVariables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestSetProcessor
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_SYSTEM_PROPERTY
init|=
literal|"testSystemPropertyPassword"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_SYSTEM_PROPERTY_VALUE
init|=
literal|"testSystemPropertyValue"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_ENV_VAR_PASSWORD_VALUE
init|=
literal|"testEnvPasswordValue"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_ENV_VAR_PASSWORD
init|=
literal|"testEnvPassword"
decl_stmt|;
specifier|private
name|ByteArrayOutputStream
name|baos
decl_stmt|;
specifier|private
specifier|static
name|SessionState
name|state
decl_stmt|;
specifier|private
name|SetProcessor
name|processor
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|TEST_ENV_VAR_PASSWORD
argument_list|,
name|TEST_ENV_VAR_PASSWORD_VALUE
argument_list|)
expr_stmt|;
name|setEnv
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|TEST_SYSTEM_PROPERTY
argument_list|,
name|TEST_SYSTEM_PROPERTY_VALUE
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|state
operator|=
name|SessionState
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setupTest
parameter_list|()
block|{
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|state
operator|.
name|out
operator|=
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|processor
operator|=
operator|new
name|SetProcessor
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHiddenConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|runSetProcessor
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|baos
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|output
operator|.
name|contains
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREPWD
operator|.
name|varname
operator|+
literal|"="
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|output
operator|.
name|contains
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_SSL_KEYSTORE_PASSWORD
operator|.
name|varname
operator|+
literal|"="
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHiddenConfigSetVarName
parameter_list|()
block|{
name|runSetProcessor
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREPWD
operator|.
name|varname
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|baos
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|output
operator|.
name|contains
argument_list|(
literal|"hidden"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnvPasswordMask
parameter_list|()
throws|throws
name|Exception
block|{
name|runSetProcessor
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|baos
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|output
operator|.
name|contains
argument_list|(
name|TEST_ENV_VAR_PASSWORD
operator|+
literal|"="
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnvPasswordMaskIndividual
parameter_list|()
throws|throws
name|Exception
block|{
name|runSetProcessor
argument_list|(
name|SystemVariables
operator|.
name|ENV_PREFIX
operator|+
name|TEST_ENV_VAR_PASSWORD
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|baos
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|output
operator|.
name|contains
argument_list|(
name|TEST_ENV_VAR_PASSWORD_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|output
operator|.
name|contains
argument_list|(
literal|"hidden"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSystemProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|runSetProcessor
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|baos
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|output
operator|.
name|contains
argument_list|(
name|TEST_SYSTEM_PROPERTY
operator|+
literal|"="
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSystemPropertyIndividual
parameter_list|()
throws|throws
name|Exception
block|{
name|runSetProcessor
argument_list|(
name|SystemVariables
operator|.
name|SYSTEM_PREFIX
operator|+
name|TEST_SYSTEM_PROPERTY
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|baos
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|output
operator|.
name|contains
argument_list|(
name|TEST_SYSTEM_PROPERTY_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|output
operator|.
name|contains
argument_list|(
literal|"hidden"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Simulates the set<command>;    */
specifier|private
name|void
name|runSetProcessor
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|processor
operator|.
name|run
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|state
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/*    * Dirty hack to set the environment variables using reflection code. This method is for testing    * purposes only and should not be used elsewhere    */
specifier|private
specifier|final
specifier|static
name|void
name|setEnv
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newenv
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
index|[]
name|classes
init|=
name|Collections
operator|.
name|class
operator|.
name|getDeclaredClasses
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
name|System
operator|.
name|getenv
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
name|cl
range|:
name|classes
control|)
block|{
if|if
condition|(
literal|"java.util.Collections$UnmodifiableMap"
operator|.
name|equals
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Field
name|field
init|=
name|cl
operator|.
name|getDeclaredField
argument_list|(
literal|"m"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|field
operator|.
name|get
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|obj
decl_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|newenv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

