begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|TestOrcStruct
block|{
annotation|@
name|Test
specifier|public
name|void
name|testStruct
parameter_list|()
throws|throws
name|Exception
block|{
name|OrcStruct
name|st1
init|=
operator|new
name|OrcStruct
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|OrcStruct
name|st2
init|=
operator|new
name|OrcStruct
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|OrcStruct
name|st3
init|=
operator|new
name|OrcStruct
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|st1
operator|.
name|setFieldValue
argument_list|(
literal|0
argument_list|,
literal|"hop"
argument_list|)
expr_stmt|;
name|st1
operator|.
name|setFieldValue
argument_list|(
literal|1
argument_list|,
literal|"on"
argument_list|)
expr_stmt|;
name|st1
operator|.
name|setFieldValue
argument_list|(
literal|2
argument_list|,
literal|"pop"
argument_list|)
expr_stmt|;
name|st1
operator|.
name|setFieldValue
argument_list|(
literal|3
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|st1
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|st2
operator|.
name|setFieldValue
argument_list|(
literal|0
argument_list|,
literal|"hop"
argument_list|)
expr_stmt|;
name|st2
operator|.
name|setFieldValue
argument_list|(
literal|1
argument_list|,
literal|"on"
argument_list|)
expr_stmt|;
name|st2
operator|.
name|setFieldValue
argument_list|(
literal|2
argument_list|,
literal|"pop"
argument_list|)
expr_stmt|;
name|st2
operator|.
name|setFieldValue
argument_list|(
literal|3
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|st1
argument_list|,
name|st2
argument_list|)
expr_stmt|;
name|st3
operator|.
name|setFieldValue
argument_list|(
literal|0
argument_list|,
literal|"hop"
argument_list|)
expr_stmt|;
name|st3
operator|.
name|setFieldValue
argument_list|(
literal|1
argument_list|,
literal|"on"
argument_list|)
expr_stmt|;
name|st3
operator|.
name|setFieldValue
argument_list|(
literal|2
argument_list|,
literal|"pop"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|st1
operator|.
name|equals
argument_list|(
name|st3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11241
argument_list|,
name|st1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|st1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|st2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11204
argument_list|,
name|st3
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{hop, on, pop, 42}"
argument_list|,
name|st1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|st1
operator|.
name|setFieldValue
argument_list|(
literal|3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|st1
operator|.
name|equals
argument_list|(
name|st2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|st2
operator|.
name|equals
argument_list|(
name|st1
argument_list|)
argument_list|)
expr_stmt|;
name|st2
operator|.
name|setFieldValue
argument_list|(
literal|3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|st1
argument_list|,
name|st2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInspectorFromTypeInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
literal|"struct<c1:boolean,c2:tinyint"
operator|+
literal|",c3:smallint,c4:int,c5:bigint,c6:float,c7:double,c8:binary,"
operator|+
literal|"c9:string,c10:struct<c1:int>,c11:map<int,int>,c12:uniontype<int>"
operator|+
literal|",c13:array<timestamp>>"
argument_list|)
decl_stmt|;
name|StructObjectInspector
name|inspector
init|=
operator|(
name|StructObjectInspector
operator|)
name|OrcStruct
operator|.
name|createObjectInspector
argument_list|(
name|typeInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"struct<c1:boolean,c2:tinyint,c3:smallint,c4:int,c5:"
operator|+
literal|"bigint,c6:float,c7:double,c8:binary,c9:string,c10:struct<"
operator|+
literal|"c1:int>,c11:map<int,int>,c12:uniontype<int>,c13:array<timestamp>>"
argument_list|,
name|inspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldComment
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|inspector
operator|.
name|getStructFieldRef
argument_list|(
literal|"UNKNOWN"
argument_list|)
argument_list|)
expr_stmt|;
name|OrcStruct
name|s1
init|=
operator|new
name|OrcStruct
argument_list|(
literal|13
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|13
condition|;
operator|++
name|i
control|)
block|{
name|s1
operator|.
name|setFieldValue
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|inspector
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|s1
argument_list|)
argument_list|)
expr_stmt|;
name|ListObjectInspector
name|listOI
init|=
operator|(
name|ListObjectInspector
operator|)
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|get
argument_list|(
literal|12
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ObjectInspector
operator|.
name|Category
operator|.
name|LIST
argument_list|,
name|listOI
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|listOI
operator|.
name|getListElement
argument_list|(
name|list
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|listOI
operator|.
name|getListElement
argument_list|(
name|list
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|listOI
operator|.
name|getListElement
argument_list|(
name|list
argument_list|,
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|listOI
operator|.
name|getListLength
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|MapObjectInspector
name|mapOI
init|=
operator|(
name|MapObjectInspector
operator|)
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|get
argument_list|(
literal|10
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mapOI
operator|.
name|getMapSize
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|mapOI
operator|.
name|getMapValueElement
argument_list|(
name|map
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnion
parameter_list|()
throws|throws
name|Exception
block|{
name|OrcUnion
name|un1
init|=
operator|new
name|OrcUnion
argument_list|()
decl_stmt|;
name|OrcUnion
name|un2
init|=
operator|new
name|OrcUnion
argument_list|()
decl_stmt|;
name|un1
operator|.
name|set
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|"hi"
argument_list|)
expr_stmt|;
name|un2
operator|.
name|set
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|"hi"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|un1
argument_list|,
name|un2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|un1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|un2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|un2
operator|.
name|set
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|un1
operator|.
name|equals
argument_list|(
name|un2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|un2
operator|.
name|equals
argument_list|(
name|un1
argument_list|)
argument_list|)
expr_stmt|;
name|un1
operator|.
name|set
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|un1
argument_list|,
name|un2
argument_list|)
expr_stmt|;
name|un2
operator|.
name|set
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|"hi"
argument_list|)
expr_stmt|;
name|un1
operator|.
name|set
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|"hi"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|un1
operator|.
name|equals
argument_list|(
name|un2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|un1
operator|.
name|hashCode
argument_list|()
operator|==
name|un2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|un2
operator|.
name|set
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|"byte"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|un1
operator|.
name|equals
argument_list|(
name|un2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"union(1, hi)"
argument_list|,
name|un1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|un1
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

