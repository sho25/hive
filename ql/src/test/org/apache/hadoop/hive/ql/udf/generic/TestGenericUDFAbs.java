begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredJavaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFAbs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_class
specifier|public
class|class
name|TestGenericUDFAbs
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testInt
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFAbs
name|udf
init|=
operator|new
name|GenericUDFAbs
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|DeferredObject
name|valueObj
init|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|107
argument_list|)
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
block|{
name|valueObj
block|}
decl_stmt|;
name|IntWritable
name|output
init|=
operator|(
name|IntWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"abs() test for INT failed "
argument_list|,
literal|107
argument_list|,
name|output
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|valueObj
operator|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|IntWritable
argument_list|(
operator|-
literal|107
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
name|valueObj
expr_stmt|;
name|output
operator|=
operator|(
name|IntWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abs() test for INT failed "
argument_list|,
literal|107
argument_list|,
name|output
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLong
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFAbs
name|udf
init|=
operator|new
name|GenericUDFAbs
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|DeferredObject
name|valueObj
init|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|LongWritable
argument_list|(
literal|107L
argument_list|)
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
block|{
name|valueObj
block|}
decl_stmt|;
name|LongWritable
name|output
init|=
operator|(
name|LongWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"abs() test for LONG failed "
argument_list|,
literal|107
argument_list|,
name|output
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|valueObj
operator|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|LongWritable
argument_list|(
operator|-
literal|107L
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
name|valueObj
expr_stmt|;
name|output
operator|=
operator|(
name|LongWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abs() test for LONG failed "
argument_list|,
literal|107
argument_list|,
name|output
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDouble
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFAbs
name|udf
init|=
operator|new
name|GenericUDFAbs
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|DeferredObject
name|valueObj
init|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
literal|107.78
argument_list|)
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
block|{
name|valueObj
block|}
decl_stmt|;
name|DoubleWritable
name|output
init|=
operator|(
name|DoubleWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"abs() test for Double failed "
argument_list|,
literal|107.78
argument_list|,
name|output
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|valueObj
operator|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
operator|-
literal|107.78
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
name|valueObj
expr_stmt|;
name|output
operator|=
operator|(
name|DoubleWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abs() test for Double failed "
argument_list|,
literal|107.78
argument_list|,
name|output
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFloat
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFAbs
name|udf
init|=
operator|new
name|GenericUDFAbs
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableFloatObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|DeferredObject
name|valueObj
init|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|FloatWritable
argument_list|(
literal|107.78f
argument_list|)
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
block|{
name|valueObj
block|}
decl_stmt|;
name|DoubleWritable
name|output
init|=
operator|(
name|DoubleWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
comment|// Make sure flow and double equality compare works
name|assertTrue
argument_list|(
literal|"abs() test for Float failed "
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
literal|107.78
operator|-
name|output
operator|.
name|get
argument_list|()
argument_list|)
operator|<
literal|0.0001
argument_list|)
expr_stmt|;
name|valueObj
operator|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|FloatWritable
argument_list|(
operator|-
literal|107.78f
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
name|valueObj
expr_stmt|;
name|output
operator|=
operator|(
name|DoubleWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"abs() test for Float failed "
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
literal|107.78
operator|-
name|output
operator|.
name|get
argument_list|()
argument_list|)
operator|<
literal|0.0001
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testText
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFAbs
name|udf
init|=
operator|new
name|GenericUDFAbs
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|DeferredObject
name|valueObj
init|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|Text
argument_list|(
literal|"123.45"
argument_list|)
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
block|{
name|valueObj
block|}
decl_stmt|;
name|DoubleWritable
name|output
init|=
operator|(
name|DoubleWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"abs() test for String failed "
argument_list|,
literal|"123.45"
argument_list|,
name|output
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|valueObj
operator|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|Text
argument_list|(
literal|"-123.45"
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
name|valueObj
expr_stmt|;
name|output
operator|=
operator|(
name|DoubleWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abs() test for String failed "
argument_list|,
literal|"123.45"
argument_list|,
name|output
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|valueObj
operator|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
name|valueObj
expr_stmt|;
name|output
operator|=
operator|(
name|DoubleWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abs() test for String failed "
argument_list|,
literal|null
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testHiveDecimal
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFAbs
name|udf
init|=
operator|new
name|GenericUDFAbs
argument_list|()
decl_stmt|;
name|int
name|prec
init|=
literal|12
decl_stmt|;
name|int
name|scale
init|=
literal|9
decl_stmt|;
name|ObjectInspector
name|valueOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|getDecimalTypeInfo
argument_list|(
name|prec
argument_list|,
name|scale
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI
block|}
decl_stmt|;
name|PrimitiveObjectInspector
name|outputOI
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
decl_stmt|;
comment|// Make sure result precision/scale matches the input prec/scale
name|assertEquals
argument_list|(
literal|"result precision for abs()"
argument_list|,
name|prec
argument_list|,
name|outputOI
operator|.
name|precision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"result scale for abs()"
argument_list|,
name|scale
argument_list|,
name|outputOI
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|DeferredObject
name|valueObj
init|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|HiveDecimalWritable
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"107.123456789"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
block|{
name|valueObj
block|}
decl_stmt|;
name|HiveDecimalWritable
name|output
init|=
operator|(
name|HiveDecimalWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"abs() test for HiveDecimal failed "
argument_list|,
literal|107.123456789
argument_list|,
name|output
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
name|valueObj
operator|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|HiveDecimalWritable
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-107.123456789"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
name|valueObj
expr_stmt|;
name|output
operator|=
operator|(
name|HiveDecimalWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abs() test for HiveDecimal failed "
argument_list|,
literal|107.123456789
argument_list|,
name|output
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// null input
name|args
index|[
literal|0
index|]
operator|=
operator|new
name|DeferredJavaObject
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|output
operator|=
operator|(
name|HiveDecimalWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abs(null)"
argument_list|,
literal|null
argument_list|,
name|output
argument_list|)
expr_stmt|;
comment|// if value too large, should also be null
name|args
index|[
literal|0
index|]
operator|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|HiveDecimalWritable
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-1000.123456"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|=
operator|(
name|HiveDecimalWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abs() of too large decimal value"
argument_list|,
literal|null
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

