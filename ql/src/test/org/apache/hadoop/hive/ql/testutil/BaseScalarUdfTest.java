begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|testutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CollectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CollectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|InspectableObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_comment
comment|/**  *  * Provides a base environment for testing scalar UDF's. Users should extend this class  * and override the abstract methods. It is highly suggested to test with multiple rows  * of input because UDFS are stateful in some cases, null, and boundary conditions.  *  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Ignore
specifier|public
specifier|abstract
class|class
name|BaseScalarUdfTest
extends|extends
name|TestCase
block|{
comment|/**    * The data from this method will be fed through the    * select operator. It is considered the source data    * for the test.    * @return The source table that will be fed through the operator tree    */
specifier|public
specifier|abstract
name|InspectableObject
index|[]
name|getBaseTable
parameter_list|()
function_decl|;
comment|/**    * The data returned from this UDF will be compared to the results    * of the test. The DataBuilder class can be used to construct    * the result.    * @return The data that will be compared to the results    */
specifier|public
specifier|abstract
name|InspectableObject
index|[]
name|getExpectedResult
parameter_list|()
function_decl|;
comment|/**    * Implementors of this method create an expression list. This list    * transforms the source data into the final output. The DataBuilder    * class can be used to construct the result.    * @return A list of expressions    * @throws UDFArgumentException if the UDF has been formulated incorrectly    */
specifier|public
specifier|abstract
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|getExpressionList
parameter_list|()
throws|throws
name|UDFArgumentException
function_decl|;
comment|/**    * This method drives the test. It takes the data from getBaseTable() and    * feeds it through a SELECT operator with a COLLECT operator after. Each    * row that is produced by the collect operator is compared to getExpectedResult()    * and if every row is the expected result the method completes without asserting.    * @throws HiveException    */
specifier|public
specifier|final
name|void
name|testUdf
parameter_list|()
throws|throws
name|HiveException
block|{
name|InspectableObject
index|[]
name|data
init|=
name|getBaseTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|expressionList
init|=
name|getExpressionList
argument_list|()
decl_stmt|;
name|SelectDesc
name|selectCtx
init|=
operator|new
name|SelectDesc
argument_list|(
name|expressionList
argument_list|,
name|OperatorTestUtils
operator|.
name|createOutputColumnNames
argument_list|(
name|expressionList
argument_list|)
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|SelectDesc
argument_list|>
name|op
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|SelectDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|op
operator|.
name|setConf
argument_list|(
name|selectCtx
argument_list|)
expr_stmt|;
name|CollectDesc
name|cd
init|=
operator|new
name|CollectDesc
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|CollectOperator
name|cdop
init|=
operator|(
name|CollectOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|cd
argument_list|,
name|op
argument_list|)
decl_stmt|;
name|op
operator|.
name|initialize
argument_list|(
operator|new
name|JobConf
argument_list|(
name|OperatorTestUtils
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|data
index|[
literal|0
index|]
operator|.
name|oi
block|}
argument_list|)
expr_stmt|;
name|OperatorTestUtils
operator|.
name|assertResults
argument_list|(
name|op
argument_list|,
name|cdop
argument_list|,
name|data
argument_list|,
name|getExpectedResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

