begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|write
operator|.
name|DataWritableWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|MockitoAnnotations
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|RecordConsumer
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|schema
operator|.
name|MessageType
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|schema
operator|.
name|MessageTypeParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestDataWritableWriter
block|{
annotation|@
name|Mock
specifier|private
name|RecordConsumer
name|mockRecordConsumer
decl_stmt|;
specifier|private
name|InOrder
name|inOrder
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|initMocks
parameter_list|()
block|{
name|MockitoAnnotations
operator|.
name|initMocks
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|inOrder
operator|=
name|inOrder
argument_list|(
name|mockRecordConsumer
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|startMessage
parameter_list|()
block|{
name|inOrder
operator|.
name|verify
argument_list|(
name|mockRecordConsumer
argument_list|)
operator|.
name|startMessage
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|endMessage
parameter_list|()
block|{
name|inOrder
operator|.
name|verify
argument_list|(
name|mockRecordConsumer
argument_list|)
operator|.
name|endMessage
argument_list|()
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|mockRecordConsumer
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|startField
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|inOrder
operator|.
name|verify
argument_list|(
name|mockRecordConsumer
argument_list|)
operator|.
name|startField
argument_list|(
name|name
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|endField
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|inOrder
operator|.
name|verify
argument_list|(
name|mockRecordConsumer
argument_list|)
operator|.
name|endField
argument_list|(
name|name
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addInteger
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|inOrder
operator|.
name|verify
argument_list|(
name|mockRecordConsumer
argument_list|)
operator|.
name|addInteger
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addFloat
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|inOrder
operator|.
name|verify
argument_list|(
name|mockRecordConsumer
argument_list|)
operator|.
name|addFloat
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addDouble
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|inOrder
operator|.
name|verify
argument_list|(
name|mockRecordConsumer
argument_list|)
operator|.
name|addDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addBoolean
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|inOrder
operator|.
name|verify
argument_list|(
name|mockRecordConsumer
argument_list|)
operator|.
name|addBoolean
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|inOrder
operator|.
name|verify
argument_list|(
name|mockRecordConsumer
argument_list|)
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|startGroup
parameter_list|()
block|{
name|inOrder
operator|.
name|verify
argument_list|(
name|mockRecordConsumer
argument_list|)
operator|.
name|startGroup
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|endGroup
parameter_list|()
block|{
name|inOrder
operator|.
name|verify
argument_list|(
name|mockRecordConsumer
argument_list|)
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Writable
name|createNull
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|private
name|IntWritable
name|createInt
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
operator|new
name|IntWritable
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
name|FloatWritable
name|createFloat
parameter_list|(
name|float
name|value
parameter_list|)
block|{
return|return
operator|new
name|FloatWritable
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
name|DoubleWritable
name|createDouble
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
operator|new
name|DoubleWritable
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
name|BooleanWritable
name|createBoolean
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
return|return
operator|new
name|BooleanWritable
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
name|BytesWritable
name|createString
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
return|return
operator|new
name|BytesWritable
argument_list|(
name|value
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|ArrayWritable
name|createGroup
parameter_list|(
name|Writable
modifier|...
name|values
parameter_list|)
block|{
return|return
operator|new
name|ArrayWritable
argument_list|(
name|Writable
operator|.
name|class
argument_list|,
name|values
argument_list|)
return|;
block|}
specifier|private
name|ArrayWritable
name|createArray
parameter_list|(
name|Writable
modifier|...
name|values
parameter_list|)
block|{
return|return
operator|new
name|ArrayWritable
argument_list|(
name|Writable
operator|.
name|class
argument_list|,
name|createGroup
argument_list|(
name|values
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|writeParquetRecord
parameter_list|(
name|String
name|schemaStr
parameter_list|,
name|ArrayWritable
name|record
parameter_list|)
block|{
name|MessageType
name|schema
init|=
name|MessageTypeParser
operator|.
name|parseMessageType
argument_list|(
name|schemaStr
argument_list|)
decl_stmt|;
name|DataWritableWriter
name|hiveParquetWriter
init|=
operator|new
name|DataWritableWriter
argument_list|(
name|mockRecordConsumer
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|hiveParquetWriter
operator|.
name|write
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleType
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|schemaStr
init|=
literal|"message hive_schema {\n"
operator|+
literal|"  optional int32 int;\n"
operator|+
literal|"  optional double double;\n"
operator|+
literal|"  optional boolean boolean;\n"
operator|+
literal|"  optional float float;\n"
operator|+
literal|"  optional binary string;\n"
operator|+
literal|"}\n"
decl_stmt|;
name|ArrayWritable
name|hiveRecord
init|=
name|createGroup
argument_list|(
name|createInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|createDouble
argument_list|(
literal|1.0
argument_list|)
argument_list|,
name|createBoolean
argument_list|(
literal|true
argument_list|)
argument_list|,
name|createFloat
argument_list|(
literal|1.0f
argument_list|)
argument_list|,
name|createString
argument_list|(
literal|"one"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Write record to Parquet format
name|writeParquetRecord
argument_list|(
name|schemaStr
argument_list|,
name|hiveRecord
argument_list|)
expr_stmt|;
comment|// Verify record was written correctly to Parquet
name|startMessage
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"int"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|addInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"int"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startField
argument_list|(
literal|"double"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|addDouble
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"double"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|startField
argument_list|(
literal|"boolean"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"boolean"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|startField
argument_list|(
literal|"float"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|addFloat
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"float"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|startField
argument_list|(
literal|"string"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|addString
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"string"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|endMessage
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructType
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|schemaStr
init|=
literal|"message hive_schema {\n"
operator|+
literal|"  optional group structCol {\n"
operator|+
literal|"    optional int32 a;\n"
operator|+
literal|"    optional double b;\n"
operator|+
literal|"    optional boolean c;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|ArrayWritable
name|hiveRecord
init|=
name|createGroup
argument_list|(
name|createGroup
argument_list|(
name|createInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|createDouble
argument_list|(
literal|1.0
argument_list|)
argument_list|,
name|createBoolean
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Write record to Parquet format
name|writeParquetRecord
argument_list|(
name|schemaStr
argument_list|,
name|hiveRecord
argument_list|)
expr_stmt|;
comment|// Verify record was written correctly to Parquet
name|startMessage
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"structCol"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startGroup
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|addInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startField
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|addDouble
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|startField
argument_list|(
literal|"c"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"c"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|endGroup
argument_list|()
expr_stmt|;
name|endField
argument_list|(
literal|"structCol"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endMessage
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArrayType
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|schemaStr
init|=
literal|"message hive_schema {\n"
operator|+
literal|"  optional group arrayCol (LIST) {\n"
operator|+
literal|"    repeated group bag {\n"
operator|+
literal|"      optional int32 array_element;\n"
operator|+
literal|"    }\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|ArrayWritable
name|hiveRecord
init|=
name|createGroup
argument_list|(
name|createGroup
argument_list|(
name|createArray
argument_list|(
name|createInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|createNull
argument_list|()
argument_list|,
name|createInt
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Write record to Parquet format
name|writeParquetRecord
argument_list|(
name|schemaStr
argument_list|,
name|hiveRecord
argument_list|)
expr_stmt|;
comment|// Verify record was written correctly to Parquet
name|startMessage
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"arrayCol"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startGroup
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"bag"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startGroup
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"array_element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|addInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"array_element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endGroup
argument_list|()
expr_stmt|;
name|startGroup
argument_list|()
expr_stmt|;
name|endGroup
argument_list|()
expr_stmt|;
name|startGroup
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"array_element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|addInteger
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"array_element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endGroup
argument_list|()
expr_stmt|;
name|endField
argument_list|(
literal|"bag"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endGroup
argument_list|()
expr_stmt|;
name|endField
argument_list|(
literal|"arrayCol"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endMessage
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapType
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|schemaStr
init|=
literal|"message hive_schema {\n"
operator|+
literal|"  optional group mapCol (MAP) {\n"
operator|+
literal|"    repeated group map (MAP_KEY_VALUE) {\n"
operator|+
literal|"      required binary key;\n"
operator|+
literal|"      optional int32 value;\n"
operator|+
literal|"    }\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|ArrayWritable
name|hiveRecord
init|=
name|createGroup
argument_list|(
name|createGroup
argument_list|(
name|createArray
argument_list|(
name|createArray
argument_list|(
name|createString
argument_list|(
literal|"key1"
argument_list|)
argument_list|,
name|createInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|createArray
argument_list|(
name|createString
argument_list|(
literal|"key2"
argument_list|)
argument_list|,
name|createInt
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|createArray
argument_list|(
name|createString
argument_list|(
literal|"key3"
argument_list|)
argument_list|,
name|createNull
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Write record to Parquet format
name|writeParquetRecord
argument_list|(
name|schemaStr
argument_list|,
name|hiveRecord
argument_list|)
expr_stmt|;
comment|// Verify record was written correctly to Parquet
name|startMessage
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"mapCol"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startGroup
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"map"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startGroup
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|addString
argument_list|(
literal|"key1"
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|addInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|endGroup
argument_list|()
expr_stmt|;
name|startGroup
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|addString
argument_list|(
literal|"key2"
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|addInteger
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"value"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|endGroup
argument_list|()
expr_stmt|;
name|startGroup
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|addString
argument_list|(
literal|"key3"
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"key"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endGroup
argument_list|()
expr_stmt|;
name|endField
argument_list|(
literal|"map"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endGroup
argument_list|()
expr_stmt|;
name|endField
argument_list|(
literal|"mapCol"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endMessage
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArrayOfArrays
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|schemaStr
init|=
literal|"message hive_schema {\n"
operator|+
literal|"  optional group array_of_arrays (LIST) {\n"
operator|+
literal|"    repeated group array {\n"
operator|+
literal|"      required group element (LIST) {\n"
operator|+
literal|"        repeated group array {\n"
operator|+
literal|"          required int32 element;\n"
operator|+
literal|"        }\n"
operator|+
literal|"      }\n"
operator|+
literal|"    }\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|ArrayWritable
name|hiveRecord
init|=
name|createGroup
argument_list|(
name|createGroup
argument_list|(
name|createArray
argument_list|(
name|createGroup
argument_list|(
name|createArray
argument_list|(
name|createInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|createInt
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Write record to Parquet format
name|writeParquetRecord
argument_list|(
name|schemaStr
argument_list|,
name|hiveRecord
argument_list|)
expr_stmt|;
comment|// Verify record was written correctly to Parquet
name|startMessage
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"array_of_arrays"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startGroup
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"array"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startGroup
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startGroup
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"array"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startGroup
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|addInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endGroup
argument_list|()
expr_stmt|;
name|startGroup
argument_list|()
expr_stmt|;
name|startField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|addInteger
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|endField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endGroup
argument_list|()
expr_stmt|;
name|endField
argument_list|(
literal|"array"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endGroup
argument_list|()
expr_stmt|;
name|endField
argument_list|(
literal|"element"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endGroup
argument_list|()
expr_stmt|;
name|endField
argument_list|(
literal|"array"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endGroup
argument_list|()
expr_stmt|;
name|endField
argument_list|(
literal|"array_of_arrays"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endMessage
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupFieldIsNotArrayWritable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|schemaStr
init|=
literal|"message hive_schema {\n"
operator|+
literal|"  optional group a {\n"
operator|+
literal|"    optional int32 b;\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|ArrayWritable
name|hiveRecord
init|=
name|createGroup
argument_list|(
name|createInt
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Write record to Parquet format
name|writeParquetRecord
argument_list|(
name|schemaStr
argument_list|,
name|hiveRecord
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Parquet record is malformed: Field value is not an ArrayWritable object: "
operator|+
literal|"optional group a {\n  optional int32 b;\n}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArrayGroupElementIsNotArrayWritable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|schemaStr
init|=
literal|"message hive_schema {\n"
operator|+
literal|"  optional group array_of_arrays (LIST) {\n"
operator|+
literal|"    repeated group array {\n"
operator|+
literal|"      required group element (LIST) {\n"
operator|+
literal|"        required int32 element;\n"
operator|+
literal|"      }\n"
operator|+
literal|"    }\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|ArrayWritable
name|hiveRecord
init|=
name|createGroup
argument_list|(
name|createGroup
argument_list|(
name|createArray
argument_list|(
name|createInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Write record to Parquet format
name|writeParquetRecord
argument_list|(
name|schemaStr
argument_list|,
name|hiveRecord
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Parquet record is malformed: Field value is not an ArrayWritable object: "
operator|+
literal|"required group element (LIST) {\n  required int32 element;\n}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapElementIsNotArrayWritable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|schemaStr
init|=
literal|"message hive_schema {\n"
operator|+
literal|"  optional group mapCol (MAP) {\n"
operator|+
literal|"    repeated group map (MAP_KEY_VALUE) {\n"
operator|+
literal|"      required binary key;\n"
operator|+
literal|"      optional group value {\n"
operator|+
literal|"        required int32 value;"
operator|+
literal|"      }\n"
operator|+
literal|"    }\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|ArrayWritable
name|hiveRecord
init|=
name|createGroup
argument_list|(
name|createGroup
argument_list|(
name|createArray
argument_list|(
name|createGroup
argument_list|(
name|createString
argument_list|(
literal|"key1"
argument_list|)
argument_list|,
name|createInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Write record to Parquet format
name|writeParquetRecord
argument_list|(
name|schemaStr
argument_list|,
name|hiveRecord
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Parquet record is malformed: Field value is not an ArrayWritable object: "
operator|+
literal|"optional group value {\n  required int32 value;\n}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapKeyValueIsNotArrayWritable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|schemaStr
init|=
literal|"message hive_schema {\n"
operator|+
literal|"  optional group mapCol (MAP) {\n"
operator|+
literal|"    repeated group map (MAP_KEY_VALUE) {\n"
operator|+
literal|"      required binary key;\n"
operator|+
literal|"      optional int32 value;\n"
operator|+
literal|"    }\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|ArrayWritable
name|hiveRecord
init|=
name|createGroup
argument_list|(
name|createGroup
argument_list|(
name|createArray
argument_list|(
name|createString
argument_list|(
literal|"key1"
argument_list|)
argument_list|,
name|createInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Write record to Parquet format
name|writeParquetRecord
argument_list|(
name|schemaStr
argument_list|,
name|hiveRecord
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Parquet record is malformed: Map key-value pair is not an ArrayWritable object on record 0"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapKeyValueIsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|schemaStr
init|=
literal|"message hive_schema {\n"
operator|+
literal|"  optional group mapCol (MAP) {\n"
operator|+
literal|"    repeated group map (MAP_KEY_VALUE) {\n"
operator|+
literal|"      required binary key;\n"
operator|+
literal|"      optional int32 value;\n"
operator|+
literal|"    }\n"
operator|+
literal|"  }\n"
operator|+
literal|"}\n"
decl_stmt|;
name|ArrayWritable
name|hiveRecord
init|=
name|createGroup
argument_list|(
name|createGroup
argument_list|(
name|createArray
argument_list|(
name|createNull
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Write record to Parquet format
name|writeParquetRecord
argument_list|(
name|schemaStr
argument_list|,
name|hiveRecord
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Parquet record is malformed: Map key-value pair is null on record 0"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

