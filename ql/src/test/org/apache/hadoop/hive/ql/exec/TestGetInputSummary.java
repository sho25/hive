begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|ContentSummaryInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|InputEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|TestGetInputSummary
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_TABLE_NAME
init|=
literal|"testTable"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_TABLE_PATH
init|=
operator|new
name|Path
argument_list|(
name|TEST_TABLE_NAME
argument_list|)
decl_stmt|;
specifier|private
name|JobConf
name|jobConf
decl_stmt|;
specifier|private
name|Properties
name|properties
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// creates scratch directories needed by the Context object
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|HiveConf
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobConf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|this
operator|.
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|TEST_TABLE_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|TEST_TABLE_PATH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|TEST_TABLE_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInputSummaryPoolWithCache
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|BYTES_PER_FILE
init|=
literal|5
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|Path
argument_list|>
name|testPaths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p1/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p2/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p3/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p4/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p5/test.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|ContentSummary
name|cs
init|=
operator|new
name|ContentSummary
operator|.
name|Builder
argument_list|()
operator|.
name|directoryCount
argument_list|(
literal|10L
argument_list|)
operator|.
name|fileCount
argument_list|(
literal|10L
argument_list|)
operator|.
name|length
argument_list|(
literal|10L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|ContentSummary
argument_list|>
name|cache
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ContentSummary
name|summary
init|=
name|runTestGetInputSummary
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
name|testPaths
argument_list|,
name|BYTES_PER_FILE
argument_list|,
name|HiveInputFormat
operator|.
name|class
argument_list|,
name|cache
argument_list|)
decl_stmt|;
comment|// The partition paths all contain a single file with 5 bytes of length,
comment|// however, one entry was added to the cache which specifies that the
comment|// partition has 10 directories and 10 files and these values should
comment|// override the real values since the cache is consulted before looking at
comment|// the actual file system.
specifier|final
name|long
name|expectedLength
init|=
operator|(
operator|(
name|testPaths
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|*
name|BYTES_PER_FILE
operator|)
operator|+
literal|10L
decl_stmt|;
specifier|final
name|long
name|expectedFileCount
init|=
operator|(
name|testPaths
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|+
literal|10L
decl_stmt|;
specifier|final
name|long
name|expectedDirCount
init|=
operator|(
name|testPaths
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|+
literal|10L
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFileCount
argument_list|,
name|summary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedDirCount
argument_list|,
name|summary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Read several files so that their information is cached, then delete those    * files and read them again to see if the results were cached from the first    * read. If the cache is not working, the sizes will be off since the files no    * longer exist in the file system.    *    * @throws Exception e    */
annotation|@
name|Test
specifier|public
name|void
name|testGetInputSummaryPoolWithCacheReuse
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|BYTES_PER_FILE
init|=
literal|5
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|Path
argument_list|>
name|testPaths1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p1/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p2/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p3/test.txt"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|Path
argument_list|>
name|testPaths2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p4/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p5/test.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ContentSummary
name|summary
init|=
name|runTestGetInputSummary
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
name|testPaths1
argument_list|,
name|BYTES_PER_FILE
argument_list|,
name|HiveInputFormat
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
comment|// Ensure the first group of files were read correctly
name|assertEquals
argument_list|(
name|testPaths1
operator|.
name|size
argument_list|()
operator|*
name|BYTES_PER_FILE
argument_list|,
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPaths1
operator|.
name|size
argument_list|()
argument_list|,
name|summary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPaths1
operator|.
name|size
argument_list|()
argument_list|,
name|summary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete the files from the first group
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Path
name|path
range|:
name|testPaths1
control|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Read all the files and the first group's stats should be pulled from
comment|// cache and the second group from the file system
name|summary
operator|=
name|runTestGetInputSummary
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
name|CollectionUtils
operator|.
name|union
argument_list|(
name|testPaths1
argument_list|,
name|testPaths2
argument_list|)
argument_list|,
name|BYTES_PER_FILE
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|testPaths1
argument_list|)
argument_list|,
name|HiveInputFormat
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|testPaths1
operator|.
name|size
argument_list|()
operator|+
name|testPaths2
operator|.
name|size
argument_list|()
operator|)
operator|*
name|BYTES_PER_FILE
argument_list|,
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|testPaths1
operator|.
name|size
argument_list|()
operator|+
name|testPaths2
operator|.
name|size
argument_list|()
operator|)
argument_list|,
name|summary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|testPaths1
operator|.
name|size
argument_list|()
operator|+
name|testPaths2
operator|.
name|size
argument_list|()
operator|)
argument_list|,
name|summary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|void
name|testGetInputSummaryWithMultipleThreads
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|BYTES_PER_FILE
init|=
literal|5
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|Path
argument_list|>
name|testPaths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p1/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p2/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p3/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p4/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p5/test.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ContentSummary
name|summary
init|=
name|runTestGetInputSummary
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
name|testPaths
argument_list|,
name|BYTES_PER_FILE
argument_list|,
name|HiveInputFormat
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
operator|*
name|BYTES_PER_FILE
argument_list|,
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
argument_list|,
name|summary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
argument_list|,
name|summary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test deprecated mapred.dfsclient.parallelism.max
name|jobConf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|Utilities
operator|.
name|DEPRECATED_MAPRED_DFSCLIENT_PARALLELISM_MAX
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|summary
operator|=
name|runTestGetInputSummary
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
name|testPaths
argument_list|,
name|BYTES_PER_FILE
argument_list|,
name|HiveInputFormat
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
operator|*
name|BYTES_PER_FILE
argument_list|,
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
argument_list|,
name|summary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
argument_list|,
name|summary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInputSummaryWithInputEstimator
parameter_list|()
throws|throws
name|IOException
throws|,
name|HiveException
block|{
specifier|final
name|int
name|BYTES_PER_FILE
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|NUM_OF_ROWS
init|=
literal|5
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|Path
argument_list|>
name|testPaths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p1/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p2/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p3/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p4/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p5/test.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|,
name|InputEstimatorTestClass
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|InputEstimatorTestClass
operator|.
name|setEstimation
argument_list|(
operator|new
name|InputEstimator
operator|.
name|Estimation
argument_list|(
name|NUM_OF_ROWS
argument_list|,
name|BYTES_PER_FILE
argument_list|)
argument_list|)
expr_stmt|;
comment|/*      * Let's write more bytes to the files to test that Estimator is actually      * working returning the file size not from the filesystem      */
name|ContentSummary
name|summary
init|=
name|runTestGetInputSummary
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
name|testPaths
argument_list|,
name|BYTES_PER_FILE
operator|*
literal|2
argument_list|,
name|HiveInputFormat
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
operator|*
name|BYTES_PER_FILE
argument_list|,
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Current getInputSummary() returns -1 for each file found
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
operator|*
operator|-
literal|1
argument_list|,
name|summary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Current getInputSummary() returns -1 for each file found
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
operator|*
operator|-
literal|1
argument_list|,
name|summary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test deprecated mapred.dfsclient.parallelism.max
name|jobConf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|,
name|InputEstimatorTestClass
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|InputEstimatorTestClass
operator|.
name|setEstimation
argument_list|(
operator|new
name|InputEstimator
operator|.
name|Estimation
argument_list|(
name|NUM_OF_ROWS
argument_list|,
name|BYTES_PER_FILE
argument_list|)
argument_list|)
expr_stmt|;
comment|/*      * Let's write more bytes to the files to test that Estimator is actually      * working returning the file size not from the filesystem      */
name|summary
operator|=
name|runTestGetInputSummary
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
name|testPaths
argument_list|,
name|BYTES_PER_FILE
operator|*
literal|2
argument_list|,
name|HiveInputFormat
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
operator|*
name|BYTES_PER_FILE
argument_list|,
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Current getInputSummary() returns -1 for each file found
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
operator|*
operator|-
literal|1
argument_list|,
name|summary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Current getInputSummary() returns -1 for each file found
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
operator|*
operator|-
literal|1
argument_list|,
name|summary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInputSummaryWithASingleThread
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|BYTES_PER_FILE
init|=
literal|5
decl_stmt|;
comment|// Set to zero threads to disable thread pool
name|jobConf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|Collection
argument_list|<
name|Path
argument_list|>
name|testPaths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p1/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p2/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p3/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p4/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p5/test.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|ContentSummary
name|summary
init|=
name|runTestGetInputSummary
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
name|testPaths
argument_list|,
name|BYTES_PER_FILE
argument_list|,
name|HiveInputFormat
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
operator|*
name|BYTES_PER_FILE
argument_list|,
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
argument_list|,
name|summary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
argument_list|,
name|summary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInputSummaryWithContentSummaryInputFormat
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|BYTES_PER_FILE
init|=
literal|10
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|Path
argument_list|>
name|testPaths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"p1/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p2/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p3/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p4/test.txt"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"p5/test.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|ConfVars
operator|.
name|HIVE_EXEC_INPUT_LISTING_MAX_THREADS
operator|.
name|varname
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ContentSummaryInputFormatTestClass
operator|.
name|setContentSummary
argument_list|(
operator|new
name|ContentSummary
operator|.
name|Builder
argument_list|()
operator|.
name|length
argument_list|(
name|BYTES_PER_FILE
argument_list|)
operator|.
name|fileCount
argument_list|(
literal|2
argument_list|)
operator|.
name|directoryCount
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * Write more bytes to the files to test that ContentSummaryInputFormat is      * actually working returning the file size not from the filesystem      */
name|ContentSummary
name|summary
init|=
name|runTestGetInputSummary
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
name|testPaths
argument_list|,
name|BYTES_PER_FILE
operator|*
literal|2
argument_list|,
name|ContentSummaryInputFormatTestClass
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
operator|*
name|BYTES_PER_FILE
argument_list|,
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|,
name|summary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPaths
operator|.
name|size
argument_list|()
argument_list|,
name|summary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testGetInputSummaryPool
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|ExecutorService
name|pool
init|=
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|pool
operator|.
name|submit
argument_list|(
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|Future
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|pathNeedProcess
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|pathNeedProcess
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dummy-path1"
argument_list|)
argument_list|)
expr_stmt|;
name|pathNeedProcess
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dummy-path2"
argument_list|)
argument_list|)
expr_stmt|;
name|pathNeedProcess
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dummy-path3"
argument_list|)
argument_list|)
expr_stmt|;
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|Utilities
operator|.
name|getInputSummaryWithPool
argument_list|(
name|context
argument_list|,
name|pathNeedProcess
argument_list|,
name|mock
argument_list|(
name|MapWork
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|long
index|[
literal|3
index|]
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|submit
argument_list|(
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|)
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testGetInputSummaryPoolAndFailure
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|ExecutorService
name|pool
init|=
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|pool
operator|.
name|submit
argument_list|(
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|Future
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|pathNeedProcess
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|pathNeedProcess
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dummy-path1"
argument_list|)
argument_list|)
expr_stmt|;
name|pathNeedProcess
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dummy-path2"
argument_list|)
argument_list|)
expr_stmt|;
name|pathNeedProcess
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dummy-path3"
argument_list|)
argument_list|)
expr_stmt|;
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|Utilities
operator|.
name|getInputSummaryWithPool
argument_list|(
name|context
argument_list|,
name|pathNeedProcess
argument_list|,
name|mock
argument_list|(
name|MapWork
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|long
index|[
literal|3
index|]
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|submit
argument_list|(
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|pool
argument_list|)
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|ContentSummary
name|runTestGetInputSummary
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Properties
name|properties
parameter_list|,
name|Collection
argument_list|<
name|Path
argument_list|>
name|testPaths
parameter_list|,
name|int
name|bytesPerFile
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|ContentSummary
argument_list|>
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|runTestGetInputSummary
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
name|testPaths
argument_list|,
name|bytesPerFile
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|inputFormatClass
argument_list|,
name|cache
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|ContentSummary
name|runTestGetInputSummary
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Properties
name|properties
parameter_list|,
name|Collection
argument_list|<
name|Path
argument_list|>
name|testPaths
parameter_list|,
name|int
name|bytesPerFile
parameter_list|,
name|Collection
argument_list|<
name|Path
argument_list|>
name|providedPaths
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|ContentSummary
argument_list|>
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|MapWork
name|mapWork
init|=
operator|new
name|MapWork
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|ContentSummary
argument_list|>
name|entry
range|:
name|cache
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|Path
name|partitionPath
init|=
operator|new
name|Path
argument_list|(
name|TEST_TABLE_PATH
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|addCS
argument_list|(
name|partitionPath
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
name|pathToPartitionInfo
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliasTable
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TableScanOperator
name|scanOp
init|=
operator|new
name|TableScanOperator
argument_list|()
decl_stmt|;
name|PartitionDesc
name|partitionDesc
init|=
operator|new
name|PartitionDesc
argument_list|(
operator|new
name|TableDesc
argument_list|(
name|inputFormatClass
argument_list|,
literal|null
argument_list|,
name|properties
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Path
name|path
range|:
name|testPaths
control|)
block|{
specifier|final
name|Path
name|fullPath
init|=
operator|new
name|Path
argument_list|(
name|TEST_TABLE_PATH
argument_list|,
name|path
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|partitionPath
init|=
name|fullPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|// If it is not provided by the test case, create a dummy file
if|if
condition|(
operator|!
name|providedPaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|bytesPerFile
index|]
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|partitionPath
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|fullPath
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|pathToPartitionInfo
operator|.
name|put
argument_list|(
name|partitionPath
argument_list|,
name|partitionDesc
argument_list|)
expr_stmt|;
name|pathToAliasTable
operator|.
name|put
argument_list|(
name|partitionPath
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionPath
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|put
argument_list|(
name|partitionPath
operator|.
name|getName
argument_list|()
argument_list|,
name|scanOp
argument_list|)
expr_stmt|;
block|}
name|mapWork
operator|.
name|setPathToAliases
argument_list|(
name|pathToAliasTable
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|setPathToPartitionInfo
argument_list|(
name|pathToPartitionInfo
argument_list|)
expr_stmt|;
return|return
name|Utilities
operator|.
name|getInputSummary
argument_list|(
name|context
argument_list|,
name|mapWork
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|static
class|class
name|ContentSummaryInputFormatTestClass
extends|extends
name|FileInputFormat
implements|implements
name|ContentSummaryInputFormat
block|{
specifier|private
specifier|static
name|ContentSummary
name|summary
init|=
operator|new
name|ContentSummary
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|setContentSummary
parameter_list|(
name|ContentSummary
name|contentSummary
parameter_list|)
block|{
name|summary
operator|=
name|contentSummary
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|getRecordReader
parameter_list|(
name|InputSplit
name|inputSplit
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentSummary
name|getContentSummary
parameter_list|(
name|Path
name|p
parameter_list|,
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|summary
return|;
block|}
block|}
block|}
end_class

end_unit

