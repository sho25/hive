begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|batchgen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExtractRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedBatchUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
specifier|public
class|class
name|VectorBatchGenerateUtil
block|{
specifier|public
specifier|static
name|Object
index|[]
index|[]
name|generateRowObjectArray
parameter_list|(
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|VectorBatchGenerateStream
name|batchStream
parameter_list|,
name|VectorizedRowBatch
name|batch
parameter_list|,
name|ObjectInspector
index|[]
name|objectInspectors
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExtractRow
name|vectorExtractRow
init|=
operator|new
name|VectorExtractRow
argument_list|()
decl_stmt|;
name|vectorExtractRow
operator|.
name|init
argument_list|(
name|typeInfos
argument_list|)
expr_stmt|;
specifier|final
name|int
name|rowCount
init|=
name|batchStream
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|columnCount
init|=
name|typeInfos
operator|.
name|length
decl_stmt|;
name|Object
index|[]
index|[]
name|rowObjectArray
init|=
operator|new
name|Object
index|[
name|rowCount
index|]
index|[]
decl_stmt|;
name|Object
index|[]
name|row
init|=
operator|new
name|Object
index|[
name|columnCount
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|batchStream
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|batchStream
operator|.
name|isNext
argument_list|()
condition|)
block|{
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
name|batchStream
operator|.
name|fillNext
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// Extract rows and call process per row
specifier|final
name|int
name|size
init|=
name|batch
operator|.
name|size
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
name|r
operator|++
control|)
block|{
name|vectorExtractRow
operator|.
name|extractRow
argument_list|(
name|batch
argument_list|,
name|r
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|Object
index|[]
name|resultObjectArray
init|=
operator|new
name|Object
index|[
name|columnCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columnCount
condition|;
name|c
operator|++
control|)
block|{
name|resultObjectArray
index|[
name|c
index|]
operator|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|objectInspectors
index|[
name|c
index|]
operator|)
operator|.
name|copyObject
argument_list|(
name|row
index|[
name|c
index|]
argument_list|)
expr_stmt|;
block|}
name|rowObjectArray
index|[
name|index
operator|++
index|]
operator|=
name|resultObjectArray
expr_stmt|;
block|}
block|}
return|return
name|rowObjectArray
return|;
block|}
specifier|public
specifier|static
name|VectorizedRowBatch
index|[]
name|generateBatchArray
parameter_list|(
name|VectorBatchGenerateStream
name|batchStream
parameter_list|,
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|int
name|rowCount
init|=
name|batchStream
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|batchCount
init|=
operator|(
name|rowCount
operator|+
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
operator|-
literal|1
operator|)
operator|/
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
decl_stmt|;
name|VectorizedRowBatch
index|[]
name|batches
init|=
operator|new
name|VectorizedRowBatch
index|[
name|batchCount
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|batchStream
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|batchStream
operator|.
name|isNext
argument_list|()
condition|)
block|{
name|VectorizedRowBatch
name|nextBatch
init|=
name|VectorizedBatchUtil
operator|.
name|makeLike
argument_list|(
name|batch
argument_list|)
decl_stmt|;
name|batchStream
operator|.
name|fillNext
argument_list|(
name|nextBatch
argument_list|)
expr_stmt|;
name|batches
index|[
name|index
operator|++
index|]
operator|=
name|nextBatch
expr_stmt|;
block|}
return|return
name|batches
return|;
block|}
block|}
end_class

end_unit

