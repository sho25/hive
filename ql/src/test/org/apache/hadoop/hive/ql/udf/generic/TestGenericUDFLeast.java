begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredJavaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_class
specifier|public
class|class
name|TestGenericUDFLeast
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testOneArg
parameter_list|()
throws|throws
name|HiveException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|GenericUDFLeast
name|udf
init|=
operator|new
name|GenericUDFLeast
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI1
block|}
decl_stmt|;
name|UDFArgumentException
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UDFArgumentException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"least() test "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testVoids
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFGreatest
name|udf
init|=
operator|new
name|GenericUDFGreatest
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableVoidObjectInspector
decl_stmt|;
name|ObjectInspector
name|valueOI2
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
decl_stmt|;
name|ObjectInspector
name|valueOI3
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI1
block|,
name|valueOI2
block|,
name|valueOI3
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|1
block|,
literal|"test"
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLeastTypes
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFGreatest
name|udf
init|=
operator|new
name|GenericUDFGreatest
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
decl_stmt|;
name|ObjectInspector
name|valueOI2
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
decl_stmt|;
name|ObjectInspector
name|valueOI3
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
decl_stmt|;
name|ObjectInspector
name|valueOI4
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI1
block|,
name|valueOI2
block|,
name|valueOI3
block|,
name|valueOI4
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|11.1
block|,
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2015-03-20"
argument_list|)
block|,
literal|"test"
block|}
argument_list|,
literal|"test"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|//string comparisons
block|}
specifier|public
name|void
name|testLeastStr
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFLeast
name|udf
init|=
operator|new
name|GenericUDFLeast
argument_list|()
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
operator|new
name|ObjectInspector
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|arguments
index|[
name|i
index|]
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
expr_stmt|;
block|}
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|,
literal|"a"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"C"
block|,
literal|"a"
block|,
literal|"B"
block|}
argument_list|,
literal|"B"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"AAA"
block|,
literal|"AaA"
block|,
literal|"AAa"
block|}
argument_list|,
literal|"AAA"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"A"
block|,
literal|"AA"
block|,
literal|"AAA"
block|}
argument_list|,
literal|"A"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"11"
block|,
literal|"13"
block|,
literal|"12"
block|}
argument_list|,
literal|"11"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"11"
block|,
literal|"2"
block|,
literal|"12"
block|}
argument_list|,
literal|"11"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"01"
block|,
literal|"03"
block|,
literal|"02"
block|}
argument_list|,
literal|"01"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"01"
block|,
literal|"1"
block|,
literal|"02"
block|}
argument_list|,
literal|"01"
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|null
block|,
literal|"c"
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|null
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|null
block|,
literal|null
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"b"
block|,
literal|null
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLeastInt
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFLeast
name|udf
init|=
operator|new
name|GenericUDFLeast
argument_list|()
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
operator|new
name|ObjectInspector
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|arguments
index|[
name|i
index|]
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
expr_stmt|;
block|}
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|11
block|,
literal|13
block|,
literal|12
block|}
argument_list|,
literal|11
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|13
block|,
literal|2
block|}
argument_list|,
literal|1
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Integer
index|[]
block|{
operator|-
literal|11
block|,
operator|-
literal|13
block|,
operator|-
literal|12
block|}
argument_list|,
operator|-
literal|13
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
operator|-
literal|13
block|,
literal|2
block|}
argument_list|,
operator|-
literal|13
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|null
block|,
literal|1
block|,
literal|2
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|null
block|,
literal|2
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|null
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLeastDouble
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFLeast
name|udf
init|=
operator|new
name|GenericUDFLeast
argument_list|()
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
operator|new
name|ObjectInspector
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|arguments
index|[
name|i
index|]
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
expr_stmt|;
block|}
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Double
index|[]
block|{
literal|11.4
block|,
literal|11.5
block|,
literal|11.2
block|}
argument_list|,
literal|11.2
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Double
index|[]
block|{
literal|1.0
block|,
literal|13.3
block|,
literal|2.0
block|}
argument_list|,
literal|1.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Double
index|[]
block|{
operator|-
literal|11.4
block|,
operator|-
literal|13.1
block|,
operator|-
literal|12.2
block|}
argument_list|,
operator|-
literal|13.1
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Double
index|[]
block|{
literal|1.0
block|,
operator|-
literal|13.3
block|,
literal|2.2
block|}
argument_list|,
operator|-
literal|13.3
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Double
index|[]
block|{
literal|null
block|,
literal|1.1
block|,
literal|2.2
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Double
index|[]
block|{
literal|1.1
block|,
literal|null
block|,
literal|2.2
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Double
index|[]
block|{
literal|1.1
block|,
literal|2.2
block|,
literal|null
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Double
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLeastDate
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFLeast
name|udf
init|=
operator|new
name|GenericUDFLeast
argument_list|()
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
operator|new
name|ObjectInspector
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|arguments
index|[
name|i
index|]
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
expr_stmt|;
block|}
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|Date
name|d1
init|=
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2015-03-20"
argument_list|)
decl_stmt|;
name|Date
name|d2
init|=
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2015-03-21"
argument_list|)
decl_stmt|;
name|Date
name|d3
init|=
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2014-03-20"
argument_list|)
decl_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Date
index|[]
block|{
name|d1
block|,
name|d2
block|,
name|d3
block|}
argument_list|,
name|d3
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Date
index|[]
block|{
literal|null
block|,
name|d2
block|,
name|d3
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Date
index|[]
block|{
name|d1
block|,
literal|null
block|,
name|d3
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Date
index|[]
block|{
name|d1
block|,
name|d2
block|,
literal|null
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Date
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLeastIntTypes
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFLeast
name|udf
init|=
operator|new
name|GenericUDFLeast
argument_list|()
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
operator|new
name|ObjectInspector
index|[
literal|4
index|]
decl_stmt|;
name|arguments
index|[
literal|0
index|]
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableByteObjectInspector
expr_stmt|;
name|arguments
index|[
literal|1
index|]
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableShortObjectInspector
expr_stmt|;
name|arguments
index|[
literal|2
index|]
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
expr_stmt|;
name|arguments
index|[
literal|3
index|]
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
expr_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|(
name|byte
operator|)
literal|11
block|,
operator|(
name|short
operator|)
literal|13
block|,
literal|12
block|,
literal|14L
block|}
argument_list|,
literal|11L
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|short
operator|)
literal|13
block|,
literal|2
block|,
literal|0L
block|}
argument_list|,
literal|0L
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|(
name|byte
operator|)
operator|-
literal|11
block|,
operator|(
name|short
operator|)
operator|-
literal|13
block|,
operator|-
literal|12
block|,
literal|0L
block|}
argument_list|,
operator|-
literal|13L
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|short
operator|)
operator|-
literal|13
block|,
literal|2
block|,
literal|0L
block|}
argument_list|,
operator|-
literal|13L
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|null
block|,
operator|(
name|short
operator|)
literal|1
block|,
literal|2
block|,
literal|0L
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
literal|null
block|,
literal|2
block|,
operator|-
literal|1L
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|short
operator|)
literal|2
block|,
literal|null
block|,
operator|-
literal|1L
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runAndVerify
parameter_list|(
name|Object
index|[]
name|v
parameter_list|,
name|Object
name|expResult
parameter_list|,
name|GenericUDF
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
name|DeferredObject
index|[]
name|args
init|=
operator|new
name|DeferredObject
index|[
name|v
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|args
index|[
name|i
index|]
operator|=
operator|new
name|DeferredJavaObject
argument_list|(
name|getWritable
argument_list|(
name|v
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Object
name|output
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|output
operator|=
name|parseOutput
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"greatest() test "
argument_list|,
name|expResult
argument_list|,
name|output
operator|!=
literal|null
condition|?
name|output
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Object
name|getWritable
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
return|return
name|o
operator|!=
literal|null
condition|?
operator|new
name|Text
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
else|:
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Integer
condition|)
block|{
return|return
name|o
operator|!=
literal|null
condition|?
operator|new
name|IntWritable
argument_list|(
operator|(
name|Integer
operator|)
name|o
argument_list|)
else|:
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Double
condition|)
block|{
return|return
name|o
operator|!=
literal|null
condition|?
operator|new
name|DoubleWritable
argument_list|(
operator|(
name|Double
operator|)
name|o
argument_list|)
else|:
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Date
condition|)
block|{
return|return
name|o
operator|!=
literal|null
condition|?
operator|new
name|DateWritableV2
argument_list|(
operator|(
name|Date
operator|)
name|o
argument_list|)
else|:
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Byte
condition|)
block|{
return|return
name|o
operator|!=
literal|null
condition|?
operator|new
name|ByteWritable
argument_list|(
operator|(
name|Byte
operator|)
name|o
argument_list|)
else|:
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Short
condition|)
block|{
return|return
name|o
operator|!=
literal|null
condition|?
operator|new
name|ShortWritable
argument_list|(
operator|(
name|Short
operator|)
name|o
argument_list|)
else|:
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Long
condition|)
block|{
return|return
name|o
operator|!=
literal|null
condition|?
operator|new
name|LongWritable
argument_list|(
operator|(
name|Long
operator|)
name|o
argument_list|)
else|:
literal|null
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Object
name|parseOutput
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Text
condition|)
block|{
return|return
name|o
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|IntWritable
condition|)
block|{
return|return
operator|(
operator|(
name|IntWritable
operator|)
name|o
operator|)
operator|.
name|get
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|DoubleWritable
condition|)
block|{
return|return
operator|(
operator|(
name|DoubleWritable
operator|)
name|o
operator|)
operator|.
name|get
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|DateWritableV2
condition|)
block|{
return|return
operator|(
operator|(
name|DateWritableV2
operator|)
name|o
operator|)
operator|.
name|get
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|ByteWritable
condition|)
block|{
return|return
operator|(
operator|(
name|ByteWritable
operator|)
name|o
operator|)
operator|.
name|get
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|ShortWritable
condition|)
block|{
return|return
operator|(
operator|(
name|ShortWritable
operator|)
name|o
operator|)
operator|.
name|get
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|LongWritable
condition|)
block|{
return|return
operator|(
operator|(
name|LongWritable
operator|)
name|o
operator|)
operator|.
name|get
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

