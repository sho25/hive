begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IOConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
specifier|public
class|class
name|TestOrcWideTable
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MEMORY_FOR_ORC
init|=
literal|512
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|,
literal|"target"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
name|Path
name|testFilePath
decl_stmt|;
name|float
name|memoryPercent
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testCaseName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|openFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testFilePath
operator|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"TestOrcFile."
operator|+
name|testCaseName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|".orc"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// make sure constant memory is available for ORC always
name|memoryPercent
operator|=
operator|(
name|float
operator|)
name|MEMORY_FOR_ORC
operator|/
operator|(
name|float
operator|)
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ORC_FILE_MEMORY_POOL
operator|.
name|varname
argument_list|,
name|memoryPercent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBufferSizeFor1Col
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|int
name|bufferSize
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|bufferSize
argument_list|(
name|bufferSize
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|newBufferSize
decl_stmt|;
if|if
condition|(
name|writer
operator|instanceof
name|WriterImpl
condition|)
block|{
name|WriterImpl
name|orcWriter
init|=
operator|(
name|WriterImpl
operator|)
name|writer
decl_stmt|;
name|newBufferSize
operator|=
name|orcWriter
operator|.
name|getEstimatedBufferSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bufferSize
argument_list|,
name|newBufferSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBufferSizeFor1000Col
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|int
name|bufferSize
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
name|String
name|columns
init|=
name|getRandomColumnNames
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
comment|// just for testing. manually write the column names
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|bufferSize
argument_list|(
name|bufferSize
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|newBufferSize
decl_stmt|;
if|if
condition|(
name|writer
operator|instanceof
name|WriterImpl
condition|)
block|{
name|WriterImpl
name|orcWriter
init|=
operator|(
name|WriterImpl
operator|)
name|writer
decl_stmt|;
name|newBufferSize
operator|=
name|orcWriter
operator|.
name|getEstimatedBufferSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bufferSize
argument_list|,
name|newBufferSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBufferSizeFor2000Col
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|int
name|bufferSize
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
name|String
name|columns
init|=
name|getRandomColumnNames
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
comment|// just for testing. manually write the column names
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|ZLIB
argument_list|)
operator|.
name|bufferSize
argument_list|(
name|bufferSize
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|newBufferSize
decl_stmt|;
if|if
condition|(
name|writer
operator|instanceof
name|WriterImpl
condition|)
block|{
name|WriterImpl
name|orcWriter
init|=
operator|(
name|WriterImpl
operator|)
name|writer
decl_stmt|;
name|newBufferSize
operator|=
name|orcWriter
operator|.
name|getEstimatedBufferSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|32
operator|*
literal|1024
argument_list|,
name|newBufferSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBufferSizeFor2000ColNoCompression
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|int
name|bufferSize
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
name|String
name|columns
init|=
name|getRandomColumnNames
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
comment|// just for testing. manually write the column names
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|bufferSize
argument_list|(
name|bufferSize
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|newBufferSize
decl_stmt|;
if|if
condition|(
name|writer
operator|instanceof
name|WriterImpl
condition|)
block|{
name|WriterImpl
name|orcWriter
init|=
operator|(
name|WriterImpl
operator|)
name|writer
decl_stmt|;
name|newBufferSize
operator|=
name|orcWriter
operator|.
name|getEstimatedBufferSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|64
operator|*
literal|1024
argument_list|,
name|newBufferSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBufferSizeFor4000Col
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|int
name|bufferSize
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
name|String
name|columns
init|=
name|getRandomColumnNames
argument_list|(
literal|4000
argument_list|)
decl_stmt|;
comment|// just for testing. manually write the column names
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|ZLIB
argument_list|)
operator|.
name|bufferSize
argument_list|(
name|bufferSize
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|newBufferSize
decl_stmt|;
if|if
condition|(
name|writer
operator|instanceof
name|WriterImpl
condition|)
block|{
name|WriterImpl
name|orcWriter
init|=
operator|(
name|WriterImpl
operator|)
name|writer
decl_stmt|;
name|newBufferSize
operator|=
name|orcWriter
operator|.
name|getEstimatedBufferSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16
operator|*
literal|1024
argument_list|,
name|newBufferSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBufferSizeFor4000ColNoCompression
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|int
name|bufferSize
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
name|String
name|columns
init|=
name|getRandomColumnNames
argument_list|(
literal|4000
argument_list|)
decl_stmt|;
comment|// just for testing. manually write the column names
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|bufferSize
argument_list|(
name|bufferSize
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|newBufferSize
decl_stmt|;
if|if
condition|(
name|writer
operator|instanceof
name|WriterImpl
condition|)
block|{
name|WriterImpl
name|orcWriter
init|=
operator|(
name|WriterImpl
operator|)
name|writer
decl_stmt|;
name|newBufferSize
operator|=
name|orcWriter
operator|.
name|getEstimatedBufferSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|32
operator|*
literal|1024
argument_list|,
name|newBufferSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBufferSizeFor25000Col
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|int
name|bufferSize
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
name|String
name|columns
init|=
name|getRandomColumnNames
argument_list|(
literal|25000
argument_list|)
decl_stmt|;
comment|// just for testing. manually write the column names
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|bufferSize
argument_list|(
name|bufferSize
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|newBufferSize
decl_stmt|;
if|if
condition|(
name|writer
operator|instanceof
name|WriterImpl
condition|)
block|{
name|WriterImpl
name|orcWriter
init|=
operator|(
name|WriterImpl
operator|)
name|writer
decl_stmt|;
name|newBufferSize
operator|=
name|orcWriter
operator|.
name|getEstimatedBufferSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
comment|// 4K is the minimum buffer size
name|assertEquals
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
name|newBufferSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBufferSizeManualOverride1
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|int
name|bufferSize
init|=
literal|1024
decl_stmt|;
name|String
name|columns
init|=
name|getRandomColumnNames
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
comment|// just for testing. manually write the column names
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|bufferSize
argument_list|(
name|bufferSize
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|newBufferSize
decl_stmt|;
if|if
condition|(
name|writer
operator|instanceof
name|WriterImpl
condition|)
block|{
name|WriterImpl
name|orcWriter
init|=
operator|(
name|WriterImpl
operator|)
name|writer
decl_stmt|;
name|newBufferSize
operator|=
name|orcWriter
operator|.
name|getEstimatedBufferSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bufferSize
argument_list|,
name|newBufferSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBufferSizeManualOverride2
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|int
name|bufferSize
init|=
literal|2
operator|*
literal|1024
decl_stmt|;
name|String
name|columns
init|=
name|getRandomColumnNames
argument_list|(
literal|4000
argument_list|)
decl_stmt|;
comment|// just for testing. manually write the column names
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|bufferSize
argument_list|(
name|bufferSize
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|newBufferSize
decl_stmt|;
if|if
condition|(
name|writer
operator|instanceof
name|WriterImpl
condition|)
block|{
name|WriterImpl
name|orcWriter
init|=
operator|(
name|WriterImpl
operator|)
name|writer
decl_stmt|;
name|newBufferSize
operator|=
name|orcWriter
operator|.
name|getEstimatedBufferSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bufferSize
argument_list|,
name|newBufferSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getRandomColumnNames
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"col"
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"col"
argument_list|)
operator|.
name|append
argument_list|(
name|n
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

