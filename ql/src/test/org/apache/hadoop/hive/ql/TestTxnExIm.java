begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * tests for IMPORT/EXPORT of transactional tables.  */
end_comment

begin_class
specifier|public
class|class
name|TestTxnExIm
extends|extends
name|TxnCommandsBaseForTests
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestTxnExIm
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DATA_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|TestTxnExIm
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
annotation|@
name|Override
name|String
name|getTestDataDir
parameter_list|()
block|{
return|return
name|TEST_DATA_DIR
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CREATE_TABLES_AS_ACID
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
comment|/**    * simplest export test.    */
annotation|@
name|Test
specifier|public
name|void
name|testExport
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
index|[]
name|rows1
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists TImport "
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int) stored as ORC"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table TImport (a int, b int) stored as ORC TBLPROPERTIES "
operator|+
literal|"('transactional'='false')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into T(a,b) "
operator|+
name|makeValuesClause
argument_list|(
name|rows1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select * from T order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match rs"
argument_list|,
name|stringifyValues
argument_list|(
name|rows1
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|String
name|exportStmt
init|=
literal|"export table T to '"
operator|+
name|getTestDataDir
argument_list|()
operator|+
literal|"/export'"
decl_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"explain "
operator|+
name|exportStmt
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"*** "
operator|+
name|exportStmt
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|r
range|:
name|rs
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
name|exportStmt
argument_list|)
expr_stmt|;
comment|//verify data
name|runStatementOnDriver
argument_list|(
literal|"import table TImport from '"
operator|+
name|getTestDataDir
argument_list|()
operator|+
literal|"/export'"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs1
init|=
name|runStatementOnDriver
argument_list|(
literal|"select * from TImport order by a, b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match rs"
argument_list|,
name|stringifyValues
argument_list|(
name|rows1
argument_list|)
argument_list|,
name|rs1
argument_list|)
expr_stmt|;
block|}
comment|/**    * The update delete cause MergeFileTask to be executed.    */
annotation|@
name|Test
specifier|public
name|void
name|testExportMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
index|[]
name|rows1
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists TImport "
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int) stored as ORC"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table TImport (a int, b int) stored as ORC TBLPROPERTIES "
operator|+
literal|"('transactional'='false')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into T(a,b) "
operator|+
name|makeValuesClause
argument_list|(
name|rows1
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"update T set b = 17 where a = 1"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|rows2
init|=
block|{
block|{
literal|1
block|,
literal|17
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select * from T order by a,b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match rs"
argument_list|,
name|stringifyValues
argument_list|(
name|rows2
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|String
name|exportStmt
init|=
literal|"export table T to '"
operator|+
name|getTestDataDir
argument_list|()
operator|+
literal|"/export'"
decl_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"explain "
operator|+
name|exportStmt
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"*** "
operator|+
name|exportStmt
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|r
range|:
name|rs
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
name|exportStmt
argument_list|)
expr_stmt|;
comment|//verify data
name|runStatementOnDriver
argument_list|(
literal|"import table TImport from '"
operator|+
name|getTestDataDir
argument_list|()
operator|+
literal|"/export'"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs1
init|=
name|runStatementOnDriver
argument_list|(
literal|"select * from TImport order by a, b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match rs"
argument_list|,
name|stringifyValues
argument_list|(
name|rows2
argument_list|)
argument_list|,
name|rs1
argument_list|)
expr_stmt|;
block|}
comment|/**    * export partitioned table with full partition spec.    */
annotation|@
name|Test
specifier|public
name|void
name|testExportPart
parameter_list|()
throws|throws
name|Exception
block|{
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DYNAMICPARTITIONINGMODE
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|rows1
init|=
block|{
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|}
block|,
block|{
literal|3
block|,
literal|4
block|,
literal|2
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists TImport "
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table TImport (a int, b int) partitioned by (p int) stored as "
operator|+
literal|"ORC TBLPROPERTIES ('transactional'='false')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int) partitioned by (p int) stored as ORC"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into T partition(p)"
operator|+
name|makeValuesClause
argument_list|(
name|rows1
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"export table T partition(p=1) to '"
operator|+
name|getTestDataDir
argument_list|()
operator|+
literal|"/export'"
argument_list|)
expr_stmt|;
comment|/* target/tmp/org.apache.hadoop.hive.ql.TestTxnCommands-1519423568221/ ├── export │   ├── _metadata │   └── p=1 │       └── delta_0000001_0000001_0000 │           └── bucket_00000 */
name|runStatementOnDriver
argument_list|(
literal|"import table TImport from '"
operator|+
name|getTestDataDir
argument_list|()
operator|+
literal|"/export'"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs1
init|=
name|runStatementOnDriver
argument_list|(
literal|"select * from TImport order by a, b"
argument_list|)
decl_stmt|;
name|int
index|[]
index|[]
name|res
init|=
block|{
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|}
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match rs"
argument_list|,
name|stringifyValues
argument_list|(
name|res
argument_list|)
argument_list|,
name|rs1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Export partitioned table with partial partition spec.    */
annotation|@
name|Test
specifier|public
name|void
name|testExportPartPartial
parameter_list|()
throws|throws
name|Exception
block|{
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DYNAMICPARTITIONINGMODE
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|rows1
init|=
block|{
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
block|,
block|{
literal|3
block|,
literal|4
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|5
block|,
literal|6
block|,
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|7
block|,
literal|8
block|,
literal|2
block|,
literal|2
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists TImport "
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table TImport (a int, b int) partitioned by (p int, q int) "
operator|+
literal|"stored as ORC TBLPROPERTIES ('transactional'='false')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int) partitioned by (p int, q int) stored as "
operator|+
literal|"ORC"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into T partition(p,q)"
operator|+
name|makeValuesClause
argument_list|(
name|rows1
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"export table T partition(p=1) to '"
operator|+
name|getTestDataDir
argument_list|()
operator|+
literal|"/export'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"import table TImport from '"
operator|+
name|getTestDataDir
argument_list|()
operator|+
literal|"/export'"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs1
init|=
name|runStatementOnDriver
argument_list|(
literal|"select * from TImport order by a, b"
argument_list|)
decl_stmt|;
name|int
index|[]
index|[]
name|res
init|=
block|{
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
block|,
block|{
literal|5
block|,
literal|6
block|,
literal|1
block|,
literal|2
block|}
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match rs"
argument_list|,
name|stringifyValues
argument_list|(
name|res
argument_list|)
argument_list|,
name|rs1
argument_list|)
expr_stmt|;
comment|/*  Here is the layout we expect target/tmp/org.apache.hadoop.hive.ql.TestTxnCommands-1521148657811/ ├── export │   ├── _metadata │   └── p=1 │       ├── q=1 │       │   └── 000002_0 │       └── q=2 │           └── 000001_0 └── warehouse     ├── acidtbl     ├── acidtblpart     ├── nonacidnonbucket     ├── nonacidorctbl     ├── nonacidorctbl2     ├── t     │   ├── p=1     │   │   ├── q=1     │   │   │   └── delta_0000001_0000001_0000     │   │   │       ├── _orc_acid_version     │   │   │       └── bucket_00000     │   │   └── q=2     │   │       └── delta_0000001_0000001_0000     │   │           ├── _orc_acid_version     │   │           └── bucket_00000     │   └── p=2     │       └── q=2     │           └── delta_0000001_0000001_0000     │               ├── _orc_acid_version     │               └── bucket_00000     └── timport         └── p=1             ├── q=1             │   └── 000002_0             └── q=2                 └── 000001_0  23 directories, 11 files */
block|}
comment|/**    * This specifies partial partition spec omitting top/first columns.    */
annotation|@
name|Test
specifier|public
name|void
name|testExportPartPartial2
parameter_list|()
throws|throws
name|Exception
block|{
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DYNAMICPARTITIONINGMODE
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|rows1
init|=
block|{
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
block|,
block|{
literal|3
block|,
literal|4
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|5
block|,
literal|6
block|,
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|7
block|,
literal|8
block|,
literal|2
block|,
literal|2
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists TImport "
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table TImport (a int, b int) partitioned by (p int, q int)"
operator|+
literal|" stored as ORC TBLPROPERTIES ('transactional'='false')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int) partitioned by (p int, q int) "
operator|+
literal|"stored as ORC"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into T partition(p,q)"
operator|+
name|makeValuesClause
argument_list|(
name|rows1
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"export table T partition(q=2) to '"
operator|+
name|getTestDataDir
argument_list|()
operator|+
literal|"/export'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"import table TImport from '"
operator|+
name|getTestDataDir
argument_list|()
operator|+
literal|"/export'"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs1
init|=
name|runStatementOnDriver
argument_list|(
literal|"select * from TImport order by a, b"
argument_list|)
decl_stmt|;
name|int
index|[]
index|[]
name|res
init|=
block|{
block|{
literal|3
block|,
literal|4
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|5
block|,
literal|6
block|,
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|7
block|,
literal|8
block|,
literal|2
block|,
literal|2
block|}
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match rs"
argument_list|,
name|stringifyValues
argument_list|(
name|res
argument_list|)
argument_list|,
name|rs1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExportPartPartial3
parameter_list|()
throws|throws
name|Exception
block|{
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DYNAMICPARTITIONINGMODE
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|rows1
init|=
block|{
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|2
block|,
literal|3
block|,
literal|8
block|}
block|,
block|{
literal|5
block|,
literal|1
block|,
literal|2
block|,
literal|6
block|}
block|,
block|{
literal|7
block|,
literal|2
block|,
literal|2
block|,
literal|8
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists TImport "
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table TImport (a int) partitioned by (p int, q int, r int)"
operator|+
literal|" stored as ORC TBLPROPERTIES ('transactional'='false')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int) partitioned by (p int, q int, r int) "
operator|+
literal|"stored as ORC"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into T partition(p,q,r)"
operator|+
name|makeValuesClause
argument_list|(
name|rows1
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"export table T partition(p=2,r=8) to '"
operator|+
name|getTestDataDir
argument_list|()
operator|+
literal|"/export'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"import table TImport from '"
operator|+
name|getTestDataDir
argument_list|()
operator|+
literal|"/export'"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs1
init|=
name|runStatementOnDriver
argument_list|(
literal|"select * from TImport order by a"
argument_list|)
decl_stmt|;
name|int
index|[]
index|[]
name|res
init|=
block|{
block|{
literal|3
block|,
literal|2
block|,
literal|3
block|,
literal|8
block|}
block|,
block|{
literal|7
block|,
literal|2
block|,
literal|2
block|,
literal|8
block|}
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match rs"
argument_list|,
name|stringifyValues
argument_list|(
name|res
argument_list|)
argument_list|,
name|rs1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExportBucketed
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
index|[]
name|rows1
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|1
block|,
literal|3
block|}
block|,
block|{
literal|2
block|,
literal|4
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
name|makeValuesClause
argument_list|(
name|rows1
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"export table "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|"  to '"
operator|+
name|getTestDataDir
argument_list|()
operator|+
literal|"/export'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists TImport "
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table TImport (a int, b int) clustered by (a) into 2 buckets"
operator|+
literal|" stored as ORC TBLPROPERTIES ('transactional'='false')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"import table TImport from '"
operator|+
name|getTestDataDir
argument_list|()
operator|+
literal|"/export'"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs1
init|=
name|runStatementOnDriver
argument_list|(
literal|"select * from TImport order by a, b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Content didn't match rs"
argument_list|,
name|stringifyValues
argument_list|(
name|rows1
argument_list|)
argument_list|,
name|rs1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testCTLT
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T like "
operator|+
name|Table
operator|.
name|ACIDTBL
operator|+
literal|" TBLPROPERTIES "
operator|+
literal|"('transactional'='true')"
argument_list|)
expr_stmt|;
comment|//      runStatementOnDriver("create table T like " + Table.ACIDTBL);
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"show create table T"
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"*show create table"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|r
range|:
name|rs
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * tests import where target table already exists.    */
annotation|@
name|Test
specifier|public
name|void
name|testImport
parameter_list|()
throws|throws
name|Exception
block|{
name|testImport
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * tests import where target table already exists.    */
annotation|@
name|Test
specifier|public
name|void
name|testImportVectorized
parameter_list|()
throws|throws
name|Exception
block|{
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testImport
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * tests import where target table does not exists.    */
annotation|@
name|Test
specifier|public
name|void
name|testImportNoTarget
parameter_list|()
throws|throws
name|Exception
block|{
name|testImport
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * MM tables already work - mm_exim.q    * Export creates a bunch of metadata in addition to data including all table props/IF/OF etc    * Import from 'export' can create a table (any name specified) or add data into existing table.    * If importing into existing table (un-partitioned) it must be empty.    * If Import is creating a table it will be exactly like exported one except for the name.    */
specifier|private
name|void
name|testImport
parameter_list|(
name|boolean
name|isVectorized
parameter_list|,
name|boolean
name|existingTarget
parameter_list|)
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists Tstage"
argument_list|)
expr_stmt|;
if|if
condition|(
name|existingTarget
condition|)
block|{
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int) stored as orc"
argument_list|)
expr_stmt|;
block|}
comment|//Tstage is just a simple way to generate test data
name|runStatementOnDriver
argument_list|(
literal|"create table Tstage (a int, b int) stored as orc "
operator|+
literal|"tblproperties('transactional'='true')"
argument_list|)
expr_stmt|;
comment|//this creates an ORC data file with correct schema under table root
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(1,2),(3,4),(5,6)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
comment|//runStatementOnDriver("truncate table Tstage");
comment|//load into existing empty table T
name|runStatementOnDriver
argument_list|(
literal|"import table T from '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
name|String
name|testQuery
init|=
name|isVectorized
condition|?
literal|"select ROW__ID, a, b from T order by ROW__ID"
else|:
literal|"select ROW__ID, a, b, INPUT__FILE__NAME from T order by ROW__ID"
decl_stmt|;
name|String
index|[]
index|[]
name|expected
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":0}\t1\t2"
block|,
literal|"t/delta_0000001_0000001_0000/000000_0"
block|}
block|,
block|{
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":1}\t3\t4"
block|,
literal|"t/delta_0000001_0000001_0000/000000_0"
block|}
block|,
block|{
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":2}\t5\t6"
block|,
literal|"t/delta_0000001_0000001_0000/000000_0"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"import existing table"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"update T set a = 0 where b = 6"
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected2
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":0}\t1\t2"
block|,
literal|"t/delta_0000001_0000001_0000/000000_0"
block|}
block|,
block|{
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":1}\t3\t4"
block|,
literal|"t/delta_0000001_0000001_0000/000000_0"
block|}
block|,
block|{
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":0}\t0\t6"
block|,
literal|"t/delta_0000002_0000002_0000/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected2
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"update imported table"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table T compact 'minor'"
argument_list|)
expr_stmt|;
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|expected3
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":0}\t1\t2"
block|,
literal|"t/delta_0000001_0000002/bucket_00000"
block|}
block|,
block|{
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":1}\t3\t4"
block|,
literal|"t/delta_0000001_0000002/bucket_00000"
block|}
block|,
block|{
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":0}\t0\t6"
block|,
literal|"t/delta_0000001_0000002/bucket_00000"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected3
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"minor compact imported table"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImportPartitioned
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|isVectorized
init|=
literal|false
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists Tstage"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int) partitioned by (p int) stored as orc"
argument_list|)
expr_stmt|;
comment|//Tstage is just a simple way to generate test data
name|runStatementOnDriver
argument_list|(
literal|"create table Tstage (a int, b int) partitioned by (p int) stored"
operator|+
literal|" as orc tblproperties('transactional'='false')"
argument_list|)
expr_stmt|;
comment|//this creates an ORC data file with correct schema under table root
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage values(1,2,10),(3,4,11),(5,6,12)"
argument_list|)
expr_stmt|;
comment|//now we have an archive with 3 partitions
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
comment|//make the partition in Target not empty
name|runStatementOnDriver
argument_list|(
literal|"insert into T values(0,0,10)"
argument_list|)
expr_stmt|;
comment|//load partition that doesn't exist in T
name|runStatementOnDriver
argument_list|(
literal|"import table T PARTITION(p=11) from '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
comment|//load partition that doesn't exist in T
name|runStatementOnDriver
argument_list|(
literal|"import table T PARTITION(p=12) from '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
name|String
name|testQuery
init|=
name|isVectorized
condition|?
literal|"select ROW__ID, a, b from T order by ROW__ID"
else|:
literal|"select ROW__ID, a, b, INPUT__FILE__NAME from T order by ROW__ID"
decl_stmt|;
name|String
index|[]
index|[]
name|expected
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":0}\t0\t0"
block|,
literal|"t/p=10/delta_0000001_0000001_0000/bucket_00000"
block|}
block|,
block|{
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":0}\t3\t4"
block|,
literal|"t/p=11/delta_0000002_0000002_0000/000000_0"
block|}
block|,
block|{
literal|"{\"writeid\":3,\"bucketid\":536870912,\"rowid\":0}\t5\t6"
block|,
literal|"t/p=12/delta_0000003_0000003_0000/000000_0"
block|}
block|}
decl_stmt|;
name|checkResult
argument_list|(
name|expected
argument_list|,
name|testQuery
argument_list|,
name|isVectorized
argument_list|,
literal|"import existing table"
argument_list|)
expr_stmt|;
block|}
comment|/**    * test selective partitioned import where target table needs to be created.    * export is made from acid table so that target table is created as acid    */
annotation|@
name|Test
specifier|public
name|void
name|testImportPartitionedCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists Tstage"
argument_list|)
expr_stmt|;
comment|//Tstage is just a simple way to generate test data
name|runStatementOnDriver
argument_list|(
literal|"create table Tstage (a int, b int) partitioned by (p int) stored"
operator|+
literal|" as orc"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|data
init|=
block|{
block|{
literal|1
block|,
literal|2
block|,
literal|10
block|}
block|,
block|{
literal|3
block|,
literal|4
block|,
literal|11
block|}
block|,
block|{
literal|5
block|,
literal|6
block|,
literal|12
block|}
block|}
decl_stmt|;
comment|//this creates an ORC data file with correct schema under table root
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage"
operator|+
name|TestTxnCommands2
operator|.
name|makeValuesClause
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|//now we have an archive with 3 partitions
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
comment|/*      * load partition that doesn't exist in T      * There is some parallelism going on if you load more than 1 partition which I don't      * understand. In testImportPartitionedCreate2() that's reasonable since each partition is      * loaded in parallel.  Why it happens here is beyond me.      * The file name changes from run to run between 000000_0 and 000001_0 and 000002_0      * The data is correct but this causes ROW__ID.bucketId/file names to change      */
name|runStatementOnDriver
argument_list|(
literal|"import table T PARTITION(p=10) from '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"import table T PARTITION(p=11) from '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"import table T PARTITION(p=12) from '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
comment|//verify data
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a, b, p from T order by a,b,p"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"reading imported data"
argument_list|,
name|TestTxnCommands2
operator|.
name|stringifyValues
argument_list|(
name|data
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
comment|//verify that we are indeed doing an Acid write (import)
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select INPUT__FILE__NAME from T order by INPUT__FILE__NAME"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
literal|"t/p=10/delta_0000001_0000001_0000/00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
literal|"t/p=11/delta_0000002_0000002_0000/00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|contains
argument_list|(
literal|"t/p=12/delta_0000003_0000003_0000/00000"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * import all partitions from archive - target table needs to be created.    * export is made from acid table so that target table is created as acid    */
annotation|@
name|Test
specifier|public
name|void
name|testImportPartitionedCreate2
parameter_list|()
throws|throws
name|Exception
block|{
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists Tstage"
argument_list|)
expr_stmt|;
comment|//Tstage is just a simple way to generate test data
name|runStatementOnDriver
argument_list|(
literal|"create table Tstage (a int, b int) partitioned by (p int) stored"
operator|+
literal|" as orc"
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|data
init|=
block|{
block|{
literal|1
block|,
literal|2
block|,
literal|10
block|}
block|,
block|{
literal|3
block|,
literal|4
block|,
literal|11
block|}
block|,
block|{
literal|5
block|,
literal|6
block|,
literal|12
block|}
block|}
decl_stmt|;
comment|//this creates an ORC data file with correct schema under table root
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage"
operator|+
name|TestTxnCommands2
operator|.
name|makeValuesClause
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|//now we have an archive with 3 partitions
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
comment|/*      * load entire archive      * There is some parallelism going on if you load more than 1 partition      * The file name changes from run to run between 000000_0 and 000001_0 and 000002_0      * The data is correct but this causes ROW__ID.bucketId/file names to change      */
name|runStatementOnDriver
argument_list|(
literal|"import table T from '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
comment|//verify data
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a, b, p from T order by a,b,p"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"reading imported data"
argument_list|,
name|TestTxnCommands2
operator|.
name|stringifyValues
argument_list|(
name|data
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
comment|//verify that we are indeed doing an Acid write (import)
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select INPUT__FILE__NAME from T order by INPUT__FILE__NAME"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
literal|"t/p=10/delta_0000001_0000001_0000/00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
literal|"t/p=11/delta_0000001_0000001_0000/00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|contains
argument_list|(
literal|"t/p=12/delta_0000001_0000001_0000/00000"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMM
parameter_list|()
throws|throws
name|Exception
block|{
name|testMM
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMMFlatSource
parameter_list|()
throws|throws
name|Exception
block|{
name|testMM
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMMCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|testMM
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"in this case no transactional tables are involved"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testMMCreateFlatSource
parameter_list|()
throws|throws
name|Exception
block|{
name|testMM
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testMM
parameter_list|(
name|boolean
name|existingTable
parameter_list|,
name|boolean
name|isSourceMM
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_CREATE_TABLES_AS_INSERT_ONLY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|data
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|,
block|{
literal|5
block|,
literal|6
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists Tstage"
argument_list|)
expr_stmt|;
if|if
condition|(
name|existingTable
condition|)
block|{
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int)"
argument_list|)
expr_stmt|;
block|}
name|runStatementOnDriver
argument_list|(
literal|"create table Tstage (a int, b int)"
operator|+
operator|(
name|isSourceMM
condition|?
literal|""
else|:
literal|" tblproperties('transactional'='false')"
operator|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage"
operator|+
name|TestTxnCommands2
operator|.
name|makeValuesClause
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"import table T from '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
comment|//verify data
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a, b from T order by a, b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"reading imported data"
argument_list|,
name|TestTxnCommands2
operator|.
name|stringifyValues
argument_list|(
name|data
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
comment|//verify that we are indeed doing an Acid write (import)
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select INPUT__FILE__NAME from T order by INPUT__FILE__NAME"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"t/delta_0000001_0000001_0000/000000_0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"t/delta_0000001_0000001_0000/000000_0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"t/delta_0000001_0000001_0000/000000_0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkResult
parameter_list|(
name|String
index|[]
index|[]
name|expectedResult
parameter_list|,
name|String
name|query
parameter_list|,
name|boolean
name|isVectorized
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|checkResult
argument_list|(
name|expectedResult
argument_list|,
name|query
argument_list|,
name|isVectorized
argument_list|,
name|msg
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test will fail - MM export doesn't filter out aborted transaction data.    */
annotation|@
name|Ignore
argument_list|()
annotation|@
name|Test
specifier|public
name|void
name|testMMExportAborted
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_CREATE_TABLES_AS_INSERT_ONLY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|data
init|=
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|,
block|{
literal|5
block|,
literal|6
block|}
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|dataAbort
init|=
block|{
block|{
literal|10
block|,
literal|2
block|}
block|}
decl_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists T"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"drop table if exists Tstage"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table T (a int, b int)"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table Tstage (a int, b int)"
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEROLLBACKTXN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage"
operator|+
name|TestTxnCommands2
operator|.
name|makeValuesClause
argument_list|(
name|dataAbort
argument_list|)
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEROLLBACKTXN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into Tstage"
operator|+
name|TestTxnCommands2
operator|.
name|makeValuesClause
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"export table Tstage to '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"import table T from '"
operator|+
name|getWarehouseDir
argument_list|()
operator|+
literal|"/1'"
argument_list|)
expr_stmt|;
comment|//verify data
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a, b from T order by a, b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"reading imported data"
argument_list|,
name|TestTxnCommands2
operator|.
name|stringifyValues
argument_list|(
name|data
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

