begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|udf
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFIsNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|udf
operator|.
name|legacy
operator|.
name|ConcatTextLongDoubleUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|udf
operator|.
name|legacy
operator|.
name|LongUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/*  * Test the vectorized UDF adaptor to verify that custom legacy and generic  * UDFs can be run in vectorized mode.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorUDFAdaptor
block|{
specifier|static
name|byte
index|[]
name|blue
init|=
literal|null
decl_stmt|;
specifier|static
name|byte
index|[]
name|red
init|=
literal|null
decl_stmt|;
static|static
block|{
try|try
block|{
name|blue
operator|=
literal|"blue"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|red
operator|=
literal|"red"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
empty_stmt|;
comment|// do nothing
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongUDF
parameter_list|()
block|{
comment|// create a syntax tree for a simple function call "longudf(col0)"
name|ExprNodeGenericFuncDesc
name|funcDesc
decl_stmt|;
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoFactory
operator|.
name|longTypeInfo
decl_stmt|;
name|GenericUDFBridge
name|genericUDFBridge
init|=
operator|new
name|GenericUDFBridge
argument_list|(
literal|"longudf"
argument_list|,
literal|false
argument_list|,
name|LongUDF
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfo
argument_list|,
literal|"col0"
argument_list|,
literal|"tablename"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|VectorUDFArgDesc
index|[]
name|argDescs
init|=
operator|new
name|VectorUDFArgDesc
index|[
literal|1
index|]
decl_stmt|;
name|argDescs
index|[
literal|0
index|]
operator|=
operator|new
name|VectorUDFArgDesc
argument_list|()
expr_stmt|;
name|argDescs
index|[
literal|0
index|]
operator|.
name|setVariable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|funcDesc
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
name|genericUDFBridge
argument_list|,
name|genericUDFBridge
operator|.
name|getUdfName
argument_list|()
argument_list|,
name|children
argument_list|)
expr_stmt|;
comment|// create the adaptor for this function call to work in vector mode
name|VectorUDFAdaptor
name|vudf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|vudf
operator|=
operator|new
name|VectorUDFAdaptor
argument_list|(
name|funcDesc
argument_list|,
literal|1
argument_list|,
literal|"Long"
argument_list|,
name|argDescs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
comment|// We should never get here.
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|VectorizedRowBatch
name|b
init|=
name|getBatchLongInLongOut
argument_list|()
decl_stmt|;
name|vudf
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
comment|// verify output
name|LongColumnVector
name|out
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|out
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1001
argument_list|,
name|out
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1002
argument_list|,
name|out
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|out
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// with nulls
name|b
operator|=
name|getBatchLongInLongOut
argument_list|()
expr_stmt|;
name|out
operator|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|vudf
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|out
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|out
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1001
argument_list|,
name|out
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|out
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// with repeating
name|b
operator|=
name|getBatchLongInLongOut
argument_list|()
expr_stmt|;
name|out
operator|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|vudf
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
comment|// The implementation may or may not set output it isRepeting.
comment|// That is implementation-defined.
name|assertTrue
argument_list|(
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|&&
name|out
operator|.
name|vector
index|[
literal|0
index|]
operator|==
literal|1000
operator|||
operator|!
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|&&
name|out
operator|.
name|vector
index|[
literal|2
index|]
operator|==
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|b
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiArgumentUDF
parameter_list|()
block|{
comment|// create a syntax tree for a function call "testudf(col0, col1, col2)"
name|ExprNodeGenericFuncDesc
name|funcDesc
decl_stmt|;
name|TypeInfo
name|typeInfoStr
init|=
name|TypeInfoFactory
operator|.
name|stringTypeInfo
decl_stmt|;
name|TypeInfo
name|typeInfoLong
init|=
name|TypeInfoFactory
operator|.
name|longTypeInfo
decl_stmt|;
name|TypeInfo
name|typeInfoDbl
init|=
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
decl_stmt|;
name|GenericUDFBridge
name|genericUDFBridge
init|=
operator|new
name|GenericUDFBridge
argument_list|(
literal|"testudf"
argument_list|,
literal|false
argument_list|,
name|ConcatTextLongDoubleUDF
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfoStr
argument_list|,
literal|"col0"
argument_list|,
literal|"tablename"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfoLong
argument_list|,
literal|"col1"
argument_list|,
literal|"tablename"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfoDbl
argument_list|,
literal|"col2"
argument_list|,
literal|"tablename"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|VectorUDFArgDesc
index|[]
name|argDescs
init|=
operator|new
name|VectorUDFArgDesc
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|argDescs
index|[
name|i
index|]
operator|=
operator|new
name|VectorUDFArgDesc
argument_list|()
expr_stmt|;
name|argDescs
index|[
name|i
index|]
operator|.
name|setVariable
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|funcDesc
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfoStr
argument_list|,
name|genericUDFBridge
argument_list|,
name|genericUDFBridge
operator|.
name|getUdfName
argument_list|()
argument_list|,
name|children
argument_list|)
expr_stmt|;
comment|// create the adaptor for this function call to work in vector mode
name|VectorUDFAdaptor
name|vudf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|vudf
operator|=
operator|new
name|VectorUDFAdaptor
argument_list|(
name|funcDesc
argument_list|,
literal|3
argument_list|,
literal|"String"
argument_list|,
name|argDescs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
comment|// We should never get here.
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// with no nulls
name|VectorizedRowBatch
name|b
init|=
name|getBatchStrDblLongWithStrOut
argument_list|()
decl_stmt|;
name|vudf
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|byte
index|[]
name|result
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|result2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
literal|"red:1:1.0"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|result2
operator|=
literal|"blue:0:0.0"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
empty_stmt|;
block|}
name|BytesColumnVector
name|out
init|=
operator|(
name|BytesColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|,
name|out
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|out
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|out
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// with nulls
name|b
operator|=
name|getBatchStrDblLongWithStrOut
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|vudf
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|out
operator|=
operator|(
name|BytesColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|assertFalse
argument_list|(
name|out
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// with all input columns repeating
name|b
operator|=
name|getBatchStrDblLongWithStrOut
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|vudf
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|out
operator|=
operator|(
name|BytesColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|result2
argument_list|,
literal|0
argument_list|,
name|result2
operator|.
name|length
argument_list|,
name|out
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|out
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|out
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|noNulls
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VectorizedRowBatch
name|getBatchLongInLongOut
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|LongColumnVector
name|in
init|=
operator|new
name|LongColumnVector
argument_list|()
decl_stmt|;
name|LongColumnVector
name|out
init|=
operator|new
name|LongColumnVector
argument_list|()
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|in
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|out
expr_stmt|;
name|in
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|in
operator|.
name|vector
index|[
literal|1
index|]
operator|=
literal|1
expr_stmt|;
name|in
operator|.
name|vector
index|[
literal|2
index|]
operator|=
literal|2
expr_stmt|;
name|in
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|b
operator|.
name|size
operator|=
literal|3
expr_stmt|;
return|return
name|b
return|;
block|}
specifier|private
name|VectorizedRowBatch
name|getBatchStrDblLongWithStrOut
parameter_list|()
block|{
name|VectorizedRowBatch
name|b
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|strCol
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|LongColumnVector
name|longCol
init|=
operator|new
name|LongColumnVector
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|dblCol
init|=
operator|new
name|DoubleColumnVector
argument_list|()
decl_stmt|;
name|BytesColumnVector
name|outCol
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|strCol
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|longCol
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|dblCol
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|3
index|]
operator|=
name|outCol
expr_stmt|;
name|strCol
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
name|strCol
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
name|blue
argument_list|,
literal|0
argument_list|,
name|blue
operator|.
name|length
argument_list|)
expr_stmt|;
name|strCol
operator|.
name|setVal
argument_list|(
literal|1
argument_list|,
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|)
expr_stmt|;
name|longCol
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|longCol
operator|.
name|vector
index|[
literal|1
index|]
operator|=
literal|1
expr_stmt|;
name|dblCol
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|0.0
expr_stmt|;
name|dblCol
operator|.
name|vector
index|[
literal|1
index|]
operator|=
literal|1.0
expr_stmt|;
comment|// set one null value for possible later use
name|longCol
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
comment|// but have no nulls initially
name|longCol
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|strCol
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|dblCol
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|outCol
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
name|b
operator|.
name|size
operator|=
literal|2
expr_stmt|;
return|return
name|b
return|;
block|}
comment|// test the UDF adaptor for a generic UDF (as opposed to a legacy UDF)
annotation|@
name|Test
specifier|public
name|void
name|testGenericUDF
parameter_list|()
block|{
comment|// create a syntax tree for a function call 'myisnull(col0, "UNKNOWN")'
name|ExprNodeGenericFuncDesc
name|funcDesc
decl_stmt|;
name|GenericUDF
name|genericUDF
init|=
operator|new
name|GenericUDFIsNull
argument_list|()
decl_stmt|;
name|TypeInfo
name|typeInfoStr
init|=
name|TypeInfoFactory
operator|.
name|stringTypeInfo
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfoStr
argument_list|,
literal|"col0"
argument_list|,
literal|"tablename"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|typeInfoStr
argument_list|,
literal|"UNKNOWN"
argument_list|)
argument_list|)
expr_stmt|;
name|VectorUDFArgDesc
index|[]
name|argDescs
init|=
operator|new
name|VectorUDFArgDesc
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|argDescs
index|[
name|i
index|]
operator|=
operator|new
name|VectorUDFArgDesc
argument_list|()
expr_stmt|;
block|}
name|argDescs
index|[
literal|0
index|]
operator|.
name|setVariable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|argDescs
index|[
literal|1
index|]
operator|.
name|setConstant
argument_list|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|funcDesc
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfoStr
argument_list|,
name|genericUDF
argument_list|,
literal|"myisnull"
argument_list|,
name|children
argument_list|)
expr_stmt|;
comment|// create the adaptor for this function call to work in vector mode
name|VectorUDFAdaptor
name|vudf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|vudf
operator|=
operator|new
name|VectorUDFAdaptor
argument_list|(
name|funcDesc
argument_list|,
literal|3
argument_list|,
literal|"String"
argument_list|,
name|argDescs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
comment|// We should never get here.
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|VectorizedRowBatch
name|b
decl_stmt|;
name|byte
index|[]
name|red
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|unknown
init|=
literal|null
decl_stmt|;
try|try
block|{
name|red
operator|=
literal|"red"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|unknown
operator|=
literal|"UNKNOWN"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
empty_stmt|;
block|}
name|BytesColumnVector
name|out
decl_stmt|;
comment|// with nulls
name|b
operator|=
name|getBatchStrDblLongWithStrOut
argument_list|()
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
comment|// set 1st entry to null
name|vudf
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|out
operator|=
operator|(
name|BytesColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
comment|// verify outputs
name|int
name|cmp
init|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|red
argument_list|,
literal|0
argument_list|,
name|red
operator|.
name|length
argument_list|,
name|out
operator|.
name|vector
index|[
literal|1
index|]
argument_list|,
name|out
operator|.
name|start
index|[
literal|1
index|]
argument_list|,
name|out
operator|.
name|length
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|StringExpr
operator|.
name|compare
argument_list|(
name|unknown
argument_list|,
literal|0
argument_list|,
name|unknown
operator|.
name|length
argument_list|,
name|out
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|out
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|out
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
comment|// output entry should not be null for null input for this particular generic UDF
name|assertTrue
argument_list|(
name|out
operator|.
name|noNulls
operator|||
operator|!
name|out
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

