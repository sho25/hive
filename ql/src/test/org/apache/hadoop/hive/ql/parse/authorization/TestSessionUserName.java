begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|HiveAuthenticationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|SessionStateUserAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAccessController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveMetastoreClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
specifier|public
class|class
name|TestSessionUserName
block|{
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
comment|//clear the username
name|HiveAuthorizerStoringUserNameFactory
operator|.
name|username
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Test if the authorization factory gets the username provided by    * the authenticator, if SesstionState is created without username    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSessionDefaultUser
parameter_list|()
throws|throws
name|Exception
block|{
name|SessionState
name|ss
init|=
operator|new
name|SessionState
argument_list|(
name|getAuthV2HiveConf
argument_list|()
argument_list|)
decl_stmt|;
name|setupDataNucleusFreeHive
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"check username"
argument_list|,
name|ss
operator|.
name|getAuthenticator
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|,
name|HiveAuthorizerStoringUserNameFactory
operator|.
name|username
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if the authorization factory gets the username set in the SessionState constructor    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSessionConstructorUser
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|USER_NAME
init|=
literal|"authtestuser"
decl_stmt|;
name|SessionState
name|ss
init|=
operator|new
name|SessionState
argument_list|(
name|getAuthV2HiveConf
argument_list|()
argument_list|,
name|USER_NAME
argument_list|)
decl_stmt|;
name|setupDataNucleusFreeHive
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|ss
operator|.
name|getAuthenticator
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"check username"
argument_list|,
name|USER_NAME
argument_list|,
name|HiveAuthorizerStoringUserNameFactory
operator|.
name|username
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a mocked Hive object that does not create a real meta store client object    * This gets rid of the datanucleus initializtion which makes it easier    * to run test from IDEs    * @param hiveConf    * @throws MetaException    *    */
specifier|private
name|void
name|setupDataNucleusFreeHive
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|MetaException
block|{
name|Hive
name|db
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Hive
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|db
operator|.
name|getMSC
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|db
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|Hive
operator|.
name|set
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return HiveConf with authorization V2 enabled with a dummy authorization factory    * that captures the given user name    */
specifier|private
name|HiveConf
name|getAuthV2HiveConf
parameter_list|()
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
name|HiveAuthorizerStoringUserNameFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHENTICATOR_MANAGER
argument_list|,
name|SessionStateUserAuthenticator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * dummy hive authorizer that stores the user name    */
specifier|static
class|class
name|HiveAuthorizerStoringUserNameFactory
implements|implements
name|HiveAuthorizerFactory
block|{
specifier|static
name|String
name|username
decl_stmt|;
annotation|@
name|Override
specifier|public
name|HiveAuthorizer
name|createHiveAuthorizer
parameter_list|(
name|HiveMetastoreClientFactory
name|metastoreClientFactory
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|HiveAuthenticationProvider
name|authenticator
parameter_list|)
block|{
name|username
operator|=
name|authenticator
operator|.
name|getUserName
argument_list|()
expr_stmt|;
name|HiveAccessController
name|acontroller
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HiveAccessController
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|HiveAuthorizerImpl
argument_list|(
name|acontroller
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

