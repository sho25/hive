begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|BigDecimal
operator|.
name|ROUND_HALF_EVEN
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|MathExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredJavaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestGenericUDFBRound
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDouble
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFBRound
name|udf
init|=
operator|new
name|GenericUDFBRound
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
decl_stmt|;
name|IntWritable
name|scale
init|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|scale
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
literal|2.5
argument_list|,
name|scale
argument_list|,
literal|2.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
literal|3.5
argument_list|,
name|scale
argument_list|,
literal|4.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
literal|2.49
argument_list|,
name|scale
argument_list|,
literal|2.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
literal|3.49
argument_list|,
name|scale
argument_list|,
literal|3.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
literal|2.51
argument_list|,
name|scale
argument_list|,
literal|3.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
literal|3.51
argument_list|,
name|scale
argument_list|,
literal|4.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
literal|2.4
argument_list|,
name|scale
argument_list|,
literal|2.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
literal|3.4
argument_list|,
name|scale
argument_list|,
literal|3.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
literal|2.6
argument_list|,
name|scale
argument_list|,
literal|3.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
literal|3.6
argument_list|,
name|scale
argument_list|,
literal|4.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScaleMinus1
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFBRound
name|udf
init|=
operator|new
name|GenericUDFBRound
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
decl_stmt|;
name|IntWritable
name|scale
init|=
operator|new
name|IntWritable
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|scale
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
literal|55.0
argument_list|,
name|scale
argument_list|,
literal|60.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
literal|45.0
argument_list|,
name|scale
argument_list|,
literal|40.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
literal|54.9
argument_list|,
name|scale
argument_list|,
literal|50.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
literal|44.9
argument_list|,
name|scale
argument_list|,
literal|40.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
literal|55.1
argument_list|,
name|scale
argument_list|,
literal|60.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
literal|45.1
argument_list|,
name|scale
argument_list|,
literal|50.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
operator|-
literal|55.0
argument_list|,
name|scale
argument_list|,
operator|-
literal|60.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
operator|-
literal|45.0
argument_list|,
name|scale
argument_list|,
operator|-
literal|40.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
operator|-
literal|54.9
argument_list|,
name|scale
argument_list|,
operator|-
literal|50.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
operator|-
literal|44.9
argument_list|,
name|scale
argument_list|,
operator|-
literal|40.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
operator|-
literal|55.1
argument_list|,
name|scale
argument_list|,
operator|-
literal|60.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDouble
argument_list|(
operator|-
literal|45.1
argument_list|,
name|scale
argument_list|,
operator|-
literal|50.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloat
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFBRound
name|udf
init|=
operator|new
name|GenericUDFBRound
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableFloatObjectInspector
decl_stmt|;
name|IntWritable
name|scale
init|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|scale
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runFloat
argument_list|(
literal|2.5f
argument_list|,
name|scale
argument_list|,
literal|2.0f
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runFloat
argument_list|(
literal|3.5f
argument_list|,
name|scale
argument_list|,
literal|4.0f
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runFloat
argument_list|(
literal|2.49f
argument_list|,
name|scale
argument_list|,
literal|2.0f
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runFloat
argument_list|(
literal|3.49f
argument_list|,
name|scale
argument_list|,
literal|3.0f
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runFloat
argument_list|(
literal|2.51f
argument_list|,
name|scale
argument_list|,
literal|3.0f
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runFloat
argument_list|(
literal|3.51f
argument_list|,
name|scale
argument_list|,
literal|4.0f
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runFloat
argument_list|(
literal|2.4f
argument_list|,
name|scale
argument_list|,
literal|2.0f
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runFloat
argument_list|(
literal|3.4f
argument_list|,
name|scale
argument_list|,
literal|3.0f
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runFloat
argument_list|(
literal|2.6f
argument_list|,
name|scale
argument_list|,
literal|3.0f
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runFloat
argument_list|(
literal|3.6f
argument_list|,
name|scale
argument_list|,
literal|4.0f
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecimal
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFBRound
name|udf
init|=
operator|new
name|GenericUDFBRound
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableHiveDecimalObjectInspector
decl_stmt|;
name|IntWritable
name|scale
init|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|scale
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runDecimal
argument_list|(
literal|2.5
argument_list|,
name|scale
argument_list|,
literal|2.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDecimal
argument_list|(
literal|3.5
argument_list|,
name|scale
argument_list|,
literal|4.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDecimal
argument_list|(
literal|2.49
argument_list|,
name|scale
argument_list|,
literal|2.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDecimal
argument_list|(
literal|3.49
argument_list|,
name|scale
argument_list|,
literal|3.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDecimal
argument_list|(
literal|2.51
argument_list|,
name|scale
argument_list|,
literal|3.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDecimal
argument_list|(
literal|3.51
argument_list|,
name|scale
argument_list|,
literal|4.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDecimal
argument_list|(
literal|2.4
argument_list|,
name|scale
argument_list|,
literal|2.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDecimal
argument_list|(
literal|3.4
argument_list|,
name|scale
argument_list|,
literal|3.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDecimal
argument_list|(
literal|2.6
argument_list|,
name|scale
argument_list|,
literal|3.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runDecimal
argument_list|(
literal|3.6
argument_list|,
name|scale
argument_list|,
literal|4.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMathExprBround
parameter_list|()
throws|throws
name|HiveException
block|{
name|double
index|[]
name|vArr
init|=
block|{
literal|1.5
block|,
literal|2.5
block|,
operator|-
literal|1.5
block|,
operator|-
literal|2.5
block|,
literal|1.49
block|,
literal|1.51
block|}
decl_stmt|;
for|for
control|(
name|double
name|v
range|:
name|vArr
control|)
block|{
name|double
name|v1
init|=
name|RoundUtils
operator|.
name|bround
argument_list|(
name|v
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|double
name|v2
init|=
name|MathExpr
operator|.
name|bround
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|double
name|v3
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|ROUND_HALF_EVEN
argument_list|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|v3
argument_list|,
name|v2
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|runDouble
parameter_list|(
name|double
name|v
parameter_list|,
name|IntWritable
name|scale
parameter_list|,
name|Double
name|expV
parameter_list|,
name|GenericUDF
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
name|DeferredObject
name|valueObj0
init|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|DeferredObject
name|valueObj1
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|scale
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
block|{
name|valueObj0
block|,
name|valueObj1
block|}
decl_stmt|;
name|DoubleWritable
name|output
init|=
operator|(
name|DoubleWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bround() test "
argument_list|,
name|expV
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|output
operator|.
name|get
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runFloat
parameter_list|(
name|float
name|v
parameter_list|,
name|IntWritable
name|scale
parameter_list|,
name|Float
name|expV
parameter_list|,
name|GenericUDF
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
name|DeferredObject
name|valueObj0
init|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|FloatWritable
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|DeferredObject
name|valueObj1
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|scale
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
block|{
name|valueObj0
block|,
name|valueObj1
block|}
decl_stmt|;
name|FloatWritable
name|output
init|=
operator|(
name|FloatWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bround() test "
argument_list|,
name|expV
operator|.
name|floatValue
argument_list|()
argument_list|,
name|output
operator|.
name|get
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runDecimal
parameter_list|(
name|double
name|v
parameter_list|,
name|IntWritable
name|scale
parameter_list|,
name|Double
name|expV
parameter_list|,
name|GenericUDF
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
name|HiveDecimal
name|hd
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|DeferredObject
name|valueObj0
init|=
operator|new
name|DeferredJavaObject
argument_list|(
operator|new
name|HiveDecimalWritable
argument_list|(
name|hd
argument_list|)
argument_list|)
decl_stmt|;
name|DeferredObject
name|valueObj1
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|scale
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
block|{
name|valueObj0
block|,
name|valueObj1
block|}
decl_stmt|;
name|HiveDecimalWritable
name|output
init|=
operator|(
name|HiveDecimalWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bround() test "
argument_list|,
name|expV
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|output
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

