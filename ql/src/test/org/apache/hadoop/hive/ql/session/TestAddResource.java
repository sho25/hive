begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_class
specifier|public
class|class
name|TestAddResource
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_JAR_DIR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|,
literal|"."
argument_list|)
operator|+
name|File
operator|.
name|pathSeparator
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|ResourceType
name|t
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|t
operator|=
name|ResourceType
operator|.
name|JAR
expr_stmt|;
comment|//Generate test jar files
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Writer
name|output
init|=
literal|null
decl_stmt|;
name|String
name|dataFile
init|=
name|TEST_JAR_DIR
operator|+
literal|"testjar"
operator|+
name|i
operator|+
literal|".jar"
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dataFile
argument_list|)
decl_stmt|;
name|output
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
literal|"sample"
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Check that all the jars are added to the classpath
annotation|@
name|Test
specifier|public
name|void
name|testSanity
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|SessionState
name|ss
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"testQuery"
decl_stmt|;
comment|// add all the dependencies to a list
name|List
argument_list|<
name|URI
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|addList
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar1.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar2.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar3.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar4.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar5.jar"
argument_list|)
argument_list|)
expr_stmt|;
comment|//return all the dependency urls
name|Mockito
operator|.
name|when
argument_list|(
name|ss
operator|.
name|resolveAndDownload
argument_list|(
name|t
argument_list|,
name|query
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|addList
operator|.
name|add
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|ss
operator|.
name|add_resources
argument_list|(
name|t
argument_list|,
name|addList
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dependencies
init|=
name|ss
operator|.
name|list_resource
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|URI
argument_list|>
name|actual
init|=
operator|new
name|LinkedList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dependency
range|:
name|dependencies
control|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|dependency
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// sort both the lists
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|ss
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// add same jar multiple times and check that dependencies are added only once.
annotation|@
name|Test
specifier|public
name|void
name|testDuplicateAdds
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|SessionState
name|ss
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"testQuery"
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|addList
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar1.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar2.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar3.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar4.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar5.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ss
operator|.
name|resolveAndDownload
argument_list|(
name|t
argument_list|,
name|query
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|list
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|addList
operator|.
name|add
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
name|ss
operator|.
name|add_resources
argument_list|(
name|t
argument_list|,
name|addList
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dependencies
init|=
name|ss
operator|.
name|list_resource
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|URI
argument_list|>
name|actual
init|=
operator|new
name|LinkedList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dependency
range|:
name|dependencies
control|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|dependency
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|ss
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// test when two jars with shared dependencies are added, the classloader contains union of the dependencies
annotation|@
name|Test
specifier|public
name|void
name|testUnion
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|SessionState
name|ss
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|ResourceType
name|t
init|=
name|ResourceType
operator|.
name|JAR
decl_stmt|;
name|String
name|query1
init|=
literal|"testQuery1"
decl_stmt|;
name|String
name|query2
init|=
literal|"testQuery2"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|addList
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// add dependencies for the jars
name|List
argument_list|<
name|URI
argument_list|>
name|list1
init|=
operator|new
name|LinkedList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|list2
init|=
operator|new
name|LinkedList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar1.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar2.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar3.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar4.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar5.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar3.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar4.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ss
operator|.
name|resolveAndDownload
argument_list|(
name|t
argument_list|,
name|query1
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ss
operator|.
name|resolveAndDownload
argument_list|(
name|t
argument_list|,
name|query2
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|list2
argument_list|)
expr_stmt|;
name|addList
operator|.
name|add
argument_list|(
name|query1
argument_list|)
expr_stmt|;
name|addList
operator|.
name|add
argument_list|(
name|query2
argument_list|)
expr_stmt|;
name|ss
operator|.
name|add_resources
argument_list|(
name|t
argument_list|,
name|addList
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dependencies
init|=
name|ss
operator|.
name|list_resource
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|URI
argument_list|>
name|actual
init|=
operator|new
name|LinkedList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dependency
range|:
name|dependencies
control|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|dependency
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|URI
argument_list|>
name|expected
init|=
name|union
argument_list|(
name|list1
argument_list|,
name|list2
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|ss
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param path    * @return URI corresponding to the path.    */
specifier|private
specifier|static
name|URI
name|createURI
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|new
name|URI
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|// Test when two jars are added with shared dependencies and one jar is deleted, the shared dependencies should not be deleted
annotation|@
name|Test
specifier|public
name|void
name|testDeleteJar
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|SessionState
name|ss
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|query1
init|=
literal|"testQuery1"
decl_stmt|;
name|String
name|query2
init|=
literal|"testQuery2"
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|list1
init|=
operator|new
name|LinkedList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|list2
init|=
operator|new
name|LinkedList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|addList
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar1.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar2.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar3.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar4.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar5.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar3.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar4.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list2
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ss
operator|.
name|resolveAndDownload
argument_list|(
name|t
argument_list|,
name|query1
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ss
operator|.
name|resolveAndDownload
argument_list|(
name|t
argument_list|,
name|query2
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|list2
argument_list|)
expr_stmt|;
name|addList
operator|.
name|add
argument_list|(
name|query1
argument_list|)
expr_stmt|;
name|addList
operator|.
name|add
argument_list|(
name|query2
argument_list|)
expr_stmt|;
name|ss
operator|.
name|add_resources
argument_list|(
name|t
argument_list|,
name|addList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|deleteList
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|deleteList
operator|.
name|add
argument_list|(
name|list1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete jar and its dependencies added using query1
name|ss
operator|.
name|delete_resources
argument_list|(
name|t
argument_list|,
name|deleteList
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dependencies
init|=
name|ss
operator|.
name|list_resource
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|URI
argument_list|>
name|actual
init|=
operator|new
name|LinkedList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dependency
range|:
name|dependencies
control|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|dependency
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|URI
argument_list|>
name|expected
init|=
name|list2
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|deleteList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|deleteList
operator|.
name|add
argument_list|(
name|list2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete remaining jars
name|ss
operator|.
name|delete_resources
argument_list|(
name|t
argument_list|,
name|deleteList
argument_list|)
expr_stmt|;
name|dependencies
operator|=
name|ss
operator|.
name|list_resource
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dependencies
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ss
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// same test as above but with 3 jars sharing dependencies
annotation|@
name|Test
specifier|public
name|void
name|testDeleteJarMultiple
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|SessionState
name|ss
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|query1
init|=
literal|"testQuery1"
decl_stmt|;
name|String
name|query2
init|=
literal|"testQuery2"
decl_stmt|;
name|String
name|query3
init|=
literal|"testQuery3"
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|list1
init|=
operator|new
name|LinkedList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|list2
init|=
operator|new
name|LinkedList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|list3
init|=
operator|new
name|LinkedList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|addList
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar1.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar2.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar3.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar4.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar5.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar3.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar4.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list3
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar4.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list3
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar2.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|list3
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|TEST_JAR_DIR
operator|+
literal|"testjar5.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list2
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list3
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ss
operator|.
name|resolveAndDownload
argument_list|(
name|t
argument_list|,
name|query1
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ss
operator|.
name|resolveAndDownload
argument_list|(
name|t
argument_list|,
name|query2
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|list2
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ss
operator|.
name|resolveAndDownload
argument_list|(
name|t
argument_list|,
name|query3
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|list3
argument_list|)
expr_stmt|;
name|addList
operator|.
name|add
argument_list|(
name|query1
argument_list|)
expr_stmt|;
name|addList
operator|.
name|add
argument_list|(
name|query2
argument_list|)
expr_stmt|;
name|addList
operator|.
name|add
argument_list|(
name|query3
argument_list|)
expr_stmt|;
name|ss
operator|.
name|add_resources
argument_list|(
name|t
argument_list|,
name|addList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|deleteList
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|deleteList
operator|.
name|add
argument_list|(
name|list1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete jar added using query1
name|ss
operator|.
name|delete_resources
argument_list|(
name|t
argument_list|,
name|deleteList
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dependencies
init|=
name|ss
operator|.
name|list_resource
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|URI
argument_list|>
name|actual
init|=
operator|new
name|LinkedList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dependency
range|:
name|dependencies
control|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|dependency
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|URI
argument_list|>
name|expected
init|=
name|union
argument_list|(
name|list2
argument_list|,
name|list3
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|actual
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expected
operator|.
name|clear
argument_list|()
expr_stmt|;
name|deleteList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|deleteList
operator|.
name|add
argument_list|(
name|list2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete jars added using query2
name|ss
operator|.
name|delete_resources
argument_list|(
name|t
argument_list|,
name|deleteList
argument_list|)
expr_stmt|;
name|dependencies
operator|=
name|ss
operator|.
name|list_resource
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|actual
operator|=
operator|new
name|LinkedList
argument_list|<
name|URI
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|dependency
range|:
name|dependencies
control|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|createURI
argument_list|(
name|dependency
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expected
operator|=
operator|new
name|LinkedList
argument_list|<
name|URI
argument_list|>
argument_list|(
name|list3
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|actual
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expected
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// delete remaining jars
name|deleteList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|deleteList
operator|.
name|add
argument_list|(
name|list3
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ss
operator|.
name|delete_resources
argument_list|(
name|t
argument_list|,
name|deleteList
argument_list|)
expr_stmt|;
name|dependencies
operator|=
name|ss
operator|.
name|list_resource
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dependencies
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ss
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
comment|// delete sample jars
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|String
name|dataFile
init|=
name|TEST_JAR_DIR
operator|+
literal|"testjar"
operator|+
name|i
operator|+
literal|".jar"
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|dataFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not delete the data file"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|union
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list1
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|list2
parameter_list|)
block|{
name|Set
argument_list|<
name|T
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|list2
argument_list|)
expr_stmt|;
return|return
operator|new
name|LinkedList
argument_list|<
name|T
argument_list|>
argument_list|(
name|set
argument_list|)
return|;
block|}
block|}
end_class

end_unit

