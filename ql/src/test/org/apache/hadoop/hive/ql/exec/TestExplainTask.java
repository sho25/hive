begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ExplainConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|StageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|HiveAuthenticationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|HiveAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|TestExplainTask
block|{
specifier|private
specifier|static
specifier|final
name|String
name|BACKUP_ID
init|=
literal|"backup-id-mock"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AST
init|=
literal|"ast-mock"
decl_stmt|;
specifier|private
name|PrintStream
name|out
decl_stmt|;
specifier|private
name|ExplainTask
name|uut
decl_stmt|;
specifier|private
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|uut
operator|=
operator|new
name|ExplainTask
argument_list|()
expr_stmt|;
name|uut
operator|.
name|conf
operator|=
name|mock
argument_list|(
name|HiveConf
operator|.
name|class
argument_list|)
expr_stmt|;
name|out
operator|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
expr_stmt|;
name|QueryState
name|qs
init|=
name|mock
argument_list|(
name|QueryState
operator|.
name|class
argument_list|)
decl_stmt|;
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|qs
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|uut
operator|.
name|queryState
operator|=
name|qs
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|DummyExplainDesc
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|TableScanDesc
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|explainResult
decl_stmt|;
specifier|public
name|DummyExplainDesc
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|explainResult
parameter_list|)
block|{
name|this
operator|.
name|explainResult
operator|=
name|explainResult
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"test"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|explainMethod
parameter_list|()
block|{
return|return
name|explainResult
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DummyOperator
extends|extends
name|TableScanOperator
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|DummyOperator
parameter_list|(
name|TableScanDesc
name|conf
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExplainDoesSortTopLevelMapEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|explainMap1
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"/k1"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"k3"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"hdfs:///k2"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"hdfs:///k1"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|explainMap2
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
literal|"hdfs:///k1"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
literal|"hdfs:///k2"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
literal|"/k1"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
literal|"k3"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|String
name|result1
init|=
name|explainToString
argument_list|(
name|explainMap1
argument_list|)
decl_stmt|;
name|String
name|result2
init|=
name|explainToString
argument_list|(
name|explainMap2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"both maps should be ordered, regardless of input order"
argument_list|,
name|result1
argument_list|,
name|result2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExplainDoesSortPathAsStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|explainMap1
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"/k1"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"k3"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"hdfs:/k2"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"hdfs:/k1"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|String
argument_list|>
name|explainMap2
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs:/k1"
argument_list|)
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs:/k2"
argument_list|)
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/k1"
argument_list|)
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
literal|"k3"
argument_list|)
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|String
name|result1
init|=
name|explainToString
argument_list|(
name|explainMap1
argument_list|)
decl_stmt|;
name|String
name|result2
init|=
name|explainToString
argument_list|(
name|explainMap2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"both maps should be sorted the same way"
argument_list|,
name|result1
argument_list|,
name|result2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExplainDoesSortMapValues
parameter_list|()
throws|throws
name|Exception
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|explainMap1Val
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|explainMap1Val
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap1Val
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|explainMap1
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"k"
argument_list|,
name|explainMap1Val
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|explainMap2Val
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|explainMap2Val
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap2Val
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|explainMap2
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
literal|"k"
argument_list|,
name|explainMap2Val
argument_list|)
expr_stmt|;
name|String
name|result1
init|=
name|explainToString
argument_list|(
name|explainMap1
argument_list|)
decl_stmt|;
name|String
name|result2
init|=
name|explainToString
argument_list|(
name|explainMap2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"both maps should be sorted the same way"
argument_list|,
name|result1
argument_list|,
name|result2
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|String
name|explainToString
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|explainMap
parameter_list|)
throws|throws
name|Exception
block|{
name|ExplainWork
name|work
init|=
operator|new
name|ExplainWork
argument_list|()
decl_stmt|;
name|ParseContext
name|pCtx
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|TableScanOperator
argument_list|>
name|topOps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TableScanOperator
name|scanOp
init|=
operator|new
name|DummyOperator
argument_list|(
operator|new
name|DummyExplainDesc
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|explainMap
argument_list|)
argument_list|)
decl_stmt|;
name|topOps
operator|.
name|put
argument_list|(
literal|"sample"
argument_list|,
name|scanOp
argument_list|)
expr_stmt|;
name|pCtx
operator|.
name|setTopOps
argument_list|(
name|topOps
argument_list|)
expr_stmt|;
name|work
operator|.
name|setParseContext
argument_list|(
name|pCtx
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|work
operator|.
name|setConfig
argument_list|(
operator|new
name|ExplainConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|ExplainTask
name|newExplainTask
init|=
operator|new
name|ExplainTask
argument_list|()
decl_stmt|;
name|newExplainTask
operator|.
name|queryState
operator|=
name|uut
operator|.
name|queryState
expr_stmt|;
name|newExplainTask
operator|.
name|getJSONLogicalPlan
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
argument_list|,
name|work
argument_list|)
expr_stmt|;
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetJSONDependenciesJsonShhouldMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|ExplainWork
name|work
init|=
name|mockExplainWork
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|work
operator|.
name|getDependency
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Mock inputs
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// One input table
name|Table
name|table
init|=
name|mock
argument_list|(
name|Table
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|table
operator|.
name|getCompleteName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"table-name-mock"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|table
operator|.
name|getTableType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
argument_list|)
expr_stmt|;
name|ReadEntity
name|input1
init|=
name|mock
argument_list|(
name|ReadEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|input1
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Entity
operator|.
name|Type
operator|.
name|TABLE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|input1
operator|.
name|getTable
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|inputs
operator|.
name|add
argument_list|(
name|input1
argument_list|)
expr_stmt|;
comment|// And one partition
name|Partition
name|partition
init|=
name|mock
argument_list|(
name|Partition
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|partition
operator|.
name|getCompleteName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"partition-name-mock"
argument_list|)
expr_stmt|;
name|ReadEntity
name|input2
init|=
name|mock
argument_list|(
name|ReadEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|input2
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Entity
operator|.
name|Type
operator|.
name|PARTITION
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|input2
operator|.
name|getPartition
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|inputs
operator|.
name|add
argument_list|(
name|input2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|work
operator|.
name|getInputs
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|inputs
argument_list|)
expr_stmt|;
name|JsonNode
name|result
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
name|ExplainTask
operator|.
name|getJSONDependencies
argument_list|(
name|work
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|JsonNode
name|expected
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
literal|"{\"input_partitions\":[{\"partitionName\":"
operator|+
literal|"\"partition-name-mock\"}],\"input_tables\":[{\"tablename\":\"table-name-mock\","
operator|+
literal|"\"tabletype\":\"EXTERNAL_TABLE\"}]}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetJSONPlan
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|uut
operator|.
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTAGEIDREARRANGE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"EXECUTION"
argument_list|)
expr_stmt|;
name|Task
name|mockTask
init|=
name|mockTask
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockTask
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"mockTaskId"
argument_list|)
expr_stmt|;
name|ExplainWork
name|explainWorkMock
init|=
name|mockExplainWork
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockTask
operator|.
name|getWork
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|explainWorkMock
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|tasks
init|=
name|Arrays
operator|.
expr|<
name|Task
argument_list|<
name|?
argument_list|>
operator|>
name|asList
argument_list|(
name|mockTask
argument_list|)
decl_stmt|;
name|JsonNode
name|result
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
name|uut
operator|.
name|getJSONPlan
argument_list|(
literal|null
argument_list|,
name|tasks
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|JsonNode
name|expected
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
literal|"{\"STAGE DEPENDENCIES\":{\"mockTaskId\":"
operator|+
literal|"{\"ROOT STAGE\":\"TRUE\",\"BACKUP STAGE\":\"backup-id-mock\"}},\"STAGE PLANS\":"
operator|+
literal|"{\"mockTaskId\":{}}}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutputDependenciesJsonShouldMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Task
argument_list|<
name|?
extends|extends
name|ExplainTask
argument_list|>
name|task
init|=
name|mockTask
argument_list|()
decl_stmt|;
name|JsonNode
name|result
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
name|uut
operator|.
name|outputDependencies
argument_list|(
name|task
argument_list|,
name|out
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|JsonNode
name|expected
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
literal|"{\"ROOT STAGE\":\"TRUE\",\"BACKUP STAGE\":"
operator|+
literal|"\""
operator|+
name|BACKUP_ID
operator|+
literal|"\",\"TASK TYPE\":\"EXPLAIN\"}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetJSONLogicalPlanJsonShouldMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|JsonNode
name|result
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
name|uut
operator|.
name|getJSONLogicalPlan
argument_list|(
literal|null
argument_list|,
name|mockExplainWork
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|JsonNode
name|expected
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
literal|"{}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutputMapJsonShouldMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// String
name|map
operator|.
name|put
argument_list|(
literal|"key-1"
argument_list|,
literal|"value-1"
argument_list|)
expr_stmt|;
comment|// SparkWork
name|map
operator|.
name|put
argument_list|(
literal|"spark-work"
argument_list|,
operator|new
name|SparkWork
argument_list|(
literal|"spark-work"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Empty list
name|List
argument_list|<
name|Object
argument_list|>
name|emptList
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"empty-list"
argument_list|,
name|emptList
argument_list|)
expr_stmt|;
comment|// List of TezWork.Dependency
name|List
argument_list|<
name|Object
argument_list|>
name|tezList1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mockTezWorkDependency
argument_list|()
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"tez-list-1"
argument_list|,
name|tezList1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|tezList2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mockTezWorkDependency
argument_list|()
block|,
name|mockTezWorkDependency
argument_list|()
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"tez-list-2"
argument_list|,
name|tezList2
argument_list|)
expr_stmt|;
comment|// List of SparkWork.Dependency
name|List
argument_list|<
name|Object
argument_list|>
name|sparkList1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mockSparkWorkDependency
argument_list|()
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"spark-list-1"
argument_list|,
name|sparkList1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|sparkList2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mockSparkWorkDependency
argument_list|()
block|,
name|mockSparkWorkDependency
argument_list|()
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"spark-list-2"
argument_list|,
name|sparkList2
argument_list|)
expr_stmt|;
comment|// inner Map
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|innerMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|innerMap
operator|.
name|put
argument_list|(
literal|"inner-key-1"
argument_list|,
literal|"inner-value-1"
argument_list|)
expr_stmt|;
name|innerMap
operator|.
name|put
argument_list|(
literal|"inner-key-2"
argument_list|,
name|tezList1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"map-1"
argument_list|,
name|innerMap
argument_list|)
expr_stmt|;
name|JsonNode
name|result
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
name|uut
operator|.
name|outputMap
argument_list|(
name|map
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|JsonNode
name|expected
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
literal|"{\"key-1\":\"value-1\",\"tez-list-2\":"
operator|+
literal|"[{\"parent\":\"name\"},"
operator|+
literal|"{\"parent\":\"name\"}],\"tez-list-1\":"
operator|+
literal|"{\"parent\":\"name\"},\"empty-list\":\"[]\",\"spark-list-2\":"
operator|+
literal|"[{\"parent\":\"mock-name\"},{\"parent\":\"mock-name\"}],"
operator|+
literal|"\"spark-list-1\":{\"parent\":"
operator|+
literal|"\"mock-name\"}, \"map-1\":\"{inner-key-1=inner-value-1, "
operator|+
literal|"inner-key-2=[mock-tez-dependency]}\",\"spark-work\":"
operator|+
literal|"{\"Spark\":{\"DagName:\":\"spark-work:2\"}}}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutputPlanJsonShouldMatch
parameter_list|()
throws|throws
name|Exception
block|{
comment|// SparkWork
name|SparkWork
name|work
init|=
operator|new
name|SparkWork
argument_list|(
literal|"spark-work"
argument_list|)
decl_stmt|;
name|JsonNode
name|result
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
name|uut
operator|.
name|outputPlan
argument_list|(
name|work
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|JsonNode
name|expected
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
literal|"{\"Spark\":{\"DagName:\":\"spark-work:1\"}}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// Operator with single child
name|CollectOperator
name|parentCollectOperator1
init|=
operator|new
name|CollectOperator
argument_list|()
decl_stmt|;
name|CollectOperator
name|child1
init|=
operator|new
name|CollectOperator
argument_list|()
decl_stmt|;
name|parentCollectOperator1
operator|.
name|setChildOperators
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|CollectOperator
index|[]
block|{
name|child1
block|}
block|)
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|parentCollectOperator1
operator|.
name|setConf
argument_list|(
operator|new
name|CollectDesc
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|result
operator|=
name|objectMapper
operator|.
name|readTree
argument_list|(
name|uut
operator|.
name|outputPlan
argument_list|(
name|parentCollectOperator1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|expected
operator|=
name|objectMapper
operator|.
name|readTree
argument_list|(
literal|"{\"Collect\":{\"children\":{}}}"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Operator with 2 children
end_comment

begin_decl_stmt
name|CollectOperator
name|parentCollectOperator2
init|=
operator|new
name|CollectOperator
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CollectOperator
name|child2
init|=
operator|new
name|CollectOperator
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|parentCollectOperator2
operator|.
name|setChildOperators
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|CollectOperator
index|[]
block|{
name|child1
operator|,
name|child2
block|}
end_expr_stmt

begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|parentCollectOperator2
operator|.
name|setConf
argument_list|(
operator|new
name|CollectDesc
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|result
operator|=
name|objectMapper
operator|.
name|readTree
argument_list|(
name|uut
operator|.
name|outputPlan
argument_list|(
name|parentCollectOperator2
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|expected
operator|=
name|objectMapper
operator|.
name|readTree
argument_list|(
literal|"{\"Collect\":{\"children\":[{},{}]}}"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Test
specifier|public
name|void
name|testCollectAuthRelatedEntitiesJsonShouldMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryState
name|qs
init|=
name|mock
argument_list|(
name|QueryState
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|qs
operator|.
name|getHiveOperation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HiveOperation
operator|.
name|EXPLAIN
argument_list|)
expr_stmt|;
name|uut
operator|.
name|queryState
operator|=
name|qs
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|HiveConf
argument_list|(
name|ExplainTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// SessionState.get().setCommandType(HiveOperation.EXPLAIN);
name|HiveAuthenticationProvider
name|authenticationProviderMock
init|=
name|mock
argument_list|(
name|HiveAuthenticationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|authenticationProviderMock
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test-user"
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setAuthenticator
argument_list|(
name|authenticationProviderMock
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setAuthorizer
argument_list|(
name|mock
argument_list|(
name|HiveAuthorizationProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ExplainWork
name|work
init|=
name|mockExplainWork
argument_list|()
decl_stmt|;
name|JsonNode
name|result
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
name|uut
operator|.
name|collectAuthRelatedEntities
argument_list|(
literal|null
argument_list|,
name|work
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|JsonNode
name|expected
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
literal|"{\"CURRENT_USER\":\"test-user\","
operator|+
literal|"\"OPERATION\":\"EXPLAIN\",\"INPUTS\":[],\"OUTPUTS\":[]}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testOutputPlanVectorizationJsonShouldMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryState
name|qs
init|=
name|mock
argument_list|(
name|QueryState
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|qs
operator|.
name|getHiveOperation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HiveOperation
operator|.
name|EXPLAIN
argument_list|)
expr_stmt|;
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|qs
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|uut
operator|.
name|queryState
operator|=
name|qs
expr_stmt|;
name|JsonNode
name|result
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
name|uut
operator|.
name|outputPlanVectorization
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
operator|.
name|getRight
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|JsonNode
name|expected
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
literal|"{\"enabled\":true,\"enabledConditionsMet\":[\"hive.vectorized.execution.enabled IS true\"]}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|result
operator|=
name|objectMapper
operator|.
name|readTree
argument_list|(
name|uut
operator|.
name|outputPlanVectorization
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
operator|.
name|getRight
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|=
name|objectMapper
operator|.
name|readTree
argument_list|(
literal|"{\"enabled\":false,\"enabledConditionsNotMet\":[\"hive.vectorized.execution.enabled IS false\"]}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|TezWork
operator|.
name|Dependency
name|mockTezWorkDependency
parameter_list|()
block|{
name|TezWork
operator|.
name|Dependency
name|dep
init|=
name|mock
argument_list|(
name|TezWork
operator|.
name|Dependency
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dep
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"mock-tez-dependency"
argument_list|)
expr_stmt|;
return|return
name|dep
return|;
block|}
end_function

begin_function
specifier|private
name|SparkWork
operator|.
name|Dependency
name|mockSparkWorkDependency
parameter_list|()
block|{
name|SparkWork
operator|.
name|Dependency
name|dep
init|=
name|mock
argument_list|(
name|SparkWork
operator|.
name|Dependency
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"mock-name"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dep
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"mock-spark-dependency"
argument_list|)
expr_stmt|;
return|return
name|dep
return|;
block|}
end_function

begin_function
specifier|private
name|ExplainWork
name|mockExplainWork
parameter_list|()
block|{
name|ExplainWork
name|explainWork
init|=
name|mock
argument_list|(
name|ExplainWork
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Should produce JSON
name|when
argument_list|(
name|explainWork
operator|.
name|isFormatted
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Should have some AST
comment|// when(explainWork.getAstStringTree()).thenReturn(AST);
name|when
argument_list|(
name|explainWork
operator|.
name|getAnalyzer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|BaseSemanticAnalyzer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|explainWork
return|;
block|}
end_function

begin_function
specifier|private
name|Task
argument_list|<
name|ExplainTask
argument_list|>
name|mockTask
parameter_list|()
block|{
name|Task
argument_list|<
name|ExplainTask
argument_list|>
name|task
init|=
name|mock
argument_list|(
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Explain type
name|when
argument_list|(
name|task
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|StageType
operator|.
name|EXPLAIN
argument_list|)
expr_stmt|;
comment|// This is a root task
name|when
argument_list|(
name|task
operator|.
name|isRootTask
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Set up backup task
name|Task
name|backupTask
init|=
name|mock
argument_list|(
name|Task
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|backupTask
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|BACKUP_ID
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|task
operator|.
name|getBackupTask
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|backupTask
argument_list|)
expr_stmt|;
return|return
name|task
return|;
block|}
end_function

unit|}
end_unit

