begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ExplainConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExplainWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestExplainTask
block|{
specifier|public
specifier|static
class|class
name|DummyExplainDesc
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|TableScanDesc
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|explainResult
decl_stmt|;
specifier|public
name|DummyExplainDesc
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|explainResult
parameter_list|)
block|{
name|this
operator|.
name|explainResult
operator|=
name|explainResult
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"test"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|explainMethod
parameter_list|()
block|{
return|return
name|explainResult
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DummyOperator
extends|extends
name|TableScanOperator
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|DummyOperator
parameter_list|(
name|TableScanDesc
name|conf
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExplainDoesSortTopLevelMapEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|explainMap1
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"/k1"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"k3"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"hdfs:///k2"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"hdfs:///k1"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|explainMap2
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
literal|"hdfs:///k1"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
literal|"hdfs:///k2"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
literal|"/k1"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
literal|"k3"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|String
name|result1
init|=
name|explainToString
argument_list|(
name|explainMap1
argument_list|)
decl_stmt|;
name|String
name|result2
init|=
name|explainToString
argument_list|(
name|explainMap2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"both maps should be ordered, regardless of input order"
argument_list|,
name|result1
argument_list|,
name|result2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExplainDoesSortPathAsStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|explainMap1
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"/k1"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"k3"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"hdfs:/k2"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"hdfs:/k1"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|String
argument_list|>
name|explainMap2
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs:/k1"
argument_list|)
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs:/k2"
argument_list|)
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/k1"
argument_list|)
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
literal|"k3"
argument_list|)
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|String
name|result1
init|=
name|explainToString
argument_list|(
name|explainMap1
argument_list|)
decl_stmt|;
name|String
name|result2
init|=
name|explainToString
argument_list|(
name|explainMap2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"both maps should be sorted the same way"
argument_list|,
name|result1
argument_list|,
name|result2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExplainDoesSortMapValues
parameter_list|()
throws|throws
name|Exception
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|explainMap1Val
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|explainMap1Val
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap1Val
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|explainMap1
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|explainMap1
operator|.
name|put
argument_list|(
literal|"k"
argument_list|,
name|explainMap1Val
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|explainMap2Val
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|explainMap2Val
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|explainMap2Val
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|explainMap2
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|explainMap2
operator|.
name|put
argument_list|(
literal|"k"
argument_list|,
name|explainMap2Val
argument_list|)
expr_stmt|;
name|String
name|result1
init|=
name|explainToString
argument_list|(
name|explainMap1
argument_list|)
decl_stmt|;
name|String
name|result2
init|=
name|explainToString
argument_list|(
name|explainMap2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"both maps should be sorted the same way"
argument_list|,
name|result1
argument_list|,
name|result2
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|String
name|explainToString
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|explainMap
parameter_list|)
throws|throws
name|Exception
block|{
name|ExplainWork
name|work
init|=
operator|new
name|ExplainWork
argument_list|()
decl_stmt|;
name|ParseContext
name|pCtx
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|TableScanOperator
argument_list|>
name|topOps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TableScanOperator
name|scanOp
init|=
operator|new
name|DummyOperator
argument_list|(
operator|new
name|DummyExplainDesc
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|explainMap
argument_list|)
argument_list|)
decl_stmt|;
name|topOps
operator|.
name|put
argument_list|(
literal|"sample"
argument_list|,
name|scanOp
argument_list|)
expr_stmt|;
name|pCtx
operator|.
name|setTopOps
argument_list|(
name|topOps
argument_list|)
expr_stmt|;
name|work
operator|.
name|setParseContext
argument_list|(
name|pCtx
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|work
operator|.
name|setConfig
argument_list|(
operator|new
name|ExplainConfiguration
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|ExplainTask
argument_list|()
operator|.
name|getJSONLogicalPlan
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
argument_list|,
name|work
argument_list|)
expr_stmt|;
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

