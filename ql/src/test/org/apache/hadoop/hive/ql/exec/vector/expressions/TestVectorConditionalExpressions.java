begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IfExprDoubleColumnDoubleColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|IfExprLongColumnLongScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|IfExprLongScalarLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|IfExprLongScalarLongScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|IfExprDoubleScalarDoubleScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|IfExprDoubleScalarDoubleColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|IfExprDoubleColumnDoubleScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IfExprStringGroupColumnStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IfExprStringGroupColumnStringScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IfExprStringScalarStringGroupColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IfExprStringScalarStringScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test vectorized conditional expression handling.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorConditionalExpressions
block|{
specifier|private
name|VectorizedRowBatch
name|getBatch4LongVectors
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|LongColumnVector
name|v
init|=
operator|new
name|LongColumnVector
argument_list|()
decl_stmt|;
comment|// set first argument to IF -- boolean flag
name|v
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|2
index|]
operator|=
literal|1
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|3
index|]
operator|=
literal|1
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v
expr_stmt|;
comment|// set second argument to IF
name|v
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|0
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|1
index|]
operator|=
operator|-
literal|2
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|2
index|]
operator|=
operator|-
literal|3
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|3
index|]
operator|=
operator|-
literal|4
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|v
expr_stmt|;
comment|// set third argument to IF
name|v
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|1
index|]
operator|=
literal|2
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|2
index|]
operator|=
literal|3
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|3
index|]
operator|=
literal|4
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|v
expr_stmt|;
comment|// set output column
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|4
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|private
name|VectorizedRowBatch
name|getBatch1Long3DoubleVectors
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lv
init|=
operator|new
name|LongColumnVector
argument_list|()
decl_stmt|;
comment|// set first argument to IF -- boolean flag
name|lv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|lv
operator|.
name|vector
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|lv
operator|.
name|vector
index|[
literal|2
index|]
operator|=
literal|1
expr_stmt|;
name|lv
operator|.
name|vector
index|[
literal|3
index|]
operator|=
literal|1
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|lv
expr_stmt|;
comment|// set second argument to IF
name|DoubleColumnVector
name|v
init|=
operator|new
name|DoubleColumnVector
argument_list|()
decl_stmt|;
name|v
operator|.
name|vector
index|[
literal|0
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|1
index|]
operator|=
operator|-
literal|2
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|2
index|]
operator|=
operator|-
literal|3
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|3
index|]
operator|=
operator|-
literal|4
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|v
expr_stmt|;
comment|// set third argument to IF
name|v
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|1
index|]
operator|=
literal|2
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|2
index|]
operator|=
literal|3
expr_stmt|;
name|v
operator|.
name|vector
index|[
literal|3
index|]
operator|=
literal|4
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|v
expr_stmt|;
comment|// set output column
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|4
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|private
name|VectorizedRowBatch
name|getBatch1Long3BytesVectors
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lv
init|=
operator|new
name|LongColumnVector
argument_list|()
decl_stmt|;
comment|// set first argument to IF -- boolean flag
name|lv
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|lv
operator|.
name|vector
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|lv
operator|.
name|vector
index|[
literal|2
index|]
operator|=
literal|1
expr_stmt|;
name|lv
operator|.
name|vector
index|[
literal|3
index|]
operator|=
literal|1
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|lv
expr_stmt|;
comment|// set second argument to IF
name|BytesColumnVector
name|v
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|v
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
name|setString
argument_list|(
name|v
argument_list|,
literal|0
argument_list|,
literal|"arg2_0"
argument_list|)
expr_stmt|;
name|setString
argument_list|(
name|v
argument_list|,
literal|1
argument_list|,
literal|"arg2_1"
argument_list|)
expr_stmt|;
name|setString
argument_list|(
name|v
argument_list|,
literal|2
argument_list|,
literal|"arg2_2"
argument_list|)
expr_stmt|;
name|setString
argument_list|(
name|v
argument_list|,
literal|3
argument_list|,
literal|"arg2_3"
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|v
expr_stmt|;
comment|// set third argument to IF
name|v
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|v
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
name|setString
argument_list|(
name|v
argument_list|,
literal|0
argument_list|,
literal|"arg3_0"
argument_list|)
expr_stmt|;
name|setString
argument_list|(
name|v
argument_list|,
literal|1
argument_list|,
literal|"arg3_1"
argument_list|)
expr_stmt|;
name|setString
argument_list|(
name|v
argument_list|,
literal|2
argument_list|,
literal|"arg3_2"
argument_list|)
expr_stmt|;
name|setString
argument_list|(
name|v
argument_list|,
literal|3
argument_list|,
literal|"arg3_3"
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|v
expr_stmt|;
comment|// set output column
name|v
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|v
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|=
name|v
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|4
expr_stmt|;
return|return
name|batch
return|;
block|}
specifier|private
name|void
name|setString
parameter_list|(
name|BytesColumnVector
name|v
parameter_list|,
name|int
name|i
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
name|getUTF8Bytes
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|v
operator|.
name|setVal
argument_list|(
name|i
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|getUTF8Bytes
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
literal|null
decl_stmt|;
try|try
block|{
name|b
operator|=
name|s
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
empty_stmt|;
comment|// eat it
block|}
return|return
name|b
return|;
block|}
specifier|private
name|String
name|getString
parameter_list|(
name|BytesColumnVector
name|v
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|String
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
operator|new
name|String
argument_list|(
name|v
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|v
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|v
operator|.
name|length
index|[
name|i
index|]
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
empty_stmt|;
comment|// eat it
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColumnColumnIfExpr
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getBatch4LongVectors
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|IfExprLongColumnLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// get result vector
name|LongColumnVector
name|r
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
comment|// verify standard case
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3
argument_list|,
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|4
argument_list|,
name|r
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// verify when first argument (boolean flags) is repeating
name|batch
operator|=
name|getBatch4LongVectors
argument_list|()
expr_stmt|;
name|r
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|r
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// verify when second argument is repeating
name|batch
operator|=
name|getBatch4LongVectors
argument_list|()
expr_stmt|;
name|r
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// verify when third argument is repeating
name|batch
operator|=
name|getBatch4LongVectors
argument_list|()
expr_stmt|;
name|r
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3
argument_list|,
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|4
argument_list|,
name|r
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// test when first argument has nulls
name|batch
operator|=
name|getBatch4LongVectors
argument_list|()
expr_stmt|;
name|r
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|4
argument_list|,
name|r
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// test when second argument has nulls
name|batch
operator|=
name|getBatch4LongVectors
argument_list|()
expr_stmt|;
name|r
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|r
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|4
argument_list|,
name|r
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// test when third argument has nulls
name|batch
operator|=
name|getBatch4LongVectors
argument_list|()
expr_stmt|;
name|r
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|r
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3
argument_list|,
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|4
argument_list|,
name|r
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// test when second argument has nulls and repeats
name|batch
operator|=
name|getBatch4LongVectors
argument_list|()
expr_stmt|;
name|r
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|r
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|r
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// test when third argument has nulls and repeats
name|batch
operator|=
name|getBatch4LongVectors
argument_list|()
expr_stmt|;
name|r
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|r
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3
argument_list|,
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|4
argument_list|,
name|r
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|r
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColumnColumnIfExpr
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// Just spot check because we already checked the logic for long.
comment|// The code is from the same template file.
name|VectorizedRowBatch
name|batch
init|=
name|getBatch1Long3DoubleVectors
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|IfExprDoubleColumnDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// get result vector
name|DoubleColumnVector
name|r
init|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
comment|// verify standard case
name|assertEquals
argument_list|(
literal|true
argument_list|,
literal|1d
operator|==
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
literal|2d
operator|==
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|-
literal|3d
operator|==
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|-
literal|4d
operator|==
name|r
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColumnScalarIfExpr
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getBatch4LongVectors
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|IfExprLongColumnLongScalar
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|LongColumnVector
name|r
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3
argument_list|,
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|4
argument_list|,
name|r
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarColumnIfExpr
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getBatch4LongVectors
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|IfExprLongScalarLongColumn
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|LongColumnVector
name|r
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|r
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongScalarScalarIfExpr
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getBatch4LongVectors
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|IfExprLongScalarLongScalar
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|LongColumnVector
name|r
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|r
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarScalarIfExpr
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getBatch1Long3DoubleVectors
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|IfExprDoubleScalarDoubleScalar
argument_list|(
literal|0
argument_list|,
literal|100.0d
argument_list|,
literal|200.0d
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|r
init|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
literal|200d
operator|==
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
literal|200d
operator|==
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
literal|100d
operator|==
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
literal|100d
operator|==
name|r
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScalarColumnIfExpr
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getBatch1Long3DoubleVectors
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|IfExprDoubleScalarDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|100.0d
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|r
init|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
literal|1d
operator|==
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
literal|2d
operator|==
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
literal|100d
operator|==
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
literal|100d
operator|==
name|r
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColumnScalarIfExpr
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getBatch1Long3DoubleVectors
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|IfExprDoubleColumnDoubleScalar
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|200d
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|r
init|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
literal|200d
operator|==
name|r
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
literal|200d
operator|==
name|r
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|-
literal|3d
operator|==
name|r
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|-
literal|4d
operator|==
name|r
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfExprStringColumnStringColumn
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getBatch1Long3BytesVectors
argument_list|()
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|IfExprStringGroupColumnStringGroupColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|r
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg2_2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg2_3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test first IF argument repeating
name|batch
operator|=
name|getBatch1Long3BytesVectors
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|r
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test second IF argument repeating
name|batch
operator|=
name|getBatch1Long3BytesVectors
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|r
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg2_0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg2_0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test third IF argument repeating
name|batch
operator|=
name|getBatch1Long3BytesVectors
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|r
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg2_2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg2_3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test second IF argument with nulls
name|batch
operator|=
name|getBatch1Long3BytesVectors
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
comment|// set vector[2] to null to verify correct null handling
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|vector
index|[
literal|2
index|]
operator|=
literal|null
expr_stmt|;
name|r
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
operator|&&
name|r
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg2_3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
operator|||
name|r
operator|.
name|isNull
index|[
literal|1
index|]
operator|||
name|r
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// test third IF argument with nulls
name|batch
operator|=
name|getBatch1Long3BytesVectors
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
comment|// set vector[0] to null object reference to verify correct null handling
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
name|r
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
operator|&&
name|r
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg2_2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg2_3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|1
index|]
operator|||
name|r
operator|.
name|isNull
index|[
literal|2
index|]
operator|||
name|r
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// test second IF argument with nulls and repeating
name|batch
operator|=
name|getBatch1Long3BytesVectors
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|r
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
operator|&&
name|r
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
operator|&&
name|r
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|isNull
index|[
literal|0
index|]
operator|||
name|r
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfExprStringColumnStringScalar
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getBatch1Long3BytesVectors
argument_list|()
decl_stmt|;
name|byte
index|[]
name|scalar
init|=
name|getUTF8Bytes
argument_list|(
literal|"scalar"
argument_list|)
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|IfExprStringGroupColumnStringScalar
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|scalar
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|r
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"scalar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"scalar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg2_2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg2_3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test for null input strings
name|batch
operator|=
name|getBatch1Long3BytesVectors
argument_list|()
expr_stmt|;
name|BytesColumnVector
name|arg2
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|arg2
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|arg2
operator|.
name|isNull
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|arg2
operator|.
name|vector
index|[
literal|2
index|]
operator|=
literal|null
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
operator|&&
name|r
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfExprStringScalarStringColumn
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getBatch1Long3BytesVectors
argument_list|()
decl_stmt|;
name|byte
index|[]
name|scalar
init|=
name|getUTF8Bytes
argument_list|(
literal|"scalar"
argument_list|)
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|IfExprStringScalarStringGroupColumn
argument_list|(
literal|0
argument_list|,
name|scalar
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|r
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"arg3_1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
literal|"scalar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
literal|"scalar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test for null input strings
name|batch
operator|=
name|getBatch1Long3BytesVectors
argument_list|()
expr_stmt|;
name|BytesColumnVector
name|arg3
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|arg3
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|arg3
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
name|arg3
operator|.
name|vector
index|[
literal|1
index|]
operator|=
literal|null
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|noNulls
operator|&&
name|r
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfExprStringScalarStringScalar
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// standard case
name|VectorizedRowBatch
name|batch
init|=
name|getBatch1Long3BytesVectors
argument_list|()
decl_stmt|;
name|byte
index|[]
name|scalar1
init|=
name|getUTF8Bytes
argument_list|(
literal|"scalar1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|scalar2
init|=
name|getUTF8Bytes
argument_list|(
literal|"scalar2"
argument_list|)
decl_stmt|;
name|VectorExpression
name|expr
init|=
operator|new
name|IfExprStringScalarStringScalar
argument_list|(
literal|0
argument_list|,
name|scalar1
argument_list|,
name|scalar2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|BytesColumnVector
name|r
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"scalar2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"scalar2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
literal|"scalar1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
literal|"scalar1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// repeating case for first (boolean flag) argument to IF
name|batch
operator|=
name|getBatch1Long3BytesVectors
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getString
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"scalar2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

