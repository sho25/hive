begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExpressionDescriptor
operator|.
name|Descriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** * Unit tests for logical expressions AND, OR, NOT, IsNull etc. */
end_comment

begin_class
specifier|public
class|class
name|TestVectorLogicalExpressions
block|{
specifier|private
specifier|static
specifier|final
name|int
name|BOOLEAN_COLUMN_TEST_SIZE
init|=
literal|9
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testLongColOrLongCol
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|ColOrCol
name|expr
init|=
operator|new
name|ColOrCol
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outCol
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// verify
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|size
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// try non-null path
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outCol
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// spot check
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// try isRepeating path (left input only), no nulls
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outCol
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// spot check
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAndLongCol
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|ColAndCol
name|expr
init|=
operator|new
name|ColAndCol
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outCol
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// verify
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|batch
operator|.
name|size
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// try non-null path
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outCol
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// spot check
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// try isRepeating path (left input only), no nulls
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outCol
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// spot check
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a batch with three boolean (long) columns.    */
specifier|private
name|VectorizedRowBatch
name|getBatchThreeBooleanCols
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|LongColumnVector
name|v0
decl_stmt|,
name|v1
decl_stmt|,
name|v2
decl_stmt|;
name|v0
operator|=
operator|new
name|LongColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|v1
operator|=
operator|new
name|LongColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|v2
operator|=
operator|new
name|LongColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|v0
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|v1
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|v2
expr_stmt|;
comment|// add some data and nulls
name|int
name|i
decl_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
name|v0
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|v0
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|v1
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|v1
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
comment|// 0 0
name|i
operator|=
literal|1
expr_stmt|;
name|v0
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|v0
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|v1
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
name|v1
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
comment|// 0 1
name|i
operator|=
literal|2
expr_stmt|;
name|v0
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
name|v0
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|v1
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|v1
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
comment|// 1 0
name|i
operator|=
literal|3
expr_stmt|;
name|v0
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
name|v0
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|v1
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
name|v1
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
comment|// 1 1
name|i
operator|=
literal|4
expr_stmt|;
name|v0
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|v0
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|v1
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|v1
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
comment|// NULL 0
name|i
operator|=
literal|5
expr_stmt|;
name|v0
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|v0
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|v1
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
name|v1
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
comment|// NULL 1
name|i
operator|=
literal|6
expr_stmt|;
name|v0
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|v0
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|v1
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|v1
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
comment|// 0 NULL
name|i
operator|=
literal|7
expr_stmt|;
name|v0
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
name|v0
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|v1
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
name|v1
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
comment|// 1 NULL
name|i
operator|=
literal|8
expr_stmt|;
name|v0
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
name|v0
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|v1
operator|.
name|vector
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
name|v1
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
comment|// NULL NULL
name|v0
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|v1
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|v0
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|v1
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|v2
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// this value should get over-written with correct value
name|v2
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
comment|// ditto
name|batch
operator|.
name|size
operator|=
name|BOOLEAN_COLUMN_TEST_SIZE
expr_stmt|;
return|return
name|batch
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBooleanNot
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|NotCol
name|expr
init|=
operator|new
name|NotCol
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outCol
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// Case with nulls
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// No nulls case
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// isRepeating, and there are nulls
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
name|outCol
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// isRepeating, and no nulls
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
name|outCol
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsNullExpr
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|IsNull
name|expr
init|=
operator|new
name|IsNull
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outCol
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// No nulls case, not repeating
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// isRepeating, and there are nulls
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
name|outCol
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// isRepeating, and no nulls
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
name|outCol
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsNotNullExpr
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|IsNotNull
name|expr
init|=
operator|new
name|IsNotNull
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outCol
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// No nulls case, not repeating
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// isRepeating, and there are nulls
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
name|outCol
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// isRepeating, and no nulls
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
name|outCol
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|outCol
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outCol
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBooleanFiltersOnColumns
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|SelectColumnIsTrue
name|expr
init|=
operator|new
name|SelectColumnIsTrue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
name|SelectColumnIsFalse
name|expr1
init|=
operator|new
name|SelectColumnIsFalse
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|expr1
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectColumnIsNull
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|SelectColumnIsNull
name|expr
init|=
operator|new
name|SelectColumnIsNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// No nulls case, not repeating
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// isRepeating, and there are nulls
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|int
name|initialSize
init|=
name|batch
operator|.
name|size
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// isRepeating, and no nulls
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectColumnIsNotNull
parameter_list|()
block|{
comment|// has nulls, not repeating
name|VectorizedRowBatch
name|batch
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|SelectColumnIsNotNull
name|expr
init|=
operator|new
name|SelectColumnIsNotNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|batch
operator|.
name|selected
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// No nulls case, not repeating
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|int
name|initialSize
init|=
name|batch
operator|.
name|size
decl_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// isRepeating, and there are nulls
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// isRepeating, and no nulls
name|batch
operator|=
name|getBatchThreeBooleanCols
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|initialSize
operator|=
name|batch
operator|.
name|size
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
comment|// A do nothing vectorized expression that passes all rows through.
specifier|public
class|class
name|SelectColumnAll
extends|extends
name|VectorExpression
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|colNum1
decl_stmt|;
specifier|public
name|SelectColumnAll
parameter_list|(
name|int
name|colNum1
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|colNum1
operator|=
name|colNum1
expr_stmt|;
block|}
specifier|public
name|SelectColumnAll
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
if|if
condition|(
name|childExpressions
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|evaluateChildren
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
comment|// Do nothing.
block|}
annotation|@
name|Override
specifier|public
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|vectorExpressionParameters
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
comment|// A vectorized expression that we don't expect will be called due to short-circuit evaluation.
specifier|public
class|class
name|SelectColumnNotExpected
extends|extends
name|VectorExpression
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|colNum1
decl_stmt|;
specifier|public
name|SelectColumnNotExpected
parameter_list|(
name|int
name|colNum1
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|colNum1
operator|=
name|colNum1
expr_stmt|;
block|}
specifier|public
name|SelectColumnNotExpected
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
if|if
condition|(
name|childExpressions
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|evaluateChildren
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|vectorExpressionParameters
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
comment|// A vectorized expression that selects no rows.
specifier|public
class|class
name|SelectColumnNothing
extends|extends
name|VectorExpression
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|colNum1
decl_stmt|;
specifier|public
name|SelectColumnNothing
parameter_list|(
name|int
name|colNum1
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|colNum1
operator|=
name|colNum1
expr_stmt|;
block|}
specifier|public
name|SelectColumnNothing
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
if|if
condition|(
name|childExpressions
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|evaluateChildren
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|size
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|vectorExpressionParameters
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
comment|// A vectorized expression that selects no rows.
specifier|public
class|class
name|SelectColumnOne
extends|extends
name|VectorExpression
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|colNum1
decl_stmt|;
specifier|private
name|int
name|batchIndex
decl_stmt|;
specifier|public
name|SelectColumnOne
parameter_list|(
name|int
name|colNum1
parameter_list|,
name|int
name|batchIndex
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|colNum1
operator|=
name|colNum1
expr_stmt|;
name|this
operator|.
name|batchIndex
operator|=
name|batchIndex
expr_stmt|;
block|}
specifier|public
name|SelectColumnOne
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
if|if
condition|(
name|childExpressions
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|evaluateChildren
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|selected
index|[
literal|0
index|]
operator|=
name|batchIndex
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|vectorExpressionParameters
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterExprOrExpr
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch1
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|VectorizedRowBatch
name|batch2
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|SelectColumnIsTrue
name|expr1
init|=
operator|new
name|SelectColumnIsTrue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SelectColumnIsFalse
name|expr2
init|=
operator|new
name|SelectColumnIsFalse
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|FilterExprOrExpr
name|orExpr
init|=
operator|new
name|FilterExprOrExpr
argument_list|()
decl_stmt|;
name|orExpr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|expr1
block|,
name|expr2
block|}
argument_list|)
expr_stmt|;
name|orExpr
operator|.
name|evaluate
argument_list|(
name|batch1
argument_list|)
expr_stmt|;
name|orExpr
operator|.
name|evaluate
argument_list|(
name|batch2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|batch1
operator|.
name|size
argument_list|,
name|batch2
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|batch1
operator|.
name|size
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|batch1
operator|.
name|selected
index|[
name|j
index|]
argument_list|,
name|batch2
operator|.
name|selected
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|j
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch1
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
operator|)
argument_list|,
operator|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch2
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|i
index|]
operator|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|batch1
operator|.
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Repeat the expression on the same batch,
comment|// the result must be unchanged.
name|orExpr
operator|.
name|evaluate
argument_list|(
name|batch1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|batch1
operator|.
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterExprMultiOrExpr
parameter_list|()
block|{
comment|// Select all with the first expression and expect the other 2 children to not be invoked.
name|VectorizedRowBatch
name|batch1a
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|SelectColumnAll
name|expr1a
init|=
operator|new
name|SelectColumnAll
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SelectColumnNotExpected
name|expr2a
init|=
operator|new
name|SelectColumnNotExpected
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|SelectColumnNotExpected
name|expr3a
init|=
operator|new
name|SelectColumnNotExpected
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|FilterExprOrExpr
name|orExpr
init|=
operator|new
name|FilterExprOrExpr
argument_list|()
decl_stmt|;
name|orExpr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|expr1a
block|,
name|expr2a
block|,
name|expr3a
block|}
argument_list|)
expr_stmt|;
name|orExpr
operator|.
name|evaluate
argument_list|(
name|batch1a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BOOLEAN_COLUMN_TEST_SIZE
argument_list|,
name|batch1a
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BOOLEAN_COLUMN_TEST_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|batch1a
operator|.
name|selected
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Select all with the is null and is not null as 2 child expressions, and then
comment|// expect the 3rd child to not be invoked.
name|VectorizedRowBatch
name|batch1b
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|SelectColumnIsNotNull
name|expr1b
init|=
operator|new
name|SelectColumnIsNotNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SelectColumnIsNull
name|expr2b
init|=
operator|new
name|SelectColumnIsNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SelectColumnNotExpected
name|expr3b
init|=
operator|new
name|SelectColumnNotExpected
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FilterExprOrExpr
name|orExpr2
init|=
operator|new
name|FilterExprOrExpr
argument_list|()
decl_stmt|;
name|orExpr2
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|expr1b
block|,
name|expr2b
block|,
name|expr3b
block|}
argument_list|)
expr_stmt|;
name|orExpr2
operator|.
name|evaluate
argument_list|(
name|batch1b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BOOLEAN_COLUMN_TEST_SIZE
argument_list|,
name|batch1b
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BOOLEAN_COLUMN_TEST_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|batch1b
operator|.
name|selected
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Select all with a is not null child, none as 2nd child, and is null with 3rd, and then
comment|// expect the 3rd child to not be invoked.
name|VectorizedRowBatch
name|batch1c
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|SelectColumnIsNotNull
name|expr1c
init|=
operator|new
name|SelectColumnIsNotNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SelectColumnNothing
name|expr2c
init|=
operator|new
name|SelectColumnNothing
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SelectColumnIsNull
name|expr3c
init|=
operator|new
name|SelectColumnIsNull
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SelectColumnNotExpected
name|expr4c
init|=
operator|new
name|SelectColumnNotExpected
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FilterExprOrExpr
name|orExpr3
init|=
operator|new
name|FilterExprOrExpr
argument_list|()
decl_stmt|;
name|orExpr3
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|expr1c
block|,
name|expr2c
block|,
name|expr3c
block|,
name|expr4c
block|}
argument_list|)
expr_stmt|;
name|orExpr3
operator|.
name|evaluate
argument_list|(
name|batch1c
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BOOLEAN_COLUMN_TEST_SIZE
argument_list|,
name|batch1c
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BOOLEAN_COLUMN_TEST_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|batch1c
operator|.
name|selected
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Select true fields child, none as 2nd child, and none as 3rd.
name|VectorizedRowBatch
name|batch1d
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|SelectColumnIsTrue
name|expr1d
init|=
operator|new
name|SelectColumnIsTrue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SelectColumnNothing
name|expr2d
init|=
operator|new
name|SelectColumnNothing
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SelectColumnNothing
name|expr3d
init|=
operator|new
name|SelectColumnNothing
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FilterExprOrExpr
name|orExpr4
init|=
operator|new
name|FilterExprOrExpr
argument_list|()
decl_stmt|;
name|orExpr4
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|expr1d
block|,
name|expr3d
block|,
name|expr3d
block|}
argument_list|)
expr_stmt|;
name|orExpr4
operator|.
name|evaluate
argument_list|(
name|batch1d
argument_list|)
expr_stmt|;
name|int
index|[]
name|expected4
init|=
block|{
literal|2
block|,
literal|3
block|,
literal|7
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|expected4
operator|.
name|length
argument_list|,
name|batch1d
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected4
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected4
index|[
name|i
index|]
argument_list|,
name|batch1d
operator|.
name|selected
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Select none in 1st child, none as 2nd child, and none as 3rd.
name|VectorizedRowBatch
name|batch1e
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|SelectColumnNothing
name|expr1e
init|=
operator|new
name|SelectColumnNothing
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SelectColumnNothing
name|expr2e
init|=
operator|new
name|SelectColumnNothing
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SelectColumnNothing
name|expr3e
init|=
operator|new
name|SelectColumnNothing
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FilterExprOrExpr
name|orExpr5
init|=
operator|new
name|FilterExprOrExpr
argument_list|()
decl_stmt|;
name|orExpr5
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|expr1e
block|,
name|expr2e
block|,
name|expr3e
block|}
argument_list|)
expr_stmt|;
name|orExpr5
operator|.
name|evaluate
argument_list|(
name|batch1e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch1e
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// Select one in 1st child, none as 2nd child, and none as 3rd.
name|VectorizedRowBatch
name|batch1f
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|SelectColumnOne
name|expr1f
init|=
operator|new
name|SelectColumnOne
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|SelectColumnNothing
name|expr2f
init|=
operator|new
name|SelectColumnNothing
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SelectColumnNothing
name|expr3f
init|=
operator|new
name|SelectColumnNothing
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FilterExprOrExpr
name|orExpr6
init|=
operator|new
name|FilterExprOrExpr
argument_list|()
decl_stmt|;
name|orExpr6
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|expr1f
block|,
name|expr2f
block|,
name|expr3f
block|}
argument_list|)
expr_stmt|;
name|orExpr6
operator|.
name|evaluate
argument_list|(
name|batch1f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch1f
operator|.
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|batch1f
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Select none in 1st child, one as 2nd child, and none as 3rd.
name|VectorizedRowBatch
name|batch1g
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|SelectColumnNothing
name|expr1g
init|=
operator|new
name|SelectColumnNothing
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SelectColumnOne
name|expr2g
init|=
operator|new
name|SelectColumnOne
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|SelectColumnNothing
name|expr3g
init|=
operator|new
name|SelectColumnNothing
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FilterExprOrExpr
name|orExpr7
init|=
operator|new
name|FilterExprOrExpr
argument_list|()
decl_stmt|;
name|orExpr7
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|expr1g
block|,
name|expr2g
block|,
name|expr3g
block|}
argument_list|)
expr_stmt|;
name|orExpr7
operator|.
name|evaluate
argument_list|(
name|batch1g
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch1g
operator|.
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|batch1g
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterExprOrExprWithBatchReuse
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch1
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|SelectColumnIsTrue
name|expr1
init|=
operator|new
name|SelectColumnIsTrue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SelectColumnIsFalse
name|expr2
init|=
operator|new
name|SelectColumnIsFalse
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|FilterExprOrExpr
name|orExpr
init|=
operator|new
name|FilterExprOrExpr
argument_list|()
decl_stmt|;
name|orExpr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|expr1
block|,
name|expr2
block|}
argument_list|)
expr_stmt|;
name|orExpr
operator|.
name|evaluate
argument_list|(
name|batch1
argument_list|)
expr_stmt|;
comment|// Now re-initialize batch1 to simulate batch-object re-use.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|batch1
operator|.
name|selected
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|batch1
operator|.
name|size
operator|=
name|BOOLEAN_COLUMN_TEST_SIZE
expr_stmt|;
name|batch1
operator|.
name|selectedInUse
operator|=
literal|false
expr_stmt|;
comment|// Swap column vectors to simulate change in data
name|ColumnVector
name|tmp
init|=
name|batch1
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|batch1
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|batch1
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|batch1
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|tmp
expr_stmt|;
name|orExpr
operator|.
name|evaluate
argument_list|(
name|batch1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|batch1
operator|.
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterExprOrExprWithSelectInUse
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch1
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|SelectColumnIsTrue
name|expr1
init|=
operator|new
name|SelectColumnIsTrue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SelectColumnIsFalse
name|expr2
init|=
operator|new
name|SelectColumnIsFalse
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|FilterExprOrExpr
name|orExpr
init|=
operator|new
name|FilterExprOrExpr
argument_list|()
decl_stmt|;
name|orExpr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|expr1
block|,
name|expr2
block|}
argument_list|)
expr_stmt|;
comment|// Evaluate batch1 so that temporary arrays in the expression
comment|// have residual values to interfere in later computation
name|orExpr
operator|.
name|evaluate
argument_list|(
name|batch1
argument_list|)
expr_stmt|;
comment|// Swap column vectors, but keep selected vector unchanged
name|ColumnVector
name|tmp
init|=
name|batch1
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|batch1
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|batch1
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|batch1
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|tmp
expr_stmt|;
comment|// Make sure row-7 is in the output.
name|batch1
operator|.
name|cols
index|[
literal|1
index|]
operator|.
name|isNull
index|[
literal|7
index|]
operator|=
literal|false
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch1
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|vector
index|[
literal|7
index|]
operator|=
literal|0
expr_stmt|;
name|orExpr
operator|.
name|evaluate
argument_list|(
name|batch1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch1
operator|.
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterExprAndExpr
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch1
init|=
name|getBatchThreeBooleanCols
argument_list|()
decl_stmt|;
name|SelectColumnIsTrue
name|expr1
init|=
operator|new
name|SelectColumnIsTrue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SelectColumnIsFalse
name|expr2
init|=
operator|new
name|SelectColumnIsFalse
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|FilterExprAndExpr
name|andExpr
init|=
operator|new
name|FilterExprAndExpr
argument_list|()
decl_stmt|;
name|andExpr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|expr1
block|,
name|expr2
block|}
argument_list|)
expr_stmt|;
name|andExpr
operator|.
name|evaluate
argument_list|(
name|batch1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch1
operator|.
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|batch1
operator|.
name|selected
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongInExpr
parameter_list|()
block|{
comment|// check basic operation
name|VectorizedRowBatch
name|b
init|=
name|TestVectorMathFunctions
operator|.
name|getVectorizedRowBatchLongInLongOut
argument_list|()
decl_stmt|;
name|LongColumnVector
name|outV
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|long
index|[]
name|inVals
init|=
operator|new
name|long
index|[
literal|2
index|]
decl_stmt|;
name|inVals
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|inVals
index|[
literal|1
index|]
operator|=
operator|-
literal|2
expr_stmt|;
name|LongColumnInList
name|expr
init|=
operator|new
name|LongColumnInList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|setInListValues
argument_list|(
name|inVals
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// check null handling
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|!
name|outV
operator|.
name|noNulls
operator|&&
name|outV
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// check isRepeating handling
name|b
operator|=
name|TestVectorMathFunctions
operator|.
name|getVectorizedRowBatchLongInLongOut
argument_list|()
expr_stmt|;
name|outV
operator|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outV
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleInExpr
parameter_list|()
block|{
comment|// check basic operation
name|VectorizedRowBatch
name|b
init|=
name|TestVectorMathFunctions
operator|.
name|getVectorizedRowBatchDoubleInLongOut
argument_list|()
decl_stmt|;
name|LongColumnVector
name|outV
init|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|double
index|[]
name|inVals
init|=
operator|new
name|double
index|[
literal|2
index|]
decl_stmt|;
name|inVals
index|[
literal|0
index|]
operator|=
operator|-
literal|1.5d
expr_stmt|;
name|inVals
index|[
literal|1
index|]
operator|=
literal|30d
expr_stmt|;
name|b
operator|.
name|size
operator|=
literal|2
expr_stmt|;
name|DoubleColumnInList
name|expr
init|=
operator|new
name|DoubleColumnInList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expr
operator|.
name|setInListValues
argument_list|(
name|inVals
argument_list|)
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// check null handling
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|!
name|outV
operator|.
name|noNulls
operator|&&
name|outV
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// check isRepeating handling
name|b
operator|=
name|TestVectorMathFunctions
operator|.
name|getVectorizedRowBatchDoubleInLongOut
argument_list|()
expr_stmt|;
name|outV
operator|=
operator|(
name|LongColumnVector
operator|)
name|b
operator|.
name|cols
index|[
literal|1
index|]
expr_stmt|;
name|b
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|expr
operator|.
name|evaluate
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outV
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outV
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

