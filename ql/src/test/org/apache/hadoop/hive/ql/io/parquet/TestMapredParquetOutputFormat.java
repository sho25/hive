begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|write
operator|.
name|DataWritableWriteSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|write
operator|.
name|ParquetRecordWriterWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ArrayWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|hadoop
operator|.
name|ParquetOutputFormat
import|;
end_import

begin_class
specifier|public
class|class
name|TestMapredParquetOutputFormat
block|{
annotation|@
name|Test
specifier|public
name|void
name|testConstructor
parameter_list|()
block|{
operator|new
name|MapredParquetOutputFormat
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testConstructorWithFormat
parameter_list|()
block|{
operator|new
name|MapredParquetOutputFormat
argument_list|(
operator|(
name|ParquetOutputFormat
argument_list|<
name|ArrayWritable
argument_list|>
operator|)
name|mock
argument_list|(
name|ParquetOutputFormat
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRecordWriterThrowsException
parameter_list|()
block|{
try|try
block|{
operator|new
name|MapredParquetOutputFormat
argument_list|()
operator|.
name|getRecordWriter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw runtime exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Should never be used"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testGetHiveRecordWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|Properties
name|tableProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tableProps
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"foo,bar"
argument_list|)
expr_stmt|;
name|tableProps
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"int:int"
argument_list|)
expr_stmt|;
specifier|final
name|Progressable
name|mockProgress
init|=
name|mock
argument_list|(
name|Progressable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ParquetOutputFormat
argument_list|<
name|ArrayWritable
argument_list|>
name|outputFormat
init|=
operator|(
name|ParquetOutputFormat
argument_list|<
name|ArrayWritable
argument_list|>
operator|)
name|mock
argument_list|(
name|ParquetOutputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
try|try
block|{
operator|new
name|MapredParquetOutputFormat
argument_list|(
name|outputFormat
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ParquetRecordWriterWrapper
name|getParquerRecordWriterWrapper
parameter_list|(
name|ParquetOutputFormat
argument_list|<
name|ArrayWritable
argument_list|>
name|realOutputFormat
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|String
name|finalOutPath
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|Properties
name|tableProperties
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|outputFormat
argument_list|,
name|realOutputFormat
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|DataWritableWriteSupport
operator|.
name|PARQUET_HIVE_SCHEMA
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo"
argument_list|,
name|finalOutPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mockProgress
argument_list|,
name|progress
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"passed tests"
argument_list|)
throw|;
block|}
block|}
operator|.
name|getHiveRecordWriter
argument_list|(
name|jobConf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|tableProps
argument_list|,
name|mockProgress
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw runtime exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"passed tests"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidCompressionTableProperties
parameter_list|()
throws|throws
name|IOException
block|{
name|Properties
name|tableProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tableProps
operator|.
name|setProperty
argument_list|(
literal|"parquet.compression"
argument_list|,
literal|"unsupported"
argument_list|)
expr_stmt|;
name|tableProps
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"foo,bar"
argument_list|)
expr_stmt|;
name|tableProps
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"int:int"
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
operator|new
name|MapredParquetOutputFormat
argument_list|()
operator|.
name|getHiveRecordWriter
argument_list|(
name|jobConf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|tableProps
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

