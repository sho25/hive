begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|rowobjects
operator|.
name|RowTestObjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExtractRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorRandomBatchSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorRandomRowSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorRandomRowSource
operator|.
name|GenerationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedBatchUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|MapJoinTestDescription
operator|.
name|SmallTableGenerationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|MapJoinTestDescription
operator|.
name|SmallTableGenerationParameters
operator|.
name|ValueOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|VectorMapJoinVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_class
specifier|public
class|class
name|MapJoinTestData
block|{
specifier|final
name|Random
name|random
decl_stmt|;
specifier|final
name|List
argument_list|<
name|GenerationSpec
argument_list|>
name|generationSpecList
decl_stmt|;
specifier|final
name|VectorRandomRowSource
name|bigTableRowSource
decl_stmt|;
specifier|final
name|Object
index|[]
index|[]
name|bigTableRandomRows
decl_stmt|;
specifier|final
name|VectorRandomBatchSource
name|bigTableBatchSource
decl_stmt|;
specifier|public
specifier|final
name|VectorizedRowBatch
name|bigTableBatch
decl_stmt|;
specifier|final
name|SmallTableGenerationParameters
name|smallTableGenerationParameters
decl_stmt|;
name|HashMap
argument_list|<
name|RowTestObjects
argument_list|,
name|Integer
argument_list|>
name|smallTableKeyHashMap
decl_stmt|;
name|List
argument_list|<
name|RowTestObjects
argument_list|>
name|fullOuterAdditionalSmallTableKeys
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|smallTableValueCounts
decl_stmt|;
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|RowTestObjects
argument_list|>
argument_list|>
name|smallTableValues
decl_stmt|;
specifier|public
name|MapJoinTestData
parameter_list|(
name|int
name|rowCount
parameter_list|,
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|long
name|randomSeed
parameter_list|)
throws|throws
name|HiveException
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
name|randomSeed
argument_list|)
expr_stmt|;
name|boolean
name|isOuterJoin
init|=
operator|(
name|testDesc
operator|.
name|vectorMapJoinVariation
operator|==
name|VectorMapJoinVariation
operator|.
name|OUTER
operator|||
name|testDesc
operator|.
name|vectorMapJoinVariation
operator|==
name|VectorMapJoinVariation
operator|.
name|FULL_OUTER
operator|)
decl_stmt|;
name|generationSpecList
operator|=
name|generationSpecListFromTypeInfos
argument_list|(
name|testDesc
operator|.
name|bigTableTypeInfos
argument_list|,
name|testDesc
operator|.
name|bigTableKeyColumnNums
operator|.
name|length
argument_list|,
name|isOuterJoin
argument_list|)
expr_stmt|;
name|bigTableRowSource
operator|=
operator|new
name|VectorRandomRowSource
argument_list|()
expr_stmt|;
name|bigTableRowSource
operator|.
name|initGenerationSpecSchema
argument_list|(
name|random
argument_list|,
name|generationSpecList
argument_list|,
comment|/* maxComplexDepth */
literal|0
argument_list|,
comment|/* allowNull */
literal|true
argument_list|,
comment|/* isUnicodeOk */
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// UNDONE: 100000
name|bigTableRandomRows
operator|=
name|bigTableRowSource
operator|.
name|randomRows
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|bigTableBatchSource
operator|=
name|VectorRandomBatchSource
operator|.
name|createInterestingBatches
argument_list|(
name|random
argument_list|,
name|bigTableRowSource
argument_list|,
name|bigTableRandomRows
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|bigTableBatch
operator|=
name|createBigTableBatch
argument_list|(
name|testDesc
argument_list|)
expr_stmt|;
comment|// Add small table result columns.
comment|// Only [FULL] OUTER MapJoin needs a physical column.
specifier|final
name|int
name|smallTableRetainKeySize
init|=
operator|(
name|isOuterJoin
condition|?
name|testDesc
operator|.
name|smallTableRetainKeyColumnNums
operator|.
name|length
else|:
literal|0
operator|)
decl_stmt|;
name|ColumnVector
index|[]
name|newCols
init|=
operator|new
name|ColumnVector
index|[
name|bigTableBatch
operator|.
name|cols
operator|.
name|length
operator|+
name|smallTableRetainKeySize
operator|+
name|testDesc
operator|.
name|smallTableValueTypeInfos
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bigTableBatch
operator|.
name|cols
argument_list|,
literal|0
argument_list|,
name|newCols
argument_list|,
literal|0
argument_list|,
name|bigTableBatch
operator|.
name|cols
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|colIndex
init|=
name|bigTableBatch
operator|.
name|cols
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|isOuterJoin
condition|)
block|{
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|smallTableRetainKeySize
condition|;
name|s
operator|++
control|)
block|{
specifier|final
name|int
name|smallTableKeyColumnNum
init|=
name|testDesc
operator|.
name|smallTableRetainKeyColumnNums
index|[
name|s
index|]
decl_stmt|;
name|newCols
index|[
name|colIndex
operator|++
index|]
operator|=
name|VectorizedBatchUtil
operator|.
name|createColumnVector
argument_list|(
name|testDesc
operator|.
name|smallTableKeyTypeInfos
index|[
name|smallTableKeyColumnNum
index|]
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|testDesc
operator|.
name|smallTableValueTypeInfos
operator|.
name|length
condition|;
name|s
operator|++
control|)
block|{
name|newCols
index|[
name|colIndex
operator|++
index|]
operator|=
name|VectorizedBatchUtil
operator|.
name|createColumnVector
argument_list|(
name|testDesc
operator|.
name|smallTableValueTypeInfos
index|[
name|s
index|]
argument_list|)
expr_stmt|;
block|}
name|bigTableBatch
operator|.
name|cols
operator|=
name|newCols
expr_stmt|;
name|bigTableBatch
operator|.
name|numCols
operator|=
name|newCols
operator|.
name|length
expr_stmt|;
name|VectorExtractRow
name|keyVectorExtractRow
init|=
operator|new
name|VectorExtractRow
argument_list|()
decl_stmt|;
name|keyVectorExtractRow
operator|.
name|init
argument_list|(
name|testDesc
operator|.
name|bigTableKeyTypeInfos
argument_list|,
name|testDesc
operator|.
name|bigTableKeyColumnNums
argument_list|)
expr_stmt|;
name|smallTableGenerationParameters
operator|=
name|testDesc
operator|.
name|getSmallTableGenerationParameters
argument_list|()
expr_stmt|;
name|HashMap
argument_list|<
name|RowTestObjects
argument_list|,
name|Integer
argument_list|>
name|bigTableKeyHashMap
init|=
operator|new
name|HashMap
argument_list|<
name|RowTestObjects
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|smallTableKeyHashMap
operator|=
operator|new
name|HashMap
argument_list|<
name|RowTestObjects
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|ValueOption
name|valueOption
init|=
name|smallTableGenerationParameters
operator|.
name|getValueOption
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueOption
operator|!=
name|ValueOption
operator|.
name|NO_REGULAR_SMALL_KEYS
condition|)
block|{
name|int
name|keyOutOfAThousand
init|=
name|smallTableGenerationParameters
operator|.
name|getKeyOutOfAThousand
argument_list|()
decl_stmt|;
name|bigTableBatchSource
operator|.
name|resetBatchIteration
argument_list|()
expr_stmt|;
while|while
condition|(
name|bigTableBatchSource
operator|.
name|fillNextBatch
argument_list|(
name|bigTableBatch
argument_list|)
condition|)
block|{
specifier|final
name|int
name|size
init|=
name|bigTableBatch
operator|.
name|size
decl_stmt|;
for|for
control|(
name|int
name|logical
init|=
literal|0
init|;
name|logical
operator|<
name|size
condition|;
name|logical
operator|++
control|)
block|{
specifier|final
name|int
name|batchIndex
init|=
operator|(
name|bigTableBatch
operator|.
name|selectedInUse
condition|?
name|bigTableBatch
operator|.
name|selected
index|[
name|logical
index|]
else|:
name|logical
operator|)
decl_stmt|;
name|RowTestObjects
name|testKey
init|=
name|getTestKey
argument_list|(
name|bigTableBatch
argument_list|,
name|batchIndex
argument_list|,
name|keyVectorExtractRow
argument_list|,
name|testDesc
operator|.
name|bigTableKeyTypeInfos
operator|.
name|length
argument_list|,
name|testDesc
operator|.
name|bigTableObjectInspectors
argument_list|)
decl_stmt|;
name|bigTableKeyHashMap
operator|.
name|put
argument_list|(
operator|(
name|RowTestObjects
operator|)
name|testKey
operator|.
name|clone
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
operator|<=
name|keyOutOfAThousand
condition|)
block|{
if|if
condition|(
name|valueOption
operator|==
name|ValueOption
operator|.
name|ONLY_ONE
condition|)
block|{
if|if
condition|(
name|smallTableKeyHashMap
operator|.
name|containsKey
argument_list|(
name|testKey
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|smallTableKeyHashMap
operator|.
name|put
argument_list|(
operator|(
name|RowTestObjects
operator|)
name|testKey
operator|.
name|clone
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//---------------------------------------------------------------------------------------------
comment|// Add more small table keys that are not in Big Table or Small Table for FULL OUTER.
name|fullOuterAdditionalSmallTableKeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|RowTestObjects
argument_list|>
argument_list|()
expr_stmt|;
name|VectorRandomRowSource
name|altBigTableRowSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|altBigTableRowSource
operator|.
name|initGenerationSpecSchema
argument_list|(
name|random
argument_list|,
name|generationSpecList
argument_list|,
comment|/* maxComplexDepth */
literal|0
argument_list|,
comment|/* allowNull */
literal|true
argument_list|,
comment|/* isUnicodeOk */
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Object
index|[]
index|[]
name|altBigTableRandomRows
init|=
name|altBigTableRowSource
operator|.
name|randomRows
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|VectorRandomBatchSource
name|altBigTableBatchSource
init|=
name|VectorRandomBatchSource
operator|.
name|createInterestingBatches
argument_list|(
name|random
argument_list|,
name|altBigTableRowSource
argument_list|,
name|altBigTableRandomRows
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|altBigTableBatchSource
operator|.
name|resetBatchIteration
argument_list|()
expr_stmt|;
while|while
condition|(
name|altBigTableBatchSource
operator|.
name|fillNextBatch
argument_list|(
name|bigTableBatch
argument_list|)
condition|)
block|{
specifier|final
name|int
name|size
init|=
name|bigTableBatch
operator|.
name|size
decl_stmt|;
for|for
control|(
name|int
name|logical
init|=
literal|0
init|;
name|logical
operator|<
name|size
condition|;
name|logical
operator|++
control|)
block|{
specifier|final
name|int
name|batchIndex
init|=
operator|(
name|bigTableBatch
operator|.
name|selectedInUse
condition|?
name|bigTableBatch
operator|.
name|selected
index|[
name|logical
index|]
else|:
name|logical
operator|)
decl_stmt|;
name|RowTestObjects
name|testKey
init|=
name|getTestKey
argument_list|(
name|bigTableBatch
argument_list|,
name|batchIndex
argument_list|,
name|keyVectorExtractRow
argument_list|,
name|testDesc
operator|.
name|bigTableKeyTypeInfos
operator|.
name|length
argument_list|,
name|testDesc
operator|.
name|bigTableObjectInspectors
argument_list|)
decl_stmt|;
if|if
condition|(
name|bigTableKeyHashMap
operator|.
name|containsKey
argument_list|(
name|testKey
argument_list|)
operator|||
name|smallTableKeyHashMap
operator|.
name|containsKey
argument_list|(
name|testKey
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|RowTestObjects
name|testKeyClone
init|=
operator|(
name|RowTestObjects
operator|)
name|testKey
operator|.
name|clone
argument_list|()
decl_stmt|;
name|smallTableKeyHashMap
operator|.
name|put
argument_list|(
name|testKeyClone
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fullOuterAdditionalSmallTableKeys
operator|.
name|add
argument_list|(
name|testKeyClone
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Make sure there is a NULL key.
name|Object
index|[]
name|nullKeyRowObjects
init|=
operator|new
name|Object
index|[
name|testDesc
operator|.
name|bigTableKeyTypeInfos
operator|.
name|length
index|]
decl_stmt|;
name|RowTestObjects
name|nullTestKey
init|=
operator|new
name|RowTestObjects
argument_list|(
name|nullKeyRowObjects
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|smallTableKeyHashMap
operator|.
name|containsKey
argument_list|(
name|nullTestKey
argument_list|)
condition|)
block|{
name|smallTableKeyHashMap
operator|.
name|put
argument_list|(
name|nullTestKey
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fullOuterAdditionalSmallTableKeys
operator|.
name|add
argument_list|(
name|nullTestKey
argument_list|)
expr_stmt|;
block|}
comment|// Number the test rows with collection order.
name|int
name|addCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|RowTestObjects
argument_list|,
name|Integer
argument_list|>
name|testRowEntry
range|:
name|smallTableKeyHashMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|testRowEntry
operator|.
name|setValue
argument_list|(
name|addCount
operator|++
argument_list|)
expr_stmt|;
block|}
name|generateVariationData
argument_list|(
name|this
argument_list|,
name|testDesc
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
specifier|public
name|VectorRandomBatchSource
name|getBigTableBatchSource
parameter_list|()
block|{
return|return
name|bigTableBatchSource
return|;
block|}
specifier|public
name|VectorizedRowBatch
name|getBigTableBatch
parameter_list|()
block|{
return|return
name|bigTableBatch
return|;
block|}
specifier|public
name|VectorizedRowBatch
name|createBigTableBatch
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|)
block|{
specifier|final
name|int
name|bigTableColumnCount
init|=
name|testDesc
operator|.
name|bigTableTypeInfos
operator|.
name|length
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|bigTableColumnCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bigTableColumnCount
condition|;
name|i
operator|++
control|)
block|{
name|batch
operator|.
name|cols
index|[
name|i
index|]
operator|=
name|VectorizedBatchUtil
operator|.
name|createColumnVector
argument_list|(
name|testDesc
operator|.
name|bigTableTypeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|batch
return|;
block|}
specifier|private
name|RowTestObjects
name|getTestKey
parameter_list|(
name|VectorizedRowBatch
name|bigTableBatch
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|VectorExtractRow
name|vectorExtractRow
parameter_list|,
name|int
name|columnCount
parameter_list|,
name|ObjectInspector
index|[]
name|objectInspectors
parameter_list|)
block|{
name|Object
index|[]
name|rowObjects
init|=
operator|new
name|Object
index|[
name|columnCount
index|]
decl_stmt|;
name|vectorExtractRow
operator|.
name|extractRow
argument_list|(
name|bigTableBatch
argument_list|,
name|batchIndex
argument_list|,
name|rowObjects
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|rowObjects
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
name|rowObjects
index|[
name|c
index|]
operator|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|objectInspectors
index|[
name|c
index|]
operator|)
operator|.
name|copyObject
argument_list|(
name|rowObjects
index|[
name|c
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RowTestObjects
argument_list|(
name|rowObjects
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|driveBigTableData
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|,
name|MapJoinOperator
name|operator
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExtractRow
name|vectorExtractRow
init|=
operator|new
name|VectorExtractRow
argument_list|()
decl_stmt|;
name|vectorExtractRow
operator|.
name|init
argument_list|(
name|testDesc
operator|.
name|bigTableTypeInfos
argument_list|)
expr_stmt|;
name|Object
index|[]
index|[]
name|bigTableRandomRows
init|=
name|testData
operator|.
name|bigTableRandomRows
decl_stmt|;
specifier|final
name|int
name|rowCount
init|=
name|bigTableRandomRows
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
condition|;
name|i
operator|++
control|)
block|{
name|Object
index|[]
name|row
init|=
name|bigTableRandomRows
index|[
name|i
index|]
decl_stmt|;
name|operator
operator|.
name|process
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Close the operator tree.
name|operator
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|driveVectorBigTableData
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|,
name|MapJoinOperator
name|operator
parameter_list|)
throws|throws
name|HiveException
block|{
name|testData
operator|.
name|bigTableBatchSource
operator|.
name|resetBatchIteration
argument_list|()
expr_stmt|;
while|while
condition|(
name|testData
operator|.
name|bigTableBatchSource
operator|.
name|fillNextBatch
argument_list|(
name|testData
operator|.
name|bigTableBatch
argument_list|)
condition|)
block|{
name|operator
operator|.
name|process
argument_list|(
name|testData
operator|.
name|bigTableBatch
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Close the operator tree.
name|operator
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|generateVariationData
parameter_list|(
name|MapJoinTestData
name|testData
parameter_list|,
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
switch|switch
condition|(
name|testDesc
operator|.
name|vectorMapJoinVariation
condition|)
block|{
case|case
name|INNER_BIG_ONLY
case|:
case|case
name|LEFT_SEMI
case|:
name|testData
operator|.
name|generateRandomSmallTableCounts
argument_list|(
name|testDesc
argument_list|,
name|random
argument_list|)
expr_stmt|;
break|break;
case|case
name|INNER
case|:
case|case
name|OUTER
case|:
case|case
name|FULL_OUTER
case|:
name|testData
operator|.
name|generateRandomSmallTableCounts
argument_list|(
name|testDesc
argument_list|,
name|random
argument_list|)
expr_stmt|;
name|testData
operator|.
name|generateRandomSmallTableValues
argument_list|(
name|testDesc
argument_list|,
name|random
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown operator variation "
operator|+
name|testDesc
operator|.
name|vectorMapJoinVariation
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|RowTestObjects
name|generateRandomSmallTableValueRow
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
specifier|final
name|int
name|columnCount
init|=
name|testDesc
operator|.
name|smallTableValueTypeInfos
operator|.
name|length
decl_stmt|;
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
init|=
operator|new
name|PrimitiveTypeInfo
index|[
name|columnCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
name|primitiveTypeInfos
index|[
name|i
index|]
operator|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|testDesc
operator|.
name|smallTableValueTypeInfos
index|[
name|i
index|]
expr_stmt|;
block|}
name|Object
index|[]
name|smallTableValueRow
init|=
name|VectorRandomRowSource
operator|.
name|randomWritablePrimitiveRow
argument_list|(
name|columnCount
argument_list|,
name|random
argument_list|,
name|primitiveTypeInfos
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|smallTableValueRow
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
name|smallTableValueRow
index|[
name|c
index|]
operator|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|testDesc
operator|.
name|smallTableValueObjectInspectors
index|[
name|c
index|]
operator|)
operator|.
name|copyObject
argument_list|(
name|smallTableValueRow
index|[
name|c
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RowTestObjects
argument_list|(
name|smallTableValueRow
argument_list|)
return|;
block|}
specifier|private
name|void
name|generateRandomSmallTableCounts
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|smallTableValueCounts
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|RowTestObjects
argument_list|,
name|Integer
argument_list|>
name|testKeyEntry
range|:
name|smallTableKeyHashMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|int
name|valueCount
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|smallTableValueCounts
operator|.
name|add
argument_list|(
name|valueCount
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|generateRandomSmallTableValues
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|smallTableValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|RowTestObjects
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|RowTestObjects
argument_list|,
name|Integer
argument_list|>
name|testKeyEntry
range|:
name|smallTableKeyHashMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ArrayList
argument_list|<
name|RowTestObjects
argument_list|>
name|valueList
init|=
operator|new
name|ArrayList
argument_list|<
name|RowTestObjects
argument_list|>
argument_list|()
decl_stmt|;
name|smallTableValues
operator|.
name|add
argument_list|(
name|valueList
argument_list|)
expr_stmt|;
specifier|final
name|int
name|valueCount
init|=
name|smallTableValueCounts
operator|.
name|get
argument_list|(
name|testKeyEntry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|valueCount
condition|;
name|v
operator|++
control|)
block|{
name|valueList
operator|.
name|add
argument_list|(
name|generateRandomSmallTableValueRow
argument_list|(
name|testDesc
argument_list|,
name|random
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|GenerationSpec
argument_list|>
name|generationSpecListFromTypeInfos
parameter_list|(
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|int
name|keyCount
parameter_list|,
name|boolean
name|isOuterJoin
parameter_list|)
block|{
name|List
argument_list|<
name|GenerationSpec
argument_list|>
name|generationSpecList
init|=
operator|new
name|ArrayList
argument_list|<
name|GenerationSpec
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|typeInfos
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|TypeInfo
name|typeInfo
init|=
name|typeInfos
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|boolean
name|columnAllowNulls
decl_stmt|;
if|if
condition|(
name|i
operator|>=
name|keyCount
condition|)
block|{
comment|// Value columns can be NULL.
name|columnAllowNulls
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Non-OUTER JOIN operators expect NULL keys to have been filtered out.
name|columnAllowNulls
operator|=
name|isOuterJoin
expr_stmt|;
block|}
name|generationSpecList
operator|.
name|add
argument_list|(
name|GenerationSpec
operator|.
name|createSameType
argument_list|(
name|typeInfo
argument_list|,
name|columnAllowNulls
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|generationSpecList
return|;
block|}
block|}
end_class

end_unit

