begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_class
specifier|public
class|class
name|TestFunctionRegistry
extends|extends
name|TestCase
block|{
specifier|public
class|class
name|TestUDF
block|{
specifier|public
name|void
name|same
parameter_list|(
name|DoubleWritable
name|x
parameter_list|,
name|DoubleWritable
name|y
parameter_list|)
block|{}
specifier|public
name|void
name|same
parameter_list|(
name|HiveDecimalWritable
name|x
parameter_list|,
name|HiveDecimalWritable
name|y
parameter_list|)
block|{}
specifier|public
name|void
name|one
parameter_list|(
name|IntWritable
name|x
parameter_list|,
name|HiveDecimalWritable
name|y
parameter_list|)
block|{}
specifier|public
name|void
name|one
parameter_list|(
name|IntWritable
name|x
parameter_list|,
name|DoubleWritable
name|y
parameter_list|)
block|{}
specifier|public
name|void
name|one
parameter_list|(
name|IntWritable
name|x
parameter_list|,
name|IntWritable
name|y
parameter_list|)
block|{}
specifier|public
name|void
name|mismatch
parameter_list|(
name|DateWritable
name|x
parameter_list|,
name|HiveDecimalWritable
name|y
parameter_list|)
block|{}
specifier|public
name|void
name|mismatch
parameter_list|(
name|TimestampWritable
name|x
parameter_list|,
name|HiveDecimalWritable
name|y
parameter_list|)
block|{}
specifier|public
name|void
name|mismatch
parameter_list|(
name|BytesWritable
name|x
parameter_list|,
name|DoubleWritable
name|y
parameter_list|)
block|{}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
block|{   }
specifier|private
name|void
name|implicit
parameter_list|(
name|TypeInfo
name|a
parameter_list|,
name|TypeInfo
name|b
parameter_list|,
name|boolean
name|convertible
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|convertible
argument_list|,
name|FunctionRegistry
operator|.
name|implicitConvertable
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testImplicitConversion
parameter_list|()
block|{
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|floatTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|dateTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verify
parameter_list|(
name|Class
name|udf
parameter_list|,
name|String
name|name
parameter_list|,
name|TypeInfo
name|ta
parameter_list|,
name|TypeInfo
name|tb
parameter_list|,
name|Class
name|a
parameter_list|,
name|Class
name|b
parameter_list|,
name|boolean
name|throwException
parameter_list|)
block|{
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|args
init|=
operator|new
name|LinkedList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
name|ta
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|Method
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|FunctionRegistry
operator|.
name|getMethodInternal
argument_list|(
name|udf
argument_list|,
name|name
argument_list|,
literal|false
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UDFArgumentException
name|e
parameter_list|)
block|{
assert|assert
operator|(
name|throwException
operator|)
assert|;
return|return;
block|}
assert|assert
operator|(
operator|!
name|throwException
operator|)
assert|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetMethodInternal
parameter_list|()
block|{
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"same"
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"same"
argument_list|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"same"
argument_list|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|HiveDecimalWritable
operator|.
name|class
argument_list|,
name|HiveDecimalWritable
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"same"
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|HiveDecimalWritable
operator|.
name|class
argument_list|,
name|HiveDecimalWritable
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"same"
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|HiveDecimalWritable
operator|.
name|class
argument_list|,
name|HiveDecimalWritable
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"one"
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|HiveDecimalWritable
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"one"
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|floatTypeInfo
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"one"
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"mismatch"
argument_list|,
name|TypeInfoFactory
operator|.
name|voidTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|common
parameter_list|(
name|TypeInfo
name|a
parameter_list|,
name|TypeInfo
name|b
parameter_list|,
name|TypeInfo
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|FunctionRegistry
operator|.
name|getCommonClass
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCommonClass
parameter_list|()
block|{
name|common
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|)
expr_stmt|;
name|common
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|common
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|)
expr_stmt|;
name|common
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|comparison
parameter_list|(
name|TypeInfo
name|a
parameter_list|,
name|TypeInfo
name|b
parameter_list|,
name|TypeInfo
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|FunctionRegistry
operator|.
name|getCommonClassForComparison
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCommonClassComparison
parameter_list|()
block|{
name|comparison
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|)
expr_stmt|;
name|comparison
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|)
expr_stmt|;
name|comparison
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|)
expr_stmt|;
name|comparison
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{   }
block|}
end_class

end_unit

