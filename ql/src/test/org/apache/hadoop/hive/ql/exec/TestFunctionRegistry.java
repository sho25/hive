begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_class
specifier|public
class|class
name|TestFunctionRegistry
extends|extends
name|TestCase
block|{
specifier|public
class|class
name|TestUDF
block|{
specifier|public
name|void
name|same
parameter_list|(
name|DoubleWritable
name|x
parameter_list|,
name|DoubleWritable
name|y
parameter_list|)
block|{}
specifier|public
name|void
name|same
parameter_list|(
name|HiveDecimalWritable
name|x
parameter_list|,
name|HiveDecimalWritable
name|y
parameter_list|)
block|{}
specifier|public
name|void
name|same
parameter_list|(
name|Text
name|x
parameter_list|,
name|Text
name|y
parameter_list|)
block|{}
specifier|public
name|void
name|one
parameter_list|(
name|IntWritable
name|x
parameter_list|,
name|HiveDecimalWritable
name|y
parameter_list|)
block|{}
specifier|public
name|void
name|one
parameter_list|(
name|IntWritable
name|x
parameter_list|,
name|DoubleWritable
name|y
parameter_list|)
block|{}
specifier|public
name|void
name|one
parameter_list|(
name|IntWritable
name|x
parameter_list|,
name|IntWritable
name|y
parameter_list|)
block|{}
specifier|public
name|void
name|mismatch
parameter_list|(
name|DateWritable
name|x
parameter_list|,
name|HiveDecimalWritable
name|y
parameter_list|)
block|{}
specifier|public
name|void
name|mismatch
parameter_list|(
name|TimestampWritable
name|x
parameter_list|,
name|HiveDecimalWritable
name|y
parameter_list|)
block|{}
specifier|public
name|void
name|mismatch
parameter_list|(
name|BytesWritable
name|x
parameter_list|,
name|DoubleWritable
name|y
parameter_list|)
block|{}
specifier|public
name|void
name|typeaffinity1
parameter_list|(
name|DateWritable
name|x
parameter_list|)
block|{}
specifier|public
name|void
name|typeaffinity1
parameter_list|(
name|DoubleWritable
name|x
parameter_list|)
block|{}
empty_stmt|;
specifier|public
name|void
name|typeaffinity1
parameter_list|(
name|Text
name|x
parameter_list|)
block|{}
specifier|public
name|void
name|typeaffinity2
parameter_list|(
name|IntWritable
name|x
parameter_list|)
block|{}
specifier|public
name|void
name|typeaffinity2
parameter_list|(
name|DoubleWritable
name|x
parameter_list|)
block|{}
block|}
name|TypeInfo
name|varchar5
decl_stmt|;
name|TypeInfo
name|varchar10
decl_stmt|;
name|TypeInfo
name|maxVarchar
decl_stmt|;
name|TypeInfo
name|char5
decl_stmt|;
name|TypeInfo
name|char10
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|String
name|maxVarcharTypeName
init|=
literal|"varchar("
operator|+
name|HiveVarchar
operator|.
name|MAX_VARCHAR_LENGTH
operator|+
literal|")"
decl_stmt|;
name|maxVarchar
operator|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|maxVarcharTypeName
argument_list|)
expr_stmt|;
name|varchar10
operator|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"varchar(10)"
argument_list|)
expr_stmt|;
name|varchar5
operator|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"varchar(5)"
argument_list|)
expr_stmt|;
name|char10
operator|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"char(10)"
argument_list|)
expr_stmt|;
name|char5
operator|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"char(5)"
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|HiveConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|implicit
parameter_list|(
name|TypeInfo
name|a
parameter_list|,
name|TypeInfo
name|b
parameter_list|,
name|boolean
name|convertible
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|convertible
argument_list|,
name|FunctionRegistry
operator|.
name|implicitConvertible
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testImplicitConversion
parameter_list|()
block|{
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|floatTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|dateTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|varchar10
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|varchar10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Try with parameterized varchar types
name|TypeInfo
name|varchar10
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"varchar(10)"
argument_list|)
decl_stmt|;
name|TypeInfo
name|varchar20
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"varchar(20)"
argument_list|)
decl_stmt|;
name|implicit
argument_list|(
name|varchar10
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|varchar20
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|varchar10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|varchar20
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|varchar20
argument_list|,
name|varchar10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|char10
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|char10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|char5
argument_list|,
name|char10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|char5
argument_list|,
name|varchar10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|varchar5
argument_list|,
name|char10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|char10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|varchar10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implicit
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Method
argument_list|>
name|getMethods
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|udfClass
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
name|List
argument_list|<
name|Method
argument_list|>
name|mlist
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|udfClass
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|mlist
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mlist
return|;
block|}
specifier|private
name|void
name|typeAffinity
parameter_list|(
name|String
name|methodName
parameter_list|,
name|TypeInfo
name|inputType
parameter_list|,
name|int
name|expectedNumFoundMethods
parameter_list|,
name|Class
name|expectedFoundType
parameter_list|)
block|{
name|List
argument_list|<
name|Method
argument_list|>
name|mlist
init|=
name|getMethods
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
name|methodName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
literal|1
operator|<
name|mlist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|inputTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|inputTypes
operator|.
name|add
argument_list|(
name|inputType
argument_list|)
expr_stmt|;
comment|// narrow down the possible choices based on type affinity
name|FunctionRegistry
operator|.
name|filterMethodsByTypeAffinity
argument_list|(
name|mlist
argument_list|,
name|inputTypes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNumFoundMethods
argument_list|,
name|mlist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedNumFoundMethods
operator|==
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedFoundType
argument_list|,
name|mlist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testTypeAffinity
parameter_list|()
block|{
comment|// Prefer numeric type arguments over other method signatures
name|typeAffinity
argument_list|(
literal|"typeaffinity1"
argument_list|,
name|TypeInfoFactory
operator|.
name|shortTypeInfo
argument_list|,
literal|1
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|typeAffinity
argument_list|(
literal|"typeaffinity1"
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|1
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|typeAffinity
argument_list|(
literal|"typeaffinity1"
argument_list|,
name|TypeInfoFactory
operator|.
name|floatTypeInfo
argument_list|,
literal|1
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Prefer date type arguments over other method signatures
name|typeAffinity
argument_list|(
literal|"typeaffinity1"
argument_list|,
name|TypeInfoFactory
operator|.
name|dateTypeInfo
argument_list|,
literal|1
argument_list|,
name|DateWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|typeAffinity
argument_list|(
literal|"typeaffinity1"
argument_list|,
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|,
literal|1
argument_list|,
name|DateWritable
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// String type affinity
name|typeAffinity
argument_list|(
literal|"typeaffinity1"
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|1
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|typeAffinity
argument_list|(
literal|"typeaffinity1"
argument_list|,
name|char5
argument_list|,
literal|1
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|typeAffinity
argument_list|(
literal|"typeaffinity1"
argument_list|,
name|varchar5
argument_list|,
literal|1
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Type affinity does not help when multiple methods have the same type affinity.
name|typeAffinity
argument_list|(
literal|"typeaffinity2"
argument_list|,
name|TypeInfoFactory
operator|.
name|shortTypeInfo
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Type affinity does not help when type affinity does not match input args
name|typeAffinity
argument_list|(
literal|"typeaffinity2"
argument_list|,
name|TypeInfoFactory
operator|.
name|dateTypeInfo
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verify
parameter_list|(
name|Class
name|udf
parameter_list|,
name|String
name|name
parameter_list|,
name|TypeInfo
name|ta
parameter_list|,
name|TypeInfo
name|tb
parameter_list|,
name|Class
name|a
parameter_list|,
name|Class
name|b
parameter_list|,
name|boolean
name|throwException
parameter_list|)
block|{
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|args
init|=
operator|new
name|LinkedList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
name|ta
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|Method
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|FunctionRegistry
operator|.
name|getMethodInternal
argument_list|(
name|udf
argument_list|,
name|name
argument_list|,
literal|false
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UDFArgumentException
name|e
parameter_list|)
block|{
assert|assert
operator|(
name|throwException
operator|)
assert|;
return|return;
block|}
assert|assert
operator|(
operator|!
name|throwException
operator|)
assert|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|result
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|result
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetMethodInternal
parameter_list|()
block|{
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"same"
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"same"
argument_list|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"same"
argument_list|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|HiveDecimalWritable
operator|.
name|class
argument_list|,
name|HiveDecimalWritable
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"same"
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|HiveDecimalWritable
operator|.
name|class
argument_list|,
name|HiveDecimalWritable
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"same"
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|HiveDecimalWritable
operator|.
name|class
argument_list|,
name|HiveDecimalWritable
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"one"
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|HiveDecimalWritable
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"one"
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|floatTypeInfo
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"one"
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Passing char/varchar arguments should prefer the version of evaluate() with Text args.
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"same"
argument_list|,
name|varchar5
argument_list|,
name|varchar10
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"same"
argument_list|,
name|char5
argument_list|,
name|char10
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|TestUDF
operator|.
name|class
argument_list|,
literal|"mismatch"
argument_list|,
name|TypeInfoFactory
operator|.
name|voidTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|common
parameter_list|(
name|TypeInfo
name|a
parameter_list|,
name|TypeInfo
name|b
parameter_list|,
name|TypeInfo
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|result
argument_list|,
name|FunctionRegistry
operator|.
name|getCommonClass
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCommonClass
parameter_list|()
block|{
name|common
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|)
expr_stmt|;
name|common
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|common
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|)
expr_stmt|;
name|common
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|common
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|varchar10
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|common
argument_list|(
name|varchar10
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|common
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|char10
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|common
argument_list|(
name|char10
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
comment|// common class between char/varchar is string?
name|common
argument_list|(
name|char5
argument_list|,
name|varchar10
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|comparison
parameter_list|(
name|TypeInfo
name|a
parameter_list|,
name|TypeInfo
name|b
parameter_list|,
name|TypeInfo
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|result
argument_list|,
name|FunctionRegistry
operator|.
name|getCommonClassForComparison
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCommonClassComparison
parameter_list|()
block|{
name|comparison
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|)
expr_stmt|;
name|comparison
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|)
expr_stmt|;
name|comparison
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|)
expr_stmt|;
name|comparison
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|)
expr_stmt|;
name|comparison
argument_list|(
name|TypeInfoFactory
operator|.
name|dateTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|comparison
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|dateTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|comparison
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|)
expr_stmt|;
name|comparison
argument_list|(
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|)
expr_stmt|;
name|comparison
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|varchar10
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|comparison
argument_list|(
name|varchar10
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|comparison
argument_list|(
name|varchar5
argument_list|,
name|varchar10
argument_list|,
name|varchar10
argument_list|)
expr_stmt|;
name|comparison
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|char10
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|comparison
argument_list|(
name|char10
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|comparison
argument_list|(
name|char5
argument_list|,
name|char10
argument_list|,
name|char10
argument_list|)
expr_stmt|;
comment|// common comparison class for char/varchar is string?
name|comparison
argument_list|(
name|char10
argument_list|,
name|varchar5
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
block|}
comment|/**    * Method to print out the comparison/conversion behavior for data types.    */
specifier|public
name|void
name|testPrintTypeCompatibility
parameter_list|()
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|typeStrings
init|=
block|{
literal|"void"
block|,
literal|"boolean"
block|,
literal|"tinyint"
block|,
literal|"smallint"
block|,
literal|"int"
block|,
literal|"bigint"
block|,
literal|"float"
block|,
literal|"double"
block|,
literal|"string"
block|,
literal|"timestamp"
block|,
literal|"date"
block|,
literal|"binary"
block|,
literal|"decimal"
block|,
literal|"varchar(10)"
block|,
literal|"varchar(5)"
block|,     }
decl_stmt|;
for|for
control|(
name|String
name|cat1
range|:
name|typeStrings
control|)
block|{
name|TypeInfo
name|ti1
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ti1
operator|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|cat1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unable to get TypeInfo for "
operator|+
name|cat1
operator|+
literal|", skipping ..."
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|String
name|cat2
range|:
name|typeStrings
control|)
block|{
name|TypeInfo
name|commonClass
init|=
literal|null
decl_stmt|;
name|boolean
name|implicitConvertable
init|=
literal|false
decl_stmt|;
try|try
block|{
name|TypeInfo
name|ti2
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|cat2
argument_list|)
decl_stmt|;
try|try
block|{
name|commonClass
operator|=
name|FunctionRegistry
operator|.
name|getCommonClassForComparison
argument_list|(
name|ti1
argument_list|,
name|ti2
argument_list|)
expr_stmt|;
comment|//implicitConvertable = FunctionRegistry.implicitConvertable(ti1, ti2);
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to get common class for "
operator|+
name|ti1
operator|+
literal|", "
operator|+
name|ti2
operator|+
literal|": "
operator|+
name|err
argument_list|)
expr_stmt|;
name|err
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//System.out.println("Unable to get TypeInfo for " + cat2 + ", skipping ...");
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cat1
operator|+
literal|" - "
operator|+
name|cat2
operator|+
literal|": "
operator|+
name|commonClass
argument_list|)
expr_stmt|;
comment|//System.out.println(cat1 + " - " + cat2 + ": " + implicitConvertable);
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unable to get TypeInfo for "
operator|+
name|cat2
operator|+
literal|", skipping ..."
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|unionAll
parameter_list|(
name|TypeInfo
name|a
parameter_list|,
name|TypeInfo
name|b
parameter_list|,
name|TypeInfo
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|result
argument_list|,
name|FunctionRegistry
operator|.
name|getCommonClassForUnionAll
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCommonClassUnionAll
parameter_list|()
block|{
name|unionAll
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|)
expr_stmt|;
name|unionAll
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|)
expr_stmt|;
name|unionAll
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|)
expr_stmt|;
name|unionAll
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|unionAll
argument_list|(
name|varchar5
argument_list|,
name|varchar10
argument_list|,
name|varchar10
argument_list|)
expr_stmt|;
name|unionAll
argument_list|(
name|varchar10
argument_list|,
name|varchar5
argument_list|,
name|varchar10
argument_list|)
expr_stmt|;
name|unionAll
argument_list|(
name|varchar10
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|unionAll
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|varchar10
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|unionAll
argument_list|(
name|char5
argument_list|,
name|char10
argument_list|,
name|char10
argument_list|)
expr_stmt|;
name|unionAll
argument_list|(
name|char10
argument_list|,
name|char5
argument_list|,
name|char10
argument_list|)
expr_stmt|;
name|unionAll
argument_list|(
name|char10
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|unionAll
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|char10
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
comment|// common class for char/varchar is string?
name|comparison
argument_list|(
name|char10
argument_list|,
name|varchar5
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetTypeInfoForPrimitiveCategory
parameter_list|()
block|{
comment|// varchar should take string length into account.
comment|// varchar(5), varchar(10) => varchar(10)
name|assertEquals
argument_list|(
name|varchar10
argument_list|,
name|FunctionRegistry
operator|.
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|varchar5
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|varchar10
argument_list|,
name|PrimitiveCategory
operator|.
name|VARCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|varchar10
argument_list|,
name|FunctionRegistry
operator|.
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|varchar10
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|varchar5
argument_list|,
name|PrimitiveCategory
operator|.
name|VARCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|char10
argument_list|,
name|FunctionRegistry
operator|.
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|char5
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|char10
argument_list|,
name|PrimitiveCategory
operator|.
name|CHAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|char10
argument_list|,
name|FunctionRegistry
operator|.
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|char10
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|char5
argument_list|,
name|PrimitiveCategory
operator|.
name|CHAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|varchar10
argument_list|,
name|FunctionRegistry
operator|.
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|varchar5
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|char10
argument_list|,
name|PrimitiveCategory
operator|.
name|VARCHAR
argument_list|)
argument_list|)
expr_stmt|;
comment|// non-qualified types should simply return the TypeInfo associated with that type
name|assertEquals
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|varchar10
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|PrimitiveCategory
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|PrimitiveCategory
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|PrimitiveCategory
operator|.
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{   }
specifier|public
name|void
name|testIsRankingFunction
parameter_list|()
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FunctionRegistry
operator|.
name|isRankingFunction
argument_list|(
literal|"rank"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FunctionRegistry
operator|.
name|isRankingFunction
argument_list|(
literal|"dense_rank"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FunctionRegistry
operator|.
name|isRankingFunction
argument_list|(
literal|"percent_rank"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FunctionRegistry
operator|.
name|isRankingFunction
argument_list|(
literal|"cume_dist"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|FunctionRegistry
operator|.
name|isRankingFunction
argument_list|(
literal|"min"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testImpliesOrder
parameter_list|()
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FunctionRegistry
operator|.
name|impliesOrder
argument_list|(
literal|"rank"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FunctionRegistry
operator|.
name|impliesOrder
argument_list|(
literal|"dense_rank"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FunctionRegistry
operator|.
name|impliesOrder
argument_list|(
literal|"percent_rank"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FunctionRegistry
operator|.
name|impliesOrder
argument_list|(
literal|"cume_dist"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FunctionRegistry
operator|.
name|impliesOrder
argument_list|(
literal|"first_value"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FunctionRegistry
operator|.
name|impliesOrder
argument_list|(
literal|"last_value"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FunctionRegistry
operator|.
name|impliesOrder
argument_list|(
literal|"lead"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FunctionRegistry
operator|.
name|impliesOrder
argument_list|(
literal|"lag"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|FunctionRegistry
operator|.
name|impliesOrder
argument_list|(
literal|"min"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

