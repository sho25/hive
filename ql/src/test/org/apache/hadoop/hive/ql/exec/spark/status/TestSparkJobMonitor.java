begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|status
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test spark progress monitoring information.  */
end_comment

begin_class
specifier|public
class|class
name|TestSparkJobMonitor
block|{
specifier|private
name|HiveConf
name|testConf
decl_stmt|;
specifier|private
specifier|final
name|ByteArrayOutputStream
name|outContent
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ByteArrayOutputStream
name|errContent
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|private
name|SparkJobMonitor
name|monitor
decl_stmt|;
specifier|private
name|PrintStream
name|curOut
decl_stmt|;
specifier|private
name|PrintStream
name|curErr
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|testConf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|curOut
operator|=
name|System
operator|.
name|out
expr_stmt|;
name|curErr
operator|=
name|System
operator|.
name|err
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|outContent
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|errContent
argument_list|)
argument_list|)
expr_stmt|;
name|monitor
operator|=
operator|new
name|SparkJobMonitor
argument_list|(
name|testConf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|startMonitor
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|SparkStage
argument_list|,
name|SparkStageProgress
argument_list|>
name|progressMap
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|SparkStage
argument_list|,
name|SparkStageProgress
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
operator|new
name|SparkStage
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|SparkStageProgress
argument_list|(
literal|4
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
operator|new
name|SparkStage
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|SparkStageProgress
argument_list|(
literal|6
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
operator|new
name|SparkStage
argument_list|(
literal|9
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|SparkStageProgress
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
operator|new
name|SparkStage
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|SparkStageProgress
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
operator|new
name|SparkStage
argument_list|(
literal|15
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|SparkStageProgress
argument_list|(
literal|4
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
operator|new
name|SparkStage
argument_list|(
literal|15
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|SparkStageProgress
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
operator|new
name|SparkStage
argument_list|(
literal|20
argument_list|,
literal|3
argument_list|)
argument_list|,
operator|new
name|SparkStageProgress
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
operator|new
name|SparkStage
argument_list|(
literal|21
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|SparkStageProgress
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetReport
parameter_list|()
block|{
name|Map
argument_list|<
name|SparkStage
argument_list|,
name|SparkStageProgress
argument_list|>
name|progressMap
init|=
name|progressMap
argument_list|()
decl_stmt|;
name|monitor
operator|.
name|printStatus
argument_list|(
name|progressMap
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errContent
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Stage-1_0: 3(+1)/4\tStage-3_1: 4(+1,-1)/6\tStage-9_0: 5/5 Finished\tStage-10_2: 3(+2)/5\t"
operator|+
literal|"Stage-15_1: 3(+1)/4\tStage-15_2: 4/4 Finished\tStage-20_3: 1(+1,-1)/3\tStage-21_1: 2/2 Finished"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|System
operator|.
name|setOut
argument_list|(
name|curOut
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|curErr
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

