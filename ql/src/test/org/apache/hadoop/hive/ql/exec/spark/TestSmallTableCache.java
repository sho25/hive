begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|FakeTicker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test the two level cache.  */
end_comment

begin_class
specifier|public
class|class
name|TestSmallTableCache
block|{
specifier|private
specifier|static
specifier|final
name|String
name|KEY
init|=
literal|"Test"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_VALUE_1
init|=
literal|"TestValue1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_VALUE_2
init|=
literal|"TestValue2"
decl_stmt|;
specifier|private
name|SmallTableCache
operator|.
name|SmallTableLocalCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
decl_stmt|;
specifier|private
name|AtomicInteger
name|counter
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|this
operator|.
name|cache
operator|=
operator|new
name|SmallTableCache
operator|.
name|SmallTableLocalCache
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|counter
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyCache
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|String
name|res
init|=
name|cache
operator|.
name|get
argument_list|(
name|KEY
argument_list|,
parameter_list|()
lambda|->
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|TEST_VALUE_1
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_VALUE_1
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testL1Hit
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|cache
operator|.
name|get
argument_list|(
name|KEY
argument_list|,
parameter_list|()
lambda|->
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|TEST_VALUE_1
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|cache
operator|.
name|get
argument_list|(
name|KEY
argument_list|,
parameter_list|()
lambda|->
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|TEST_VALUE_2
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_VALUE_1
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testL2Hit
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|cache
operator|=
operator|new
name|SmallTableCache
operator|.
name|SmallTableLocalCache
argument_list|<>
argument_list|(
name|ticker
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|KEY
argument_list|,
parameter_list|()
lambda|->
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|TEST_VALUE_1
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|cache
operator|.
name|get
argument_list|(
name|KEY
argument_list|,
parameter_list|()
lambda|->
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|TEST_VALUE_2
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_VALUE_1
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testL2Miss
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|cache
operator|=
operator|new
name|SmallTableCache
operator|.
name|SmallTableLocalCache
argument_list|<>
argument_list|(
name|ticker
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|KEY
argument_list|,
parameter_list|()
lambda|->
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|TEST_VALUE_1
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|cache
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|forceOOMToClearSoftValues
argument_list|()
expr_stmt|;
name|String
name|res
init|=
name|cache
operator|.
name|get
argument_list|(
name|KEY
argument_list|,
parameter_list|()
lambda|->
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|TEST_VALUE_2
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_VALUE_2
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testL2IsNotClearedIfTheItemIsInL1
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|cache
operator|=
operator|new
name|SmallTableCache
operator|.
name|SmallTableLocalCache
argument_list|<>
argument_list|(
name|ticker
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|KEY
argument_list|,
parameter_list|()
lambda|->
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|TEST_VALUE_1
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|forceOOMToClearSoftValues
argument_list|()
expr_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|cache
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|String
name|res
init|=
name|cache
operator|.
name|get
argument_list|(
name|KEY
argument_list|,
parameter_list|()
lambda|->
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|TEST_VALUE_2
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_VALUE_1
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClear
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|cache
operator|.
name|get
argument_list|(
name|KEY
argument_list|,
parameter_list|()
lambda|->
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|TEST_VALUE_1
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{     }
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutL1
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|cache
operator|.
name|put
argument_list|(
name|KEY
argument_list|,
operator|new
name|String
argument_list|(
name|TEST_VALUE_1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|cache
operator|.
name|get
argument_list|(
name|KEY
argument_list|,
parameter_list|()
lambda|->
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|TEST_VALUE_2
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_VALUE_1
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutL2
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|FakeTicker
name|ticker
init|=
operator|new
name|FakeTicker
argument_list|()
decl_stmt|;
name|cache
operator|=
operator|new
name|SmallTableCache
operator|.
name|SmallTableLocalCache
argument_list|<>
argument_list|(
name|ticker
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|KEY
argument_list|,
operator|new
name|String
argument_list|(
name|TEST_VALUE_1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|cache
operator|.
name|get
argument_list|(
name|KEY
argument_list|,
parameter_list|()
lambda|->
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|TEST_VALUE_2
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
name|ticker
operator|.
name|advance
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|cache
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_VALUE_1
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|forceOOMToClearSoftValues
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Object
index|[]
name|ignored
init|=
operator|new
name|Object
index|[
name|Integer
operator|.
name|MAX_VALUE
operator|/
literal|2
index|]
decl_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

