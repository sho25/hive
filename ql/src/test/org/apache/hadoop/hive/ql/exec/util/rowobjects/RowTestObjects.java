begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|rowobjects
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|RowTestObjects
implements|implements
name|Comparable
argument_list|<
name|RowTestObjects
argument_list|>
block|{
specifier|private
specifier|final
name|Object
index|[]
name|row
decl_stmt|;
comment|// Not included in equals.
specifier|private
name|int
name|index
decl_stmt|;
specifier|public
name|RowTestObjects
parameter_list|(
name|Object
index|[]
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|index
operator|=
operator|-
literal|1
expr_stmt|;
comment|// Not used value.
block|}
specifier|public
name|Object
index|[]
name|getRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
specifier|public
name|void
name|setIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|row
argument_list|)
decl_stmt|;
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|clone
parameter_list|()
block|{
return|return
operator|new
name|RowTestObjects
argument_list|(
name|row
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|RowTestObjects
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|RowTestObjects
name|other
init|=
operator|(
name|RowTestObjects
operator|)
name|obj
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|other
operator|.
name|row
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
name|row
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|RowTestObjects
name|obj
parameter_list|)
block|{
specifier|final
name|RowTestObjects
name|other
init|=
operator|(
name|RowTestObjects
operator|)
name|obj
decl_stmt|;
name|int
name|thisLength
init|=
name|this
operator|.
name|row
operator|.
name|length
decl_stmt|;
name|int
name|otherLength
init|=
name|other
operator|.
name|row
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|thisLength
operator|!=
name|otherLength
condition|)
block|{
return|return
operator|(
name|thisLength
operator|<
name|otherLength
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thisLength
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|thisObject
init|=
name|this
operator|.
name|row
index|[
name|i
index|]
decl_stmt|;
name|Object
name|otherObject
init|=
name|other
operator|.
name|row
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|thisObject
operator|==
literal|null
operator|||
name|otherObject
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|thisObject
operator|==
literal|null
operator|&&
name|otherObject
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// Does this make sense?
return|return
operator|(
name|thisObject
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
name|int
name|compareTo
init|=
operator|(
operator|(
name|Comparable
operator|)
name|thisObject
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|Comparable
operator|)
name|otherObject
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareTo
operator|!=
literal|0
condition|)
block|{
return|return
name|compareTo
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

