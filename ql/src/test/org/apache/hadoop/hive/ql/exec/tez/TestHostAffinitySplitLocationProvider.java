begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestHostAffinitySplitLocationProvider
block|{
specifier|private
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHostAffinitySplitLocationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|locations
init|=
operator|new
name|String
index|[
literal|5
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|locationsSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|executorLocations
init|=
operator|new
name|String
index|[
literal|9
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|executorLocationsSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|locations
index|[
name|i
index|]
operator|=
literal|"location"
operator|+
name|i
expr_stmt|;
name|locationsSet
operator|.
name|add
argument_list|(
name|locations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
name|executorLocations
index|[
name|i
index|]
operator|=
literal|"execLocation"
operator|+
name|i
expr_stmt|;
name|executorLocationsSet
operator|.
name|add
argument_list|(
name|executorLocations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testNonFileSplits
parameter_list|()
throws|throws
name|IOException
block|{
name|HostAffinitySplitLocationProvider
name|locationProvider
init|=
operator|new
name|HostAffinitySplitLocationProvider
argument_list|(
name|executorLocations
argument_list|)
decl_stmt|;
name|InputSplit
name|inputSplit1
init|=
name|createMockInputSplit
argument_list|(
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|0
index|]
block|,
name|locations
index|[
literal|1
index|]
block|}
argument_list|)
decl_stmt|;
name|InputSplit
name|inputSplit2
init|=
name|createMockInputSplit
argument_list|(
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|2
index|]
block|,
name|locations
index|[
literal|3
index|]
block|}
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|0
index|]
block|,
name|locations
index|[
literal|1
index|]
block|}
argument_list|,
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|inputSplit1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|2
index|]
block|,
name|locations
index|[
literal|3
index|]
block|}
argument_list|,
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|inputSplit2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testOrcSplitsBasic
parameter_list|()
throws|throws
name|IOException
block|{
name|HostAffinitySplitLocationProvider
name|locationProvider
init|=
operator|new
name|HostAffinitySplitLocationProvider
argument_list|(
name|executorLocations
argument_list|)
decl_stmt|;
name|InputSplit
name|os1
init|=
name|createMockFileSplit
argument_list|(
literal|true
argument_list|,
literal|"path1"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|0
index|]
block|,
name|locations
index|[
literal|1
index|]
block|}
argument_list|)
decl_stmt|;
name|InputSplit
name|os2
init|=
name|createMockFileSplit
argument_list|(
literal|true
argument_list|,
literal|"path2"
argument_list|,
literal|0
argument_list|,
literal|2000
argument_list|,
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|2
index|]
block|,
name|locations
index|[
literal|3
index|]
block|}
argument_list|)
decl_stmt|;
name|InputSplit
name|os3
init|=
name|createMockFileSplit
argument_list|(
literal|true
argument_list|,
literal|"path3"
argument_list|,
literal|1000
argument_list|,
literal|2000
argument_list|,
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|0
index|]
block|,
name|locations
index|[
literal|3
index|]
block|}
argument_list|)
decl_stmt|;
name|String
index|[]
name|retLoc1
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os1
argument_list|)
decl_stmt|;
name|String
index|[]
name|retLoc2
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os2
argument_list|)
decl_stmt|;
name|String
index|[]
name|retLoc3
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|retLoc1
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|locationsSet
operator|.
name|contains
argument_list|(
name|retLoc1
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executorLocationsSet
operator|.
name|contains
argument_list|(
name|retLoc1
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|retLoc2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|locationsSet
operator|.
name|contains
argument_list|(
name|retLoc2
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executorLocationsSet
operator|.
name|contains
argument_list|(
name|retLoc2
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|retLoc3
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|locationsSet
operator|.
name|contains
argument_list|(
name|retLoc3
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executorLocationsSet
operator|.
name|contains
argument_list|(
name|retLoc3
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testConsistentHashing
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|LOC_COUNT
init|=
literal|20
decl_stmt|,
name|MIN_LOC_COUNT
init|=
literal|4
decl_stmt|,
name|SPLIT_COUNT
init|=
literal|100
decl_stmt|;
name|String
index|[]
name|locations
init|=
operator|new
name|String
index|[
name|LOC_COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|locations
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|InputSplit
index|[]
name|splits
init|=
operator|new
name|InputSplit
index|[
name|SPLIT_COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|splits
index|[
name|i
index|]
operator|=
name|createMockFileSplit
argument_list|(
literal|true
argument_list|,
literal|"path"
operator|+
name|i
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|failBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|String
index|[]
name|lastLocations
init|=
operator|new
name|String
index|[
name|splits
operator|.
name|length
index|]
decl_stmt|;
name|double
name|movedRatioSum
init|=
literal|0
decl_stmt|,
name|newRatioSum
init|=
literal|0
decl_stmt|,
name|movedRatioWorst
init|=
literal|0
decl_stmt|,
name|newRatioWorst
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|int
name|locs
init|=
name|MIN_LOC_COUNT
init|;
name|locs
operator|<=
name|locations
operator|.
name|length
condition|;
operator|++
name|locs
control|)
block|{
name|String
index|[]
name|partLoc
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|locations
argument_list|,
name|locs
argument_list|)
decl_stmt|;
name|HostAffinitySplitLocationProvider
name|lp
init|=
operator|new
name|HostAffinitySplitLocationProvider
argument_list|(
name|partLoc
argument_list|)
decl_stmt|;
name|int
name|moved
init|=
literal|0
decl_stmt|,
name|newLoc
init|=
literal|0
decl_stmt|;
name|String
name|newNode
init|=
name|partLoc
index|[
name|locs
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|splitIx
init|=
literal|0
init|;
name|splitIx
operator|<
name|splits
operator|.
name|length
condition|;
operator|++
name|splitIx
control|)
block|{
name|String
index|[]
name|splitLocations
init|=
name|lp
operator|.
name|getLocations
argument_list|(
name|splits
index|[
name|splitIx
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitLocations
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
name|splitLocation
init|=
name|splitLocations
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|locs
operator|>
name|MIN_LOC_COUNT
operator|&&
operator|!
name|splitLocation
operator|.
name|equals
argument_list|(
name|lastLocations
index|[
name|splitIx
index|]
argument_list|)
condition|)
block|{
operator|++
name|moved
expr_stmt|;
block|}
if|if
condition|(
name|newNode
operator|.
name|equals
argument_list|(
name|splitLocation
argument_list|)
condition|)
block|{
operator|++
name|newLoc
expr_stmt|;
block|}
name|lastLocations
index|[
name|splitIx
index|]
operator|=
name|splitLocation
expr_stmt|;
block|}
if|if
condition|(
name|locs
operator|==
name|MIN_LOC_COUNT
condition|)
continue|continue;
name|String
name|msgTail
init|=
literal|" when going to "
operator|+
name|locs
operator|+
literal|" locations"
decl_stmt|;
name|String
name|movedMsg
init|=
name|moved
operator|+
literal|" splits moved"
decl_stmt|,
name|newMsg
init|=
name|newLoc
operator|+
literal|" splits went to the new node"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|movedMsg
operator|+
literal|" and "
operator|+
name|newMsg
operator|+
name|msgTail
argument_list|)
expr_stmt|;
name|double
name|maxMoved
init|=
literal|1.0f
operator|*
name|splits
operator|.
name|length
operator|/
name|locs
decl_stmt|,
name|minNew
init|=
literal|1.0f
operator|*
name|splits
operator|.
name|length
operator|/
name|locs
decl_stmt|;
name|movedRatioSum
operator|+=
name|moved
operator|/
name|maxMoved
expr_stmt|;
name|movedRatioWorst
operator|=
name|Math
operator|.
name|max
argument_list|(
name|moved
operator|/
name|maxMoved
argument_list|,
name|movedRatioWorst
argument_list|)
expr_stmt|;
name|newRatioSum
operator|+=
name|newLoc
operator|/
name|minNew
expr_stmt|;
name|newRatioWorst
operator|=
name|Math
operator|.
name|min
argument_list|(
name|newLoc
operator|/
name|minNew
argument_list|,
name|newRatioWorst
argument_list|)
expr_stmt|;
name|logBadRatios
argument_list|(
name|failBuilder
argument_list|,
name|moved
argument_list|,
name|newLoc
argument_list|,
name|msgTail
argument_list|,
name|movedMsg
argument_list|,
name|newMsg
argument_list|,
name|maxMoved
argument_list|,
name|minNew
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
name|locations
operator|.
name|length
operator|-
name|MIN_LOC_COUNT
decl_stmt|;
name|double
name|moveRatioAvg
init|=
name|movedRatioSum
operator|/
name|count
decl_stmt|,
name|newRatioAvg
init|=
name|newRatioSum
operator|/
name|count
decl_stmt|;
name|String
name|errorMsg
init|=
literal|"Move counts: average "
operator|+
name|moveRatioAvg
operator|+
literal|", worst "
operator|+
name|movedRatioWorst
operator|+
literal|"; assigned to new node: average "
operator|+
name|newRatioAvg
operator|+
literal|", worst "
operator|+
name|newRatioWorst
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
comment|// Give it a LOT of slack, since on low numbers consistent hashing is very imprecise.
if|if
condition|(
name|moveRatioAvg
operator|>
literal|1.2f
operator|||
name|newRatioAvg
argument_list|<
literal|0.8f
operator|||
name|movedRatioWorst
argument_list|>
literal|1.5f
operator|||
name|newRatioWorst
operator|<
literal|0.5f
condition|)
block|{
name|fail
argument_list|(
name|errorMsg
operator|+
literal|"; example failures: "
operator|+
name|failBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|logBadRatios
parameter_list|(
name|StringBuilder
name|failBuilder
parameter_list|,
name|int
name|moved
parameter_list|,
name|int
name|newLoc
parameter_list|,
name|String
name|msgTail
parameter_list|,
name|String
name|movedMsg
parameter_list|,
name|String
name|newMsg
parameter_list|,
name|double
name|maxMoved
parameter_list|,
name|double
name|minNew
parameter_list|)
block|{
name|boolean
name|logged
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|moved
operator|>
name|maxMoved
operator|*
literal|1.33f
condition|)
block|{
name|failBuilder
operator|.
name|append
argument_list|(
name|movedMsg
argument_list|)
operator|.
name|append
argument_list|(
literal|" (threshold "
argument_list|)
operator|.
name|append
argument_list|(
name|maxMoved
argument_list|)
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
name|logged
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|newLoc
operator|<
name|minNew
operator|*
literal|0.75f
condition|)
block|{
name|failBuilder
operator|.
name|append
argument_list|(
name|newMsg
argument_list|)
operator|.
name|append
argument_list|(
literal|" (threshold "
argument_list|)
operator|.
name|append
argument_list|(
name|minNew
argument_list|)
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
name|logged
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|logged
condition|)
block|{
name|failBuilder
operator|.
name|append
argument_list|(
name|msgTail
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testOrcSplitsLocationAffinity
parameter_list|()
throws|throws
name|IOException
block|{
name|HostAffinitySplitLocationProvider
name|locationProvider
init|=
operator|new
name|HostAffinitySplitLocationProvider
argument_list|(
name|executorLocations
argument_list|)
decl_stmt|;
comment|// Same file, offset, different lengths
name|InputSplit
name|os11
init|=
name|createMockFileSplit
argument_list|(
literal|true
argument_list|,
literal|"path1"
argument_list|,
literal|0
argument_list|,
literal|15000
argument_list|,
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|0
index|]
block|,
name|locations
index|[
literal|1
index|]
block|}
argument_list|)
decl_stmt|;
name|InputSplit
name|os12
init|=
name|createMockFileSplit
argument_list|(
literal|true
argument_list|,
literal|"path1"
argument_list|,
literal|0
argument_list|,
literal|30000
argument_list|,
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|0
index|]
block|,
name|locations
index|[
literal|1
index|]
block|}
argument_list|)
decl_stmt|;
comment|// Same file, different offset
name|InputSplit
name|os13
init|=
name|createMockFileSplit
argument_list|(
literal|true
argument_list|,
literal|"path1"
argument_list|,
literal|15000
argument_list|,
literal|30000
argument_list|,
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|0
index|]
block|,
name|locations
index|[
literal|1
index|]
block|}
argument_list|)
decl_stmt|;
name|String
index|[]
name|retLoc11
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os11
argument_list|)
decl_stmt|;
name|String
index|[]
name|retLoc12
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os12
argument_list|)
decl_stmt|;
name|String
index|[]
name|retLoc13
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os13
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|retLoc11
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|locationsSet
operator|.
name|contains
argument_list|(
name|retLoc11
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executorLocationsSet
operator|.
name|contains
argument_list|(
name|retLoc11
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|retLoc12
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|locationsSet
operator|.
name|contains
argument_list|(
name|retLoc12
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executorLocationsSet
operator|.
name|contains
argument_list|(
name|retLoc12
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|retLoc13
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|locationsSet
operator|.
name|contains
argument_list|(
name|retLoc13
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executorLocationsSet
operator|.
name|contains
argument_list|(
name|retLoc13
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify the actual locations being correct.
comment|// os13 should be on a different location. Splits are supposed to be consistent across JVMs,
comment|// the test is setup to verify a different host (make sure not to hash to the same host as os11,os12).
comment|// If the test were to fail because the host is the same - the assumption about consistent across JVM
comment|// instances is likely incorrect.
name|assertEquals
argument_list|(
name|retLoc11
index|[
literal|0
index|]
argument_list|,
name|retLoc12
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|retLoc11
index|[
literal|0
index|]
argument_list|,
name|retLoc13
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Get locations again, and make sure they're the same.
name|String
index|[]
name|retLoc112
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os11
argument_list|)
decl_stmt|;
name|String
index|[]
name|retLoc122
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os12
argument_list|)
decl_stmt|;
name|String
index|[]
name|retLoc132
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os13
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|retLoc11
argument_list|,
name|retLoc112
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|retLoc12
argument_list|,
name|retLoc122
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|retLoc13
argument_list|,
name|retLoc132
argument_list|)
expr_stmt|;
block|}
specifier|private
name|InputSplit
name|createMockInputSplit
parameter_list|(
name|String
index|[]
name|locations
parameter_list|)
throws|throws
name|IOException
block|{
name|InputSplit
name|inputSplit
init|=
name|mock
argument_list|(
name|InputSplit
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|locations
argument_list|)
operator|.
name|when
argument_list|(
name|inputSplit
argument_list|)
operator|.
name|getLocations
argument_list|()
expr_stmt|;
return|return
name|inputSplit
return|;
block|}
specifier|private
name|InputSplit
name|createMockFileSplit
parameter_list|(
name|boolean
name|createOrcSplit
parameter_list|,
name|String
name|fakePathString
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|,
name|String
index|[]
name|locations
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSplit
name|fileSplit
decl_stmt|;
if|if
condition|(
name|createOrcSplit
condition|)
block|{
name|fileSplit
operator|=
name|mock
argument_list|(
name|OrcSplit
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileSplit
operator|=
name|mock
argument_list|(
name|FileSplit
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|doReturn
argument_list|(
name|start
argument_list|)
operator|.
name|when
argument_list|(
name|fileSplit
argument_list|)
operator|.
name|getStart
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|length
argument_list|)
operator|.
name|when
argument_list|(
name|fileSplit
argument_list|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
operator|new
name|Path
argument_list|(
name|fakePathString
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|fileSplit
argument_list|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|locations
argument_list|)
operator|.
name|when
argument_list|(
name|fileSplit
argument_list|)
operator|.
name|getLocations
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|locations
argument_list|)
operator|.
name|when
argument_list|(
name|fileSplit
argument_list|)
operator|.
name|getLocations
argument_list|()
expr_stmt|;
return|return
name|fileSplit
return|;
block|}
block|}
end_class

end_unit

