begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestHostAffinitySplitLocationProvider
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|locations
init|=
operator|new
name|String
index|[
literal|5
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|locationsSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|executorLocations
init|=
operator|new
name|String
index|[
literal|9
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|executorLocationsSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|locations
index|[
name|i
index|]
operator|=
literal|"location"
operator|+
name|i
expr_stmt|;
name|locationsSet
operator|.
name|add
argument_list|(
name|locations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
name|executorLocations
index|[
name|i
index|]
operator|=
literal|"execLocation"
operator|+
name|i
expr_stmt|;
name|executorLocationsSet
operator|.
name|add
argument_list|(
name|executorLocations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testNonFileSplits
parameter_list|()
throws|throws
name|IOException
block|{
name|HostAffinitySplitLocationProvider
name|locationProvider
init|=
operator|new
name|HostAffinitySplitLocationProvider
argument_list|(
name|executorLocations
argument_list|)
decl_stmt|;
name|InputSplit
name|inputSplit1
init|=
name|createMockInputSplit
argument_list|(
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|0
index|]
block|,
name|locations
index|[
literal|1
index|]
block|}
argument_list|)
decl_stmt|;
name|InputSplit
name|inputSplit2
init|=
name|createMockInputSplit
argument_list|(
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|2
index|]
block|,
name|locations
index|[
literal|3
index|]
block|}
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|0
index|]
block|,
name|locations
index|[
literal|1
index|]
block|}
argument_list|,
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|inputSplit1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|2
index|]
block|,
name|locations
index|[
literal|3
index|]
block|}
argument_list|,
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|inputSplit2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testOrcSplitsBasic
parameter_list|()
throws|throws
name|IOException
block|{
name|HostAffinitySplitLocationProvider
name|locationProvider
init|=
operator|new
name|HostAffinitySplitLocationProvider
argument_list|(
name|executorLocations
argument_list|)
decl_stmt|;
name|InputSplit
name|os1
init|=
name|createMockFileSplit
argument_list|(
literal|true
argument_list|,
literal|"path1"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|0
index|]
block|,
name|locations
index|[
literal|1
index|]
block|}
argument_list|)
decl_stmt|;
name|InputSplit
name|os2
init|=
name|createMockFileSplit
argument_list|(
literal|true
argument_list|,
literal|"path2"
argument_list|,
literal|0
argument_list|,
literal|2000
argument_list|,
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|2
index|]
block|,
name|locations
index|[
literal|3
index|]
block|}
argument_list|)
decl_stmt|;
name|InputSplit
name|os3
init|=
name|createMockFileSplit
argument_list|(
literal|true
argument_list|,
literal|"path3"
argument_list|,
literal|1000
argument_list|,
literal|2000
argument_list|,
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|0
index|]
block|,
name|locations
index|[
literal|3
index|]
block|}
argument_list|)
decl_stmt|;
name|String
index|[]
name|retLoc1
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os1
argument_list|)
decl_stmt|;
name|String
index|[]
name|retLoc2
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os2
argument_list|)
decl_stmt|;
name|String
index|[]
name|retLoc3
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|retLoc1
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|locationsSet
operator|.
name|contains
argument_list|(
name|retLoc1
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executorLocationsSet
operator|.
name|contains
argument_list|(
name|retLoc1
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|retLoc2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|locationsSet
operator|.
name|contains
argument_list|(
name|retLoc2
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executorLocationsSet
operator|.
name|contains
argument_list|(
name|retLoc2
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|retLoc3
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|locationsSet
operator|.
name|contains
argument_list|(
name|retLoc3
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executorLocationsSet
operator|.
name|contains
argument_list|(
name|retLoc3
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testOrcSplitsLocationAffinity
parameter_list|()
throws|throws
name|IOException
block|{
name|HostAffinitySplitLocationProvider
name|locationProvider
init|=
operator|new
name|HostAffinitySplitLocationProvider
argument_list|(
name|executorLocations
argument_list|)
decl_stmt|;
comment|// Same file, offset, different lengths
name|InputSplit
name|os11
init|=
name|createMockFileSplit
argument_list|(
literal|true
argument_list|,
literal|"path1"
argument_list|,
literal|0
argument_list|,
literal|15000
argument_list|,
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|0
index|]
block|,
name|locations
index|[
literal|1
index|]
block|}
argument_list|)
decl_stmt|;
name|InputSplit
name|os12
init|=
name|createMockFileSplit
argument_list|(
literal|true
argument_list|,
literal|"path1"
argument_list|,
literal|0
argument_list|,
literal|30000
argument_list|,
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|0
index|]
block|,
name|locations
index|[
literal|1
index|]
block|}
argument_list|)
decl_stmt|;
comment|// Same file, different offset
name|InputSplit
name|os13
init|=
name|createMockFileSplit
argument_list|(
literal|true
argument_list|,
literal|"path1"
argument_list|,
literal|15000
argument_list|,
literal|30000
argument_list|,
operator|new
name|String
index|[]
block|{
name|locations
index|[
literal|0
index|]
block|,
name|locations
index|[
literal|1
index|]
block|}
argument_list|)
decl_stmt|;
name|String
index|[]
name|retLoc11
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os11
argument_list|)
decl_stmt|;
name|String
index|[]
name|retLoc12
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os12
argument_list|)
decl_stmt|;
name|String
index|[]
name|retLoc13
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os13
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|retLoc11
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|locationsSet
operator|.
name|contains
argument_list|(
name|retLoc11
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executorLocationsSet
operator|.
name|contains
argument_list|(
name|retLoc11
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|retLoc12
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|locationsSet
operator|.
name|contains
argument_list|(
name|retLoc12
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executorLocationsSet
operator|.
name|contains
argument_list|(
name|retLoc12
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|retLoc13
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|locationsSet
operator|.
name|contains
argument_list|(
name|retLoc13
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|executorLocationsSet
operator|.
name|contains
argument_list|(
name|retLoc13
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify the actual locations being correct.
comment|// os13 should be on a different location. Splits are supposed to be consistent across JVMs,
comment|// the test is setup to verify a different host (make sure not to hash to the same host as os11,os12).
comment|// If the test were to fail because the host is the same - the assumption about consistent across JVM
comment|// instances is likely incorrect.
name|assertEquals
argument_list|(
name|retLoc11
index|[
literal|0
index|]
argument_list|,
name|retLoc12
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|retLoc11
index|[
literal|0
index|]
argument_list|,
name|retLoc13
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Get locations again, and make sure they're the same.
name|String
index|[]
name|retLoc112
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os11
argument_list|)
decl_stmt|;
name|String
index|[]
name|retLoc122
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os12
argument_list|)
decl_stmt|;
name|String
index|[]
name|retLoc132
init|=
name|locationProvider
operator|.
name|getLocations
argument_list|(
name|os13
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|retLoc11
argument_list|,
name|retLoc112
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|retLoc12
argument_list|,
name|retLoc122
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|retLoc13
argument_list|,
name|retLoc132
argument_list|)
expr_stmt|;
block|}
specifier|private
name|InputSplit
name|createMockInputSplit
parameter_list|(
name|String
index|[]
name|locations
parameter_list|)
throws|throws
name|IOException
block|{
name|InputSplit
name|inputSplit
init|=
name|mock
argument_list|(
name|InputSplit
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|locations
argument_list|)
operator|.
name|when
argument_list|(
name|inputSplit
argument_list|)
operator|.
name|getLocations
argument_list|()
expr_stmt|;
return|return
name|inputSplit
return|;
block|}
specifier|private
name|InputSplit
name|createMockFileSplit
parameter_list|(
name|boolean
name|createOrcSplit
parameter_list|,
name|String
name|fakePathString
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|,
name|String
index|[]
name|locations
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSplit
name|fileSplit
decl_stmt|;
if|if
condition|(
name|createOrcSplit
condition|)
block|{
name|fileSplit
operator|=
name|mock
argument_list|(
name|OrcSplit
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileSplit
operator|=
name|mock
argument_list|(
name|FileSplit
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|doReturn
argument_list|(
name|start
argument_list|)
operator|.
name|when
argument_list|(
name|fileSplit
argument_list|)
operator|.
name|getStart
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|length
argument_list|)
operator|.
name|when
argument_list|(
name|fileSplit
argument_list|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
operator|new
name|Path
argument_list|(
name|fakePathString
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|fileSplit
argument_list|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|locations
argument_list|)
operator|.
name|when
argument_list|(
name|fileSplit
argument_list|)
operator|.
name|getLocations
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|locations
argument_list|)
operator|.
name|when
argument_list|(
name|fileSplit
argument_list|)
operator|.
name|getLocations
argument_list|()
expr_stmt|;
return|return
name|fileSplit
return|;
block|}
block|}
end_class

end_unit

