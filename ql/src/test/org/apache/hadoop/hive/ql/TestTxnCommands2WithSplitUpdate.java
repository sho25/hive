begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_comment
comment|/**  * Same as TestTxnCommands2 but tests ACID tables with 'transactional_properties' set to 'default'.  * This tests whether ACID tables with split-update turned on are working correctly or not  * for the same set of tests when it is turned off. Of course, it also adds a few tests to test  * specific behaviors of ACID tables with split-update turned on.  */
end_comment

begin_class
specifier|public
class|class
name|TestTxnCommands2WithSplitUpdate
extends|extends
name|TestTxnCommands2
block|{
specifier|public
name|TestTxnCommands2WithSplitUpdate
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpWithTableProperties
argument_list|(
literal|"'transactional'='true','transactional_properties'='default'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
specifier|public
name|void
name|testInitiatorWithMultipleFailedCompactions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test with split-update turned on.
name|testInitiatorWithMultipleFailedCompactionsForVariousTblProperties
argument_list|(
literal|"'transactional'='true','transactional_properties'='default'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
specifier|public
name|void
name|writeBetweenWorkerAndCleaner
parameter_list|()
throws|throws
name|Exception
block|{
name|writeBetweenWorkerAndCleanerForVariousTblProperties
argument_list|(
literal|"'transactional'='true','transactional_properties'='default'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
specifier|public
name|void
name|testACIDwithSchemaEvolutionAndCompaction
parameter_list|()
throws|throws
name|Exception
block|{
name|testACIDwithSchemaEvolutionForVariousTblProperties
argument_list|(
literal|"'transactional'='true','transactional_properties'='default'"
argument_list|)
expr_stmt|;
block|}
comment|/**    * In current implementation of ACID, altering the value of transactional_properties or trying to    * set a value for previously unset value for an acid table will throw an exception.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testFailureOnAlteringTransactionalProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"TBLPROPERTIES with 'transactional_properties' cannot be altered after the table is created"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"create table acidTblLegacy (a int, b int) clustered by (a) into "
operator|+
name|BUCKET_COUNT
operator|+
literal|" buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"alter table acidTblLegacy SET TBLPROPERTIES ('transactional_properties' = 'default')"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the query correctness and directory layout for ACID table conversion with split-update    * enabled.    * 1. Insert a row to Non-ACID table    * 2. Convert Non-ACID to ACID table with split-update enabled    * 3. Insert a row to ACID table    * 4. Perform Major compaction    * 5. Clean    * @throws Exception    */
annotation|@
name|Test
annotation|@
name|Override
specifier|public
name|void
name|testNonAcidToAcidConversion1
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|status
decl_stmt|;
comment|// 1. Insert a row to Non-ACID table
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|"(a,b) values(1,2)"
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// There should be 2 original bucket files in the location (000000_0 and 000001_0)
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUCKET_COUNT
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"00000[01]_0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
decl_stmt|;
name|int
index|[]
index|[]
name|resultData
init|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|2
block|}
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|int
name|resultCount
init|=
literal|1
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2. Convert NONACIDORCTBL to ACID table
name|runStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|" SET TBLPROPERTIES ('transactional'='true', 'transactional_properties'='default')"
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// Everything should be same as before
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUCKET_COUNT
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"00000[01]_0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultData
operator|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|2
block|}
block|}
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultCount
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3. Insert another row to newly-converted ACID table
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|"(a,b) values(3,4)"
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// There should be 2 original bucket files (000000_0 and 000001_0), plus a new delta directory.
comment|// The delta directory should also have only 1 bucket file (bucket_00001)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|boolean
name|sawNewDelta
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"delta_.*"
argument_list|)
condition|)
block|{
name|sawNewDelta
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// only one bucket file
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_00001"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"00000[01]_0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawNewDelta
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|" order by a,b"
argument_list|)
expr_stmt|;
name|resultData
operator|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultCount
operator|=
literal|2
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4. Perform a major compaction
name|runStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|" compact 'MAJOR'"
argument_list|)
expr_stmt|;
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// There should be 1 new directory: base_xxxxxxx.
comment|// Original bucket files and delta directory should stay until Cleaner kicks in.
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|boolean
name|sawNewBase
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"base_.*"
argument_list|)
condition|)
block|{
name|sawNewBase
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_00001"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawNewBase
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultData
operator|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultCount
operator|=
literal|2
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 5. Let Cleaner delete obsolete files/dirs
comment|// Note, here we create a fake directory along with fake files as original directories/files
name|String
name|fakeFile0
init|=
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"/subdir/000000_0"
decl_stmt|;
name|String
name|fakeFile1
init|=
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"/subdir/000000_1"
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|fakeFile0
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|fakeFile1
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// Before Cleaner, there should be 5 items:
comment|// 2 original files, 1 original directory, 1 base directory and 1 delta directory
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|runCleaner
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// There should be only 1 directory left: base_xxxxxxx.
comment|// Original bucket files and delta directory should have been cleaned up.
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"base_.*"
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|status
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_00001"
argument_list|)
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultData
operator|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultCount
operator|=
literal|2
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the query correctness and directory layout for ACID table conversion with split-update    * enabled.    * 1. Insert a row to Non-ACID table    * 2. Convert Non-ACID to ACID table with split update enabled.    * 3. Update the existing row in ACID table    * 4. Perform Major compaction    * 5. Clean    * @throws Exception    */
annotation|@
name|Test
annotation|@
name|Override
specifier|public
name|void
name|testNonAcidToAcidConversion2
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|status
decl_stmt|;
comment|// 1. Insert a row to Non-ACID table
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|"(a,b) values(1,2)"
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// There should be 2 original bucket files in the location (000000_0 and 000001_0)
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUCKET_COUNT
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"00000[01]_0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
decl_stmt|;
name|int
index|[]
index|[]
name|resultData
init|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|2
block|}
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|int
name|resultCount
init|=
literal|1
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2. Convert NONACIDORCTBL to ACID table
name|runStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|" SET TBLPROPERTIES ('transactional'='true', 'transactional_properties'='default')"
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// Everything should be same as before
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUCKET_COUNT
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"00000[01]_0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultData
operator|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|2
block|}
block|}
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultCount
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3. Update the existing row in newly-converted ACID table
name|runStatementOnDriver
argument_list|(
literal|"update "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|" set b=3 where a=1"
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// There should be 2 original bucket files (000000_0 and 000001_0), plus one delta directory
comment|// and one delete_delta directory. When split-update is enabled, an update event is split into
comment|// a combination of delete and insert, that generates the delete_delta directory.
comment|// The delta directory should also have 2 bucket files (bucket_00000 and bucket_00001)
comment|// and so should the delete_delta directory.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|boolean
name|sawNewDelta
init|=
literal|false
decl_stmt|;
name|boolean
name|sawNewDeleteDelta
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"delta_.*"
argument_list|)
condition|)
block|{
name|sawNewDelta
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUCKET_COUNT
operator|-
literal|1
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"delete_delta_.*"
argument_list|)
condition|)
block|{
name|sawNewDeleteDelta
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUCKET_COUNT
operator|-
literal|1
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_0000[01]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"00000[01]_0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawNewDelta
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawNewDeleteDelta
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultData
operator|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|3
block|}
block|}
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultCount
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4. Perform a major compaction
name|runStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|" compact 'MAJOR'"
argument_list|)
expr_stmt|;
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// There should be 1 new directory: base_0000001.
comment|// Original bucket files and delta directory should stay until Cleaner kicks in.
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|boolean
name|sawNewBase
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"base_.*"
argument_list|)
condition|)
block|{
name|sawNewBase
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUCKET_COUNT
operator|-
literal|1
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_00001"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawNewBase
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultData
operator|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|3
block|}
block|}
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultCount
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 5. Let Cleaner delete obsolete files/dirs
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// Before Cleaner, there should be 5 items:
comment|// 2 original files, 1 delta directory, 1 delete_delta directory and 1 base directory
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|runCleaner
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// There should be only 1 directory left: base_0000001.
comment|// Original bucket files, delta directory and delete_delta should have been cleaned up.
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"base_.*"
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|status
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUCKET_COUNT
operator|-
literal|1
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"bucket_00001"
argument_list|)
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultData
operator|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|3
block|}
block|}
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultCount
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the query correctness and directory layout for ACID table conversion with split-update    * enabled.    * 1. Insert a row to Non-ACID table    * 2. Convert Non-ACID to ACID table with split-update enabled    * 3. Perform Major compaction    * 4. Insert a new row to ACID table    * 5. Perform another Major compaction    * 6. Clean    * @throws Exception    */
annotation|@
name|Test
annotation|@
name|Override
specifier|public
name|void
name|testNonAcidToAcidConversion3
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|status
decl_stmt|;
comment|// 1. Insert a row to Non-ACID table
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|"(a,b) values(1,2)"
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// There should be 2 original bucket files in the location (000000_0 and 000001_0)
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUCKET_COUNT
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"00000[01]_0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
decl_stmt|;
name|int
index|[]
index|[]
name|resultData
init|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|2
block|}
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|int
name|resultCount
init|=
literal|1
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2. Convert NONACIDORCTBL to ACID table with split_update enabled. (txn_props=default)
name|runStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|" SET TBLPROPERTIES ('transactional'='true', 'transactional_properties'='default')"
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// Everything should be same as before
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUCKET_COUNT
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"00000[01]_0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultData
operator|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|2
block|}
block|}
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultCount
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3. Perform a major compaction
name|runStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|" compact 'MAJOR'"
argument_list|)
expr_stmt|;
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// There should be 1 new directory: base_-9223372036854775808
comment|// Original bucket files should stay until Cleaner kicks in.
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|boolean
name|sawNewBase
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"base_.*"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"base_-9223372036854775808"
argument_list|,
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sawNewBase
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUCKET_COUNT
operator|-
literal|1
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bucket_00001"
argument_list|,
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawNewBase
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultData
operator|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|2
block|}
block|}
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultCount
operator|=
literal|1
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4. Update the existing row, and insert another row to newly-converted ACID table
name|runStatementOnDriver
argument_list|(
literal|"update "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|" set b=3 where a=1"
argument_list|)
expr_stmt|;
name|runStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|"(a,b) values(3,4)"
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|// make sure delta_0000001_0000001_0000 appears before delta_0000002_0000002_0000
comment|// There should be 2 original bucket files (000000_0 and 000001_0), a base directory,
comment|// plus two new delta directories and one delete_delta directory that would be created due to
comment|// the update statement (remember split-update U=D+I)!
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|numDelta
init|=
literal|0
decl_stmt|;
name|int
name|numDeleteDelta
init|=
literal|0
decl_stmt|;
name|sawNewBase
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"delta_.*"
argument_list|)
condition|)
block|{
name|numDelta
operator|++
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|buckets
argument_list|)
expr_stmt|;
if|if
condition|(
name|numDelta
operator|==
literal|1
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"delta_0000022_0000022_0000"
argument_list|,
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUCKET_COUNT
operator|-
literal|1
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bucket_00001"
argument_list|,
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numDelta
operator|==
literal|2
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"delta_0000023_0000023_0000"
argument_list|,
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bucket_00001"
argument_list|,
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"delete_delta_.*"
argument_list|)
condition|)
block|{
name|numDeleteDelta
operator|++
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|buckets
argument_list|)
expr_stmt|;
if|if
condition|(
name|numDeleteDelta
operator|==
literal|1
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"delete_delta_0000022_0000022_0000"
argument_list|,
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUCKET_COUNT
operator|-
literal|1
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bucket_00001"
argument_list|,
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"base_.*"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"base_-9223372036854775808"
argument_list|,
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sawNewBase
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUCKET_COUNT
operator|-
literal|1
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bucket_00001"
argument_list|,
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"00000[01]_0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|numDelta
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numDeleteDelta
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawNewBase
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultData
operator|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|3
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultCount
operator|=
literal|2
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 5. Perform another major compaction
name|runStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
operator|+
literal|" compact 'MAJOR'"
argument_list|)
expr_stmt|;
name|runWorker
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// There should be 1 new base directory: base_0000001
comment|// Original bucket files, delta directories, delete_delta directories and the
comment|// previous base directory should stay until Cleaner kicks in.
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|numBase
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"base_.*"
argument_list|)
condition|)
block|{
name|numBase
operator|++
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|buckets
argument_list|)
expr_stmt|;
if|if
condition|(
name|numBase
operator|==
literal|1
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"base_-9223372036854775808"
argument_list|,
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUCKET_COUNT
operator|-
literal|1
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bucket_00001"
argument_list|,
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numBase
operator|==
literal|2
condition|)
block|{
comment|// The new base dir now has two bucket files, since the delta dir has two bucket files
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"base_0000023"
argument_list|,
name|status
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bucket_00001"
argument_list|,
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|numBase
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultData
operator|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|3
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultCount
operator|=
literal|2
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 6. Let Cleaner delete obsolete files/dirs
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
comment|// Before Cleaner, there should be 6 items:
comment|// 2 original files, 2 delta directories, 1 delete_delta directory and 2 base directories
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|runCleaner
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// There should be only 1 directory left: base_0000001.
comment|// Original bucket files, delta directories and previous base directory should have been cleaned up.
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_WAREHOUSE_DIR
operator|+
literal|"/"
operator|+
operator|(
name|Table
operator|.
name|NONACIDORCTBL
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"base_0000023"
argument_list|,
name|status
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|buckets
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|status
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|STAGING_DIR_PATH_FILTER
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|buckets
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|buckets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bucket_00001"
argument_list|,
name|buckets
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select a,b from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultData
operator|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|3
block|}
block|,
block|{
literal|3
block|,
literal|4
block|}
block|}
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringifyValues
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|rs
argument_list|)
expr_stmt|;
name|rs
operator|=
name|runStatementOnDriver
argument_list|(
literal|"select count(*) from "
operator|+
name|Table
operator|.
name|NONACIDORCTBL
argument_list|)
expr_stmt|;
name|resultCount
operator|=
literal|2
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

