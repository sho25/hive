begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapping
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|IDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CommonJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
operator|.
name|PlanMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
operator|.
name|StatsSources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
operator|.
name|PlanMapper
operator|.
name|EquivGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|OperatorStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|OperatorStatsReaderHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|testutils
operator|.
name|HiveTestEnvSetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_class
specifier|public
class|class
name|TestReOptimization
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
name|HiveTestEnvSetup
name|env_setup
init|=
operator|new
name|HiveTestEnvSetup
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestRule
name|methodRule
init|=
name|env_setup
operator|.
name|getMethodRule
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|dropTables
argument_list|(
name|driver
argument_list|)
expr_stmt|;
name|String
index|[]
name|cmds
init|=
block|{
comment|// @formatter:off
literal|"create table tu(id_uv int,id_uw int,u int)"
block|,
literal|"create table tv(id_uv int,v int)"
block|,
literal|"create table tw(id_uw int,w int)"
block|,
literal|"insert into tu values (10,10,10),(1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5),(6,6,6)"
block|,
literal|"insert into tv values (10,10),(1,1),(2,2),(3,3)"
block|,
literal|"insert into tw values (10,10),(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9)"
block|,
comment|// @formatter:on
block|}
decl_stmt|;
for|for
control|(
name|String
name|cmd
range|:
name|cmds
control|)
block|{
name|driver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|dropTables
argument_list|(
name|driver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
block|{
name|StatsSources
operator|.
name|clearGlobalStats
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|dropTables
parameter_list|(
name|IDriver
name|driver
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|tables
init|=
operator|new
name|String
index|[]
block|{
literal|"tu"
block|,
literal|"tv"
block|,
literal|"tw"
block|}
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|tables
control|)
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PlanMapper
name|getMapperForQuery
parameter_list|(
name|IDriver
name|driver
parameter_list|,
name|String
name|query
parameter_list|)
block|{
try|try
block|{
name|driver
operator|.
name|run
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandProcessorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"running the query "
operator|+
name|query
operator|+
literal|" was not successful"
argument_list|)
throw|;
block|}
name|PlanMapper
name|pm0
init|=
name|driver
operator|.
name|getContext
argument_list|()
operator|.
name|getPlanMapper
argument_list|()
decl_stmt|;
return|return
name|pm0
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatsAreSetInReopt
parameter_list|()
throws|throws
name|Exception
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|(
literal|"overlay,reoptimize"
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"select assert_true_oom(${hiveconf:zzz}> sum(u*v))"
operator|+
literal|" from tu join tv on (tu.id_uv=tv.id_uv)"
operator|+
literal|" where u<10 and v>1"
decl_stmt|;
name|PlanMapper
name|pm
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|EquivGroup
argument_list|>
name|itG
init|=
name|pm
operator|.
name|iterateGroups
argument_list|()
decl_stmt|;
name|int
name|checkedOperators
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|itG
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EquivGroup
name|g
init|=
name|itG
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FilterOperator
argument_list|>
name|fos
init|=
name|g
operator|.
name|getAll
argument_list|(
name|FilterOperator
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OperatorStats
argument_list|>
name|oss
init|=
name|g
operator|.
name|getAll
argument_list|(
name|OperatorStats
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// FIXME: oss seems to contain duplicates
if|if
condition|(
name|fos
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|oss
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|fos
operator|.
name|sort
argument_list|(
name|TestCounterMapping
operator|.
name|OPERATOR_ID_COMPARATOR
operator|.
name|reversed
argument_list|()
argument_list|)
expr_stmt|;
name|FilterOperator
name|fo
init|=
name|fos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|OperatorStats
name|os
init|=
name|oss
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Statistics
name|stats
init|=
name|fo
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|os
operator|.
name|getOutputRecords
argument_list|()
argument_list|,
name|stats
operator|.
name|getNumRows
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|os
operator|.
name|getOutputRecords
argument_list|()
operator|==
literal|3
operator|||
name|os
operator|.
name|getOutputRecords
argument_list|()
operator|==
literal|6
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"nonexpected number of records produced"
argument_list|)
expr_stmt|;
block|}
name|checkedOperators
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|checkedOperators
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReExecutedIfMapJoinError
parameter_list|()
throws|throws
name|Exception
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|(
literal|"overlay,reoptimize"
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"select assert_true_oom(${hiveconf:zzz}>sum(1)) from tu join tv on (tu.id_uv=tv.id_uv) where u<10 and v>1"
decl_stmt|;
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|exceptionRule
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testNotReExecutedIfAssertionError
parameter_list|()
throws|throws
name|Exception
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|(
literal|"reoptimize"
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"select assert_true(${hiveconf:zzz}>sum(1)) from tu join tv on (tu.id_uv=tv.id_uv) where u<10 and v>1"
decl_stmt|;
name|exceptionRule
operator|.
name|expect
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exceptionRule
operator|.
name|expectMessage
argument_list|(
literal|"running the query "
operator|+
name|query
operator|+
literal|" was not successful"
argument_list|)
expr_stmt|;
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatCachingQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
name|env_setup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
decl_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_STATS_PERSISTENCE
argument_list|,
literal|"query"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_ALWAYS_COLLECT_OPERATOR_STATS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkRuntimeStatsReuse
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatCachingHS2
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
name|env_setup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
decl_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_STATS_PERSISTENCE
argument_list|,
literal|"hiveserver"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_ALWAYS_COLLECT_OPERATOR_STATS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkRuntimeStatsReuse
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatCachingMetaStore
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
name|env_setup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
decl_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_STATS_PERSISTENCE
argument_list|,
literal|"metastore"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_ALWAYS_COLLECT_OPERATOR_STATS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkRuntimeStatsReuse
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkRuntimeStatsReuse
parameter_list|(
name|boolean
name|expectInSameSession
parameter_list|,
name|boolean
name|expectNewHs2Session
parameter_list|,
name|boolean
name|expectHs2Instance
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
block|{
comment|// same session
name|IDriver
name|driver
init|=
name|createDriver
argument_list|(
literal|"reoptimize"
argument_list|)
decl_stmt|;
name|checkUsageOfRuntimeStats
argument_list|(
name|driver
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|driver
operator|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|env_setup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
argument_list|)
expr_stmt|;
name|checkUsageOfRuntimeStats
argument_list|(
name|driver
argument_list|,
name|expectInSameSession
argument_list|)
expr_stmt|;
block|}
block|{
comment|// new session
name|IDriver
name|driver
init|=
name|createDriver
argument_list|(
literal|"reoptimize"
argument_list|)
decl_stmt|;
name|checkUsageOfRuntimeStats
argument_list|(
name|driver
argument_list|,
name|expectNewHs2Session
argument_list|)
expr_stmt|;
block|}
name|StatsSources
operator|.
name|clearGlobalStats
argument_list|()
expr_stmt|;
block|{
comment|// new hs2 instance session
name|IDriver
name|driver
init|=
name|createDriver
argument_list|(
literal|"reoptimize"
argument_list|)
decl_stmt|;
comment|// loading of metastore stats is async; execute a simple to ensure they are loaded
name|driver
operator|.
name|run
argument_list|(
literal|"select count(*) from tu group by id_uv"
argument_list|)
expr_stmt|;
name|checkUsageOfRuntimeStats
argument_list|(
name|driver
argument_list|,
name|expectHs2Instance
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|void
name|checkUsageOfRuntimeStats
parameter_list|(
name|IDriver
name|driver
parameter_list|,
name|boolean
name|expected
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
name|String
name|query
init|=
literal|"select sum(u) from tu join tv on (tu.id_uv=tv.id_uv) where u<10 and v>1"
decl_stmt|;
name|PlanMapper
name|pm
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|driver
operator|.
name|getContext
argument_list|()
operator|.
name|getExecutionIndex
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommonJoinOperator
argument_list|>
name|allJoin
init|=
name|pm
operator|.
name|getAll
argument_list|(
name|CommonJoinOperator
operator|.
name|class
argument_list|)
decl_stmt|;
name|CommonJoinOperator
name|join
init|=
name|allJoin
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Statistics
name|joinStat
init|=
name|join
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"expectation of the usage of runtime stats doesn't match"
argument_list|,
name|expected
argument_list|,
name|joinStat
operator|.
name|isRuntimeStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExplainSupport
parameter_list|()
throws|throws
name|Exception
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|(
literal|"overlay,reoptimize"
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"explain reoptimization select 1 from tu join tv on (tu.id_uv=tv.id_uv) where u<10 and v>1"
decl_stmt|;
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|res1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|driver
operator|.
name|getResults
argument_list|(
name|res1
argument_list|)
condition|)
block|{
name|res
operator|.
name|addAll
argument_list|(
name|res1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"2FIL"
argument_list|,
literal|2
argument_list|,
name|res
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|line
lambda|->
name|line
operator|.
name|contains
argument_list|(
literal|"FIL_"
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2FIL(runtime)"
argument_list|,
literal|2
argument_list|,
name|res
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|line
lambda|->
name|line
operator|.
name|contains
argument_list|(
literal|"FIL"
argument_list|)
operator|&&
name|line
operator|.
name|contains
argument_list|(
literal|"runtime"
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReOptimizationCanSendBackStatsToCBO
parameter_list|()
throws|throws
name|Exception
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|(
literal|"overlay,reoptimize"
argument_list|)
decl_stmt|;
comment|// @formatter:off
name|String
name|query
init|=
literal|"select assert_true_oom(${hiveconf:zzz}> sum(u*v*w)) from tu\n"
operator|+
literal|"        join tv on (tu.id_uv=tv.id_uv)\n"
operator|+
literal|"        join tw on (tu.id_uw=tw.id_uw)\n"
operator|+
literal|"        where w>9 and u>1 and v>3"
decl_stmt|;
comment|// @formatter:on
name|PlanMapper
name|pm
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|EquivGroup
argument_list|>
name|itG
init|=
name|pm
operator|.
name|iterateGroups
argument_list|()
decl_stmt|;
name|int
name|checkedOperators
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|itG
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EquivGroup
name|g
init|=
name|itG
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FilterOperator
argument_list|>
name|fos
init|=
name|g
operator|.
name|getAll
argument_list|(
name|FilterOperator
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OperatorStats
argument_list|>
name|oss
init|=
name|g
operator|.
name|getAll
argument_list|(
name|OperatorStats
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HiveFilter
argument_list|>
name|hfs
init|=
name|g
operator|.
name|getAll
argument_list|(
name|HiveFilter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fos
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|oss
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|hfs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|fos
operator|.
name|sort
argument_list|(
name|TestCounterMapping
operator|.
name|OPERATOR_ID_COMPARATOR
operator|.
name|reversed
argument_list|()
argument_list|)
expr_stmt|;
name|HiveFilter
name|hf
init|=
name|hfs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FilterOperator
name|fo
init|=
name|fos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|OperatorStats
name|os
init|=
name|oss
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|cntFilter
init|=
name|RelMetadataQuery
operator|.
name|instance
argument_list|()
operator|.
name|getRowCount
argument_list|(
name|hf
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fo
operator|.
name|getStatistics
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// in case the join order is changed the subTree-s are not matching anymore because an RS is present in the condition
comment|// assertEquals(os.getOutputRecords(), fo.getStatistics().getNumRows());
block|}
name|assertEquals
argument_list|(
name|os
operator|.
name|getOutputRecords
argument_list|()
argument_list|,
name|cntFilter
argument_list|)
expr_stmt|;
name|checkedOperators
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|checkedOperators
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|IDriver
name|createDriver
parameter_list|(
name|String
name|strategies
parameter_list|)
block|{
name|HiveConf
name|conf
init|=
name|env_setup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
decl_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_STRATEGIES
argument_list|,
name|strategies
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_EXPLAIN_USER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"zzz"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"reexec.overlay.zzz"
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
comment|//
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
argument_list|,
name|OperatorStatsReaderHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|IDriver
name|driver
init|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|driver
return|;
block|}
block|}
end_class

end_unit

