begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestGenericUDAFCorrelation
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testCorr
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDAFCorrelation
name|corr
init|=
operator|new
name|GenericUDAFCorrelation
argument_list|()
decl_stmt|;
name|GenericUDAFEvaluator
name|eval1
init|=
name|corr
operator|.
name|getEvaluator
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
block|}
argument_list|)
decl_stmt|;
name|GenericUDAFEvaluator
name|eval2
init|=
name|corr
operator|.
name|getEvaluator
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
block|}
argument_list|)
decl_stmt|;
name|ObjectInspector
name|poi1
init|=
name|eval1
operator|.
name|init
argument_list|(
name|GenericUDAFEvaluator
operator|.
name|Mode
operator|.
name|PARTIAL1
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|PrimitiveObjectInspectorFactory
operator|.
name|javaDoubleObjectInspector
block|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaDoubleObjectInspector
block|}
argument_list|)
decl_stmt|;
name|ObjectInspector
name|poi2
init|=
name|eval2
operator|.
name|init
argument_list|(
name|GenericUDAFEvaluator
operator|.
name|Mode
operator|.
name|PARTIAL1
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|PrimitiveObjectInspectorFactory
operator|.
name|javaDoubleObjectInspector
block|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaDoubleObjectInspector
block|}
argument_list|)
decl_stmt|;
name|GenericUDAFEvaluator
operator|.
name|AggregationBuffer
name|buffer1
init|=
name|eval1
operator|.
name|getNewAggregationBuffer
argument_list|()
decl_stmt|;
name|eval1
operator|.
name|iterate
argument_list|(
name|buffer1
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|100d
block|,
literal|200d
block|}
argument_list|)
expr_stmt|;
name|eval1
operator|.
name|iterate
argument_list|(
name|buffer1
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|150d
block|,
literal|210d
block|}
argument_list|)
expr_stmt|;
name|eval1
operator|.
name|iterate
argument_list|(
name|buffer1
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|200d
block|,
literal|220d
block|}
argument_list|)
expr_stmt|;
name|Object
name|object1
init|=
name|eval1
operator|.
name|terminatePartial
argument_list|(
name|buffer1
argument_list|)
decl_stmt|;
name|GenericUDAFEvaluator
operator|.
name|AggregationBuffer
name|buffer2
init|=
name|eval2
operator|.
name|getNewAggregationBuffer
argument_list|()
decl_stmt|;
name|eval2
operator|.
name|iterate
argument_list|(
name|buffer2
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|250d
block|,
literal|230d
block|}
argument_list|)
expr_stmt|;
name|eval2
operator|.
name|iterate
argument_list|(
name|buffer2
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|250d
block|,
literal|240d
block|}
argument_list|)
expr_stmt|;
name|eval2
operator|.
name|iterate
argument_list|(
name|buffer2
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|300d
block|,
literal|250d
block|}
argument_list|)
expr_stmt|;
name|eval2
operator|.
name|iterate
argument_list|(
name|buffer2
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|350d
block|,
literal|260d
block|}
argument_list|)
expr_stmt|;
name|Object
name|object2
init|=
name|eval2
operator|.
name|terminatePartial
argument_list|(
name|buffer2
argument_list|)
decl_stmt|;
name|ObjectInspector
name|coi
init|=
name|eval2
operator|.
name|init
argument_list|(
name|GenericUDAFEvaluator
operator|.
name|Mode
operator|.
name|FINAL
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|poi1
block|}
argument_list|)
decl_stmt|;
name|GenericUDAFEvaluator
operator|.
name|AggregationBuffer
name|buffer3
init|=
name|eval2
operator|.
name|getNewAggregationBuffer
argument_list|()
decl_stmt|;
name|eval2
operator|.
name|merge
argument_list|(
name|buffer3
argument_list|,
name|object1
argument_list|)
expr_stmt|;
name|eval2
operator|.
name|merge
argument_list|(
name|buffer3
argument_list|,
name|object2
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|eval2
operator|.
name|terminate
argument_list|(
name|buffer3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"0.987829161147262"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

