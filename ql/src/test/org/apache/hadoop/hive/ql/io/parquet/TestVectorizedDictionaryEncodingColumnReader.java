begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
specifier|public
class|class
name|TestVectorizedDictionaryEncodingColumnReader
extends|extends
name|TestVectorizedColumnReaderBase
block|{
specifier|static
name|boolean
name|isDictionaryEncoding
init|=
literal|true
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|removeFile
argument_list|()
expr_stmt|;
name|writeData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|removeFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntRead
parameter_list|()
throws|throws
name|Exception
block|{
name|intRead
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongRead
parameter_list|()
throws|throws
name|Exception
block|{
name|longRead
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleRead
parameter_list|()
throws|throws
name|Exception
block|{
name|doubleRead
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloatRead
parameter_list|()
throws|throws
name|Exception
block|{
name|floatRead
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinaryRead
parameter_list|()
throws|throws
name|Exception
block|{
name|binaryRead
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructRead
parameter_list|()
throws|throws
name|Exception
block|{
name|structRead
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedStructRead
parameter_list|()
throws|throws
name|Exception
block|{
name|structRead
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|structReadSomeNull
parameter_list|()
throws|throws
name|Exception
block|{
name|structReadSomeNull
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|decimalRead
parameter_list|()
throws|throws
name|Exception
block|{
name|decimalRead
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

