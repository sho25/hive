begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredJavaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|TestGenericUDFMonthsBetween
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testMonthsBetweenForString
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// Default run
name|GenericUDFMonthsBetween
name|udf
init|=
operator|new
name|GenericUDFMonthsBetween
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
name|valueOI2
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI1
block|,
name|valueOI2
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|testMonthsBetweenForString
argument_list|(
name|udf
argument_list|)
expr_stmt|;
comment|// Run without round-off
name|GenericUDFMonthsBetween
name|udfWithoutRoundOff
init|=
operator|new
name|GenericUDFMonthsBetween
argument_list|()
decl_stmt|;
name|ObjectInspector
name|vOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
name|vOI2
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
name|vOI3
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
operator|new
name|BooleanWritable
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|args
init|=
block|{
name|vOI1
block|,
name|vOI2
block|,
name|vOI3
block|}
decl_stmt|;
name|udfWithoutRoundOff
operator|.
name|initialize
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|testMonthsBetweenForString
argument_list|(
name|udf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWrongDateStr
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFMonthsBetween
name|udf
init|=
operator|new
name|GenericUDFMonthsBetween
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
name|valueOI2
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI1
block|,
name|valueOI2
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|runTestStr
argument_list|(
literal|"2002-03"
argument_list|,
literal|"2002-02-24"
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestStr
argument_list|(
literal|"2002-03-24"
argument_list|,
literal|"2002-02"
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMonthsBetweenForString
parameter_list|(
name|GenericUDFMonthsBetween
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// test month diff with fraction considering time components
name|runTestStr
argument_list|(
literal|"1995-02-02"
argument_list|,
literal|"1995-01-01"
argument_list|,
literal|1.03225806
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestStr
argument_list|(
literal|"2003-07-17"
argument_list|,
literal|"2005-07-06"
argument_list|,
operator|-
literal|23.64516129
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test the last day of month
name|runTestStr
argument_list|(
literal|"2001-06-30"
argument_list|,
literal|"2000-05-31"
argument_list|,
literal|13.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test the same day of month
name|runTestStr
argument_list|(
literal|"2000-06-01"
argument_list|,
literal|"2004-07-01"
argument_list|,
operator|-
literal|49.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test February of non-leap year, 2/28
name|runTestStr
argument_list|(
literal|"2002-02-28"
argument_list|,
literal|"2002-03-01"
argument_list|,
operator|-
literal|0.12903226
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test February of non-leap year, 2/31 is viewd as 3/3 due to 3 days diff
comment|// from 2/31 to 2/28
name|runTestStr
argument_list|(
literal|"2002-02-31"
argument_list|,
literal|"2002-03-01"
argument_list|,
literal|0.06451613
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test Feb of leap year, 2/29
name|runTestStr
argument_list|(
literal|"2012-02-29"
argument_list|,
literal|"2012-03-01"
argument_list|,
operator|-
literal|0.09677419
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test february of leap year, 2/31 is viewed as 3/2 due to 2 days diff from
comment|// 2/31 to 2/29
name|runTestStr
argument_list|(
literal|"2012-02-31"
argument_list|,
literal|"2012-03-01"
argument_list|,
literal|0.03225806
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// time part
comment|// test that there is no lead second adjustment
name|runTestStr
argument_list|(
literal|"1976-01-01 00:00:00"
argument_list|,
literal|"1975-12-31 23:59:59"
argument_list|,
literal|0.00000037
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test UDF considers the difference in time components date1 and date2
name|runTestStr
argument_list|(
literal|"1997-02-28 10:30:00"
argument_list|,
literal|"1996-10-30"
argument_list|,
literal|3.94959677
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestStr
argument_list|(
literal|"1996-10-30"
argument_list|,
literal|"1997-02-28 10:30:00"
argument_list|,
operator|-
literal|3.94959677
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// if both are last day of the month then time part should be ignored
name|runTestStr
argument_list|(
literal|"2002-03-31"
argument_list|,
literal|"2002-02-28"
argument_list|,
literal|1.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestStr
argument_list|(
literal|"2002-03-31"
argument_list|,
literal|"2002-02-28 10:30:00"
argument_list|,
literal|1.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestStr
argument_list|(
literal|"2002-03-31 10:30:00"
argument_list|,
literal|"2002-02-28"
argument_list|,
literal|1.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// if the same day of the month then time part should be ignored
name|runTestStr
argument_list|(
literal|"2002-03-24"
argument_list|,
literal|"2002-02-24"
argument_list|,
literal|1.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestStr
argument_list|(
literal|"2002-03-24"
argument_list|,
literal|"2002-02-24 10:30:00"
argument_list|,
literal|1.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestStr
argument_list|(
literal|"2002-03-24 10:30:00"
argument_list|,
literal|"2002-02-24"
argument_list|,
literal|1.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// partial time. time part will be skipped
name|runTestStr
argument_list|(
literal|"1995-02-02 10:39"
argument_list|,
literal|"1995-01-01"
argument_list|,
literal|1.03225806
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestStr
argument_list|(
literal|"1995-02-02"
argument_list|,
literal|"1995-01-01 10:39"
argument_list|,
literal|1.03225806
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// no leading 0 for month and day should work
name|runTestStr
argument_list|(
literal|"1995-02-2"
argument_list|,
literal|"1995-1-01"
argument_list|,
literal|1.03225806
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestStr
argument_list|(
literal|"1995-2-02"
argument_list|,
literal|"1995-01-1"
argument_list|,
literal|1.03225806
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// short year should work
name|runTestStr
argument_list|(
literal|"495-2-02"
argument_list|,
literal|"495-01-1"
argument_list|,
literal|1.03225806
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestStr
argument_list|(
literal|"95-2-02"
argument_list|,
literal|"95-01-1"
argument_list|,
literal|1.03225806
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestStr
argument_list|(
literal|"5-2-02"
argument_list|,
literal|"5-01-1"
argument_list|,
literal|1.03225806
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// Test with null args
name|runTestStr
argument_list|(
literal|null
argument_list|,
literal|"2002-03-01"
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestStr
argument_list|(
literal|"2002-02-28"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestStr
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestStr
argument_list|(
literal|"2003-04-23"
argument_list|,
literal|"2002-04-24"
argument_list|,
literal|11.96774194
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMonthsBetweenForTimestamp
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFMonthsBetween
name|udf
init|=
operator|new
name|GenericUDFMonthsBetween
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
decl_stmt|;
name|ObjectInspector
name|valueOI2
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI1
block|,
name|valueOI2
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|testMonthsBetweenForTimestamp
argument_list|(
name|udf
argument_list|)
expr_stmt|;
comment|// Run without round-off
name|GenericUDFMonthsBetween
name|udfWithoutRoundOff
init|=
operator|new
name|GenericUDFMonthsBetween
argument_list|()
decl_stmt|;
name|ObjectInspector
name|vOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
decl_stmt|;
name|ObjectInspector
name|vOI2
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
decl_stmt|;
name|ObjectInspector
name|vOI3
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
operator|new
name|BooleanWritable
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|args
init|=
block|{
name|vOI1
block|,
name|vOI2
block|,
name|vOI3
block|}
decl_stmt|;
name|udfWithoutRoundOff
operator|.
name|initialize
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|testMonthsBetweenForTimestamp
argument_list|(
name|udfWithoutRoundOff
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMonthsBetweenForTimestamp
parameter_list|(
name|GenericUDFMonthsBetween
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// test month diff with fraction considering time components
name|runTestTs
argument_list|(
literal|"1995-02-02 00:00:00"
argument_list|,
literal|"1995-01-01 00:00:00"
argument_list|,
literal|1.03225806
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestTs
argument_list|(
literal|"2003-07-17 00:00:00"
argument_list|,
literal|"2005-07-06 00:00:00"
argument_list|,
operator|-
literal|23.64516129
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test the last day of month
name|runTestTs
argument_list|(
literal|"2001-06-30 00:00:00"
argument_list|,
literal|"2000-05-31 00:00:00"
argument_list|,
literal|13.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test the same day of month
name|runTestTs
argument_list|(
literal|"2000-06-01 00:00:00"
argument_list|,
literal|"2004-07-01 00:00:00"
argument_list|,
operator|-
literal|49.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test February of non-leap year, 2/28
name|runTestTs
argument_list|(
literal|"2002-02-28 00:00:00"
argument_list|,
literal|"2002-03-01 00:00:00"
argument_list|,
operator|-
literal|0.12903226
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test February of non-leap year, 2/31 is viewd as 3/3 due to 3 days diff
comment|// from 2/31 to 2/28
comment|// test Feb of leap year, 2/29
name|runTestTs
argument_list|(
literal|"2012-02-29 00:00:00"
argument_list|,
literal|"2012-03-01 00:00:00"
argument_list|,
operator|-
literal|0.09677419
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// time part
comment|// test that there is no lead second adjustment
name|runTestTs
argument_list|(
literal|"1976-01-01 00:00:00"
argument_list|,
literal|"1975-12-31 23:59:59"
argument_list|,
literal|0.00000037
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test UDF considers the difference in time components date1 and date2
name|runTestTs
argument_list|(
literal|"1997-02-28 10:30:00"
argument_list|,
literal|"1996-10-30 00:00:00"
argument_list|,
literal|3.94959677
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestTs
argument_list|(
literal|"1996-10-30 00:00:00"
argument_list|,
literal|"1997-02-28 10:30:00"
argument_list|,
operator|-
literal|3.94959677
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// if both are last day of the month then time part should be ignored
name|runTestTs
argument_list|(
literal|"2002-03-31 00:00:00"
argument_list|,
literal|"2002-02-28 00:00:00"
argument_list|,
literal|1.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestTs
argument_list|(
literal|"2002-03-31 00:00:00"
argument_list|,
literal|"2002-02-28 10:30:00"
argument_list|,
literal|1.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestTs
argument_list|(
literal|"2002-03-31 10:30:00"
argument_list|,
literal|"2002-02-28 00:00:00"
argument_list|,
literal|1.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// if the same day of the month then time part should be ignored
name|runTestTs
argument_list|(
literal|"2002-03-24 00:00:00"
argument_list|,
literal|"2002-02-24 00:00:00"
argument_list|,
literal|1.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestTs
argument_list|(
literal|"2002-03-24 00:00:00"
argument_list|,
literal|"2002-02-24 10:30:00"
argument_list|,
literal|1.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestTs
argument_list|(
literal|"2002-03-24 10:30:00"
argument_list|,
literal|"2002-02-24 00:00:00"
argument_list|,
literal|1.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestTs
argument_list|(
literal|"2003-04-23 23:59:59"
argument_list|,
literal|"2003-03-24 00:00:00"
argument_list|,
literal|0.99999963
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMonthsBetweenForDate
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFMonthsBetween
name|udf
init|=
operator|new
name|GenericUDFMonthsBetween
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
decl_stmt|;
name|ObjectInspector
name|valueOI2
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI1
block|,
name|valueOI2
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|testMonthsBetweenForDate
argument_list|(
name|udf
argument_list|)
expr_stmt|;
comment|// Run without round-off
name|GenericUDFMonthsBetween
name|udfWithoutRoundOff
init|=
operator|new
name|GenericUDFMonthsBetween
argument_list|()
decl_stmt|;
name|ObjectInspector
name|vOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
decl_stmt|;
name|ObjectInspector
name|vOI2
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
decl_stmt|;
name|ObjectInspector
name|vOI3
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
operator|new
name|BooleanWritable
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|args
init|=
block|{
name|vOI1
block|,
name|vOI2
block|,
name|vOI3
block|}
decl_stmt|;
name|udfWithoutRoundOff
operator|.
name|initialize
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|testMonthsBetweenForDate
argument_list|(
name|udfWithoutRoundOff
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMonthsBetweenForDate
parameter_list|(
name|GenericUDFMonthsBetween
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// test month diff with fraction considering time components
name|runTestDt
argument_list|(
literal|"1995-02-02"
argument_list|,
literal|"1995-01-01"
argument_list|,
literal|1.03225806
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestDt
argument_list|(
literal|"2003-07-17"
argument_list|,
literal|"2005-07-06"
argument_list|,
operator|-
literal|23.64516129
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test the last day of month
name|runTestDt
argument_list|(
literal|"2001-06-30"
argument_list|,
literal|"2000-05-31"
argument_list|,
literal|13.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test the same day of month
name|runTestDt
argument_list|(
literal|"2000-06-01"
argument_list|,
literal|"2004-07-01"
argument_list|,
operator|-
literal|49.0
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test February of non-leap year, 2/28
name|runTestDt
argument_list|(
literal|"2002-02-28"
argument_list|,
literal|"2002-03-01"
argument_list|,
operator|-
literal|0.12903226
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test February of non-leap year, 2/31 is viewd as 3/3 due to 3 days diff
comment|// from 2/31 to 2/28
name|runTestDt
argument_list|(
literal|"2002-02-31"
argument_list|,
literal|"2002-03-01"
argument_list|,
literal|0.06451613
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test Feb of leap year, 2/29
name|runTestDt
argument_list|(
literal|"2012-02-29"
argument_list|,
literal|"2012-03-01"
argument_list|,
operator|-
literal|0.09677419
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// test february of leap year, 2/31 is viewed as 3/2 due to 2 days diff from
comment|// 2/31 to 2/29
name|runTestDt
argument_list|(
literal|"2012-02-31"
argument_list|,
literal|"2012-03-01"
argument_list|,
literal|0.03225806
argument_list|,
name|udf
argument_list|)
expr_stmt|;
comment|// Test with null args
name|runTestDt
argument_list|(
literal|null
argument_list|,
literal|"2002-03-01"
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestDt
argument_list|(
literal|"2002-02-28"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
name|runTestDt
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|runTestStr
parameter_list|(
name|String
name|date1
parameter_list|,
name|String
name|date2
parameter_list|,
name|Double
name|expDiff
parameter_list|,
name|GenericUDFMonthsBetween
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
name|DeferredJavaObject
name|valueObj1
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|date1
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Text
argument_list|(
name|date1
argument_list|)
argument_list|)
decl_stmt|;
name|DeferredJavaObject
name|valueObj2
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|date2
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Text
argument_list|(
name|date2
argument_list|)
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
operator|new
name|DeferredObject
index|[]
block|{
name|valueObj1
block|,
name|valueObj2
block|}
decl_stmt|;
name|DoubleWritable
name|output
init|=
operator|(
name|DoubleWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|expDiff
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
literal|"months_between() test for NULL STRING failed"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
literal|"months_between() test for NOT NULL STRING failed"
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"months_between() test for STRING failed"
argument_list|,
name|expDiff
argument_list|,
name|output
operator|.
name|get
argument_list|()
argument_list|,
literal|0.00000001D
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|runTestTs
parameter_list|(
name|String
name|ts1
parameter_list|,
name|String
name|ts2
parameter_list|,
name|Double
name|expDiff
parameter_list|,
name|GenericUDFMonthsBetween
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
name|TimestampWritableV2
name|tsWr1
init|=
name|ts1
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TimestampWritableV2
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|ts1
argument_list|)
argument_list|)
decl_stmt|;
name|TimestampWritableV2
name|tsWr2
init|=
name|ts2
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TimestampWritableV2
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|ts2
argument_list|)
argument_list|)
decl_stmt|;
name|DeferredJavaObject
name|valueObj1
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|tsWr1
argument_list|)
decl_stmt|;
name|DeferredJavaObject
name|valueObj2
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|tsWr2
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
operator|new
name|DeferredObject
index|[]
block|{
name|valueObj1
block|,
name|valueObj2
block|}
decl_stmt|;
name|DoubleWritable
name|output
init|=
operator|(
name|DoubleWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|expDiff
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
literal|"months_between() test for NULL TIMESTAMP failed"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
literal|"months_between() test for NOT NULL TIMESTAMP failed"
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"months_between() test for TIMESTAMP failed"
argument_list|,
name|expDiff
argument_list|,
name|output
operator|.
name|get
argument_list|()
argument_list|,
literal|0.00000001D
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|runTestDt
parameter_list|(
name|String
name|dt1
parameter_list|,
name|String
name|dt2
parameter_list|,
name|Double
name|expDiff
parameter_list|,
name|GenericUDFMonthsBetween
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
name|DateWritableV2
name|dtWr1
init|=
name|dt1
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|DateWritableV2
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
name|dt1
argument_list|)
argument_list|)
decl_stmt|;
name|DateWritableV2
name|dtWr2
init|=
name|dt2
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|DateWritableV2
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
name|dt2
argument_list|)
argument_list|)
decl_stmt|;
name|DeferredJavaObject
name|valueObj1
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|dtWr1
argument_list|)
decl_stmt|;
name|DeferredJavaObject
name|valueObj2
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|dtWr2
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
operator|new
name|DeferredObject
index|[]
block|{
name|valueObj1
block|,
name|valueObj2
block|}
decl_stmt|;
name|DoubleWritable
name|output
init|=
operator|(
name|DoubleWritable
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|expDiff
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
literal|"months_between() test for NULL DATE failed"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
literal|"months_between() test for NOT NULL DATE failed"
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"months_between() test for DATE failed"
argument_list|,
name|expDiff
argument_list|,
name|output
operator|.
name|get
argument_list|()
argument_list|,
literal|0.00000001D
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

