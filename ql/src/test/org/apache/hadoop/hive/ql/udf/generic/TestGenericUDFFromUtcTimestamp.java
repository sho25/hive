begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredJavaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|TestGenericUDFFromUtcTimestamp
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
name|void
name|runAndVerify
parameter_list|(
name|GenericUDF
name|udf
parameter_list|,
name|Object
name|arg1
parameter_list|,
name|Object
name|arg2
parameter_list|,
name|Object
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
name|DeferredObject
index|[]
name|args
init|=
block|{
operator|new
name|DeferredJavaObject
argument_list|(
name|arg1
argument_list|)
block|,
operator|new
name|DeferredJavaObject
argument_list|(
name|arg2
argument_list|)
block|}
decl_stmt|;
name|Object
name|result
init|=
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|toString
argument_list|()
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testFromUtcTimestamp
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectInspector
name|valueOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|GenericUDFFromUtcTimestamp
name|udf
init|=
operator|new
name|GenericUDFFromUtcTimestamp
argument_list|()
decl_stmt|;
name|ObjectInspector
index|[]
name|args2
init|=
block|{
name|valueOI
block|,
name|valueOI
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|args2
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|udf
argument_list|,
operator|new
name|Text
argument_list|(
literal|"2015-03-28 17:00:00"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"Europe/London"
argument_list|)
argument_list|,
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2015-03-28 17:00:00"
argument_list|)
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|udf
argument_list|,
operator|new
name|Text
argument_list|(
literal|"2015-03-28 18:00:00"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"Europe/London"
argument_list|)
argument_list|,
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2015-03-28 18:00:00"
argument_list|)
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|udf
argument_list|,
operator|new
name|Text
argument_list|(
literal|"2015-03-28 19:00:00"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"Europe/London"
argument_list|)
argument_list|,
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2015-03-28 19:00:00"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure nanos are preserved
name|runAndVerify
argument_list|(
name|udf
argument_list|,
operator|new
name|Text
argument_list|(
literal|"2015-03-28 18:00:00.123456789"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"Europe/London"
argument_list|)
argument_list|,
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2015-03-28 18:00:00.123456789"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToUtcTimestamp
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectInspector
name|valueOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|GenericUDFToUtcTimestamp
name|udf
init|=
operator|new
name|GenericUDFToUtcTimestamp
argument_list|()
decl_stmt|;
name|ObjectInspector
index|[]
name|args2
init|=
block|{
name|valueOI
block|,
name|valueOI
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|args2
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|udf
argument_list|,
operator|new
name|Text
argument_list|(
literal|"2015-03-28 17:00:00"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"Europe/London"
argument_list|)
argument_list|,
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2015-03-28 17:00:00"
argument_list|)
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|udf
argument_list|,
operator|new
name|Text
argument_list|(
literal|"2015-03-28 18:00:00"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"Europe/London"
argument_list|)
argument_list|,
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2015-03-28 18:00:00"
argument_list|)
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
name|udf
argument_list|,
operator|new
name|Text
argument_list|(
literal|"2015-03-28 19:00:00"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"Europe/London"
argument_list|)
argument_list|,
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2015-03-28 19:00:00"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure nanos are preserved
name|runAndVerify
argument_list|(
name|udf
argument_list|,
operator|new
name|Text
argument_list|(
literal|"2015-03-28 18:00:00.123456789"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"Europe/London"
argument_list|)
argument_list|,
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2015-03-28 18:00:00.123456789"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

