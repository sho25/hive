begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|VectorizedRowGroupGenUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  * TestColumnColumnOperationVectorExpressionEvaluation.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestColumnColumnOperationVectorExpressionEvaluation
block|{
specifier|private
specifier|static
specifier|final
name|int
name|BATCH_SIZE
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|SEED
init|=
literal|0xfa57
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddLongColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColAddLongColumn
name|vectorExpression
init|=
operator|new
name|LongColAddLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddLongColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColAddLongColumn
name|vectorExpression
init|=
operator|new
name|LongColAddLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddLongColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColAddLongColumn
name|vectorExpression
init|=
operator|new
name|LongColAddLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddLongColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColAddLongColumn
name|vectorExpression
init|=
operator|new
name|LongColAddLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddLongColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColAddLongColumn
name|vectorExpression
init|=
operator|new
name|LongColAddLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddLongColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColAddLongColumn
name|vectorExpression
init|=
operator|new
name|LongColAddLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractLongColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|LongColSubtractLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractLongColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|LongColSubtractLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractLongColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|LongColSubtractLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractLongColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|LongColSubtractLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractLongColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|LongColSubtractLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractLongColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|LongColSubtractLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyLongColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|LongColMultiplyLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyLongColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|LongColMultiplyLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyLongColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|LongColMultiplyLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyLongColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|LongColMultiplyLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyLongColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|LongColMultiplyLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyLongColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|LongColMultiplyLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloLongColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColModuloLongColumn
name|vectorExpression
init|=
operator|new
name|LongColModuloLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloLongColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColModuloLongColumn
name|vectorExpression
init|=
operator|new
name|LongColModuloLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloLongColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColModuloLongColumn
name|vectorExpression
init|=
operator|new
name|LongColModuloLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloLongColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColModuloLongColumn
name|vectorExpression
init|=
operator|new
name|LongColModuloLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloLongColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColModuloLongColumn
name|vectorExpression
init|=
operator|new
name|LongColModuloLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloLongColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColModuloLongColumn
name|vectorExpression
init|=
operator|new
name|LongColModuloLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddDoubleColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColAddDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddDoubleColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColAddDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddDoubleColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColAddDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddDoubleColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColAddDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddDoubleColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColAddDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColAddDoubleColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColAddDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractDoubleColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColSubtractDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractDoubleColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColSubtractDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractDoubleColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColSubtractDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractDoubleColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColSubtractDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractDoubleColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColSubtractDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColSubtractDoubleColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColSubtractDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyDoubleColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColMultiplyDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyDoubleColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColMultiplyDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyDoubleColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColMultiplyDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyDoubleColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColMultiplyDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyDoubleColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColMultiplyDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColMultiplyDoubleColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColMultiplyDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColDivideDoubleColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColDivideDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColDivideDoubleColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColDivideDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColDivideDoubleColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColDivideDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColDivideDoubleColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColDivideDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColDivideDoubleColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColDivideDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColDivideDoubleColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColDivideDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloDoubleColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColModuloDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloDoubleColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColModuloDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloDoubleColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColModuloDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloDoubleColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColModuloDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloDoubleColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColModuloDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColModuloDoubleColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|LongColModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|LongColModuloDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddLongColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColAddLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColAddLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddLongColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColAddLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColAddLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddLongColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColAddLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColAddLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddLongColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColAddLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColAddLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddLongColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColAddLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColAddLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddLongColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColAddLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColAddLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractLongColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractLongColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractLongColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractLongColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractLongColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractLongColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColSubtractLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyLongColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyLongColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyLongColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyLongColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyLongColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyLongColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColMultiplyLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideLongColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColDivideLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColDivideLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideLongColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColDivideLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColDivideLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideLongColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColDivideLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColDivideLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideLongColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColDivideLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColDivideLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideLongColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColDivideLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColDivideLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideLongColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColDivideLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColDivideLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloLongColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColModuloLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColModuloLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloLongColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColModuloLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColModuloLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloLongColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColModuloLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColModuloLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloLongColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColModuloLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColModuloLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloLongColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColModuloLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColModuloLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloLongColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|LongColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateLongColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColModuloLongColumn
name|vectorExpression
init|=
operator|new
name|DoubleColModuloLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddDoubleColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColAddDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddDoubleColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColAddDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddDoubleColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColAddDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddDoubleColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColAddDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddDoubleColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColAddDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColAddDoubleColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColAddDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColAddDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractDoubleColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractDoubleColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractDoubleColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractDoubleColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractDoubleColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColSubtractDoubleColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColSubtractDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColSubtractDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyDoubleColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyDoubleColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyDoubleColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyDoubleColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyDoubleColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColMultiplyDoubleColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColMultiplyDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColMultiplyDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideDoubleColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColDivideDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideDoubleColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColDivideDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideDoubleColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColDivideDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideDoubleColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColDivideDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideDoubleColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColDivideDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColDivideDoubleColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColDivideDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColDivideDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloDoubleColumnOutNullsRepeatsC1RepeatsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColModuloDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloDoubleColumnC1Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColModuloDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloDoubleColumnOutNullsC1NullsC2NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColModuloDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloDoubleColumnOutNullsRepeatsC1NullsRepeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColModuloDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloDoubleColumnC1RepeatsC2Nulls
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColModuloDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleColModuloDoubleColumnOutRepeatsC2Repeats
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector1
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector2
init|=
name|VectorizedRowGroupGenUtil
operator|.
name|generateDoubleColumnVector
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BATCH_SIZE
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|,
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|inputColumnVector1
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|inputColumnVector2
expr_stmt|;
name|rowBatch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|outputColumnVector
expr_stmt|;
name|DoubleColModuloDoubleColumn
name|vectorExpression
init|=
operator|new
name|DoubleColModuloDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector repeating state does not match operand columns"
argument_list|,
operator|(
operator|!
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector1
operator|.
name|isRepeating
operator|)
operator|||
operator|(
operator|!
name|inputColumnVector2
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
operator|)
operator|||
name|inputColumnVector1
operator|.
name|isRepeating
operator|&&
name|inputColumnVector2
operator|.
name|isRepeating
argument_list|,
name|outputColumnVector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Output column vector no nulls state does not match operand columns"
argument_list|,
name|inputColumnVector1
operator|.
name|noNulls
operator|&&
name|inputColumnVector2
operator|.
name|noNulls
argument_list|,
name|outputColumnVector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|//if repeating, only the first value matters
if|if
condition|(
operator|!
name|outputColumnVector
operator|.
name|noNulls
operator|&&
operator|!
name|outputColumnVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|//null vectors are safe to check, as they are always initialized to match the data vector
name|assertEquals
argument_list|(
literal|"Output vector doesn't match input vectors' is null state for index"
argument_list|,
name|inputColumnVector1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inputColumnVector2
operator|.
name|isNull
index|[
name|i
index|]
argument_list|,
name|outputColumnVector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

