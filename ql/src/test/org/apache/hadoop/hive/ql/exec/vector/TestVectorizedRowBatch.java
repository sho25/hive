begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test creation and basic manipulation of VectorizedRowBatch.  */
end_comment

begin_class
specifier|public
class|class
name|TestVectorizedRowBatch
block|{
comment|// test fields
specifier|static
specifier|final
name|String
index|[]
name|COLORS
init|=
block|{
literal|"red"
block|,
literal|"yellow"
block|,
literal|"green"
block|,
literal|"blue"
block|,
literal|"violet"
block|,
literal|"orange"
block|}
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|colorsBytes
decl_stmt|;
specifier|private
name|VectorizedRowBatch
name|makeBatch
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|LongColumnVector
name|lv
init|=
operator|new
name|LongColumnVector
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|dv
init|=
operator|new
name|DoubleColumnVector
argument_list|()
decl_stmt|;
name|BytesColumnVector
name|bv
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|setSampleStringCol
argument_list|(
name|bv
argument_list|)
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|lv
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|=
name|dv
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|=
name|bv
expr_stmt|;
name|addRandomNulls
argument_list|(
name|batch
argument_list|)
expr_stmt|;
return|return
name|batch
return|;
block|}
annotation|@
name|Test
comment|/**    * Make sure you can create a batch and that all columns are the    * default size.    */
specifier|public
name|void
name|testVectorizedRowBatchCreate
parameter_list|()
block|{
name|VectorizedRowBatch
name|batch
init|=
name|makeBatch
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|numCols
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
operator|.
name|length
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|vector
operator|.
name|length
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|)
operator|.
name|vector
operator|.
name|length
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test routines to exercise VectorizedRowBatch    * by filling column vectors with data and null values.    */
specifier|public
specifier|static
name|void
name|setRandom
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|batch
operator|.
name|size
operator|=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|batch
operator|.
name|numCols
condition|;
name|i
operator|++
control|)
block|{
name|batch
operator|.
name|cols
index|[
name|i
index|]
operator|=
operator|new
name|LongColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|setRandomLongCol
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setSample
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|batch
operator|.
name|size
operator|=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|batch
operator|.
name|numCols
condition|;
name|i
operator|++
control|)
block|{
name|setSampleLongCol
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set to sample data, re-using existing columns in batch.    *    * @param batch    */
specifier|public
specifier|static
name|void
name|setSampleOverwrite
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
comment|// Put sample data in the columns.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|batch
operator|.
name|numCols
condition|;
name|i
operator|++
control|)
block|{
name|setSampleLongCol
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Reset the selection vector.
name|batch
operator|.
name|selectedInUse
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
expr_stmt|;
block|}
comment|/**    * Sprinkle null values in this column vector.    *    * @param col    */
specifier|public
specifier|static
name|void
name|addRandomNulls
parameter_list|(
name|ColumnVector
name|col
parameter_list|)
block|{
name|col
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|col
operator|.
name|isNull
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|col
operator|.
name|isNull
index|[
name|i
index|]
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
operator|%
literal|11
argument_list|)
operator|==
literal|0
expr_stmt|;
block|}
block|}
comment|/**    * Add null values, but do it faster, by avoiding use of Random().    *    * @param col    */
specifier|public
name|void
name|addSampleNulls
parameter_list|(
name|ColumnVector
name|col
parameter_list|)
block|{
name|col
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
assert|assert
name|col
operator|.
name|isNull
operator|!=
literal|null
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|col
operator|.
name|isNull
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|col
operator|.
name|isNull
index|[
name|i
index|]
operator|=
name|i
operator|%
literal|11
operator|==
literal|0
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|addRandomNulls
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|batch
operator|.
name|numCols
condition|;
name|i
operator|++
control|)
block|{
name|addRandomNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addSampleNulls
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|batch
operator|.
name|numCols
condition|;
name|i
operator|++
control|)
block|{
name|addSampleNulls
argument_list|(
name|batch
operator|.
name|cols
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set vector elements to sample string data from colorsBytes string table.    * @param col    */
specifier|public
specifier|static
name|void
name|setSampleStringCol
parameter_list|(
name|BytesColumnVector
name|col
parameter_list|)
block|{
name|initColors
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|col
operator|.
name|vector
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|size
condition|;
name|i
operator|++
control|)
block|{
name|int
name|pos
init|=
name|i
operator|%
name|colorsBytes
operator|.
name|length
decl_stmt|;
name|col
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|colorsBytes
index|[
name|pos
index|]
argument_list|,
literal|0
argument_list|,
name|colorsBytes
index|[
name|pos
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Initialize string table in a lazy fashion.    */
specifier|private
specifier|static
name|void
name|initColors
parameter_list|()
block|{
if|if
condition|(
name|colorsBytes
operator|==
literal|null
condition|)
block|{
name|colorsBytes
operator|=
operator|new
name|byte
index|[
name|COLORS
operator|.
name|length
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|COLORS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|colorsBytes
index|[
name|i
index|]
operator|=
name|COLORS
index|[
name|i
index|]
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Set the vector to sample data that repeats an iteration from 0 to 99.    * @param col    */
specifier|public
specifier|static
name|void
name|setSampleLongCol
parameter_list|(
name|LongColumnVector
name|col
parameter_list|)
block|{
name|int
name|size
init|=
name|col
operator|.
name|vector
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|size
condition|;
name|i
operator|++
control|)
block|{
name|col
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|i
operator|%
literal|100
expr_stmt|;
block|}
block|}
comment|/**    * Set the vector to random data in the range 0 to 99.    * This has significant overhead for random number generation. Use setSample() to reduce overhead.    */
specifier|public
specifier|static
name|void
name|setRandomLongCol
parameter_list|(
name|LongColumnVector
name|col
parameter_list|)
block|{
name|int
name|size
init|=
name|col
operator|.
name|vector
operator|.
name|length
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|size
condition|;
name|i
operator|++
control|)
block|{
name|col
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
operator|%
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setRepeatingLongCol
parameter_list|(
name|LongColumnVector
name|col
parameter_list|)
block|{
name|col
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|col
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|50
expr_stmt|;
block|}
comment|/**    * Set the vector to sample data that repeats an iteration from 0 to 99.    * @param col    */
specifier|public
specifier|static
name|void
name|setSampleDoubleCol
parameter_list|(
name|DoubleColumnVector
name|col
parameter_list|)
block|{
name|int
name|size
init|=
name|col
operator|.
name|vector
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|size
condition|;
name|i
operator|++
control|)
block|{
name|col
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|i
operator|%
literal|100
expr_stmt|;
block|}
block|}
comment|/**    * Set the vector to random data in the range 0 to 99.    * This has significant overhead for random number generation. Use setSample() to reduce overhead.    */
specifier|public
specifier|static
name|void
name|setRandomDoubleCol
parameter_list|(
name|DoubleColumnVector
name|col
parameter_list|)
block|{
name|int
name|size
init|=
name|col
operator|.
name|vector
operator|.
name|length
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|size
condition|;
name|i
operator|++
control|)
block|{
name|col
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
operator|%
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setRepeatingDoubleCol
parameter_list|(
name|DoubleColumnVector
name|col
parameter_list|)
block|{
name|col
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|col
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|50.0
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlatten
parameter_list|()
block|{
name|verifyFlatten
argument_list|(
operator|new
name|LongColumnVector
argument_list|()
argument_list|)
expr_stmt|;
name|verifyFlatten
argument_list|(
operator|new
name|DoubleColumnVector
argument_list|()
argument_list|)
expr_stmt|;
name|verifyFlatten
argument_list|(
operator|new
name|BytesColumnVector
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyFlatten
parameter_list|(
name|ColumnVector
name|v
parameter_list|)
block|{
comment|// verify that flattening and unflattenting no-nulls works
name|v
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
name|int
index|[]
name|sel
init|=
block|{
literal|0
block|,
literal|2
block|}
decl_stmt|;
name|int
name|size
init|=
literal|2
decl_stmt|;
name|v
operator|.
name|flatten
argument_list|(
literal|true
argument_list|,
name|sel
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|v
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|||
name|v
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|v
operator|.
name|unFlatten
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|v
operator|.
name|noNulls
argument_list|)
expr_stmt|;
comment|// verify that flattening and unflattening "isRepeating" works
name|v
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|v
operator|.
name|flatten
argument_list|(
literal|true
argument_list|,
name|sel
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|v
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|v
operator|.
name|isNull
index|[
literal|0
index|]
operator|&&
name|v
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|v
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
name|v
operator|.
name|unFlatten
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|v
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|v
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
comment|// verify extension of values in the array
name|v
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|v
operator|instanceof
name|LongColumnVector
condition|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|v
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|100
expr_stmt|;
name|v
operator|.
name|flatten
argument_list|(
literal|true
argument_list|,
name|sel
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|v
operator|)
operator|.
name|vector
index|[
literal|2
index|]
operator|==
literal|100
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|DoubleColumnVector
condition|)
block|{
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|v
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
literal|200d
expr_stmt|;
name|v
operator|.
name|flatten
argument_list|(
literal|true
argument_list|,
name|sel
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|v
operator|)
operator|.
name|vector
index|[
literal|2
index|]
operator|==
literal|200d
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|BytesColumnVector
condition|)
block|{
name|BytesColumnVector
name|bv
init|=
operator|(
name|BytesColumnVector
operator|)
name|v
decl_stmt|;
name|byte
index|[]
name|b
init|=
literal|null
decl_stmt|;
try|try
block|{
name|b
operator|=
literal|"foo"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
empty_stmt|;
comment|// eat it
block|}
name|bv
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|bv
operator|.
name|flatten
argument_list|(
literal|true
argument_list|,
name|sel
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|bv
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bv
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|bv
operator|.
name|start
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bv
operator|.
name|length
index|[
literal|0
index|]
argument_list|,
name|bv
operator|.
name|length
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

