begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|session
operator|.
name|SparkSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|session
operator|.
name|SparkSessionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|session
operator|.
name|SparkSessionManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|SparkContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|api
operator|.
name|java
operator|.
name|JavaSparkContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * With local spark context, all user sessions share the same spark context.  */
end_comment

begin_class
specifier|public
class|class
name|TestLocalHiveSparkClient
block|{
specifier|private
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testMultiSessionSparkContextReUse
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|String
name|confDir
init|=
literal|"../data/conf/spark/local/hive-site.xml"
decl_stmt|;
name|HiveConf
operator|.
name|setHiveSiteLocation
argument_list|(
operator|new
name|File
argument_list|(
name|confDir
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|barrier
operator|.
name|getParties
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|barrier
operator|.
name|getParties
argument_list|()
argument_list|)
operator|.
name|boxed
argument_list|()
operator|.
name|map
argument_list|(
name|i
lambda|->
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
parameter_list|()
lambda|->
name|execute
argument_list|(
name|i
argument_list|)
argument_list|,
name|executor
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|futures
operator|.
name|forEach
argument_list|(
name|CompletableFuture
operator|::
name|join
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Void
name|execute
parameter_list|(
name|Integer
name|threadId
parameter_list|)
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SPARK_OPTIMIZE_SHUFFLE_SERDE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"spark.local.dir"
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|)
argument_list|,
literal|"TestLocalHiveSparkClient-testMultiSessionSparkContextReuse-local-dir"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|runSparkTestSession
argument_list|(
name|conf
argument_list|,
name|threadId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|runSparkTestSession
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|int
name|threadId
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SPARK_SESSION_TIMEOUT
argument_list|,
literal|"10s"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SPARK_SESSION_TIMEOUT_PERIOD
argument_list|,
literal|"1s"
argument_list|)
expr_stmt|;
name|Driver
name|driver
init|=
literal|null
decl_stmt|;
try|try
block|{
name|driver
operator|=
operator|new
name|Driver
argument_list|(
operator|new
name|QueryState
operator|.
name|Builder
argument_list|()
operator|.
name|withGenerateNewQueryId
argument_list|(
literal|true
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|SparkSession
name|sparkSession
init|=
name|SparkUtilities
operator|.
name|getSparkSession
argument_list|(
name|conf
argument_list|,
name|SparkSessionManagerImpl
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|SparkContext
name|sparkContext
init|=
name|getSparkContext
argument_list|(
name|sparkSession
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|sparkContext
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|threadId
operator|==
literal|1
condition|)
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|closeSparkSession
argument_list|(
name|sparkSession
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sparkContext
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|closeSparkSession
argument_list|(
name|sparkSession
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|sparkContext
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|driver
operator|!=
literal|null
condition|)
block|{
name|driver
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|closeSparkSession
parameter_list|(
name|SparkSession
name|session
parameter_list|)
throws|throws
name|ReflectiveOperationException
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|session
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|session
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SparkContext
name|getSparkContext
parameter_list|(
name|SparkSession
name|sparkSession
parameter_list|)
throws|throws
name|ReflectiveOperationException
block|{
name|HiveSparkClient
name|sparkClient
init|=
name|getSparkClient
argument_list|(
name|sparkSession
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sparkClient
argument_list|)
expr_stmt|;
return|return
name|getSparkContext
argument_list|(
name|sparkClient
argument_list|)
operator|.
name|sc
argument_list|()
return|;
block|}
specifier|private
name|JavaSparkContext
name|getSparkContext
parameter_list|(
name|HiveSparkClient
name|sparkClient
parameter_list|)
throws|throws
name|ReflectiveOperationException
block|{
name|Field
name|sparkContextField
init|=
name|LocalHiveSparkClient
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"sc"
argument_list|)
decl_stmt|;
name|sparkContextField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|JavaSparkContext
operator|)
name|sparkContextField
operator|.
name|get
argument_list|(
name|sparkClient
argument_list|)
return|;
block|}
specifier|private
name|HiveSparkClient
name|getSparkClient
parameter_list|(
name|SparkSession
name|sparkSession
parameter_list|)
throws|throws
name|ReflectiveOperationException
block|{
name|Field
name|clientField
init|=
name|SparkSessionImpl
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"hiveSparkClient"
argument_list|)
decl_stmt|;
name|clientField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|HiveSparkClient
operator|)
name|clientField
operator|.
name|get
argument_list|(
name|sparkSession
argument_list|)
return|;
block|}
block|}
end_class

end_unit

