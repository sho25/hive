begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashMapResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
operator|.
name|VectorMapJoinFastMultiKeyHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableKeyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestVectorMapJoinFastMultiKeyHashMap
extends|extends
name|CommonFastHashTable
block|{
annotation|@
name|Test
specifier|public
name|void
name|testPutGetOne
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|47496
argument_list|)
expr_stmt|;
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|WB_SIZE
argument_list|)
decl_stmt|;
name|RandomByteArrayStream
name|randomByteArrayKeyStream
init|=
operator|new
name|RandomByteArrayStream
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|RandomByteArrayStream
name|randomByteArrayValueStream
init|=
operator|new
name|RandomByteArrayStream
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|randomByteArrayKeyStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|randomByteArrayValueStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|putRow
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|verifyHashMapResult
argument_list|(
name|map
argument_list|,
name|key
argument_list|,
name|randomByteArrayValueStream
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
name|randomByteArrayKeyStream
operator|.
name|next
argument_list|()
expr_stmt|;
name|value
operator|=
name|randomByteArrayValueStream
operator|.
name|next
argument_list|()
expr_stmt|;
name|map
operator|.
name|putRow
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|verifyHashMapResult
argument_list|(
name|map
argument_list|,
name|key
argument_list|,
name|randomByteArrayValueStream
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutGetMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|2990
argument_list|)
expr_stmt|;
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|WB_SIZE
argument_list|)
decl_stmt|;
name|RandomByteArrayStream
name|randomByteArrayKeyStream
init|=
operator|new
name|RandomByteArrayStream
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|RandomByteArrayStream
name|randomByteArrayValueStream
init|=
operator|new
name|RandomByteArrayStream
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|randomByteArrayKeyStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|randomByteArrayValueStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|putRow
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|verifyHashMapResult
argument_list|(
name|map
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// Same key, multiple values.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|value
operator|=
name|randomByteArrayValueStream
operator|.
name|next
argument_list|()
expr_stmt|;
name|map
operator|.
name|putRow
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|verifyHashMapResult
argument_list|(
name|map
argument_list|,
name|key
argument_list|,
name|randomByteArrayValueStream
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNonExistent
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|16916
argument_list|)
expr_stmt|;
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|WB_SIZE
argument_list|)
decl_stmt|;
name|RandomByteArrayStream
name|randomByteArrayKeyStream
init|=
operator|new
name|RandomByteArrayStream
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|RandomByteArrayStream
name|randomByteArrayValueStream
init|=
operator|new
name|RandomByteArrayStream
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|randomByteArrayKeyStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|randomByteArrayValueStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|putRow
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|key
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|key
index|[
literal|0
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|putRow
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|key
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|key
index|[
literal|0
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|VectorMapJoinHashMapResult
name|hashMapResult
init|=
name|map
operator|.
name|createHashMapResult
argument_list|()
decl_stmt|;
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
init|=
name|map
operator|.
name|lookup
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|,
name|hashMapResult
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|joinResult
operator|==
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|NOMATCH
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|hashMapResult
operator|.
name|hasRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutWithFullMap
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|26078
argument_list|)
expr_stmt|;
comment|// Make sure the map does not expand; should be able to find space.
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|CAPACITY
argument_list|,
literal|1f
argument_list|,
name|WB_SIZE
argument_list|)
decl_stmt|;
name|RandomByteArrayStream
name|randomByteArrayKeyStream
init|=
operator|new
name|RandomByteArrayStream
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|RandomByteArrayStream
name|randomByteArrayValueStream
init|=
operator|new
name|RandomByteArrayStream
argument_list|(
name|random
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CAPACITY
condition|;
operator|++
name|i
control|)
block|{
name|byte
index|[]
name|key
init|=
name|randomByteArrayKeyStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|randomByteArrayValueStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|putRow
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomByteArrayKeyStream
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|verifyHashMapResult
argument_list|(
name|map
argument_list|,
name|randomByteArrayKeyStream
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|randomByteArrayValueStream
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// assertEquals(CAPACITY, map.getCapacity());
comment|// Get of non-existent key should terminate..
name|byte
index|[]
name|anotherKey
init|=
name|randomByteArrayKeyStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|VectorMapJoinHashMapResult
name|hashMapResult
init|=
name|map
operator|.
name|createHashMapResult
argument_list|()
decl_stmt|;
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
init|=
name|map
operator|.
name|lookup
argument_list|(
name|anotherKey
argument_list|,
literal|0
argument_list|,
name|anotherKey
operator|.
name|length
argument_list|,
name|hashMapResult
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|joinResult
operator|==
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|NOMATCH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpand
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|22470
argument_list|)
expr_stmt|;
comment|// Start with capacity 1; make sure we expand on every put.
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
literal|1
argument_list|,
literal|0.0000001f
argument_list|,
name|WB_SIZE
argument_list|)
decl_stmt|;
name|RandomByteArrayStream
name|randomByteArrayKeyStream
init|=
operator|new
name|RandomByteArrayStream
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|RandomByteArrayStream
name|randomByteArrayValueStream
init|=
operator|new
name|RandomByteArrayStream
argument_list|(
name|random
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|18
condition|;
operator|++
name|i
control|)
block|{
name|byte
index|[]
name|key
init|=
name|randomByteArrayKeyStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|randomByteArrayValueStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|putRow
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
name|i
condition|;
operator|++
name|j
control|)
block|{
name|verifyHashMapResult
argument_list|(
name|map
argument_list|,
name|randomByteArrayKeyStream
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
name|randomByteArrayValueStream
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// assertEquals(1<< 18, map.getCapacity());
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLarge
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|5231
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|LARGE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|LARGE_WB_SIZE
argument_list|)
decl_stmt|;
name|RandomByteArrayStream
name|randomByteArrayKeyStream
init|=
operator|new
name|RandomByteArrayStream
argument_list|(
name|random
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|int
name|largeSize
init|=
literal|1000
decl_stmt|;
name|RandomByteArrayStream
index|[]
name|randomByteArrayValueStreams
init|=
operator|new
name|RandomByteArrayStream
index|[
name|largeSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|largeSize
condition|;
name|i
operator|++
control|)
block|{
name|randomByteArrayValueStreams
index|[
name|i
index|]
operator|=
operator|new
name|RandomByteArrayStream
argument_list|(
name|random
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|generateLargeCount
argument_list|()
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|randomByteArrayKeyStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|VectorMapJoinHashMapResult
name|hashMapResult
init|=
name|map
operator|.
name|createHashMapResult
argument_list|()
decl_stmt|;
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
init|=
name|map
operator|.
name|lookup
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|,
name|hashMapResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinResult
operator|==
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|MATCH
condition|)
block|{
comment|// A problem or need different random seed / longer key?
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|count
condition|;
name|v
operator|++
control|)
block|{
name|byte
index|[]
name|value
init|=
name|randomByteArrayValueStreams
index|[
name|i
index|]
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|putRow
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|largeSize
condition|;
name|i
operator|++
control|)
block|{
name|verifyHashMapResult
argument_list|(
name|map
argument_list|,
name|randomByteArrayKeyStream
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|randomByteArrayValueStreams
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLargeAndExpand
parameter_list|()
throws|throws
name|Exception
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|46809
argument_list|)
expr_stmt|;
comment|// Use a large capacity that doesn't require expansion, yet.
name|VectorMapJoinFastMultiKeyHashMap
name|map
init|=
operator|new
name|VectorMapJoinFastMultiKeyHashMap
argument_list|(
literal|false
argument_list|,
name|MODERATE_CAPACITY
argument_list|,
name|LOAD_FACTOR
argument_list|,
name|MODERATE_WB_SIZE
argument_list|)
decl_stmt|;
name|RandomByteArrayStream
name|randomByteArrayKeyStream
init|=
operator|new
name|RandomByteArrayStream
argument_list|(
name|random
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|int
name|largeSize
init|=
literal|1000
decl_stmt|;
name|RandomByteArrayStream
index|[]
name|randomByteArrayValueStreams
init|=
operator|new
name|RandomByteArrayStream
index|[
name|largeSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|largeSize
condition|;
name|i
operator|++
control|)
block|{
name|randomByteArrayValueStreams
index|[
name|i
index|]
operator|=
operator|new
name|RandomByteArrayStream
argument_list|(
name|random
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|generateLargeCount
argument_list|()
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|randomByteArrayKeyStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|VectorMapJoinHashMapResult
name|hashMapResult
init|=
name|map
operator|.
name|createHashMapResult
argument_list|()
decl_stmt|;
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
init|=
name|map
operator|.
name|lookup
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|,
name|hashMapResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinResult
operator|==
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|MATCH
condition|)
block|{
comment|// A problem or need different random seed / longer key?
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|count
condition|;
name|v
operator|++
control|)
block|{
name|byte
index|[]
name|value
init|=
name|randomByteArrayValueStreams
index|[
name|i
index|]
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|putRow
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|largeSize
condition|;
name|i
operator|++
control|)
block|{
name|verifyHashMapResult
argument_list|(
name|map
argument_list|,
name|randomByteArrayKeyStream
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|randomByteArrayValueStreams
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyHashMapResult
parameter_list|(
name|VectorMapJoinFastMultiKeyHashMap
name|map
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|RandomByteArrayStream
name|randomByteArrayValueStream
parameter_list|)
block|{
name|VectorMapJoinHashMapResult
name|hashMapResult
init|=
name|map
operator|.
name|createHashMapResult
argument_list|()
decl_stmt|;
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
init|=
name|map
operator|.
name|lookup
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|,
name|hashMapResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinResult
operator|!=
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|MATCH
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|CommonFastHashTable
operator|.
name|verifyHashMapResult
argument_list|(
name|hashMapResult
argument_list|,
name|randomByteArrayValueStream
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyHashMapResult
parameter_list|(
name|VectorMapJoinFastMultiKeyHashMap
name|map
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|valueBytes
parameter_list|)
block|{
name|VectorMapJoinHashMapResult
name|hashMapResult
init|=
name|map
operator|.
name|createHashMapResult
argument_list|()
decl_stmt|;
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
init|=
name|map
operator|.
name|lookup
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|,
name|hashMapResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinResult
operator|!=
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|MATCH
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|CommonFastHashTable
operator|.
name|verifyHashMapResult
argument_list|(
name|hashMapResult
argument_list|,
name|valueBytes
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

