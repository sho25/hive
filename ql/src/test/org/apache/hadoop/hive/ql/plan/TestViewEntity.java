begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|AbstractSemanticAnalyzerHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveSemanticAnalyzerHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestViewEntity
block|{
comment|/**    * Hook used in the test to capture the set of ReadEntities    */
specifier|public
specifier|static
class|class
name|CheckInputReadEntity
extends|extends
name|AbstractSemanticAnalyzerHook
block|{
specifier|public
specifier|static
name|ReadEntity
index|[]
name|readEntities
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|postAnalyze
parameter_list|(
name|HiveSemanticAnalyzerHookContext
name|context
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|)
throws|throws
name|SemanticException
block|{
name|readEntities
operator|=
name|context
operator|.
name|getInputs
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ReadEntity
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Driver
name|driver
decl_stmt|;
specifier|private
specifier|final
name|String
name|NAME_PREFIX
init|=
literal|"TestViewEntity5"
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|onetimeSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|Driver
operator|.
name|class
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SEMANTIC_ANALYZER_HOOK
argument_list|,
name|CheckInputReadEntity
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
name|driver
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify that the parent entities are captured correctly for union views    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testUnionView
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prefix
init|=
literal|"tunionview"
operator|+
name|NAME_PREFIX
decl_stmt|;
specifier|final
name|String
name|tab1
init|=
name|prefix
operator|+
literal|"t1"
decl_stmt|;
specifier|final
name|String
name|tab2
init|=
name|prefix
operator|+
literal|"t2"
decl_stmt|;
specifier|final
name|String
name|view1
init|=
name|prefix
operator|+
literal|"v1"
decl_stmt|;
name|int
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|tab1
operator|+
literal|"(id int)"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|tab2
operator|+
literal|"(id int)"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create view "
operator|+
name|view1
operator|+
literal|" as select t.id from "
operator|+
literal|"(select "
operator|+
name|tab1
operator|+
literal|".id from "
operator|+
name|tab1
operator|+
literal|" union all select "
operator|+
name|tab2
operator|+
literal|".id from "
operator|+
name|tab2
operator|+
literal|") as t"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|driver
operator|.
name|compile
argument_list|(
literal|"select * from "
operator|+
name|view1
argument_list|)
expr_stmt|;
comment|// view entity
name|assertEquals
argument_list|(
literal|"default@"
operator|+
name|view1
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// first table in union query with view as parent
name|assertEquals
argument_list|(
literal|"default@"
operator|+
name|tab1
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Table is not direct input"
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|1
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default@"
operator|+
name|view1
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|1
index|]
operator|.
name|getParents
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// second table in union query with view as parent
name|assertEquals
argument_list|(
literal|"default@"
operator|+
name|tab2
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|2
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Table is not direct input"
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|2
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default@"
operator|+
name|view1
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|2
index|]
operator|.
name|getParents
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that the parent entities are captured correctly for view in subquery    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testViewInSubQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prefix
init|=
literal|"tvsubquery"
operator|+
name|NAME_PREFIX
decl_stmt|;
specifier|final
name|String
name|tab1
init|=
name|prefix
operator|+
literal|"t"
decl_stmt|;
specifier|final
name|String
name|view1
init|=
name|prefix
operator|+
literal|"v"
decl_stmt|;
name|int
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|tab1
operator|+
literal|"(id int)"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create view "
operator|+
name|view1
operator|+
literal|" as select * from "
operator|+
name|tab1
argument_list|)
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|driver
operator|.
name|compile
argument_list|(
literal|"select * from "
operator|+
name|view1
argument_list|)
expr_stmt|;
comment|// view entity
name|assertEquals
argument_list|(
literal|"default@"
operator|+
name|view1
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// table as second read entity
name|assertEquals
argument_list|(
literal|"default@"
operator|+
name|tab1
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Table is not direct input"
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|1
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that the the query with the subquery inside a view will have the correct    * direct and indirect inputs.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSubQueryInSubView
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prefix
init|=
literal|"tvsubqueryinsubview"
operator|+
name|NAME_PREFIX
decl_stmt|;
specifier|final
name|String
name|tab1
init|=
name|prefix
operator|+
literal|"t"
decl_stmt|;
specifier|final
name|String
name|view1
init|=
name|prefix
operator|+
literal|"v"
decl_stmt|;
specifier|final
name|String
name|view2
init|=
name|prefix
operator|+
literal|"v2"
decl_stmt|;
name|int
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|tab1
operator|+
literal|"(id int)"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create view "
operator|+
name|view1
operator|+
literal|" as select * from "
operator|+
name|tab1
argument_list|)
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create view "
operator|+
name|view2
operator|+
literal|" as select * from (select * from "
operator|+
name|view1
operator|+
literal|") x"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|driver
operator|.
name|compile
argument_list|(
literal|"select * from "
operator|+
name|view2
argument_list|)
expr_stmt|;
comment|// view entity
name|assertEquals
argument_list|(
literal|"default@"
operator|+
name|view2
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// table1 and view1 as second read entity
name|assertEquals
argument_list|(
literal|"default@"
operator|+
name|view1
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Table is not direct input"
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|1
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|parents
init|=
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|1
index|]
operator|.
name|getParents
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Table does not have parent"
argument_list|,
name|parents
operator|!=
literal|null
operator|&&
name|parents
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default@"
operator|+
name|tab1
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|2
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Table is not direct input"
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|2
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that the the query with the subquery inside a view will have the correct    * direct and indirect inputs.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testUnionAllInSubView
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prefix
init|=
literal|"tvunionallinsubview"
operator|+
name|NAME_PREFIX
decl_stmt|;
specifier|final
name|String
name|tab1
init|=
name|prefix
operator|+
literal|"t"
decl_stmt|;
specifier|final
name|String
name|view1
init|=
name|prefix
operator|+
literal|"v"
decl_stmt|;
specifier|final
name|String
name|view2
init|=
name|prefix
operator|+
literal|"v2"
decl_stmt|;
name|int
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|tab1
operator|+
literal|"(id int)"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create view "
operator|+
name|view1
operator|+
literal|" as select * from "
operator|+
name|tab1
argument_list|)
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create view "
operator|+
name|view2
operator|+
literal|" as select * from (select * from "
operator|+
name|view1
operator|+
literal|" union all select * from "
operator|+
name|view1
operator|+
literal|") x"
argument_list|)
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Checking command success"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|driver
operator|.
name|compile
argument_list|(
literal|"select * from "
operator|+
name|view2
argument_list|)
expr_stmt|;
comment|// view entity
name|assertEquals
argument_list|(
literal|"default@"
operator|+
name|view2
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// table1 and view1 as second read entity
name|assertEquals
argument_list|(
literal|"default@"
operator|+
name|view1
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Table is not direct input"
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|1
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|parents
init|=
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|1
index|]
operator|.
name|getParents
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Table does not have parent"
argument_list|,
name|parents
operator|!=
literal|null
operator|&&
name|parents
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default@"
operator|+
name|tab1
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|2
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Table is not direct input"
argument_list|,
name|CheckInputReadEntity
operator|.
name|readEntities
index|[
literal|2
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

