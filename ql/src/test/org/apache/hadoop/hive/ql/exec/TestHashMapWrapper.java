begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|HashMapWrapper
import|;
end_import

begin_class
specifier|public
class|class
name|TestHashMapWrapper
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testHashMapWrapper
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mem_map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|mem_map
operator|.
name|put
argument_list|(
literal|"k1"
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
name|mem_map
operator|.
name|put
argument_list|(
literal|"k2"
argument_list|,
literal|"v2"
argument_list|)
expr_stmt|;
name|mem_map
operator|.
name|put
argument_list|(
literal|"k3"
argument_list|,
literal|"v3"
argument_list|)
expr_stmt|;
name|mem_map
operator|.
name|put
argument_list|(
literal|"k4"
argument_list|,
literal|"v4"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// NO cache
name|HashMapWrapper
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|wrapper
init|=
operator|new
name|HashMapWrapper
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|insertAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|checkAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// clean up temporary files
comment|// cache size = 1
name|wrapper
operator|=
operator|new
name|HashMapWrapper
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|insertAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|checkAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// clean up temporary files
comment|// cache size = 2
name|wrapper
operator|=
operator|new
name|HashMapWrapper
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|insertAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|checkAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// clean up temporary files
comment|// cache size = 4
name|wrapper
operator|=
operator|new
name|HashMapWrapper
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|insertAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|checkAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// clean up temporary files
comment|// default cache size (25000)
name|wrapper
operator|=
operator|new
name|HashMapWrapper
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|insertAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|checkAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// clean up temporary files
comment|// check mixed put/remove/get functions
name|wrapper
operator|=
operator|new
name|HashMapWrapper
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|insertAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|remove
argument_list|(
literal|"k3"
argument_list|)
expr_stmt|;
comment|// k3 is in HTree
name|mem_map
operator|.
name|remove
argument_list|(
literal|"k3"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mem_map
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|checkAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|remove
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
name|mem_map
operator|.
name|remove
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
name|checkAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|String
name|v4
init|=
name|wrapper
operator|.
name|get
argument_list|(
literal|"k4"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|v4
operator|!=
literal|null
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|v4
operator|.
name|equals
argument_list|(
literal|"v4"
argument_list|)
operator|)
assert|;
name|wrapper
operator|.
name|remove
argument_list|(
literal|"k4"
argument_list|)
expr_stmt|;
name|mem_map
operator|.
name|remove
argument_list|(
literal|"k4"
argument_list|)
expr_stmt|;
name|checkAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|put
argument_list|(
literal|"k5"
argument_list|,
literal|"v5"
argument_list|)
expr_stmt|;
name|mem_map
operator|.
name|put
argument_list|(
literal|"k5"
argument_list|,
literal|"v5"
argument_list|)
expr_stmt|;
name|checkAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|put
argument_list|(
literal|"k6"
argument_list|,
literal|"v6"
argument_list|)
expr_stmt|;
name|mem_map
operator|.
name|put
argument_list|(
literal|"k6"
argument_list|,
literal|"v6"
argument_list|)
expr_stmt|;
name|checkAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|put
argument_list|(
literal|"k6"
argument_list|,
literal|"v61"
argument_list|)
expr_stmt|;
name|mem_map
operator|.
name|put
argument_list|(
literal|"k6"
argument_list|,
literal|"v61"
argument_list|)
expr_stmt|;
name|checkAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|remove
argument_list|(
literal|"k6"
argument_list|)
expr_stmt|;
name|mem_map
operator|.
name|remove
argument_list|(
literal|"k6"
argument_list|)
expr_stmt|;
name|checkAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
comment|// get k1, k2 to main memory
name|wrapper
operator|.
name|get
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|get
argument_list|(
literal|"k2"
argument_list|)
expr_stmt|;
comment|// delete k1 so that cache is half empty
name|wrapper
operator|.
name|remove
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
name|mem_map
operator|.
name|remove
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
comment|// put new pair (k6, v7) so that it will be in persistent hash
name|wrapper
operator|.
name|put
argument_list|(
literal|"k6"
argument_list|,
literal|"v7"
argument_list|)
expr_stmt|;
name|mem_map
operator|.
name|put
argument_list|(
literal|"k6"
argument_list|,
literal|"v7"
argument_list|)
expr_stmt|;
name|checkAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
comment|// test clear
name|wrapper
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mem_map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|checkAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// clean up temporary files
comment|// insert 3,000 pairs random testing
name|wrapper
operator|=
operator|new
name|HashMapWrapper
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3000
condition|;
operator|++
name|i
control|)
block|{
name|String
name|k
init|=
literal|"k"
operator|+
name|i
decl_stmt|;
name|String
name|v
init|=
literal|"v"
operator|+
name|i
decl_stmt|;
name|wrapper
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|mem_map
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|checkAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Finished inserting 3000 pairs."
argument_list|)
expr_stmt|;
comment|// do 10,000 random get/remove operations
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|12345678
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
operator|++
name|i
control|)
block|{
name|int
name|j
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|3000
argument_list|)
decl_stmt|;
name|String
name|k
init|=
literal|"k"
operator|+
name|j
decl_stmt|;
name|String
name|v
decl_stmt|;
name|int
name|command
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|command
condition|)
block|{
case|case
literal|0
case|:
comment|// remove
comment|// System.out.println("removing " + k);// uncomment this for debugging
name|wrapper
operator|.
name|remove
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|mem_map
operator|.
name|remove
argument_list|(
name|k
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// get
comment|// System.out.println("getting " + k);// uncomment this for debugging
name|v
operator|=
name|wrapper
operator|.
name|get
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|String
name|v2
init|=
name|mem_map
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"one of them doesn't exists or different values from two hash tables"
argument_list|,
name|v
operator|==
literal|null
operator|&&
name|v2
operator|==
literal|null
operator|||
name|v
operator|.
name|equals
argument_list|(
name|v2
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// put
name|v
operator|=
literal|"v"
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
comment|// System.out.println("putting (" + k + ", " + v);// uncomment this for debugging
name|wrapper
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|mem_map
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// checkAll(wrapper, mem_map); // uncomment this for debugging
block|}
name|checkAll
argument_list|(
name|wrapper
argument_list|,
name|mem_map
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// clean up temporary files
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Exception should not be thrown."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TestHashMapWrapper successful"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|insertAll
parameter_list|(
name|HashMapWrapper
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hashTable
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|String
name|k
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|v
init|=
name|map
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|hashTable
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkAll
parameter_list|(
name|HashMapWrapper
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hashTable
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// check each item in the HashMapWrapper was actually inserted
for|for
control|(
name|String
name|k
range|:
name|hashTable
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|map_val
init|=
name|hashTable
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|map
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"some HashMapWrapper value is not in main memory HashMap: map_val = "
operator|+
name|map_val
operator|+
literal|"; val = "
operator|+
name|val
argument_list|,
name|map_val
operator|!=
literal|null
operator|&&
name|val
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"value in HashMapWrapper is not the same as MM HashMap: map_val = "
operator|+
name|map_val
operator|+
literal|"; val = "
operator|+
name|val
argument_list|,
name|val
operator|.
name|equals
argument_list|(
name|map_val
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check all inserted elements are in HashMapWrapper
for|for
control|(
name|String
name|k
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|map_val
init|=
name|hashTable
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|map
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Some MM HashMap key is not in HashMapWrapper: map_val = "
operator|+
name|map_val
operator|+
literal|"; val = "
operator|+
name|val
argument_list|,
name|map_val
operator|!=
literal|null
operator|&&
name|val
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Value in MM HashMap is not in HashMapWrapper: map_val = "
operator|+
name|map_val
operator|+
literal|"; val = "
operator|+
name|val
argument_list|,
name|val
operator|.
name|equals
argument_list|(
name|map_val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

