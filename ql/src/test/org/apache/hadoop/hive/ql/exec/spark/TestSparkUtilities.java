begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|session
operator|.
name|SparkSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|session
operator|.
name|SparkSessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|spark
operator|.
name|GenSparkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests for the SparkUtilities class.  */
end_comment

begin_class
specifier|public
class|class
name|TestSparkUtilities
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetSparkSessionUsingMultipleThreadsWithTheSameSession
parameter_list|()
throws|throws
name|HiveException
throws|,
name|InterruptedException
block|{
comment|// The only real state required from SessionState
specifier|final
name|AtomicReference
argument_list|<
name|SparkSession
argument_list|>
name|activeSparkSession
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Mocks
name|HiveConf
name|mockConf
init|=
name|mock
argument_list|(
name|HiveConf
operator|.
name|class
argument_list|)
decl_stmt|;
name|SparkSessionManager
name|mockSessionManager
init|=
name|mock
argument_list|(
name|SparkSessionManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
name|SparkSession
name|sparkSession
init|=
name|invocationOnMock
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|SparkSession
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sparkSession
operator|==
literal|null
condition|)
block|{
return|return
name|mock
argument_list|(
name|SparkSession
operator|.
name|class
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|sparkSession
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockSessionManager
argument_list|)
operator|.
name|getSession
argument_list|(
name|any
argument_list|(
name|SparkSession
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|mockConf
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
name|mockSessionState
init|=
name|mock
argument_list|(
name|SessionState
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockSessionState
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockConf
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
name|activeSparkSession
operator|.
name|set
argument_list|(
name|invocationOnMock
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|SparkSession
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockSessionState
argument_list|)
operator|.
name|setSparkSession
argument_list|(
name|any
argument_list|(
name|SparkSession
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
name|activeSparkSession
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockSessionState
argument_list|)
operator|.
name|getSparkSession
argument_list|()
expr_stmt|;
comment|// When
name|List
argument_list|<
name|Callable
argument_list|<
name|SparkSession
argument_list|>
argument_list|>
name|callables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|callables
operator|.
name|add
argument_list|(
operator|new
name|GetSparkSessionTester
argument_list|(
name|mockConf
argument_list|,
name|mockSessionManager
argument_list|,
name|mockSessionState
argument_list|)
argument_list|)
expr_stmt|;
name|callables
operator|.
name|add
argument_list|(
operator|new
name|GetSparkSessionTester
argument_list|(
name|mockConf
argument_list|,
name|mockSessionManager
argument_list|,
name|mockSessionState
argument_list|)
argument_list|)
expr_stmt|;
name|callables
operator|.
name|add
argument_list|(
operator|new
name|GetSparkSessionTester
argument_list|(
name|mockConf
argument_list|,
name|mockSessionManager
argument_list|,
name|mockSessionState
argument_list|)
argument_list|)
expr_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|callables
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|SparkSession
argument_list|>
argument_list|>
name|results
init|=
name|executorService
operator|.
name|invokeAll
argument_list|(
name|callables
argument_list|)
decl_stmt|;
comment|// Then
name|results
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|f
lambda|->
name|resolve
argument_list|(
name|f
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|ss
lambda|->
name|assertEquals
argument_list|(
name|ss
argument_list|,
name|activeSparkSession
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateMoveTaskDoesntCreateCascadeTempDirs
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSinkOperator
name|fsOp
init|=
name|mock
argument_list|(
name|FileSinkOperator
operator|.
name|class
argument_list|)
decl_stmt|;
name|ParseContext
name|pctx
init|=
name|mock
argument_list|(
name|ParseContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"_hive.hdfs.session.path"
argument_list|,
literal|"hdfs:/dummypath"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"_hive.local.session.path"
argument_list|,
literal|"hdfs:/dummypath"
argument_list|)
expr_stmt|;
name|Context
name|ctx
init|=
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|executionId
init|=
name|ctx
operator|.
name|getExecutionId
argument_list|()
decl_stmt|;
name|Context
name|ctxSpy
init|=
name|spy
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|FileSinkDesc
name|fileSinkDesc
init|=
name|mock
argument_list|(
name|FileSinkDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|mrPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs:/tmp/.staging/"
operator|+
name|executionId
operator|+
literal|"/-mr-10001"
argument_list|)
decl_stmt|;
name|Path
name|mrPath2
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs:/tmp/.staging/"
operator|+
name|executionId
operator|+
literal|"/-mr-10002"
argument_list|)
decl_stmt|;
name|Path
name|extPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs:/tmp/.staging/"
operator|+
name|executionId
operator|+
literal|"/-ext-10001"
argument_list|)
decl_stmt|;
name|Path
name|extPath2
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs:/tmp/.staging/"
operator|+
name|executionId
operator|+
literal|"/-ext-10002"
argument_list|)
decl_stmt|;
specifier|final
name|Ref
argument_list|<
name|Path
argument_list|>
name|expectedPathRef
init|=
operator|new
name|Ref
argument_list|<>
argument_list|(
name|mrPath
argument_list|)
decl_stmt|;
specifier|final
name|Ref
argument_list|<
name|Path
argument_list|>
name|testPathRef
init|=
operator|new
name|Ref
argument_list|<>
argument_list|(
name|extPath
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
return|return
name|ctxSpy
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|pctx
argument_list|)
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
return|return
name|mrPath2
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|ctxSpy
argument_list|)
operator|.
name|getMRTmpPath
argument_list|()
expr_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
return|return
name|extPath2
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|ctxSpy
argument_list|)
operator|.
name|getExternalTmpPath
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
return|return
name|testPathRef
operator|.
name|value
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|fileSinkDesc
argument_list|)
operator|.
name|getFinalDirName
argument_list|()
expr_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|fileSinkDesc
argument_list|)
operator|.
name|getLinkedFileSinkDesc
argument_list|()
expr_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
return|return
name|fileSinkDesc
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|fsOp
argument_list|)
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
name|assertEquals
argument_list|(
name|expectedPathRef
operator|.
name|value
argument_list|,
name|invocationOnMock
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|fileSinkDesc
argument_list|)
operator|.
name|setDirName
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|testPathRef
operator|.
name|value
operator|=
name|mrPath
expr_stmt|;
name|expectedPathRef
operator|.
name|value
operator|=
name|mrPath2
expr_stmt|;
name|GenSparkUtils
operator|.
name|createMoveTask
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
name|fsOp
argument_list|,
name|pctx
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testPathRef
operator|.
name|value
operator|=
name|extPath
expr_stmt|;
name|expectedPathRef
operator|.
name|value
operator|=
name|extPath2
expr_stmt|;
name|GenSparkUtils
operator|.
name|createMoveTask
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
name|fsOp
argument_list|,
name|pctx
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SparkSession
name|resolve
parameter_list|(
name|Future
argument_list|<
name|SparkSession
argument_list|>
name|future
parameter_list|)
block|{
try|try
block|{
return|return
name|future
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
class|class
name|GetSparkSessionTester
implements|implements
name|Callable
argument_list|<
name|SparkSession
argument_list|>
block|{
specifier|private
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
name|SparkSessionManager
name|sparkSessionManager
decl_stmt|;
specifier|private
name|SessionState
name|sessionState
decl_stmt|;
name|GetSparkSessionTester
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|SparkSessionManager
name|sparkSessionManager
parameter_list|,
name|SessionState
name|sessionState
parameter_list|)
block|{
name|this
operator|.
name|hiveConf
operator|=
name|hiveConf
expr_stmt|;
name|this
operator|.
name|sparkSessionManager
operator|=
name|sparkSessionManager
expr_stmt|;
name|this
operator|.
name|sessionState
operator|=
name|sessionState
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SparkSession
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|SessionState
operator|.
name|setCurrentSessionState
argument_list|(
name|sessionState
argument_list|)
expr_stmt|;
return|return
name|SparkUtilities
operator|.
name|getSparkSession
argument_list|(
name|hiveConf
argument_list|,
name|sparkSessionManager
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

