begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|DescriptionTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|VectorMapJoinVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_class
specifier|public
class|class
name|MapJoinTestDescription
extends|extends
name|DescriptionTest
block|{
specifier|public
specifier|static
class|class
name|SmallTableGenerationParameters
block|{
specifier|public
specifier|static
enum|enum
name|ValueOption
block|{
name|NO_RESTRICTION
block|,
name|ONLY_ONE
block|,
name|ONLY_TWO
block|,
name|AT_LEAST_TWO
block|}
specifier|private
name|ValueOption
name|valueOption
decl_stmt|;
specifier|private
name|int
name|keyOutOfAThousand
decl_stmt|;
specifier|private
name|int
name|noMatchKeyOutOfAThousand
decl_stmt|;
specifier|public
name|SmallTableGenerationParameters
parameter_list|()
block|{
name|valueOption
operator|=
name|ValueOption
operator|.
name|NO_RESTRICTION
expr_stmt|;
name|keyOutOfAThousand
operator|=
literal|50
expr_stmt|;
comment|// 5%
name|noMatchKeyOutOfAThousand
operator|=
literal|50
expr_stmt|;
comment|// 5%
block|}
specifier|public
name|void
name|setValueOption
parameter_list|(
name|ValueOption
name|valueOption
parameter_list|)
block|{
name|this
operator|.
name|valueOption
operator|=
name|valueOption
expr_stmt|;
block|}
specifier|public
name|ValueOption
name|getValueOption
parameter_list|()
block|{
return|return
name|valueOption
return|;
block|}
specifier|public
name|void
name|setKeyOutOfAThousand
parameter_list|(
name|int
name|keyOutOfAThousand
parameter_list|)
block|{
name|this
operator|.
name|keyOutOfAThousand
operator|=
name|keyOutOfAThousand
expr_stmt|;
block|}
specifier|public
name|int
name|getKeyOutOfAThousand
parameter_list|()
block|{
return|return
name|keyOutOfAThousand
return|;
block|}
specifier|public
name|void
name|setNoMatchKeyOutOfAThousand
parameter_list|(
name|int
name|noMatchKeyOutOfAThousand
parameter_list|)
block|{
name|this
operator|.
name|noMatchKeyOutOfAThousand
operator|=
name|noMatchKeyOutOfAThousand
expr_stmt|;
block|}
specifier|public
name|int
name|getNoMatchKeyOutOfAThousand
parameter_list|()
block|{
return|return
name|noMatchKeyOutOfAThousand
return|;
block|}
block|}
specifier|final
name|VectorMapJoinVariation
name|vectorMapJoinVariation
decl_stmt|;
comment|// Adjustable.
specifier|public
name|String
index|[]
name|bigTableColumnNames
decl_stmt|;
specifier|public
name|TypeInfo
index|[]
name|bigTableTypeInfos
decl_stmt|;
specifier|public
name|int
index|[]
name|bigTableKeyColumnNums
decl_stmt|;
specifier|public
name|String
index|[]
name|smallTableValueColumnNames
decl_stmt|;
specifier|public
name|TypeInfo
index|[]
name|smallTableValueTypeInfos
decl_stmt|;
specifier|public
name|int
index|[]
name|bigTableRetainColumnNums
decl_stmt|;
specifier|public
name|int
index|[]
name|smallTableRetainKeyColumnNums
decl_stmt|;
specifier|public
name|int
index|[]
name|smallTableRetainValueColumnNums
decl_stmt|;
specifier|public
name|SmallTableGenerationParameters
name|smallTableGenerationParameters
decl_stmt|;
comment|// Derived.
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|bigTableColumnNamesList
decl_stmt|;
specifier|public
name|String
index|[]
name|bigTableKeyColumnNames
decl_stmt|;
specifier|public
name|TypeInfo
index|[]
name|bigTableKeyTypeInfos
decl_stmt|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|smallTableValueColumnNamesList
decl_stmt|;
specifier|public
name|ObjectInspector
index|[]
name|bigTableObjectInspectors
decl_stmt|;
specifier|public
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|bigTableObjectInspectorsList
decl_stmt|;
specifier|public
name|StandardStructObjectInspector
name|bigTableStandardObjectInspector
decl_stmt|;
specifier|public
name|PrimitiveTypeInfo
index|[]
name|smallTableValuePrimitiveTypeInfos
decl_stmt|;
specifier|public
name|ObjectInspector
index|[]
name|smallTableObjectInspectors
decl_stmt|;
specifier|public
name|PrimitiveCategory
index|[]
name|smallTablePrimitiveCategories
decl_stmt|;
specifier|public
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|smallTableObjectInspectorsList
decl_stmt|;
specifier|public
name|StandardStructObjectInspector
name|smallTableStandardObjectInspector
decl_stmt|;
specifier|public
name|ObjectInspector
index|[]
name|inputObjectInspectors
decl_stmt|;
specifier|public
name|String
index|[]
name|outputColumnNames
decl_stmt|;
specifier|public
name|TypeInfo
index|[]
name|outputTypeInfos
decl_stmt|;
specifier|public
name|ObjectInspector
index|[]
name|outputObjectInspectors
decl_stmt|;
specifier|public
name|MapJoinTestDescription
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|VectorMapJoinVariation
name|vectorMapJoinVariation
parameter_list|,
name|String
index|[]
name|bigTableColumnNames
parameter_list|,
name|TypeInfo
index|[]
name|bigTableTypeInfos
parameter_list|,
name|int
index|[]
name|bigTableKeyColumnNums
parameter_list|,
name|String
index|[]
name|smallTableValueColumnNames
parameter_list|,
name|TypeInfo
index|[]
name|smallTableValueTypeInfos
parameter_list|,
name|int
index|[]
name|bigTableRetainColumnNums
parameter_list|,
name|int
index|[]
name|smallTableRetainKeyColumnNums
parameter_list|,
name|int
index|[]
name|smallTableRetainValueColumnNums
parameter_list|,
name|SmallTableGenerationParameters
name|smallTableGenerationParameters
parameter_list|)
block|{
name|super
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|this
operator|.
name|vectorMapJoinVariation
operator|=
name|vectorMapJoinVariation
expr_stmt|;
name|this
operator|.
name|bigTableColumnNames
operator|=
name|bigTableColumnNames
expr_stmt|;
name|this
operator|.
name|bigTableTypeInfos
operator|=
name|bigTableTypeInfos
expr_stmt|;
name|this
operator|.
name|bigTableKeyColumnNums
operator|=
name|bigTableKeyColumnNums
expr_stmt|;
name|this
operator|.
name|smallTableValueColumnNames
operator|=
name|smallTableValueColumnNames
expr_stmt|;
name|this
operator|.
name|smallTableValueTypeInfos
operator|=
name|smallTableValueTypeInfos
expr_stmt|;
name|this
operator|.
name|bigTableRetainColumnNums
operator|=
name|bigTableRetainColumnNums
expr_stmt|;
name|this
operator|.
name|smallTableRetainKeyColumnNums
operator|=
name|smallTableRetainKeyColumnNums
expr_stmt|;
name|this
operator|.
name|smallTableRetainValueColumnNums
operator|=
name|smallTableRetainValueColumnNums
expr_stmt|;
name|this
operator|.
name|smallTableGenerationParameters
operator|=
name|smallTableGenerationParameters
expr_stmt|;
switch|switch
condition|(
name|vectorMapJoinVariation
condition|)
block|{
case|case
name|INNER_BIG_ONLY
case|:
case|case
name|LEFT_SEMI
case|:
name|trimAwaySmallTableValueInfo
argument_list|()
expr_stmt|;
break|break;
case|case
name|INNER
case|:
case|case
name|OUTER
case|:
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown operator variation "
operator|+
name|vectorMapJoinVariation
argument_list|)
throw|;
block|}
name|computeDerived
argument_list|()
expr_stmt|;
block|}
specifier|public
name|SmallTableGenerationParameters
name|getSmallTableGenerationParameters
parameter_list|()
block|{
return|return
name|smallTableGenerationParameters
return|;
block|}
specifier|public
name|void
name|computeDerived
parameter_list|()
block|{
name|bigTableColumnNamesList
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|bigTableColumnNames
argument_list|)
expr_stmt|;
name|bigTableKeyColumnNames
operator|=
operator|new
name|String
index|[
name|bigTableKeyColumnNums
operator|.
name|length
index|]
expr_stmt|;
name|bigTableKeyTypeInfos
operator|=
operator|new
name|TypeInfo
index|[
name|bigTableKeyColumnNums
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bigTableKeyColumnNums
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bigTableKeyColumnNames
index|[
name|i
index|]
operator|=
name|bigTableColumnNames
index|[
name|bigTableKeyColumnNums
index|[
name|i
index|]
index|]
expr_stmt|;
name|bigTableKeyTypeInfos
index|[
name|i
index|]
operator|=
name|bigTableTypeInfos
index|[
name|bigTableKeyColumnNums
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
name|smallTableValueColumnNamesList
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|smallTableValueColumnNames
argument_list|)
expr_stmt|;
name|bigTableObjectInspectors
operator|=
operator|new
name|ObjectInspector
index|[
name|bigTableTypeInfos
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bigTableTypeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bigTableObjectInspectors
index|[
name|i
index|]
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|bigTableTypeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|bigTableObjectInspectorsList
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|bigTableObjectInspectors
argument_list|)
expr_stmt|;
name|smallTableObjectInspectors
operator|=
operator|new
name|ObjectInspector
index|[
name|smallTableValueTypeInfos
operator|.
name|length
index|]
expr_stmt|;
name|smallTablePrimitiveCategories
operator|=
operator|new
name|PrimitiveCategory
index|[
name|smallTableValueTypeInfos
operator|.
name|length
index|]
expr_stmt|;
name|smallTableValuePrimitiveTypeInfos
operator|=
operator|new
name|PrimitiveTypeInfo
index|[
name|smallTableValueTypeInfos
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|smallTableValueTypeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|smallTableValueTypeInfos
index|[
name|i
index|]
decl_stmt|;
name|smallTableObjectInspectors
index|[
name|i
index|]
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|primitiveTypeInfo
argument_list|)
expr_stmt|;
name|smallTablePrimitiveCategories
index|[
name|i
index|]
operator|=
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
name|smallTableValuePrimitiveTypeInfos
index|[
name|i
index|]
operator|=
name|primitiveTypeInfo
expr_stmt|;
block|}
name|smallTableObjectInspectorsList
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|smallTableObjectInspectors
argument_list|)
expr_stmt|;
name|bigTableStandardObjectInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|bigTableColumnNamesList
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|ObjectInspector
index|[]
operator|)
name|bigTableObjectInspectors
argument_list|)
argument_list|)
expr_stmt|;
name|smallTableStandardObjectInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|smallTableValueColumnNamesList
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|ObjectInspector
index|[]
operator|)
name|smallTableObjectInspectors
argument_list|)
argument_list|)
expr_stmt|;
name|inputObjectInspectors
operator|=
operator|new
name|ObjectInspector
index|[]
block|{
name|bigTableStandardObjectInspector
block|,
name|smallTableStandardObjectInspector
block|}
expr_stmt|;
name|int
name|outputLength
init|=
name|bigTableRetainColumnNums
operator|.
name|length
operator|+
name|smallTableRetainKeyColumnNums
operator|.
name|length
operator|+
name|smallTableRetainValueColumnNums
operator|.
name|length
decl_stmt|;
name|outputColumnNames
operator|=
name|createOutputColumnNames
argument_list|(
name|outputLength
argument_list|)
expr_stmt|;
name|outputTypeInfos
operator|=
operator|new
name|TypeInfo
index|[
name|outputLength
index|]
expr_stmt|;
name|int
name|outputIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bigTableRetainColumnNums
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|outputTypeInfos
index|[
name|outputIndex
operator|++
index|]
operator|=
name|bigTableTypeInfos
index|[
name|bigTableRetainColumnNums
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
comment|// for (int i = 0; i< smallTableRetainKeyColumnNums.length; i++) {
comment|//   outputTypeInfos[outputIndex++] = smallTableTypeInfos[smallTableRetainKeyColumnNums[i]];
comment|// }
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|smallTableRetainValueColumnNums
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|outputTypeInfos
index|[
name|outputIndex
operator|++
index|]
operator|=
name|smallTableValueTypeInfos
index|[
name|smallTableRetainValueColumnNums
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
name|outputObjectInspectors
operator|=
operator|new
name|ObjectInspector
index|[
name|outputLength
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputLength
condition|;
name|i
operator|++
control|)
block|{
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|outputTypeInfos
index|[
name|i
index|]
decl_stmt|;
name|outputObjectInspectors
index|[
name|i
index|]
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|primitiveTypeInfo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|trimAwaySmallTableValueInfo
parameter_list|()
block|{
name|smallTableValueColumnNames
operator|=
operator|new
name|String
index|[]
block|{}
expr_stmt|;
name|smallTableValueTypeInfos
operator|=
operator|new
name|TypeInfo
index|[]
block|{}
expr_stmt|;
name|smallTableRetainKeyColumnNums
operator|=
operator|new
name|int
index|[]
block|{}
expr_stmt|;
name|smallTableRetainValueColumnNums
operator|=
operator|new
name|int
index|[]
block|{}
expr_stmt|;
block|}
specifier|private
name|String
index|[]
name|createOutputColumnNames
parameter_list|(
name|int
name|outputColumnCount
parameter_list|)
block|{
name|String
index|[]
name|outputColumnNames
init|=
operator|new
name|String
index|[
name|outputColumnCount
index|]
decl_stmt|;
name|int
name|counter
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputColumnCount
condition|;
name|i
operator|++
control|)
block|{
name|outputColumnNames
index|[
name|i
index|]
operator|=
literal|"out"
operator|+
name|counter
operator|++
expr_stmt|;
block|}
return|return
name|outputColumnNames
return|;
block|}
block|}
end_class

end_unit

