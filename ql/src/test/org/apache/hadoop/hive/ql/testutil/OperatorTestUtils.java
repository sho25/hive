begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|testutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CollectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|InspectableObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_class
specifier|public
class|class
name|OperatorTestUtils
block|{
specifier|public
specifier|static
name|ExprNodeColumnDesc
name|getStringColumn
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|columnName
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    *    * @param expressionList    * @return A list of columns named _colX where x is a number    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|createOutputColumnNames
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|expressionList
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|outputCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expressionList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|outputCols
operator|.
name|add
argument_list|(
literal|"_col"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|outputCols
return|;
block|}
comment|/**    * Given a select operator and a collectOperator feed the sourceData into the operator    * tree and assert that each row matches the expectedResult    * @param selectOp    * @param collectOp    * @param sourceData    * @param expected    * @throws HiveException    */
specifier|public
specifier|static
name|void
name|assertResults
parameter_list|(
name|Operator
argument_list|<
name|SelectDesc
argument_list|>
name|selectOp
parameter_list|,
name|CollectOperator
name|collectOp
parameter_list|,
name|InspectableObject
index|[]
name|sourceData
parameter_list|,
name|InspectableObject
index|[]
name|expected
parameter_list|)
throws|throws
name|HiveException
block|{
name|InspectableObject
name|resultRef
init|=
operator|new
name|InspectableObject
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceData
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|selectOp
operator|.
name|process
argument_list|(
name|sourceData
index|[
name|i
index|]
operator|.
name|o
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|collectOp
operator|.
name|retrieve
argument_list|(
name|resultRef
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|expectedOi
init|=
operator|(
name|StructObjectInspector
operator|)
name|expected
index|[
name|i
index|]
operator|.
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|expectedFields
init|=
name|expectedOi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|destinationOi
init|=
operator|(
name|StructObjectInspector
operator|)
name|resultRef
operator|.
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|destinationFields
init|=
name|destinationOi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Source and destination have differing numbers of fields "
argument_list|,
name|expectedFields
operator|.
name|size
argument_list|()
argument_list|,
name|destinationFields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|expectedFields
control|)
block|{
name|StructField
name|dest
init|=
name|expectedOi
operator|.
name|getStructFieldRef
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Cound not find column named "
operator|+
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|dest
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"comparing "
operator|+
name|expectedOi
operator|.
name|getStructFieldData
argument_list|(
name|expected
index|[
name|i
index|]
operator|.
name|o
argument_list|,
name|field
argument_list|)
operator|+
literal|" "
operator|+
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" to "
operator|+
name|destinationOi
operator|.
name|getStructFieldData
argument_list|(
name|resultRef
operator|.
name|o
argument_list|,
name|dest
argument_list|)
operator|+
literal|" "
operator|+
name|dest
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|expectedOi
operator|.
name|getStructFieldData
argument_list|(
name|expected
index|[
name|i
index|]
operator|.
name|o
argument_list|,
name|field
argument_list|)
argument_list|,
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|destinationOi
operator|.
name|getStructFieldData
argument_list|(
name|resultRef
operator|.
name|o
argument_list|,
name|dest
argument_list|)
argument_list|,
name|dest
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|selectOp
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

