begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
operator|.
name|ExpressionTypes
import|;
end_import

begin_class
specifier|public
class|class
name|TestCompositeHiveObject
extends|extends
name|TestCase
block|{
comment|// this is our row to test expressions on
specifier|protected
name|HiveObject
index|[]
name|r
decl_stmt|;
specifier|protected
name|CompositeHiveObject
name|cr
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|HiveException
block|{
name|r
operator|=
operator|new
name|HiveObject
index|[
literal|5
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|data
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|data
operator|.
name|add
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
name|data
operator|.
name|add
argument_list|(
literal|""
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|add
argument_list|(
literal|""
operator|+
operator|(
name|i
operator|+
literal|2
operator|)
argument_list|)
expr_stmt|;
name|ColumnSet
name|cs
init|=
operator|new
name|ColumnSet
argument_list|(
name|data
argument_list|)
decl_stmt|;
try|try
block|{
name|r
index|[
name|i
index|]
operator|=
operator|new
name|TableHiveObject
argument_list|(
name|cs
argument_list|,
operator|new
name|columnsetSerDe
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|cr
operator|=
operator|new
name|CompositeHiveObject
argument_list|(
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|cr
operator|.
name|addHiveObject
argument_list|(
name|r
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCompositeHiveObjectExpression
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// get a evaluator for a simple field expression
name|exprNodeColumnDesc
name|exprDesc
init|=
operator|new
name|exprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"0.col[1]"
argument_list|)
decl_stmt|;
name|ExprNodeEvaluator
name|eval
init|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|exprDesc
argument_list|)
decl_stmt|;
comment|// evaluate on row
name|Object
name|ret
init|=
name|eval
operator|.
name|evaluateToObject
argument_list|(
name|cr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ret
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Full Expression ok"
argument_list|)
expr_stmt|;
comment|// repeat same test by evaluating on one row at a time
name|exprDesc
operator|=
operator|new
name|exprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|eval
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
comment|// evaluate on row
name|HiveObject
name|ho
init|=
name|eval
operator|.
name|evaluate
argument_list|(
name|cr
argument_list|)
decl_stmt|;
name|exprDesc
operator|=
operator|new
name|exprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"col[1]"
argument_list|)
expr_stmt|;
name|eval
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|ret
operator|=
name|eval
operator|.
name|evaluateToObject
argument_list|(
name|ho
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ret
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Nested Expression ok"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testCompositeHiveObjectFilterOperator
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|exprNodeDesc
name|f1
init|=
operator|new
name|exprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"0.col[2]"
argument_list|)
decl_stmt|;
name|exprNodeDesc
name|f2
init|=
operator|new
name|exprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"1.col[1]"
argument_list|)
decl_stmt|;
name|exprNodeDesc
name|f3
init|=
operator|new
name|exprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"2.col[0]"
argument_list|)
decl_stmt|;
name|exprNodeDesc
name|func1
init|=
name|SemanticAnalyzer
operator|.
name|getFuncExprNodeDesc
argument_list|(
literal|"=="
argument_list|,
name|f1
argument_list|,
name|f2
argument_list|)
decl_stmt|;
name|exprNodeDesc
name|func2
init|=
name|SemanticAnalyzer
operator|.
name|getFuncExprNodeDesc
argument_list|(
literal|"=="
argument_list|,
name|f2
argument_list|,
name|f3
argument_list|)
decl_stmt|;
name|exprNodeDesc
name|func3
init|=
name|SemanticAnalyzer
operator|.
name|getFuncExprNodeDesc
argument_list|(
literal|"&&"
argument_list|,
name|func1
argument_list|,
name|func2
argument_list|)
decl_stmt|;
name|filterDesc
name|filterCtx
init|=
operator|new
name|filterDesc
argument_list|(
name|func3
argument_list|)
decl_stmt|;
comment|// Configuration
name|Operator
argument_list|<
name|filterDesc
argument_list|>
name|op
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|filterDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|op
operator|.
name|setConf
argument_list|(
name|filterCtx
argument_list|)
expr_stmt|;
comment|// runtime initialization
name|op
operator|.
name|initialize
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// evaluate on row
name|op
operator|.
name|process
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Enum
argument_list|<
name|?
argument_list|>
argument_list|,
name|Long
argument_list|>
name|results
init|=
name|op
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|FilterOperator
operator|.
name|Counter
operator|.
name|FILTERED
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|FilterOperator
operator|.
name|Counter
operator|.
name|PASSED
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Filter Operator ok"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testCompositeHiveObjectSelectOperator
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// col1
name|exprNodeDesc
name|exprDesc1
init|=
operator|new
name|exprNodeColumnDesc
argument_list|(
name|TypeInfo
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
literal|"col[1]"
argument_list|)
decl_stmt|;
comment|// col2
name|exprNodeDesc
name|expr1
init|=
operator|new
name|exprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"col[0]"
argument_list|)
decl_stmt|;
name|exprNodeDesc
name|expr2
init|=
operator|new
name|exprNodeConstantDesc
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|exprNodeDesc
name|exprDesc2
init|=
name|SemanticAnalyzer
operator|.
name|getFuncExprNodeDesc
argument_list|(
literal|"concat"
argument_list|,
name|expr1
argument_list|,
name|expr2
argument_list|)
decl_stmt|;
comment|// select operator to project these two columns
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|earr
init|=
operator|new
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|earr
operator|.
name|add
argument_list|(
name|exprDesc1
argument_list|)
expr_stmt|;
name|earr
operator|.
name|add
argument_list|(
name|exprDesc2
argument_list|)
expr_stmt|;
name|selectDesc
name|selectCtx
init|=
operator|new
name|selectDesc
argument_list|(
name|earr
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|selectDesc
argument_list|>
name|op
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|selectDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|op
operator|.
name|setConf
argument_list|(
name|selectCtx
argument_list|)
expr_stmt|;
comment|// collectOperator to look at the output of the select operator
name|collectDesc
name|cd
init|=
operator|new
name|collectDesc
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|CollectOperator
name|cdop
init|=
operator|(
name|CollectOperator
operator|)
name|OperatorFactory
operator|.
name|get
argument_list|(
name|collectDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|cdop
operator|.
name|setConf
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|nextOp
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|nextOp
operator|.
name|add
argument_list|(
name|cdop
argument_list|)
expr_stmt|;
name|op
operator|.
name|setChildOperators
argument_list|(
name|nextOp
argument_list|)
expr_stmt|;
name|op
operator|.
name|initialize
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// evaluate on row
name|op
operator|.
name|process
argument_list|(
name|r
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// analyze result
name|HiveObject
name|ho
init|=
name|cdop
operator|.
name|retrieve
argument_list|()
decl_stmt|;
name|exprDesc1
operator|=
operator|new
name|exprNodeColumnDesc
argument_list|(
name|TypeInfo
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|ExprNodeEvaluator
name|eval
init|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|exprDesc1
argument_list|)
decl_stmt|;
name|Object
name|ret
init|=
name|eval
operator|.
name|evaluateToObject
argument_list|(
name|ho
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ret
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|exprDesc1
operator|=
operator|new
name|exprNodeColumnDesc
argument_list|(
name|TypeInfo
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|eval
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|exprDesc1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|eval
operator|.
name|evaluateToObject
argument_list|(
name|ho
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ret
argument_list|,
literal|"01"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Select Operator ok"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testLabeledCompositeObject
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
index|[]
name|fnames
init|=
block|{
literal|"key"
block|,
literal|"value"
block|}
decl_stmt|;
name|LabeledCompositeHiveObject
name|cr
init|=
operator|new
name|LabeledCompositeHiveObject
argument_list|(
name|fnames
argument_list|)
decl_stmt|;
name|cr
operator|.
name|addHiveObject
argument_list|(
name|r
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|cr
operator|.
name|addHiveObject
argument_list|(
name|r
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// get a evaluator for a simple field expression
name|exprNodeDesc
name|exprDesc
init|=
operator|new
name|exprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"value.col[2]"
argument_list|)
decl_stmt|;
name|ExprNodeEvaluator
name|eval
init|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|exprDesc
argument_list|)
decl_stmt|;
comment|// evaluate on row
name|Object
name|ret
init|=
name|eval
operator|.
name|evaluateToObject
argument_list|(
name|cr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ret
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Labeled Composite full expression ok"
argument_list|)
expr_stmt|;
comment|// repeat same test by evaluating on one row at a time
name|exprDesc
operator|=
operator|new
name|exprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|eval
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
comment|// evaluate on row
name|HiveObject
name|ho
init|=
name|eval
operator|.
name|evaluate
argument_list|(
name|cr
argument_list|)
decl_stmt|;
name|exprDesc
operator|=
operator|new
name|exprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"col[2]"
argument_list|)
expr_stmt|;
name|eval
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|ret
operator|=
name|eval
operator|.
name|evaluateToObject
argument_list|(
name|ho
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ret
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Labeled Composite nested Expression ok"
argument_list|)
expr_stmt|;
name|exprDesc
operator|=
operator|new
name|exprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"invalid_field"
argument_list|)
expr_stmt|;
name|eval
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|boolean
name|gotException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|eval
operator|.
name|evaluateToObject
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|gotException
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Invalid field name check ok"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|// TODO:
comment|// 1. test null hive objects
comment|// 2. test empty select expressions
block|}
end_class

end_unit

