begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|convert
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|serde
operator|.
name|ParquetTableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|timestamp
operator|.
name|NanoTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|PrimitiveConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|PrimitiveType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|PrimitiveType
operator|.
name|PrimitiveTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|TestETypeConverter
block|{
specifier|private
name|ConverterParentHelper
name|parent
decl_stmt|;
specifier|private
name|Timestamp
name|ts
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
block|{
name|parent
operator|=
operator|new
name|ConverterParentHelper
argument_list|()
expr_stmt|;
name|ts
operator|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2011-01-01 01:01:01.111111111"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This class helps to compare a Writable value pushed to the ConverterParent class.    */
specifier|private
class|class
name|ConverterParentHelper
implements|implements
name|ConverterParent
block|{
specifier|private
name|Writable
name|value
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * The set() method is called from within addXXXX() PrimitiveConverter methods.      */
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|Writable
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
specifier|public
name|void
name|assertWritableValue
parameter_list|(
name|Writable
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getClass
argument_list|()
argument_list|,
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Writable value set to Parent is different than expected"
argument_list|,
name|expected
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PrimitiveConverter
name|getETypeConverter
parameter_list|(
name|ConverterParent
name|parent
parameter_list|,
name|PrimitiveTypeName
name|typeName
parameter_list|,
name|TypeInfo
name|type
parameter_list|)
block|{
return|return
name|ETypeConverter
operator|.
name|getNewConverter
argument_list|(
operator|new
name|PrimitiveType
argument_list|(
name|Type
operator|.
name|Repetition
operator|.
name|REQUIRED
argument_list|,
name|typeName
argument_list|,
literal|"field"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestampInt96ConverterLocal
parameter_list|()
block|{
name|PrimitiveConverter
name|converter
decl_stmt|;
comment|// Default timezone should be Localtime
name|converter
operator|=
name|getETypeConverter
argument_list|(
name|parent
argument_list|,
name|PrimitiveTypeName
operator|.
name|INT96
argument_list|,
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|)
expr_stmt|;
name|converter
operator|.
name|addBinary
argument_list|(
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
name|ts
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
operator|.
name|toBinary
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|assertWritableValue
argument_list|(
operator|new
name|TimestampWritable
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestampInt96ConverterGMT
parameter_list|()
block|{
name|PrimitiveConverter
name|converter
decl_stmt|;
name|parent
operator|.
name|metadata
operator|.
name|put
argument_list|(
name|ParquetTableUtils
operator|.
name|PARQUET_INT96_WRITE_ZONE_PROPERTY
argument_list|,
literal|"GMT"
argument_list|)
expr_stmt|;
name|converter
operator|=
name|getETypeConverter
argument_list|(
name|parent
argument_list|,
name|PrimitiveTypeName
operator|.
name|INT96
argument_list|,
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|)
expr_stmt|;
name|converter
operator|.
name|addBinary
argument_list|(
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
name|ts
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toBinary
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|assertWritableValue
argument_list|(
operator|new
name|TimestampWritable
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestampInt96ConverterChicago
parameter_list|()
block|{
name|PrimitiveConverter
name|converter
decl_stmt|;
name|parent
operator|.
name|metadata
operator|.
name|put
argument_list|(
name|ParquetTableUtils
operator|.
name|PARQUET_INT96_WRITE_ZONE_PROPERTY
argument_list|,
literal|"America/Chicago"
argument_list|)
expr_stmt|;
name|converter
operator|=
name|getETypeConverter
argument_list|(
name|parent
argument_list|,
name|PrimitiveTypeName
operator|.
name|INT96
argument_list|,
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|)
expr_stmt|;
name|converter
operator|.
name|addBinary
argument_list|(
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
name|ts
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toBinary
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|assertWritableValue
argument_list|(
operator|new
name|TimestampWritable
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestampInt96ConverterEtc
parameter_list|()
block|{
name|PrimitiveConverter
name|converter
decl_stmt|;
name|parent
operator|.
name|metadata
operator|.
name|put
argument_list|(
name|ParquetTableUtils
operator|.
name|PARQUET_INT96_WRITE_ZONE_PROPERTY
argument_list|,
literal|"Etc/GMT-12"
argument_list|)
expr_stmt|;
name|converter
operator|=
name|getETypeConverter
argument_list|(
name|parent
argument_list|,
name|PrimitiveTypeName
operator|.
name|INT96
argument_list|,
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|)
expr_stmt|;
name|converter
operator|.
name|addBinary
argument_list|(
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
name|ts
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"Etc/GMT-12"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toBinary
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|assertWritableValue
argument_list|(
operator|new
name|TimestampWritable
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

