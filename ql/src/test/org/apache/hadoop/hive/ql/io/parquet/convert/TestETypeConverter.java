begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|convert
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|convert
operator|.
name|ETypeConverter
operator|.
name|BinaryConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|timestamp
operator|.
name|NanoTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|timestamp
operator|.
name|NanoTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|PrimitiveConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|GroupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|LogicalTypeAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|PrimitiveType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|PrimitiveType
operator|.
name|PrimitiveTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|Type
operator|.
name|Repetition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for class ETypeConverter.  */
end_comment

begin_class
specifier|public
class|class
name|TestETypeConverter
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetDecimalConverter
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeInfo
name|hiveTypeInfo
init|=
operator|new
name|DecimalTypeInfo
argument_list|(
literal|7
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|BINARY
argument_list|)
operator|.
name|as
argument_list|(
name|LogicalTypeAnnotation
operator|.
name|decimalType
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Writable
name|writable
init|=
name|getWritableFromBinaryConverter
argument_list|(
name|hiveTypeInfo
argument_list|,
name|primitiveType
argument_list|,
name|Binary
operator|.
name|fromString
argument_list|(
literal|"155"
argument_list|)
argument_list|)
decl_stmt|;
name|HiveDecimalWritable
name|decimalWritable
init|=
operator|(
name|HiveDecimalWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|decimalWritable
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDecimalConverterIntHiveType
parameter_list|()
throws|throws
name|Exception
block|{
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|BINARY
argument_list|)
operator|.
name|as
argument_list|(
name|LogicalTypeAnnotation
operator|.
name|decimalType
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Writable
name|writable
init|=
name|getWritableFromPrimitiveConverter
argument_list|(
name|createHiveTypeInfo
argument_list|(
literal|"int"
argument_list|)
argument_list|,
name|primitiveType
argument_list|,
literal|2200
argument_list|)
decl_stmt|;
name|IntWritable
name|intWritable
init|=
operator|(
name|IntWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|22
argument_list|,
name|intWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDecimalConverterBigIntHiveType
parameter_list|()
throws|throws
name|Exception
block|{
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|BINARY
argument_list|)
operator|.
name|as
argument_list|(
name|LogicalTypeAnnotation
operator|.
name|decimalType
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Writable
name|writable
init|=
name|getWritableFromPrimitiveConverter
argument_list|(
name|createHiveTypeInfo
argument_list|(
literal|"bigint"
argument_list|)
argument_list|,
name|primitiveType
argument_list|,
literal|2200
argument_list|)
decl_stmt|;
name|LongWritable
name|longWritable
init|=
operator|(
name|LongWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|22
argument_list|,
name|longWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDecimalConverterFloatHiveType
parameter_list|()
throws|throws
name|Exception
block|{
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|BINARY
argument_list|)
operator|.
name|as
argument_list|(
name|LogicalTypeAnnotation
operator|.
name|decimalType
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Writable
name|writable
init|=
name|getWritableFromPrimitiveConverter
argument_list|(
name|createHiveTypeInfo
argument_list|(
literal|"float"
argument_list|)
argument_list|,
name|primitiveType
argument_list|,
literal|2200
argument_list|)
decl_stmt|;
name|FloatWritable
name|floatWritable
init|=
operator|(
name|FloatWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|22
argument_list|,
operator|(
name|int
operator|)
name|floatWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDecimalConverterDoubleHiveType
parameter_list|()
throws|throws
name|Exception
block|{
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|BINARY
argument_list|)
operator|.
name|as
argument_list|(
name|LogicalTypeAnnotation
operator|.
name|decimalType
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Writable
name|writable
init|=
name|getWritableFromPrimitiveConverter
argument_list|(
name|createHiveTypeInfo
argument_list|(
literal|"double"
argument_list|)
argument_list|,
name|primitiveType
argument_list|,
literal|2200
argument_list|)
decl_stmt|;
name|DoubleWritable
name|doubleWritable
init|=
operator|(
name|DoubleWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|22
argument_list|,
operator|(
name|int
operator|)
name|doubleWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTimestampConverter
parameter_list|()
throws|throws
name|Exception
block|{
name|Timestamp
name|timestamp
init|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2018-06-15 15:12:20.0"
argument_list|)
decl_stmt|;
name|NanoTime
name|nanoTime
init|=
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
name|timestamp
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|INT96
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Writable
name|writable
init|=
name|getWritableFromBinaryConverter
argument_list|(
literal|null
argument_list|,
name|primitiveType
argument_list|,
name|nanoTime
operator|.
name|toBinary
argument_list|()
argument_list|)
decl_stmt|;
name|TimestampWritableV2
name|timestampWritable
init|=
operator|(
name|TimestampWritableV2
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
name|timestamp
operator|.
name|getNanos
argument_list|()
argument_list|,
name|timestampWritable
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTextConverter
parameter_list|()
throws|throws
name|Exception
block|{
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|BINARY
argument_list|)
operator|.
name|as
argument_list|(
name|LogicalTypeAnnotation
operator|.
name|stringType
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Writable
name|writable
init|=
name|getWritableFromBinaryConverter
argument_list|(
operator|new
name|VarcharTypeInfo
argument_list|()
argument_list|,
name|primitiveType
argument_list|,
name|Binary
operator|.
name|fromString
argument_list|(
literal|"this_is_a_value"
argument_list|)
argument_list|)
decl_stmt|;
name|Text
name|textWritable
init|=
operator|(
name|Text
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|"this_is_a_value"
argument_list|,
name|textWritable
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTextConverterNoHiveTypeInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|BINARY
argument_list|)
operator|.
name|as
argument_list|(
name|LogicalTypeAnnotation
operator|.
name|stringType
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Writable
name|writable
init|=
name|getWritableFromBinaryConverter
argument_list|(
literal|null
argument_list|,
name|primitiveType
argument_list|,
name|Binary
operator|.
name|fromString
argument_list|(
literal|"this_is_a_value"
argument_list|)
argument_list|)
decl_stmt|;
name|Text
name|textWritable
init|=
operator|(
name|Text
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|"this_is_a_value"
argument_list|,
name|textWritable
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIntConverterForTinyInt
parameter_list|()
throws|throws
name|Exception
block|{
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|INT32
argument_list|)
operator|.
name|as
argument_list|(
name|LogicalTypeAnnotation
operator|.
name|intType
argument_list|(
literal|8
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Writable
name|writable
init|=
name|getWritableFromPrimitiveConverter
argument_list|(
name|createHiveTypeInfo
argument_list|(
literal|"tinyint"
argument_list|)
argument_list|,
name|primitiveType
argument_list|,
literal|125
argument_list|)
decl_stmt|;
name|IntWritable
name|intWritable
init|=
operator|(
name|IntWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|125
argument_list|,
name|intWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIntConverterForFloat
parameter_list|()
throws|throws
name|Exception
block|{
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|INT32
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Writable
name|writable
init|=
name|getWritableFromPrimitiveConverter
argument_list|(
name|createHiveTypeInfo
argument_list|(
literal|"float"
argument_list|)
argument_list|,
name|primitiveType
argument_list|,
literal|22225
argument_list|)
decl_stmt|;
name|FloatWritable
name|floatWritable
init|=
operator|(
name|FloatWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|float
operator|)
literal|22225
argument_list|,
operator|(
name|float
operator|)
name|floatWritable
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIntConverterForBigint
parameter_list|()
throws|throws
name|Exception
block|{
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|INT32
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Writable
name|writable
init|=
name|getWritableFromPrimitiveConverter
argument_list|(
name|createHiveTypeInfo
argument_list|(
literal|"bigint"
argument_list|)
argument_list|,
name|primitiveType
argument_list|,
literal|22225
argument_list|)
decl_stmt|;
name|LongWritable
name|longWritable
init|=
operator|(
name|LongWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|22225
argument_list|,
name|longWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIntConverterForDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|INT32
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Writable
name|writable
init|=
name|getWritableFromPrimitiveConverter
argument_list|(
name|createHiveTypeInfo
argument_list|(
literal|"double"
argument_list|)
argument_list|,
name|primitiveType
argument_list|,
literal|22225
argument_list|)
decl_stmt|;
name|DoubleWritable
name|doubleWritable
init|=
operator|(
name|DoubleWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|double
operator|)
literal|22225
argument_list|,
operator|(
name|double
operator|)
name|doubleWritable
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIntConverterForSmallint
parameter_list|()
throws|throws
name|Exception
block|{
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|INT32
argument_list|)
operator|.
name|as
argument_list|(
name|LogicalTypeAnnotation
operator|.
name|intType
argument_list|(
literal|16
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Writable
name|writable
init|=
name|getWritableFromPrimitiveConverter
argument_list|(
name|createHiveTypeInfo
argument_list|(
literal|"smallint"
argument_list|)
argument_list|,
name|primitiveType
argument_list|,
literal|32766
argument_list|)
decl_stmt|;
name|IntWritable
name|intWritable
init|=
operator|(
name|IntWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|32766
argument_list|,
name|intWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIntConverterNoHiveTypeInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|INT32
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Writable
name|writable
init|=
name|getWritableFromPrimitiveConverter
argument_list|(
literal|null
argument_list|,
name|primitiveType
argument_list|,
literal|12225
argument_list|)
decl_stmt|;
name|IntWritable
name|intWritable
init|=
operator|(
name|IntWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|12225
argument_list|,
name|intWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDoubleConverter
parameter_list|()
throws|throws
name|Exception
block|{
name|MyConverterParent
name|converterParent
init|=
operator|new
name|MyConverterParent
argument_list|()
decl_stmt|;
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|DOUBLE
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|PrimitiveConverter
name|converter
init|=
name|ETypeConverter
operator|.
name|getNewConverter
argument_list|(
name|primitiveType
argument_list|,
literal|1
argument_list|,
name|converterParent
argument_list|,
literal|null
argument_list|)
decl_stmt|;
operator|(
operator|(
name|PrimitiveConverter
operator|)
name|converter
operator|)
operator|.
name|addDouble
argument_list|(
literal|3276
argument_list|)
expr_stmt|;
name|Writable
name|writable
init|=
name|converterParent
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|DoubleWritable
name|doubleWritable
init|=
operator|(
name|DoubleWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|3276
argument_list|,
name|doubleWritable
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBooleanConverter
parameter_list|()
throws|throws
name|Exception
block|{
name|MyConverterParent
name|converterParent
init|=
operator|new
name|MyConverterParent
argument_list|()
decl_stmt|;
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|BOOLEAN
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|PrimitiveConverter
name|converter
init|=
name|ETypeConverter
operator|.
name|getNewConverter
argument_list|(
name|primitiveType
argument_list|,
literal|1
argument_list|,
name|converterParent
argument_list|,
literal|null
argument_list|)
decl_stmt|;
operator|(
operator|(
name|PrimitiveConverter
operator|)
name|converter
operator|)
operator|.
name|addBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Writable
name|writable
init|=
name|converterParent
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|BooleanWritable
name|booleanWritable
init|=
operator|(
name|BooleanWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|booleanWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFloatConverter
parameter_list|()
throws|throws
name|Exception
block|{
name|MyConverterParent
name|converterParent
init|=
operator|new
name|MyConverterParent
argument_list|()
decl_stmt|;
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|FLOAT
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|PrimitiveConverter
name|converter
init|=
name|ETypeConverter
operator|.
name|getNewConverter
argument_list|(
name|primitiveType
argument_list|,
literal|1
argument_list|,
name|converterParent
argument_list|,
literal|null
argument_list|)
decl_stmt|;
operator|(
operator|(
name|PrimitiveConverter
operator|)
name|converter
operator|)
operator|.
name|addFloat
argument_list|(
literal|3276f
argument_list|)
expr_stmt|;
name|Writable
name|writable
init|=
name|converterParent
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|FloatWritable
name|floatWritable
init|=
operator|(
name|FloatWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|3276f
argument_list|,
name|floatWritable
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFloatConverterForDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|MyConverterParent
name|converterParent
init|=
operator|new
name|MyConverterParent
argument_list|()
decl_stmt|;
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|FLOAT
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|PrimitiveConverter
name|converter
init|=
name|ETypeConverter
operator|.
name|getNewConverter
argument_list|(
name|primitiveType
argument_list|,
literal|1
argument_list|,
name|converterParent
argument_list|,
name|createHiveTypeInfo
argument_list|(
literal|"double"
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|PrimitiveConverter
operator|)
name|converter
operator|)
operator|.
name|addFloat
argument_list|(
literal|3276f
argument_list|)
expr_stmt|;
name|Writable
name|writable
init|=
name|converterParent
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|DoubleWritable
name|doubleWritable
init|=
operator|(
name|DoubleWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|3276d
argument_list|,
name|doubleWritable
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBinaryConverter
parameter_list|()
throws|throws
name|Exception
block|{
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|BINARY
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Writable
name|writable
init|=
name|getWritableFromBinaryConverter
argument_list|(
literal|null
argument_list|,
name|primitiveType
argument_list|,
name|Binary
operator|.
name|fromString
argument_list|(
literal|"this_is_a_value"
argument_list|)
argument_list|)
decl_stmt|;
name|BytesWritable
name|byteWritable
init|=
operator|(
name|BytesWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|"this_is_a_value"
argument_list|,
operator|new
name|String
argument_list|(
name|byteWritable
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetLongConverter
parameter_list|()
throws|throws
name|Exception
block|{
name|MyConverterParent
name|converterParent
init|=
operator|new
name|MyConverterParent
argument_list|()
decl_stmt|;
name|PrimitiveType
name|primitiveType
init|=
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|INT64
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|PrimitiveConverter
name|converter
init|=
name|ETypeConverter
operator|.
name|getNewConverter
argument_list|(
name|primitiveType
argument_list|,
literal|1
argument_list|,
name|converterParent
argument_list|,
literal|null
argument_list|)
decl_stmt|;
operator|(
operator|(
name|PrimitiveConverter
operator|)
name|converter
operator|)
operator|.
name|addLong
argument_list|(
literal|12225
argument_list|)
expr_stmt|;
name|Writable
name|writable
init|=
name|converterParent
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LongWritable
name|longWritable
init|=
operator|(
name|LongWritable
operator|)
name|writable
decl_stmt|;
name|assertEquals
argument_list|(
literal|12225L
argument_list|,
name|longWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetConverterForList
parameter_list|()
block|{
name|MyConverterParent
name|converterParent
init|=
operator|new
name|MyConverterParent
argument_list|()
decl_stmt|;
name|GroupType
name|type
init|=
name|Types
operator|.
name|optionalList
argument_list|()
operator|.
name|element
argument_list|(
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|INT64
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"array"
argument_list|)
decl_stmt|;
name|HiveGroupConverter
name|f
init|=
name|HiveGroupConverter
operator|.
name|getConverterFromDescription
argument_list|(
name|type
argument_list|,
literal|1
argument_list|,
name|converterParent
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|instanceof
name|HiveCollectionConverter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetConverterForMap
parameter_list|()
block|{
name|MyConverterParent
name|converterParent
init|=
operator|new
name|MyConverterParent
argument_list|()
decl_stmt|;
name|GroupType
name|type
init|=
name|Types
operator|.
name|optionalMap
argument_list|()
operator|.
name|key
argument_list|(
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|INT64
argument_list|)
operator|.
name|named
argument_list|(
literal|"key"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|Types
operator|.
name|optional
argument_list|(
name|PrimitiveTypeName
operator|.
name|INT64
argument_list|)
operator|.
name|named
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"map"
argument_list|)
decl_stmt|;
name|HiveGroupConverter
name|f
init|=
name|HiveGroupConverter
operator|.
name|getConverterFromDescription
argument_list|(
name|type
argument_list|,
literal|1
argument_list|,
name|converterParent
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|instanceof
name|HiveCollectionConverter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetConverterForStruct
parameter_list|()
block|{
name|MyConverterParent
name|converterParent
init|=
operator|new
name|MyConverterParent
argument_list|()
decl_stmt|;
name|GroupType
name|type
init|=
name|Types
operator|.
name|buildGroup
argument_list|(
name|Repetition
operator|.
name|OPTIONAL
argument_list|)
operator|.
name|named
argument_list|(
literal|"struct"
argument_list|)
decl_stmt|;
name|HiveGroupConverter
name|f
init|=
name|HiveGroupConverter
operator|.
name|getConverterFromDescription
argument_list|(
name|type
argument_list|,
literal|1
argument_list|,
name|converterParent
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|instanceof
name|HiveStructConverter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Writable
name|getWritableFromBinaryConverter
parameter_list|(
name|TypeInfo
name|hiveTypeInfo
parameter_list|,
name|PrimitiveType
name|primitiveType
parameter_list|,
name|Binary
name|valueToAdd
parameter_list|)
block|{
name|MyConverterParent
name|converterParent
init|=
operator|new
name|MyConverterParent
argument_list|()
decl_stmt|;
name|PrimitiveConverter
name|converter
init|=
name|ETypeConverter
operator|.
name|getNewConverter
argument_list|(
name|primitiveType
argument_list|,
literal|1
argument_list|,
name|converterParent
argument_list|,
name|hiveTypeInfo
argument_list|)
decl_stmt|;
operator|(
operator|(
name|BinaryConverter
operator|)
name|converter
operator|)
operator|.
name|addBinary
argument_list|(
name|valueToAdd
argument_list|)
expr_stmt|;
return|return
name|converterParent
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|private
name|Writable
name|getWritableFromPrimitiveConverter
parameter_list|(
name|TypeInfo
name|hiveTypeInfo
parameter_list|,
name|PrimitiveType
name|primitiveType
parameter_list|,
name|Integer
name|valueToAdd
parameter_list|)
block|{
name|MyConverterParent
name|converterParent
init|=
operator|new
name|MyConverterParent
argument_list|()
decl_stmt|;
name|PrimitiveConverter
name|converter
init|=
name|ETypeConverter
operator|.
name|getNewConverter
argument_list|(
name|primitiveType
argument_list|,
literal|1
argument_list|,
name|converterParent
argument_list|,
name|hiveTypeInfo
argument_list|)
decl_stmt|;
operator|(
operator|(
name|PrimitiveConverter
operator|)
name|converter
operator|)
operator|.
name|addInt
argument_list|(
name|valueToAdd
argument_list|)
expr_stmt|;
return|return
name|converterParent
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|private
name|PrimitiveTypeInfo
name|createHiveTypeInfo
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|PrimitiveTypeInfo
name|hiveTypeInfo
init|=
operator|new
name|PrimitiveTypeInfo
argument_list|()
decl_stmt|;
name|hiveTypeInfo
operator|.
name|setTypeName
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
return|return
name|hiveTypeInfo
return|;
block|}
block|}
end_class

end_unit

