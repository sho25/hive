begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_class
specifier|public
class|class
name|RandomByteArrayStream
block|{
specifier|private
name|Random
name|random
decl_stmt|;
specifier|private
name|int
name|min
decl_stmt|;
specifier|private
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|byteArrays
decl_stmt|;
specifier|public
name|RandomByteArrayStream
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
name|byteArrays
operator|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|min
operator|=
literal|1
expr_stmt|;
block|}
specifier|public
name|RandomByteArrayStream
parameter_list|(
name|Random
name|random
parameter_list|,
name|int
name|min
parameter_list|)
block|{
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
name|byteArrays
operator|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|next
parameter_list|()
block|{
name|int
name|category
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|category
operator|<
literal|98
condition|)
block|{
name|count
operator|=
name|min
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|category
operator|-
literal|98
condition|)
block|{
case|case
literal|0
case|:
name|count
operator|=
name|Math
operator|.
name|max
argument_list|(
name|min
argument_list|,
literal|10
argument_list|)
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|90
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|count
operator|=
name|Math
operator|.
name|max
argument_list|(
name|min
argument_list|,
literal|100
argument_list|)
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|900
argument_list|)
expr_stmt|;
block|}
block|}
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|count
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|byteArrays
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|byteArrays
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|byte
index|[]
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|byteArrays
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|int
name|length
init|=
name|bytes
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|byteArrays
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|streamBytes
init|=
name|byteArrays
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|streamBytes
operator|.
name|length
operator|!=
name|length
condition|)
block|{
continue|continue;
block|}
name|boolean
name|match
init|=
literal|true
decl_stmt|;
comment|// Assume
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|streamBytes
index|[
name|j
index|]
operator|!=
name|bytes
index|[
name|j
index|]
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|match
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

