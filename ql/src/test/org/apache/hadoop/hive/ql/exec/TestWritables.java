begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|utils
operator|.
name|ByteStream
import|;
end_import

begin_class
specifier|public
class|class
name|TestWritables
extends|extends
name|TestCase
block|{
specifier|protected
name|CompositeHiveObject
index|[]
name|r
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
try|try
block|{
name|r
operator|=
operator|new
name|CompositeHiveObject
index|[
literal|5
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|r
index|[
name|i
index|]
operator|=
operator|new
name|CompositeHiveObject
argument_list|(
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|r
index|[
name|i
index|]
operator|.
name|addHiveObject
argument_list|(
operator|new
name|PrimitiveHiveObject
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
operator|-
literal|1
operator|+
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|testWritable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|ByteStream
operator|.
name|Output
name|bos
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|HiveObjectSerializer
name|hos
init|=
operator|new
name|NaiiveSerializer
argument_list|()
decl_stmt|;
name|WritableHiveObject
name|who
init|=
literal|null
decl_stmt|;
name|WritableHiveObject
operator|.
name|setSerialFormat
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|who
operator|=
operator|new
name|WritableHiveObject
argument_list|(
name|i
argument_list|,
literal|null
argument_list|,
name|hos
argument_list|)
expr_stmt|;
name|who
operator|.
name|setHo
argument_list|(
name|r
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|who
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
block|}
name|ByteStream
operator|.
name|Input
name|bin
init|=
operator|new
name|ByteStream
operator|.
name|Input
argument_list|(
name|bos
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bos
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|din
init|=
operator|new
name|DataInputStream
argument_list|(
name|bin
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|who
operator|.
name|readFields
argument_list|(
name|din
argument_list|)
expr_stmt|;
name|HiveObject
name|ho
init|=
name|who
operator|.
name|getHo
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|SerDeField
name|sdf
init|=
name|ho
operator|.
name|getFieldFromExpression
argument_list|(
literal|""
operator|+
name|j
argument_list|)
decl_stmt|;
name|String
name|str
init|=
operator|(
name|String
operator|)
name|ho
operator|.
name|get
argument_list|(
name|sdf
argument_list|)
operator|.
name|getJavaObject
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|str
argument_list|,
operator|new
name|String
argument_list|(
literal|""
operator|+
operator|(
name|i
operator|-
literal|1
operator|+
name|j
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|who
operator|.
name|getTag
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testWritable OK"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
specifier|public
name|void
name|testNoTagWritable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|ByteStream
operator|.
name|Output
name|bos
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|HiveObjectSerializer
name|hos
init|=
operator|new
name|NaiiveSerializer
argument_list|()
decl_stmt|;
name|WritableHiveObject
name|who
init|=
operator|new
name|NoTagWritableHiveObject
argument_list|(
literal|null
argument_list|,
name|hos
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|who
operator|.
name|setHo
argument_list|(
name|r
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|who
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
block|}
comment|//System.out.println(new String(bos.getData(), 0, bos.getCount(), "UTF-8"));
name|ByteStream
operator|.
name|Input
name|bin
init|=
operator|new
name|ByteStream
operator|.
name|Input
argument_list|(
name|bos
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bos
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|din
init|=
operator|new
name|DataInputStream
argument_list|(
name|bin
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|who
operator|.
name|readFields
argument_list|(
name|din
argument_list|)
expr_stmt|;
name|HiveObject
name|ho
init|=
name|who
operator|.
name|getHo
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|SerDeField
name|sdf
init|=
name|ho
operator|.
name|getFieldFromExpression
argument_list|(
literal|""
operator|+
name|j
argument_list|)
decl_stmt|;
name|String
name|str
init|=
operator|(
name|String
operator|)
name|ho
operator|.
name|get
argument_list|(
name|sdf
argument_list|)
operator|.
name|getJavaObject
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|str
argument_list|,
operator|new
name|String
argument_list|(
literal|""
operator|+
operator|(
name|i
operator|-
literal|1
operator|+
name|j
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNoTagWritable OK"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
specifier|public
name|void
name|testWritableComparable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|ByteStream
operator|.
name|Output
name|bos
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|HiveObjectSerializer
name|hos
init|=
operator|new
name|NaiiveSerializer
argument_list|()
decl_stmt|;
name|NoTagWritableComparableHiveObject
index|[]
name|who
init|=
operator|new
name|NoTagWritableComparableHiveObject
index|[
literal|5
index|]
decl_stmt|;
comment|// 3, 1, 4, 2, 0
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|who
index|[
name|i
index|]
operator|=
operator|new
name|NoTagWritableComparableHiveObject
argument_list|(
literal|null
argument_list|,
name|hos
argument_list|)
expr_stmt|;
name|who
index|[
name|i
index|]
operator|.
name|setHo
argument_list|(
name|r
index|[
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
literal|3
operator|)
operator|%
literal|5
index|]
argument_list|)
expr_stmt|;
name|who
index|[
name|i
index|]
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
block|}
name|ByteStream
operator|.
name|Input
name|bin
init|=
operator|new
name|ByteStream
operator|.
name|Input
argument_list|(
name|bos
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bos
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|din
init|=
operator|new
name|DataInputStream
argument_list|(
name|bin
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|who
index|[
name|i
index|]
operator|.
name|readFields
argument_list|(
name|din
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|who
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
name|who
index|[
literal|1
index|]
argument_list|)
operator|>
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|who
index|[
literal|1
index|]
operator|.
name|compareTo
argument_list|(
name|who
index|[
literal|2
index|]
argument_list|)
operator|>
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|who
index|[
literal|2
index|]
operator|.
name|compareTo
argument_list|(
name|who
index|[
literal|3
index|]
argument_list|)
operator|>
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|who
index|[
literal|3
index|]
operator|.
name|compareTo
argument_list|(
name|who
index|[
literal|4
index|]
argument_list|)
operator|>
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testWritableComparable OK"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
block|}
end_class

end_unit

