begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|atLeastOnce
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsConstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TaskQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|Statistic
operator|.
name|SparkStatisticsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|session
operator|.
name|SparkSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|status
operator|.
name|RemoteSparkJobMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|status
operator|.
name|SparkJobRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|status
operator|.
name|SparkJobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|status
operator|.
name|impl
operator|.
name|RemoteSparkJobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BaseWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SparkWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
operator|.
name|JobHandle
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|SparkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestSparkTask
block|{
annotation|@
name|Test
specifier|public
name|void
name|sparkTask_updates_Metrics
parameter_list|()
throws|throws
name|IOException
block|{
name|Metrics
name|mockMetrics
init|=
name|mock
argument_list|(
name|Metrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|SparkTask
name|sparkTask
init|=
operator|new
name|SparkTask
argument_list|()
decl_stmt|;
name|sparkTask
operator|.
name|updateTaskMetrics
argument_list|(
name|mockMetrics
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockMetrics
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|incrementCounter
argument_list|(
name|MetricsConstant
operator|.
name|HIVE_SPARK_TASKS
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockMetrics
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|incrementCounter
argument_list|(
name|MetricsConstant
operator|.
name|HIVE_TEZ_TASKS
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockMetrics
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|incrementCounter
argument_list|(
name|MetricsConstant
operator|.
name|HIVE_MR_TASKS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeEmptySparkTask
parameter_list|()
block|{
name|SparkTask
name|grandpa
init|=
operator|new
name|SparkTask
argument_list|()
decl_stmt|;
name|SparkWork
name|grandpaWork
init|=
operator|new
name|SparkWork
argument_list|(
literal|"grandpa"
argument_list|)
decl_stmt|;
name|grandpaWork
operator|.
name|add
argument_list|(
operator|new
name|MapWork
argument_list|()
argument_list|)
expr_stmt|;
name|grandpa
operator|.
name|setWork
argument_list|(
name|grandpaWork
argument_list|)
expr_stmt|;
name|SparkTask
name|parent
init|=
operator|new
name|SparkTask
argument_list|()
decl_stmt|;
name|SparkWork
name|parentWork
init|=
operator|new
name|SparkWork
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|parentWork
operator|.
name|add
argument_list|(
operator|new
name|MapWork
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setWork
argument_list|(
name|parentWork
argument_list|)
expr_stmt|;
name|SparkTask
name|child1
init|=
operator|new
name|SparkTask
argument_list|()
decl_stmt|;
name|SparkWork
name|childWork1
init|=
operator|new
name|SparkWork
argument_list|(
literal|"child1"
argument_list|)
decl_stmt|;
name|childWork1
operator|.
name|add
argument_list|(
operator|new
name|MapWork
argument_list|()
argument_list|)
expr_stmt|;
name|child1
operator|.
name|setWork
argument_list|(
name|childWork1
argument_list|)
expr_stmt|;
name|grandpa
operator|.
name|addDependentTask
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addDependentTask
argument_list|(
name|child1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|grandpa
operator|.
name|getChildTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|child1
operator|.
name|getParentTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEmptySparkWork
argument_list|(
name|parent
operator|.
name|getWork
argument_list|()
argument_list|)
condition|)
block|{
name|SparkUtilities
operator|.
name|removeEmptySparkTask
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|grandpa
operator|.
name|getChildTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|child1
operator|.
name|getParentTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoteSparkCancel
parameter_list|()
block|{
name|RemoteSparkJobStatus
name|jobSts
init|=
name|mock
argument_list|(
name|RemoteSparkJobStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|jobSts
operator|.
name|getRemoteJobState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|State
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|jobSts
operator|.
name|isRemoteActive
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|RemoteSparkJobMonitor
name|remoteSparkJobMonitor
init|=
operator|new
name|RemoteSparkJobMonitor
argument_list|(
name|hiveConf
argument_list|,
name|jobSts
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|remoteSparkJobMonitor
operator|.
name|startMonitor
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSparkStatisticsToString
parameter_list|()
block|{
name|SparkStatisticsBuilder
name|statsBuilder
init|=
operator|new
name|SparkStatisticsBuilder
argument_list|()
decl_stmt|;
name|statsBuilder
operator|.
name|add
argument_list|(
literal|"TEST"
argument_list|,
literal|"stat1"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|statsBuilder
operator|.
name|add
argument_list|(
literal|"TEST"
argument_list|,
literal|"stat2"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|String
name|statsString
init|=
name|SparkTask
operator|.
name|sparkStatisticsToString
argument_list|(
name|statsBuilder
operator|.
name|build
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|statsString
operator|.
name|contains
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|statsString
operator|.
name|contains
argument_list|(
literal|"TEST"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|statsString
operator|.
name|contains
argument_list|(
literal|"stat1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|statsString
operator|.
name|contains
argument_list|(
literal|"stat2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|statsString
operator|.
name|contains
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetSparkExceptionWithJobError
parameter_list|()
block|{
name|SparkTask
name|sparkTask
init|=
operator|new
name|SparkTask
argument_list|()
decl_stmt|;
name|SparkJobStatus
name|mockSparkJobStatus
init|=
name|mock
argument_list|(
name|SparkJobStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExecutionException
name|ee
init|=
operator|new
name|ExecutionException
argument_list|(
literal|"Exception thrown by job"
argument_list|,
operator|new
name|SparkException
argument_list|(
literal|"Job aborted due to stage failure: Not a task or OOM error"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockSparkJobStatus
operator|.
name|getSparkJobException
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ee
argument_list|)
expr_stmt|;
name|sparkTask
operator|.
name|setSparkException
argument_list|(
name|mockSparkJobStatus
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sparkTask
operator|.
name|getException
argument_list|()
operator|instanceof
name|HiveException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
operator|(
name|HiveException
operator|)
name|sparkTask
operator|.
name|getException
argument_list|()
operator|)
operator|.
name|getCanonicalErrorMsg
argument_list|()
argument_list|,
name|ErrorMsg
operator|.
name|SPARK_JOB_RUNTIME_ERROR
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sparkTask
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Not a task or OOM error"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetSparkExceptionWithTimeoutError
parameter_list|()
block|{
name|SparkTask
name|sparkTask
init|=
operator|new
name|SparkTask
argument_list|()
decl_stmt|;
name|SparkJobStatus
name|mockSparkJobStatus
init|=
name|mock
argument_list|(
name|SparkJobStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockSparkJobStatus
operator|.
name|getMonitorError
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|SPARK_JOB_MONITOR_TIMEOUT
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
literal|60
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sparkTask
operator|.
name|setSparkException
argument_list|(
name|mockSparkJobStatus
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sparkTask
operator|.
name|getException
argument_list|()
operator|instanceof
name|HiveException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
operator|(
name|HiveException
operator|)
name|sparkTask
operator|.
name|getException
argument_list|()
operator|)
operator|.
name|getCanonicalErrorMsg
argument_list|()
argument_list|,
name|ErrorMsg
operator|.
name|SPARK_JOB_MONITOR_TIMEOUT
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sparkTask
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"60s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetSparkExceptionWithOOMError
parameter_list|()
block|{
name|SparkTask
name|sparkTask
init|=
operator|new
name|SparkTask
argument_list|()
decl_stmt|;
name|SparkJobStatus
name|mockSparkJobStatus
init|=
name|mock
argument_list|(
name|SparkJobStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExecutionException
name|jobError
init|=
operator|new
name|ExecutionException
argument_list|(
operator|new
name|SparkException
argument_list|(
literal|"Container killed by YARN for exceeding memory limits"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockSparkJobStatus
operator|.
name|getSparkJobException
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jobError
argument_list|)
expr_stmt|;
name|sparkTask
operator|.
name|setSparkException
argument_list|(
name|mockSparkJobStatus
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sparkTask
operator|.
name|getException
argument_list|()
operator|instanceof
name|HiveException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
operator|(
name|HiveException
operator|)
name|sparkTask
operator|.
name|getException
argument_list|()
operator|)
operator|.
name|getCanonicalErrorMsg
argument_list|()
argument_list|,
name|ErrorMsg
operator|.
name|SPARK_RUNTIME_OOM
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSparkExceptionAndMonitorError
parameter_list|()
block|{
name|SparkTask
name|sparkTask
init|=
operator|new
name|SparkTask
argument_list|()
decl_stmt|;
name|SparkJobStatus
name|mockSparkJobStatus
init|=
name|mock
argument_list|(
name|SparkJobStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockSparkJobStatus
operator|.
name|getMonitorError
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockSparkJobStatus
operator|.
name|getSparkJobException
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ExecutionException
argument_list|(
operator|new
name|SparkException
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sparkTask
operator|.
name|setSparkException
argument_list|(
name|mockSparkJobStatus
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sparkTask
operator|.
name|getException
argument_list|()
operator|instanceof
name|HiveException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
operator|(
name|HiveException
operator|)
name|sparkTask
operator|.
name|getException
argument_list|()
operator|)
operator|.
name|getCanonicalErrorMsg
argument_list|()
argument_list|,
name|ErrorMsg
operator|.
name|SPARK_JOB_RUNTIME_ERROR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleInterruptedException
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|SparkTask
name|sparkTask
init|=
operator|new
name|SparkTask
argument_list|()
decl_stmt|;
name|sparkTask
operator|.
name|setWork
argument_list|(
name|mock
argument_list|(
name|SparkWork
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TaskQueue
name|mockTestQueue
init|=
name|mock
argument_list|(
name|TaskQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|QueryState
name|mockQueryState
init|=
name|mock
argument_list|(
name|QueryState
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockQueryState
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|sparkTask
operator|.
name|initialize
argument_list|(
name|mockQueryState
argument_list|,
literal|null
argument_list|,
name|mockTestQueue
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|SparkJobStatus
name|mockSparkJobStatus
init|=
name|mock
argument_list|(
name|SparkJobStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockSparkJobStatus
operator|.
name|getMonitorError
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|InterruptedException
argument_list|()
argument_list|)
expr_stmt|;
name|SparkSession
name|mockSparkSession
init|=
name|mock
argument_list|(
name|SparkSession
operator|.
name|class
argument_list|)
decl_stmt|;
name|SparkJobRef
name|mockSparkJobRef
init|=
name|mock
argument_list|(
name|SparkJobRef
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockSparkJobRef
operator|.
name|monitorJob
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockSparkJobRef
operator|.
name|getSparkJobStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockSparkJobStatus
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockSparkSession
operator|.
name|submit
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockSparkJobRef
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setSparkSession
argument_list|(
name|mockSparkSession
argument_list|)
expr_stmt|;
name|sparkTask
operator|.
name|execute
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockSparkJobRef
argument_list|,
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|cancelJob
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|mockSparkJobStatus
operator|.
name|getMonitorError
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HiveException
argument_list|(
operator|new
name|InterruptedException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sparkTask
operator|.
name|execute
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockSparkJobRef
argument_list|,
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|cancelJob
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|isEmptySparkWork
parameter_list|(
name|SparkWork
name|sparkWork
parameter_list|)
block|{
name|List
argument_list|<
name|BaseWork
argument_list|>
name|allWorks
init|=
name|sparkWork
operator|.
name|getAllWork
argument_list|()
decl_stmt|;
name|boolean
name|allWorksIsEmtpy
init|=
literal|true
decl_stmt|;
for|for
control|(
name|BaseWork
name|work
range|:
name|allWorks
control|)
block|{
if|if
condition|(
name|work
operator|.
name|getAllOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|allWorksIsEmtpy
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
return|return
name|allWorksIsEmtpy
return|;
block|}
block|}
end_class

end_unit

