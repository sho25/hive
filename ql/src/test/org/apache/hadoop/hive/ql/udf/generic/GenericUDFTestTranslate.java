begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Mimics oracle's function translate(str1, str2, str3)   */
end_comment

begin_class
specifier|public
class|class
name|GenericUDFTestTranslate
extends|extends
name|GenericUDF
block|{
name|ObjectInspector
index|[]
name|argumentOIs
decl_stmt|;
comment|/**    * Return a corresponding ordinal from an integer.    */
specifier|static
name|String
name|getOrdinal
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|int
name|unit
init|=
name|i
operator|%
literal|10
decl_stmt|;
return|return
operator|(
name|i
operator|<=
literal|0
operator|)
condition|?
literal|""
else|:
operator|(
name|i
operator|!=
literal|11
operator|&&
name|unit
operator|==
literal|1
operator|)
condition|?
name|i
operator|+
literal|"st"
else|:
operator|(
name|i
operator|!=
literal|12
operator|&&
name|unit
operator|==
literal|2
operator|)
condition|?
name|i
operator|+
literal|"nd"
else|:
operator|(
name|i
operator|!=
literal|13
operator|&&
name|unit
operator|==
literal|3
operator|)
condition|?
name|i
operator|+
literal|"rd"
else|:
name|i
operator|+
literal|"th"
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"The function TRANSLATE(expr,from_string,to_string) accepts exactly 3 arguments, but "
operator|+
name|arguments
operator|.
name|length
operator|+
literal|" arguments is found."
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arguments
index|[
name|i
index|]
operator|.
name|getTypeName
argument_list|()
operator|!=
name|Constants
operator|.
name|STRING_TYPE_NAME
operator|&&
name|arguments
index|[
name|i
index|]
operator|.
name|getTypeName
argument_list|()
operator|!=
name|Constants
operator|.
name|VOID_TYPE_NAME
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|i
argument_list|,
literal|"The "
operator|+
name|getOrdinal
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|+
literal|" argument of function TRANSLATE is expected to \""
operator|+
name|Constants
operator|.
name|STRING_TYPE_NAME
operator|+
literal|"\", but \""
operator|+
name|arguments
index|[
name|i
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\" is found"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|argumentOIs
operator|=
name|arguments
expr_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
return|;
block|}
specifier|private
name|Text
name|resultText
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|||
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|||
name|arguments
index|[
literal|2
index|]
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|exprString
init|=
operator|(
operator|(
name|StringObjectInspector
operator|)
name|argumentOIs
index|[
literal|0
index|]
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|fromString
init|=
operator|(
operator|(
name|StringObjectInspector
operator|)
name|argumentOIs
index|[
literal|1
index|]
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|toString
init|=
operator|(
operator|(
name|StringObjectInspector
operator|)
name|argumentOIs
index|[
literal|2
index|]
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|arguments
index|[
literal|2
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|char
index|[]
name|expr
init|=
name|exprString
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|char
index|[]
name|from
init|=
name|fromString
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|char
index|[]
name|to
init|=
name|toString
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|char
index|[]
name|result
init|=
operator|new
name|char
index|[
name|expr
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|expr
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|expr
operator|.
name|length
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Character
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<
name|Character
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|from
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|seen
operator|.
name|contains
argument_list|(
name|from
index|[
name|i
index|]
argument_list|)
condition|)
continue|continue;
name|seen
operator|.
name|add
argument_list|(
name|from
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|expr
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|expr
index|[
name|j
index|]
operator|==
name|from
index|[
name|i
index|]
condition|)
block|{
name|result
index|[
name|j
index|]
operator|=
operator|(
name|i
operator|<
name|to
operator|.
name|length
operator|)
condition|?
name|to
index|[
name|i
index|]
else|:
literal|0
expr_stmt|;
block|}
block|}
block|}
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|result
index|[
name|i
index|]
operator|!=
literal|0
condition|)
name|result
index|[
name|pos
operator|++
index|]
operator|=
name|result
index|[
name|i
index|]
expr_stmt|;
block|}
name|resultText
operator|.
name|set
argument_list|(
operator|new
name|String
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|resultText
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
assert|assert
operator|(
name|children
operator|.
name|length
operator|==
literal|3
operator|)
assert|;
return|return
literal|"translate("
operator|+
name|children
index|[
literal|0
index|]
operator|+
literal|","
operator|+
name|children
index|[
literal|1
index|]
operator|+
literal|","
operator|+
name|children
index|[
literal|2
index|]
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

