begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartitionDropOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveIgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|ThriftDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|Complex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|LoggerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * TestHive.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestHive
extends|extends
name|TestCase
block|{
specifier|protected
name|Hive
name|hm
decl_stmt|;
specifier|protected
name|HiveConf
name|hiveConf
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
comment|// enable trash so it can be tested
name|hiveConf
operator|.
name|setFloat
argument_list|(
literal|"fs.trash.checkpoint.interval"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
comment|// FS_TRASH_CHECKPOINT_INTERVAL_KEY (hadoop-2)
name|hiveConf
operator|.
name|setFloat
argument_list|(
literal|"fs.trash.interval"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
comment|// FS_TRASH_INTERVAL_KEY (hadoop-2)
name|SessionState
operator|.
name|start
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
try|try
block|{
name|hm
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to initialize Hive Metastore using configuration: \n "
operator|+
name|hiveConf
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
comment|// disable trash
name|hiveConf
operator|.
name|setFloat
argument_list|(
literal|"fs.trash.checkpoint.interval"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
comment|// FS_TRASH_CHECKPOINT_INTERVAL_KEY (hadoop-2)
name|hiveConf
operator|.
name|setFloat
argument_list|(
literal|"fs.trash.interval"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
comment|// FS_TRASH_INTERVAL_KEY (hadoop-2)
name|Hive
operator|.
name|closeCurrent
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to close Hive Metastore using configruation: \n "
operator|+
name|hiveConf
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testTable
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
comment|// create a simple table and test create, drop, get
name|String
name|tableName
init|=
literal|"table_for_testtable"
decl_stmt|;
try|try
block|{
name|hm
operator|.
name|dropTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to drop table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
name|tbl
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|"int -- first column"
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|"string -- second column"
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col3"
argument_list|,
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|,
literal|"double -- thrift column"
argument_list|)
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setFields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setOutputFormatClass
argument_list|(
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setInputFormatClass
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"comment"
argument_list|,
literal|"this is a test table created as part junit tests"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
name|tbl
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
name|bucketCols
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
try|try
block|{
name|tbl
operator|.
name|setBucketCols
argument_list|(
name|bucketCols
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to set bucket column for table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|"partition column, date but in string format as date type is not yet supported in QL"
argument_list|)
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setPartCols
argument_list|(
name|partCols
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setNumBuckets
argument_list|(
operator|(
name|short
operator|)
literal|512
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setOwner
argument_list|(
literal|"pchakka"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setRetention
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// set output format parameters (these are not supported by QL but only
comment|// for demo purposes)
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|LINE_DELIM
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|MAPKEY_DELIM
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|COLLECTION_DELIM
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setStoredAsSubDirectories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setRewriteEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// create table
name|setNullCreateTableGrants
argument_list|()
expr_stmt|;
try|try
block|{
name|hm
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to create table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// get table
name|validateTable
argument_list|(
name|tbl
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|hm
operator|.
name|dropTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Table
name|ft2
init|=
name|hm
operator|.
name|getTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Unable to drop table "
argument_list|,
name|ft2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unable to drop table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testTable failed"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|setNullCreateTableGrants
parameter_list|()
block|{
comment|//having a non null create table grants privileges causes problems in
comment|// the tests that compares underlying thrift Table object of created
comment|// table with a table object that was fetched from metastore.
comment|// This is because the fetch does not populate the privileges field in Table
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setCreateTableGrants
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests create and fetch of a thrift based table.    *    * @throws Throwable    */
specifier|public
name|void
name|testThriftTable
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
literal|"table_for_test_thrifttable"
decl_stmt|;
try|try
block|{
try|try
block|{
name|hm
operator|.
name|dropTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e1
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to drop table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setInputFormatClass
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setOutputFormatClass
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|ThriftDeserializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_CLASS
argument_list|,
name|Complex
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
name|TBinaryProtocol
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setStoredAsSubDirectories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setRewriteEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setNullCreateTableGrants
argument_list|()
expr_stmt|;
try|try
block|{
name|hm
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to create table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// get table
name|validateTable
argument_list|(
name|tbl
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|hm
operator|.
name|dropTable
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testThriftTable() failed"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Test logging of timing for metastore api calls    *    * @throws Throwable    */
specifier|public
name|void
name|testMetaStoreApiTiming
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Get the RootLogger which, if you don't have log4j2-test.properties defined, will only log ERRORs
name|Logger
name|logger
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
literal|"hive.ql.metadata.Hive"
argument_list|)
decl_stmt|;
name|Level
name|oldLevel
init|=
name|logger
operator|.
name|getLevel
argument_list|()
decl_stmt|;
name|LoggerContext
name|ctx
init|=
operator|(
name|LoggerContext
operator|)
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Configuration
name|config
init|=
name|ctx
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|LoggerConfig
name|loggerConfig
init|=
name|config
operator|.
name|getLoggerConfig
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|loggerConfig
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|updateLoggers
argument_list|()
expr_stmt|;
comment|// Create a String Appender to capture log output
name|StringAppender
name|appender
init|=
name|StringAppender
operator|.
name|createStringAppender
argument_list|(
literal|"%m"
argument_list|)
decl_stmt|;
name|appender
operator|.
name|addToLogger
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|appender
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|hm
operator|.
name|clearMetaCallTiming
argument_list|()
expr_stmt|;
name|hm
operator|.
name|getAllDatabases
argument_list|()
expr_stmt|;
name|hm
operator|.
name|dumpAndClearMetaCallTiming
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|String
name|logStr
init|=
name|appender
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|String
name|expectedString
init|=
literal|"getAllDatabases_()="
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|logStr
operator|+
literal|" should contain<"
operator|+
name|expectedString
argument_list|,
name|logStr
operator|.
name|contains
argument_list|(
name|expectedString
argument_list|)
argument_list|)
expr_stmt|;
comment|// reset the log buffer, verify new dump without any api call does not contain func
name|appender
operator|.
name|reset
argument_list|()
expr_stmt|;
name|hm
operator|.
name|dumpAndClearMetaCallTiming
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|logStr
operator|=
name|appender
operator|.
name|getOutput
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|logStr
operator|+
literal|" should not contain<"
operator|+
name|expectedString
argument_list|,
name|logStr
operator|.
name|contains
argument_list|(
name|expectedString
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|loggerConfig
operator|.
name|setLevel
argument_list|(
name|oldLevel
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|updateLoggers
argument_list|()
expr_stmt|;
name|appender
operator|.
name|removeFromLogger
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Gets a table from the metastore and compares it to the original Table    *    * @param tbl    * @param tableName    * @throws MetaException    */
specifier|private
name|void
name|validateTable
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
block|{
name|Warehouse
name|wh
init|=
operator|new
name|Warehouse
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|Table
name|ft
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// hm.getTable result will not have privileges set (it does not retrieve
comment|// that part from metastore), so unset privileges to null before comparing
comment|// (create table sets it to empty (non null) structures)
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|setPrivilegesIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ft
operator|=
name|hm
operator|.
name|getTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Unable to fetch table"
argument_list|,
name|ft
argument_list|)
expr_stmt|;
name|ft
operator|.
name|checkValidity
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table names didn't match for table: "
operator|+
name|tableName
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|ft
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table owners didn't match for table: "
operator|+
name|tableName
argument_list|,
name|tbl
operator|.
name|getOwner
argument_list|()
argument_list|,
name|ft
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table retention didn't match for table: "
operator|+
name|tableName
argument_list|,
name|tbl
operator|.
name|getRetention
argument_list|()
argument_list|,
name|ft
operator|.
name|getRetention
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Data location is not set correctly"
argument_list|,
name|wh
operator|.
name|getDefaultTablePath
argument_list|(
name|hm
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
argument_list|,
name|tableName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ft
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// now that URI and times are set correctly, set the original table's uri and times
comment|// and then compare the two tables
name|tbl
operator|.
name|setDataLocation
argument_list|(
name|ft
operator|.
name|getDataLocation
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setCreateTime
argument_list|(
name|ft
operator|.
name|getTTable
argument_list|()
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|,
name|ft
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Txn stuff set by metastore
if|if
condition|(
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|isSetWriteId
argument_list|()
condition|)
block|{
name|ft
operator|.
name|getTTable
argument_list|()
operator|.
name|setWriteId
argument_list|(
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getWriteId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Tables  doesn't match: "
operator|+
name|tableName
operator|+
literal|" ("
operator|+
name|ft
operator|.
name|getTTable
argument_list|()
operator|+
literal|"; "
operator|+
name|tbl
operator|.
name|getTTable
argument_list|()
operator|+
literal|")"
argument_list|,
name|ft
operator|.
name|getTTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tbl
operator|.
name|getTTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SerializationLib is not set correctly"
argument_list|,
name|tbl
operator|.
name|getSerializationLib
argument_list|()
argument_list|,
name|ft
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Serde is not set correctly"
argument_list|,
name|tbl
operator|.
name|getDeserializer
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|ft
operator|.
name|getDeserializer
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to fetch table correctly: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Table
name|createTestTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|HiveException
block|{
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setInputFormatClass
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setOutputFormatClass
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|ThriftDeserializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_CLASS
argument_list|,
name|Complex
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
name|TBinaryProtocol
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
comment|/**    * Test basic Hive class interaction, that:    * - We can have different Hive objects throughout the lifetime of this thread.    */
specifier|public
name|void
name|testHiveCloseCurrent
parameter_list|()
throws|throws
name|Throwable
block|{
name|Hive
name|hive1
init|=
name|Hive
operator|.
name|get
argument_list|()
decl_stmt|;
name|Hive
operator|.
name|closeCurrent
argument_list|()
expr_stmt|;
name|Hive
name|hive2
init|=
name|Hive
operator|.
name|get
argument_list|()
decl_stmt|;
name|Hive
operator|.
name|closeCurrent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|hive1
operator|!=
name|hive2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetAndDropTables
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|String
name|dbName
init|=
literal|"db_for_testgettables"
decl_stmt|;
name|String
name|table1Name
init|=
literal|"table1"
decl_stmt|;
name|hm
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|hm
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ts
operator|.
name|add
argument_list|(
name|table1Name
argument_list|)
expr_stmt|;
name|ts
operator|.
name|add
argument_list|(
literal|"table2"
argument_list|)
expr_stmt|;
name|Table
name|tbl1
init|=
name|createTestTable
argument_list|(
name|dbName
argument_list|,
name|ts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|hm
operator|.
name|createTable
argument_list|(
name|tbl1
argument_list|)
expr_stmt|;
name|Table
name|tbl2
init|=
name|createTestTable
argument_list|(
name|dbName
argument_list|,
name|ts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|hm
operator|.
name|createTable
argument_list|(
name|tbl2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fts
init|=
name|hm
operator|.
name|getTablesForDb
argument_list|(
name|dbName
argument_list|,
literal|".*"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ts
argument_list|,
name|fts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fts
operator|=
name|hm
operator|.
name|getTablesForDb
argument_list|(
name|dbName
argument_list|,
literal|".*1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|fts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// also test getting a table from a specific db
name|Table
name|table1
init|=
name|hm
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|table1Name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|table1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|table1Name
argument_list|,
name|table1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|table1
operator|.
name|getPath
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|table1
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// and test dropping this specific table
name|hm
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|table1Name
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|table1
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Drop all tables
for|for
control|(
name|String
name|tableName
range|:
name|hm
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
control|)
block|{
name|Table
name|table
init|=
name|hm
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|hm
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|table
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hm
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testGetAndDropTables() failed"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testDropTableTrash
parameter_list|()
throws|throws
name|Throwable
block|{
if|if
condition|(
operator|!
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|supportTrashFeature
argument_list|()
condition|)
block|{
return|return;
comment|// it's hadoop-1
block|}
try|try
block|{
name|String
name|dbName
init|=
literal|"db_for_testdroptable"
decl_stmt|;
name|hm
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|hm
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|tableBaseName
init|=
literal|"droptable"
decl_stmt|;
name|ts
operator|.
name|add
argument_list|(
name|tableBaseName
operator|+
literal|"1"
argument_list|)
expr_stmt|;
name|ts
operator|.
name|add
argument_list|(
name|tableBaseName
operator|+
literal|"2"
argument_list|)
expr_stmt|;
name|Table
name|tbl1
init|=
name|createTestTable
argument_list|(
name|dbName
argument_list|,
name|ts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|hm
operator|.
name|createTable
argument_list|(
name|tbl1
argument_list|)
expr_stmt|;
name|Table
name|tbl2
init|=
name|createTestTable
argument_list|(
name|dbName
argument_list|,
name|ts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|hm
operator|.
name|createTable
argument_list|(
name|tbl2
argument_list|)
expr_stmt|;
comment|// test dropping tables and trash behavior
name|Table
name|table1
init|=
name|hm
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|ts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|table1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|table1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path1
init|=
name|table1
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path1
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path1
argument_list|)
argument_list|)
expr_stmt|;
comment|// drop table and check that trash works
name|Path
name|trashDir
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getCurrentTrashPath
argument_list|(
name|hiveConf
argument_list|,
name|fs
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"trash directory should not be null"
argument_list|,
name|trashDir
argument_list|)
expr_stmt|;
name|Path
name|trash1
init|=
name|mergePaths
argument_list|(
name|trashDir
argument_list|,
name|path1
argument_list|)
decl_stmt|;
name|Path
name|pathglob
init|=
name|trash1
operator|.
name|suffix
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
empty_stmt|;
name|FileStatus
name|before
index|[]
init|=
name|fs
operator|.
name|globStatus
argument_list|(
name|pathglob
argument_list|)
decl_stmt|;
name|hm
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|ts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path1
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|after
index|[]
init|=
name|fs
operator|.
name|globStatus
argument_list|(
name|pathglob
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"trash dir before and after DROP TABLE noPURGE are not different"
argument_list|,
name|before
operator|.
name|length
operator|!=
name|after
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// drop a table without saving to trash by setting the purge option
name|Table
name|table2
init|=
name|hm
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|ts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|table2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|table2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path2
init|=
name|table2
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path2
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|trash2
init|=
name|mergePaths
argument_list|(
name|trashDir
argument_list|,
name|path2
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"trashDir2 is "
operator|+
name|trash2
argument_list|)
expr_stmt|;
name|pathglob
operator|=
name|trash2
operator|.
name|suffix
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|before
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
name|pathglob
argument_list|)
expr_stmt|;
name|hm
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|ts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// deleteData, ignoreUnknownTable, ifPurge
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path2
argument_list|)
argument_list|)
expr_stmt|;
name|after
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
name|pathglob
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|before
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"trash dir before and after DROP TABLE PURGE are different"
argument_list|,
name|before
operator|.
name|length
argument_list|,
name|after
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"trash dir before and after DROP TABLE PURGE are different"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
comment|// Drop all tables
for|for
control|(
name|String
name|tableName
range|:
name|hm
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
control|)
block|{
name|Table
name|table
init|=
name|hm
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|hm
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|table
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hm
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testDropTableTrash() failed"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|FileStatus
index|[]
name|getTrashContents
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|Path
name|trashDir
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getCurrentTrashPath
argument_list|(
name|hiveConf
argument_list|,
name|fs
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|globStatus
argument_list|(
name|trashDir
operator|.
name|suffix
argument_list|(
literal|"/*"
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Table
name|createPartitionedTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|hm
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|hm
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
comment|// Data columns.
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds"
argument_list|,
literal|"hr"
argument_list|)
argument_list|,
comment|// Partition columns.
name|TextInputFormat
operator|.
name|class
argument_list|,
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|hm
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unable to drop and create table "
operator|+
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|+
literal|" because "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
specifier|private
name|void
name|cleanUpTableQuietly
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
try|try
block|{
name|hm
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test for PURGE support for dropping partitions.    * 1. Drop partitions without PURGE, and check that the data isn't moved to Trash.    * 2. Drop partitions with PURGE, and check that the data is moved to Trash.    * @throws Exception on failure.    */
specifier|public
name|void
name|testDropPartitionsWithPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
decl_stmt|;
name|String
name|tableName
init|=
literal|"table_for_testDropPartitionsWithPurge"
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
init|=
operator|new
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"ds"
argument_list|,
literal|"20141216"
argument_list|)
operator|.
name|put
argument_list|(
literal|"hr"
argument_list|,
literal|"12"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|trashSizeBeforeDrop
init|=
name|getTrashContents
argument_list|()
operator|.
name|length
decl_stmt|;
name|Table
name|table
init|=
name|createPartitionedTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|hm
operator|.
name|createPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|hm
operator|.
name|getPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Newly created partition shouldn't be null!"
argument_list|,
name|partition
argument_list|)
expr_stmt|;
name|hm
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
argument_list|,
name|PartitionDropOptions
operator|.
name|instance
argument_list|()
operator|.
name|deleteData
argument_list|(
literal|true
argument_list|)
operator|.
name|purgeData
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|trashSizeAfterDropPurge
init|=
name|getTrashContents
argument_list|()
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
literal|"After dropPartitions(purge), trash should've remained unchanged!"
argument_list|,
name|trashSizeBeforeDrop
argument_list|,
name|trashSizeAfterDropPurge
argument_list|)
expr_stmt|;
comment|// Repeat, and drop partition without purge.
name|hm
operator|.
name|createPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|)
expr_stmt|;
name|partition
operator|=
name|hm
operator|.
name|getPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Newly created partition shouldn't be null!"
argument_list|,
name|partition
argument_list|)
expr_stmt|;
name|hm
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
argument_list|,
name|PartitionDropOptions
operator|.
name|instance
argument_list|()
operator|.
name|deleteData
argument_list|(
literal|true
argument_list|)
operator|.
name|purgeData
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|trashSizeWithoutPurge
init|=
name|getTrashContents
argument_list|()
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
literal|"After dropPartitions(noPurge), data should've gone to trash!"
argument_list|,
name|trashSizeBeforeDrop
argument_list|,
name|trashSizeWithoutPurge
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanUpTableQuietly
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that tables set up with auto-purge skip trash-directory when tables/partitions are dropped.    * @throws Throwable    */
specifier|public
name|void
name|testAutoPurgeTablesAndPartitions
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|dbName
init|=
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
decl_stmt|;
name|String
name|tableName
init|=
literal|"table_for_testAutoPurgeTablesAndPartitions"
decl_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|createPartitionedTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"auto.purge"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|hm
operator|.
name|alterTable
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
init|=
operator|new
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"ds"
argument_list|,
literal|"20141216"
argument_list|)
operator|.
name|put
argument_list|(
literal|"hr"
argument_list|,
literal|"12"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|trashSizeBeforeDrop
init|=
name|getTrashContents
argument_list|()
operator|.
name|length
decl_stmt|;
name|hm
operator|.
name|createPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|hm
operator|.
name|getPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Newly created partition shouldn't be null!"
argument_list|,
name|partition
argument_list|)
expr_stmt|;
name|hm
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
argument_list|,
name|PartitionDropOptions
operator|.
name|instance
argument_list|()
operator|.
name|deleteData
argument_list|(
literal|true
argument_list|)
operator|.
name|purgeData
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|trashSizeAfterDrop
init|=
name|getTrashContents
argument_list|()
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
literal|"After dropPartition(noPurge), data should still have skipped trash."
argument_list|,
name|trashSizeBeforeDrop
argument_list|,
name|trashSizeAfterDrop
argument_list|)
expr_stmt|;
comment|// Repeat the same check for dropTable.
name|trashSizeBeforeDrop
operator|=
name|trashSizeAfterDrop
expr_stmt|;
name|hm
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|trashSizeAfterDrop
operator|=
name|getTrashContents
argument_list|()
operator|.
name|length
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After dropTable(noPurge), data should still have skipped trash."
argument_list|,
name|trashSizeBeforeDrop
argument_list|,
name|trashSizeAfterDrop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected failure: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanUpTableQuietly
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testPartition
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|String
name|tableName
init|=
literal|"table_for_testpartition"
decl_stmt|;
try|try
block|{
name|hm
operator|.
name|dropTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to drop table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|LinkedList
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|part_cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|part_cols
operator|.
name|add
argument_list|(
literal|"ds"
argument_list|)
expr_stmt|;
name|part_cols
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|)
expr_stmt|;
try|try
block|{
name|hm
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|cols
argument_list|,
name|part_cols
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to create table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tbl
operator|=
name|hm
operator|.
name|getTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to fetch table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|part_spec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|part_spec
operator|.
name|clear
argument_list|()
expr_stmt|;
name|part_spec
operator|.
name|put
argument_list|(
literal|"ds"
argument_list|,
literal|"2008-04-08"
argument_list|)
expr_stmt|;
name|part_spec
operator|.
name|put
argument_list|(
literal|"hr"
argument_list|,
literal|"12"
argument_list|)
expr_stmt|;
try|try
block|{
name|hm
operator|.
name|createPartition
argument_list|(
name|tbl
argument_list|,
name|part_spec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to create parition for table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|hm
operator|.
name|dropTable
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testPartition() failed"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testHiveRefreshOnConfChange
parameter_list|()
throws|throws
name|Throwable
block|{
name|Hive
name|prevHiveObj
init|=
name|Hive
operator|.
name|get
argument_list|()
decl_stmt|;
name|prevHiveObj
operator|.
name|getDatabaseCurrent
argument_list|()
expr_stmt|;
name|Hive
name|newHiveObj
decl_stmt|;
comment|//if HiveConf has not changed, same object should be returned
name|HiveConf
name|newHconf
init|=
operator|new
name|HiveConf
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|newHiveObj
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|newHconf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prevHiveObj
operator|==
name|newHiveObj
argument_list|)
expr_stmt|;
comment|//if needs refresh param is passed, it should return new object
name|newHiveObj
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|newHconf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prevHiveObj
operator|!=
name|newHiveObj
argument_list|)
expr_stmt|;
comment|//if HiveConf has changed, new object should be returned
name|prevHiveObj
operator|=
name|Hive
operator|.
name|get
argument_list|()
expr_stmt|;
name|prevHiveObj
operator|.
name|getDatabaseCurrent
argument_list|()
expr_stmt|;
comment|//change value of a metavar config param in new hive conf
name|newHconf
operator|=
operator|new
name|HiveConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|newHconf
operator|.
name|setIntVar
argument_list|(
name|ConfVars
operator|.
name|METASTORETHRIFTCONNECTIONRETRIES
argument_list|,
name|newHconf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|METASTORETHRIFTCONNECTIONRETRIES
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|newHiveObj
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|newHconf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prevHiveObj
operator|!=
name|newHiveObj
argument_list|)
expr_stmt|;
block|}
comment|// shamelessly copied from Path in hadoop-2
specifier|private
specifier|static
specifier|final
name|String
name|SEPARATOR
init|=
literal|"/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
name|SEPARATOR_CHAR
init|=
literal|'/'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CUR_DIR
init|=
literal|"."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|WINDOWS
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|hasDriveLetterSpecifier
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^/?[a-zA-Z]:"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Path
name|mergePaths
parameter_list|(
name|Path
name|path1
parameter_list|,
name|Path
name|path2
parameter_list|)
block|{
name|String
name|path2Str
init|=
name|path2
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|path2Str
operator|=
name|path2Str
operator|.
name|substring
argument_list|(
name|startPositionWithoutWindowsDrive
argument_list|(
name|path2Str
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add path components explicitly, because simply concatenating two path
comment|// string is not safe, for example:
comment|// "/" + "/foo" yields "//foo", which will be parsed as authority in Path
return|return
operator|new
name|Path
argument_list|(
name|path1
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|,
name|path1
operator|.
name|toUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|path1
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
name|path2Str
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|startPositionWithoutWindowsDrive
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|hasWindowsDrive
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|path
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|SEPARATOR_CHAR
condition|?
literal|3
else|:
literal|2
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|hasWindowsDrive
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|(
name|WINDOWS
operator|&&
name|hasDriveLetterSpecifier
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
operator|.
name|find
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

