begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_TRASH_CHECKPOINT_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_TRASH_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|TrashPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|HiveIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveIgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|ThriftDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|Complex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_comment
comment|/**  * TestHive.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestHive
extends|extends
name|TestCase
block|{
specifier|protected
name|Hive
name|hm
decl_stmt|;
specifier|protected
name|HiveConf
name|hiveConf
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// enable trash so it can be tested
name|hiveConf
operator|.
name|setFloat
argument_list|(
name|FS_TRASH_CHECKPOINT_INTERVAL_KEY
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setFloat
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
try|try
block|{
name|hm
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to initialize Hive Metastore using configuration: \n "
operator|+
name|hiveConf
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
comment|// disable trash
name|hiveConf
operator|.
name|setFloat
argument_list|(
name|FS_TRASH_CHECKPOINT_INTERVAL_KEY
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setFloat
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|Hive
operator|.
name|closeCurrent
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to close Hive Metastore using configruation: \n "
operator|+
name|hiveConf
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testTable
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
comment|// create a simple table and test create, drop, get
name|String
name|tableName
init|=
literal|"table_for_testtable"
decl_stmt|;
try|try
block|{
name|hm
operator|.
name|dropTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to drop table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
name|tbl
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|"int -- first column"
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|"string -- second column"
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col3"
argument_list|,
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|,
literal|"double -- thrift column"
argument_list|)
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setFields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setOutputFormatClass
argument_list|(
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setInputFormatClass
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"comment"
argument_list|,
literal|"this is a test table created as part junit tests"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
name|tbl
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
name|bucketCols
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
try|try
block|{
name|tbl
operator|.
name|setBucketCols
argument_list|(
name|bucketCols
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to set bucket column for table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|"partition column, date but in string format as date type is not yet supported in QL"
argument_list|)
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setPartCols
argument_list|(
name|partCols
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setNumBuckets
argument_list|(
operator|(
name|short
operator|)
literal|512
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setOwner
argument_list|(
literal|"pchakka"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setRetention
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// set output format parameters (these are not supported by QL but only
comment|// for demo purposes)
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|LINE_DELIM
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|MAPKEY_DELIM
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|COLLECTION_DELIM
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setStoredAsSubDirectories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// create table
name|setNullCreateTableGrants
argument_list|()
expr_stmt|;
try|try
block|{
name|hm
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to create table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// get table
name|validateTable
argument_list|(
name|tbl
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|hm
operator|.
name|dropTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Table
name|ft2
init|=
name|hm
operator|.
name|getTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Unable to drop table "
argument_list|,
name|ft2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unable to drop table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testTable failed"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|setNullCreateTableGrants
parameter_list|()
block|{
comment|//having a non null create table grants privileges causes problems in
comment|// the tests that compares underlying thrift Table object of created
comment|// table with a table object that was fetched from metastore.
comment|// This is because the fetch does not populate the privileges field in Table
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setCreateTableGrants
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests create and fetch of a thrift based table.    *    * @throws Throwable    */
specifier|public
name|void
name|testThriftTable
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
literal|"table_for_test_thrifttable"
decl_stmt|;
try|try
block|{
try|try
block|{
name|hm
operator|.
name|dropTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e1
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to drop table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setInputFormatClass
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setOutputFormatClass
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|ThriftDeserializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_CLASS
argument_list|,
name|Complex
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
name|TBinaryProtocol
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setStoredAsSubDirectories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setNullCreateTableGrants
argument_list|()
expr_stmt|;
try|try
block|{
name|hm
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to create table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// get table
name|validateTable
argument_list|(
name|tbl
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|hm
operator|.
name|dropTable
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testThriftTable() failed"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Gets a table from the metastore and compares it to the original Table    *    * @param tbl    * @param tableName    * @throws MetaException    */
specifier|private
name|void
name|validateTable
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
block|{
name|Warehouse
name|wh
init|=
operator|new
name|Warehouse
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|Table
name|ft
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// hm.getTable result will not have privileges set (it does not retrieve
comment|// that part from metastore), so unset privileges to null before comparing
comment|// (create table sets it to empty (non null) structures)
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|setPrivilegesIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ft
operator|=
name|hm
operator|.
name|getTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Unable to fetch table"
argument_list|,
name|ft
argument_list|)
expr_stmt|;
name|ft
operator|.
name|checkValidity
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table names didn't match for table: "
operator|+
name|tableName
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|ft
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table owners didn't match for table: "
operator|+
name|tableName
argument_list|,
name|tbl
operator|.
name|getOwner
argument_list|()
argument_list|,
name|ft
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table retention didn't match for table: "
operator|+
name|tableName
argument_list|,
name|tbl
operator|.
name|getRetention
argument_list|()
argument_list|,
name|ft
operator|.
name|getRetention
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Data location is not set correctly"
argument_list|,
name|wh
operator|.
name|getTablePath
argument_list|(
name|hm
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
argument_list|,
name|tableName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ft
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// now that URI and times are set correctly, set the original table's uri and times
comment|// and then compare the two tables
name|tbl
operator|.
name|setDataLocation
argument_list|(
name|ft
operator|.
name|getDataLocation
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setCreateTime
argument_list|(
name|ft
operator|.
name|getTTable
argument_list|()
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|,
name|ft
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Tables  doesn't match: "
operator|+
name|tableName
argument_list|,
name|ft
operator|.
name|getTTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tbl
operator|.
name|getTTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SerializationLib is not set correctly"
argument_list|,
name|tbl
operator|.
name|getSerializationLib
argument_list|()
argument_list|,
name|ft
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Serde is not set correctly"
argument_list|,
name|tbl
operator|.
name|getDeserializer
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|ft
operator|.
name|getDeserializer
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to fetch table correctly: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Table
name|createTestTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|HiveException
block|{
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setInputFormatClass
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setOutputFormatClass
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|ThriftDeserializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_CLASS
argument_list|,
name|Complex
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
name|TBinaryProtocol
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
comment|/**    * Test basic Hive class interaction, that:    * - We can have different Hive objects throughout the lifetime of this thread.    */
specifier|public
name|void
name|testHiveCloseCurrent
parameter_list|()
throws|throws
name|Throwable
block|{
name|Hive
name|hive1
init|=
name|Hive
operator|.
name|get
argument_list|()
decl_stmt|;
name|Hive
operator|.
name|closeCurrent
argument_list|()
expr_stmt|;
name|Hive
name|hive2
init|=
name|Hive
operator|.
name|get
argument_list|()
decl_stmt|;
name|Hive
operator|.
name|closeCurrent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|hive1
operator|!=
name|hive2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetAndDropTables
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|String
name|dbName
init|=
literal|"db_for_testgettables"
decl_stmt|;
name|String
name|table1Name
init|=
literal|"table1"
decl_stmt|;
name|hm
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|hm
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ts
operator|.
name|add
argument_list|(
name|table1Name
argument_list|)
expr_stmt|;
name|ts
operator|.
name|add
argument_list|(
literal|"table2"
argument_list|)
expr_stmt|;
name|Table
name|tbl1
init|=
name|createTestTable
argument_list|(
name|dbName
argument_list|,
name|ts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|hm
operator|.
name|createTable
argument_list|(
name|tbl1
argument_list|)
expr_stmt|;
name|Table
name|tbl2
init|=
name|createTestTable
argument_list|(
name|dbName
argument_list|,
name|ts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|hm
operator|.
name|createTable
argument_list|(
name|tbl2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fts
init|=
name|hm
operator|.
name|getTablesForDb
argument_list|(
name|dbName
argument_list|,
literal|".*"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ts
argument_list|,
name|fts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fts
operator|=
name|hm
operator|.
name|getTablesForDb
argument_list|(
name|dbName
argument_list|,
literal|".*1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|fts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// also test getting a table from a specific db
name|Table
name|table1
init|=
name|hm
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|table1Name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|table1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|table1Name
argument_list|,
name|table1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|table1
operator|.
name|getPath
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|table1
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// and test dropping this specific table
name|hm
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|table1Name
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|table1
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Drop all tables
for|for
control|(
name|String
name|tableName
range|:
name|hm
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
control|)
block|{
name|Table
name|table
init|=
name|hm
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|hm
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|table
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hm
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testGetAndDropTables() failed"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testDropTableTrash
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|String
name|dbName
init|=
literal|"db_for_testdroptable"
decl_stmt|;
name|hm
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|hm
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|tableBaseName
init|=
literal|"droptable"
decl_stmt|;
name|ts
operator|.
name|add
argument_list|(
name|tableBaseName
operator|+
literal|"1"
argument_list|)
expr_stmt|;
name|ts
operator|.
name|add
argument_list|(
name|tableBaseName
operator|+
literal|"2"
argument_list|)
expr_stmt|;
name|Table
name|tbl1
init|=
name|createTestTable
argument_list|(
name|dbName
argument_list|,
name|ts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|hm
operator|.
name|createTable
argument_list|(
name|tbl1
argument_list|)
expr_stmt|;
name|Table
name|tbl2
init|=
name|createTestTable
argument_list|(
name|dbName
argument_list|,
name|ts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|hm
operator|.
name|createTable
argument_list|(
name|tbl2
argument_list|)
expr_stmt|;
comment|// test dropping tables and trash behavior
name|Table
name|table1
init|=
name|hm
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|ts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|table1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|table1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path1
init|=
name|table1
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path1
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path1
argument_list|)
argument_list|)
expr_stmt|;
comment|// drop table and check that trash works
name|TrashPolicy
name|tp
init|=
name|TrashPolicy
operator|.
name|getInstance
argument_list|(
name|hiveConf
argument_list|,
name|fs
argument_list|,
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"TrashPolicy instance should not be null"
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"TrashPolicy is not enabled for filesystem: "
operator|+
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|tp
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|trashDir
init|=
name|tp
operator|.
name|getCurrentTrashDir
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"trash directory should not be null"
argument_list|,
name|trashDir
argument_list|)
expr_stmt|;
name|Path
name|trash1
init|=
name|Path
operator|.
name|mergePaths
argument_list|(
name|trashDir
argument_list|,
name|path1
argument_list|)
decl_stmt|;
name|Path
name|pathglob
init|=
name|trash1
operator|.
name|suffix
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
empty_stmt|;
name|FileStatus
name|before
index|[]
init|=
name|fs
operator|.
name|globStatus
argument_list|(
name|pathglob
argument_list|)
decl_stmt|;
name|hm
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|ts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path1
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|after
index|[]
init|=
name|fs
operator|.
name|globStatus
argument_list|(
name|pathglob
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"trash dir before and after DROP TABLE noPURGE are not different"
argument_list|,
name|before
operator|.
name|length
operator|!=
name|after
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// drop a table without saving to trash by setting the purge option
name|Table
name|table2
init|=
name|hm
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|ts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|table2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|table2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path2
init|=
name|table2
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path2
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|trash2
init|=
name|Path
operator|.
name|mergePaths
argument_list|(
name|trashDir
argument_list|,
name|path2
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"trashDir2 is "
operator|+
name|trash2
argument_list|)
expr_stmt|;
name|pathglob
operator|=
name|trash2
operator|.
name|suffix
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|before
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
name|pathglob
argument_list|)
expr_stmt|;
name|hm
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|ts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// deleteData, ignoreUnknownTable, ifPurge
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path2
argument_list|)
argument_list|)
expr_stmt|;
name|after
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
name|pathglob
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|before
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"trash dir before and after DROP TABLE PURGE are different"
argument_list|,
name|before
operator|.
name|length
argument_list|,
name|after
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"trash dir before and after DROP TABLE PURGE are different"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
comment|// Drop all tables
for|for
control|(
name|String
name|tableName
range|:
name|hm
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
control|)
block|{
name|Table
name|table
init|=
name|hm
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|hm
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|table
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hm
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testDropTableTrash() failed"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testPartition
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|String
name|tableName
init|=
literal|"table_for_testpartition"
decl_stmt|;
try|try
block|{
name|hm
operator|.
name|dropTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to drop table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|LinkedList
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|part_cols
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|part_cols
operator|.
name|add
argument_list|(
literal|"ds"
argument_list|)
expr_stmt|;
name|part_cols
operator|.
name|add
argument_list|(
literal|"hr"
argument_list|)
expr_stmt|;
try|try
block|{
name|hm
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|cols
argument_list|,
name|part_cols
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to create table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tbl
operator|=
name|hm
operator|.
name|getTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to fetch table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|part_spec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|part_spec
operator|.
name|clear
argument_list|()
expr_stmt|;
name|part_spec
operator|.
name|put
argument_list|(
literal|"ds"
argument_list|,
literal|"2008-04-08"
argument_list|)
expr_stmt|;
name|part_spec
operator|.
name|put
argument_list|(
literal|"hr"
argument_list|,
literal|"12"
argument_list|)
expr_stmt|;
try|try
block|{
name|hm
operator|.
name|createPartition
argument_list|(
name|tbl
argument_list|,
name|part_spec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to create parition for table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|hm
operator|.
name|dropTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testPartition() failed"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Tests creating a simple index on a simple table.    *    * @throws Throwable    */
specifier|public
name|void
name|testIndex
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
comment|// create a simple table
name|String
name|tableName
init|=
literal|"table_for_testindex"
decl_stmt|;
name|String
name|qTableName
init|=
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
operator|+
literal|"."
operator|+
name|tableName
decl_stmt|;
try|try
block|{
name|hm
operator|.
name|dropTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to drop table"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
name|tbl
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|"int -- first column"
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|"string -- second column"
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col3"
argument_list|,
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|,
literal|"double -- thrift column"
argument_list|)
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setFields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setOutputFormatClass
argument_list|(
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setInputFormatClass
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// create table
try|try
block|{
name|hm
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to create table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Create a simple index
name|String
name|indexName
init|=
literal|"index_on_table_for_testindex"
decl_stmt|;
name|String
name|indexHandlerClass
init|=
name|HiveIndex
operator|.
name|IndexType
operator|.
name|COMPACT_SUMMARY_TABLE
operator|.
name|getHandlerClsName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|indexedCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|indexedCols
operator|.
name|add
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|String
name|indexTableName
init|=
literal|"index_on_table_for_testindex_table"
decl_stmt|;
name|String
name|qIndexTableName
init|=
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
operator|+
literal|"."
operator|+
name|indexTableName
decl_stmt|;
name|boolean
name|deferredRebuild
init|=
literal|true
decl_stmt|;
name|String
name|inputFormat
init|=
name|SequenceFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|outputFormat
init|=
name|SequenceFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|serde
init|=
literal|null
decl_stmt|;
name|String
name|storageHandler
init|=
literal|null
decl_stmt|;
name|String
name|location
init|=
literal|null
decl_stmt|;
name|String
name|collItemDelim
init|=
literal|null
decl_stmt|;
name|String
name|fieldDelim
init|=
literal|null
decl_stmt|;
name|String
name|fieldEscape
init|=
literal|null
decl_stmt|;
name|String
name|lineDelim
init|=
literal|null
decl_stmt|;
name|String
name|mapKeyDelim
init|=
literal|null
decl_stmt|;
name|String
name|indexComment
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|indexProps
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableProps
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hm
operator|.
name|createIndex
argument_list|(
name|qTableName
argument_list|,
name|indexName
argument_list|,
name|indexHandlerClass
argument_list|,
name|indexedCols
argument_list|,
name|qIndexTableName
argument_list|,
name|deferredRebuild
argument_list|,
name|inputFormat
argument_list|,
name|outputFormat
argument_list|,
name|serde
argument_list|,
name|storageHandler
argument_list|,
name|location
argument_list|,
name|indexProps
argument_list|,
name|tableProps
argument_list|,
name|serdeProps
argument_list|,
name|collItemDelim
argument_list|,
name|fieldDelim
argument_list|,
name|fieldEscape
argument_list|,
name|lineDelim
argument_list|,
name|mapKeyDelim
argument_list|,
name|indexComment
argument_list|)
expr_stmt|;
comment|// Retrieve and validate the index
name|Index
name|index
init|=
literal|null
decl_stmt|;
try|try
block|{
name|index
operator|=
name|hm
operator|.
name|getIndex
argument_list|(
name|tableName
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Unable to fetch index"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|index
operator|.
name|validate
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Index names don't match for index: "
operator|+
name|indexName
argument_list|,
name|indexName
argument_list|,
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table names don't match for index: "
operator|+
name|indexName
argument_list|,
name|tableName
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Index table names didn't match for index: "
operator|+
name|indexName
argument_list|,
name|indexTableName
argument_list|,
name|index
operator|.
name|getIndexTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Index handler classes didn't match for index: "
operator|+
name|indexName
argument_list|,
name|indexHandlerClass
argument_list|,
name|index
operator|.
name|getIndexHandlerClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Deferred rebuild didn't match for index: "
operator|+
name|indexName
argument_list|,
name|deferredRebuild
argument_list|,
name|index
operator|.
name|isDeferredRebuild
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to fetch index correctly: "
operator|+
name|indexName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Drop index
try|try
block|{
name|hm
operator|.
name|dropIndex
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|,
name|indexName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to drop index: "
operator|+
name|indexName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|boolean
name|dropIndexException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|hm
operator|.
name|getIndex
argument_list|(
name|tableName
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
comment|// Expected since it was just dropped
name|dropIndexException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Unable to drop index: "
operator|+
name|indexName
argument_list|,
name|dropIndexException
argument_list|)
expr_stmt|;
comment|// Drop table
try|try
block|{
name|hm
operator|.
name|dropTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Table
name|droppedTable
init|=
name|hm
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Unable to drop table "
operator|+
name|tableName
argument_list|,
name|droppedTable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to drop table: "
operator|+
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testIndex failed"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testHiveRefreshOnConfChange
parameter_list|()
throws|throws
name|Throwable
block|{
name|Hive
name|prevHiveObj
init|=
name|Hive
operator|.
name|get
argument_list|()
decl_stmt|;
name|prevHiveObj
operator|.
name|getDatabaseCurrent
argument_list|()
expr_stmt|;
name|Hive
name|newHiveObj
decl_stmt|;
comment|//if HiveConf has not changed, same object should be returned
name|HiveConf
name|newHconf
init|=
operator|new
name|HiveConf
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|newHiveObj
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|newHconf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prevHiveObj
operator|==
name|newHiveObj
argument_list|)
expr_stmt|;
comment|//if needs refresh param is passed, it should return new object
name|newHiveObj
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|newHconf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prevHiveObj
operator|!=
name|newHiveObj
argument_list|)
expr_stmt|;
comment|//if HiveConf has changed, new object should be returned
name|prevHiveObj
operator|=
name|Hive
operator|.
name|get
argument_list|()
expr_stmt|;
name|prevHiveObj
operator|.
name|getDatabaseCurrent
argument_list|()
expr_stmt|;
comment|//change value of a metavar config param in new hive conf
name|newHconf
operator|=
operator|new
name|HiveConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|newHconf
operator|.
name|setIntVar
argument_list|(
name|ConfVars
operator|.
name|METASTORETHRIFTCONNECTIONRETRIES
argument_list|,
name|newHconf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|METASTORETHRIFTCONNECTIONRETRIES
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|newHiveObj
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|newHconf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prevHiveObj
operator|!=
name|newHiveObj
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

