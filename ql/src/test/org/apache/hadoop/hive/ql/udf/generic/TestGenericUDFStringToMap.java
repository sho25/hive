begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredJavaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestGenericUDFStringToMap
block|{
annotation|@
name|Test
specifier|public
name|void
name|testStringToMapWithCustomDelimiters
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFStringToMap
name|udf
init|=
operator|new
name|GenericUDFStringToMap
argument_list|()
decl_stmt|;
name|initGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expResult
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expResult
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|expResult
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|expResult
operator|.
name|put
argument_list|(
literal|"key3"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
literal|"key1=value1;key2=value2;key3=value3"
argument_list|,
literal|";"
argument_list|,
literal|"="
argument_list|,
name|expResult
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringToMapWithDefaultDelimiters
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFStringToMap
name|udf
init|=
operator|new
name|GenericUDFStringToMap
argument_list|()
decl_stmt|;
name|initGenericUDFWithNoDelimiters
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expResult
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expResult
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|expResult
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|expResult
operator|.
name|put
argument_list|(
literal|"key3"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
literal|"key1:value1,key2:value2,key3:value3"
argument_list|,
name|expResult
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringToMapWithNullDelimiters
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFStringToMap
name|udf
init|=
operator|new
name|GenericUDFStringToMap
argument_list|()
decl_stmt|;
name|initGenericUDF
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expResult
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expResult
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|expResult
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|expResult
operator|.
name|put
argument_list|(
literal|"key3"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
literal|"key1:value1,key2:value2,key3:value3"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|expResult
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringToMapWithNullText
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFStringToMap
name|udf
init|=
operator|new
name|GenericUDFStringToMap
argument_list|()
decl_stmt|;
name|initGenericUDFWithNoDelimiters
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expResult
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|runAndVerify
argument_list|(
literal|null
argument_list|,
name|expResult
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringToMapWithEmptyText
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFStringToMap
name|udf
init|=
operator|new
name|GenericUDFStringToMap
argument_list|()
decl_stmt|;
name|initGenericUDFWithNoDelimiters
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expResult
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expResult
operator|.
name|put
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
literal|""
argument_list|,
name|expResult
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringToMapNoKey
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFStringToMap
name|udf
init|=
operator|new
name|GenericUDFStringToMap
argument_list|()
decl_stmt|;
name|initGenericUDFWithNoDelimiters
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expResult
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expResult
operator|.
name|put
argument_list|(
literal|""
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
literal|":value"
argument_list|,
name|expResult
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringToMapNoValue
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFStringToMap
name|udf
init|=
operator|new
name|GenericUDFStringToMap
argument_list|()
decl_stmt|;
name|initGenericUDFWithNoDelimiters
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expResult
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expResult
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
literal|"key:"
argument_list|,
name|expResult
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringToMapNotMatchingDelimiter
parameter_list|()
throws|throws
name|HiveException
block|{
name|GenericUDFStringToMap
name|udf
init|=
operator|new
name|GenericUDFStringToMap
argument_list|()
decl_stmt|;
name|initGenericUDFWithNoDelimiters
argument_list|(
name|udf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expResult
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expResult
operator|.
name|put
argument_list|(
literal|"key=value"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|runAndVerify
argument_list|(
literal|"key=value"
argument_list|,
name|expResult
argument_list|,
name|udf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initGenericUDF
parameter_list|(
name|GenericUDFStringToMap
name|udf
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
decl_stmt|;
name|ObjectInspector
name|valueOI1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
decl_stmt|;
name|ObjectInspector
name|valueOI2
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|,
name|valueOI1
block|,
name|valueOI2
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initGenericUDFWithNoDelimiters
parameter_list|(
name|GenericUDFStringToMap
name|udf
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|ObjectInspector
name|valueOI0
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI0
block|}
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runAndVerify
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|delimiter1
parameter_list|,
name|String
name|delimiter2
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expResult
parameter_list|,
name|GenericUDF
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
name|DeferredObject
name|valueObj0
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|DeferredObject
name|valueObj1
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|delimiter1
argument_list|)
decl_stmt|;
name|DeferredObject
name|valueObj2
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|delimiter2
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
block|{
name|valueObj0
block|,
name|valueObj1
block|,
name|valueObj2
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|output
init|=
operator|(
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"str_to_map() test"
argument_list|,
name|expResult
operator|.
name|equals
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runAndVerify
parameter_list|(
name|String
name|text
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expResult
parameter_list|,
name|GenericUDF
name|udf
parameter_list|)
throws|throws
name|HiveException
block|{
name|DeferredObject
name|valueObj0
init|=
operator|new
name|DeferredJavaObject
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|DeferredObject
index|[]
name|args
init|=
block|{
name|valueObj0
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|output
init|=
operator|(
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|udf
operator|.
name|evaluate
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"str_to_map() test"
argument_list|,
name|expResult
operator|.
name|equals
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

