begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestNestedColumnFieldPruningUtils
block|{
annotation|@
name|Parameterized
operator|.
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"root[a]"
block|,
operator|new
name|String
index|[]
block|{
literal|"root.a.b.c"
block|}
block|,
literal|"root[a]"
block|}
block|,
block|{
literal|"root[a[b[d,e]],c]"
block|,
operator|new
name|String
index|[]
block|{
literal|"root.a.b.c"
block|}
block|,
literal|"root[a[b[d,e,c]],c]"
block|}
block|,
block|{
literal|"root[a[b[c]]]"
block|,
operator|new
name|String
index|[]
block|{
literal|"root.a.b.c.d"
block|}
block|,
literal|"root[a[b[c]]]"
block|}
block|,
block|{
literal|null
block|,
operator|new
name|String
index|[]
block|{
literal|"a.b.c"
block|}
block|,
literal|"a[b[c]]"
block|}
block|,
block|{
literal|null
block|,
operator|new
name|String
index|[]
block|{
literal|"a.b"
block|,
literal|"a.c"
block|}
block|,
literal|"a[b,c]"
block|}
block|,
block|{
literal|"a[b]"
block|,
operator|new
name|String
index|[]
block|{
literal|"a.b.c"
block|}
block|,
literal|"a[b]"
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
name|value
operator|=
literal|0
argument_list|)
specifier|public
name|String
name|origTreeExpr
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
name|value
operator|=
literal|1
argument_list|)
specifier|public
name|String
index|[]
name|paths
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
name|value
operator|=
literal|2
argument_list|)
specifier|public
name|String
name|resTreeExpr
decl_stmt|;
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testAddNodeByPath
parameter_list|()
block|{
name|FieldNode
name|root
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|origTreeExpr
operator|!=
literal|null
condition|)
block|{
name|root
operator|=
name|buildTreeByExpr
argument_list|(
name|origTreeExpr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The original tree is built incorrect"
argument_list|,
name|root
operator|.
name|toString
argument_list|()
argument_list|,
name|origTreeExpr
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
name|root
operator|=
name|NestedColumnFieldPruningUtils
operator|.
name|addNodeByPath
argument_list|(
name|root
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resTreeExpr
argument_list|,
name|root
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|isSpecialChar
parameter_list|(
name|char
name|element
parameter_list|)
block|{
return|return
operator|(
name|element
operator|==
literal|'['
operator|)
operator|||
operator|(
name|element
operator|==
literal|']'
operator|)
operator|||
operator|(
name|element
operator|==
literal|','
operator|)
return|;
block|}
specifier|private
specifier|static
name|FieldNode
name|buildTreeByExpr
parameter_list|(
name|String
name|expr
parameter_list|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
name|LinkedList
argument_list|<
name|FieldNode
argument_list|>
name|fieldStack
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|expr
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|i
init|=
name|index
decl_stmt|;
if|if
condition|(
name|isSpecialChar
argument_list|(
name|expr
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|expr
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
operator|==
literal|','
operator|)
operator|||
operator|(
name|expr
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
operator|==
literal|']'
operator|)
condition|)
block|{
name|FieldNode
name|node
init|=
name|fieldStack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|FieldNode
name|pre
init|=
name|fieldStack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|pre
operator|.
name|addFieldNodes
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|i
operator|<
name|expr
operator|.
name|length
argument_list|()
operator|&&
operator|!
name|isSpecialChar
argument_list|(
name|expr
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|FieldNode
name|current
init|=
operator|new
name|FieldNode
argument_list|(
name|expr
operator|.
name|substring
argument_list|(
name|index
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|fieldStack
operator|.
name|push
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|index
operator|=
name|i
expr_stmt|;
block|}
block|}
return|return
name|fieldStack
operator|.
name|pop
argument_list|()
return|;
block|}
block|}
end_class

end_unit

