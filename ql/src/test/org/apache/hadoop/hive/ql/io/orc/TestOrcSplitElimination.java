begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|TestOrcSplitElimination
block|{
specifier|public
specifier|static
class|class
name|AllTypesRow
block|{
name|Long
name|userid
decl_stmt|;
name|Text
name|string1
decl_stmt|;
name|Double
name|subtype
decl_stmt|;
name|HiveDecimal
name|decimal1
decl_stmt|;
name|Timestamp
name|ts
decl_stmt|;
name|AllTypesRow
parameter_list|(
name|Long
name|uid
parameter_list|,
name|String
name|s1
parameter_list|,
name|Double
name|d1
parameter_list|,
name|HiveDecimal
name|decimal
parameter_list|,
name|Timestamp
name|ts
parameter_list|)
block|{
name|this
operator|.
name|userid
operator|=
name|uid
expr_stmt|;
name|this
operator|.
name|string1
operator|=
operator|new
name|Text
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|this
operator|.
name|subtype
operator|=
name|d1
expr_stmt|;
name|this
operator|.
name|decimal1
operator|=
name|decimal
expr_stmt|;
name|this
operator|.
name|ts
operator|=
name|ts
expr_stmt|;
block|}
block|}
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|,
literal|"target"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|JobConf
name|conf
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
name|Path
name|testFilePath
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testCaseName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|openFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
comment|// all columns
name|conf
operator|.
name|set
argument_list|(
literal|"columns"
argument_list|,
literal|"userid,string1,subtype,decimal1,ts"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"columns.types"
argument_list|,
literal|"bigint,string,double,decimal,timestamp"
argument_list|)
expr_stmt|;
comment|// needed columns
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_NAMES_CONF_STR
argument_list|,
literal|"userid,subtype"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testFilePath
operator|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"TestOrcFile."
operator|+
name|testCaseName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|".orc"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitEliminationSmallMaxSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|AllTypesRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|testFilePath
argument_list|,
name|conf
argument_list|,
name|inspector
argument_list|,
literal|100000
argument_list|,
name|CompressionKind
operator|.
name|NONE
argument_list|,
literal|10000
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.min.split.size"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.max.split.size"
argument_list|,
literal|"5000"
argument_list|)
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|GenericUDF
name|udf
init|=
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ExprNodeColumnDesc
name|col
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"userid"
argument_list|,
literal|"T"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|con
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|childExpr
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|add
argument_list|(
name|con
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|en
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
decl_stmt|;
name|String
name|sargStr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|29
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|70
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitEliminationLargeMaxSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|AllTypesRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|testFilePath
argument_list|,
name|conf
argument_list|,
name|inspector
argument_list|,
literal|100000
argument_list|,
name|CompressionKind
operator|.
name|NONE
argument_list|,
literal|10000
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.min.split.size"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.max.split.size"
argument_list|,
literal|"150000"
argument_list|)
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|GenericUDF
name|udf
init|=
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ExprNodeColumnDesc
name|col
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"userid"
argument_list|,
literal|"T"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|con
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|childExpr
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|add
argument_list|(
name|con
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|en
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
decl_stmt|;
name|String
name|sargStr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// no stripes satisfies the condition
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// only first stripe will satisfy condition and hence single split
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// first stripe will satisfy the predicate and will be a single split, last stripe will be a
comment|// separate split
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// first 2 stripes will satisfy the predicate and merged to single split, last stripe will be a
comment|// separate split
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|29
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// first 3 stripes will satisfy the predicate and merged to single split, last stripe will be a
comment|// separate split
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|70
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// first 2 stripes will satisfy the predicate and merged to single split, last two stripe will
comment|// be a separate split
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitEliminationComplexExpr
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectInspector
name|inspector
decl_stmt|;
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|AllTypesRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|testFilePath
argument_list|,
name|conf
argument_list|,
name|inspector
argument_list|,
literal|100000
argument_list|,
name|CompressionKind
operator|.
name|NONE
argument_list|,
literal|10000
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.min.split.size"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.max.split.size"
argument_list|,
literal|"150000"
argument_list|)
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// predicate expression: userid<= 100 and subtype<= 1000.0
name|GenericUDF
name|udf
init|=
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ExprNodeColumnDesc
name|col
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"userid"
argument_list|,
literal|"T"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|con
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|childExpr
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|add
argument_list|(
name|con
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|en
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
decl_stmt|;
name|GenericUDF
name|udf1
init|=
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr1
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ExprNodeColumnDesc
name|col1
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Double
operator|.
name|class
argument_list|,
literal|"subtype"
argument_list|,
literal|"T"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|con1
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|1000.0
argument_list|)
decl_stmt|;
name|childExpr1
operator|.
name|add
argument_list|(
name|col1
argument_list|)
expr_stmt|;
name|childExpr1
operator|.
name|add
argument_list|(
name|con1
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|en1
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf1
argument_list|,
name|childExpr1
argument_list|)
decl_stmt|;
name|GenericUDF
name|udf2
init|=
operator|new
name|GenericUDFOPAnd
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|childExpr2
operator|.
name|add
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|add
argument_list|(
name|en1
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|en2
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf2
argument_list|,
name|childExpr2
argument_list|)
decl_stmt|;
name|String
name|sargStr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en2
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|con1
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|childExpr1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con1
argument_list|)
expr_stmt|;
name|en1
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf1
argument_list|,
name|childExpr1
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|en
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|en1
argument_list|)
expr_stmt|;
name|en2
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf2
argument_list|,
name|childExpr2
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// no stripe will satisfy the predicate
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|con1
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
name|childExpr1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con1
argument_list|)
expr_stmt|;
name|en1
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf1
argument_list|,
name|childExpr1
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|en
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|en1
argument_list|)
expr_stmt|;
name|en2
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf2
argument_list|,
name|childExpr2
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// only first stripe will satisfy condition and hence single split
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|udf
operator|=
operator|new
name|GenericUDFOPEqual
argument_list|()
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|con1
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|80.0
argument_list|)
expr_stmt|;
name|childExpr1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con1
argument_list|)
expr_stmt|;
name|en1
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf1
argument_list|,
name|childExpr1
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|en
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|en1
argument_list|)
expr_stmt|;
name|en2
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf2
argument_list|,
name|childExpr2
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// first two stripes will satisfy condition and hence single split
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|udf
operator|=
operator|new
name|GenericUDFOPEqual
argument_list|()
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|udf1
operator|=
operator|new
name|GenericUDFOPEqual
argument_list|()
expr_stmt|;
name|con1
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|80.0
argument_list|)
expr_stmt|;
name|childExpr1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con1
argument_list|)
expr_stmt|;
name|en1
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf1
argument_list|,
name|childExpr1
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|en
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|en1
argument_list|)
expr_stmt|;
name|en2
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf2
argument_list|,
name|childExpr2
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|en2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// only second stripes will satisfy condition and hence single split
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeData
parameter_list|(
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25000
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|AllTypesRow
argument_list|(
literal|2L
argument_list|,
literal|"foo"
argument_list|,
literal|0.8
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.2"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|5000
condition|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|AllTypesRow
argument_list|(
literal|13L
argument_list|,
literal|"bar"
argument_list|,
literal|80.0
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.2"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|5000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|10000
condition|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|AllTypesRow
argument_list|(
literal|29L
argument_list|,
literal|"cat"
argument_list|,
literal|8.0
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.3"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|10000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|15000
condition|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|AllTypesRow
argument_list|(
literal|70L
argument_list|,
literal|"dog"
argument_list|,
literal|1.8
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"4.4"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|15000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|20000
condition|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|AllTypesRow
argument_list|(
literal|5L
argument_list|,
literal|"eat"
argument_list|,
literal|0.8
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"5.5"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|20000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|AllTypesRow
argument_list|(
literal|100L
argument_list|,
literal|"zebra"
argument_list|,
literal|8.0
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.0"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|250000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

