begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetadataPpdResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|filemeta
operator|.
name|OrcFileMetadataHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SerializationUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|ExternalCache
operator|.
name|ExternalFooterCachesByConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|ppr
operator|.
name|PartitionExpressionForMetastore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|TestOrcSplitElimination
block|{
specifier|public
specifier|static
class|class
name|AllTypesRow
block|{
name|Long
name|userid
decl_stmt|;
name|Text
name|string1
decl_stmt|;
name|Double
name|subtype
decl_stmt|;
name|HiveDecimal
name|decimal1
decl_stmt|;
name|Timestamp
name|ts
decl_stmt|;
name|AllTypesRow
parameter_list|(
name|Long
name|uid
parameter_list|,
name|String
name|s1
parameter_list|,
name|Double
name|d1
parameter_list|,
name|HiveDecimal
name|decimal
parameter_list|,
name|Timestamp
name|ts
parameter_list|)
block|{
name|this
operator|.
name|userid
operator|=
name|uid
expr_stmt|;
name|this
operator|.
name|string1
operator|=
operator|new
name|Text
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|this
operator|.
name|subtype
operator|=
name|d1
expr_stmt|;
name|this
operator|.
name|decimal1
operator|=
name|decimal
expr_stmt|;
name|this
operator|.
name|ts
operator|=
name|ts
expr_stmt|;
block|}
block|}
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|,
literal|"target"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|JobConf
name|conf
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
name|Path
name|testFilePath
decl_stmt|,
name|testFilePath2
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testCaseName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|openFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
comment|// all columns
name|conf
operator|.
name|set
argument_list|(
literal|"columns"
argument_list|,
literal|"userid,string1,subtype,decimal1,ts"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"columns.types"
argument_list|,
literal|"bigint,string,double,decimal,timestamp"
argument_list|)
expr_stmt|;
comment|// needed columns
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0,2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_NAMES_CONF_STR
argument_list|,
literal|"userid,subtype"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testFilePath
operator|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"TestOrcFile."
operator|+
name|testCaseName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|".orc"
argument_list|)
expr_stmt|;
name|testFilePath2
operator|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"TestOrcFile."
operator|+
name|testCaseName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|".2.orc"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFilePath2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitEliminationSmallMaxSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectInspector
name|inspector
init|=
name|createIO
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|testFilePath
argument_list|,
name|conf
argument_list|,
name|inspector
argument_list|,
literal|100000
argument_list|,
name|CompressionKind
operator|.
name|NONE
argument_list|,
literal|10000
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|HiveConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMINSPLITSIZE
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMAXSPLITSIZE
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|GenericUDF
name|udf
init|=
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ExprNodeConstantDesc
name|con
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|en
decl_stmt|;
name|String
name|sargStr
decl_stmt|;
name|createTestSarg
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|29
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|70
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitEliminationLargeMaxSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectInspector
name|inspector
init|=
name|createIO
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|testFilePath
argument_list|,
name|conf
argument_list|,
name|inspector
argument_list|,
literal|100000
argument_list|,
name|CompressionKind
operator|.
name|NONE
argument_list|,
literal|10000
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|HiveConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMINSPLITSIZE
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMAXSPLITSIZE
argument_list|,
literal|150000
argument_list|)
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|GenericUDF
name|udf
init|=
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ExprNodeConstantDesc
name|con
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|en
decl_stmt|;
name|String
name|sargStr
decl_stmt|;
name|createTestSarg
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// no stripes satisfies the condition
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// only first stripe will satisfy condition and hence single split
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// first stripe will satisfy the predicate and will be a single split, last stripe will be a
comment|// separate split
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// first 2 stripes will satisfy the predicate and merged to single split, last stripe will be a
comment|// separate split
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|29
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// first 3 stripes will satisfy the predicate and merged to single split, last stripe will be a
comment|// separate split
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|70
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// first 2 stripes will satisfy the predicate and merged to single split, last two stripe will
comment|// be a separate split
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitEliminationComplexExpr
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectInspector
name|inspector
init|=
name|createIO
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|testFilePath
argument_list|,
name|conf
argument_list|,
name|inspector
argument_list|,
literal|100000
argument_list|,
name|CompressionKind
operator|.
name|NONE
argument_list|,
literal|10000
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|HiveConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMINSPLITSIZE
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMAXSPLITSIZE
argument_list|,
literal|150000
argument_list|)
expr_stmt|;
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|in
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|testFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// predicate expression: userid<= 100 and subtype<= 1000.0
name|GenericUDF
name|udf
init|=
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ExprNodeColumnDesc
name|col
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"userid"
argument_list|,
literal|"T"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|con
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|childExpr
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|add
argument_list|(
name|con
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|en
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
decl_stmt|;
name|GenericUDF
name|udf1
init|=
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr1
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ExprNodeColumnDesc
name|col1
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Double
operator|.
name|class
argument_list|,
literal|"subtype"
argument_list|,
literal|"T"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|con1
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|1000.0
argument_list|)
decl_stmt|;
name|childExpr1
operator|.
name|add
argument_list|(
name|col1
argument_list|)
expr_stmt|;
name|childExpr1
operator|.
name|add
argument_list|(
name|con1
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|en1
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf1
argument_list|,
name|childExpr1
argument_list|)
decl_stmt|;
name|GenericUDF
name|udf2
init|=
operator|new
name|GenericUDFOPAnd
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|childExpr2
operator|.
name|add
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|add
argument_list|(
name|en1
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|en2
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf2
argument_list|,
name|childExpr2
argument_list|)
decl_stmt|;
name|String
name|sargStr
init|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en2
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|con1
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|childExpr1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con1
argument_list|)
expr_stmt|;
name|en1
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf1
argument_list|,
name|childExpr1
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|en
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|en1
argument_list|)
expr_stmt|;
name|en2
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf2
argument_list|,
name|childExpr2
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// no stripe will satisfy the predicate
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|con1
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
name|childExpr1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con1
argument_list|)
expr_stmt|;
name|en1
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf1
argument_list|,
name|childExpr1
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|en
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|en1
argument_list|)
expr_stmt|;
name|en2
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf2
argument_list|,
name|childExpr2
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// only first stripe will satisfy condition and hence single split
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|udf
operator|=
operator|new
name|GenericUDFOPEqual
argument_list|()
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|con1
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|80.0
argument_list|)
expr_stmt|;
name|childExpr1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con1
argument_list|)
expr_stmt|;
name|en1
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf1
argument_list|,
name|childExpr1
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|en
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|en1
argument_list|)
expr_stmt|;
name|en2
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf2
argument_list|,
name|childExpr2
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// first two stripes will satisfy condition and hence single split
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|udf
operator|=
operator|new
name|GenericUDFOPEqual
argument_list|()
expr_stmt|;
name|con
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|en
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|udf1
operator|=
operator|new
name|GenericUDFOPEqual
argument_list|()
expr_stmt|;
name|con1
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|80.0
argument_list|)
expr_stmt|;
name|childExpr1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|con1
argument_list|)
expr_stmt|;
name|en1
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf1
argument_list|,
name|childExpr1
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|en
argument_list|)
expr_stmt|;
name|childExpr2
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|en1
argument_list|)
expr_stmt|;
name|en2
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf2
argument_list|,
name|childExpr2
argument_list|)
expr_stmt|;
name|sargStr
operator|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|en2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|sargStr
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// only second stripes will satisfy condition and hence single split
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|OrcInputFormatForTest
extends|extends
name|OrcInputFormat
block|{
specifier|public
specifier|static
name|void
name|clearLocalCache
parameter_list|()
block|{
name|OrcInputFormat
operator|.
name|Context
operator|.
name|clearLocalCache
argument_list|()
expr_stmt|;
block|}
specifier|static
name|MockExternalCaches
name|caches
init|=
operator|new
name|MockExternalCaches
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|ExternalFooterCachesByConf
name|createExternalCaches
parameter_list|()
block|{
return|return
name|caches
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MockExternalCaches
implements|implements
name|ExternalFooterCachesByConf
implements|,
name|ExternalFooterCachesByConf
operator|.
name|Cache
implements|,
name|MetadataStore
block|{
specifier|private
specifier|static
class|class
name|MockItem
block|{
name|ByteBuffer
name|data
decl_stmt|;
name|ByteBuffer
index|[]
name|extraCols
decl_stmt|;
name|ByteBuffer
index|[]
name|extraData
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|data
operator|==
literal|null
condition|?
literal|0
else|:
name|data
operator|.
name|remaining
argument_list|()
operator|)
operator|+
literal|" bytes"
operator|+
operator|(
name|extraCols
operator|==
literal|null
condition|?
literal|""
else|:
operator|(
literal|"; "
operator|+
name|extraCols
operator|.
name|length
operator|+
literal|" extras"
operator|)
operator|)
return|;
block|}
block|}
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|MockItem
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|OrcFileMetadataHandler
name|handler
init|=
operator|new
name|OrcFileMetadataHandler
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|putCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|,
name|getCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|,
name|getHitCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|,
name|getByExprCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|,
name|getHitByExprCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|public
name|void
name|resetCounts
parameter_list|()
block|{
name|getByExprCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|putCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getHitCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getHitByExprCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Cache
name|getCache
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|handler
operator|.
name|configure
argument_list|(
name|conf
argument_list|,
operator|new
name|PartitionExpressionForMetastore
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MetadataPpdResult
argument_list|>
argument_list|>
name|getFileMetadataByExpr
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|ByteBuffer
name|sarg
parameter_list|,
name|boolean
name|doGetFooters
parameter_list|)
throws|throws
name|HiveException
block|{
name|getByExprCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|ByteBuffer
index|[]
name|metadatas
init|=
operator|new
name|ByteBuffer
index|[
name|fileIds
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|ByteBuffer
index|[]
name|ppdResults
init|=
operator|new
name|ByteBuffer
index|[
name|fileIds
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|boolean
index|[]
name|eliminated
init|=
operator|new
name|boolean
index|[
name|fileIds
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|bb
init|=
operator|new
name|byte
index|[
name|sarg
operator|.
name|remaining
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|sarg
operator|.
name|array
argument_list|()
argument_list|,
name|sarg
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|bb
argument_list|,
literal|0
argument_list|,
name|sarg
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|getFileMetadataByExpr
argument_list|(
name|fileIds
argument_list|,
name|bb
argument_list|,
name|metadatas
argument_list|,
name|ppdResults
argument_list|,
name|eliminated
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|Long
argument_list|,
name|MetadataPpdResult
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metadatas
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|long
name|fileId
init|=
name|fileIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ByteBuffer
name|metadata
init|=
name|metadatas
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
continue|continue;
name|getHitByExprCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|metadata
operator|=
name|eliminated
index|[
name|i
index|]
condition|?
literal|null
else|:
name|metadata
expr_stmt|;
name|MetadataPpdResult
name|mpr
init|=
operator|new
name|MetadataPpdResult
argument_list|()
decl_stmt|;
name|ByteBuffer
name|bitset
init|=
name|eliminated
index|[
name|i
index|]
condition|?
literal|null
else|:
name|ppdResults
index|[
name|i
index|]
decl_stmt|;
name|mpr
operator|.
name|setMetadata
argument_list|(
name|doGetFooters
condition|?
name|metadata
else|:
literal|null
argument_list|)
expr_stmt|;
name|mpr
operator|.
name|setIncludeBitset
argument_list|(
name|bitset
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|fileId
argument_list|,
name|mpr
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|Long
name|id
range|:
name|fileIds
control|)
block|{
name|cache
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|>
name|getFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|)
throws|throws
name|HiveException
block|{
name|getCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|HashMap
argument_list|<
name|Long
argument_list|,
name|ByteBuffer
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|fileIds
control|)
block|{
name|MockItem
name|mi
init|=
name|cache
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|mi
operator|==
literal|null
condition|)
continue|continue;
name|getHitCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|mi
operator|.
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putFileMetadata
parameter_list|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
name|values
parameter_list|)
throws|throws
name|HiveException
block|{
name|putCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|ByteBuffer
index|[]
name|addedCols
init|=
name|handler
operator|.
name|createAddedCols
argument_list|()
decl_stmt|;
name|ByteBuffer
index|[]
index|[]
name|addedVals
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|addedCols
operator|!=
literal|null
condition|)
block|{
name|addedVals
operator|=
name|handler
operator|.
name|createAddedColVals
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|storeFileMetadata
argument_list|(
name|fileIds
argument_list|,
name|values
argument_list|,
name|addedCols
argument_list|,
name|addedVals
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// MetadataStore
annotation|@
name|Override
specifier|public
name|void
name|getFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|ByteBuffer
index|[]
name|result
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileIds
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|MockItem
name|mi
init|=
name|cache
operator|.
name|get
argument_list|(
name|fileIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|result
index|[
name|i
index|]
operator|=
operator|(
name|mi
operator|==
literal|null
condition|?
literal|null
else|:
name|mi
operator|.
name|data
operator|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|storeFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|metadataBuffers
parameter_list|,
name|ByteBuffer
index|[]
name|addedCols
parameter_list|,
name|ByteBuffer
index|[]
index|[]
name|addedVals
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileIds
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ByteBuffer
name|value
init|=
operator|(
name|metadataBuffers
operator|!=
literal|null
operator|)
condition|?
name|metadataBuffers
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|null
decl_stmt|;
name|ByteBuffer
index|[]
name|av
init|=
name|addedVals
operator|==
literal|null
condition|?
literal|null
else|:
name|addedVals
index|[
name|i
index|]
decl_stmt|;
name|storeFileMetadata
argument_list|(
name|fileIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|value
argument_list|,
name|addedCols
argument_list|,
name|av
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|storeFileMetadata
parameter_list|(
name|long
name|fileId
parameter_list|,
name|ByteBuffer
name|metadata
parameter_list|,
name|ByteBuffer
index|[]
name|addedCols
parameter_list|,
name|ByteBuffer
index|[]
name|addedVals
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
name|cache
operator|.
name|remove
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
return|return;
block|}
name|MockItem
name|mi
init|=
operator|new
name|MockItem
argument_list|()
decl_stmt|;
name|mi
operator|.
name|data
operator|=
name|metadata
expr_stmt|;
if|if
condition|(
name|addedVals
operator|!=
literal|null
condition|)
block|{
name|mi
operator|.
name|extraCols
operator|=
name|addedCols
expr_stmt|;
name|mi
operator|.
name|extraData
operator|=
name|addedVals
expr_stmt|;
block|}
name|cache
operator|.
name|put
argument_list|(
name|fileId
argument_list|,
name|mi
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestOrcSplitElimination
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Ignore
argument_list|(
literal|"External cache has been turned off for now"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testExternalFooterCache
parameter_list|()
throws|throws
name|Exception
block|{
name|testFooterExternalCacheImpl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"External cache has been turned off for now"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testExternalFooterCachePpd
parameter_list|()
throws|throws
name|Exception
block|{
name|testFooterExternalCacheImpl
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
class|class
name|FsWithHash
block|{
specifier|private
name|FileSplit
name|fs
decl_stmt|;
specifier|public
name|FsWithHash
parameter_list|(
name|FileSplit
name|fs
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
return|return
literal|0
return|;
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
name|prime
operator|*
literal|1
operator|+
name|fs
operator|.
name|getPath
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|Long
operator|.
name|valueOf
argument_list|(
name|fs
operator|.
name|getStart
argument_list|()
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|prime
operator|*
name|result
operator|+
name|Long
operator|.
name|valueOf
argument_list|(
name|fs
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|FsWithHash
operator|)
condition|)
return|return
literal|false
return|;
name|FsWithHash
name|other
init|=
operator|(
name|FsWithHash
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|(
name|fs
operator|==
literal|null
operator|)
operator|!=
operator|(
name|other
operator|.
name|fs
operator|==
literal|null
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|fs
operator|==
literal|null
operator|&&
name|other
operator|.
name|fs
operator|==
literal|null
condition|)
return|return
literal|true
return|;
return|return
name|fs
operator|.
name|getStart
argument_list|()
operator|==
name|other
operator|.
name|fs
operator|.
name|getStart
argument_list|()
operator|&&
name|fs
operator|.
name|getLength
argument_list|()
operator|==
name|other
operator|.
name|fs
operator|.
name|getLength
argument_list|()
operator|&&
name|fs
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|fs
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|testFooterExternalCacheImpl
parameter_list|(
name|boolean
name|isPpd
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectInspector
name|inspector
init|=
name|createIO
argument_list|()
decl_stmt|;
name|writeFile
argument_list|(
name|inspector
argument_list|,
name|testFilePath
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|inspector
argument_list|,
name|testFilePath2
argument_list|)
expr_stmt|;
name|GenericUDF
name|udf
init|=
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|createTestSarg
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
name|setupExternalCacheConfig
argument_list|(
name|isPpd
argument_list|,
name|testFilePath
operator|+
literal|","
operator|+
name|testFilePath2
argument_list|)
expr_stmt|;
comment|// Get the base values w/o cache.
name|conf
operator|.
name|setBoolean
argument_list|(
name|ConfVars
operator|.
name|HIVE_ORC_MS_FOOTER_CACHE_ENABLED
operator|.
name|varname
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|OrcInputFormatForTest
operator|.
name|clearLocalCache
argument_list|()
expr_stmt|;
name|OrcInputFormat
name|in0
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|originals
init|=
name|in0
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|originals
operator|.
name|length
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|FsWithHash
argument_list|>
name|originalHs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|InputSplit
name|original
range|:
name|originals
control|)
block|{
name|originalHs
operator|.
name|add
argument_list|(
operator|new
name|FsWithHash
argument_list|(
operator|(
name|FileSplit
operator|)
name|original
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Populate the cache.
name|conf
operator|.
name|setBoolean
argument_list|(
name|ConfVars
operator|.
name|HIVE_ORC_MS_FOOTER_CACHE_ENABLED
operator|.
name|varname
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|OrcInputFormatForTest
name|in
init|=
operator|new
name|OrcInputFormatForTest
argument_list|()
decl_stmt|;
name|OrcInputFormatForTest
operator|.
name|clearLocalCache
argument_list|()
expr_stmt|;
name|OrcInputFormatForTest
operator|.
name|caches
operator|.
name|resetCounts
argument_list|()
expr_stmt|;
name|OrcInputFormatForTest
operator|.
name|caches
operator|.
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// Puts, gets, hits, unused, unused.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
name|AtomicInteger
index|[]
name|counts
init|=
block|{
name|in
operator|.
name|caches
operator|.
name|putCount
block|,
name|isPpd
operator|?
name|in
operator|.
name|caches
operator|.
name|getByExprCount
operator|:
name|in
operator|.
name|caches
operator|.
name|getCount
block|,
name|isPpd
operator|?
name|in
operator|.
name|caches
operator|.
name|getHitByExprCount
operator|:
name|in
operator|.
name|caches
operator|.
name|getHitCount
block|,
name|isPpd
operator|?
name|in
operator|.
name|caches
operator|.
name|getCount
operator|:
name|in
operator|.
name|caches
operator|.
name|getByExprCount
block|,
name|isPpd
operator|?
name|in
operator|.
name|caches
operator|.
name|getHitCount
operator|:
name|in
operator|.
name|caches
operator|.
name|getHitByExprCount
block|}
decl_stmt|;
name|verifySplits
argument_list|(
name|originalHs
argument_list|,
name|splits
argument_list|)
expr_stmt|;
name|verifyCallCounts
argument_list|(
name|counts
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|OrcInputFormatForTest
operator|.
name|caches
operator|.
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify we can get from cache.
name|OrcInputFormatForTest
operator|.
name|clearLocalCache
argument_list|()
expr_stmt|;
name|OrcInputFormatForTest
operator|.
name|caches
operator|.
name|resetCounts
argument_list|()
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|verifySplits
argument_list|(
name|originalHs
argument_list|,
name|splits
argument_list|)
expr_stmt|;
name|verifyCallCounts
argument_list|(
name|counts
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Verify ORC SARG still works.
name|OrcInputFormatForTest
operator|.
name|clearLocalCache
argument_list|()
expr_stmt|;
name|OrcInputFormatForTest
operator|.
name|caches
operator|.
name|resetCounts
argument_list|()
expr_stmt|;
name|childExpr
operator|.
name|set
argument_list|(
literal|1
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|filtered
init|=
block|{
name|originals
index|[
literal|0
index|]
block|,
name|originals
index|[
literal|4
index|]
block|,
name|originals
index|[
literal|5
index|]
block|,
name|originals
index|[
literal|9
index|]
block|}
decl_stmt|;
name|originalHs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|InputSplit
name|original
range|:
name|filtered
control|)
block|{
name|originalHs
operator|.
name|add
argument_list|(
operator|new
name|FsWithHash
argument_list|(
operator|(
name|FileSplit
operator|)
name|original
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verifySplits
argument_list|(
name|originalHs
argument_list|,
name|splits
argument_list|)
expr_stmt|;
name|verifyCallCounts
argument_list|(
name|counts
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Verify corrupted cache value gets replaced.
name|OrcInputFormatForTest
operator|.
name|clearLocalCache
argument_list|()
expr_stmt|;
name|OrcInputFormatForTest
operator|.
name|caches
operator|.
name|resetCounts
argument_list|()
expr_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|MockExternalCaches
operator|.
name|MockItem
argument_list|>
name|e
init|=
name|OrcInputFormatForTest
operator|.
name|caches
operator|.
name|cache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|someData
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|ByteBuffer
name|toCorrupt
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|data
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|toCorrupt
operator|.
name|array
argument_list|()
argument_list|,
name|toCorrupt
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|someData
argument_list|,
literal|0
argument_list|,
name|someData
operator|.
name|length
argument_list|)
expr_stmt|;
name|toCorrupt
operator|.
name|putLong
argument_list|(
literal|0
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|splits
operator|=
name|in
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|verifySplits
argument_list|(
name|originalHs
argument_list|,
name|splits
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isPpd
condition|)
block|{
comment|// Recovery is not implemented yet for PPD path.
name|ByteBuffer
name|restored
init|=
name|OrcInputFormatForTest
operator|.
name|caches
operator|.
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|data
decl_stmt|;
name|byte
index|[]
name|newData
init|=
operator|new
name|byte
index|[
name|someData
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|restored
operator|.
name|array
argument_list|()
argument_list|,
name|restored
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|newData
argument_list|,
literal|0
argument_list|,
name|newData
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|someData
argument_list|,
name|newData
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyCallCounts
parameter_list|(
name|AtomicInteger
index|[]
name|counts
parameter_list|,
name|int
name|puts
parameter_list|,
name|int
name|gets
parameter_list|,
name|int
name|hits
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"puts"
argument_list|,
name|puts
argument_list|,
name|counts
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"gets"
argument_list|,
name|gets
argument_list|,
name|counts
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hits"
argument_list|,
name|hits
argument_list|,
name|counts
index|[
literal|2
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unused1"
argument_list|,
literal|0
argument_list|,
name|counts
index|[
literal|3
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unused2"
argument_list|,
literal|0
argument_list|,
name|counts
index|[
literal|4
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifySplits
parameter_list|(
name|HashSet
argument_list|<
name|FsWithHash
argument_list|>
name|originalHs
parameter_list|,
name|InputSplit
index|[]
name|splits
parameter_list|)
block|{
if|if
condition|(
name|originalHs
operator|.
name|size
argument_list|()
operator|!=
name|splits
operator|.
name|length
condition|)
block|{
name|String
name|s
init|=
literal|"Expected ["
decl_stmt|;
for|for
control|(
name|FsWithHash
name|fwh
range|:
name|originalHs
control|)
block|{
name|s
operator|+=
name|toString
argument_list|(
name|fwh
operator|.
name|fs
argument_list|)
operator|+
literal|", "
expr_stmt|;
block|}
name|s
operator|+=
literal|"], actual ["
expr_stmt|;
for|for
control|(
name|InputSplit
name|fs
range|:
name|splits
control|)
block|{
name|s
operator|+=
name|toString
argument_list|(
operator|(
name|FileSplit
operator|)
name|fs
argument_list|)
operator|+
literal|", "
expr_stmt|;
block|}
name|fail
argument_list|(
name|s
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|FileSplit
name|fs
init|=
operator|(
name|FileSplit
operator|)
name|splits
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|originalHs
operator|.
name|contains
argument_list|(
operator|new
name|FsWithHash
argument_list|(
operator|(
name|FileSplit
operator|)
name|splits
index|[
name|i
index|]
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|s
init|=
literal|" in ["
decl_stmt|;
for|for
control|(
name|FsWithHash
name|fwh
range|:
name|originalHs
control|)
block|{
name|s
operator|+=
name|toString
argument_list|(
name|fwh
operator|.
name|fs
argument_list|)
operator|+
literal|", "
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Cannot find "
operator|+
name|toString
argument_list|(
name|fs
argument_list|)
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|FileSplit
name|fs
parameter_list|)
block|{
return|return
literal|"{"
operator|+
name|fs
operator|.
name|getPath
argument_list|()
operator|+
literal|", "
operator|+
name|fs
operator|.
name|getStart
argument_list|()
operator|+
literal|", "
operator|+
name|fs
operator|.
name|getLength
argument_list|()
operator|+
literal|"}"
return|;
block|}
specifier|private
name|void
name|setupExternalCacheConfig
parameter_list|(
name|boolean
name|isPpd
parameter_list|,
name|String
name|paths
parameter_list|)
block|{
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|paths
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|HIVE_ORC_SPLIT_STRATEGY
operator|.
name|varname
argument_list|,
literal|"ETL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMINSPLITSIZE
operator|.
name|varname
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMAXSPLITSIZE
operator|.
name|varname
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ConfVars
operator|.
name|HIVE_ORC_MS_FOOTER_CACHE_PPD
operator|.
name|varname
argument_list|,
name|isPpd
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ConfVars
operator|.
name|HIVEOPTINDEXFILTER
operator|.
name|varname
argument_list|,
name|isPpd
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ObjectInspector
name|createIO
parameter_list|()
block|{
synchronized|synchronized
init|(
name|TestOrcFile
operator|.
name|class
init|)
block|{
return|return
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|AllTypesRow
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|writeFile
parameter_list|(
name|ObjectInspector
name|inspector
parameter_list|,
name|Path
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|conf
argument_list|,
name|inspector
argument_list|,
literal|100000
argument_list|,
name|CompressionKind
operator|.
name|NONE
argument_list|,
literal|10000
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createTestSarg
parameter_list|(
name|ObjectInspector
name|inspector
parameter_list|,
name|GenericUDF
name|udf
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
parameter_list|)
block|{
name|childExpr
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"userid"
argument_list|,
literal|"T"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|childExpr
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.io.filter.expr.serialized"
argument_list|,
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|inspector
argument_list|,
name|udf
argument_list|,
name|childExpr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeData
parameter_list|(
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25000
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|AllTypesRow
argument_list|(
literal|2L
argument_list|,
literal|"foo"
argument_list|,
literal|0.8
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.2"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|5000
condition|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|AllTypesRow
argument_list|(
literal|13L
argument_list|,
literal|"bar"
argument_list|,
literal|80.0
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2.2"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|5000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|10000
condition|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|AllTypesRow
argument_list|(
literal|29L
argument_list|,
literal|"cat"
argument_list|,
literal|8.0
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.3"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|10000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|15000
condition|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|AllTypesRow
argument_list|(
literal|70L
argument_list|,
literal|"dog"
argument_list|,
literal|1.8
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"4.4"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|15000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|20000
condition|)
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|AllTypesRow
argument_list|(
literal|5L
argument_list|,
literal|"eat"
argument_list|,
literal|0.8
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"5.5"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|20000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|addRow
argument_list|(
operator|new
name|AllTypesRow
argument_list|(
literal|100L
argument_list|,
literal|"zebra"
argument_list|,
literal|8.0
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.0"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|250000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

