begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsConstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|metrics2
operator|.
name|CodahaleMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|metrics2
operator|.
name|MetricsReporting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestMetricsQueryLifeTimeHook
block|{
specifier|private
name|MetricsQueryLifeTimeHook
name|hook
decl_stmt|;
specifier|private
name|QueryLifeTimeHookContext
name|ctx
decl_stmt|;
specifier|private
name|MetricRegistry
name|metricRegistry
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_METRICS_CLASS
argument_list|,
name|CodahaleMetrics
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_METRICS_REPORTER
argument_list|,
name|MetricsReporting
operator|.
name|JSON_FILE
operator|.
name|name
argument_list|()
operator|+
literal|","
operator|+
name|MetricsReporting
operator|.
name|JMX
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_METRICS_JSON_FILE_INTERVAL
argument_list|,
literal|"100000s"
argument_list|)
expr_stmt|;
name|MetricsFactory
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|metricRegistry
operator|=
operator|(
operator|(
name|CodahaleMetrics
operator|)
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
operator|)
operator|.
name|getMetricRegistry
argument_list|()
expr_stmt|;
name|hook
operator|=
operator|new
name|MetricsQueryLifeTimeHook
argument_list|()
expr_stmt|;
name|ctx
operator|=
operator|new
name|QueryLifeTimeHookContextImpl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompilationQueryMetric
parameter_list|()
block|{
name|Timer
name|timer
init|=
name|metricRegistry
operator|.
name|getTimers
argument_list|()
operator|.
name|get
argument_list|(
name|MetricsConstant
operator|.
name|HS2_COMPILING_QUERIES
argument_list|)
decl_stmt|;
name|Counter
name|counter
init|=
name|metricRegistry
operator|.
name|getCounters
argument_list|()
operator|.
name|get
argument_list|(
name|MetricsConstant
operator|.
name|ACTIVE_CALLS
operator|+
name|MetricsConstant
operator|.
name|HS2_COMPILING_QUERIES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|timer
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|counter
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|hook
operator|.
name|beforeCompile
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|timer
operator|=
name|metricRegistry
operator|.
name|getTimers
argument_list|()
operator|.
name|get
argument_list|(
name|MetricsConstant
operator|.
name|HS2_COMPILING_QUERIES
argument_list|)
expr_stmt|;
name|counter
operator|=
name|metricRegistry
operator|.
name|getCounters
argument_list|()
operator|.
name|get
argument_list|(
name|MetricsConstant
operator|.
name|ACTIVE_CALLS
operator|+
name|MetricsConstant
operator|.
name|HS2_COMPILING_QUERIES
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timer
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|counter
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|hook
operator|.
name|afterCompile
argument_list|(
name|ctx
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|timer
operator|=
name|metricRegistry
operator|.
name|getTimers
argument_list|()
operator|.
name|get
argument_list|(
name|MetricsConstant
operator|.
name|HS2_COMPILING_QUERIES
argument_list|)
expr_stmt|;
name|counter
operator|=
name|metricRegistry
operator|.
name|getCounters
argument_list|()
operator|.
name|get
argument_list|(
name|MetricsConstant
operator|.
name|ACTIVE_CALLS
operator|+
name|MetricsConstant
operator|.
name|HS2_COMPILING_QUERIES
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timer
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|counter
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExecutionQueryMetric
parameter_list|()
block|{
name|Timer
name|timer
init|=
name|metricRegistry
operator|.
name|getTimers
argument_list|()
operator|.
name|get
argument_list|(
name|MetricsConstant
operator|.
name|HS2_EXECUTING_QUERIES
argument_list|)
decl_stmt|;
name|Counter
name|counter
init|=
name|metricRegistry
operator|.
name|getCounters
argument_list|()
operator|.
name|get
argument_list|(
name|MetricsConstant
operator|.
name|ACTIVE_CALLS
operator|+
name|MetricsConstant
operator|.
name|HS2_EXECUTING_QUERIES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|timer
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|counter
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|hook
operator|.
name|beforeExecution
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|timer
operator|=
name|metricRegistry
operator|.
name|getTimers
argument_list|()
operator|.
name|get
argument_list|(
name|MetricsConstant
operator|.
name|HS2_EXECUTING_QUERIES
argument_list|)
expr_stmt|;
name|counter
operator|=
name|metricRegistry
operator|.
name|getCounters
argument_list|()
operator|.
name|get
argument_list|(
name|MetricsConstant
operator|.
name|ACTIVE_CALLS
operator|+
name|MetricsConstant
operator|.
name|HS2_EXECUTING_QUERIES
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timer
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|counter
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|hook
operator|.
name|afterExecution
argument_list|(
name|ctx
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|timer
operator|=
name|metricRegistry
operator|.
name|getTimers
argument_list|()
operator|.
name|get
argument_list|(
name|MetricsConstant
operator|.
name|HS2_EXECUTING_QUERIES
argument_list|)
expr_stmt|;
name|counter
operator|=
name|metricRegistry
operator|.
name|getCounters
argument_list|()
operator|.
name|get
argument_list|(
name|MetricsConstant
operator|.
name|ACTIVE_CALLS
operator|+
name|MetricsConstant
operator|.
name|HS2_EXECUTING_QUERIES
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timer
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|counter
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoErrorOnDisabledMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|MetricsFactory
operator|.
name|close
argument_list|()
expr_stmt|;
name|MetricsQueryLifeTimeHook
name|emptyhook
init|=
operator|new
name|MetricsQueryLifeTimeHook
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|emptyhook
operator|.
name|beforeCompile
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|emptyhook
operator|.
name|afterCompile
argument_list|(
name|ctx
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|emptyhook
operator|.
name|beforeExecution
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|emptyhook
operator|.
name|afterExecution
argument_list|(
name|ctx
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

