begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Minimal tests for AddToClassPathAction class. Most of the tests don't use  * {@link java.security.AccessController#doPrivileged(java.security.PrivilegedAction)},  * presumably the tests will not be executed under security manager.  */
end_comment

begin_class
specifier|public
class|class
name|TestAddToClassPathAction
block|{
specifier|private
name|ClassLoader
name|originalClassLoader
decl_stmt|;
specifier|private
specifier|static
name|void
name|assertURLsMatch
parameter_list|(
name|String
name|message
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|expected
parameter_list|,
name|URL
index|[]
name|actual
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|actualStrings
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|actual
argument_list|)
operator|.
name|map
argument_list|(
name|URL
operator|::
name|toExternalForm
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|message
argument_list|,
name|expected
argument_list|,
name|actualStrings
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertURLsMatch
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|expected
parameter_list|,
name|URL
index|[]
name|actual
parameter_list|)
block|{
name|assertURLsMatch
argument_list|(
literal|""
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|saveClassLoader
parameter_list|()
block|{
name|originalClassLoader
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|restoreClassLoader
parameter_list|()
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|originalClassLoader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullClassLoader
parameter_list|()
block|{
try|try
block|{
operator|new
name|AddToClassPathAction
argument_list|(
literal|null
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"When pafrent class loader is null, IllegalArgumentException is expected!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// pass
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullPaths
parameter_list|()
block|{
name|ClassLoader
name|rootLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|AddToClassPathAction
name|action
init|=
operator|new
name|AddToClassPathAction
argument_list|(
name|rootLoader
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|UDFClassLoader
name|childLoader
init|=
name|action
operator|.
name|run
argument_list|()
decl_stmt|;
name|assertURLsMatch
argument_list|(
literal|"When newPaths is null, loader shall be created normally with no extra paths."
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|childLoader
operator|.
name|getURLs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUseExisting
parameter_list|()
block|{
name|ClassLoader
name|rootLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|AddToClassPathAction
name|action1
init|=
operator|new
name|AddToClassPathAction
argument_list|(
name|rootLoader
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/a/1"
argument_list|,
literal|"/c/3"
argument_list|)
argument_list|)
decl_stmt|;
name|UDFClassLoader
name|parentLoader
init|=
name|action1
operator|.
name|run
argument_list|()
decl_stmt|;
name|AddToClassPathAction
name|action2
init|=
operator|new
name|AddToClassPathAction
argument_list|(
name|parentLoader
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/b/2"
argument_list|,
literal|"/d/4"
argument_list|)
argument_list|)
decl_stmt|;
name|UDFClassLoader
name|childLoader
init|=
name|action2
operator|.
name|run
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
literal|"Normally, the existing class loader should be reused (not closed, no force new)."
argument_list|,
name|parentLoader
argument_list|,
name|childLoader
argument_list|)
expr_stmt|;
name|assertURLsMatch
argument_list|(
literal|"The class path of the class loader should be updated."
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"file:/a/1"
argument_list|,
literal|"file:/c/3"
argument_list|,
literal|"file:/b/2"
argument_list|,
literal|"file:/d/4"
argument_list|)
argument_list|,
name|childLoader
operator|.
name|getURLs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClosed
parameter_list|()
throws|throws
name|IOException
block|{
name|ClassLoader
name|rootLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|AddToClassPathAction
name|action1
init|=
operator|new
name|AddToClassPathAction
argument_list|(
name|rootLoader
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/a/1"
argument_list|,
literal|"/c/3"
argument_list|)
argument_list|)
decl_stmt|;
name|UDFClassLoader
name|parentLoader
init|=
name|action1
operator|.
name|run
argument_list|()
decl_stmt|;
name|parentLoader
operator|.
name|close
argument_list|()
expr_stmt|;
name|AddToClassPathAction
name|action2
init|=
operator|new
name|AddToClassPathAction
argument_list|(
name|parentLoader
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/b/2"
argument_list|,
literal|"/d/4"
argument_list|)
argument_list|)
decl_stmt|;
name|UDFClassLoader
name|childLoader
init|=
name|action2
operator|.
name|run
argument_list|()
decl_stmt|;
name|assertNotSame
argument_list|(
literal|"When the parent class loader is closed, a new instance must be created."
argument_list|,
name|parentLoader
argument_list|,
name|childLoader
argument_list|)
expr_stmt|;
name|assertURLsMatch
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"file:/b/2"
argument_list|,
literal|"file:/d/4"
argument_list|)
argument_list|,
name|childLoader
operator|.
name|getURLs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testForceNew
parameter_list|()
block|{
name|ClassLoader
name|rootLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|AddToClassPathAction
name|action1
init|=
operator|new
name|AddToClassPathAction
argument_list|(
name|rootLoader
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/a/1"
argument_list|,
literal|"/c/3"
argument_list|)
argument_list|)
decl_stmt|;
name|UDFClassLoader
name|parentLoader
init|=
name|action1
operator|.
name|run
argument_list|()
decl_stmt|;
name|AddToClassPathAction
name|action2
init|=
operator|new
name|AddToClassPathAction
argument_list|(
name|parentLoader
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/b/2"
argument_list|,
literal|"/d/4"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|UDFClassLoader
name|childLoader
init|=
name|action2
operator|.
name|run
argument_list|()
decl_stmt|;
name|assertNotSame
argument_list|(
literal|"When forceNewClassLoader is set, a new instance must be created."
argument_list|,
name|parentLoader
argument_list|,
name|childLoader
argument_list|)
expr_stmt|;
name|assertURLsMatch
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"file:/b/2"
argument_list|,
literal|"file:/d/4"
argument_list|)
argument_list|,
name|childLoader
operator|.
name|getURLs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLegalPaths
parameter_list|()
block|{
name|ClassLoader
name|rootLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|newPaths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"file://a/aa"
argument_list|,
literal|"c/cc"
argument_list|,
literal|"/bb/b"
argument_list|)
decl_stmt|;
name|String
name|userDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedURLs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"file://a/aa"
argument_list|,
literal|"file:"
operator|+
name|userDir
operator|+
literal|"/c/cc"
argument_list|,
literal|"file:/bb/b"
argument_list|)
decl_stmt|;
name|AddToClassPathAction
name|action
init|=
operator|new
name|AddToClassPathAction
argument_list|(
name|rootLoader
argument_list|,
name|newPaths
argument_list|)
decl_stmt|;
name|UDFClassLoader
name|loader
init|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|assertURLsMatch
argument_list|(
name|expectedURLs
argument_list|,
name|loader
operator|.
name|getURLs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

