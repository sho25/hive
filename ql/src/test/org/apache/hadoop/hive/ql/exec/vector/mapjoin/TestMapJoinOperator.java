begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinBytesTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinObjectSerDeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainerSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|collectoroperator
operator|.
name|CollectorTestOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|collectoroperator
operator|.
name|CountCollectorTestOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|collectoroperator
operator|.
name|CountVectorCollectorTestOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|collectoroperator
operator|.
name|RowCollectorTestOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|collectoroperator
operator|.
name|RowCollectorTestOperatorBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|collectoroperator
operator|.
name|RowVectorCollectorTestOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|rowobjects
operator|.
name|RowTestObjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|rowobjects
operator|.
name|RowTestObjectsMultiSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorBatchDebug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorColumnOutputMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorColumnSourceMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExtractRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorMapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorMapJoinOuterFilteredOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorRandomRowSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedBatchUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatchCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|batchgen
operator|.
name|VectorBatchGenerateStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|batchgen
operator|.
name|VectorBatchGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|batchgen
operator|.
name|VectorBatchGenerator
operator|.
name|GenerateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|batchgen
operator|.
name|VectorBatchGenerator
operator|.
name|GenerateType
operator|.
name|GenerateCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|MapJoinTestConfig
operator|.
name|MapJoinTestImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|MapJoinTestDescription
operator|.
name|SmallTableGenerationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
operator|.
name|VectorMapJoinFastMultiKeyHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
operator|.
name|VectorMapJoinFastTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
operator|.
name|VerifyFastRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinCondDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableImplementationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableKeyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|VectorMapJoinVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|fast
operator|.
name|BinarySortableSerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|fast
operator|.
name|LazyBinarySerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HashCodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_class
specifier|public
class|class
name|TestMapJoinOperator
block|{
comment|/*    * This test collector operator is for MapJoin row-mode.    */
specifier|private
class|class
name|TestMultiSetCollectorOperator
extends|extends
name|RowCollectorTestOperator
block|{
specifier|private
specifier|final
name|RowTestObjectsMultiSet
name|testRowMultiSet
decl_stmt|;
specifier|public
name|TestMultiSetCollectorOperator
parameter_list|(
name|ObjectInspector
index|[]
name|outputObjectInspectors
parameter_list|,
name|RowTestObjectsMultiSet
name|testRowMultiSet
parameter_list|)
block|{
name|super
argument_list|(
name|outputObjectInspectors
argument_list|)
expr_stmt|;
name|this
operator|.
name|testRowMultiSet
operator|=
name|testRowMultiSet
expr_stmt|;
block|}
specifier|public
name|RowTestObjectsMultiSet
name|getTestRowMultiSet
parameter_list|()
block|{
return|return
name|testRowMultiSet
return|;
block|}
specifier|public
name|void
name|nextTestRow
parameter_list|(
name|RowTestObjects
name|testRow
parameter_list|)
block|{
name|testRowMultiSet
operator|.
name|add
argument_list|(
name|testRow
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|TestMultiSetCollectorOperator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
specifier|private
class|class
name|TestMultiSetVectorCollectorOperator
extends|extends
name|RowVectorCollectorTestOperator
block|{
specifier|private
specifier|final
name|RowTestObjectsMultiSet
name|testRowMultiSet
decl_stmt|;
specifier|public
name|RowTestObjectsMultiSet
name|getTestRowMultiSet
parameter_list|()
block|{
return|return
name|testRowMultiSet
return|;
block|}
specifier|public
name|TestMultiSetVectorCollectorOperator
parameter_list|(
name|TypeInfo
index|[]
name|outputTypeInfos
parameter_list|,
name|ObjectInspector
index|[]
name|outputObjectInspectors
parameter_list|,
name|RowTestObjectsMultiSet
name|testRowMultiSet
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
argument_list|(
name|outputTypeInfos
argument_list|,
name|outputObjectInspectors
argument_list|)
expr_stmt|;
name|this
operator|.
name|testRowMultiSet
operator|=
name|testRowMultiSet
expr_stmt|;
block|}
specifier|public
name|void
name|nextTestRow
parameter_list|(
name|RowTestObjects
name|testRow
parameter_list|)
block|{
name|testRowMultiSet
operator|.
name|add
argument_list|(
name|testRow
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|TestMultiSetVectorCollectorOperator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|KeyConfig
block|{
name|long
name|seed
decl_stmt|;
name|PrimitiveTypeInfo
name|primitiveTypeInfo
decl_stmt|;
name|KeyConfig
parameter_list|(
name|long
name|seed
parameter_list|,
name|PrimitiveTypeInfo
name|primitiveTypeInfo
parameter_list|)
block|{
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
name|this
operator|.
name|primitiveTypeInfo
operator|=
name|primitiveTypeInfo
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|KeyConfig
index|[]
name|longKeyConfigs
init|=
operator|new
name|KeyConfig
index|[]
block|{
operator|new
name|KeyConfig
argument_list|(
literal|234882L
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
block|,
operator|new
name|KeyConfig
argument_list|(
literal|4600L
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
block|,
operator|new
name|KeyConfig
argument_list|(
literal|98743L
argument_list|,
name|TypeInfoFactory
operator|.
name|shortTypeInfo
argument_list|)
block|}
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testLong
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|KeyConfig
name|longKeyConfig
range|:
name|longKeyConfigs
control|)
block|{
for|for
control|(
name|VectorMapJoinVariation
name|vectorMapJoinVariation
range|:
name|VectorMapJoinVariation
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|vectorMapJoinVariation
operator|==
name|VectorMapJoinVariation
operator|.
name|NONE
condition|)
block|{
continue|continue;
block|}
name|doTestLong
argument_list|(
name|longKeyConfig
operator|.
name|seed
argument_list|,
name|longKeyConfig
operator|.
name|primitiveTypeInfo
argument_list|,
name|vectorMapJoinVariation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|doTestLong
parameter_list|(
name|long
name|seed
parameter_list|,
name|TypeInfo
name|numberTypeInfo
parameter_list|,
name|VectorMapJoinVariation
name|vectorMapJoinVariation
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|rowCount
init|=
literal|10000
decl_stmt|;
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|String
index|[]
name|bigTableColumnNames
init|=
operator|new
name|String
index|[]
block|{
literal|"number1"
block|}
decl_stmt|;
name|TypeInfo
index|[]
name|bigTableTypeInfos
init|=
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|longTypeInfo
block|}
decl_stmt|;
name|int
index|[]
name|bigTableKeyColumnNums
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|}
decl_stmt|;
name|String
index|[]
name|smallTableValueColumnNames
init|=
operator|new
name|String
index|[]
block|{
literal|"sv1"
block|,
literal|"sv2"
block|}
decl_stmt|;
name|TypeInfo
index|[]
name|smallTableValueTypeInfos
init|=
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|dateTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|}
decl_stmt|;
name|int
index|[]
name|bigTableRetainColumnNums
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|}
decl_stmt|;
name|int
index|[]
name|smallTableRetainKeyColumnNums
init|=
operator|new
name|int
index|[]
block|{}
decl_stmt|;
name|int
index|[]
name|smallTableRetainValueColumnNums
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
decl_stmt|;
name|SmallTableGenerationParameters
name|smallTableGenerationParameters
init|=
operator|new
name|SmallTableGenerationParameters
argument_list|()
decl_stmt|;
comment|//----------------------------------------------------------------------------------------------
name|MapJoinTestDescription
name|testDesc
init|=
operator|new
name|MapJoinTestDescription
argument_list|(
name|hiveConf
argument_list|,
name|vectorMapJoinVariation
argument_list|,
name|bigTableColumnNames
argument_list|,
name|bigTableTypeInfos
argument_list|,
name|bigTableKeyColumnNums
argument_list|,
name|smallTableValueColumnNames
argument_list|,
name|smallTableValueTypeInfos
argument_list|,
name|bigTableRetainColumnNums
argument_list|,
name|smallTableRetainKeyColumnNums
argument_list|,
name|smallTableRetainValueColumnNums
argument_list|,
name|smallTableGenerationParameters
argument_list|)
decl_stmt|;
comment|// Prepare data.  Good for ANY implementation variation.
name|MapJoinTestData
name|testData
init|=
operator|new
name|MapJoinTestData
argument_list|(
name|rowCount
argument_list|,
name|testDesc
argument_list|,
name|seed
argument_list|,
name|seed
operator|*
literal|10
argument_list|)
decl_stmt|;
name|executeTest
argument_list|(
name|testDesc
argument_list|,
name|testData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiKey
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|seed
init|=
literal|87543
decl_stmt|;
for|for
control|(
name|VectorMapJoinVariation
name|vectorMapJoinVariation
range|:
name|VectorMapJoinVariation
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|vectorMapJoinVariation
operator|==
name|VectorMapJoinVariation
operator|.
name|NONE
condition|)
block|{
continue|continue;
block|}
name|doTestMultiKey
argument_list|(
name|seed
argument_list|,
name|vectorMapJoinVariation
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doTestMultiKey
parameter_list|(
name|long
name|seed
parameter_list|,
name|VectorMapJoinVariation
name|vectorMapJoinVariation
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|rowCount
init|=
literal|10000
decl_stmt|;
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|String
index|[]
name|bigTableColumnNames
init|=
operator|new
name|String
index|[]
block|{
literal|"b1"
block|,
literal|"b2"
block|,
literal|"b3"
block|}
decl_stmt|;
name|TypeInfo
index|[]
name|bigTableTypeInfos
init|=
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|intTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|}
decl_stmt|;
name|int
index|[]
name|bigTableKeyColumnNums
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|String
index|[]
name|smallTableValueColumnNames
init|=
operator|new
name|String
index|[]
block|{
literal|"sv1"
block|}
decl_stmt|;
name|TypeInfo
index|[]
name|smallTableValueTypeInfos
init|=
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|}
decl_stmt|;
name|int
index|[]
name|bigTableRetainColumnNums
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|int
index|[]
name|smallTableRetainKeyColumnNums
init|=
operator|new
name|int
index|[]
block|{}
decl_stmt|;
name|int
index|[]
name|smallTableRetainValueColumnNums
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|}
decl_stmt|;
name|SmallTableGenerationParameters
name|smallTableGenerationParameters
init|=
operator|new
name|SmallTableGenerationParameters
argument_list|()
decl_stmt|;
comment|//----------------------------------------------------------------------------------------------
name|MapJoinTestDescription
name|testDesc
init|=
operator|new
name|MapJoinTestDescription
argument_list|(
name|hiveConf
argument_list|,
name|vectorMapJoinVariation
argument_list|,
name|bigTableColumnNames
argument_list|,
name|bigTableTypeInfos
argument_list|,
name|bigTableKeyColumnNums
argument_list|,
name|smallTableValueColumnNames
argument_list|,
name|smallTableValueTypeInfos
argument_list|,
name|bigTableRetainColumnNums
argument_list|,
name|smallTableRetainKeyColumnNums
argument_list|,
name|smallTableRetainValueColumnNums
argument_list|,
name|smallTableGenerationParameters
argument_list|)
decl_stmt|;
comment|// Prepare data.  Good for ANY implementation variation.
name|MapJoinTestData
name|testData
init|=
operator|new
name|MapJoinTestData
argument_list|(
name|rowCount
argument_list|,
name|testDesc
argument_list|,
name|seed
argument_list|,
name|seed
operator|*
literal|10
argument_list|)
decl_stmt|;
name|executeTest
argument_list|(
name|testDesc
argument_list|,
name|testData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testString
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|seed
init|=
literal|87543
decl_stmt|;
for|for
control|(
name|VectorMapJoinVariation
name|vectorMapJoinVariation
range|:
name|VectorMapJoinVariation
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|vectorMapJoinVariation
operator|==
name|VectorMapJoinVariation
operator|.
name|NONE
condition|)
block|{
continue|continue;
block|}
name|doTestString
argument_list|(
name|seed
argument_list|,
name|vectorMapJoinVariation
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doTestString
parameter_list|(
name|long
name|seed
parameter_list|,
name|VectorMapJoinVariation
name|vectorMapJoinVariation
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|rowCount
init|=
literal|10000
decl_stmt|;
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|String
index|[]
name|bigTableColumnNames
init|=
operator|new
name|String
index|[]
block|{
literal|"b1"
block|}
decl_stmt|;
name|TypeInfo
index|[]
name|bigTableTypeInfos
init|=
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|}
decl_stmt|;
name|int
index|[]
name|bigTableKeyColumnNums
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|}
decl_stmt|;
name|String
index|[]
name|smallTableValueColumnNames
init|=
operator|new
name|String
index|[]
block|{
literal|"sv1"
block|,
literal|"sv2"
block|}
decl_stmt|;
name|TypeInfo
index|[]
name|smallTableValueTypeInfos
init|=
operator|new
name|TypeInfo
index|[]
block|{
name|TypeInfoFactory
operator|.
name|dateTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
block|}
decl_stmt|;
name|int
index|[]
name|bigTableRetainColumnNums
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|}
decl_stmt|;
name|int
index|[]
name|smallTableRetainKeyColumnNums
init|=
operator|new
name|int
index|[]
block|{}
decl_stmt|;
name|int
index|[]
name|smallTableRetainValueColumnNums
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
decl_stmt|;
name|SmallTableGenerationParameters
name|smallTableGenerationParameters
init|=
operator|new
name|SmallTableGenerationParameters
argument_list|()
decl_stmt|;
comment|//----------------------------------------------------------------------------------------------
name|MapJoinTestDescription
name|testDesc
init|=
operator|new
name|MapJoinTestDescription
argument_list|(
name|hiveConf
argument_list|,
name|vectorMapJoinVariation
argument_list|,
name|bigTableColumnNames
argument_list|,
name|bigTableTypeInfos
argument_list|,
name|bigTableKeyColumnNums
argument_list|,
name|smallTableValueColumnNames
argument_list|,
name|smallTableValueTypeInfos
argument_list|,
name|bigTableRetainColumnNums
argument_list|,
name|smallTableRetainKeyColumnNums
argument_list|,
name|smallTableRetainValueColumnNums
argument_list|,
name|smallTableGenerationParameters
argument_list|)
decl_stmt|;
comment|// Prepare data.  Good for ANY implementation variation.
name|MapJoinTestData
name|testData
init|=
operator|new
name|MapJoinTestData
argument_list|(
name|rowCount
argument_list|,
name|testDesc
argument_list|,
name|seed
argument_list|,
name|seed
operator|*
literal|10
argument_list|)
decl_stmt|;
name|executeTest
argument_list|(
name|testDesc
argument_list|,
name|testData
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addBigTableRetained
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|Object
index|[]
name|bigTableRowObjects
parameter_list|,
name|Object
index|[]
name|outputObjects
parameter_list|)
block|{
specifier|final
name|int
name|bigTableRetainColumnNumsLength
init|=
name|testDesc
operator|.
name|bigTableRetainColumnNums
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|o
init|=
literal|0
init|;
name|o
operator|<
name|bigTableRetainColumnNumsLength
condition|;
name|o
operator|++
control|)
block|{
name|outputObjects
index|[
name|o
index|]
operator|=
name|bigTableRowObjects
index|[
name|testDesc
operator|.
name|bigTableRetainColumnNums
index|[
name|o
index|]
index|]
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addToOutput
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|RowTestObjectsMultiSet
name|expectedTestRowMultiSet
parameter_list|,
name|Object
index|[]
name|outputObjects
parameter_list|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|outputObjects
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
name|PrimitiveObjectInspector
name|primitiveObjInsp
init|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|testDesc
operator|.
name|outputObjectInspectors
index|[
name|c
index|]
operator|)
decl_stmt|;
name|Object
name|outputObject
init|=
name|outputObjects
index|[
name|c
index|]
decl_stmt|;
name|outputObjects
index|[
name|c
index|]
operator|=
name|primitiveObjInsp
operator|.
name|copyObject
argument_list|(
name|outputObject
argument_list|)
expr_stmt|;
block|}
name|expectedTestRowMultiSet
operator|.
name|add
argument_list|(
operator|new
name|RowTestObjects
argument_list|(
name|outputObjects
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Simulate the join by driving the test big table data by our test small table HashMap and    * create the expected output as a multi-set of TestRow (i.e. TestRow and occurrence count).    */
specifier|private
name|RowTestObjectsMultiSet
name|createExpectedTestRowMultiSet
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|)
throws|throws
name|HiveException
block|{
name|RowTestObjectsMultiSet
name|expectedTestRowMultiSet
init|=
operator|new
name|RowTestObjectsMultiSet
argument_list|()
decl_stmt|;
name|VectorExtractRow
name|vectorExtractRow
init|=
operator|new
name|VectorExtractRow
argument_list|()
decl_stmt|;
name|vectorExtractRow
operator|.
name|init
argument_list|(
name|testDesc
operator|.
name|bigTableKeyTypeInfos
argument_list|)
expr_stmt|;
specifier|final
name|int
name|bigTableColumnCount
init|=
name|testDesc
operator|.
name|bigTableTypeInfos
operator|.
name|length
decl_stmt|;
name|Object
index|[]
name|bigTableRowObjects
init|=
operator|new
name|Object
index|[
name|bigTableColumnCount
index|]
decl_stmt|;
specifier|final
name|int
name|bigTableKeyColumnCount
init|=
name|testDesc
operator|.
name|bigTableKeyTypeInfos
operator|.
name|length
decl_stmt|;
name|Object
index|[]
name|bigTableKeyObjects
init|=
operator|new
name|Object
index|[
name|bigTableKeyColumnCount
index|]
decl_stmt|;
name|VectorBatchGenerateStream
name|bigTableBatchStream
init|=
name|testData
operator|.
name|getBigTableBatchStream
argument_list|()
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|testData
operator|.
name|getBigTableBatch
argument_list|()
decl_stmt|;
name|bigTableBatchStream
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|bigTableBatchStream
operator|.
name|isNext
argument_list|()
condition|)
block|{
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
name|bigTableBatchStream
operator|.
name|fillNext
argument_list|(
name|batch
argument_list|)
expr_stmt|;
specifier|final
name|int
name|size
init|=
name|testData
operator|.
name|bigTableBatch
operator|.
name|size
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
name|r
operator|++
control|)
block|{
name|vectorExtractRow
operator|.
name|extractRow
argument_list|(
name|testData
operator|.
name|bigTableBatch
argument_list|,
name|r
argument_list|,
name|bigTableRowObjects
argument_list|)
expr_stmt|;
comment|// Form key object array
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|bigTableKeyColumnCount
condition|;
name|k
operator|++
control|)
block|{
name|int
name|keyColumnNum
init|=
name|testDesc
operator|.
name|bigTableKeyColumnNums
index|[
name|k
index|]
decl_stmt|;
name|bigTableKeyObjects
index|[
name|k
index|]
operator|=
name|bigTableRowObjects
index|[
name|keyColumnNum
index|]
expr_stmt|;
name|bigTableKeyObjects
index|[
name|k
index|]
operator|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|testDesc
operator|.
name|bigTableObjectInspectors
index|[
name|keyColumnNum
index|]
operator|)
operator|.
name|copyObject
argument_list|(
name|bigTableKeyObjects
index|[
name|k
index|]
argument_list|)
expr_stmt|;
block|}
name|RowTestObjects
name|testKey
init|=
operator|new
name|RowTestObjects
argument_list|(
name|bigTableKeyObjects
argument_list|)
decl_stmt|;
if|if
condition|(
name|testData
operator|.
name|smallTableKeyHashMap
operator|.
name|containsKey
argument_list|(
name|testKey
argument_list|)
condition|)
block|{
name|int
name|smallTableKeyIndex
init|=
name|testData
operator|.
name|smallTableKeyHashMap
operator|.
name|get
argument_list|(
name|testKey
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|testDesc
operator|.
name|vectorMapJoinVariation
condition|)
block|{
case|case
name|INNER
case|:
case|case
name|OUTER
case|:
block|{
comment|// One row per value.
name|ArrayList
argument_list|<
name|RowTestObjects
argument_list|>
name|valueList
init|=
name|testData
operator|.
name|smallTableValues
operator|.
name|get
argument_list|(
name|smallTableKeyIndex
argument_list|)
decl_stmt|;
specifier|final
name|int
name|valueCount
init|=
name|valueList
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|valueCount
condition|;
name|v
operator|++
control|)
block|{
name|Object
index|[]
name|outputObjects
init|=
operator|new
name|Object
index|[
name|testDesc
operator|.
name|outputColumnNames
operator|.
name|length
index|]
decl_stmt|;
name|addBigTableRetained
argument_list|(
name|testDesc
argument_list|,
name|bigTableRowObjects
argument_list|,
name|outputObjects
argument_list|)
expr_stmt|;
name|Object
index|[]
name|valueRow
init|=
name|valueList
operator|.
name|get
argument_list|(
name|v
argument_list|)
operator|.
name|getRow
argument_list|()
decl_stmt|;
specifier|final
name|int
name|bigTableRetainColumnNumsLength
init|=
name|testDesc
operator|.
name|bigTableRetainColumnNums
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|smallTableRetainValueColumnNumsLength
init|=
name|testDesc
operator|.
name|smallTableRetainValueColumnNums
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|o
init|=
literal|0
init|;
name|o
operator|<
name|smallTableRetainValueColumnNumsLength
condition|;
name|o
operator|++
control|)
block|{
name|outputObjects
index|[
name|bigTableRetainColumnNumsLength
operator|+
name|o
index|]
operator|=
name|valueRow
index|[
name|testDesc
operator|.
name|smallTableRetainValueColumnNums
index|[
name|o
index|]
index|]
expr_stmt|;
block|}
name|addToOutput
argument_list|(
name|testDesc
argument_list|,
name|expectedTestRowMultiSet
argument_list|,
name|outputObjects
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INNER_BIG_ONLY
case|:
block|{
comment|// Value count rows.
specifier|final
name|int
name|valueCount
init|=
name|testData
operator|.
name|smallTableValueCounts
operator|.
name|get
argument_list|(
name|smallTableKeyIndex
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|valueCount
condition|;
name|v
operator|++
control|)
block|{
name|Object
index|[]
name|outputObjects
init|=
operator|new
name|Object
index|[
name|testDesc
operator|.
name|outputColumnNames
operator|.
name|length
index|]
decl_stmt|;
name|addBigTableRetained
argument_list|(
name|testDesc
argument_list|,
name|bigTableRowObjects
argument_list|,
name|outputObjects
argument_list|)
expr_stmt|;
name|addToOutput
argument_list|(
name|testDesc
argument_list|,
name|expectedTestRowMultiSet
argument_list|,
name|outputObjects
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|LEFT_SEMI
case|:
block|{
comment|// One row (existence).
name|Object
index|[]
name|outputObjects
init|=
operator|new
name|Object
index|[
name|testDesc
operator|.
name|outputColumnNames
operator|.
name|length
index|]
decl_stmt|;
name|addBigTableRetained
argument_list|(
name|testDesc
argument_list|,
name|bigTableRowObjects
argument_list|,
name|outputObjects
argument_list|)
expr_stmt|;
name|addToOutput
argument_list|(
name|testDesc
argument_list|,
name|expectedTestRowMultiSet
argument_list|,
name|outputObjects
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown operator variation "
operator|+
name|testDesc
operator|.
name|vectorMapJoinVariation
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// No match.
if|if
condition|(
name|testDesc
operator|.
name|vectorMapJoinVariation
operator|==
name|VectorMapJoinVariation
operator|.
name|OUTER
condition|)
block|{
comment|// We need to add a non-match row with nulls for small table values.
name|Object
index|[]
name|outputObjects
init|=
operator|new
name|Object
index|[
name|testDesc
operator|.
name|outputColumnNames
operator|.
name|length
index|]
decl_stmt|;
name|addBigTableRetained
argument_list|(
name|testDesc
argument_list|,
name|bigTableRowObjects
argument_list|,
name|outputObjects
argument_list|)
expr_stmt|;
specifier|final
name|int
name|bigTableRetainColumnNumsLength
init|=
name|testDesc
operator|.
name|bigTableRetainColumnNums
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|smallTableRetainValueColumnNumsLength
init|=
name|testDesc
operator|.
name|smallTableRetainValueColumnNums
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|o
init|=
literal|0
init|;
name|o
operator|<
name|smallTableRetainValueColumnNumsLength
condition|;
name|o
operator|++
control|)
block|{
name|outputObjects
index|[
name|bigTableRetainColumnNumsLength
operator|+
name|o
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|addToOutput
argument_list|(
name|testDesc
argument_list|,
name|expectedTestRowMultiSet
argument_list|,
name|outputObjects
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|expectedTestRowMultiSet
return|;
block|}
specifier|private
name|void
name|executeTest
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|)
throws|throws
name|Exception
block|{
name|RowTestObjectsMultiSet
name|expectedTestRowMultiSet
init|=
name|createExpectedTestRowMultiSet
argument_list|(
name|testDesc
argument_list|,
name|testData
argument_list|)
decl_stmt|;
comment|// UNDONE: Inner count
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*BENCHMARK* expectedTestRowMultiSet rowCount "
operator|+
name|expectedTestRowMultiSet
operator|.
name|getRowCount
argument_list|()
operator|+
literal|" totalCount "
operator|+
name|expectedTestRowMultiSet
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Execute all implementation variations.
for|for
control|(
name|MapJoinTestImplementation
name|mapJoinImplementation
range|:
name|MapJoinTestImplementation
operator|.
name|values
argument_list|()
control|)
block|{
name|executeTestImplementation
argument_list|(
name|mapJoinImplementation
argument_list|,
name|testDesc
argument_list|,
name|testData
argument_list|,
name|expectedTestRowMultiSet
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isVectorOutput
parameter_list|(
name|MapJoinTestImplementation
name|mapJoinImplementation
parameter_list|)
block|{
return|return
operator|(
name|mapJoinImplementation
operator|!=
name|MapJoinTestImplementation
operator|.
name|ROW_MODE_HASH_MAP
operator|&&
name|mapJoinImplementation
operator|!=
name|MapJoinTestImplementation
operator|.
name|ROW_MODE_OPTIMIZED
operator|)
return|;
block|}
specifier|private
name|void
name|executeTestImplementation
parameter_list|(
name|MapJoinTestImplementation
name|mapJoinImplementation
parameter_list|,
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|,
name|RowTestObjectsMultiSet
name|expectedTestRowMultiSet
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*BENCHMARK* Starting "
operator|+
name|mapJoinImplementation
operator|+
literal|" test"
argument_list|)
expr_stmt|;
comment|// UNDONE: Parameterize for implementation variation?
name|MapJoinDesc
name|mapJoinDesc
init|=
name|MapJoinTestConfig
operator|.
name|createMapJoinDesc
argument_list|(
name|testDesc
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isVectorOutput
init|=
name|isVectorOutput
argument_list|(
name|mapJoinImplementation
argument_list|)
decl_stmt|;
name|RowTestObjectsMultiSet
name|outputTestRowMultiSet
init|=
operator|new
name|RowTestObjectsMultiSet
argument_list|()
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|testCollectorOperator
init|=
operator|(
operator|!
name|isVectorOutput
condition|?
operator|new
name|TestMultiSetCollectorOperator
argument_list|(
name|testDesc
operator|.
name|outputObjectInspectors
argument_list|,
name|outputTestRowMultiSet
argument_list|)
else|:
operator|new
name|TestMultiSetVectorCollectorOperator
argument_list|(
name|testDesc
operator|.
name|outputTypeInfos
argument_list|,
name|testDesc
operator|.
name|outputObjectInspectors
argument_list|,
name|outputTestRowMultiSet
argument_list|)
operator|)
decl_stmt|;
name|MapJoinOperator
name|operator
init|=
name|MapJoinTestConfig
operator|.
name|createMapJoinImplementation
argument_list|(
name|mapJoinImplementation
argument_list|,
name|testDesc
argument_list|,
name|testCollectorOperator
argument_list|,
name|testData
argument_list|,
name|mapJoinDesc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isVectorOutput
condition|)
block|{
name|MapJoinTestData
operator|.
name|driveBigTableData
argument_list|(
name|testDesc
argument_list|,
name|testData
argument_list|,
name|operator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MapJoinTestData
operator|.
name|driveVectorBigTableData
argument_list|(
name|testDesc
argument_list|,
name|testData
argument_list|,
name|operator
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*BENCHMARK* executeTestImplementation row count "
operator|+
operator|(
operator|(
name|CountCollectorTestOperator
operator|)
name|testCollectorOperator
operator|)
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify the output!
if|if
condition|(
operator|!
name|expectedTestRowMultiSet
operator|.
name|verify
argument_list|(
name|outputTestRowMultiSet
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*BENCHMARK* verify failed for "
operator|+
name|mapJoinImplementation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*BENCHMARK* verify succeeded for "
operator|+
name|mapJoinImplementation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

