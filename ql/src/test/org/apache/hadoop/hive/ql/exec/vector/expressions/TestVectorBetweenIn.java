begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|DataTypePhysicalVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExpressionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExtractRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorRandomBatchSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorRandomRowSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatchCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorRandomRowSource
operator|.
name|GenerationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorRandomRowSource
operator|.
name|SupportedTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IdentityExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|TestVectorArithmetic
operator|.
name|ColumnScalarMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|udf
operator|.
name|VectorUDFAdaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|VirtualColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBetween
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFIn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ConstantObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestVectorBetweenIn
block|{
annotation|@
name|Test
specifier|public
name|void
name|testTinyInt
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|5371
argument_list|)
decl_stmt|;
name|doBetweenIn
argument_list|(
name|random
argument_list|,
literal|"tinyint"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSmallInt
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|2772
argument_list|)
decl_stmt|;
name|doBetweenIn
argument_list|(
name|random
argument_list|,
literal|"smallint"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInt
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|12882
argument_list|)
decl_stmt|;
name|doBetweenIn
argument_list|(
name|random
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBigInt
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|12882
argument_list|)
decl_stmt|;
name|doBetweenIn
argument_list|(
name|random
argument_list|,
literal|"bigint"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testString
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|12882
argument_list|)
decl_stmt|;
name|doBetweenIn
argument_list|(
name|random
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestamp
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|12882
argument_list|)
decl_stmt|;
name|doBetweenIn
argument_list|(
name|random
argument_list|,
literal|"timestamp"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDate
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|12882
argument_list|)
decl_stmt|;
name|doBetweenIn
argument_list|(
name|random
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloat
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|7322
argument_list|)
decl_stmt|;
name|doBetweenIn
argument_list|(
name|random
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|12882
argument_list|)
decl_stmt|;
name|doBetweenIn
argument_list|(
name|random
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChar
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|12882
argument_list|)
decl_stmt|;
name|doBetweenIn
argument_list|(
name|random
argument_list|,
literal|"char(10)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarchar
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|12882
argument_list|)
decl_stmt|;
name|doBetweenIn
argument_list|(
name|random
argument_list|,
literal|"varchar(15)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecimal
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|9300
argument_list|)
decl_stmt|;
name|doDecimalTests
argument_list|(
name|random
argument_list|,
comment|/* tryDecimal64 */
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecimal64
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|9300
argument_list|)
decl_stmt|;
name|doDecimalTests
argument_list|(
name|random
argument_list|,
comment|/* tryDecimal64 */
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStruct
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|9300
argument_list|)
decl_stmt|;
name|doStructTests
argument_list|(
name|random
argument_list|)
expr_stmt|;
block|}
specifier|public
enum|enum
name|BetweenInTestMode
block|{
name|ROW_MODE
block|,
name|ADAPTOR
block|,
name|VECTOR_EXPRESSION
block|;
specifier|static
specifier|final
name|int
name|count
init|=
name|values
argument_list|()
operator|.
name|length
decl_stmt|;
block|}
specifier|public
enum|enum
name|BetweenInVariation
block|{
name|FILTER_BETWEEN
block|,
name|FILTER_NOT_BETWEEN
block|,
name|PROJECTION_BETWEEN
block|,
name|PROJECTION_NOT_BETWEEN
block|,
name|FILTER_IN
block|,
name|PROJECTION_IN
block|;
specifier|static
specifier|final
name|int
name|count
init|=
name|values
argument_list|()
operator|.
name|length
decl_stmt|;
specifier|final
name|boolean
name|isFilter
decl_stmt|;
name|BetweenInVariation
parameter_list|()
block|{
name|isFilter
operator|=
name|name
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"FILTER"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|TypeInfo
index|[]
name|decimalTypeInfos
init|=
operator|new
name|TypeInfo
index|[]
block|{
operator|new
name|DecimalTypeInfo
argument_list|(
literal|38
argument_list|,
literal|18
argument_list|)
block|,
operator|new
name|DecimalTypeInfo
argument_list|(
literal|25
argument_list|,
literal|2
argument_list|)
block|,
operator|new
name|DecimalTypeInfo
argument_list|(
literal|19
argument_list|,
literal|4
argument_list|)
block|,
operator|new
name|DecimalTypeInfo
argument_list|(
literal|18
argument_list|,
literal|10
argument_list|)
block|,
operator|new
name|DecimalTypeInfo
argument_list|(
literal|17
argument_list|,
literal|3
argument_list|)
block|,
operator|new
name|DecimalTypeInfo
argument_list|(
literal|12
argument_list|,
literal|2
argument_list|)
block|,
operator|new
name|DecimalTypeInfo
argument_list|(
literal|7
argument_list|,
literal|1
argument_list|)
block|}
decl_stmt|;
specifier|private
name|void
name|doDecimalTests
parameter_list|(
name|Random
name|random
parameter_list|,
name|boolean
name|tryDecimal64
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|TypeInfo
name|typeInfo
range|:
name|decimalTypeInfos
control|)
block|{
name|doBetweenIn
argument_list|(
name|random
argument_list|,
name|typeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|,
name|tryDecimal64
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doBetweenIn
parameter_list|(
name|Random
name|random
parameter_list|,
name|String
name|typeName
parameter_list|)
throws|throws
name|Exception
block|{
name|doBetweenIn
argument_list|(
name|random
argument_list|,
name|typeName
argument_list|,
comment|/* tryDecimal64 */
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|BetweenInVariation
index|[]
name|structInVarations
init|=
operator|new
name|BetweenInVariation
index|[]
block|{
name|BetweenInVariation
operator|.
name|FILTER_IN
block|,
name|BetweenInVariation
operator|.
name|PROJECTION_IN
block|}
decl_stmt|;
specifier|private
name|void
name|doStructTests
parameter_list|(
name|Random
name|random
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|typeName
init|=
literal|"struct"
decl_stmt|;
comment|// These are the only type supported for STRUCT IN by the VectorizationContext class.
name|Set
argument_list|<
name|String
argument_list|>
name|allowedTypeNameSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|allowedTypeNameSet
operator|.
name|add
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|allowedTypeNameSet
operator|.
name|add
argument_list|(
literal|"bigint"
argument_list|)
expr_stmt|;
name|allowedTypeNameSet
operator|.
name|add
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|allowedTypeNameSet
operator|.
name|add
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
comment|// Only STRUCT type IN currently supported.
for|for
control|(
name|BetweenInVariation
name|betweenInVariation
range|:
name|structInVarations
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|typeName
operator|=
name|VectorRandomRowSource
operator|.
name|getDecoratedTypeName
argument_list|(
name|random
argument_list|,
name|typeName
argument_list|,
name|SupportedTypes
operator|.
name|ALL
argument_list|,
name|allowedTypeNameSet
argument_list|,
comment|/* depth */
literal|0
argument_list|,
comment|/* maxDepth */
literal|1
argument_list|)
expr_stmt|;
name|doBetweenStructInVariation
argument_list|(
name|random
argument_list|,
name|typeName
argument_list|,
name|betweenInVariation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doBetweenIn
parameter_list|(
name|Random
name|random
parameter_list|,
name|String
name|typeName
parameter_list|,
name|boolean
name|tryDecimal64
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|subVariation
decl_stmt|;
for|for
control|(
name|BetweenInVariation
name|betweenInVariation
range|:
name|BetweenInVariation
operator|.
name|values
argument_list|()
control|)
block|{
name|subVariation
operator|=
literal|0
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|doBetweenInVariation
argument_list|(
name|random
argument_list|,
name|typeName
argument_list|,
name|tryDecimal64
argument_list|,
name|betweenInVariation
argument_list|,
name|subVariation
argument_list|)
condition|)
block|{
break|break;
block|}
name|subVariation
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|checkDecimal64
parameter_list|(
name|boolean
name|tryDecimal64
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tryDecimal64
operator|||
operator|!
operator|(
name|typeInfo
operator|instanceof
name|DecimalTypeInfo
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|typeInfo
decl_stmt|;
name|boolean
name|result
init|=
name|HiveDecimalWritable
operator|.
name|isPrecisionDecimal64
argument_list|(
name|decimalTypeInfo
operator|.
name|getPrecision
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|void
name|removeValue
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|valueList
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|valueList
operator|.
name|remove
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|needsValidDataTypeData
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|typeInfo
operator|instanceof
name|PrimitiveTypeInfo
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PrimitiveCategory
name|primitiveCategory
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|primitiveCategory
operator|==
name|PrimitiveCategory
operator|.
name|STRING
operator|||
name|primitiveCategory
operator|==
name|PrimitiveCategory
operator|.
name|CHAR
operator|||
name|primitiveCategory
operator|==
name|PrimitiveCategory
operator|.
name|VARCHAR
operator|||
name|primitiveCategory
operator|==
name|PrimitiveCategory
operator|.
name|BINARY
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|doBetweenInVariation
parameter_list|(
name|Random
name|random
parameter_list|,
name|String
name|typeName
parameter_list|,
name|boolean
name|tryDecimal64
parameter_list|,
name|BetweenInVariation
name|betweenInVariation
parameter_list|,
name|int
name|subVariation
parameter_list|)
throws|throws
name|Exception
block|{
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|boolean
name|isDecimal64
init|=
name|checkDecimal64
argument_list|(
name|tryDecimal64
argument_list|,
name|typeInfo
argument_list|)
decl_stmt|;
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
init|=
operator|(
name|isDecimal64
condition|?
name|DataTypePhysicalVariation
operator|.
name|DECIMAL_64
else|:
name|DataTypePhysicalVariation
operator|.
name|NONE
operator|)
decl_stmt|;
specifier|final
name|int
name|decimal64Scale
init|=
operator|(
name|isDecimal64
condition|?
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getScale
argument_list|()
else|:
literal|0
operator|)
decl_stmt|;
comment|//----------------------------------------------------------------------------------------------
name|ObjectInspector
name|objectInspector
init|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|typeInfo
argument_list|)
decl_stmt|;
specifier|final
name|int
name|valueCount
init|=
literal|10
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|valueList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|valueCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
name|i
operator|++
control|)
block|{
name|valueList
operator|.
name|add
argument_list|(
name|VectorRandomRowSource
operator|.
name|randomWritable
argument_list|(
name|random
argument_list|,
name|typeInfo
argument_list|,
name|objectInspector
argument_list|,
name|dataTypePhysicalVariation
argument_list|,
comment|/* allowNull */
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|isBetween
init|=
operator|(
name|betweenInVariation
operator|==
name|BetweenInVariation
operator|.
name|FILTER_BETWEEN
operator|||
name|betweenInVariation
operator|==
name|BetweenInVariation
operator|.
name|FILTER_NOT_BETWEEN
operator|||
name|betweenInVariation
operator|==
name|BetweenInVariation
operator|.
name|PROJECTION_BETWEEN
operator|||
name|betweenInVariation
operator|==
name|BetweenInVariation
operator|.
name|PROJECTION_NOT_BETWEEN
operator|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|compareList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|sortedList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|valueCount
argument_list|)
decl_stmt|;
name|sortedList
operator|.
name|addAll
argument_list|(
name|valueList
argument_list|)
expr_stmt|;
name|Object
name|exampleObject
init|=
name|valueList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|WritableComparator
name|writableComparator
init|=
name|WritableComparator
operator|.
name|get
argument_list|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|>
operator|)
name|exampleObject
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|sortedList
operator|.
name|sort
argument_list|(
name|writableComparator
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|isInvert
decl_stmt|;
if|if
condition|(
name|isBetween
condition|)
block|{
comment|// FILTER_BETWEEN
comment|// FILTER_NOT_BETWEEN
comment|// PROJECTION_BETWEEN
comment|// PROJECTION_NOT_BETWEEN
name|isInvert
operator|=
operator|(
name|betweenInVariation
operator|==
name|BetweenInVariation
operator|.
name|FILTER_NOT_BETWEEN
operator|||
name|betweenInVariation
operator|==
name|BetweenInVariation
operator|.
name|PROJECTION_NOT_BETWEEN
operator|)
expr_stmt|;
switch|switch
condition|(
name|subVariation
condition|)
block|{
case|case
literal|0
case|:
comment|// Range covers all values exactly.
name|compareList
operator|.
name|add
argument_list|(
name|sortedList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compareList
operator|.
name|add
argument_list|(
name|sortedList
operator|.
name|get
argument_list|(
name|valueCount
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// Exclude the first and last sorted.
name|compareList
operator|.
name|add
argument_list|(
name|sortedList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|compareList
operator|.
name|add
argument_list|(
name|sortedList
operator|.
name|get
argument_list|(
name|valueCount
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// Only last 2 sorted.
name|compareList
operator|.
name|add
argument_list|(
name|sortedList
operator|.
name|get
argument_list|(
name|valueCount
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|compareList
operator|.
name|add
argument_list|(
name|sortedList
operator|.
name|get
argument_list|(
name|valueCount
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
case|case
literal|4
case|:
case|case
literal|5
case|:
case|case
literal|6
case|:
block|{
comment|// Choose 2 adjacent in the middle.
name|Object
name|min
init|=
name|sortedList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|Object
name|max
init|=
name|sortedList
operator|.
name|get
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|compareList
operator|.
name|add
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|compareList
operator|.
name|add
argument_list|(
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
name|subVariation
operator|==
literal|4
condition|)
block|{
name|removeValue
argument_list|(
name|valueList
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subVariation
operator|==
literal|5
condition|)
block|{
name|removeValue
argument_list|(
name|valueList
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subVariation
operator|==
literal|6
condition|)
block|{
name|removeValue
argument_list|(
name|valueList
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|removeValue
argument_list|(
name|valueList
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// FILTER_IN.
comment|// PROJECTION_IN.
name|isInvert
operator|=
literal|false
expr_stmt|;
switch|switch
condition|(
name|subVariation
condition|)
block|{
case|case
literal|0
case|:
comment|// All values.
name|compareList
operator|.
name|addAll
argument_list|(
name|valueList
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// Don't include the first and last sorted.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|valueCount
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|compareList
operator|.
name|add
argument_list|(
name|valueList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// The even ones.
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|valueCount
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|compareList
operator|.
name|add
argument_list|(
name|valueList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
block|{
comment|// Choose 2 adjacent in the middle.
name|Object
name|min
init|=
name|sortedList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|Object
name|max
init|=
name|sortedList
operator|.
name|get
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|compareList
operator|.
name|add
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|compareList
operator|.
name|add
argument_list|(
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
name|subVariation
operator|==
literal|4
condition|)
block|{
name|removeValue
argument_list|(
name|valueList
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subVariation
operator|==
literal|5
condition|)
block|{
name|removeValue
argument_list|(
name|valueList
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subVariation
operator|==
literal|6
condition|)
block|{
name|removeValue
argument_list|(
name|valueList
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|removeValue
argument_list|(
name|valueList
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
return|return
literal|false
return|;
block|}
block|}
comment|//----------------------------------------------------------------------------------------------
name|GenerationSpec
name|generationSpec
init|=
name|GenerationSpec
operator|.
name|createValueList
argument_list|(
name|typeInfo
argument_list|,
name|valueList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|GenerationSpec
argument_list|>
name|generationSpecList
init|=
operator|new
name|ArrayList
argument_list|<
name|GenerationSpec
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DataTypePhysicalVariation
argument_list|>
name|explicitDataTypePhysicalVariationList
init|=
operator|new
name|ArrayList
argument_list|<
name|DataTypePhysicalVariation
argument_list|>
argument_list|()
decl_stmt|;
name|generationSpecList
operator|.
name|add
argument_list|(
name|generationSpec
argument_list|)
expr_stmt|;
name|explicitDataTypePhysicalVariationList
operator|.
name|add
argument_list|(
name|dataTypePhysicalVariation
argument_list|)
expr_stmt|;
name|VectorRandomRowSource
name|rowSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|rowSource
operator|.
name|initGenerationSpecSchema
argument_list|(
name|random
argument_list|,
name|generationSpecList
argument_list|,
comment|/* maxComplexDepth */
literal|0
argument_list|,
comment|/* allowNull */
literal|true
argument_list|,
comment|/* isUnicodeOk */
literal|true
argument_list|,
name|explicitDataTypePhysicalVariationList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|col1Name
init|=
name|rowSource
operator|.
name|columnNames
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|col1Name
argument_list|)
expr_stmt|;
specifier|final
name|ExprNodeDesc
name|col1Expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfo
argument_list|,
name|col1Name
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isBetween
condition|)
block|{
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isInvert
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|children
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|compareObject
range|:
name|compareList
control|)
block|{
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|typeInfo
argument_list|,
name|VectorRandomRowSource
operator|.
name|getNonWritableObject
argument_list|(
name|compareObject
argument_list|,
name|typeInfo
argument_list|,
name|objectInspector
argument_list|)
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|columnNames
init|=
name|columns
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Object
index|[]
index|[]
name|randomRows
init|=
name|rowSource
operator|.
name|randomRows
argument_list|(
literal|100000
argument_list|)
decl_stmt|;
name|VectorRandomBatchSource
name|batchSource
init|=
name|VectorRandomBatchSource
operator|.
name|createInterestingBatches
argument_list|(
name|random
argument_list|,
name|rowSource
argument_list|,
name|randomRows
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|GenericUDF
name|udf
decl_stmt|;
specifier|final
name|ObjectInspector
name|outputObjectInspector
decl_stmt|;
if|if
condition|(
name|isBetween
condition|)
block|{
name|udf
operator|=
operator|new
name|GenericUDFBetween
argument_list|()
expr_stmt|;
comment|// First argument is boolean invert. Arguments 1..3 are inspectors for range limits...
name|ObjectInspector
index|[]
name|argumentOIs
init|=
operator|new
name|ObjectInspector
index|[
literal|4
index|]
decl_stmt|;
name|argumentOIs
index|[
literal|0
index|]
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBooleanObjectInspector
expr_stmt|;
name|argumentOIs
index|[
literal|1
index|]
operator|=
name|objectInspector
expr_stmt|;
name|argumentOIs
index|[
literal|2
index|]
operator|=
name|objectInspector
expr_stmt|;
name|argumentOIs
index|[
literal|3
index|]
operator|=
name|objectInspector
expr_stmt|;
name|outputObjectInspector
operator|=
name|udf
operator|.
name|initialize
argument_list|(
name|argumentOIs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|compareCount
init|=
name|compareList
operator|.
name|size
argument_list|()
decl_stmt|;
name|udf
operator|=
operator|new
name|GenericUDFIn
argument_list|()
expr_stmt|;
name|ObjectInspector
index|[]
name|argumentOIs
init|=
operator|new
name|ObjectInspector
index|[
name|compareCount
index|]
decl_stmt|;
name|ConstantObjectInspector
name|constantObjectInspector
init|=
operator|(
name|ConstantObjectInspector
operator|)
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getWritableObjectInspector
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compareCount
condition|;
name|i
operator|++
control|)
block|{
name|argumentOIs
index|[
name|i
index|]
operator|=
name|constantObjectInspector
expr_stmt|;
block|}
name|outputObjectInspector
operator|=
name|udf
operator|.
name|initialize
argument_list|(
name|argumentOIs
argument_list|)
expr_stmt|;
block|}
name|TypeInfo
name|outputTypeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|outputObjectInspector
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|exprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|udf
argument_list|,
name|children
argument_list|)
decl_stmt|;
return|return
name|executeTestModesAndVerify
argument_list|(
name|typeInfo
argument_list|,
name|betweenInVariation
argument_list|,
name|compareList
argument_list|,
name|columns
argument_list|,
name|columnNames
argument_list|,
name|children
argument_list|,
name|udf
argument_list|,
name|exprDesc
argument_list|,
name|randomRows
argument_list|,
name|rowSource
argument_list|,
name|batchSource
argument_list|,
name|outputTypeInfo
argument_list|,
comment|/* skipAdaptor */
literal|false
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|doBetweenStructInVariation
parameter_list|(
name|Random
name|random
parameter_list|,
name|String
name|structTypeName
parameter_list|,
name|BetweenInVariation
name|betweenInVariation
parameter_list|)
throws|throws
name|Exception
block|{
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|structTypeName
argument_list|)
decl_stmt|;
name|ObjectInspector
name|structObjectInspector
init|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|structTypeInfo
argument_list|)
decl_stmt|;
specifier|final
name|int
name|valueCount
init|=
literal|10
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|valueList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|valueCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCount
condition|;
name|i
operator|++
control|)
block|{
name|valueList
operator|.
name|add
argument_list|(
name|VectorRandomRowSource
operator|.
name|randomWritable
argument_list|(
name|random
argument_list|,
name|structTypeInfo
argument_list|,
name|structObjectInspector
argument_list|,
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|,
comment|/* allowNull */
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|isInvert
init|=
literal|false
decl_stmt|;
comment|// No convenient WritableComparator / WritableComparable available for STRUCT.
name|List
argument_list|<
name|Object
argument_list|>
name|compareList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|includedSet
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|chooseLimit
init|=
literal|4
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|valueCount
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|chooseCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|chooseCount
operator|<
name|chooseLimit
condition|)
block|{
specifier|final
name|int
name|index
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|valueCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|includedSet
operator|.
name|contains
argument_list|(
name|index
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|includedSet
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|compareList
operator|.
name|add
argument_list|(
name|valueList
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|chooseCount
operator|++
expr_stmt|;
block|}
comment|//----------------------------------------------------------------------------------------------
name|GenerationSpec
name|structGenerationSpec
init|=
name|GenerationSpec
operator|.
name|createValueList
argument_list|(
name|structTypeInfo
argument_list|,
name|valueList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|GenerationSpec
argument_list|>
name|structGenerationSpecList
init|=
operator|new
name|ArrayList
argument_list|<
name|GenerationSpec
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DataTypePhysicalVariation
argument_list|>
name|structExplicitDataTypePhysicalVariationList
init|=
operator|new
name|ArrayList
argument_list|<
name|DataTypePhysicalVariation
argument_list|>
argument_list|()
decl_stmt|;
name|structGenerationSpecList
operator|.
name|add
argument_list|(
name|structGenerationSpec
argument_list|)
expr_stmt|;
name|structExplicitDataTypePhysicalVariationList
operator|.
name|add
argument_list|(
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|VectorRandomRowSource
name|structRowSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|structRowSource
operator|.
name|initGenerationSpecSchema
argument_list|(
name|random
argument_list|,
name|structGenerationSpecList
argument_list|,
comment|/* maxComplexDepth */
literal|0
argument_list|,
comment|/* allowNull */
literal|true
argument_list|,
comment|/* isUnicodeOk */
literal|true
argument_list|,
name|structExplicitDataTypePhysicalVariationList
argument_list|)
expr_stmt|;
name|Object
index|[]
index|[]
name|structRandomRows
init|=
name|structRowSource
operator|.
name|randomRows
argument_list|(
literal|100000
argument_list|)
decl_stmt|;
comment|// ---------------------------------------------------------------------------------------------
name|List
argument_list|<
name|GenerationSpec
argument_list|>
name|generationSpecList
init|=
operator|new
name|ArrayList
argument_list|<
name|GenerationSpec
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DataTypePhysicalVariation
argument_list|>
name|explicitDataTypePhysicalVariationList
init|=
operator|new
name|ArrayList
argument_list|<
name|DataTypePhysicalVariation
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfoList
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|fieldTypeInfoList
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|GenerationSpec
name|generationSpec
init|=
name|GenerationSpec
operator|.
name|createOmitGeneration
argument_list|(
name|fieldTypeInfoList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|generationSpecList
operator|.
name|add
argument_list|(
name|generationSpec
argument_list|)
expr_stmt|;
name|explicitDataTypePhysicalVariationList
operator|.
name|add
argument_list|(
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
name|VectorRandomRowSource
name|rowSource
init|=
operator|new
name|VectorRandomRowSource
argument_list|()
decl_stmt|;
name|rowSource
operator|.
name|initGenerationSpecSchema
argument_list|(
name|random
argument_list|,
name|generationSpecList
argument_list|,
comment|/* maxComplexDepth */
literal|0
argument_list|,
comment|/* allowNull */
literal|true
argument_list|,
comment|/* isUnicodeOk */
literal|true
argument_list|,
name|explicitDataTypePhysicalVariationList
argument_list|)
expr_stmt|;
name|Object
index|[]
index|[]
name|randomRows
init|=
name|rowSource
operator|.
name|randomRows
argument_list|(
literal|100000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|rowCount
init|=
name|randomRows
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rowCount
condition|;
name|r
operator|++
control|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|fieldValueList
init|=
operator|(
name|ArrayList
operator|)
name|structRandomRows
index|[
name|r
index|]
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|fieldCount
condition|;
name|f
operator|++
control|)
block|{
name|randomRows
index|[
name|r
index|]
index|[
name|f
index|]
operator|=
name|fieldValueList
operator|.
name|get
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ---------------------------------------------------------------------------------------------
comment|// Currently, STRUCT IN vectorization assumes a GenericUDFStruct.
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|structUdfObjectInspectorList
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|structUdfChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
name|fieldCount
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rowColumnNameList
init|=
name|rowSource
operator|.
name|columnNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|TypeInfo
name|fieldTypeInfo
init|=
name|fieldTypeInfoList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|fieldExpr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|fieldTypeInfo
argument_list|,
name|rowColumnNameList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|structUdfChildren
operator|.
name|add
argument_list|(
name|fieldExpr
argument_list|)
expr_stmt|;
name|ObjectInspector
name|fieldObjectInspector
init|=
name|VectorRandomRowSource
operator|.
name|getObjectInspector
argument_list|(
name|fieldTypeInfo
argument_list|,
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|structUdfObjectInspectorList
operator|.
name|add
argument_list|(
name|fieldObjectInspector
argument_list|)
expr_stmt|;
block|}
name|StandardStructObjectInspector
name|structUdfObjectInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|rowColumnNameList
argument_list|,
name|structUdfObjectInspectorList
argument_list|)
decl_stmt|;
name|String
name|structUdfTypeName
init|=
name|structUdfObjectInspector
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
name|TypeInfo
name|structUdfTypeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|structUdfTypeName
argument_list|)
decl_stmt|;
name|String
name|structFuncText
init|=
literal|"struct"
decl_stmt|;
name|FunctionInfo
name|fi
init|=
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|structFuncText
argument_list|)
decl_stmt|;
name|GenericUDF
name|genericUDF
init|=
name|fi
operator|.
name|getGenericUDF
argument_list|()
decl_stmt|;
name|ExprNodeDesc
name|col1Expr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|structUdfObjectInspector
argument_list|,
name|genericUDF
argument_list|,
name|structFuncText
argument_list|,
name|structUdfChildren
argument_list|)
decl_stmt|;
comment|// ---------------------------------------------------------------------------------------------
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|col1Expr
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compareList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|compareObject
init|=
name|compareList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|structUdfTypeInfo
argument_list|,
name|VectorRandomRowSource
operator|.
name|getNonWritableObject
argument_list|(
name|compareObject
argument_list|,
name|structUdfTypeInfo
argument_list|,
name|structUdfObjectInspector
argument_list|)
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|rowColumnNameList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|columnNames
init|=
name|columns
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|VectorRandomBatchSource
name|batchSource
init|=
name|VectorRandomBatchSource
operator|.
name|createInterestingBatches
argument_list|(
name|random
argument_list|,
name|rowSource
argument_list|,
name|randomRows
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// ---------------------------------------------------------------------------------------------
specifier|final
name|GenericUDF
name|udf
init|=
operator|new
name|GenericUDFIn
argument_list|()
decl_stmt|;
specifier|final
name|int
name|compareCount
init|=
name|compareList
operator|.
name|size
argument_list|()
decl_stmt|;
name|ObjectInspector
index|[]
name|argumentOIs
init|=
operator|new
name|ObjectInspector
index|[
name|compareCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compareCount
condition|;
name|i
operator|++
control|)
block|{
name|argumentOIs
index|[
name|i
index|]
operator|=
name|structUdfObjectInspector
expr_stmt|;
block|}
specifier|final
name|ObjectInspector
name|outputObjectInspector
init|=
name|udf
operator|.
name|initialize
argument_list|(
name|argumentOIs
argument_list|)
decl_stmt|;
name|TypeInfo
name|outputTypeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|outputObjectInspector
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|exprDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|udf
argument_list|,
name|children
argument_list|)
decl_stmt|;
return|return
name|executeTestModesAndVerify
argument_list|(
name|structUdfTypeInfo
argument_list|,
name|betweenInVariation
argument_list|,
name|compareList
argument_list|,
name|columns
argument_list|,
name|columnNames
argument_list|,
name|children
argument_list|,
name|udf
argument_list|,
name|exprDesc
argument_list|,
name|randomRows
argument_list|,
name|rowSource
argument_list|,
name|batchSource
argument_list|,
name|outputTypeInfo
argument_list|,
comment|/* skipAdaptor */
literal|true
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|executeTestModesAndVerify
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|BetweenInVariation
name|betweenInVariation
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|compareList
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
parameter_list|,
name|GenericUDF
name|udf
parameter_list|,
name|ExprNodeGenericFuncDesc
name|exprDesc
parameter_list|,
name|Object
index|[]
index|[]
name|randomRows
parameter_list|,
name|VectorRandomRowSource
name|rowSource
parameter_list|,
name|VectorRandomBatchSource
name|batchSource
parameter_list|,
name|TypeInfo
name|outputTypeInfo
parameter_list|,
name|boolean
name|skipAdaptor
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|rowCount
init|=
name|randomRows
operator|.
name|length
decl_stmt|;
name|Object
index|[]
index|[]
name|resultObjectsArray
init|=
operator|new
name|Object
index|[
name|BetweenInTestMode
operator|.
name|count
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BetweenInTestMode
operator|.
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Object
index|[]
name|resultObjects
init|=
operator|new
name|Object
index|[
name|rowCount
index|]
decl_stmt|;
name|resultObjectsArray
index|[
name|i
index|]
operator|=
name|resultObjects
expr_stmt|;
name|BetweenInTestMode
name|betweenInTestMode
init|=
name|BetweenInTestMode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
decl_stmt|;
switch|switch
condition|(
name|betweenInTestMode
condition|)
block|{
case|case
name|ROW_MODE
case|:
if|if
condition|(
operator|!
name|doRowCastTest
argument_list|(
name|typeInfo
argument_list|,
name|betweenInVariation
argument_list|,
name|compareList
argument_list|,
name|columns
argument_list|,
name|children
argument_list|,
name|udf
argument_list|,
name|exprDesc
argument_list|,
name|randomRows
argument_list|,
name|rowSource
operator|.
name|rowStructObjectInspector
argument_list|()
argument_list|,
name|resultObjects
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
name|ADAPTOR
case|:
if|if
condition|(
name|skipAdaptor
condition|)
block|{
continue|continue;
block|}
case|case
name|VECTOR_EXPRESSION
case|:
if|if
condition|(
operator|!
name|doVectorBetweenInTest
argument_list|(
name|typeInfo
argument_list|,
name|betweenInVariation
argument_list|,
name|compareList
argument_list|,
name|columns
argument_list|,
name|columnNames
argument_list|,
name|rowSource
operator|.
name|typeInfos
argument_list|()
argument_list|,
name|rowSource
operator|.
name|dataTypePhysicalVariations
argument_list|()
argument_list|,
name|children
argument_list|,
name|udf
argument_list|,
name|exprDesc
argument_list|,
name|betweenInTestMode
argument_list|,
name|batchSource
argument_list|,
name|exprDesc
operator|.
name|getWritableObjectInspector
argument_list|()
argument_list|,
name|outputTypeInfo
argument_list|,
name|resultObjects
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected IF statement test mode "
operator|+
name|betweenInTestMode
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
condition|;
name|i
operator|++
control|)
block|{
comment|// Row-mode is the expected value.
name|Object
name|expectedResult
init|=
name|resultObjectsArray
index|[
literal|0
index|]
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|v
init|=
literal|1
init|;
name|v
operator|<
name|BetweenInTestMode
operator|.
name|count
condition|;
name|v
operator|++
control|)
block|{
name|BetweenInTestMode
name|betweenInTestMode
init|=
name|BetweenInTestMode
operator|.
name|values
argument_list|()
index|[
name|v
index|]
decl_stmt|;
if|if
condition|(
name|skipAdaptor
condition|)
block|{
continue|continue;
block|}
name|Object
name|vectorResult
init|=
name|resultObjectsArray
index|[
name|v
index|]
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|betweenInVariation
operator|.
name|isFilter
operator|&&
name|expectedResult
operator|==
literal|null
operator|&&
name|vectorResult
operator|!=
literal|null
condition|)
block|{
comment|// This is OK.
name|boolean
name|vectorBoolean
init|=
operator|(
operator|(
name|BooleanWritable
operator|)
name|vectorResult
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|vectorBoolean
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Row "
operator|+
name|i
operator|+
literal|" typeName "
operator|+
name|typeInfo
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" outputTypeName "
operator|+
name|outputTypeInfo
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" "
operator|+
name|betweenInVariation
operator|+
literal|" "
operator|+
name|betweenInTestMode
operator|+
literal|" result is NOT NULL and true"
operator|+
literal|" does not match row-mode expected result is NULL which means false here"
operator|+
literal|" row values "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|randomRows
index|[
name|i
index|]
argument_list|)
operator|+
literal|" exprDesc "
operator|+
name|exprDesc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|expectedResult
operator|==
literal|null
operator|||
name|vectorResult
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|expectedResult
operator|!=
literal|null
operator|||
name|vectorResult
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Row "
operator|+
name|i
operator|+
literal|" sourceTypeName "
operator|+
name|typeInfo
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" "
operator|+
name|betweenInVariation
operator|+
literal|" "
operator|+
name|betweenInTestMode
operator|+
literal|" result is NULL "
operator|+
operator|(
name|vectorResult
operator|==
literal|null
condition|?
literal|"YES"
else|:
literal|"NO result "
operator|+
name|vectorResult
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|" does not match row-mode expected result is NULL "
operator|+
operator|(
name|expectedResult
operator|==
literal|null
condition|?
literal|"YES"
else|:
literal|"NO result "
operator|+
name|expectedResult
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|" row values "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|randomRows
index|[
name|i
index|]
argument_list|)
operator|+
literal|" exprDesc "
operator|+
name|exprDesc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|expectedResult
operator|.
name|equals
argument_list|(
name|vectorResult
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Row "
operator|+
name|i
operator|+
literal|" sourceTypeName "
operator|+
name|typeInfo
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" "
operator|+
name|betweenInVariation
operator|+
literal|" "
operator|+
name|betweenInTestMode
operator|+
literal|" result "
operator|+
name|vectorResult
operator|.
name|toString
argument_list|()
operator|+
literal|" ("
operator|+
name|vectorResult
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|")"
operator|+
literal|" does not match row-mode expected result "
operator|+
name|expectedResult
operator|.
name|toString
argument_list|()
operator|+
literal|" ("
operator|+
name|expectedResult
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|")"
operator|+
literal|" row values "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|randomRows
index|[
name|i
index|]
argument_list|)
operator|+
literal|" exprDesc "
operator|+
name|exprDesc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|doRowCastTest
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|BetweenInVariation
name|betweenInVariation
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|compareList
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
parameter_list|,
name|GenericUDF
name|udf
parameter_list|,
name|ExprNodeGenericFuncDesc
name|exprDesc
parameter_list|,
name|Object
index|[]
index|[]
name|randomRows
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|,
name|Object
index|[]
name|resultObjects
parameter_list|)
throws|throws
name|Exception
block|{
comment|/*     System.out.println(         "*DEBUG* typeInfo " + typeInfo.toString() +         " targetTypeInfo " + targetTypeInfo +         " betweenInTestMode ROW_MODE" +         " exprDesc " + exprDesc.toString());     */
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|ExprNodeEvaluator
name|evaluator
init|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|exprDesc
argument_list|,
name|hiveConf
argument_list|)
decl_stmt|;
name|evaluator
operator|.
name|initialize
argument_list|(
name|rowInspector
argument_list|)
expr_stmt|;
specifier|final
name|int
name|rowCount
init|=
name|randomRows
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
condition|;
name|i
operator|++
control|)
block|{
name|Object
index|[]
name|row
init|=
name|randomRows
index|[
name|i
index|]
decl_stmt|;
name|Object
name|result
init|=
name|evaluator
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Object
name|copyResult
init|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|result
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBooleanObjectInspector
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
decl_stmt|;
name|resultObjects
index|[
name|i
index|]
operator|=
name|copyResult
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|extractResultObjects
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|VectorExtractRow
name|resultVectorExtractRow
parameter_list|,
name|Object
index|[]
name|scrqtchRow
parameter_list|,
name|ObjectInspector
name|objectInspector
parameter_list|,
name|Object
index|[]
name|resultObjects
parameter_list|)
block|{
name|boolean
name|selectedInUse
init|=
name|batch
operator|.
name|selectedInUse
decl_stmt|;
name|int
index|[]
name|selected
init|=
name|batch
operator|.
name|selected
decl_stmt|;
for|for
control|(
name|int
name|logicalIndex
init|=
literal|0
init|;
name|logicalIndex
operator|<
name|batch
operator|.
name|size
condition|;
name|logicalIndex
operator|++
control|)
block|{
specifier|final
name|int
name|batchIndex
init|=
operator|(
name|selectedInUse
condition|?
name|selected
index|[
name|logicalIndex
index|]
else|:
name|logicalIndex
operator|)
decl_stmt|;
name|resultVectorExtractRow
operator|.
name|extractRow
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|scrqtchRow
argument_list|)
expr_stmt|;
name|Object
name|copyResult
init|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|scrqtchRow
index|[
literal|0
index|]
argument_list|,
name|objectInspector
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
decl_stmt|;
name|resultObjects
index|[
name|rowIndex
operator|++
index|]
operator|=
name|copyResult
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|doVectorBetweenInTest
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|BetweenInVariation
name|betweenInVariation
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|compareList
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|,
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|DataTypePhysicalVariation
index|[]
name|dataTypePhysicalVariations
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
parameter_list|,
name|GenericUDF
name|udf
parameter_list|,
name|ExprNodeGenericFuncDesc
name|exprDesc
parameter_list|,
name|BetweenInTestMode
name|betweenInTestMode
parameter_list|,
name|VectorRandomBatchSource
name|batchSource
parameter_list|,
name|ObjectInspector
name|objectInspector
parameter_list|,
name|TypeInfo
name|outputTypeInfo
parameter_list|,
name|Object
index|[]
name|resultObjects
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|betweenInTestMode
operator|==
name|BetweenInTestMode
operator|.
name|ADAPTOR
condition|)
block|{
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TEST_VECTOR_ADAPTOR_OVERRIDE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|isFilter
init|=
name|betweenInVariation
operator|.
name|isFilter
decl_stmt|;
name|VectorizationContext
name|vectorizationContext
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|typeInfos
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dataTypePhysicalVariations
argument_list|)
argument_list|,
name|hiveConf
argument_list|)
decl_stmt|;
name|VectorExpression
name|vectorExpression
init|=
name|vectorizationContext
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|,
operator|(
name|isFilter
condition|?
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
else|:
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
operator|)
argument_list|)
decl_stmt|;
name|vectorExpression
operator|.
name|transientInit
argument_list|()
expr_stmt|;
if|if
condition|(
name|betweenInTestMode
operator|==
name|BetweenInTestMode
operator|.
name|VECTOR_EXPRESSION
condition|)
block|{
name|String
name|vecExprString
init|=
name|vectorExpression
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|vectorExpression
operator|instanceof
name|VectorUDFAdaptor
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*NO NATIVE VECTOR EXPRESSION* typeInfo "
operator|+
name|typeInfo
operator|.
name|toString
argument_list|()
operator|+
literal|" betweenInTestMode "
operator|+
name|betweenInTestMode
operator|+
literal|" betweenInVariation "
operator|+
name|betweenInVariation
operator|+
literal|" vectorExpression "
operator|+
name|vecExprString
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dataTypePhysicalVariations
index|[
literal|0
index|]
operator|==
name|DataTypePhysicalVariation
operator|.
name|DECIMAL_64
condition|)
block|{
specifier|final
name|String
name|nameToCheck
init|=
name|vectorExpression
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nameToCheck
operator|.
name|contains
argument_list|(
literal|"Decimal64"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*EXPECTED DECIMAL_64 VECTOR EXPRESSION* typeInfo "
operator|+
name|typeInfo
operator|.
name|toString
argument_list|()
operator|+
literal|" betweenInTestMode "
operator|+
name|betweenInTestMode
operator|+
literal|" betweenInVariation "
operator|+
name|betweenInVariation
operator|+
literal|" vectorExpression "
operator|+
name|vecExprString
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// System.out.println("*VECTOR EXPRESSION* " + vectorExpression.getClass().getSimpleName());
comment|/*     System.out.println(         "*DEBUG* typeInfo " + typeInfo.toString() +         " betweenInTestMode " + betweenInTestMode +         " betweenInVariation " + betweenInVariation +         " vectorExpression " + vectorExpression.toString());     */
name|VectorRandomRowSource
name|rowSource
init|=
name|batchSource
operator|.
name|getRowSource
argument_list|()
decl_stmt|;
name|VectorizedRowBatchCtx
name|batchContext
init|=
operator|new
name|VectorizedRowBatchCtx
argument_list|(
name|columnNames
argument_list|,
name|rowSource
operator|.
name|typeInfos
argument_list|()
argument_list|,
name|rowSource
operator|.
name|dataTypePhysicalVariations
argument_list|()
argument_list|,
comment|/* dataColumnNums */
literal|null
argument_list|,
comment|/* partitionColumnCount */
literal|0
argument_list|,
comment|/* virtualColumnCount */
literal|0
argument_list|,
comment|/* neededVirtualColumns */
literal|null
argument_list|,
name|vectorizationContext
operator|.
name|getScratchColumnTypeNames
argument_list|()
argument_list|,
name|vectorizationContext
operator|.
name|getScratchDataTypePhysicalVariations
argument_list|()
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|batchContext
operator|.
name|createVectorizedRowBatch
argument_list|()
decl_stmt|;
name|VectorExtractRow
name|resultVectorExtractRow
init|=
literal|null
decl_stmt|;
name|Object
index|[]
name|scrqtchRow
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isFilter
condition|)
block|{
name|resultVectorExtractRow
operator|=
operator|new
name|VectorExtractRow
argument_list|()
expr_stmt|;
specifier|final
name|int
name|outputColumnNum
init|=
name|vectorExpression
operator|.
name|getOutputColumnNum
argument_list|()
decl_stmt|;
name|resultVectorExtractRow
operator|.
name|init
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|outputTypeInfo
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|outputColumnNum
block|}
argument_list|)
expr_stmt|;
name|scrqtchRow
operator|=
operator|new
name|Object
index|[
literal|1
index|]
expr_stmt|;
block|}
name|boolean
name|copySelectedInUse
init|=
literal|false
decl_stmt|;
name|int
index|[]
name|copySelected
init|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
decl_stmt|;
name|batchSource
operator|.
name|resetBatchIteration
argument_list|()
expr_stmt|;
name|int
name|rowIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|batchSource
operator|.
name|fillNextBatch
argument_list|(
name|batch
argument_list|)
condition|)
block|{
break|break;
block|}
specifier|final
name|int
name|originalBatchSize
init|=
name|batch
operator|.
name|size
decl_stmt|;
if|if
condition|(
name|isFilter
condition|)
block|{
name|copySelectedInUse
operator|=
name|batch
operator|.
name|selectedInUse
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|batch
operator|.
name|selected
argument_list|,
literal|0
argument_list|,
name|copySelected
argument_list|,
literal|0
argument_list|,
name|originalBatchSize
argument_list|)
expr_stmt|;
block|}
block|}
comment|// In filter mode, the batch size can be made smaller.
name|vectorExpression
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isFilter
condition|)
block|{
name|extractResultObjects
argument_list|(
name|batch
argument_list|,
name|rowIndex
argument_list|,
name|resultVectorExtractRow
argument_list|,
name|scrqtchRow
argument_list|,
name|objectInspector
argument_list|,
name|resultObjects
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|currentBatchSize
init|=
name|batch
operator|.
name|size
decl_stmt|;
if|if
condition|(
name|copySelectedInUse
operator|&&
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|int
name|selectIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalBatchSize
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|originalBatchIndex
init|=
name|copySelected
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|boolean
name|booleanResult
decl_stmt|;
if|if
condition|(
name|selectIndex
operator|<
name|currentBatchSize
operator|&&
name|batch
operator|.
name|selected
index|[
name|selectIndex
index|]
operator|==
name|originalBatchIndex
condition|)
block|{
name|booleanResult
operator|=
literal|true
expr_stmt|;
name|selectIndex
operator|++
expr_stmt|;
block|}
else|else
block|{
name|booleanResult
operator|=
literal|false
expr_stmt|;
block|}
name|resultObjects
index|[
name|rowIndex
operator|+
name|i
index|]
operator|=
operator|new
name|BooleanWritable
argument_list|(
name|booleanResult
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|int
name|selectIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalBatchSize
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|boolean
name|booleanResult
decl_stmt|;
if|if
condition|(
name|selectIndex
operator|<
name|currentBatchSize
operator|&&
name|batch
operator|.
name|selected
index|[
name|selectIndex
index|]
operator|==
name|i
condition|)
block|{
name|booleanResult
operator|=
literal|true
expr_stmt|;
name|selectIndex
operator|++
expr_stmt|;
block|}
else|else
block|{
name|booleanResult
operator|=
literal|false
expr_stmt|;
block|}
name|resultObjects
index|[
name|rowIndex
operator|+
name|i
index|]
operator|=
operator|new
name|BooleanWritable
argument_list|(
name|booleanResult
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentBatchSize
operator|==
literal|0
condition|)
block|{
comment|// Whole batch got zapped.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalBatchSize
condition|;
name|i
operator|++
control|)
block|{
name|resultObjects
index|[
name|rowIndex
operator|+
name|i
index|]
operator|=
operator|new
name|BooleanWritable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Every row kept.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalBatchSize
condition|;
name|i
operator|++
control|)
block|{
name|resultObjects
index|[
name|rowIndex
operator|+
name|i
index|]
operator|=
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rowIndex
operator|+=
name|originalBatchSize
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

