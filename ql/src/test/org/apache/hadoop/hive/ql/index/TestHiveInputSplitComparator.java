begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
operator|.
name|HiveInputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|SplitFilter
operator|.
name|HiveInputSplitComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|MockHiveInputSplits
operator|.
name|createMockSplit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHiveInputSplitComparator
block|{
annotation|@
name|Parameter
argument_list|(
literal|0
argument_list|)
specifier|public
name|HiveInputSplit
name|split1
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
literal|1
argument_list|)
specifier|public
name|HiveInputSplit
name|split2
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
literal|2
argument_list|)
specifier|public
name|Integer
name|expected
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}: {0}<=>{1} "
argument_list|)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
block|,
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|1000
argument_list|,
literal|100
argument_list|)
block|,
operator|-
literal|1
block|}
block|,
block|{
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|1000
argument_list|,
literal|100
argument_list|)
block|,
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
block|,
literal|1
block|}
block|,
block|{
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
block|,
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
block|,
literal|0
block|}
block|,
block|{
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
block|,
name|createMockSplit
argument_list|(
literal|"B"
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
block|,
operator|-
literal|1
block|}
block|,
block|{
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
block|,
name|createMockSplit
argument_list|(
literal|"B"
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
block|,
operator|-
literal|1
block|}
block|,
block|{
name|createMockSplit
argument_list|(
literal|"A"
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
block|,
name|createMockSplit
argument_list|(
literal|"B"
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
block|,
operator|-
literal|1
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompare
parameter_list|()
block|{
name|HiveInputSplitComparator
name|cmp
init|=
operator|new
name|HiveInputSplitComparator
argument_list|()
decl_stmt|;
name|int
name|actual
init|=
name|cmp
operator|.
name|compare
argument_list|(
name|split1
argument_list|,
name|split2
argument_list|)
decl_stmt|;
name|assertCompareResult
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertCompareResult
parameter_list|(
name|int
name|expected
parameter_list|,
name|int
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|signum
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

