begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Parser tests for SQL11 Reserved KeyWords. Please find more information in  * HIVE-6617. Total number : 74 + 2 (MySQL)  */
end_comment

begin_class
specifier|public
class|class
name|TestSQL11ReservedKeyWordsNegative
block|{
specifier|private
specifier|static
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|ParseDriver
name|pd
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|initialize
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|SemanticAnalyzer
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SUPPORT_SQL11_RESERVED_KEYWORDS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|SemanticException
throws|,
name|IOException
block|{
name|pd
operator|=
operator|new
name|ParseDriver
argument_list|()
expr_stmt|;
block|}
name|ASTNode
name|parse
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|ParseException
block|{
name|ASTNode
name|nd
init|=
literal|null
decl_stmt|;
try|try
block|{
name|nd
operator|=
name|pd
operator|.
name|parse
argument_list|(
name|query
argument_list|,
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|ASTNode
operator|)
name|nd
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_ALL
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE ALL (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'ALL'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_ALTER
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE ALTER (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'ALTER'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_ARRAY
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE ARRAY (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'ARRAY'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_AS
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE AS (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'AS'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_AUTHORIZATION
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE AUTHORIZATION (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'AUTHORIZATION'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_BETWEEN
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE BETWEEN (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'BETWEEN'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_BIGINT
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE BIGINT (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'BIGINT'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_BINARY
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE BINARY (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'BINARY'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_BOOLEAN
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE BOOLEAN (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'BOOLEAN'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_BOTH
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE BOTH (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'BOTH'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_BY
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE BY (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'BY'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_CREATE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE CREATE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'CREATE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_CUBE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE CUBE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'CUBE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_CURRENT_DATE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE CURRENT_DATE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'CURRENT_DATE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_CURRENT_TIMESTAMP
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE CURRENT_TIMESTAMP (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'CURRENT_TIMESTAMP'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_CURSOR
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE CURSOR (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'CURSOR'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_DATE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE DATE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'DATE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_DECIMAL
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE DECIMAL (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'DECIMAL'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_DELETE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE DELETE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'DELETE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_DESCRIBE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE DESCRIBE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'DESCRIBE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_DOUBLE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE DOUBLE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'DOUBLE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_DROP
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE DROP (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'DROP'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_EXISTS
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE EXISTS (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'EXISTS'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_EXTERNAL
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE EXTERNAL (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'EXTERNAL'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_FALSE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE FALSE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'FALSE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_FETCH
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE FETCH (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'FETCH'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_FLOAT
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE FLOAT (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'FLOAT'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_FOR
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE FOR (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'FOR'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_FULL
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE FULL (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'FULL'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_GRANT
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE GRANT (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'GRANT'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_GROUP
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE GROUP (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'GROUP'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_GROUPING
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE GROUPING (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'GROUPING'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_IMPORT
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE IMPORT (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'IMPORT'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_IN
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE IN (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'IN'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_INNER
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE INNER (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'INNER'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_INSERT
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE INSERT (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'INSERT'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_INT
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE INT (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'INT'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_INTERSECT
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE INTERSECT (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'INTERSECT'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_INTO
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE INTO (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'INTO'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_IS
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE IS (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'IS'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_LATERAL
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE LATERAL (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'LATERAL'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_LEFT
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE LEFT (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'LEFT'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_LIKE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE LIKE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'LIKE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_LOCAL
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE LOCAL (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'LOCAL'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_NONE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE NONE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'NONE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_NULL
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE NULL (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'NULL'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_OF
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE OF (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'OF'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_ORDER
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE ORDER (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'ORDER'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_OUT
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE OUT (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'OUT'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_OUTER
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE OUTER (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'OUTER'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_PARTITION
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE PARTITION (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'PARTITION'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_PERCENT
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE PERCENT (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'PERCENT'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_PROCEDURE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE PROCEDURE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'PROCEDURE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_RANGE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE RANGE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'RANGE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_READS
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE READS (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'READS'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_REVOKE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE REVOKE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'REVOKE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_RIGHT
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE RIGHT (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'RIGHT'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_ROLLUP
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE ROLLUP (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'ROLLUP'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_ROW
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE ROW (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'ROW'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_ROWS
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE ROWS (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'ROWS'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_SET
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE SET (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'SET'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_SMALLINT
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE SMALLINT (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'SMALLINT'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_TABLE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE TABLE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'TABLE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_TIMESTAMP
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE TIMESTAMP (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'TIMESTAMP'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_TO
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE TO (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'TO'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_TRIGGER
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE TRIGGER (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'TRIGGER'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_TRUE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE TRUE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'TRUE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_TRUNCATE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE TRUNCATE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'TRUNCATE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_UNION
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE UNION (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'UNION'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_UPDATE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE UPDATE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'UPDATE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_USER
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE USER (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'USER'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_USING
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE USING (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'USING'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_VALUES
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE VALUES (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'VALUES'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_WITH
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE WITH (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'WITH'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// MySQL reserved keywords.
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_RLIKE
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE RLIKE (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'RLIKE'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_REGEXP
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE REGEXP (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected ParseException"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:13 Failed to recognize predicate 'REGEXP'. Failed rule: 'identifier' in table name"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

