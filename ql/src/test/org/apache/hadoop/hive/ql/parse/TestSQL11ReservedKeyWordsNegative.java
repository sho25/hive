begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|runners
operator|.
name|Enclosed
import|;
end_import

begin_comment
comment|/**  * Parser tests for SQL11 Reserved KeyWords. Please find more information in HIVE-6617.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Enclosed
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSQL11ReservedKeyWordsNegative
block|{
specifier|private
specifier|static
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|SemanticAnalyzer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ParseDriver
name|pd
init|=
operator|new
name|ParseDriver
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|initialize
parameter_list|()
block|{
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ASTNode
name|parse
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|ParseException
block|{
name|ASTNode
name|nd
init|=
literal|null
decl_stmt|;
try|try
block|{
name|nd
operator|=
name|pd
operator|.
name|parse
argument_list|(
name|query
argument_list|,
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|ASTNode
operator|)
name|nd
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|TestSQL11ReservedKeyWordsNegativeMisc
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSQL11ReservedKeyWords_KILL
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
literal|"CREATE TABLE KILL QUERY (col STRING)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected ParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
literal|"line 1:18 cannot recognize input near 'QUERY' '(' 'col' in create table statement"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
specifier|static
class|class
name|TestSQL11ReservedKeyWordsNegativeParametrized
block|{
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"ALL"
block|}
block|,
block|{
literal|"ALTER"
block|}
block|,
block|{
literal|"ARRAY"
block|}
block|,
block|{
literal|"AS"
block|}
block|,
block|{
literal|"AUTHORIZATION"
block|}
block|,
block|{
literal|"BETWEEN"
block|}
block|,
block|{
literal|"BIGINT"
block|}
block|,
block|{
literal|"BINARY"
block|}
block|,
block|{
literal|"BOOLEAN"
block|}
block|,
block|{
literal|"BOTH"
block|}
block|,
block|{
literal|"BY"
block|}
block|,
block|{
literal|"CONSTRAINT"
block|}
block|,
block|{
literal|"CREATE"
block|}
block|,
block|{
literal|"CUBE"
block|}
block|,
block|{
literal|"CURRENT_DATE"
block|}
block|,
block|{
literal|"CURRENT_TIMESTAMP"
block|}
block|,
block|{
literal|"CURSOR"
block|}
block|,
block|{
literal|"DATE"
block|}
block|,
block|{
literal|"DECIMAL"
block|}
block|,
block|{
literal|"DELETE"
block|}
block|,
block|{
literal|"DESCRIBE"
block|}
block|,
block|{
literal|"DOUBLE"
block|}
block|,
block|{
literal|"DROP"
block|}
block|,
block|{
literal|"EXISTS"
block|}
block|,
block|{
literal|"EXTERNAL"
block|}
block|,
block|{
literal|"FALSE"
block|}
block|,
block|{
literal|"FETCH"
block|}
block|,
block|{
literal|"FLOAT"
block|}
block|,
block|{
literal|"REAL"
block|}
block|,
block|{
literal|"FOR"
block|}
block|,
block|{
literal|"FOREIGN"
block|}
block|,
block|{
literal|"FULL"
block|}
block|,
block|{
literal|"GRANT"
block|}
block|,
block|{
literal|"GROUP"
block|}
block|,
block|{
literal|"GROUPING"
block|}
block|,
block|{
literal|"IMPORT"
block|}
block|,
block|{
literal|"IN"
block|}
block|,
block|{
literal|"INNER"
block|}
block|,
block|{
literal|"INSERT"
block|}
block|,
block|{
literal|"INT"
block|}
block|,
block|{
literal|"INTERSECT"
block|}
block|,
block|{
literal|"INTO"
block|}
block|,
block|{
literal|"IS"
block|}
block|,
block|{
literal|"LATERAL"
block|}
block|,
block|{
literal|"LEFT"
block|}
block|,
block|{
literal|"LIKE"
block|}
block|,
block|{
literal|"LOCAL"
block|}
block|,
block|{
literal|"MINUS"
block|}
block|,
block|{
literal|"NONE"
block|}
block|,
block|{
literal|"NULL"
block|}
block|,
block|{
literal|"OF"
block|}
block|,
block|{
literal|"ORDER"
block|}
block|,
block|{
literal|"OUT"
block|}
block|,
block|{
literal|"OUTER"
block|}
block|,
block|{
literal|"PARTITION"
block|}
block|,
block|{
literal|"PERCENT"
block|}
block|,
block|{
literal|"PRECISION"
block|}
block|,
block|{
literal|"PRIMARY"
block|}
block|,
block|{
literal|"PROCEDURE"
block|}
block|,
block|{
literal|"RANGE"
block|}
block|,
block|{
literal|"READS"
block|}
block|,
block|{
literal|"REFERENCES"
block|}
block|,
block|{
literal|"REGEXP"
block|}
block|,
block|{
literal|"REVOKE"
block|}
block|,
block|{
literal|"RIGHT"
block|}
block|,
block|{
literal|"RLIKE"
block|}
block|,
block|{
literal|"ROLLUP"
block|}
block|,
block|{
literal|"ROW"
block|}
block|,
block|{
literal|"ROWS"
block|}
block|,
block|{
literal|"SET"
block|}
block|,
block|{
literal|"SMALLINT"
block|}
block|,
block|{
literal|"TABLE"
block|}
block|,
block|{
literal|"TIME"
block|}
block|,
block|{
literal|"TIMESTAMP"
block|}
block|,
block|{
literal|"TO"
block|}
block|,
block|{
literal|"TRIGGER"
block|}
block|,
block|{
literal|"TRUE"
block|}
block|,
block|{
literal|"TRUNCATE"
block|}
block|,
block|{
literal|"UNION"
block|}
block|,
block|{
literal|"UNIQUE"
block|}
block|,
block|{
literal|"UPDATE"
block|}
block|,
block|{
literal|"USER"
block|}
block|,
block|{
literal|"USING"
block|}
block|,
block|{
literal|"VALUES"
block|}
block|,
block|{
literal|"WITH"
block|}
block|,
block|{
literal|"SOME"
block|}
block|,
block|{
literal|"ANY"
block|}
block|,
block|{
literal|"ALL"
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|String
name|keyword
decl_stmt|;
specifier|public
name|TestSQL11ReservedKeyWordsNegativeParametrized
parameter_list|(
name|String
name|keyword
parameter_list|)
block|{
name|this
operator|.
name|keyword
operator|=
name|keyword
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNegative
parameter_list|()
block|{
try|try
block|{
name|parse
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"CREATE TABLE %s (col STRING)"
argument_list|,
name|keyword
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected ParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Failure didn't match."
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"line 1:13 cannot recognize input near '%s' '(' 'col' in table name"
argument_list|,
name|keyword
argument_list|)
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

