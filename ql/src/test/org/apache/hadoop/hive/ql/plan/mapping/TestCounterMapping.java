begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapping
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|IDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
operator|.
name|OpTreeSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
operator|.
name|EmptyStatsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
operator|.
name|PlanMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
operator|.
name|PlanMapper
operator|.
name|EquivGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
operator|.
name|StatsSources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|reexec
operator|.
name|ReExecDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|OperatorStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|OperatorStatsReaderHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|testutils
operator|.
name|HiveTestEnvSetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_class
specifier|public
class|class
name|TestCounterMapping
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
name|HiveTestEnvSetup
name|env_setup
init|=
operator|new
name|HiveTestEnvSetup
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestRule
name|methodRule
init|=
name|env_setup
operator|.
name|getMethodRule
argument_list|()
decl_stmt|;
specifier|static
name|Comparator
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|OPERATOR_ID_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|o1
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|o2
parameter_list|)
block|{
name|Long
name|id1
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|o1
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|id2
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|o2
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Long
operator|.
name|compare
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|)
return|;
block|}
block|}
empty_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|dropTables
argument_list|(
name|driver
argument_list|)
expr_stmt|;
name|String
name|cmds
index|[]
init|=
block|{
comment|// @formatter:off
literal|"create table s (x int)"
block|,
literal|"insert into s values (1),(2),(3),(4),(5),(6),(7),(8),(9),(10)"
block|,
literal|"create table tu(id_uv int,id_uw int,u int)"
block|,
literal|"create table tv(id_uv int,v int)"
block|,
literal|"create table tw(id_uw int,w int)"
block|,
literal|"from s\n"
operator|+
literal|"insert overwrite table tu\n"
operator|+
literal|"        select x,x,x\n"
operator|+
literal|"        where x<=6 or x=10\n"
operator|+
literal|"insert overwrite table tv\n"
operator|+
literal|"        select x,x\n"
operator|+
literal|"        where x<=3 or x=10\n"
operator|+
literal|"insert overwrite table tw\n"
operator|+
literal|"        select x,x\n"
operator|+
literal|""
block|,
comment|// @formatter:on
block|}
decl_stmt|;
for|for
control|(
name|String
name|cmd
range|:
name|cmds
control|)
block|{
name|driver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|dropTables
argument_list|(
name|driver
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|dropTables
parameter_list|(
name|IDriver
name|driver
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|tables
index|[]
init|=
block|{
literal|"s"
block|,
literal|"tu"
block|,
literal|"tv"
block|,
literal|"tw"
block|}
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|tables
control|)
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PlanMapper
name|getMapperForQuery
parameter_list|(
name|IDriver
name|driver
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
name|driver
operator|.
name|run
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|PlanMapper
name|pm0
init|=
name|driver
operator|.
name|getContext
argument_list|()
operator|.
name|getPlanMapper
argument_list|()
decl_stmt|;
return|return
name|pm0
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUsageOfRuntimeInfo
parameter_list|()
throws|throws
name|ParseException
throws|,
name|CommandProcessorException
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"select sum(u) from tu where u>1"
decl_stmt|;
name|PlanMapper
name|pm1
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FilterOperator
argument_list|>
name|filters1
init|=
name|pm1
operator|.
name|getAll
argument_list|(
name|FilterOperator
operator|.
name|class
argument_list|)
decl_stmt|;
name|filters1
operator|.
name|sort
argument_list|(
name|OPERATOR_ID_COMPARATOR
operator|.
name|reversed
argument_list|()
argument_list|)
expr_stmt|;
name|FilterOperator
name|filter1
init|=
name|filters1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|driver
operator|=
name|createDriver
argument_list|()
expr_stmt|;
operator|(
operator|(
name|ReExecDriver
operator|)
name|driver
operator|)
operator|.
name|setStatsSource
argument_list|(
name|StatsSources
operator|.
name|getStatsSourceContaining
argument_list|(
name|EmptyStatsSource
operator|.
name|INSTANCE
argument_list|,
name|pm1
argument_list|)
argument_list|)
expr_stmt|;
name|PlanMapper
name|pm2
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FilterOperator
argument_list|>
name|filters2
init|=
name|pm2
operator|.
name|getAll
argument_list|(
name|FilterOperator
operator|.
name|class
argument_list|)
decl_stmt|;
name|filters2
operator|.
name|sort
argument_list|(
name|OPERATOR_ID_COMPARATOR
operator|.
name|reversed
argument_list|()
argument_list|)
expr_stmt|;
name|FilterOperator
name|filter2
init|=
name|filters2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"original check"
argument_list|,
literal|7
argument_list|,
name|filter1
operator|.
name|getStatistics
argument_list|()
operator|.
name|getNumRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"optimized check"
argument_list|,
literal|6
argument_list|,
name|filter2
operator|.
name|getStatistics
argument_list|()
operator|.
name|getNumRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInConversion
parameter_list|()
throws|throws
name|ParseException
throws|,
name|CommandProcessorException
block|{
name|String
name|query
init|=
literal|"explain select sum(id_uv) from tu where u in (1,2) group by u"
decl_stmt|;
name|HiveConf
name|conf
init|=
name|env_setup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
decl_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVEPOINTLOOKUPOPTIMIZERMIN
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|PlanMapper
name|pm
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FilterOperator
argument_list|>
name|fos
init|=
name|pm
operator|.
name|getAll
argument_list|(
name|FilterOperator
operator|.
name|class
argument_list|)
decl_stmt|;
name|OpTreeSignature
name|filterSig
init|=
name|pm
operator|.
name|lookup
argument_list|(
name|OpTreeSignature
operator|.
name|class
argument_list|,
name|fos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|pred
init|=
name|filterSig
operator|.
name|getSig
argument_list|()
operator|.
name|getSigMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"getPredicateString"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"((u = 1) or (u = 2)) (type: boolean)"
argument_list|,
name|pred
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBreakupAnd
parameter_list|()
throws|throws
name|ParseException
throws|,
name|CommandProcessorException
block|{
name|String
name|query
init|=
literal|"explain select sum(id_uv) from tu where u=1  and (u=2 or u=1) group by u"
decl_stmt|;
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|PlanMapper
name|pm
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FilterOperator
argument_list|>
name|fos
init|=
name|pm
operator|.
name|getAll
argument_list|(
name|FilterOperator
operator|.
name|class
argument_list|)
decl_stmt|;
name|OpTreeSignature
name|filterSig
init|=
name|pm
operator|.
name|lookup
argument_list|(
name|OpTreeSignature
operator|.
name|class
argument_list|,
name|fos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|pred
init|=
name|filterSig
operator|.
name|getSig
argument_list|()
operator|.
name|getSigMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"getPredicateString"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(u = 1) (type: boolean)"
argument_list|,
name|pred
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBreakupAnd2
parameter_list|()
throws|throws
name|ParseException
throws|,
name|CommandProcessorException
block|{
name|String
name|query
init|=
literal|"explain select sum(id_uv) from tu where u in (1,2,3) and u=2 and u=2 and 2=u group by u"
decl_stmt|;
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|PlanMapper
name|pm
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FilterOperator
argument_list|>
name|fos
init|=
name|pm
operator|.
name|getAll
argument_list|(
name|FilterOperator
operator|.
name|class
argument_list|)
decl_stmt|;
name|OpTreeSignature
name|filterSig
init|=
name|pm
operator|.
name|lookup
argument_list|(
name|OpTreeSignature
operator|.
name|class
argument_list|,
name|fos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|pred
init|=
name|filterSig
operator|.
name|getSig
argument_list|()
operator|.
name|getSigMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"getPredicateString"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(u = 2) (type: boolean)"
argument_list|,
name|pred
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"needs HiveFilter mapping"
argument_list|)
specifier|public
name|void
name|testMappingJoinLookup
parameter_list|()
throws|throws
name|ParseException
throws|,
name|CommandProcessorException
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|PlanMapper
name|pm0
init|=
name|getMapperForQuery
argument_list|(
name|driver
argument_list|,
literal|"select sum(tu.id_uv), sum(u)\n"
operator|+
literal|"from tu join tv on (tu.id_uv = tv.id_uv)\n"
operator|+
literal|"where u> 1 and v> 1"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|EquivGroup
argument_list|>
name|itG
init|=
name|pm0
operator|.
name|iterateGroups
argument_list|()
decl_stmt|;
name|int
name|checkedOperators
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|itG
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EquivGroup
name|g
init|=
name|itG
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HiveFilter
argument_list|>
name|hfs
init|=
name|g
operator|.
name|getAll
argument_list|(
name|HiveFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OperatorStats
argument_list|>
name|oss
init|=
name|g
operator|.
name|getAll
argument_list|(
name|OperatorStats
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FilterOperator
argument_list|>
name|fos
init|=
name|g
operator|.
name|getAll
argument_list|(
name|FilterOperator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fos
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|oss
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|hfs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"HiveFilter is not connected?"
argument_list|)
expr_stmt|;
block|}
name|OperatorStats
name|os
init|=
name|oss
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|os
operator|.
name|getOutputRecords
argument_list|()
operator|==
literal|3
operator|||
name|os
operator|.
name|getOutputRecords
argument_list|()
operator|==
literal|6
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"nonexpected number of records produced"
argument_list|)
expr_stmt|;
block|}
name|checkedOperators
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|checkedOperators
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|IDriver
name|createDriver
parameter_list|()
block|{
name|HiveConf
name|conf
init|=
name|env_setup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
decl_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_ALWAYS_COLLECT_OPERATOR_STATS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.auto.convert.join"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.optimize.ppd"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
comment|//    conf.setVar(HiveConf.ConfVars.SEMANTIC_ANALYZER_HOOK, CheckInputReadEntityDirect.class.getName());
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
argument_list|,
name|OperatorStatsReaderHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|IDriver
name|driver
init|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|driver
return|;
block|}
block|}
end_class

end_unit

