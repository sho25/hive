begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|HashMapWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinBytesTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinObjectSerDeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainerSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|collectoroperator
operator|.
name|CollectorTestOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|collectoroperator
operator|.
name|CountCollectorTestOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|collectoroperator
operator|.
name|RowCollectorTestOperatorBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|rowobjects
operator|.
name|RowTestObjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorColumnOutputMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorColumnSourceMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorMapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorMapJoinOuterFilteredOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
operator|.
name|VectorMapJoinFastTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
operator|.
name|VerifyFastRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinCondDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableImplementationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableKeyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|VectorMapJoinVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|BinarySortableSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|fast
operator|.
name|BinarySortableSerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|fast
operator|.
name|LazyBinarySerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_class
specifier|public
class|class
name|MapJoinTestConfig
block|{
specifier|public
specifier|static
enum|enum
name|MapJoinTestImplementation
block|{
name|ROW_MODE_HASH_MAP
block|,
name|ROW_MODE_OPTIMIZED
block|,
name|VECTOR_PASS_THROUGH
block|,
name|NATIVE_VECTOR_OPTIMIZED
block|,
name|NATIVE_VECTOR_FAST
block|}
specifier|public
specifier|static
name|MapJoinDesc
name|createMapJoinDesc
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|)
block|{
name|MapJoinDesc
name|mapJoinDesc
init|=
operator|new
name|MapJoinDesc
argument_list|()
decl_stmt|;
name|mapJoinDesc
operator|.
name|setPosBigTable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyExpr
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDesc
operator|.
name|bigTableKeyColumnNums
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|keyExpr
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|testDesc
operator|.
name|bigTableKeyTypeInfos
index|[
name|i
index|]
argument_list|,
name|testDesc
operator|.
name|bigTableKeyColumnNames
index|[
name|i
index|]
argument_list|,
literal|"B"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|keyMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|keyMap
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|keyExpr
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|smallTableExpr
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDesc
operator|.
name|smallTableValueColumnNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|smallTableExpr
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|testDesc
operator|.
name|smallTableValueTypeInfos
index|[
name|i
index|]
argument_list|,
name|testDesc
operator|.
name|smallTableValueColumnNames
index|[
name|i
index|]
argument_list|,
literal|"S"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|keyMap
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|smallTableExpr
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setKeys
argument_list|(
name|keyMap
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setExprs
argument_list|(
name|keyMap
argument_list|)
expr_stmt|;
name|Byte
index|[]
name|order
init|=
operator|new
name|Byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0
block|,
operator|(
name|byte
operator|)
literal|1
block|}
decl_stmt|;
name|mapJoinDesc
operator|.
name|setTagOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setNoOuterJoin
argument_list|(
name|testDesc
operator|.
name|vectorMapJoinVariation
operator|!=
name|VectorMapJoinVariation
operator|.
name|OUTER
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|filterMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|filterMap
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// None.
name|mapJoinDesc
operator|.
name|setFilters
argument_list|(
name|filterMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|bigTableRetainColumnNumsList
init|=
name|intArrayToList
argument_list|(
name|testDesc
operator|.
name|bigTableRetainColumnNums
argument_list|)
decl_stmt|;
comment|// For now, just small table values...
name|List
argument_list|<
name|Integer
argument_list|>
name|smallTableRetainColumnNumsList
init|=
name|intArrayToList
argument_list|(
name|testDesc
operator|.
name|smallTableRetainValueColumnNums
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|retainListMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|retainListMap
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|bigTableRetainColumnNumsList
argument_list|)
expr_stmt|;
name|retainListMap
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|smallTableRetainColumnNumsList
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setRetainList
argument_list|(
name|retainListMap
argument_list|)
expr_stmt|;
name|int
name|joinDescType
decl_stmt|;
switch|switch
condition|(
name|testDesc
operator|.
name|vectorMapJoinVariation
condition|)
block|{
case|case
name|INNER
case|:
case|case
name|INNER_BIG_ONLY
case|:
name|joinDescType
operator|=
name|JoinDesc
operator|.
name|INNER_JOIN
expr_stmt|;
break|break;
case|case
name|LEFT_SEMI
case|:
name|joinDescType
operator|=
name|JoinDesc
operator|.
name|LEFT_SEMI_JOIN
expr_stmt|;
break|break;
case|case
name|OUTER
case|:
name|joinDescType
operator|=
name|JoinDesc
operator|.
name|LEFT_OUTER_JOIN
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown operator variation "
operator|+
name|testDesc
operator|.
name|vectorMapJoinVariation
argument_list|)
throw|;
block|}
name|JoinCondDesc
index|[]
name|conds
init|=
operator|new
name|JoinCondDesc
index|[
literal|1
index|]
decl_stmt|;
name|conds
index|[
literal|0
index|]
operator|=
operator|new
name|JoinCondDesc
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|joinDescType
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setConds
argument_list|(
name|conds
argument_list|)
expr_stmt|;
name|TableDesc
name|keyTableDesc
init|=
name|PlanUtils
operator|.
name|getMapJoinKeyTableDesc
argument_list|(
name|testDesc
operator|.
name|hiveConf
argument_list|,
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|keyExpr
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|mapJoinDesc
operator|.
name|setKeyTblDesc
argument_list|(
name|keyTableDesc
argument_list|)
expr_stmt|;
name|TableDesc
name|valueTableDesc
init|=
name|PlanUtils
operator|.
name|getMapJoinValueTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|smallTableExpr
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|TableDesc
argument_list|>
name|valueTableDescsList
init|=
operator|new
name|ArrayList
argument_list|<
name|TableDesc
argument_list|>
argument_list|()
decl_stmt|;
name|valueTableDescsList
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|valueTableDescsList
operator|.
name|add
argument_list|(
name|valueTableDesc
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setValueTblDescs
argument_list|(
name|valueTableDescsList
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setValueFilteredTblDescs
argument_list|(
name|valueTableDescsList
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setOutputColumnNames
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|testDesc
operator|.
name|outputColumnNames
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mapJoinDesc
return|;
block|}
specifier|public
specifier|static
name|VectorMapJoinDesc
name|createVectorMapJoinDesc
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|)
block|{
name|VectorMapJoinDesc
name|vectorDesc
init|=
operator|new
name|VectorMapJoinDesc
argument_list|()
decl_stmt|;
name|vectorDesc
operator|.
name|setHashTableImplementationType
argument_list|(
name|HashTableImplementationType
operator|.
name|FAST
argument_list|)
expr_stmt|;
name|HashTableKind
name|hashTableKind
decl_stmt|;
switch|switch
condition|(
name|testDesc
operator|.
name|vectorMapJoinVariation
condition|)
block|{
case|case
name|INNER
case|:
name|hashTableKind
operator|=
name|HashTableKind
operator|.
name|HASH_MAP
expr_stmt|;
break|break;
case|case
name|INNER_BIG_ONLY
case|:
name|hashTableKind
operator|=
name|HashTableKind
operator|.
name|HASH_MULTISET
expr_stmt|;
break|break;
case|case
name|LEFT_SEMI
case|:
name|hashTableKind
operator|=
name|HashTableKind
operator|.
name|HASH_SET
expr_stmt|;
break|break;
case|case
name|OUTER
case|:
name|hashTableKind
operator|=
name|HashTableKind
operator|.
name|HASH_MAP
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown operator variation "
operator|+
name|testDesc
operator|.
name|vectorMapJoinVariation
argument_list|)
throw|;
block|}
name|vectorDesc
operator|.
name|setHashTableKind
argument_list|(
name|hashTableKind
argument_list|)
expr_stmt|;
name|HashTableKeyType
name|hashTableKeyType
init|=
name|HashTableKeyType
operator|.
name|MULTI_KEY
decl_stmt|;
comment|// Assume.
if|if
condition|(
name|testDesc
operator|.
name|bigTableKeyTypeInfos
operator|.
name|length
operator|==
literal|1
condition|)
block|{
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|testDesc
operator|.
name|bigTableKeyTypeInfos
index|[
literal|0
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
name|hashTableKeyType
operator|=
name|HashTableKeyType
operator|.
name|LONG
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|hashTableKeyType
operator|=
name|HashTableKeyType
operator|.
name|STRING
expr_stmt|;
break|break;
default|default:
comment|// Stay with MULTI_KEY
block|}
block|}
name|vectorDesc
operator|.
name|setHashTableKeyType
argument_list|(
name|hashTableKeyType
argument_list|)
expr_stmt|;
name|vectorDesc
operator|.
name|setVectorMapJoinVariation
argument_list|(
name|testDesc
operator|.
name|vectorMapJoinVariation
argument_list|)
expr_stmt|;
name|vectorDesc
operator|.
name|setMinMaxEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|VectorMapJoinInfo
name|vectorMapJoinInfo
init|=
operator|new
name|VectorMapJoinInfo
argument_list|()
decl_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableKeyColumnMap
argument_list|(
name|testDesc
operator|.
name|bigTableKeyColumnNums
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableKeyColumnNames
argument_list|(
name|testDesc
operator|.
name|bigTableKeyColumnNames
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableKeyTypeInfos
argument_list|(
name|testDesc
operator|.
name|bigTableKeyTypeInfos
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableKeyExpressions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableValueColumnMap
argument_list|(
operator|new
name|int
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableValueColumnNames
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableValueTypeInfos
argument_list|(
operator|new
name|TypeInfo
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableValueExpressions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|VectorColumnSourceMapping
name|projectionMapping
init|=
operator|new
name|VectorColumnSourceMapping
argument_list|(
literal|"Projection Mapping"
argument_list|)
decl_stmt|;
name|VectorColumnOutputMapping
name|bigTableRetainedMapping
init|=
operator|new
name|VectorColumnOutputMapping
argument_list|(
literal|"Big Table Retained Mapping"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDesc
operator|.
name|bigTableTypeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bigTableRetainedMapping
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|testDesc
operator|.
name|bigTableTypeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|projectionMapping
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|testDesc
operator|.
name|bigTableKeyTypeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|VectorColumnOutputMapping
name|bigTableOuterKeyMapping
init|=
operator|new
name|VectorColumnOutputMapping
argument_list|(
literal|"Big Table Outer Key Mapping"
argument_list|)
decl_stmt|;
comment|// The order of the fields in the LazyBinary small table value must be used, so
comment|// we use the source ordering flavor for the mapping.
name|VectorColumnSourceMapping
name|smallTableMapping
init|=
operator|new
name|VectorColumnSourceMapping
argument_list|(
literal|"Small Table Mapping"
argument_list|)
decl_stmt|;
name|int
name|outputColumn
init|=
name|testDesc
operator|.
name|bigTableTypeInfos
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDesc
operator|.
name|smallTableValueTypeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|smallTableMapping
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|outputColumn
argument_list|,
name|testDesc
operator|.
name|smallTableValueTypeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|projectionMapping
operator|.
name|add
argument_list|(
name|outputColumn
argument_list|,
name|outputColumn
argument_list|,
name|testDesc
operator|.
name|smallTableValueTypeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|outputColumn
operator|++
expr_stmt|;
block|}
comment|// Convert dynamic arrays and maps to simple arrays.
name|bigTableRetainedMapping
operator|.
name|finalize
argument_list|()
expr_stmt|;
name|bigTableOuterKeyMapping
operator|.
name|finalize
argument_list|()
expr_stmt|;
name|smallTableMapping
operator|.
name|finalize
argument_list|()
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableRetainedMapping
argument_list|(
name|bigTableRetainedMapping
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableOuterKeyMapping
argument_list|(
name|bigTableOuterKeyMapping
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setSmallTableMapping
argument_list|(
name|smallTableMapping
argument_list|)
expr_stmt|;
name|projectionMapping
operator|.
name|finalize
argument_list|()
expr_stmt|;
comment|// Verify we added an entry for each output.
assert|assert
name|projectionMapping
operator|.
name|isSourceSequenceGood
argument_list|()
assert|;
name|vectorMapJoinInfo
operator|.
name|setProjectionMapping
argument_list|(
name|projectionMapping
argument_list|)
expr_stmt|;
assert|assert
name|projectionMapping
operator|.
name|getCount
argument_list|()
operator|==
name|testDesc
operator|.
name|outputColumnNames
operator|.
name|length
assert|;
name|vectorDesc
operator|.
name|setVectorMapJoinInfo
argument_list|(
name|vectorMapJoinInfo
argument_list|)
expr_stmt|;
return|return
name|vectorDesc
return|;
block|}
specifier|public
specifier|static
name|VectorMapJoinCommonOperator
name|createNativeVectorMapJoinOperator
parameter_list|(
name|VectorMapJoinVariation
name|VectorMapJoinVariation
parameter_list|,
name|MapJoinDesc
name|mapJoinDesc
parameter_list|,
name|VectorMapJoinDesc
name|vectorDesc
parameter_list|,
name|VectorizationContext
name|vContext
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorMapJoinCommonOperator
name|operator
decl_stmt|;
switch|switch
condition|(
name|vectorDesc
operator|.
name|getHashTableKeyType
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
switch|switch
condition|(
name|VectorMapJoinVariation
condition|)
block|{
case|case
name|INNER
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinInnerLongOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|INNER_BIG_ONLY
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinInnerBigOnlyLongOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEFT_SEMI
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinLeftSemiLongOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|OUTER
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinOuterLongOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown operator variation "
operator|+
name|VectorMapJoinVariation
argument_list|)
throw|;
block|}
break|break;
case|case
name|STRING
case|:
switch|switch
condition|(
name|VectorMapJoinVariation
condition|)
block|{
case|case
name|INNER
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinInnerStringOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|INNER_BIG_ONLY
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinInnerBigOnlyStringOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEFT_SEMI
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinLeftSemiStringOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|OUTER
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinOuterStringOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown operator variation "
operator|+
name|VectorMapJoinVariation
argument_list|)
throw|;
block|}
break|break;
case|case
name|MULTI_KEY
case|:
switch|switch
condition|(
name|VectorMapJoinVariation
condition|)
block|{
case|case
name|INNER
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinInnerMultiKeyOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|INNER_BIG_ONLY
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinInnerBigOnlyMultiKeyOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEFT_SEMI
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinLeftSemiMultiKeyOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|OUTER
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinOuterMultiKeyOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown operator variation "
operator|+
name|VectorMapJoinVariation
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown hash table key type "
operator|+
name|vectorDesc
operator|.
name|getHashTableKeyType
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|operator
return|;
block|}
specifier|public
specifier|static
name|VectorizationContext
name|createVectorizationContext
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorizationContext
name|vContext
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"test"
argument_list|,
name|testDesc
operator|.
name|bigTableColumnNamesList
argument_list|)
decl_stmt|;
comment|// Create scratch columns to hold small table results.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDesc
operator|.
name|smallTableValueTypeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|vContext
operator|.
name|allocateScratchColumn
argument_list|(
name|testDesc
operator|.
name|smallTableValueTypeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|vContext
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasFilter
parameter_list|(
name|MapJoinDesc
name|mapJoinDesc
parameter_list|,
name|int
name|alias
parameter_list|)
block|{
name|int
index|[]
index|[]
name|filterMaps
init|=
name|mapJoinDesc
operator|.
name|getFilterMap
argument_list|()
decl_stmt|;
return|return
name|filterMaps
operator|!=
literal|null
operator|&&
name|filterMaps
index|[
name|alias
index|]
operator|!=
literal|null
return|;
block|}
specifier|public
specifier|static
name|MapJoinTableContainerSerDe
name|createMapJoinTableContainerSerDe
parameter_list|(
name|MapJoinDesc
name|mapJoinDesc
parameter_list|)
throws|throws
name|SerDeException
block|{
specifier|final
name|Byte
name|smallTablePos
init|=
literal|1
decl_stmt|;
comment|// UNDONE: Why do we need to specify BinarySortableSerDe explicitly here???
name|TableDesc
name|keyTableDesc
init|=
name|mapJoinDesc
operator|.
name|getKeyTblDesc
argument_list|()
decl_stmt|;
name|AbstractSerDe
name|keySerializer
init|=
operator|(
name|AbstractSerDe
operator|)
name|ReflectionUtil
operator|.
name|newInstance
argument_list|(
name|BinarySortableSerDe
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|keySerializer
argument_list|,
literal|null
argument_list|,
name|keyTableDesc
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MapJoinObjectSerDeContext
name|keyContext
init|=
operator|new
name|MapJoinObjectSerDeContext
argument_list|(
name|keySerializer
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TableDesc
name|valueTableDesc
decl_stmt|;
if|if
condition|(
name|mapJoinDesc
operator|.
name|getNoOuterJoin
argument_list|()
condition|)
block|{
name|valueTableDesc
operator|=
name|mapJoinDesc
operator|.
name|getValueTblDescs
argument_list|()
operator|.
name|get
argument_list|(
name|smallTablePos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|valueTableDesc
operator|=
name|mapJoinDesc
operator|.
name|getValueFilteredTblDescs
argument_list|()
operator|.
name|get
argument_list|(
name|smallTablePos
argument_list|)
expr_stmt|;
block|}
name|AbstractSerDe
name|valueSerDe
init|=
operator|(
name|AbstractSerDe
operator|)
name|ReflectionUtil
operator|.
name|newInstance
argument_list|(
name|valueTableDesc
operator|.
name|getDeserializerClass
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|valueSerDe
argument_list|,
literal|null
argument_list|,
name|valueTableDesc
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MapJoinObjectSerDeContext
name|valueContext
init|=
operator|new
name|MapJoinObjectSerDeContext
argument_list|(
name|valueSerDe
argument_list|,
name|hasFilter
argument_list|(
name|mapJoinDesc
argument_list|,
name|smallTablePos
argument_list|)
argument_list|)
decl_stmt|;
name|MapJoinTableContainerSerDe
name|mapJoinTableContainerSerDe
init|=
operator|new
name|MapJoinTableContainerSerDe
argument_list|(
name|keyContext
argument_list|,
name|valueContext
argument_list|)
decl_stmt|;
return|return
name|mapJoinTableContainerSerDe
return|;
block|}
specifier|public
specifier|static
name|void
name|connectOperators
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|operator
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|testCollectorOperator
parameter_list|)
throws|throws
name|HiveException
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
index|[]
name|parents
init|=
operator|new
name|Operator
index|[]
block|{
name|operator
block|}
decl_stmt|;
name|testCollectorOperator
operator|.
name|setParentOperators
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|parents
argument_list|)
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
index|[]
name|childOperators
init|=
operator|new
name|Operator
index|[]
block|{
name|testCollectorOperator
block|}
decl_stmt|;
name|operator
operator|.
name|setChildOperators
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|childOperators
argument_list|)
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|testDesc
operator|.
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_MAPJOIN_TESTING_NO_HASH_TABLE_LOAD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|operator
operator|.
name|initialize
argument_list|(
name|testDesc
operator|.
name|hiveConf
argument_list|,
name|testDesc
operator|.
name|inputObjectInspectors
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|intArrayToList
parameter_list|(
name|int
index|[]
name|intArray
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|intList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|intArray
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|intArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|intList
operator|.
name|add
argument_list|(
name|intArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|intList
return|;
block|}
specifier|private
specifier|static
name|void
name|loadTableContainerData
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|,
name|MapJoinTableContainer
name|mapJoinTableContainer
parameter_list|)
throws|throws
name|IOException
throws|,
name|SerDeException
throws|,
name|HiveException
block|{
name|LazyBinarySerializeWrite
name|valueSerializeWrite
init|=
literal|null
decl_stmt|;
name|Output
name|valueOutput
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|testData
operator|.
name|smallTableValues
operator|!=
literal|null
condition|)
block|{
name|valueSerializeWrite
operator|=
operator|new
name|LazyBinarySerializeWrite
argument_list|(
name|testDesc
operator|.
name|smallTableValueTypeInfos
operator|.
name|length
argument_list|)
expr_stmt|;
name|valueOutput
operator|=
operator|new
name|Output
argument_list|()
expr_stmt|;
block|}
name|BytesWritable
name|valueBytesWritable
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|BytesWritable
name|keyBytesWritable
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|BinarySortableSerializeWrite
name|keySerializeWrite
init|=
operator|new
name|BinarySortableSerializeWrite
argument_list|(
name|testDesc
operator|.
name|bigTableKeyTypeInfos
operator|.
name|length
argument_list|)
decl_stmt|;
name|Output
name|keyOutput
init|=
operator|new
name|Output
argument_list|()
decl_stmt|;
name|int
name|round
init|=
literal|0
decl_stmt|;
name|boolean
name|atLeastOneValueAdded
init|=
literal|false
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|RowTestObjects
argument_list|,
name|Integer
argument_list|>
name|testRowEntry
range|:
name|testData
operator|.
name|smallTableKeyHashMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|int
name|smallTableKeyIndex
init|=
name|testRowEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|int
name|valueCount
init|=
name|testData
operator|.
name|smallTableValueCounts
operator|.
name|get
argument_list|(
name|smallTableKeyIndex
argument_list|)
decl_stmt|;
name|boolean
name|addEntry
init|=
name|round
operator|+
literal|1
operator|<=
name|valueCount
decl_stmt|;
if|if
condition|(
name|addEntry
condition|)
block|{
name|atLeastOneValueAdded
operator|=
literal|true
expr_stmt|;
name|RowTestObjects
name|valueRow
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|testData
operator|.
name|smallTableValues
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|RowTestObjects
argument_list|>
name|valueList
init|=
name|testData
operator|.
name|smallTableValues
operator|.
name|get
argument_list|(
name|smallTableKeyIndex
argument_list|)
decl_stmt|;
name|valueRow
operator|=
name|valueList
operator|.
name|get
argument_list|(
name|round
argument_list|)
expr_stmt|;
block|}
name|Object
index|[]
name|smallTableKey
init|=
name|testRowEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|keyOutput
operator|.
name|reset
argument_list|()
expr_stmt|;
name|keySerializeWrite
operator|.
name|set
argument_list|(
name|keyOutput
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|testDesc
operator|.
name|bigTableKeyTypeInfos
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|Writable
name|keyWritable
init|=
operator|(
name|Writable
operator|)
name|smallTableKey
index|[
name|index
index|]
decl_stmt|;
name|VerifyFastRow
operator|.
name|serializeWrite
argument_list|(
name|keySerializeWrite
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|testDesc
operator|.
name|bigTableKeyTypeInfos
index|[
name|index
index|]
argument_list|,
name|keyWritable
argument_list|)
expr_stmt|;
block|}
name|keyBytesWritable
operator|.
name|set
argument_list|(
name|keyOutput
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|keyOutput
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|valueRow
operator|==
literal|null
condition|)
block|{
comment|// Empty value.
name|mapJoinTableContainer
operator|.
name|putRow
argument_list|(
name|keyBytesWritable
argument_list|,
name|valueBytesWritable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
index|[]
name|smallTableValue
init|=
name|valueRow
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|valueOutput
operator|.
name|reset
argument_list|()
expr_stmt|;
name|valueSerializeWrite
operator|.
name|set
argument_list|(
name|valueOutput
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|testDesc
operator|.
name|smallTableValueTypeInfos
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|Writable
name|valueWritable
init|=
operator|(
name|Writable
operator|)
name|smallTableValue
index|[
name|index
index|]
decl_stmt|;
name|VerifyFastRow
operator|.
name|serializeWrite
argument_list|(
name|valueSerializeWrite
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|testDesc
operator|.
name|smallTableValueTypeInfos
index|[
name|index
index|]
argument_list|,
name|valueWritable
argument_list|)
expr_stmt|;
block|}
name|valueBytesWritable
operator|.
name|set
argument_list|(
name|valueOutput
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|valueOutput
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|mapJoinTableContainer
operator|.
name|putRow
argument_list|(
name|keyBytesWritable
argument_list|,
name|valueBytesWritable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|testData
operator|.
name|smallTableValues
operator|==
literal|null
operator|||
operator|!
name|atLeastOneValueAdded
condition|)
block|{
break|break;
block|}
name|round
operator|++
expr_stmt|;
name|atLeastOneValueAdded
operator|=
literal|false
expr_stmt|;
block|}
name|mapJoinTableContainer
operator|.
name|seal
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|MapJoinOperator
name|createMapJoin
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|collectorOperator
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|,
name|MapJoinDesc
name|mapJoinDesc
parameter_list|,
name|boolean
name|isVectorMapJoin
parameter_list|,
name|boolean
name|isOriginalMapJoin
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
throws|,
name|HiveException
block|{
specifier|final
name|Byte
name|bigTablePos
init|=
literal|0
decl_stmt|;
name|MapJoinTableContainerSerDe
name|mapJoinTableContainerSerDe
init|=
name|MapJoinTestConfig
operator|.
name|createMapJoinTableContainerSerDe
argument_list|(
name|mapJoinDesc
argument_list|)
decl_stmt|;
name|MapJoinObjectSerDeContext
name|valCtx
init|=
name|mapJoinTableContainerSerDe
operator|.
name|getValueContext
argument_list|()
decl_stmt|;
name|MapJoinTableContainer
name|mapJoinTableContainer
init|=
operator|(
name|isOriginalMapJoin
condition|?
operator|new
name|HashMapWrapper
argument_list|(
name|testDesc
operator|.
name|hiveConf
argument_list|,
operator|-
literal|1
argument_list|)
else|:
operator|new
name|MapJoinBytesTableContainer
argument_list|(
name|testDesc
operator|.
name|hiveConf
argument_list|,
name|valCtx
argument_list|,
name|testData
operator|.
name|smallTableKeyHashMap
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|)
decl_stmt|;
name|mapJoinTableContainer
operator|.
name|setSerde
argument_list|(
name|mapJoinTableContainerSerDe
operator|.
name|getKeyContext
argument_list|()
argument_list|,
name|mapJoinTableContainerSerDe
operator|.
name|getValueContext
argument_list|()
argument_list|)
expr_stmt|;
name|loadTableContainerData
argument_list|(
name|testDesc
argument_list|,
name|testData
argument_list|,
name|mapJoinTableContainer
argument_list|)
expr_stmt|;
name|MapJoinOperator
name|operator
decl_stmt|;
if|if
condition|(
operator|!
name|isVectorMapJoin
condition|)
block|{
name|operator
operator|=
operator|new
name|MapJoinOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|)
expr_stmt|;
name|operator
operator|.
name|setConf
argument_list|(
name|mapJoinDesc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|VectorizationContext
name|vContext
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"test"
argument_list|,
name|testDesc
operator|.
name|bigTableColumnNamesList
argument_list|)
decl_stmt|;
comment|// Create scratch columns to hold small table results.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDesc
operator|.
name|smallTableValueTypeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|vContext
operator|.
name|allocateScratchColumn
argument_list|(
name|testDesc
operator|.
name|smallTableValueTypeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// This is what the Vectorizer class does.
name|VectorMapJoinDesc
name|vectorMapJoinDesc
init|=
operator|new
name|VectorMapJoinDesc
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bigTableFilters
init|=
name|mapJoinDesc
operator|.
name|getFilters
argument_list|()
operator|.
name|get
argument_list|(
name|bigTablePos
argument_list|)
decl_stmt|;
name|boolean
name|isOuterAndFiltered
init|=
operator|(
operator|!
name|mapJoinDesc
operator|.
name|isNoOuterJoin
argument_list|()
operator|&&
name|bigTableFilters
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|isOuterAndFiltered
condition|)
block|{
name|operator
operator|=
operator|new
name|VectorMapJoinOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorMapJoinDesc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operator
operator|=
operator|new
name|VectorMapJoinOuterFilteredOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorMapJoinDesc
argument_list|)
expr_stmt|;
block|}
block|}
name|MapJoinTestConfig
operator|.
name|connectOperators
argument_list|(
name|testDesc
argument_list|,
name|operator
argument_list|,
name|collectorOperator
argument_list|)
expr_stmt|;
name|operator
operator|.
name|setTestMapJoinTableContainer
argument_list|(
literal|1
argument_list|,
name|mapJoinTableContainer
argument_list|,
name|mapJoinTableContainerSerDe
argument_list|)
expr_stmt|;
return|return
name|operator
return|;
block|}
specifier|public
specifier|static
name|MapJoinOperator
name|createNativeVectorMapJoin
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|collectorOperator
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|,
name|MapJoinDesc
name|mapJoinDesc
parameter_list|,
name|HashTableImplementationType
name|hashTableImplementationType
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
throws|,
name|HiveException
block|{
name|VectorMapJoinDesc
name|vectorDesc
init|=
name|MapJoinTestConfig
operator|.
name|createVectorMapJoinDesc
argument_list|(
name|testDesc
argument_list|)
decl_stmt|;
comment|// UNDONE
name|mapJoinDesc
operator|.
name|setVectorDesc
argument_list|(
name|vectorDesc
argument_list|)
expr_stmt|;
name|vectorDesc
operator|.
name|setHashTableImplementationType
argument_list|(
name|hashTableImplementationType
argument_list|)
expr_stmt|;
name|VectorMapJoinInfo
name|vectorMapJoinInfo
init|=
name|vectorDesc
operator|.
name|getVectorMapJoinInfo
argument_list|()
decl_stmt|;
name|MapJoinTableContainer
name|mapJoinTableContainer
decl_stmt|;
switch|switch
condition|(
name|vectorDesc
operator|.
name|getHashTableImplementationType
argument_list|()
condition|)
block|{
case|case
name|OPTIMIZED
case|:
name|mapJoinTableContainer
operator|=
operator|new
name|MapJoinBytesTableContainer
argument_list|(
name|testDesc
operator|.
name|hiveConf
argument_list|,
literal|null
argument_list|,
name|testData
operator|.
name|smallTableKeyHashMap
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|MapJoinTableContainerSerDe
name|mapJoinTableContainerSerDe
init|=
name|MapJoinTestConfig
operator|.
name|createMapJoinTableContainerSerDe
argument_list|(
name|mapJoinDesc
argument_list|)
decl_stmt|;
name|mapJoinTableContainer
operator|.
name|setSerde
argument_list|(
name|mapJoinTableContainerSerDe
operator|.
name|getKeyContext
argument_list|()
argument_list|,
name|mapJoinTableContainerSerDe
operator|.
name|getValueContext
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FAST
case|:
name|mapJoinTableContainer
operator|=
operator|new
name|VectorMapJoinFastTableContainer
argument_list|(
name|mapJoinDesc
argument_list|,
name|testDesc
operator|.
name|hiveConf
argument_list|,
name|testData
operator|.
name|smallTableKeyHashMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected hash table implementation type "
operator|+
name|vectorDesc
operator|.
name|getHashTableImplementationType
argument_list|()
argument_list|)
throw|;
block|}
name|loadTableContainerData
argument_list|(
name|testDesc
argument_list|,
name|testData
argument_list|,
name|mapJoinTableContainer
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vContext
init|=
name|MapJoinTestConfig
operator|.
name|createVectorizationContext
argument_list|(
name|testDesc
argument_list|)
decl_stmt|;
name|VectorMapJoinCommonOperator
name|operator
init|=
name|MapJoinTestConfig
operator|.
name|createNativeVectorMapJoinOperator
argument_list|(
name|testDesc
operator|.
name|vectorMapJoinVariation
argument_list|,
name|mapJoinDesc
argument_list|,
name|vectorDesc
argument_list|,
name|vContext
argument_list|)
decl_stmt|;
name|MapJoinTestConfig
operator|.
name|connectOperators
argument_list|(
name|testDesc
argument_list|,
name|operator
argument_list|,
name|collectorOperator
argument_list|)
expr_stmt|;
name|operator
operator|.
name|setTestMapJoinTableContainer
argument_list|(
literal|1
argument_list|,
name|mapJoinTableContainer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|operator
return|;
block|}
specifier|public
specifier|static
name|MapJoinOperator
name|createMapJoinImplementation
parameter_list|(
name|MapJoinTestImplementation
name|mapJoinImplementation
parameter_list|,
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|testCollectorOperator
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|,
name|MapJoinDesc
name|mapJoinDesc
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
throws|,
name|HiveException
block|{
name|MapJoinOperator
name|operator
decl_stmt|;
switch|switch
condition|(
name|mapJoinImplementation
condition|)
block|{
case|case
name|ROW_MODE_HASH_MAP
case|:
comment|// MapJoinOperator
name|operator
operator|=
name|MapJoinTestConfig
operator|.
name|createMapJoin
argument_list|(
name|testDesc
argument_list|,
name|testCollectorOperator
argument_list|,
name|testData
argument_list|,
name|mapJoinDesc
argument_list|,
comment|/* isVectorMapJoin */
literal|false
argument_list|,
comment|/* isOriginalMapJoin */
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|ROW_MODE_OPTIMIZED
case|:
comment|// MapJoinOperator
name|operator
operator|=
name|MapJoinTestConfig
operator|.
name|createMapJoin
argument_list|(
name|testDesc
argument_list|,
name|testCollectorOperator
argument_list|,
name|testData
argument_list|,
name|mapJoinDesc
argument_list|,
comment|/* isVectorMapJoin */
literal|false
argument_list|,
comment|/* isOriginalMapJoin */
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|VECTOR_PASS_THROUGH
case|:
comment|// VectorMapJoinOperator
name|operator
operator|=
name|MapJoinTestConfig
operator|.
name|createMapJoin
argument_list|(
name|testDesc
argument_list|,
name|testCollectorOperator
argument_list|,
name|testData
argument_list|,
name|mapJoinDesc
argument_list|,
comment|/* isVectorMapJoin */
literal|true
argument_list|,
comment|/* n/a */
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|NATIVE_VECTOR_OPTIMIZED
case|:
name|operator
operator|=
name|MapJoinTestConfig
operator|.
name|createNativeVectorMapJoin
argument_list|(
name|testDesc
argument_list|,
name|testCollectorOperator
argument_list|,
name|testData
argument_list|,
name|mapJoinDesc
argument_list|,
name|HashTableImplementationType
operator|.
name|OPTIMIZED
argument_list|)
expr_stmt|;
break|break;
case|case
name|NATIVE_VECTOR_FAST
case|:
name|operator
operator|=
name|MapJoinTestConfig
operator|.
name|createNativeVectorMapJoin
argument_list|(
name|testDesc
argument_list|,
name|testCollectorOperator
argument_list|,
name|testData
argument_list|,
name|mapJoinDesc
argument_list|,
name|HashTableImplementationType
operator|.
name|FAST
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected MapJoin Operator Implementation "
operator|+
name|mapJoinImplementation
argument_list|)
throw|;
block|}
return|return
name|operator
return|;
block|}
block|}
end_class

end_unit

