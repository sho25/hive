begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|DataTypePhysicalVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|HashMapWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinBytesTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinObjectSerDeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainerSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|collectoroperator
operator|.
name|CollectorTestOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|collectoroperator
operator|.
name|CountCollectorTestOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|collectoroperator
operator|.
name|RowCollectorTestOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|collectoroperator
operator|.
name|RowCollectorTestOperatorBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|collectoroperator
operator|.
name|RowVectorCollectorTestOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|rowobjects
operator|.
name|RowTestObjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|rowobjects
operator|.
name|RowTestObjectsMultiSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorColumnOutputMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorColumnSourceMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorMapJoinBaseOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorMapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorMapJoinOuterFilteredOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContextRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
operator|.
name|VectorMapJoinFastTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
operator|.
name|VerifyFastRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinCondDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableImplementationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableKeyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|VectorMapJoinVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorSelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|BinarySortableSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|fast
operator|.
name|BinarySortableSerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|fast
operator|.
name|LazyBinarySerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_class
specifier|public
class|class
name|MapJoinTestConfig
block|{
specifier|public
specifier|static
enum|enum
name|MapJoinTestImplementation
block|{
name|ROW_MODE_HASH_MAP
block|,
name|ROW_MODE_OPTIMIZED
block|,
name|VECTOR_PASS_THROUGH
block|,
name|NATIVE_VECTOR_OPTIMIZED
block|,
name|NATIVE_VECTOR_FAST
block|}
specifier|public
specifier|static
name|boolean
name|isVectorOutput
parameter_list|(
name|MapJoinTestImplementation
name|mapJoinImplementation
parameter_list|)
block|{
return|return
operator|(
name|mapJoinImplementation
operator|!=
name|MapJoinTestImplementation
operator|.
name|ROW_MODE_HASH_MAP
operator|&&
name|mapJoinImplementation
operator|!=
name|MapJoinTestImplementation
operator|.
name|ROW_MODE_OPTIMIZED
operator|)
return|;
block|}
comment|/*    * This test collector operator is for MapJoin row-mode.    */
specifier|public
specifier|static
class|class
name|TestMultiSetCollectorOperator
extends|extends
name|RowCollectorTestOperator
block|{
specifier|private
specifier|final
name|RowTestObjectsMultiSet
name|testRowMultiSet
decl_stmt|;
specifier|public
name|TestMultiSetCollectorOperator
parameter_list|(
name|ObjectInspector
index|[]
name|outputObjectInspectors
parameter_list|,
name|RowTestObjectsMultiSet
name|testRowMultiSet
parameter_list|)
block|{
name|super
argument_list|(
name|outputObjectInspectors
argument_list|)
expr_stmt|;
name|this
operator|.
name|testRowMultiSet
operator|=
name|testRowMultiSet
expr_stmt|;
block|}
specifier|public
name|RowTestObjectsMultiSet
name|getTestRowMultiSet
parameter_list|()
block|{
return|return
name|testRowMultiSet
return|;
block|}
specifier|public
name|void
name|nextTestRow
parameter_list|(
name|RowTestObjects
name|testRow
parameter_list|)
block|{
name|testRowMultiSet
operator|.
name|add
argument_list|(
name|testRow
argument_list|,
name|RowTestObjectsMultiSet
operator|.
name|RowFlag
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|TestMultiSetCollectorOperator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TestMultiSetVectorCollectorOperator
extends|extends
name|RowVectorCollectorTestOperator
block|{
specifier|private
specifier|final
name|RowTestObjectsMultiSet
name|testRowMultiSet
decl_stmt|;
specifier|public
name|RowTestObjectsMultiSet
name|getTestRowMultiSet
parameter_list|()
block|{
return|return
name|testRowMultiSet
return|;
block|}
specifier|public
name|TestMultiSetVectorCollectorOperator
parameter_list|(
name|TypeInfo
index|[]
name|outputTypeInfos
parameter_list|,
name|ObjectInspector
index|[]
name|outputObjectInspectors
parameter_list|,
name|RowTestObjectsMultiSet
name|testRowMultiSet
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
argument_list|(
name|outputTypeInfos
argument_list|,
name|outputObjectInspectors
argument_list|)
expr_stmt|;
name|this
operator|.
name|testRowMultiSet
operator|=
name|testRowMultiSet
expr_stmt|;
block|}
specifier|public
name|TestMultiSetVectorCollectorOperator
parameter_list|(
name|int
index|[]
name|outputProjectionColumnNums
parameter_list|,
name|TypeInfo
index|[]
name|outputTypeInfos
parameter_list|,
name|ObjectInspector
index|[]
name|outputObjectInspectors
parameter_list|,
name|RowTestObjectsMultiSet
name|testRowMultiSet
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
argument_list|(
name|outputProjectionColumnNums
argument_list|,
name|outputTypeInfos
argument_list|,
name|outputObjectInspectors
argument_list|)
expr_stmt|;
name|this
operator|.
name|testRowMultiSet
operator|=
name|testRowMultiSet
expr_stmt|;
block|}
specifier|public
name|void
name|nextTestRow
parameter_list|(
name|RowTestObjects
name|testRow
parameter_list|)
block|{
name|testRowMultiSet
operator|.
name|add
argument_list|(
name|testRow
argument_list|,
name|RowTestObjectsMultiSet
operator|.
name|RowFlag
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|TestMultiSetVectorCollectorOperator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|MapJoinDesc
name|createMapJoinDesc
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|)
block|{
return|return
name|createMapJoinDesc
argument_list|(
name|testDesc
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MapJoinDesc
name|createMapJoinDesc
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|boolean
name|isFullOuterIntersect
parameter_list|)
block|{
name|MapJoinDesc
name|mapJoinDesc
init|=
operator|new
name|MapJoinDesc
argument_list|()
decl_stmt|;
name|mapJoinDesc
operator|.
name|setPosBigTable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bigTableKeyExpr
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDesc
operator|.
name|bigTableKeyColumnNums
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bigTableKeyExpr
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|testDesc
operator|.
name|bigTableKeyTypeInfos
index|[
name|i
index|]
argument_list|,
name|testDesc
operator|.
name|bigTableKeyColumnNames
index|[
name|i
index|]
argument_list|,
literal|"B"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|keyMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|keyMap
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|bigTableKeyExpr
argument_list|)
expr_stmt|;
comment|// Big Table expression includes all columns -- keys and extra (value) columns.
comment|// UNDONE: Assumes all values retained...
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bigTableExpr
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDesc
operator|.
name|bigTableColumnNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bigTableExpr
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|testDesc
operator|.
name|bigTableTypeInfos
index|[
name|i
index|]
argument_list|,
name|testDesc
operator|.
name|bigTableColumnNames
index|[
name|i
index|]
argument_list|,
literal|"B"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|exprMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|exprMap
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|bigTableExpr
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|smallTableKeyExpr
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDesc
operator|.
name|smallTableKeyTypeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeColumnDesc
name|exprNodeColumnDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|testDesc
operator|.
name|smallTableKeyTypeInfos
index|[
name|i
index|]
argument_list|,
name|testDesc
operator|.
name|smallTableKeyColumnNames
index|[
name|i
index|]
argument_list|,
literal|"S"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|smallTableKeyExpr
operator|.
name|add
argument_list|(
name|exprNodeColumnDesc
argument_list|)
expr_stmt|;
block|}
comment|// Retained Small Table keys and values.
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|smallTableExpr
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|smallTableRetainKeySize
init|=
name|testDesc
operator|.
name|smallTableRetainKeyColumnNums
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|smallTableRetainKeySize
condition|;
name|i
operator|++
control|)
block|{
name|int
name|smallTableKeyColumnNum
init|=
name|testDesc
operator|.
name|smallTableRetainKeyColumnNums
index|[
name|i
index|]
decl_stmt|;
name|smallTableExpr
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|testDesc
operator|.
name|smallTableTypeInfos
index|[
name|smallTableKeyColumnNum
index|]
argument_list|,
name|testDesc
operator|.
name|smallTableColumnNames
index|[
name|smallTableKeyColumnNum
index|]
argument_list|,
literal|"S"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|smallTableRetainValueSize
init|=
name|testDesc
operator|.
name|smallTableRetainValueColumnNums
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|smallTableRetainValueSize
condition|;
name|i
operator|++
control|)
block|{
name|int
name|smallTableValueColumnNum
init|=
name|smallTableRetainKeySize
operator|+
name|testDesc
operator|.
name|smallTableRetainValueColumnNums
index|[
name|i
index|]
decl_stmt|;
name|smallTableExpr
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|testDesc
operator|.
name|smallTableTypeInfos
index|[
name|smallTableValueColumnNum
index|]
argument_list|,
name|testDesc
operator|.
name|smallTableColumnNames
index|[
name|smallTableValueColumnNum
index|]
argument_list|,
literal|"S"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|keyMap
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|smallTableKeyExpr
argument_list|)
expr_stmt|;
name|exprMap
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|smallTableExpr
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setKeys
argument_list|(
name|keyMap
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setExprs
argument_list|(
name|exprMap
argument_list|)
expr_stmt|;
name|Byte
index|[]
name|order
init|=
operator|new
name|Byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0
block|,
operator|(
name|byte
operator|)
literal|1
block|}
decl_stmt|;
name|mapJoinDesc
operator|.
name|setTagOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setNoOuterJoin
argument_list|(
name|testDesc
operator|.
name|vectorMapJoinVariation
operator|!=
name|VectorMapJoinVariation
operator|.
name|OUTER
operator|&&
name|testDesc
operator|.
name|vectorMapJoinVariation
operator|!=
name|VectorMapJoinVariation
operator|.
name|FULL_OUTER
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|filterMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|filterMap
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// None.
name|mapJoinDesc
operator|.
name|setFilters
argument_list|(
name|filterMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|bigTableRetainColumnNumsList
init|=
name|intArrayToList
argument_list|(
name|testDesc
operator|.
name|bigTableRetainColumnNums
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|retainListMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|retainListMap
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|bigTableRetainColumnNumsList
argument_list|)
expr_stmt|;
comment|// For now, just small table keys/values...
if|if
condition|(
name|testDesc
operator|.
name|smallTableRetainKeyColumnNums
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// Just the value columns numbers with retain.
name|List
argument_list|<
name|Integer
argument_list|>
name|smallTableValueRetainColumnNumsList
init|=
name|intArrayToList
argument_list|(
name|testDesc
operator|.
name|smallTableRetainValueColumnNums
argument_list|)
decl_stmt|;
name|retainListMap
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|smallTableValueRetainColumnNumsList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Both the key/value columns numbers.
comment|// Zero and above numbers indicate a big table key is needed for
comment|// small table result "area".
comment|// Negative numbers indicate a column to be (deserialize) read from the small table's
comment|// LazyBinary value row.
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|smallTableValueIndicesNumsList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
empty_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDesc
operator|.
name|smallTableRetainKeyColumnNums
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|smallTableValueIndicesNumsList
operator|.
name|add
argument_list|(
name|testDesc
operator|.
name|smallTableRetainKeyColumnNums
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDesc
operator|.
name|smallTableRetainValueColumnNums
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|smallTableValueIndicesNumsList
operator|.
name|add
argument_list|(
operator|-
name|testDesc
operator|.
name|smallTableRetainValueColumnNums
index|[
name|i
index|]
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|smallTableValueIndicesNums
init|=
name|ArrayUtils
operator|.
name|toPrimitive
argument_list|(
name|smallTableValueIndicesNumsList
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|int
index|[]
argument_list|>
name|valueIndicesMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|valueIndicesMap
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|smallTableValueIndicesNums
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setValueIndices
argument_list|(
name|valueIndicesMap
argument_list|)
expr_stmt|;
block|}
name|mapJoinDesc
operator|.
name|setRetainList
argument_list|(
name|retainListMap
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|testDesc
operator|.
name|mapJoinPlanVariation
condition|)
block|{
case|case
name|DYNAMIC_PARTITION_HASH_JOIN
case|:
comment|// FULL OUTER which behaves differently for dynamic partition hash join.
name|mapJoinDesc
operator|.
name|setDynamicPartitionHashJoin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected map join plan variation "
operator|+
name|testDesc
operator|.
name|mapJoinPlanVariation
argument_list|)
throw|;
block|}
name|int
name|joinDescType
decl_stmt|;
switch|switch
condition|(
name|testDesc
operator|.
name|vectorMapJoinVariation
condition|)
block|{
case|case
name|INNER
case|:
case|case
name|INNER_BIG_ONLY
case|:
name|joinDescType
operator|=
name|JoinDesc
operator|.
name|INNER_JOIN
expr_stmt|;
break|break;
case|case
name|LEFT_SEMI
case|:
name|joinDescType
operator|=
name|JoinDesc
operator|.
name|LEFT_SEMI_JOIN
expr_stmt|;
break|break;
case|case
name|OUTER
case|:
name|joinDescType
operator|=
name|JoinDesc
operator|.
name|LEFT_OUTER_JOIN
expr_stmt|;
break|break;
case|case
name|FULL_OUTER
case|:
name|joinDescType
operator|=
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown operator variation "
operator|+
name|testDesc
operator|.
name|vectorMapJoinVariation
argument_list|)
throw|;
block|}
name|JoinCondDesc
index|[]
name|conds
init|=
operator|new
name|JoinCondDesc
index|[
literal|1
index|]
decl_stmt|;
name|conds
index|[
literal|0
index|]
operator|=
operator|new
name|JoinCondDesc
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|joinDescType
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setConds
argument_list|(
name|conds
argument_list|)
expr_stmt|;
name|TableDesc
name|keyTableDesc
init|=
name|PlanUtils
operator|.
name|getMapJoinKeyTableDesc
argument_list|(
name|testDesc
operator|.
name|hiveConf
argument_list|,
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|smallTableKeyExpr
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|mapJoinDesc
operator|.
name|setKeyTblDesc
argument_list|(
name|keyTableDesc
argument_list|)
expr_stmt|;
comment|// Small Table expression value columns.
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|smallTableValueExpr
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
comment|// All Small Table keys and values.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDesc
operator|.
name|smallTableValueColumnNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|smallTableValueExpr
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|testDesc
operator|.
name|smallTableValueTypeInfos
index|[
name|i
index|]
argument_list|,
name|testDesc
operator|.
name|smallTableValueColumnNames
index|[
name|i
index|]
argument_list|,
literal|"S"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TableDesc
name|valueTableDesc
init|=
name|PlanUtils
operator|.
name|getMapJoinValueTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|smallTableValueExpr
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|TableDesc
argument_list|>
name|valueTableDescsList
init|=
operator|new
name|ArrayList
argument_list|<
name|TableDesc
argument_list|>
argument_list|()
decl_stmt|;
comment|// Big Table entry, then Small Table entry.
name|valueTableDescsList
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|valueTableDescsList
operator|.
name|add
argument_list|(
name|valueTableDesc
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setValueTblDescs
argument_list|(
name|valueTableDescsList
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setValueFilteredTblDescs
argument_list|(
name|valueTableDescsList
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setOutputColumnNames
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|testDesc
operator|.
name|outputColumnNames
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mapJoinDesc
return|;
block|}
specifier|public
specifier|static
name|VectorMapJoinDesc
name|createVectorMapJoinDesc
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|)
block|{
name|VectorMapJoinDesc
name|vectorDesc
init|=
operator|new
name|VectorMapJoinDesc
argument_list|()
decl_stmt|;
name|vectorDesc
operator|.
name|setHashTableImplementationType
argument_list|(
name|HashTableImplementationType
operator|.
name|FAST
argument_list|)
expr_stmt|;
name|HashTableKind
name|hashTableKind
decl_stmt|;
switch|switch
condition|(
name|testDesc
operator|.
name|vectorMapJoinVariation
condition|)
block|{
case|case
name|INNER
case|:
name|hashTableKind
operator|=
name|HashTableKind
operator|.
name|HASH_MAP
expr_stmt|;
break|break;
case|case
name|INNER_BIG_ONLY
case|:
name|hashTableKind
operator|=
name|HashTableKind
operator|.
name|HASH_MULTISET
expr_stmt|;
break|break;
case|case
name|LEFT_SEMI
case|:
name|hashTableKind
operator|=
name|HashTableKind
operator|.
name|HASH_SET
expr_stmt|;
break|break;
case|case
name|OUTER
case|:
case|case
name|FULL_OUTER
case|:
name|hashTableKind
operator|=
name|HashTableKind
operator|.
name|HASH_MAP
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown operator variation "
operator|+
name|testDesc
operator|.
name|vectorMapJoinVariation
argument_list|)
throw|;
block|}
name|vectorDesc
operator|.
name|setHashTableKind
argument_list|(
name|hashTableKind
argument_list|)
expr_stmt|;
name|HashTableKeyType
name|hashTableKeyType
init|=
name|HashTableKeyType
operator|.
name|MULTI_KEY
decl_stmt|;
comment|// Assume.
if|if
condition|(
name|testDesc
operator|.
name|bigTableKeyTypeInfos
operator|.
name|length
operator|==
literal|1
condition|)
block|{
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|testDesc
operator|.
name|bigTableKeyTypeInfos
index|[
literal|0
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|hashTableKeyType
operator|=
name|HashTableKeyType
operator|.
name|BOOLEAN
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|hashTableKeyType
operator|=
name|HashTableKeyType
operator|.
name|BYTE
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|hashTableKeyType
operator|=
name|HashTableKeyType
operator|.
name|SHORT
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|hashTableKeyType
operator|=
name|HashTableKeyType
operator|.
name|INT
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|hashTableKeyType
operator|=
name|HashTableKeyType
operator|.
name|LONG
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|hashTableKeyType
operator|=
name|HashTableKeyType
operator|.
name|STRING
expr_stmt|;
break|break;
default|default:
comment|// Stay with MULTI_KEY
block|}
block|}
name|vectorDesc
operator|.
name|setHashTableKeyType
argument_list|(
name|hashTableKeyType
argument_list|)
expr_stmt|;
name|vectorDesc
operator|.
name|setVectorMapJoinVariation
argument_list|(
name|testDesc
operator|.
name|vectorMapJoinVariation
argument_list|)
expr_stmt|;
name|vectorDesc
operator|.
name|setMinMaxEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|VectorMapJoinInfo
name|vectorMapJoinInfo
init|=
operator|new
name|VectorMapJoinInfo
argument_list|()
decl_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableKeyColumnMap
argument_list|(
name|testDesc
operator|.
name|bigTableKeyColumnNums
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableKeyColumnNames
argument_list|(
name|testDesc
operator|.
name|bigTableKeyColumnNames
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableKeyTypeInfos
argument_list|(
name|testDesc
operator|.
name|bigTableKeyTypeInfos
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setSlimmedBigTableKeyExpressions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|vectorDesc
operator|.
name|setAllBigTableKeyExpressions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableValueColumnMap
argument_list|(
name|testDesc
operator|.
name|bigTableColumnNums
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableValueColumnNames
argument_list|(
name|testDesc
operator|.
name|bigTableColumnNames
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableValueTypeInfos
argument_list|(
name|testDesc
operator|.
name|bigTableTypeInfos
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setSlimmedBigTableValueExpressions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|vectorDesc
operator|.
name|setAllBigTableValueExpressions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableFilterExpressions
argument_list|(
operator|new
name|VectorExpression
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|/*      * Column mapping.      */
name|VectorColumnOutputMapping
name|bigTableRetainMapping
init|=
operator|new
name|VectorColumnOutputMapping
argument_list|(
literal|"Big Table Retain Mapping"
argument_list|)
decl_stmt|;
name|VectorColumnOutputMapping
name|nonOuterSmallTableKeyMapping
init|=
operator|new
name|VectorColumnOutputMapping
argument_list|(
literal|"Non Outer Small Table Key Key Mapping"
argument_list|)
decl_stmt|;
name|VectorColumnOutputMapping
name|outerSmallTableKeyMapping
init|=
operator|new
name|VectorColumnOutputMapping
argument_list|(
literal|"Outer Small Table Key Mapping"
argument_list|)
decl_stmt|;
name|VectorColumnSourceMapping
name|fullOuterSmallTableKeyMapping
init|=
operator|new
name|VectorColumnSourceMapping
argument_list|(
literal|"Full Outer Small Table Key Mapping"
argument_list|)
decl_stmt|;
name|VectorColumnSourceMapping
name|projectionMapping
init|=
operator|new
name|VectorColumnSourceMapping
argument_list|(
literal|"Projection Mapping"
argument_list|)
decl_stmt|;
name|int
name|nextOutputColumn
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|bigTableRetainedSize
init|=
name|testDesc
operator|.
name|bigTableRetainColumnNums
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bigTableRetainedSize
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|batchColumnIndex
init|=
name|testDesc
operator|.
name|bigTableRetainColumnNums
index|[
name|i
index|]
decl_stmt|;
name|TypeInfo
name|typeInfo
init|=
name|testDesc
operator|.
name|bigTableTypeInfos
index|[
name|i
index|]
decl_stmt|;
name|projectionMapping
operator|.
name|add
argument_list|(
name|nextOutputColumn
argument_list|,
name|batchColumnIndex
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
comment|// Collect columns we copy from the big table batch to the overflow batch.
if|if
condition|(
operator|!
name|bigTableRetainMapping
operator|.
name|containsOutputColumn
argument_list|(
name|batchColumnIndex
argument_list|)
condition|)
block|{
comment|// Tolerate repeated use of a big table column.
name|bigTableRetainMapping
operator|.
name|add
argument_list|(
name|batchColumnIndex
argument_list|,
name|batchColumnIndex
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
name|nextOutputColumn
operator|++
expr_stmt|;
block|}
name|boolean
name|isOuterJoin
init|=
operator|(
name|testDesc
operator|.
name|vectorMapJoinVariation
operator|==
name|VectorMapJoinVariation
operator|.
name|OUTER
operator|||
name|testDesc
operator|.
name|vectorMapJoinVariation
operator|==
name|VectorMapJoinVariation
operator|.
name|FULL_OUTER
operator|)
decl_stmt|;
name|int
name|emulateScratchColumn
init|=
name|testDesc
operator|.
name|bigTableTypeInfos
operator|.
name|length
decl_stmt|;
name|VectorColumnOutputMapping
name|smallTableKeyOutputMapping
init|=
operator|new
name|VectorColumnOutputMapping
argument_list|(
literal|"Small Table Key Output Mapping"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|smallTableKeyRetainSize
init|=
name|testDesc
operator|.
name|smallTableRetainKeyColumnNums
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDesc
operator|.
name|smallTableRetainKeyColumnNums
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|smallTableKeyColumnNum
init|=
name|testDesc
operator|.
name|smallTableRetainKeyColumnNums
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|int
name|bigTableKeyColumnNum
init|=
name|testDesc
operator|.
name|bigTableKeyColumnNums
index|[
name|smallTableKeyColumnNum
index|]
decl_stmt|;
name|TypeInfo
name|keyTypeInfo
init|=
name|testDesc
operator|.
name|smallTableKeyTypeInfos
index|[
name|smallTableKeyColumnNum
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|isOuterJoin
condition|)
block|{
comment|// Project the big table key into the small table result "area".
name|projectionMapping
operator|.
name|add
argument_list|(
name|nextOutputColumn
argument_list|,
name|bigTableKeyColumnNum
argument_list|,
name|keyTypeInfo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bigTableRetainMapping
operator|.
name|containsOutputColumn
argument_list|(
name|bigTableKeyColumnNum
argument_list|)
condition|)
block|{
name|nonOuterSmallTableKeyMapping
operator|.
name|add
argument_list|(
name|bigTableKeyColumnNum
argument_list|,
name|bigTableKeyColumnNum
argument_list|,
name|keyTypeInfo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|outerSmallTableKeyMapping
operator|.
name|add
argument_list|(
name|bigTableKeyColumnNum
argument_list|,
name|emulateScratchColumn
argument_list|,
name|keyTypeInfo
argument_list|)
expr_stmt|;
name|projectionMapping
operator|.
name|add
argument_list|(
name|nextOutputColumn
argument_list|,
name|emulateScratchColumn
argument_list|,
name|keyTypeInfo
argument_list|)
expr_stmt|;
comment|// For FULL OUTER MapJoin, we need to be able to deserialize a Small Table key
comment|// into the output result.
name|fullOuterSmallTableKeyMapping
operator|.
name|add
argument_list|(
name|smallTableKeyColumnNum
argument_list|,
name|emulateScratchColumn
argument_list|,
name|keyTypeInfo
argument_list|)
expr_stmt|;
name|emulateScratchColumn
operator|++
expr_stmt|;
block|}
name|nextOutputColumn
operator|++
expr_stmt|;
block|}
comment|// The order of the fields in the LazyBinary small table value must be used, so
comment|// we use the source ordering flavor for the mapping.
name|VectorColumnSourceMapping
name|smallTableValueMapping
init|=
operator|new
name|VectorColumnSourceMapping
argument_list|(
literal|"Small Table Value Mapping"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDesc
operator|.
name|smallTableValueTypeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|smallTableValueMapping
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|emulateScratchColumn
argument_list|,
name|testDesc
operator|.
name|smallTableValueTypeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|projectionMapping
operator|.
name|add
argument_list|(
name|nextOutputColumn
argument_list|,
name|emulateScratchColumn
argument_list|,
name|testDesc
operator|.
name|smallTableValueTypeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|emulateScratchColumn
operator|++
expr_stmt|;
name|nextOutputColumn
operator|++
expr_stmt|;
block|}
comment|// Convert dynamic arrays and maps to simple arrays.
name|bigTableRetainMapping
operator|.
name|finalize
argument_list|()
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableRetainColumnMap
argument_list|(
name|bigTableRetainMapping
operator|.
name|getOutputColumns
argument_list|()
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setBigTableRetainTypeInfos
argument_list|(
name|bigTableRetainMapping
operator|.
name|getTypeInfos
argument_list|()
argument_list|)
expr_stmt|;
name|nonOuterSmallTableKeyMapping
operator|.
name|finalize
argument_list|()
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setNonOuterSmallTableKeyColumnMap
argument_list|(
name|nonOuterSmallTableKeyMapping
operator|.
name|getOutputColumns
argument_list|()
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setNonOuterSmallTableKeyTypeInfos
argument_list|(
name|nonOuterSmallTableKeyMapping
operator|.
name|getTypeInfos
argument_list|()
argument_list|)
expr_stmt|;
name|outerSmallTableKeyMapping
operator|.
name|finalize
argument_list|()
expr_stmt|;
name|fullOuterSmallTableKeyMapping
operator|.
name|finalize
argument_list|()
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setOuterSmallTableKeyMapping
argument_list|(
name|outerSmallTableKeyMapping
argument_list|)
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setFullOuterSmallTableKeyMapping
argument_list|(
name|fullOuterSmallTableKeyMapping
argument_list|)
expr_stmt|;
name|smallTableValueMapping
operator|.
name|finalize
argument_list|()
expr_stmt|;
name|vectorMapJoinInfo
operator|.
name|setSmallTableValueMapping
argument_list|(
name|smallTableValueMapping
argument_list|)
expr_stmt|;
name|projectionMapping
operator|.
name|finalize
argument_list|()
expr_stmt|;
comment|// Verify we added an entry for each output.
assert|assert
name|projectionMapping
operator|.
name|isSourceSequenceGood
argument_list|()
assert|;
name|vectorMapJoinInfo
operator|.
name|setProjectionMapping
argument_list|(
name|projectionMapping
argument_list|)
expr_stmt|;
if|if
condition|(
name|projectionMapping
operator|.
name|getCount
argument_list|()
operator|!=
name|testDesc
operator|.
name|outputColumnNames
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
empty_stmt|;
name|vectorDesc
operator|.
name|setVectorMapJoinInfo
argument_list|(
name|vectorMapJoinInfo
argument_list|)
expr_stmt|;
return|return
name|vectorDesc
return|;
block|}
specifier|public
specifier|static
name|VectorMapJoinCommonOperator
name|createNativeVectorMapJoinOperator
parameter_list|(
name|VectorMapJoinVariation
name|VectorMapJoinVariation
parameter_list|,
name|MapJoinDesc
name|mapJoinDesc
parameter_list|,
name|VectorMapJoinDesc
name|vectorDesc
parameter_list|,
name|VectorizationContext
name|vContext
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorMapJoinCommonOperator
name|operator
decl_stmt|;
switch|switch
condition|(
name|vectorDesc
operator|.
name|getHashTableKeyType
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
switch|switch
condition|(
name|VectorMapJoinVariation
condition|)
block|{
case|case
name|INNER
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinInnerLongOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|INNER_BIG_ONLY
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinInnerBigOnlyLongOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEFT_SEMI
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinLeftSemiLongOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|OUTER
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinOuterLongOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|FULL_OUTER
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinFullOuterLongOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown operator variation "
operator|+
name|VectorMapJoinVariation
argument_list|)
throw|;
block|}
break|break;
case|case
name|STRING
case|:
switch|switch
condition|(
name|VectorMapJoinVariation
condition|)
block|{
case|case
name|INNER
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinInnerStringOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|INNER_BIG_ONLY
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinInnerBigOnlyStringOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEFT_SEMI
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinLeftSemiStringOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|OUTER
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinOuterStringOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
case|case
name|FULL_OUTER
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinFullOuterStringOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown operator variation "
operator|+
name|VectorMapJoinVariation
argument_list|)
throw|;
block|}
break|break;
case|case
name|MULTI_KEY
case|:
switch|switch
condition|(
name|VectorMapJoinVariation
condition|)
block|{
case|case
name|INNER
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinInnerMultiKeyOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|INNER_BIG_ONLY
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinInnerBigOnlyMultiKeyOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEFT_SEMI
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinLeftSemiMultiKeyOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|OUTER
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinOuterMultiKeyOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
case|case
name|FULL_OUTER
case|:
name|operator
operator|=
operator|new
name|VectorMapJoinFullOuterMultiKeyOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown operator variation "
operator|+
name|VectorMapJoinVariation
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown hash table key type "
operator|+
name|vectorDesc
operator|.
name|getHashTableKeyType
argument_list|()
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*BENCHMARK* createNativeVectorMapJoinOperator "
operator|+
name|operator
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|operator
return|;
block|}
specifier|public
specifier|static
name|VectorizationContext
name|createVectorizationContext
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorizationContext
name|vContext
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"test"
argument_list|,
name|testDesc
operator|.
name|bigTableColumnNameList
argument_list|)
decl_stmt|;
name|boolean
name|isOuterJoin
init|=
operator|(
name|testDesc
operator|.
name|vectorMapJoinVariation
operator|==
name|VectorMapJoinVariation
operator|.
name|OUTER
operator|||
name|testDesc
operator|.
name|vectorMapJoinVariation
operator|==
name|VectorMapJoinVariation
operator|.
name|FULL_OUTER
operator|)
decl_stmt|;
if|if
condition|(
name|isOuterJoin
condition|)
block|{
comment|// We need physical columns.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDesc
operator|.
name|smallTableRetainKeyColumnNums
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|smallTableKeyRetainColumnNum
init|=
name|testDesc
operator|.
name|smallTableRetainKeyColumnNums
index|[
name|i
index|]
decl_stmt|;
name|vContext
operator|.
name|allocateScratchColumn
argument_list|(
name|testDesc
operator|.
name|smallTableKeyTypeInfos
index|[
name|smallTableKeyRetainColumnNum
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create scratch columns to hold small table results.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDesc
operator|.
name|smallTableRetainValueColumnNums
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|vContext
operator|.
name|allocateScratchColumn
argument_list|(
name|testDesc
operator|.
name|smallTableValueTypeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|vContext
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasFilter
parameter_list|(
name|MapJoinDesc
name|mapJoinDesc
parameter_list|,
name|int
name|alias
parameter_list|)
block|{
name|int
index|[]
index|[]
name|filterMaps
init|=
name|mapJoinDesc
operator|.
name|getFilterMap
argument_list|()
decl_stmt|;
return|return
name|filterMaps
operator|!=
literal|null
operator|&&
name|filterMaps
index|[
name|alias
index|]
operator|!=
literal|null
return|;
block|}
specifier|public
specifier|static
name|MapJoinTableContainerSerDe
name|createMapJoinTableContainerSerDe
parameter_list|(
name|MapJoinDesc
name|mapJoinDesc
parameter_list|)
throws|throws
name|SerDeException
block|{
specifier|final
name|Byte
name|smallTablePos
init|=
literal|1
decl_stmt|;
name|TableDesc
name|keyTableDesc
init|=
name|mapJoinDesc
operator|.
name|getKeyTblDesc
argument_list|()
decl_stmt|;
name|AbstractSerDe
name|keySerializer
init|=
operator|(
name|AbstractSerDe
operator|)
name|ReflectionUtil
operator|.
name|newInstance
argument_list|(
name|BinarySortableSerDe
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|keySerializer
argument_list|,
literal|null
argument_list|,
name|keyTableDesc
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MapJoinObjectSerDeContext
name|keyContext
init|=
operator|new
name|MapJoinObjectSerDeContext
argument_list|(
name|keySerializer
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TableDesc
argument_list|>
name|valueTableDescList
decl_stmt|;
if|if
condition|(
name|mapJoinDesc
operator|.
name|getNoOuterJoin
argument_list|()
condition|)
block|{
name|valueTableDescList
operator|=
name|mapJoinDesc
operator|.
name|getValueTblDescs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|valueTableDescList
operator|=
name|mapJoinDesc
operator|.
name|getValueFilteredTblDescs
argument_list|()
expr_stmt|;
block|}
name|TableDesc
name|valueTableDesc
init|=
name|valueTableDescList
operator|.
name|get
argument_list|(
name|smallTablePos
argument_list|)
decl_stmt|;
name|AbstractSerDe
name|valueSerDe
init|=
operator|(
name|AbstractSerDe
operator|)
name|ReflectionUtil
operator|.
name|newInstance
argument_list|(
name|valueTableDesc
operator|.
name|getDeserializerClass
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|valueSerDe
argument_list|,
literal|null
argument_list|,
name|valueTableDesc
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MapJoinObjectSerDeContext
name|valueContext
init|=
operator|new
name|MapJoinObjectSerDeContext
argument_list|(
name|valueSerDe
argument_list|,
name|hasFilter
argument_list|(
name|mapJoinDesc
argument_list|,
name|smallTablePos
argument_list|)
argument_list|)
decl_stmt|;
name|MapJoinTableContainerSerDe
name|mapJoinTableContainerSerDe
init|=
operator|new
name|MapJoinTableContainerSerDe
argument_list|(
name|keyContext
argument_list|,
name|valueContext
argument_list|)
decl_stmt|;
return|return
name|mapJoinTableContainerSerDe
return|;
block|}
specifier|public
specifier|static
name|void
name|connectOperators
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|operator
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOperator
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|newParentOperators
init|=
name|newOperatorList
argument_list|()
decl_stmt|;
name|newParentOperators
operator|.
name|addAll
argument_list|(
name|childOperator
operator|.
name|getParentOperators
argument_list|()
argument_list|)
expr_stmt|;
name|newParentOperators
operator|.
name|add
argument_list|(
name|operator
argument_list|)
expr_stmt|;
name|childOperator
operator|.
name|setParentOperators
argument_list|(
name|newParentOperators
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|newChildOperators
init|=
name|newOperatorList
argument_list|()
decl_stmt|;
name|newChildOperators
operator|.
name|addAll
argument_list|(
name|operator
operator|.
name|getChildOperators
argument_list|()
argument_list|)
expr_stmt|;
name|newChildOperators
operator|.
name|add
argument_list|(
name|childOperator
argument_list|)
expr_stmt|;
name|operator
operator|.
name|setChildOperators
argument_list|(
name|newChildOperators
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|intArrayToList
parameter_list|(
name|int
index|[]
name|intArray
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|intList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|intArray
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|intArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|intList
operator|.
name|add
argument_list|(
name|intArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|intList
return|;
block|}
specifier|private
specifier|static
name|void
name|loadTableContainerData
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|,
name|MapJoinTableContainer
name|mapJoinTableContainer
parameter_list|)
throws|throws
name|IOException
throws|,
name|SerDeException
throws|,
name|HiveException
block|{
name|LazyBinarySerializeWrite
name|valueSerializeWrite
init|=
literal|null
decl_stmt|;
name|Output
name|valueOutput
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|testData
operator|.
name|smallTableValues
operator|!=
literal|null
condition|)
block|{
name|valueSerializeWrite
operator|=
operator|new
name|LazyBinarySerializeWrite
argument_list|(
name|testDesc
operator|.
name|smallTableValueTypeInfos
operator|.
name|length
argument_list|)
expr_stmt|;
name|valueOutput
operator|=
operator|new
name|Output
argument_list|()
expr_stmt|;
block|}
name|BytesWritable
name|valueBytesWritable
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|BytesWritable
name|keyBytesWritable
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|BinarySortableSerializeWrite
name|keySerializeWrite
init|=
operator|new
name|BinarySortableSerializeWrite
argument_list|(
name|testDesc
operator|.
name|bigTableKeyTypeInfos
operator|.
name|length
argument_list|)
decl_stmt|;
name|Output
name|keyOutput
init|=
operator|new
name|Output
argument_list|()
decl_stmt|;
name|int
name|round
init|=
literal|0
decl_stmt|;
name|boolean
name|atLeastOneValueAdded
init|=
literal|false
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|RowTestObjects
argument_list|,
name|Integer
argument_list|>
name|testRowEntry
range|:
name|testData
operator|.
name|smallTableKeyHashMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|int
name|smallTableKeyIndex
init|=
name|testRowEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|int
name|valueCount
init|=
name|testData
operator|.
name|smallTableValueCounts
operator|.
name|get
argument_list|(
name|smallTableKeyIndex
argument_list|)
decl_stmt|;
name|boolean
name|addEntry
init|=
name|round
operator|+
literal|1
operator|<=
name|valueCount
decl_stmt|;
if|if
condition|(
name|addEntry
condition|)
block|{
name|atLeastOneValueAdded
operator|=
literal|true
expr_stmt|;
name|RowTestObjects
name|valueRow
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|testData
operator|.
name|smallTableValues
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|RowTestObjects
argument_list|>
name|valueList
init|=
name|testData
operator|.
name|smallTableValues
operator|.
name|get
argument_list|(
name|smallTableKeyIndex
argument_list|)
decl_stmt|;
name|valueRow
operator|=
name|valueList
operator|.
name|get
argument_list|(
name|round
argument_list|)
expr_stmt|;
block|}
name|Object
index|[]
name|smallTableKey
init|=
name|testRowEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|keyOutput
operator|.
name|reset
argument_list|()
expr_stmt|;
name|keySerializeWrite
operator|.
name|set
argument_list|(
name|keyOutput
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|testDesc
operator|.
name|bigTableKeyTypeInfos
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|Writable
name|keyWritable
init|=
operator|(
name|Writable
operator|)
name|smallTableKey
index|[
name|index
index|]
decl_stmt|;
name|VerifyFastRow
operator|.
name|serializeWrite
argument_list|(
name|keySerializeWrite
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|testDesc
operator|.
name|bigTableKeyTypeInfos
index|[
name|index
index|]
argument_list|,
name|keyWritable
argument_list|)
expr_stmt|;
block|}
name|keyBytesWritable
operator|.
name|set
argument_list|(
name|keyOutput
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|keyOutput
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|valueRow
operator|==
literal|null
condition|)
block|{
comment|// Empty value.
name|mapJoinTableContainer
operator|.
name|putRow
argument_list|(
name|keyBytesWritable
argument_list|,
name|valueBytesWritable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
index|[]
name|smallTableValue
init|=
name|valueRow
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|valueOutput
operator|.
name|reset
argument_list|()
expr_stmt|;
name|valueSerializeWrite
operator|.
name|set
argument_list|(
name|valueOutput
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|testDesc
operator|.
name|smallTableValueTypeInfos
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|Writable
name|valueWritable
init|=
operator|(
name|Writable
operator|)
name|smallTableValue
index|[
name|index
index|]
decl_stmt|;
name|VerifyFastRow
operator|.
name|serializeWrite
argument_list|(
name|valueSerializeWrite
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|testDesc
operator|.
name|smallTableValueTypeInfos
index|[
name|index
index|]
argument_list|,
name|valueWritable
argument_list|)
expr_stmt|;
block|}
name|valueBytesWritable
operator|.
name|set
argument_list|(
name|valueOutput
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|valueOutput
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|mapJoinTableContainer
operator|.
name|putRow
argument_list|(
name|keyBytesWritable
argument_list|,
name|valueBytesWritable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|testData
operator|.
name|smallTableValues
operator|==
literal|null
operator|||
operator|!
name|atLeastOneValueAdded
condition|)
block|{
break|break;
block|}
name|round
operator|++
expr_stmt|;
name|atLeastOneValueAdded
operator|=
literal|false
expr_stmt|;
block|}
name|mapJoinTableContainer
operator|.
name|seal
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|CreateMapJoinResult
block|{
specifier|public
specifier|final
name|MapJoinOperator
name|mapJoinOperator
decl_stmt|;
specifier|public
specifier|final
name|MapJoinTableContainer
name|mapJoinTableContainer
decl_stmt|;
specifier|public
specifier|final
name|MapJoinTableContainerSerDe
name|mapJoinTableContainerSerDe
decl_stmt|;
specifier|public
name|CreateMapJoinResult
parameter_list|(
name|MapJoinOperator
name|mapJoinOperator
parameter_list|,
name|MapJoinTableContainer
name|mapJoinTableContainer
parameter_list|,
name|MapJoinTableContainerSerDe
name|mapJoinTableContainerSerDe
parameter_list|)
block|{
name|this
operator|.
name|mapJoinOperator
operator|=
name|mapJoinOperator
expr_stmt|;
name|this
operator|.
name|mapJoinTableContainer
operator|=
name|mapJoinTableContainer
expr_stmt|;
name|this
operator|.
name|mapJoinTableContainerSerDe
operator|=
name|mapJoinTableContainerSerDe
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|CreateMapJoinResult
name|createMapJoin
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|,
name|MapJoinDesc
name|mapJoinDesc
parameter_list|,
name|boolean
name|isVectorMapJoin
parameter_list|,
name|boolean
name|isOriginalMapJoin
parameter_list|,
name|MapJoinTableContainer
name|shareMapJoinTableContainer
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
throws|,
name|HiveException
block|{
specifier|final
name|Byte
name|bigTablePos
init|=
literal|0
decl_stmt|;
name|MapJoinTableContainerSerDe
name|mapJoinTableContainerSerDe
init|=
name|MapJoinTestConfig
operator|.
name|createMapJoinTableContainerSerDe
argument_list|(
name|mapJoinDesc
argument_list|)
decl_stmt|;
name|MapJoinObjectSerDeContext
name|valCtx
init|=
name|mapJoinTableContainerSerDe
operator|.
name|getValueContext
argument_list|()
decl_stmt|;
name|MapJoinTableContainer
name|mapJoinTableContainer
init|=
operator|(
name|isOriginalMapJoin
condition|?
operator|new
name|HashMapWrapper
argument_list|(
name|testDesc
operator|.
name|hiveConf
argument_list|,
operator|-
literal|1
argument_list|)
else|:
operator|new
name|MapJoinBytesTableContainer
argument_list|(
name|testDesc
operator|.
name|hiveConf
argument_list|,
name|valCtx
argument_list|,
name|testData
operator|.
name|smallTableKeyHashMap
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|)
decl_stmt|;
name|mapJoinTableContainer
operator|.
name|setSerde
argument_list|(
name|mapJoinTableContainerSerDe
operator|.
name|getKeyContext
argument_list|()
argument_list|,
name|mapJoinTableContainerSerDe
operator|.
name|getValueContext
argument_list|()
argument_list|)
expr_stmt|;
name|loadTableContainerData
argument_list|(
name|testDesc
argument_list|,
name|testData
argument_list|,
name|mapJoinTableContainer
argument_list|)
expr_stmt|;
name|MapJoinOperator
name|operator
decl_stmt|;
if|if
condition|(
operator|!
name|isVectorMapJoin
condition|)
block|{
name|operator
operator|=
operator|new
name|MapJoinOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|)
expr_stmt|;
name|operator
operator|.
name|setConf
argument_list|(
name|mapJoinDesc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|VectorizationContext
name|vContext
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"test"
argument_list|,
name|testDesc
operator|.
name|bigTableColumnNameList
argument_list|)
decl_stmt|;
comment|/*       // UNDONE: Unclear this belonds in the input VectorizationContext...       // Create scratch columns to hold small table results.       for (int i = 0; i< testDesc.smallTableValueTypeInfos.length; i++) {         vContext.allocateScratchColumn(testDesc.smallTableValueTypeInfos[i]);       }       */
comment|// This is what the Vectorizer class does.
name|VectorMapJoinDesc
name|vectorMapJoinDesc
init|=
operator|new
name|VectorMapJoinDesc
argument_list|()
decl_stmt|;
name|byte
name|posBigTable
init|=
operator|(
name|byte
operator|)
name|mapJoinDesc
operator|.
name|getPosBigTable
argument_list|()
decl_stmt|;
name|VectorExpression
index|[]
name|allBigTableKeyExpressions
init|=
name|vContext
operator|.
name|getVectorExpressions
argument_list|(
name|mapJoinDesc
operator|.
name|getKeys
argument_list|()
operator|.
name|get
argument_list|(
name|posBigTable
argument_list|)
argument_list|)
decl_stmt|;
name|vectorMapJoinDesc
operator|.
name|setAllBigTableKeyExpressions
argument_list|(
name|allBigTableKeyExpressions
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|exprs
init|=
name|mapJoinDesc
operator|.
name|getExprs
argument_list|()
decl_stmt|;
name|VectorExpression
index|[]
name|allBigTableValueExpressions
init|=
name|vContext
operator|.
name|getVectorExpressions
argument_list|(
name|exprs
operator|.
name|get
argument_list|(
name|posBigTable
argument_list|)
argument_list|)
decl_stmt|;
name|vectorMapJoinDesc
operator|.
name|setAllBigTableValueExpressions
argument_list|(
name|allBigTableValueExpressions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bigTableFilters
init|=
name|mapJoinDesc
operator|.
name|getFilters
argument_list|()
operator|.
name|get
argument_list|(
name|bigTablePos
argument_list|)
decl_stmt|;
name|boolean
name|isOuterAndFiltered
init|=
operator|(
operator|!
name|mapJoinDesc
operator|.
name|isNoOuterJoin
argument_list|()
operator|&&
name|bigTableFilters
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|isOuterAndFiltered
condition|)
block|{
name|operator
operator|=
operator|new
name|VectorMapJoinOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorMapJoinDesc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operator
operator|=
operator|new
name|VectorMapJoinOuterFilteredOperator
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|vContext
argument_list|,
name|vectorMapJoinDesc
argument_list|)
expr_stmt|;
block|}
block|}
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|testDesc
operator|.
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_MAPJOIN_TESTING_NO_HASH_TABLE_LOAD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|CreateMapJoinResult
argument_list|(
name|operator
argument_list|,
name|mapJoinTableContainer
argument_list|,
name|mapJoinTableContainerSerDe
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CreateMapJoinResult
name|createNativeVectorMapJoin
parameter_list|(
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|,
name|MapJoinDesc
name|mapJoinDesc
parameter_list|,
name|HashTableImplementationType
name|hashTableImplementationType
parameter_list|,
name|MapJoinTableContainer
name|shareMapJoinTableContainer
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
throws|,
name|HiveException
block|{
name|VectorMapJoinDesc
name|vectorDesc
init|=
name|MapJoinTestConfig
operator|.
name|createVectorMapJoinDesc
argument_list|(
name|testDesc
argument_list|)
decl_stmt|;
name|mapJoinDesc
operator|.
name|setVectorDesc
argument_list|(
name|vectorDesc
argument_list|)
expr_stmt|;
name|vectorDesc
operator|.
name|setHashTableImplementationType
argument_list|(
name|hashTableImplementationType
argument_list|)
expr_stmt|;
name|VectorMapJoinInfo
name|vectorMapJoinInfo
init|=
name|vectorDesc
operator|.
name|getVectorMapJoinInfo
argument_list|()
decl_stmt|;
name|MapJoinTableContainer
name|mapJoinTableContainer
decl_stmt|;
name|MapJoinTableContainerSerDe
name|mapJoinTableContainerSerDe
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|vectorDesc
operator|.
name|getHashTableImplementationType
argument_list|()
condition|)
block|{
case|case
name|OPTIMIZED
case|:
name|mapJoinTableContainer
operator|=
operator|new
name|MapJoinBytesTableContainer
argument_list|(
name|testDesc
operator|.
name|hiveConf
argument_list|,
literal|null
argument_list|,
name|testData
operator|.
name|smallTableKeyHashMap
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mapJoinTableContainerSerDe
operator|=
name|MapJoinTestConfig
operator|.
name|createMapJoinTableContainerSerDe
argument_list|(
name|mapJoinDesc
argument_list|)
expr_stmt|;
name|mapJoinTableContainer
operator|.
name|setSerde
argument_list|(
name|mapJoinTableContainerSerDe
operator|.
name|getKeyContext
argument_list|()
argument_list|,
name|mapJoinTableContainerSerDe
operator|.
name|getValueContext
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FAST
case|:
name|mapJoinTableContainer
operator|=
operator|new
name|VectorMapJoinFastTableContainer
argument_list|(
name|mapJoinDesc
argument_list|,
name|testDesc
operator|.
name|hiveConf
argument_list|,
name|testData
operator|.
name|smallTableKeyHashMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected hash table implementation type "
operator|+
name|vectorDesc
operator|.
name|getHashTableImplementationType
argument_list|()
argument_list|)
throw|;
block|}
comment|//    if (shareMapJoinTableContainer == null) {
name|loadTableContainerData
argument_list|(
name|testDesc
argument_list|,
name|testData
argument_list|,
name|mapJoinTableContainer
argument_list|)
expr_stmt|;
comment|//    } else {
comment|//      setTableContainerData(mapJoinTableContainer, shareMapJoinTableContainer);
comment|//    }
name|VectorizationContext
name|vContext
init|=
name|MapJoinTestConfig
operator|.
name|createVectorizationContext
argument_list|(
name|testDesc
argument_list|)
decl_stmt|;
name|byte
name|posBigTable
init|=
operator|(
name|byte
operator|)
name|mapJoinDesc
operator|.
name|getPosBigTable
argument_list|()
decl_stmt|;
name|VectorExpression
index|[]
name|slimmedBigTableKeyExpressions
init|=
name|vContext
operator|.
name|getVectorExpressions
argument_list|(
name|mapJoinDesc
operator|.
name|getKeys
argument_list|()
operator|.
name|get
argument_list|(
name|posBigTable
argument_list|)
argument_list|)
decl_stmt|;
name|vectorMapJoinInfo
operator|.
name|setSlimmedBigTableKeyExpressions
argument_list|(
name|slimmedBigTableKeyExpressions
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|exprs
init|=
name|mapJoinDesc
operator|.
name|getExprs
argument_list|()
decl_stmt|;
name|VectorExpression
index|[]
name|slimmedBigTableValueExpressions
init|=
name|vContext
operator|.
name|getVectorExpressions
argument_list|(
name|exprs
operator|.
name|get
argument_list|(
name|posBigTable
argument_list|)
argument_list|)
decl_stmt|;
name|vectorMapJoinInfo
operator|.
name|setSlimmedBigTableValueExpressions
argument_list|(
name|slimmedBigTableValueExpressions
argument_list|)
expr_stmt|;
name|VectorMapJoinCommonOperator
name|operator
init|=
name|MapJoinTestConfig
operator|.
name|createNativeVectorMapJoinOperator
argument_list|(
name|testDesc
operator|.
name|vectorMapJoinVariation
argument_list|,
name|mapJoinDesc
argument_list|,
name|vectorDesc
argument_list|,
name|vContext
argument_list|)
decl_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|testDesc
operator|.
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_MAPJOIN_TESTING_NO_HASH_TABLE_LOAD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|CreateMapJoinResult
argument_list|(
name|operator
argument_list|,
name|mapJoinTableContainer
argument_list|,
name|mapJoinTableContainerSerDe
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CreateMapJoinResult
name|createMapJoinImplementation
parameter_list|(
name|MapJoinTestImplementation
name|mapJoinImplementation
parameter_list|,
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|,
name|MapJoinDesc
name|mapJoinDesc
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
throws|,
name|HiveException
block|{
return|return
name|createMapJoinImplementation
argument_list|(
name|mapJoinImplementation
argument_list|,
name|testDesc
argument_list|,
name|testData
argument_list|,
name|mapJoinDesc
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CreateMapJoinResult
name|createMapJoinImplementation
parameter_list|(
name|MapJoinTestImplementation
name|mapJoinImplementation
parameter_list|,
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|,
name|MapJoinDesc
name|mapJoinDesc
parameter_list|,
name|MapJoinTableContainer
name|shareMapJoinTableContainer
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
throws|,
name|HiveException
block|{
name|CreateMapJoinResult
name|result
decl_stmt|;
switch|switch
condition|(
name|mapJoinImplementation
condition|)
block|{
case|case
name|ROW_MODE_HASH_MAP
case|:
comment|// MapJoinOperator
name|result
operator|=
name|MapJoinTestConfig
operator|.
name|createMapJoin
argument_list|(
name|testDesc
argument_list|,
name|testData
argument_list|,
name|mapJoinDesc
argument_list|,
comment|/* isVectorMapJoin */
literal|false
argument_list|,
comment|/* isOriginalMapJoin */
literal|true
argument_list|,
name|shareMapJoinTableContainer
argument_list|)
expr_stmt|;
break|break;
case|case
name|ROW_MODE_OPTIMIZED
case|:
comment|// MapJoinOperator
name|result
operator|=
name|MapJoinTestConfig
operator|.
name|createMapJoin
argument_list|(
name|testDesc
argument_list|,
name|testData
argument_list|,
name|mapJoinDesc
argument_list|,
comment|/* isVectorMapJoin */
literal|false
argument_list|,
comment|/* isOriginalMapJoin */
literal|false
argument_list|,
name|shareMapJoinTableContainer
argument_list|)
expr_stmt|;
break|break;
case|case
name|VECTOR_PASS_THROUGH
case|:
comment|// VectorMapJoinOperator
name|result
operator|=
name|MapJoinTestConfig
operator|.
name|createMapJoin
argument_list|(
name|testDesc
argument_list|,
name|testData
argument_list|,
name|mapJoinDesc
argument_list|,
comment|/* isVectorMapJoin */
literal|true
argument_list|,
comment|/* n/a */
literal|false
argument_list|,
name|shareMapJoinTableContainer
argument_list|)
expr_stmt|;
break|break;
case|case
name|NATIVE_VECTOR_OPTIMIZED
case|:
name|result
operator|=
name|MapJoinTestConfig
operator|.
name|createNativeVectorMapJoin
argument_list|(
name|testDesc
argument_list|,
name|testData
argument_list|,
name|mapJoinDesc
argument_list|,
name|HashTableImplementationType
operator|.
name|OPTIMIZED
argument_list|,
name|shareMapJoinTableContainer
argument_list|)
expr_stmt|;
break|break;
case|case
name|NATIVE_VECTOR_FAST
case|:
name|result
operator|=
name|MapJoinTestConfig
operator|.
name|createNativeVectorMapJoin
argument_list|(
name|testDesc
argument_list|,
name|testData
argument_list|,
name|mapJoinDesc
argument_list|,
name|HashTableImplementationType
operator|.
name|FAST
argument_list|,
name|shareMapJoinTableContainer
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected MapJoin Operator Implementation "
operator|+
name|mapJoinImplementation
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|Operator
argument_list|<
name|SelectDesc
argument_list|>
name|makeInterceptSelectOperator
parameter_list|(
name|MapJoinOperator
name|mapJoinOperator
parameter_list|,
name|int
name|bigTableKeySize
parameter_list|,
name|int
name|bigTableRetainSize
parameter_list|,
name|String
index|[]
name|outputColumnNames
parameter_list|,
name|TypeInfo
index|[]
name|outputTypeInfos
parameter_list|)
block|{
name|MapJoinDesc
name|mapJoinDesc
init|=
operator|(
name|MapJoinDesc
operator|)
name|mapJoinOperator
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|selectExprList
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|selectOutputColumnNameList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bigTableRetainSize
condition|;
name|i
operator|++
control|)
block|{
name|String
name|selectOutputColumnName
init|=
name|HiveConf
operator|.
name|getColumnInternalName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|selectOutputColumnNameList
operator|.
name|add
argument_list|(
name|selectOutputColumnName
argument_list|)
expr_stmt|;
name|TypeInfo
name|outputTypeInfo
init|=
name|outputTypeInfos
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|bigTableKeySize
condition|)
block|{
comment|// Big Table key.
name|ExprNodeColumnDesc
name|keyColumnExpr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|outputTypeInfo
argument_list|,
name|outputColumnNames
index|[
name|i
index|]
argument_list|,
literal|"test"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|selectExprList
operator|.
name|add
argument_list|(
name|keyColumnExpr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// For row-mode, substitute NULL constant for any non-key extra Big Table columns.
name|ExprNodeConstantDesc
name|nullExtraColumnExpr
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|outputTypeInfo
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|nullExtraColumnExpr
operator|.
name|setFoldedFromCol
argument_list|(
name|outputColumnNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|selectExprList
operator|.
name|add
argument_list|(
name|nullExtraColumnExpr
argument_list|)
expr_stmt|;
block|}
block|}
name|SelectDesc
name|selectDesc
init|=
operator|new
name|SelectDesc
argument_list|(
name|selectExprList
argument_list|,
name|selectOutputColumnNameList
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|SelectDesc
argument_list|>
name|selectOperator
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|selectDesc
argument_list|)
decl_stmt|;
return|return
name|selectOperator
return|;
block|}
specifier|private
specifier|static
name|Operator
argument_list|<
name|SelectDesc
argument_list|>
name|vectorizeInterceptSelectOperator
parameter_list|(
name|MapJoinOperator
name|mapJoinOperator
parameter_list|,
name|int
name|bigTableKeySize
parameter_list|,
name|int
name|bigTableRetainSize
parameter_list|,
name|Operator
argument_list|<
name|SelectDesc
argument_list|>
name|selectOperator
parameter_list|)
throws|throws
name|HiveException
block|{
name|MapJoinDesc
name|mapJoinDesc
init|=
operator|(
name|MapJoinDesc
operator|)
name|mapJoinOperator
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|VectorizationContext
name|vOutContext
init|=
operator|(
operator|(
name|VectorizationContextRegion
operator|)
name|mapJoinOperator
operator|)
operator|.
name|getOutputVectorizationContext
argument_list|()
decl_stmt|;
name|SelectDesc
name|selectDesc
init|=
operator|(
name|SelectDesc
operator|)
name|selectOperator
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|selectExprs
init|=
name|selectDesc
operator|.
name|getColList
argument_list|()
decl_stmt|;
name|VectorExpression
index|[]
name|selectVectorExpr
init|=
operator|new
name|VectorExpression
index|[
name|bigTableRetainSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bigTableRetainSize
condition|;
name|i
operator|++
control|)
block|{
name|TypeInfo
name|typeInfo
init|=
name|selectExprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|bigTableKeySize
condition|)
block|{
comment|// Big Table key.
name|selectVectorExpr
index|[
name|i
index|]
operator|=
name|vOutContext
operator|.
name|getVectorExpression
argument_list|(
name|selectExprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// For vector-mode, for test purposes we substitute a NO-OP (we don't want to modify
comment|// the batch).
comment|// FULL OUTER INTERCEPT does not look at non-key columns.
name|NoOpExpression
name|noOpExpression
init|=
operator|new
name|NoOpExpression
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|noOpExpression
operator|.
name|setInputTypeInfos
argument_list|(
name|typeInfo
argument_list|)
expr_stmt|;
name|noOpExpression
operator|.
name|setInputDataTypePhysicalVariations
argument_list|(
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|noOpExpression
operator|.
name|setOutputTypeInfo
argument_list|(
name|typeInfo
argument_list|)
expr_stmt|;
name|noOpExpression
operator|.
name|setOutputDataTypePhysicalVariation
argument_list|(
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|selectVectorExpr
index|[
name|i
index|]
operator|=
name|noOpExpression
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*BENCHMARK* VectorSelectOperator selectVectorExpr "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|selectVectorExpr
argument_list|)
argument_list|)
expr_stmt|;
name|int
index|[]
name|projectedColumns
init|=
name|ArrayUtils
operator|.
name|toPrimitive
argument_list|(
name|vOutContext
operator|.
name|getProjectedColumns
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|bigTableRetainSize
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*BENCHMARK* VectorSelectOperator projectedColumns "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|projectedColumns
argument_list|)
argument_list|)
expr_stmt|;
name|VectorSelectDesc
name|vectorSelectDesc
init|=
operator|new
name|VectorSelectDesc
argument_list|()
decl_stmt|;
name|vectorSelectDesc
operator|.
name|setSelectExpressions
argument_list|(
name|selectVectorExpr
argument_list|)
expr_stmt|;
name|vectorSelectDesc
operator|.
name|setProjectedOutputColumns
argument_list|(
name|projectedColumns
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|SelectDesc
argument_list|>
name|vectorSelectOperator
init|=
name|OperatorFactory
operator|.
name|getVectorOperator
argument_list|(
name|selectOperator
operator|.
name|getCompilationOpContext
argument_list|()
argument_list|,
name|selectDesc
argument_list|,
name|vOutContext
argument_list|,
name|vectorSelectDesc
argument_list|)
decl_stmt|;
return|return
name|vectorSelectOperator
return|;
block|}
specifier|public
specifier|static
name|CountCollectorTestOperator
name|addFullOuterIntercept
parameter_list|(
name|MapJoinTestImplementation
name|mapJoinImplementation
parameter_list|,
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|RowTestObjectsMultiSet
name|outputTestRowMultiSet
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|,
name|MapJoinOperator
name|mapJoinOperator
parameter_list|,
name|MapJoinTableContainer
name|mapJoinTableContainer
parameter_list|,
name|MapJoinTableContainerSerDe
name|mapJoinTableContainerSerDe
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
throws|,
name|HiveException
block|{
name|MapJoinDesc
name|mapJoinDesc
init|=
operator|(
name|MapJoinDesc
operator|)
name|mapJoinOperator
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// For FULL OUTER MapJoin, we require all Big Keys to be present in the output result.
comment|// The first N output columns are the Big Table key columns.
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|keyMap
init|=
name|mapJoinDesc
operator|.
name|getKeys
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bigTableKeyExprs
init|=
name|keyMap
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|bigTableKeySize
init|=
name|bigTableKeyExprs
operator|.
name|size
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|retainMap
init|=
name|mapJoinDesc
operator|.
name|getRetainList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|bigTableRetainList
init|=
name|retainMap
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|bigTableRetainSize
init|=
name|bigTableRetainList
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNameList
init|=
name|mapJoinDesc
operator|.
name|getOutputColumnNames
argument_list|()
decl_stmt|;
name|String
index|[]
name|mapJoinOutputColumnNames
init|=
name|outputColumnNameList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// Use a utility method to get the MapJoin output TypeInfo.
name|TypeInfo
index|[]
name|mapJoinOutputTypeInfos
init|=
name|VectorMapJoinBaseOperator
operator|.
name|getOutputTypeInfos
argument_list|(
name|mapJoinDesc
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isVectorOutput
init|=
name|MapJoinTestConfig
operator|.
name|isVectorOutput
argument_list|(
name|mapJoinImplementation
argument_list|)
decl_stmt|;
comment|/*      * Always create a row-mode SelectOperator.  If we are vector-mode, next we will use its      * expressions and replace it with a VectorSelectOperator.      */
name|Operator
argument_list|<
name|SelectDesc
argument_list|>
name|selectOperator
init|=
name|makeInterceptSelectOperator
argument_list|(
name|mapJoinOperator
argument_list|,
name|bigTableKeySize
argument_list|,
name|bigTableRetainSize
argument_list|,
name|mapJoinOutputColumnNames
argument_list|,
name|mapJoinOutputTypeInfos
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|selectOutputColumnNameList
init|=
operator|(
operator|(
name|SelectDesc
operator|)
name|selectOperator
operator|.
name|getConf
argument_list|()
operator|)
operator|.
name|getOutputColumnNames
argument_list|()
decl_stmt|;
name|String
index|[]
name|selectOutputColumnNames
init|=
name|selectOutputColumnNameList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|isVectorOutput
condition|)
block|{
name|selectOperator
operator|=
name|vectorizeInterceptSelectOperator
argument_list|(
name|mapJoinOperator
argument_list|,
name|bigTableKeySize
argument_list|,
name|bigTableRetainSize
argument_list|,
name|selectOperator
argument_list|)
expr_stmt|;
block|}
comment|/*      * Create test description just for FULL OUTER INTERCEPT with different      */
name|MapJoinTestDescription
name|interceptTestDesc
init|=
operator|new
name|MapJoinTestDescription
argument_list|(
name|testDesc
operator|.
name|hiveConf
argument_list|,
name|testDesc
operator|.
name|vectorMapJoinVariation
argument_list|,
name|selectOutputColumnNames
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|mapJoinOutputTypeInfos
argument_list|,
name|bigTableRetainSize
argument_list|)
argument_list|,
name|testDesc
operator|.
name|bigTableKeyColumnNums
argument_list|,
name|testDesc
operator|.
name|smallTableValueTypeInfos
argument_list|,
name|testDesc
operator|.
name|smallTableRetainKeyColumnNums
argument_list|,
name|testDesc
operator|.
name|smallTableGenerationParameters
argument_list|,
name|testDesc
operator|.
name|mapJoinPlanVariation
argument_list|)
decl_stmt|;
name|MapJoinDesc
name|intersectMapJoinDesc
init|=
name|createMapJoinDesc
argument_list|(
name|interceptTestDesc
argument_list|,
comment|/* isFullOuterIntersect */
literal|true
argument_list|)
decl_stmt|;
comment|/*      * Create FULL OUTER INTERSECT MapJoin operator.      */
name|CreateMapJoinResult
name|interceptCreateMapJoinResult
init|=
name|createMapJoinImplementation
argument_list|(
name|mapJoinImplementation
argument_list|,
name|interceptTestDesc
argument_list|,
name|testData
argument_list|,
name|intersectMapJoinDesc
argument_list|)
decl_stmt|;
name|MapJoinOperator
name|intersectMapJoinOperator
init|=
name|interceptCreateMapJoinResult
operator|.
name|mapJoinOperator
decl_stmt|;
name|MapJoinTableContainer
name|intersectMapJoinTableContainer
init|=
name|interceptCreateMapJoinResult
operator|.
name|mapJoinTableContainer
decl_stmt|;
name|MapJoinTableContainerSerDe
name|interceptMapJoinTableContainerSerDe
init|=
name|interceptCreateMapJoinResult
operator|.
name|mapJoinTableContainerSerDe
decl_stmt|;
name|connectOperators
argument_list|(
name|mapJoinOperator
argument_list|,
name|selectOperator
argument_list|)
expr_stmt|;
name|connectOperators
argument_list|(
name|selectOperator
argument_list|,
name|intersectMapJoinOperator
argument_list|)
expr_stmt|;
name|CountCollectorTestOperator
name|interceptTestCollectorOperator
decl_stmt|;
if|if
condition|(
operator|!
name|isVectorOutput
condition|)
block|{
name|interceptTestCollectorOperator
operator|=
operator|new
name|TestMultiSetCollectorOperator
argument_list|(
name|interceptTestDesc
operator|.
name|outputObjectInspectors
argument_list|,
name|outputTestRowMultiSet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|VectorizationContext
name|vContext
init|=
operator|(
operator|(
name|VectorizationContextRegion
operator|)
name|intersectMapJoinOperator
operator|)
operator|.
name|getOutputVectorizationContext
argument_list|()
decl_stmt|;
name|int
index|[]
name|intersectProjectionColumns
init|=
name|ArrayUtils
operator|.
name|toPrimitive
argument_list|(
name|vContext
operator|.
name|getProjectedColumns
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|interceptTestCollectorOperator
operator|=
operator|new
name|TestMultiSetVectorCollectorOperator
argument_list|(
name|intersectProjectionColumns
argument_list|,
name|interceptTestDesc
operator|.
name|outputTypeInfos
argument_list|,
name|interceptTestDesc
operator|.
name|outputObjectInspectors
argument_list|,
name|outputTestRowMultiSet
argument_list|)
expr_stmt|;
block|}
name|connectOperators
argument_list|(
name|intersectMapJoinOperator
argument_list|,
name|interceptTestCollectorOperator
argument_list|)
expr_stmt|;
comment|// Setup the FULL OUTER INTERSECT MapJoin's inputObjInspector to include the Small Table, etc.
name|intersectMapJoinOperator
operator|.
name|setInputObjInspectors
argument_list|(
name|interceptTestDesc
operator|.
name|inputObjectInspectors
argument_list|)
expr_stmt|;
comment|// Now, invoke initializeOp methods from the root MapJoin operator.
name|mapJoinOperator
operator|.
name|initialize
argument_list|(
name|testDesc
operator|.
name|hiveConf
argument_list|,
name|testDesc
operator|.
name|inputObjectInspectors
argument_list|)
expr_stmt|;
comment|// Fixup the mapJoinTables container references to our test data.
name|mapJoinOperator
operator|.
name|setTestMapJoinTableContainer
argument_list|(
literal|1
argument_list|,
name|mapJoinTableContainer
argument_list|,
name|mapJoinTableContainerSerDe
argument_list|)
expr_stmt|;
name|intersectMapJoinOperator
operator|.
name|setTestMapJoinTableContainer
argument_list|(
literal|1
argument_list|,
name|intersectMapJoinTableContainer
argument_list|,
name|interceptMapJoinTableContainerSerDe
argument_list|)
expr_stmt|;
return|return
name|interceptTestCollectorOperator
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|newOperatorList
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
block|}
end_class

end_unit

