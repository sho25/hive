begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|AsyncPbRpcProxy
operator|.
name|ExecuteRequestCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|plugin
operator|.
name|rpc
operator|.
name|LlapPluginProtocolProtos
operator|.
name|UpdateQueryRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|plugin
operator|.
name|rpc
operator|.
name|LlapPluginProtocolProtos
operator|.
name|UpdateQueryResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestGuaranteedTaskAllocator
block|{
specifier|static
class|class
name|MockCommunicator
implements|implements
name|LlapPluginEndpointClient
block|{
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|messages
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|sendUpdateQuery
parameter_list|(
name|UpdateQueryRequestProto
name|request
parameter_list|,
name|AmPluginNode
name|node
parameter_list|,
name|UpdateRequestContext
name|callback
parameter_list|)
block|{
name|WmTezSession
name|session
init|=
operator|(
name|WmTezSession
operator|)
name|node
decl_stmt|;
name|messages
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|session
operator|.
name|getSessionId
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getGuaranteedTaskCount
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|.
name|setResponse
argument_list|(
name|UpdateQueryResponseProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|GuaranteedTasksAllocatorForTest
extends|extends
name|GuaranteedTasksAllocator
block|{
name|int
name|executorCount
init|=
literal|0
decl_stmt|;
specifier|public
name|GuaranteedTasksAllocatorForTest
parameter_list|(
name|LlapPluginEndpointClient
name|amCommunicator
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|amCommunicator
argument_list|)
expr_stmt|;
block|}
comment|// Override external stuff. These could also be injected as extra classes.
annotation|@
name|Override
specifier|protected
name|int
name|getExecutorCount
parameter_list|(
name|boolean
name|allowUpdate
parameter_list|)
block|{
return|return
name|executorCount
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualAllocations
parameter_list|()
block|{
name|testEqualAllocation
argument_list|(
literal|8
argument_list|,
literal|5
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|testEqualAllocation
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|testEqualAllocation
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|testEqualAllocation
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|testEqualAllocation
argument_list|(
literal|7
argument_list|,
literal|10
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|testEqualAllocation
argument_list|(
literal|98
argument_list|,
literal|10
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|testEqualAllocation
argument_list|(
literal|40
argument_list|,
literal|5
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|testEqualAllocation
argument_list|(
literal|40
argument_list|,
literal|5
argument_list|,
literal|0.25f
argument_list|)
expr_stmt|;
name|testEqualAllocation
argument_list|(
literal|40
argument_list|,
literal|5
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|testEqualAllocation
argument_list|(
literal|40
argument_list|,
literal|5
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllocations
parameter_list|()
block|{
name|testAllocation
argument_list|(
literal|8
argument_list|,
literal|1.0f
argument_list|,
operator|new
name|double
index|[]
block|{
literal|0.5f
block|,
literal|0.25f
block|,
literal|0.25f
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|2
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
name|testAllocation
argument_list|(
literal|10
argument_list|,
literal|1.0f
argument_list|,
operator|new
name|double
index|[]
block|{
literal|0.33f
block|,
literal|0.4f
block|,
literal|0.27f
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|4
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
comment|// Test incorrect totals. We don't normalize; just make sure we don't under- or overshoot.
name|testAllocation
argument_list|(
literal|10
argument_list|,
literal|1.0f
argument_list|,
operator|new
name|double
index|[]
block|{
literal|0.5f
block|,
literal|0.5f
block|,
literal|0.5f
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
name|testAllocation
argument_list|(
literal|100
argument_list|,
literal|0.5f
argument_list|,
operator|new
name|double
index|[]
block|{
literal|0.15f
block|,
literal|0.15f
block|,
literal|0.15f
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|15
block|,
literal|15
block|,
literal|20
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testAllocation
parameter_list|(
name|int
name|ducks
parameter_list|,
name|double
name|total
parameter_list|,
name|double
index|[]
name|in
parameter_list|,
name|int
index|[]
name|out
parameter_list|)
block|{
name|MockCommunicator
name|comm
init|=
operator|new
name|MockCommunicator
argument_list|()
decl_stmt|;
name|GuaranteedTasksAllocatorForTest
name|qam
init|=
operator|new
name|GuaranteedTasksAllocatorForTest
argument_list|(
name|comm
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|WmTezSession
argument_list|>
name|sessionsToUpdate
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|comm
operator|.
name|messages
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|addSession
argument_list|(
name|in
index|[
name|i
index|]
argument_list|,
name|sessionsToUpdate
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|qam
operator|.
name|executorCount
operator|=
name|ducks
expr_stmt|;
name|qam
operator|.
name|updateSessionsAsync
argument_list|(
name|total
argument_list|,
name|sessionsToUpdate
argument_list|)
expr_stmt|;
name|Integer
index|[]
name|results
init|=
name|getAllocationResults
argument_list|(
name|comm
argument_list|,
name|in
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertNotNull
argument_list|(
name|results
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out
index|[
name|i
index|]
argument_list|,
name|results
index|[
name|i
index|]
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testEqualAllocation
parameter_list|(
name|int
name|ducks
parameter_list|,
name|int
name|sessions
parameter_list|,
name|double
name|total
parameter_list|)
block|{
name|MockCommunicator
name|comm
init|=
operator|new
name|MockCommunicator
argument_list|()
decl_stmt|;
name|GuaranteedTasksAllocatorForTest
name|qam
init|=
operator|new
name|GuaranteedTasksAllocatorForTest
argument_list|(
name|comm
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|WmTezSession
argument_list|>
name|sessionsToUpdate
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|comm
operator|.
name|messages
operator|.
name|clear
argument_list|()
expr_stmt|;
name|double
name|fraction
init|=
name|total
operator|/
name|sessions
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sessions
condition|;
operator|++
name|i
control|)
block|{
name|addSession
argument_list|(
name|fraction
argument_list|,
name|sessionsToUpdate
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|qam
operator|.
name|executorCount
operator|=
name|ducks
expr_stmt|;
name|qam
operator|.
name|updateSessionsAsync
argument_list|(
name|total
argument_list|,
name|sessionsToUpdate
argument_list|)
expr_stmt|;
name|Integer
index|[]
name|results
init|=
name|getAllocationResults
argument_list|(
name|comm
argument_list|,
name|sessions
argument_list|)
decl_stmt|;
name|int
name|min
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|,
name|max
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|,
name|totalAssigned
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertNotNull
argument_list|(
name|results
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|int
name|val
init|=
name|results
index|[
name|i
index|]
decl_stmt|;
name|min
operator|=
name|Math
operator|.
name|min
argument_list|(
name|val
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|val
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|totalAssigned
operator|+=
name|val
expr_stmt|;
block|}
name|assertTrue
argument_list|(
operator|(
name|max
operator|-
name|min
operator|)
operator|<=
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|total
operator|*
name|ducks
operator|-
name|totalAssigned
argument_list|)
operator|<=
literal|0.5f
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Integer
index|[]
name|getAllocationResults
parameter_list|(
name|MockCommunicator
name|comm
parameter_list|,
name|int
name|sessions
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|sessions
argument_list|,
name|comm
operator|.
name|messages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
index|[]
name|results
init|=
operator|new
name|Integer
index|[
name|sessions
index|]
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|e
range|:
name|comm
operator|.
name|messages
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertNull
argument_list|(
name|results
index|[
name|e
operator|.
name|getKey
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|results
index|[
name|e
operator|.
name|getKey
argument_list|()
index|]
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
specifier|private
name|void
name|addSession
parameter_list|(
name|double
name|alloc
parameter_list|,
name|List
argument_list|<
name|WmTezSession
argument_list|>
name|sessionsToUpdate
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|SampleTezSessionState
name|session
init|=
operator|new
name|SampleTezSessionState
argument_list|(
literal|""
operator|+
name|i
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|session
operator|.
name|setClusterFraction
argument_list|(
name|alloc
argument_list|)
expr_stmt|;
name|sessionsToUpdate
operator|.
name|add
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

