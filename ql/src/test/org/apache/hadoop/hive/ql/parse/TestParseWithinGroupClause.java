begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test cases for parse WITHIN GROUP clause syntax.  * function(expression) WITHIN GROUP (ORDER BY sort_expression)  */
end_comment

begin_class
specifier|public
class|class
name|TestParseWithinGroupClause
block|{
name|ParseDriver
name|parseDriver
init|=
operator|new
name|ParseDriver
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testParsePercentileCont
parameter_list|()
throws|throws
name|Exception
block|{
name|ASTNode
name|tree
init|=
name|parseDriver
operator|.
name|parseSelect
argument_list|(
literal|"SELECT percentile_cont(0.4) WITHIN GROUP (ORDER BY val) FROM src"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tree
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|ASTNode
name|selExprNode
init|=
operator|(
name|ASTNode
operator|)
name|tree
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|selExprNode
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|ASTNode
name|functionNode
init|=
operator|(
name|ASTNode
operator|)
name|selExprNode
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HiveParser
operator|.
name|TOK_FUNCTION
argument_list|,
name|functionNode
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|functionNode
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|ASTNode
name|functionNameNode
init|=
operator|(
name|ASTNode
operator|)
name|functionNode
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|functionNameNode
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"percentile_cont"
argument_list|,
name|functionNameNode
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|ASTNode
name|fractionNode
init|=
operator|(
name|ASTNode
operator|)
name|functionNode
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HiveParser
operator|.
name|Number
argument_list|,
name|fractionNode
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0.4"
argument_list|,
name|fractionNode
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|ASTNode
name|withinGroupNode
init|=
operator|(
name|ASTNode
operator|)
name|functionNode
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HiveParser
operator|.
name|TOK_WITHIN_GROUP
argument_list|,
name|withinGroupNode
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ASTNode
name|orderByNode
init|=
operator|(
name|ASTNode
operator|)
name|withinGroupNode
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HiveParser
operator|.
name|TOK_ORDERBY
argument_list|,
name|orderByNode
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ASTNode
name|tabSortColNameNode
init|=
operator|(
name|ASTNode
operator|)
name|orderByNode
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HiveParser
operator|.
name|TOK_TABSORTCOLNAMEASC
argument_list|,
name|tabSortColNameNode
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseMultipleColumnRefs
parameter_list|()
throws|throws
name|Exception
block|{
name|ASTNode
name|tree
init|=
name|parseDriver
operator|.
name|parseSelect
argument_list|(
literal|"SELECT rank(3, 4) WITHIN GROUP (ORDER BY val, val2) FROM src"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ASTNode
name|selExprNode
init|=
operator|(
name|ASTNode
operator|)
name|tree
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ASTNode
name|functionNode
init|=
operator|(
name|ASTNode
operator|)
name|selExprNode
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ASTNode
name|withinGroupNode
init|=
operator|(
name|ASTNode
operator|)
name|functionNode
operator|.
name|getChild
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|ASTNode
name|orderByNode
init|=
operator|(
name|ASTNode
operator|)
name|withinGroupNode
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|orderByNode
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

