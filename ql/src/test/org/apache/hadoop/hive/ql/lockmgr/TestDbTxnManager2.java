begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * See additional tests in {@link org.apache.hadoop.hive.ql.lockmgr.TestDbTxnManager}  * Tests here are "end-to-end"ish and simulate concurrent queries.  */
end_comment

begin_class
specifier|public
class|class
name|TestDbTxnManager2
block|{
specifier|private
specifier|static
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|Driver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HiveTxnManager
name|txnMgr
decl_stmt|;
specifier|private
name|Context
name|ctx
decl_stmt|;
specifier|private
name|Driver
name|driver
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DYNAMICPARTITIONINGMODE
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ctx
operator|=
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|driver
operator|.
name|init
argument_list|()
expr_stmt|;
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|()
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|()
expr_stmt|;
name|txnMgr
operator|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|txnMgr
operator|instanceof
name|DbTxnManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|txnMgr
operator|!=
literal|null
condition|)
name|txnMgr
operator|.
name|closeTxnManager
argument_list|()
expr_stmt|;
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|()
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createTable
parameter_list|()
throws|throws
name|Exception
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"create table if not exists T (a int, b int)"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|ctx
operator|.
name|getHiveLocks
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Lock remained"
argument_list|,
literal|0
argument_list|,
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertOverwriteCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists T2(a int)"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists T3(a int)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert overwrite table T3 select a from T2"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T2"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T3"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|ctx
operator|.
name|getHiveLocks
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Lock remained"
argument_list|,
literal|0
argument_list|,
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists T1"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists T2"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertOverwritePartitionedCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists T4 (name string, gpa double) partitioned by (age int)"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists T5(name string, age int, gpa double)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"INSERT OVERWRITE TABLE T4 PARTITION (age) SELECT name, age, gpa FROM T5"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T5"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T4"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|ctx
operator|.
name|getHiveLocks
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Lock remained"
argument_list|,
literal|0
argument_list|,
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists T5"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists T4"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|basicBlocking
parameter_list|()
throws|throws
name|Exception
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists T6(a int)"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select a from T6"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
comment|//gets S lock on T6
name|List
argument_list|<
name|HiveLock
argument_list|>
name|selectLocks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"drop table if exists T6"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
comment|//tries to get X lock on T1 and gets Waiting state
name|LockState
name|lockState
init|=
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fiddler"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T6"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"T6"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|selectLocks
argument_list|)
expr_stmt|;
comment|//release S on T6
comment|//attempt to X on T6 again - succeed
name|lockState
operator|=
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|checkLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T6"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|xLock
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveLock
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|xLock
operator|.
name|add
argument_list|(
operator|new
name|DbLockManager
operator|.
name|DbHiveLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|xLock
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists T6"
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of locks found"
argument_list|,
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lockConflictDbTable
parameter_list|()
throws|throws
name|Exception
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create database if not exists temp"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists temp.T7(a int, b int) clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update temp.T7 set a = 5 where b = 6"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|updateLocks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"drop database if exists temp"
argument_list|)
expr_stmt|;
name|LockState
name|lockState
init|=
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fiddler"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//gets SS lock on T7
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"temp"
argument_list|,
literal|"T7"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"temp"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|updateLocks
argument_list|)
expr_stmt|;
name|lockState
operator|=
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|checkLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"temp"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|xLock
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveLock
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|xLock
operator|.
name|add
argument_list|(
operator|new
name|DbLockManager
operator|.
name|DbHiveLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|xLock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|updateSelectUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table T8(a int, b int) clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"delete from T8 where b = 89"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
comment|//gets SS lock on T8
name|List
argument_list|<
name|HiveLock
argument_list|>
name|deleteLocks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select a from T8"
argument_list|)
expr_stmt|;
comment|//gets S lock on T8
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fiddler"
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update T8 set a = 1 where b = 1"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|LockState
name|lockState
init|=
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Practical"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//waits for SS lock on T8 from fifer
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|3
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T8"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T8"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"T8"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|deleteLocks
argument_list|)
expr_stmt|;
name|lockState
operator|=
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|checkLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T8"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T8"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|relLocks
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveLock
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|relLocks
operator|.
name|add
argument_list|(
operator|new
name|DbLockManager
operator|.
name|DbHiveLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|relLocks
operator|.
name|add
argument_list|(
operator|new
name|DbLockManager
operator|.
name|DbHiveLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|relLocks
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists T6"
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of locks found"
argument_list|,
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockRetryLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_LOCK_NUMRETRIES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|TXN_MGR_DUMP_LOCK_STATE_ON_ACQUIRE_TIMEOUT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HiveTxnManager
name|otherTxnMgr
init|=
operator|new
name|DbTxnManager
argument_list|()
decl_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|otherTxnMgr
operator|)
operator|.
name|setHiveConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table T9(a int)"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select * from T9"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Vincent Vega"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T9"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"drop table T9"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
try|try
block|{
name|otherTxnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Winston Winnfield"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Got wrong lock exception"
argument_list|,
name|ErrorMsg
operator|.
name|LOCK_ACQUIRE_TIMEDOUT
argument_list|,
name|ex
operator|.
name|getCanonicalErrorMsg
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T9"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|otherTxnMgr
operator|.
name|closeTxnManager
argument_list|()
expr_stmt|;
block|}
comment|/**    * check that locks in Waiting state show what they are waiting on    * This test is somewhat abusive in that it make DbLockManager retain locks for 2    * different queries (which are not part of the same transaction) which can never    * happen in real use cases... but it makes testing convenient.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testLockBlockedBy
parameter_list|()
throws|throws
name|Exception
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table TAB_BLOCKED (a int, b int) clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select * from TAB_BLOCKED"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"I AM SAM"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_BLOCKED"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"drop table TAB_BLOCKED"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"SAM I AM"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//make non-blocking
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_BLOCKED"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_BLOCKED"
argument_list|,
literal|null
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"BlockedByExtId doesn't match"
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlockedByExtId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"BlockedByIntId doesn't match"
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLockIdInternal
argument_list|()
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlockedByIntId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDummyTxnManagerOnAcidTable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create an ACID table with DbTxnManager
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table T10 (a int, b int) clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table T11 (a int, b int) clustered by(b) into 2 buckets stored as orc"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
comment|// All DML should fail with DummyTxnManager on ACID table
name|useDummyTxnManagerTemporarily
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select * from T10"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorMsg
operator|.
name|TXNMGR_NOT_ACID
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cpr
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"This command is not allowed on an ACID table"
argument_list|)
argument_list|)
expr_stmt|;
name|useDummyTxnManagerTemporarily
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert into table T10 values (1, 2)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorMsg
operator|.
name|TXNMGR_NOT_ACID
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cpr
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"This command is not allowed on an ACID table"
argument_list|)
argument_list|)
expr_stmt|;
name|useDummyTxnManagerTemporarily
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert overwrite table T10 select a, b from T11"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorMsg
operator|.
name|NO_INSERT_OVERWRITE_WITH_ACID
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cpr
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"INSERT OVERWRITE not allowed on table with OutputFormat"
operator|+
literal|" that implements AcidOutputFormat while transaction manager that supports ACID is in use"
argument_list|)
argument_list|)
expr_stmt|;
name|useDummyTxnManagerTemporarily
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update T10 set a=0 where b=1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorMsg
operator|.
name|ACID_OP_ON_NONACID_TXNMGR
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cpr
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Attempt to do update or delete using transaction manager that does not support these operations."
argument_list|)
argument_list|)
expr_stmt|;
name|useDummyTxnManagerTemporarily
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"delete from T10"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorMsg
operator|.
name|ACID_OP_ON_NONACID_TXNMGR
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cpr
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Attempt to do update or delete using transaction manager that does not support these operations."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Temporarily set DummyTxnManager as the txn manager for the session.    * HIVE-10632: we have to do this for every new query, because this jira introduced an AcidEventListener    * in HiveMetaStore, which will instantiate a txn handler, but due to HIVE-12902, we have to call    * TxnHandler.setConf and TxnHandler.checkQFileTestHack and TxnDbUtil.setConfValues, which will    * set txn manager back to DbTxnManager.    */
specifier|private
name|void
name|useDummyTxnManagerTemporarily
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|Exception
block|{
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DummyTxnManager"
argument_list|)
expr_stmt|;
name|txnMgr
operator|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|initTxnMgr
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|txnMgr
operator|instanceof
name|DummyTxnManager
argument_list|)
expr_stmt|;
block|}
comment|/**    * Normally the compaction process will clean up records in TXN_COMPONENTS, COMPLETED_TXN_COMPONENTS,    * COMPACTION_QUEUE and COMPLETED_COMPACTIONS. But if a table/partition has been dropped before    * compaction and there are still relevant records in those metastore tables, the Initiator will    * complain about not being able to find the table/partition. This method is to test and make sure    * we clean up relevant records as soon as a table/partition is dropped.    *    * Note, here we don't need to worry about cleaning up TXNS table, since it's handled separately.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMetastoreTablesCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create database if not exists temp"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
comment|// Create some ACID tables: T10, T11 - unpartitioned table, T12p, T13p - partitioned table
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table temp.T10 (a int, b int) clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table temp.T11 (a int, b int) clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table temp.T12p (a int, b int) partitioned by (ds string, hour string) clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table temp.T13p (a int, b int) partitioned by (ds string, hour string) clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
comment|// Successfully insert some data into ACID tables, so that we have records in COMPLETED_TXN_COMPONENTS
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T10 values (1, 1)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T10 values (2, 2)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T11 values (3, 3)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T11 values (4, 4)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T12p partition (ds='today', hour='1') values (5, 5)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T12p partition (ds='tomorrow', hour='2') values (6, 6)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T13p partition (ds='today', hour='1') values (7, 7)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T13p partition (ds='tomorrow', hour='2') values (8, 8)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_DATABASE='temp' and CTC_TABLE in ('t10', 't11')"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_DATABASE='temp' and CTC_TABLE in ('t12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Fail some inserts, so that we have records in TXN_COMPONENTS
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEROLLBACKTXN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T10 values (9, 9)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T11 values (10, 10)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T12p partition (ds='today', hour='1') values (11, 11)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T13p partition (ds='today', hour='1') values (12, 12)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where TC_DATABASE='temp' and TC_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEROLLBACKTXN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Drop a table/partition; corresponding records in TXN_COMPONENTS and COMPLETED_TXN_COMPONENTS should disappear
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where TC_DATABASE='temp' and TC_TABLE='t10'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_DATABASE='temp' and CTC_TABLE='t10'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table temp.T10"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where TC_DATABASE='temp' and TC_TABLE='t10'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_DATABASE='temp' and CTC_TABLE='t10'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where TC_DATABASE='temp' and TC_TABLE='t12p' and TC_PARTITION='ds=today/hour=1'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_DATABASE='temp' and CTC_TABLE='t12p' and CTC_PARTITION='ds=today/hour=1'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T12p drop partition (ds='today', hour='1')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where TC_DATABASE='temp' and TC_TABLE='t12p' and TC_PARTITION='ds=today/hour=1'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_DATABASE='temp' and CTC_TABLE='t12p' and CTC_PARTITION='ds=today/hour=1'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Successfully perform compaction on a table/partition, so that we have successful records in COMPLETED_COMPACTIONS
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T11 compact 'minor'"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t11' and CQ_STATE='i' and CQ_TYPE='i'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t11' and CQ_STATE='r' and CQ_TYPE='i'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TestTxnCommands2
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t11'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_COMPACTIONS where CC_DATABASE='temp' and CC_TABLE='t11' and CC_STATE='s' and CC_TYPE='i'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T12p partition (ds='tomorrow', hour='2') compact 'minor'"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t12p' and CQ_PARTITION='ds=tomorrow/hour=2' and CQ_STATE='i' and CQ_TYPE='i'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t12p' and CQ_PARTITION='ds=tomorrow/hour=2' and CQ_STATE='r' and CQ_TYPE='i'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TestTxnCommands2
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t12p'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_COMPACTIONS where CC_DATABASE='temp' and CC_TABLE='t12p' and CC_STATE='s' and CC_TYPE='i'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Fail compaction, so that we have failed records in COMPLETED_COMPACTIONS
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEFAILCOMPACTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T11 compact 'major'"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t11' and CQ_STATE='i' and CQ_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// will fail
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t11' and CQ_STATE='i' and CQ_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_COMPACTIONS where CC_DATABASE='temp' and CC_TABLE='t11' and CC_STATE='f' and CC_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T12p partition (ds='tomorrow', hour='2') compact 'major'"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t12p' and CQ_PARTITION='ds=tomorrow/hour=2' and CQ_STATE='i' and CQ_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// will fail
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t12p' and CQ_PARTITION='ds=tomorrow/hour=2' and CQ_STATE='i' and CQ_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_COMPACTIONS where CC_DATABASE='temp' and CC_TABLE='t12p' and CC_STATE='f' and CC_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEFAILCOMPACTION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Put 2 records into COMPACTION_QUEUE and do nothing
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T11 compact 'major'"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t11' and CQ_STATE='i' and CQ_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T12p partition (ds='tomorrow', hour='2') compact 'major'"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t12p' and CQ_PARTITION='ds=tomorrow/hour=2' and CQ_STATE='i' and CQ_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Drop a table/partition, corresponding records in COMPACTION_QUEUE and COMPLETED_COMPACTIONS should disappear
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table temp.T11"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t11'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_COMPACTIONS where CC_DATABASE='temp' and CC_TABLE='t11'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T12p drop partition (ds='tomorrow', hour='2')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t12p'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_COMPACTIONS where CC_DATABASE='temp' and CC_TABLE='t12p'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Put 1 record into COMPACTION_QUEUE and do nothing
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T13p partition (ds='today', hour='1') compact 'major'"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t13p' and CQ_STATE='i' and CQ_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Drop database, everything in all 4 meta tables should disappear
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where TC_DATABASE='temp' and TC_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_DATABASE='temp' and CTC_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_COMPACTIONS where CC_DATABASE='temp' and CC_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop database if exists temp cascade"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where TC_DATABASE='temp' and TC_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_DATABASE='temp' and CTC_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_COMPACTIONS where CC_DATABASE='temp' and CC_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkLock
parameter_list|(
name|LockType
name|type
parameter_list|,
name|LockState
name|state
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|,
name|String
name|partition
parameter_list|,
name|ShowLocksResponseElement
name|l
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|l
operator|.
name|toString
argument_list|()
argument_list|,
name|l
operator|.
name|getType
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|l
operator|.
name|toString
argument_list|()
argument_list|,
name|l
operator|.
name|getState
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|l
operator|.
name|toString
argument_list|()
argument_list|,
name|normalizeCase
argument_list|(
name|l
operator|.
name|getDbname
argument_list|()
argument_list|)
argument_list|,
name|normalizeCase
argument_list|(
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|l
operator|.
name|toString
argument_list|()
argument_list|,
name|normalizeCase
argument_list|(
name|l
operator|.
name|getTablename
argument_list|()
argument_list|)
argument_list|,
name|normalizeCase
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|l
operator|.
name|toString
argument_list|()
argument_list|,
name|normalizeCase
argument_list|(
name|l
operator|.
name|getPartname
argument_list|()
argument_list|)
argument_list|,
name|normalizeCase
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkCmdOnDriver
parameter_list|(
name|CommandProcessorResponse
name|cpr
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cpr
operator|.
name|toString
argument_list|()
argument_list|,
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|normalizeCase
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|==
literal|null
condition|?
literal|null
else|:
name|s
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|getLocks
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getLocks
argument_list|(
name|this
operator|.
name|txnMgr
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|getLocks
parameter_list|(
name|HiveTxnManager
name|txnMgr
parameter_list|)
throws|throws
name|Exception
block|{
name|ShowLocksResponse
name|rsp
init|=
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|getLocks
argument_list|()
decl_stmt|;
return|return
name|rsp
operator|.
name|getLocks
argument_list|()
return|;
block|}
block|}
end_class

end_unit

