begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AddDynamicPartitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DataOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TestTxnCommands2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|AcidWriteSetService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * See additional tests in {@link org.apache.hadoop.hive.ql.lockmgr.TestDbTxnManager}  * Tests here are "end-to-end"ish and simulate concurrent queries.  *   * The general approach is to use an instance of Driver to use Driver.run() to create tables  * Use Driver.compile() to generate QueryPlan which can then be passed to HiveTxnManager.acquireLocks().  * Same HiveTxnManager is used to openTxn()/commitTxn() etc.  This can exercise almost the entire  * code path that CLI would but with the advantage that you can create a 2nd HiveTxnManager and then  * simulate interleaved transactional/locking operations but all from within a single thread.  * The later not only controls concurrency precisely but is the only way to run in UT env with DerbyDB.  */
end_comment

begin_class
specifier|public
class|class
name|TestDbTxnManager2
block|{
specifier|private
specifier|static
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|Driver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HiveTxnManager
name|txnMgr
decl_stmt|;
specifier|private
name|Context
name|ctx
decl_stmt|;
specifier|private
name|Driver
name|driver
decl_stmt|;
name|TxnStore
name|txnHandler
decl_stmt|;
specifier|public
name|TestDbTxnManager2
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DYNAMICPARTITIONINGMODE
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ctx
operator|=
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|driver
operator|.
name|init
argument_list|()
expr_stmt|;
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|()
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|()
expr_stmt|;
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|ss
operator|.
name|initTxnMgr
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|txnMgr
operator|=
name|ss
operator|.
name|getTxnMgr
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|txnMgr
operator|instanceof
name|DbTxnManager
argument_list|)
expr_stmt|;
name|txnHandler
operator|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|txnMgr
operator|!=
literal|null
condition|)
name|txnMgr
operator|.
name|closeTxnManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocksInSubquery
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"T"
block|,
literal|"S"
block|,
literal|"R"
block|}
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists T (a int, b int)"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists S (a int, b int) clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists R (a int, b int) clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"delete from S where a in (select a from T where b = 1)"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"S"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|rollbackTxn
argument_list|()
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update S set a = 7 where a in (select a from T where b = 1)"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"S"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|rollbackTxn
argument_list|()
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert into R select * from S where a in (select a from T where b = 1)"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|3
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"S"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"R"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createTable
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"T"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"create table if not exists T (a int, b int)"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|ctx
operator|.
name|getHiveLocks
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Lock remained"
argument_list|,
literal|0
argument_list|,
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertOverwriteCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"T2"
block|,
literal|"T3"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists T2(a int)"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists T3(a int)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert overwrite table T3 select a from T2"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T2"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T3"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|ctx
operator|.
name|getHiveLocks
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Lock remained"
argument_list|,
literal|0
argument_list|,
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists T1"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists T2"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertOverwritePartitionedCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"T4"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists T4 (name string, gpa double) partitioned by (age int)"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists T5(name string, age int, gpa double)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"INSERT OVERWRITE TABLE T4 PARTITION (age) SELECT name, age, gpa FROM T5"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T5"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T4"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|ctx
operator|.
name|getHiveLocks
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Lock remained"
argument_list|,
literal|0
argument_list|,
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists T5"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists T4"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|basicBlocking
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"T6"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists T6(a int)"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select a from T6"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
comment|//gets S lock on T6
name|List
argument_list|<
name|HiveLock
argument_list|>
name|selectLocks
init|=
name|ctx
operator|.
name|getHiveLocks
argument_list|()
decl_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"drop table if exists T6"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
comment|//tries to get X lock on T1 and gets Waiting state
name|LockState
name|lockState
init|=
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fiddler"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T6"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"T6"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|selectLocks
argument_list|)
expr_stmt|;
comment|//release S on T6
comment|//attempt to X on T6 again - succeed
name|lockState
operator|=
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|checkLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T6"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|xLock
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveLock
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|xLock
operator|.
name|add
argument_list|(
operator|new
name|DbLockManager
operator|.
name|DbHiveLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|xLock
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists T6"
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of locks found"
argument_list|,
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lockConflictDbTable
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"temp.T7"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create database if not exists temp"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists temp.T7(a int, b int) clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update temp.T7 set a = 5 where b = 6"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"drop database if exists temp"
argument_list|)
argument_list|)
expr_stmt|;
name|HiveTxnManager
name|txnMgr2
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|//txnMgr2.openTxn("Fiddler");
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr2
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fiddler"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//gets SS lock on T7
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"temp"
argument_list|,
literal|"T7"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"temp"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|checkLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"temp"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|xLock
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveLock
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|xLock
operator|.
name|add
argument_list|(
operator|new
name|DbLockManager
operator|.
name|DbHiveLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|xLock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|updateSelectUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"T8"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table T8(a int, b int) clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"delete from T8 where b = 89"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
comment|//gets SS lock on T8
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select a from T8"
argument_list|)
expr_stmt|;
comment|//gets S lock on T8
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|HiveTxnManager
name|txnMgr2
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"Fiddler"
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fiddler"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update T8 set a = 1 where b = 1"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr2
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Practical"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//waits for SS lock on T8 from fifer
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|3
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T8"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T8"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"T8"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|rollbackTxn
argument_list|()
expr_stmt|;
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr2
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|checkLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T8"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T8"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists T6"
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of locks found"
argument_list|,
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockRetryLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"T9"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_LOCK_NUMRETRIES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|TXN_MGR_DUMP_LOCK_STATE_ON_ACQUIRE_TIMEOUT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HiveTxnManager
name|otherTxnMgr
init|=
operator|new
name|DbTxnManager
argument_list|()
decl_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|otherTxnMgr
operator|)
operator|.
name|setHiveConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table T9(a int)"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select * from T9"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Vincent Vega"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T9"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"drop table T9"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
try|try
block|{
name|otherTxnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Winston Winnfield"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Got wrong lock exception"
argument_list|,
name|ErrorMsg
operator|.
name|LOCK_ACQUIRE_TIMEDOUT
argument_list|,
name|ex
operator|.
name|getCanonicalErrorMsg
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"T9"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|otherTxnMgr
operator|.
name|closeTxnManager
argument_list|()
expr_stmt|;
block|}
comment|/**    * check that locks in Waiting state show what they are waiting on    * This test is somewhat abusive in that it make DbLockManager retain locks for 2    * different queries (which are not part of the same transaction) which can never    * happen in real use cases... but it makes testing convenient.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testLockBlockedBy
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TAB_BLOCKED"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table TAB_BLOCKED (a int, b int) clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select * from TAB_BLOCKED"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"I AM SAM"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_BLOCKED"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"drop table TAB_BLOCKED"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"SAM I AM"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//make non-blocking
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_BLOCKED"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_BLOCKED"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"BlockedByExtId doesn't match"
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlockedByExtId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"BlockedByIntId doesn't match"
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLockIdInternal
argument_list|()
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlockedByIntId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDummyTxnManagerOnAcidTable
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"T10"
block|,
literal|"T11"
block|}
argument_list|)
expr_stmt|;
comment|// Create an ACID table with DbTxnManager
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table T10 (a int, b int) clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table T11 (a int, b int) clustered by(b) into 2 buckets stored as orc"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
comment|// All DML should fail with DummyTxnManager on ACID table
name|useDummyTxnManagerTemporarily
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select * from T10"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorMsg
operator|.
name|TXNMGR_NOT_ACID
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cpr
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"This command is not allowed on an ACID table"
argument_list|)
argument_list|)
expr_stmt|;
name|useDummyTxnManagerTemporarily
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert into table T10 values (1, 2)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorMsg
operator|.
name|TXNMGR_NOT_ACID
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cpr
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"This command is not allowed on an ACID table"
argument_list|)
argument_list|)
expr_stmt|;
name|useDummyTxnManagerTemporarily
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert overwrite table T10 select a, b from T11"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorMsg
operator|.
name|NO_INSERT_OVERWRITE_WITH_ACID
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cpr
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"INSERT OVERWRITE not allowed on table with OutputFormat"
operator|+
literal|" that implements AcidOutputFormat while transaction manager that supports ACID is in use"
argument_list|)
argument_list|)
expr_stmt|;
name|useDummyTxnManagerTemporarily
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update T10 set a=0 where b=1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorMsg
operator|.
name|ACID_OP_ON_NONACID_TXNMGR
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cpr
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Attempt to do update or delete using transaction manager that does not support these operations."
argument_list|)
argument_list|)
expr_stmt|;
name|useDummyTxnManagerTemporarily
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"delete from T10"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorMsg
operator|.
name|ACID_OP_ON_NONACID_TXNMGR
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|cpr
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cpr
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Attempt to do update or delete using transaction manager that does not support these operations."
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DbTxnManager"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Temporarily set DummyTxnManager as the txn manager for the session.    * HIVE-10632: we have to do this for every new query, because this jira introduced an AcidEventListener    * in HiveMetaStore, which will instantiate a txn handler, but due to HIVE-12902, we have to call    * TxnHandler.setConf and TxnHandler.checkQFileTestHack and TxnDbUtil.setConfValues, which will    * set txn manager back to DbTxnManager.    */
specifier|private
name|void
name|useDummyTxnManagerTemporarily
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|Exception
block|{
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DummyTxnManager"
argument_list|)
expr_stmt|;
name|txnMgr
operator|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|initTxnMgr
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|txnMgr
operator|instanceof
name|DummyTxnManager
argument_list|)
expr_stmt|;
block|}
comment|/**    * Normally the compaction process will clean up records in TXN_COMPONENTS, COMPLETED_TXN_COMPONENTS,    * COMPACTION_QUEUE and COMPLETED_COMPACTIONS. But if a table/partition has been dropped before    * compaction and there are still relevant records in those metastore tables, the Initiator will    * complain about not being able to find the table/partition. This method is to test and make sure    * we clean up relevant records as soon as a table/partition is dropped.    *    * Note, here we don't need to worry about cleaning up TXNS table, since it's handled separately.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMetastoreTablesCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"temp.T10"
block|,
literal|"temp.T11"
block|,
literal|"temp.T12p"
block|,
literal|"temp.T13p"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create database if not exists temp"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
comment|// Create some ACID tables: T10, T11 - unpartitioned table, T12p, T13p - partitioned table
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table temp.T10 (a int, b int) clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table temp.T11 (a int, b int) clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table temp.T12p (a int, b int) partitioned by (ds string, hour string) clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table temp.T13p (a int, b int) partitioned by (ds string, hour string) clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
comment|// Successfully insert some data into ACID tables, so that we have records in COMPLETED_TXN_COMPONENTS
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T10 values (1, 1)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T10 values (2, 2)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T11 values (3, 3)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T11 values (4, 4)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T12p partition (ds='today', hour='1') values (5, 5)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T12p partition (ds='tomorrow', hour='2') values (6, 6)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T13p partition (ds='today', hour='1') values (7, 7)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T13p partition (ds='tomorrow', hour='2') values (8, 8)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_DATABASE='temp' and CTC_TABLE in ('t10', 't11')"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_DATABASE='temp' and CTC_TABLE in ('t12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Fail some inserts, so that we have records in TXN_COMPONENTS
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEROLLBACKTXN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T10 values (9, 9)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T11 values (10, 10)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T12p partition (ds='today', hour='1') values (11, 11)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into temp.T13p partition (ds='today', hour='1') values (12, 12)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where TC_DATABASE='temp' and TC_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEROLLBACKTXN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Drop a table/partition; corresponding records in TXN_COMPONENTS and COMPLETED_TXN_COMPONENTS should disappear
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where TC_DATABASE='temp' and TC_TABLE='t10'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_DATABASE='temp' and CTC_TABLE='t10'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table temp.T10"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where TC_DATABASE='temp' and TC_TABLE='t10'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_DATABASE='temp' and CTC_TABLE='t10'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where TC_DATABASE='temp' and TC_TABLE='t12p' and TC_PARTITION='ds=today/hour=1'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_DATABASE='temp' and CTC_TABLE='t12p' and CTC_PARTITION='ds=today/hour=1'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T12p drop partition (ds='today', hour='1')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where TC_DATABASE='temp' and TC_TABLE='t12p' and TC_PARTITION='ds=today/hour=1'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_DATABASE='temp' and CTC_TABLE='t12p' and CTC_PARTITION='ds=today/hour=1'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Successfully perform compaction on a table/partition, so that we have successful records in COMPLETED_COMPACTIONS
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T11 compact 'minor'"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t11' and CQ_STATE='i' and CQ_TYPE='i'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t11' and CQ_STATE='r' and CQ_TYPE='i'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TestTxnCommands2
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t11'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_COMPACTIONS where CC_DATABASE='temp' and CC_TABLE='t11' and CC_STATE='s' and CC_TYPE='i'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T12p partition (ds='tomorrow', hour='2') compact 'minor'"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t12p' and CQ_PARTITION='ds=tomorrow/hour=2' and CQ_STATE='i' and CQ_TYPE='i'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t12p' and CQ_PARTITION='ds=tomorrow/hour=2' and CQ_STATE='r' and CQ_TYPE='i'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TestTxnCommands2
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t12p'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_COMPACTIONS where CC_DATABASE='temp' and CC_TABLE='t12p' and CC_STATE='s' and CC_TYPE='i'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Fail compaction, so that we have failed records in COMPLETED_COMPACTIONS
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEFAILCOMPACTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T11 compact 'major'"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t11' and CQ_STATE='i' and CQ_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// will fail
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t11' and CQ_STATE='i' and CQ_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_COMPACTIONS where CC_DATABASE='temp' and CC_TABLE='t11' and CC_STATE='f' and CC_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T12p partition (ds='tomorrow', hour='2') compact 'major'"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t12p' and CQ_PARTITION='ds=tomorrow/hour=2' and CQ_STATE='i' and CQ_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|TestTxnCommands2
operator|.
name|runWorker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// will fail
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t12p' and CQ_PARTITION='ds=tomorrow/hour=2' and CQ_STATE='i' and CQ_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_COMPACTIONS where CC_DATABASE='temp' and CC_TABLE='t12p' and CC_STATE='f' and CC_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEFAILCOMPACTION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Put 2 records into COMPACTION_QUEUE and do nothing
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T11 compact 'major'"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t11' and CQ_STATE='i' and CQ_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T12p partition (ds='tomorrow', hour='2') compact 'major'"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t12p' and CQ_PARTITION='ds=tomorrow/hour=2' and CQ_STATE='i' and CQ_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Drop a table/partition, corresponding records in COMPACTION_QUEUE and COMPLETED_COMPACTIONS should disappear
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table temp.T11"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t11'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_COMPACTIONS where CC_DATABASE='temp' and CC_TABLE='t11'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T12p drop partition (ds='tomorrow', hour='2')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t12p'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_COMPACTIONS where CC_DATABASE='temp' and CC_TABLE='t12p'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Put 1 record into COMPACTION_QUEUE and do nothing
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table temp.T13p partition (ds='today', hour='1') compact 'major'"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE='t13p' and CQ_STATE='i' and CQ_TYPE='a'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Drop database, everything in all 4 meta tables should disappear
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where TC_DATABASE='temp' and TC_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_DATABASE='temp' and CTC_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_COMPACTIONS where CC_DATABASE='temp' and CC_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop database if exists temp cascade"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where TC_DATABASE='temp' and TC_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where CTC_DATABASE='temp' and CTC_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPACTION_QUEUE where CQ_DATABASE='temp' and CQ_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_COMPACTIONS where CC_DATABASE='temp' and CC_TABLE in ('t10', 't11', 't12p', 't13p')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**    * collection of queries where we ensure that we get the locks that are expected    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|checkExpectedLocks
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"acidPart"
block|,
literal|"nonAcidPart"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
literal|null
decl_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table acidPart(a int, b int) partitioned by (p string) clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table nonAcidPart(a int, b int) partitioned by (p string) stored as orc"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert into nonAcidPart partition(p) values(1,2,3)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|LockState
name|lockState
init|=
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Practical"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"nonAcidPart"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|relLocks
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveLock
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|relLocks
operator|.
name|add
argument_list|(
operator|new
name|DbLockManager
operator|.
name|DbHiveLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|relLocks
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert into nonAcidPart partition(p=1) values(5,6)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|lockState
operator|=
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Practical"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"nonAcidPart"
argument_list|,
literal|"p=1"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|relLocks
operator|=
operator|new
name|ArrayList
argument_list|<
name|HiveLock
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|relLocks
operator|.
name|add
argument_list|(
operator|new
name|DbLockManager
operator|.
name|DbHiveLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|relLocks
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert into acidPart partition(p) values(1,2,3)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|lockState
operator|=
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Practical"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"acidPart"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|relLocks
operator|=
operator|new
name|ArrayList
argument_list|<
name|HiveLock
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|relLocks
operator|.
name|add
argument_list|(
operator|new
name|DbLockManager
operator|.
name|DbHiveLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|relLocks
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert into acidPart partition(p=1) values(5,6)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|lockState
operator|=
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Practical"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"acidPart"
argument_list|,
literal|"p=1"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|relLocks
operator|=
operator|new
name|ArrayList
argument_list|<
name|HiveLock
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|relLocks
operator|.
name|add
argument_list|(
operator|new
name|DbLockManager
operator|.
name|DbHiveLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|relLocks
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update acidPart set b = 17 where a = 1"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|lockState
operator|=
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Practical"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"acidPart"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|relLocks
operator|=
operator|new
name|ArrayList
argument_list|<
name|HiveLock
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|relLocks
operator|.
name|add
argument_list|(
operator|new
name|DbLockManager
operator|.
name|DbHiveLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|relLocks
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update acidPart set b = 17 where p = 1"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|lockState
operator|=
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Practical"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"acidPart"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//https://issues.apache.org/jira/browse/HIVE-13212
name|relLocks
operator|=
operator|new
name|ArrayList
argument_list|<
name|HiveLock
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|relLocks
operator|.
name|add
argument_list|(
operator|new
name|DbLockManager
operator|.
name|DbHiveLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|relLocks
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check to make sure we acquire proper locks for queries involving acid and non-acid tables    */
annotation|@
name|Test
specifier|public
name|void
name|checkExpectedLocks2
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"tab_acid"
block|,
literal|"tab_not_acid"
block|}
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists tab_acid (a int, b int) partitioned by (p string) "
operator|+
literal|"clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists tab_not_acid (na int, nb int) partitioned by (np string) "
operator|+
literal|"clustered by (na) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='false')"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into tab_acid partition(p) (a,b,p) values(1,2,'foo'),(3,4,'bar')"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into tab_not_acid partition(np) (na,nb,np) values(1,2,'blah'),(3,4,'doh')"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T1"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select * from tab_acid inner join tab_not_acid on a = na"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|6
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_acid"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_acid"
argument_list|,
literal|"p=bar"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_acid"
argument_list|,
literal|"p=foo"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_not_acid"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_not_acid"
argument_list|,
literal|"np=blah"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_not_acid"
argument_list|,
literal|"np=doh"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|HiveTxnManager
name|txnMgr2
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T2"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert into tab_not_acid partition(np='doh') values(5,6)"
argument_list|)
argument_list|)
expr_stmt|;
name|LockState
name|ls
init|=
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr2
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T2"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|7
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_acid"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_acid"
argument_list|,
literal|"p=bar"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_acid"
argument_list|,
literal|"p=foo"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_not_acid"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_not_acid"
argument_list|,
literal|"np=blah"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_not_acid"
argument_list|,
literal|"np=doh"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"tab_not_acid"
argument_list|,
literal|"np=doh"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|// Test strict locking mode, i.e. backward compatible locking mode for non-ACID resources.
comment|// With non-strict mode, INSERT got SHARED_READ lock, instead of EXCLUSIVE with ACID semantics
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_STRICT_LOCKING_MODE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HiveTxnManager
name|txnMgr3
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnMgr3
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T3"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert into tab_not_acid partition(np='blah') values(7,8)"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr3
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T3"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|8
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_acid"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_acid"
argument_list|,
literal|"p=bar"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_acid"
argument_list|,
literal|"p=foo"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_not_acid"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_not_acid"
argument_list|,
literal|"np=blah"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_not_acid"
argument_list|,
literal|"np=doh"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"tab_not_acid"
argument_list|,
literal|"np=doh"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"tab_not_acid"
argument_list|,
literal|"np=blah"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_STRICT_LOCKING_MODE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** The list is small, and the object is generated, so we don't use sets/equals/etc. */
specifier|public
specifier|static
name|ShowLocksResponseElement
name|checkLock
parameter_list|(
name|LockType
name|expectedType
parameter_list|,
name|LockState
name|expectedState
parameter_list|,
name|String
name|expectedDb
parameter_list|,
name|String
name|expectedTable
parameter_list|,
name|String
name|expectedPartition
parameter_list|,
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|actuals
parameter_list|)
block|{
for|for
control|(
name|ShowLocksResponseElement
name|actual
range|:
name|actuals
control|)
block|{
if|if
condition|(
name|expectedType
operator|==
name|actual
operator|.
name|getType
argument_list|()
operator|&&
name|expectedState
operator|==
name|actual
operator|.
name|getState
argument_list|()
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|normalizeCase
argument_list|(
name|expectedDb
argument_list|)
argument_list|,
name|normalizeCase
argument_list|(
name|actual
operator|.
name|getDbname
argument_list|()
argument_list|)
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|normalizeCase
argument_list|(
name|expectedTable
argument_list|)
argument_list|,
name|normalizeCase
argument_list|(
name|actual
operator|.
name|getTablename
argument_list|()
argument_list|)
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|normalizeCase
argument_list|(
name|expectedPartition
argument_list|)
argument_list|,
name|normalizeCase
argument_list|(
name|actual
operator|.
name|getPartname
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|actual
return|;
block|}
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"Could't find {"
operator|+
name|expectedType
operator|+
literal|", "
operator|+
name|expectedState
operator|+
literal|", "
operator|+
name|expectedDb
operator|+
literal|", "
operator|+
name|expectedTable
operator|+
literal|", "
operator|+
name|expectedPartition
operator|+
literal|"} in "
operator|+
name|actuals
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"How did it get here?!"
argument_list|)
throw|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShowLocksFilterOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists db1.t14"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists db2.t14"
argument_list|)
expr_stmt|;
comment|// Note that db1 and db2 have a table with common name
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists db2.t15"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists db2.t16"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop database if exists db1"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop database if exists db2"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create database if not exists db1"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create database if not exists db2"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists db1.t14 (a int, b int) partitioned by (ds string) clustered by (b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists db2.t14 (a int, b int) clustered by (b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists db2.t15 (a int, b int) clustered by (b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists db2.t16 (a int, b int) clustered by (b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
comment|// Acquire different locks at different levels
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert into table db1.t14 partition (ds='today') values (1, 2)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Tom"
argument_list|)
expr_stmt|;
name|HiveTxnManager
name|txnMgr2
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert into table db1.t14 partition (ds='tomorrow') values (3, 4)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Jerry"
argument_list|)
expr_stmt|;
name|HiveTxnManager
name|txnMgr3
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select * from db2.t15"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr3
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Donald"
argument_list|)
expr_stmt|;
name|HiveTxnManager
name|txnMgr4
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select * from db2.t16"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr4
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Hillary"
argument_list|)
expr_stmt|;
name|HiveTxnManager
name|txnMgr5
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select * from db2.t14"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr5
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Obama"
argument_list|)
expr_stmt|;
comment|// Simulate SHOW LOCKS with different filter options
comment|// SHOW LOCKS (no filter)
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|5
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"db1"
argument_list|,
literal|"t14"
argument_list|,
literal|"ds=today"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"db1"
argument_list|,
literal|"t14"
argument_list|,
literal|"ds=tomorrow"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"db2"
argument_list|,
literal|"t15"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"db2"
argument_list|,
literal|"t16"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"db2"
argument_list|,
literal|"t14"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|// SHOW LOCKS db2
name|locks
operator|=
name|getLocksWithFilterOptions
argument_list|(
name|txnMgr3
argument_list|,
literal|"db2"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|3
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"db2"
argument_list|,
literal|"t15"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"db2"
argument_list|,
literal|"t16"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"db2"
argument_list|,
literal|"t14"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|// SHOW LOCKS t14
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"use db1"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocksWithFilterOptions
argument_list|(
name|txnMgr
argument_list|,
literal|null
argument_list|,
literal|"t14"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"db1"
argument_list|,
literal|"t14"
argument_list|,
literal|"ds=today"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"db1"
argument_list|,
literal|"t14"
argument_list|,
literal|"ds=tomorrow"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|// Note that it shouldn't show t14 from db2
comment|// SHOW LOCKS t14 PARTITION ds='today'
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partSpec
operator|.
name|put
argument_list|(
literal|"ds"
argument_list|,
literal|"today"
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocksWithFilterOptions
argument_list|(
name|txnMgr
argument_list|,
literal|null
argument_list|,
literal|"t14"
argument_list|,
name|partSpec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"db1"
argument_list|,
literal|"t14"
argument_list|,
literal|"ds=today"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|// SHOW LOCKS t15
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"use db2"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocksWithFilterOptions
argument_list|(
name|txnMgr3
argument_list|,
literal|null
argument_list|,
literal|"t15"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"db2"
argument_list|,
literal|"t15"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkCmdOnDriver
parameter_list|(
name|CommandProcessorResponse
name|cpr
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cpr
operator|.
name|toString
argument_list|()
argument_list|,
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|normalizeCase
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|==
literal|null
condition|?
literal|null
else|:
name|s
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|getLocks
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|getLocks
parameter_list|(
name|HiveTxnManager
name|txnMgr
parameter_list|)
throws|throws
name|Exception
block|{
name|ShowLocksResponse
name|rsp
init|=
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|getLocks
argument_list|()
decl_stmt|;
return|return
name|rsp
operator|.
name|getLocks
argument_list|()
return|;
block|}
comment|/**    * txns update same resource but do not overlap in time - no conflict    */
annotation|@
name|Test
specifier|public
name|void
name|testWriteSetTracking1
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TAB_PART"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists TAB_PART (a int, b int) "
operator|+
literal|"partitioned by (p string) clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select * from TAB_PART"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"Nicholas"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update TAB_PART set b = 7 where p = 'blah'"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Nicholas"
argument_list|)
expr_stmt|;
name|HiveTxnManager
name|txnMgr2
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"Alexandra"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update TAB_PART set b = 7 where p = 'blah'"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Nicholas"
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|dropTable
parameter_list|(
name|String
index|[]
name|tabs
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|tab
range|:
name|tabs
control|)
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists "
operator|+
name|tab
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * txns overlap in time but do not update same resource - no conflict    */
annotation|@
name|Test
specifier|public
name|void
name|testWriteSetTracking2
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TAB_PART"
block|,
literal|"TAB2"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists TAB_PART (a int, b int) "
operator|+
literal|"partitioned by (p string) clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists TAB2 (a int, b int) partitioned by (p string) "
operator|+
literal|"clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|HiveTxnManager
name|txnMgr2
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"Peter"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update TAB_PART set b = 7 where p = 'blah'"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Peter"
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"Catherine"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//note that "update" uses dynamic partitioning thus lock is on the table not partition
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_PART"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update TAB2 set b = 9 where p = 'doh'"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Catherine"
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
block|}
comment|/**    * txns overlap and update the same resource - can't commit 2nd txn    */
annotation|@
name|Test
specifier|public
name|void
name|testWriteSetTracking3
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TAB_PART"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists TAB_PART (a int, b int) "
operator|+
literal|"partitioned by (p string) clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into TAB_PART partition(p='blah') values(1,2)"
argument_list|)
argument_list|)
expr_stmt|;
name|HiveTxnManager
name|txnMgr2
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|txnId
init|=
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"Known"
argument_list|)
decl_stmt|;
name|long
name|txnId2
init|=
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"Unknown"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update TAB_PART set b = 7 where p = 'blah'"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Known"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_PART"
argument_list|,
literal|"p=blah"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update TAB_PART set b = 7 where p = 'blah'"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr2
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Unknown"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr2
argument_list|)
expr_stmt|;
comment|//should not matter which txnMgr is used here
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_PART"
argument_list|,
literal|"p=blah"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_PART"
argument_list|,
literal|"p=blah"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|AddDynamicPartitions
name|adp
init|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnId
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_PART"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"p=blah"
argument_list|)
argument_list|)
decl_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|adp
operator|.
name|setTxnid
argument_list|(
name|txnId2
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|LockException
name|expectedException
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//with HIVE-15032 this should use static parts and thus not need addDynamicPartitions
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|expectedException
operator|=
name|e
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Didn't get exception"
argument_list|,
name|expectedException
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Got wrong message code"
argument_list|,
name|ErrorMsg
operator|.
name|TXN_ABORTED
argument_list|,
name|expectedException
operator|.
name|getCanonicalErrorMsg
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Exception msg didn't match"
argument_list|,
literal|"Aborting [txnid:3,3] due to a write conflict on default/TAB_PART/p=blah committed by [txnid:2,3] u/u"
argument_list|,
name|expectedException
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * txns overlap, update same resource, simulate multi-stmt txn case    * Also tests that we kill txn when it tries to acquire lock if we already know it will not be committed    */
annotation|@
name|Test
specifier|public
name|void
name|testWriteSetTracking4
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TAB_PART"
block|,
literal|"TAB2"
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET"
argument_list|)
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists TAB_PART (a int, b int) "
operator|+
literal|"partitioned by (p string) clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists TAB2 (a int, b int) partitioned by (p string) "
operator|+
literal|"clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"Long Running"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select a from  TAB_PART where p = 'blah'"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Long Running"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//for some reason this just locks the table; if I alter table to add this partition, then
comment|//we end up locking both table and partition with share_read.  (Plan has 2 ReadEntities)...?
comment|//same for other locks below
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_PART"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|HiveTxnManager
name|txnMgr2
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"Short Running"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update TAB2 set b = 7 where p = 'blah'"
argument_list|)
argument_list|)
expr_stmt|;
comment|//no such partition
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Short Running"
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_PART"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB2"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//update stmt has p=blah, thus nothing is actually update and we generate empty dyn part list
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET"
argument_list|)
argument_list|)
expr_stmt|;
name|AddDynamicPartitions
name|adp
init|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnMgr2
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|,
literal|"default"
argument_list|,
literal|"tab2"
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
decl_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//Short Running updated nothing, so we expect 0 rows in WRITE_SET
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T3"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update TAB2 set b = 7 where p = 'two'"
argument_list|)
argument_list|)
expr_stmt|;
comment|//pretend this partition exists
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T3"
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_PART"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB2"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//since TAB2 is empty
comment|//update stmt has p=blah, thus nothing is actually update and we generate empty dyn part list
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET"
argument_list|)
argument_list|)
expr_stmt|;
name|adp
operator|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnMgr2
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|,
literal|"default"
argument_list|,
literal|"tab2"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"p=two"
argument_list|)
argument_list|)
expr_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
comment|//simulate partition update
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET"
argument_list|)
argument_list|)
expr_stmt|;
name|AcidWriteSetService
name|houseKeeper
init|=
operator|new
name|AcidWriteSetService
argument_list|()
decl_stmt|;
name|TestTxnCommands2
operator|.
name|runHouseKeeperService
argument_list|(
name|houseKeeper
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//since T3 overlaps with Long Running (still open) GC does nothing
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update TAB2 set b = 17 where a = 1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//no rows match
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Long Running"
argument_list|)
expr_stmt|;
comment|//so generate empty Dyn Part call
name|adp
operator|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnMgr
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|,
literal|"default"
argument_list|,
literal|"tab2"
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|0
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TestTxnCommands2
operator|.
name|runHouseKeeperService
argument_list|(
name|houseKeeper
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * overlapping txns updating the same resource but 1st one rolls back; 2nd commits    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testWriteSetTracking5
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TAB_PART"
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET"
argument_list|)
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists TAB_PART (a int, b int) "
operator|+
literal|"partitioned by (p string) clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into TAB_PART partition(p='blah') values(1,2)"
argument_list|)
argument_list|)
expr_stmt|;
name|HiveTxnManager
name|txnMgr2
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"Known"
argument_list|)
expr_stmt|;
name|long
name|txnId
init|=
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"Unknown"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update TAB_PART set b = 7 where p = 'blah'"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Known"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_PART"
argument_list|,
literal|"p=blah"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update TAB_PART set b = 7 where p = 'blah'"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr2
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Unknown"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr2
argument_list|)
expr_stmt|;
comment|//should not matter which txnMgr is used here
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_PART"
argument_list|,
literal|"p=blah"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_PART"
argument_list|,
literal|"p=blah"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|rollbackTxn
argument_list|()
expr_stmt|;
name|AddDynamicPartitions
name|adp
init|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnId
argument_list|,
literal|"default"
argument_list|,
literal|"TAB_PART"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p=blah"
argument_list|)
argument_list|)
decl_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//since conflicting txn rolled back, commit succeeds
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * check that read query concurrent with txn works ok    */
annotation|@
name|Test
specifier|public
name|void
name|testWriteSetTracking6
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TAB2"
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET"
argument_list|)
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists TAB2(a int, b int) clustered "
operator|+
literal|"by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select * from TAB2 where a = 113"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Works"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB2"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|HiveTxnManager
name|txnMgr2
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"Horton"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update TAB2 set b = 17 where a = 101"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Horton"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET"
argument_list|)
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB2"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB2"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//no conflict
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET"
argument_list|)
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB2"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|TestTxnCommands2
operator|.
name|runHouseKeeperService
argument_list|(
operator|new
name|AcidWriteSetService
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * 2 concurrent txns update different partitions of the same table and succeed    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testWriteSetTracking7
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"tab2"
block|,
literal|"TAB2"
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET"
argument_list|)
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists tab2 (a int, b int) "
operator|+
literal|"partitioned by (p string) clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into tab2 partition(p)(a,b,p) values(1,1,'one'),(2,2,'two')"
argument_list|)
argument_list|)
expr_stmt|;
comment|//txnid:1
name|HiveTxnManager
name|txnMgr2
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|//test with predicates such that partition pruning works
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T2"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update tab2 set b = 7 where p='two'"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB2"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//now start concurrent txn
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T3"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update tab2 set b = 7 where p='one'"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T3"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB2"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB2"
argument_list|,
literal|"p=one"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//this simulates the completion of txnid:2
name|AddDynamicPartitions
name|adp
init|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnMgr2
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|,
literal|"default"
argument_list|,
literal|"tab2"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"p=two"
argument_list|)
argument_list|)
decl_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//txnid:2
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB2"
argument_list|,
literal|"p=one"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//completion of txnid:3
name|adp
operator|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnMgr
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|,
literal|"default"
argument_list|,
literal|"tab2"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"p=one"
argument_list|)
argument_list|)
expr_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//txnid:3
comment|//now both txns concurrently updated TAB2 but different partitions.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_partition='p=one' and ws_operation_type='u'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_partition='p=two' and ws_operation_type='u'"
argument_list|)
argument_list|)
expr_stmt|;
comment|//2 from txnid:1, 1 from txnid:2, 1 from txnid:3
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"COMPLETED_TXN_COMPONENTS mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|4
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where ctc_table='tab2' and ctc_partition is not null"
argument_list|)
argument_list|)
expr_stmt|;
comment|//================
comment|//test with predicates such that partition pruning doesn't kick in
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists tab1 (a int, b int) partitioned by (p string) "
operator|+
literal|"clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into tab1 partition(p)(a,b,p) values(1,1,'one'),(2,2,'two')"
argument_list|)
argument_list|)
expr_stmt|;
comment|//txnid:4
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T5"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update tab1 set b = 7 where b=1"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T5"
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=one"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//now start concurrent txn
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T6"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update tab1 set b = 7 where b = 2"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T6"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|4
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=one"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=one"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//this simulates the completion of txnid:5
name|adp
operator|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnMgr2
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|,
literal|"default"
argument_list|,
literal|"tab1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"p=one"
argument_list|)
argument_list|)
expr_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//txnid:5
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|checkLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
comment|//retest WAITING locks (both have same ext id)
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=one"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//completion of txnid:6
name|adp
operator|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnMgr
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|,
literal|"default"
argument_list|,
literal|"tab1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"p=two"
argument_list|)
argument_list|)
expr_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//txnid:6
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_partition='p=one' and ws_operation_type='u' and ws_table='tab1'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_partition='p=two' and ws_operation_type='u' and ws_table='tab1'"
argument_list|)
argument_list|)
expr_stmt|;
comment|//2 from insert + 1 for each update stmt
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"COMPLETED_TXN_COMPONENTS mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|4
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where ctc_table='tab1' and ctc_partition is not null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Concurrent updates with partition pruning predicate and w/o one    */
annotation|@
name|Test
specifier|public
name|void
name|testWriteSetTracking8
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"tab1"
block|,
literal|"TAB1"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists tab1 (a int, b int) partitioned by (p string) "
operator|+
literal|"clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into tab1 partition(p)(a,b,p) values(1,1,'one'),(2,2,'two')"
argument_list|)
argument_list|)
expr_stmt|;
comment|//txnid:1
name|HiveTxnManager
name|txnMgr2
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T2"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update tab1 set b = 7 where b=1"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=one"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//now start concurrent txn
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T3"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update tab1 set b = 7 where p='two'"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T3"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|3
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=one"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//this simulates the completion of txnid:2
name|AddDynamicPartitions
name|adp
init|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnMgr2
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|,
literal|"default"
argument_list|,
literal|"tab1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"p=one"
argument_list|)
argument_list|)
decl_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//txnid:2
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|checkLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
comment|//retest WAITING locks (both have same ext id)
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//completion of txnid:3
name|adp
operator|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnMgr
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|,
literal|"default"
argument_list|,
literal|"tab1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"p=two"
argument_list|)
argument_list|)
expr_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//txnid:3
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_partition='p=one' and ws_operation_type='u' and ws_table='tab1'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_partition='p=two' and ws_operation_type='u' and ws_table='tab1'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"COMPLETED_TXN_COMPONENTS mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|4
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where ctc_table='tab1' and ctc_partition is not null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Concurrent update/delete of different partitions - should pass    */
annotation|@
name|Test
specifier|public
name|void
name|testWriteSetTracking9
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TAB1"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists tab1 (a int, b int) partitioned by (p string) "
operator|+
literal|"clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into tab1 partition(p)(a,b,p) values(1,1,'one'),(2,2,'two')"
argument_list|)
argument_list|)
expr_stmt|;
comment|//txnid:1
name|HiveTxnManager
name|txnMgr2
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T2"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update tab1 set b = 7 where b=1"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=one"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//now start concurrent txn
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T3"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"delete from tab1 where p='two' and b=2"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T3"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|3
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=one"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//this simulates the completion of txnid:2
name|AddDynamicPartitions
name|adp
init|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnMgr2
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|,
literal|"default"
argument_list|,
literal|"tab1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"p=one"
argument_list|)
argument_list|)
decl_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//txnid:2
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|checkLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
comment|//retest WAITING locks (both have same ext id)
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//completion of txnid:3
name|adp
operator|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnMgr
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|,
literal|"default"
argument_list|,
literal|"tab1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"p=two"
argument_list|)
argument_list|)
expr_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//txnid:3
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where ctc_txnid=1  and ctc_table='tab1'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where ctc_txnid=2  and ctc_table='tab1' and ctc_partition='p=one'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where ctc_txnid=3  and ctc_table='tab1' and ctc_partition='p=two'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_partition='p=one' and ws_operation_type='u' and ws_table='tab1'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_partition='p=two' and ws_operation_type='d' and ws_table='tab1'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"COMPLETED_TXN_COMPONENTS mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|4
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where ctc_table='tab1' and ctc_partition is not null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Concurrent update/delete of same partition - should fail to commit    */
annotation|@
name|Test
specifier|public
name|void
name|testWriteSetTracking10
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TAB1"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists tab1 (a int, b int) partitioned by (p string) "
operator|+
literal|"clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into tab1 partition(p)(a,b,p) values(1,1,'one'),(2,2,'two')"
argument_list|)
argument_list|)
expr_stmt|;
comment|//txnid:1
name|HiveTxnManager
name|txnMgr2
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T2"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update tab1 set b = 7 where b=2"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=one"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//now start concurrent txn
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T3"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"delete from tab1 where p='two' and b=2"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T3"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|3
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=one"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//this simulates the completion of txnid:2
name|AddDynamicPartitions
name|adp
init|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnMgr2
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|,
literal|"default"
argument_list|,
literal|"tab1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"p=two"
argument_list|)
argument_list|)
decl_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//txnid:2
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|checkLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
comment|//retest WAITING locks (both have same ext id)
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//completion of txnid:3
name|adp
operator|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnMgr
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|,
literal|"default"
argument_list|,
literal|"tab1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"p=two"
argument_list|)
argument_list|)
expr_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|LockException
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//txnid:3
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"Expected exception"
argument_list|,
literal|null
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Exception msg doesn't match"
argument_list|,
literal|"Aborting [txnid:3,3] due to a write conflict on default/tab1/p=two committed by [txnid:2,3] d/u"
argument_list|,
name|exception
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_partition='p=two' and ws_operation_type='u' and ws_table='tab1'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"COMPLETED_TXN_COMPONENTS mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|3
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where ctc_table='tab1' and ctc_partition is not null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Concurrent delte/detele of same partition - should pass    */
annotation|@
name|Test
specifier|public
name|void
name|testWriteSetTracking11
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TAB1"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists tab1 (a int, b int) partitioned by (p string) "
operator|+
literal|"clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into tab1 partition(p)(a,b,p) values(1,1,'one'),(2,2,'two')"
argument_list|)
argument_list|)
expr_stmt|;
comment|//txnid:1
name|HiveTxnManager
name|txnMgr2
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T2"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"delete from tab1 where b=2"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=one"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//now start concurrent txn
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T3"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select * from tab1 where b=1 and p='one'"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T3"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"delete from tab1 where p='two' and b=2"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T3"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|5
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=one"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=one"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//this simulates the completion of txnid:2
name|AddDynamicPartitions
name|adp
init|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnMgr2
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|,
literal|"default"
argument_list|,
literal|"tab1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"p=two"
argument_list|)
argument_list|)
decl_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//txnid:2
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|checkLock
argument_list|(
name|locks
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
comment|//retest WAITING locks (both have same ext id)
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|3
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=one"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"TAB1"
argument_list|,
literal|"p=two"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//completion of txnid:3
name|adp
operator|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnMgr
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|,
literal|"default"
argument_list|,
literal|"tab1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"p=two"
argument_list|)
argument_list|)
expr_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//txnid:3
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_partition='p=two' and ws_operation_type='d' and ws_table='tab1' and ws_txnid=2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_partition='p=two' and ws_operation_type='d' and ws_table='tab1' and ws_txnid=3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_partition='p=two' and ws_operation_type='d' and ws_table='tab1' and ws_txnid=2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_partition='p=two' and ws_operation_type='d' and ws_table='tab1' and ws_txnid=3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"COMPLETED_TXN_COMPONENTS mismatch: "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|4
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where ctc_table='tab1' and ctc_partition is not null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompletedTxnComponents
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TAB1"
block|,
literal|"tab_not_acid2"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists tab1 (a int, b int) partitioned by (p string) "
operator|+
literal|"clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists tab_not_acid2 (a int, b int)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into tab_not_acid2 values(1,1),(2,2)"
argument_list|)
argument_list|)
expr_stmt|;
comment|//writing both acid and non-acid resources in the same txn
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"from tab_not_acid2 insert into tab1 partition(p='two')(a,b) select a,b insert into tab_not_acid2(a,b) select a,b "
argument_list|)
argument_list|)
expr_stmt|;
comment|//txnid:1
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|)
expr_stmt|;
comment|//only expect transactional components to be in COMPLETED_TXN_COMPONENTS
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where ctc_txnid=1 and ctc_table='tab1'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * ToDo: multi-insert into txn table and non-tx table should be prevented    */
annotation|@
name|Test
specifier|public
name|void
name|testMultiInsert
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TAB1"
block|,
literal|"tab_not_acid"
block|}
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists tab1"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists tab_not_acid"
argument_list|)
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists tab1 (a int, b int) partitioned by (p string) "
operator|+
literal|"clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists tab_not_acid (a int, b int, p string)"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into tab_not_acid values(1,1,'one'),(2,2,'two')"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into tab1 partition(p) values(3,3,'one'),(4,4,'two')"
argument_list|)
argument_list|)
expr_stmt|;
comment|//txinid:1
comment|//writing both acid and non-acid resources in the same txn
comment|//tab1 write is a dynamic partition insert
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"from tab_not_acid insert into tab1 partition(p)(a,b,p) select a,b,p insert into tab_not_acid(a,b) select a,b where p='two'"
argument_list|)
argument_list|)
expr_stmt|;
comment|//txnid:2
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|4
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|)
expr_stmt|;
comment|//only expect transactional components to be in COMPLETED_TXN_COMPONENTS
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where ctc_txnid=2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where ctc_txnid=2 and ctc_table='tab1'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//todo: Concurrent insert/update of same partition - should pass
specifier|private
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|getLocksWithFilterOptions
parameter_list|(
name|HiveTxnManager
name|txnMgr
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|dbName
operator|==
literal|null
operator|&&
name|tblName
operator|!=
literal|null
condition|)
block|{
name|dbName
operator|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
expr_stmt|;
block|}
name|ShowLocksRequest
name|rqst
init|=
operator|new
name|ShowLocksRequest
argument_list|()
decl_stmt|;
name|rqst
operator|.
name|setDbname
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setTablename
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
name|partSpec
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keyList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|valList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partKey
range|:
name|partSpec
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|partVal
init|=
name|partSpec
operator|.
name|remove
argument_list|(
name|partKey
argument_list|)
decl_stmt|;
name|keyList
operator|.
name|add
argument_list|(
name|partKey
argument_list|)
expr_stmt|;
name|valList
operator|.
name|add
argument_list|(
name|partVal
argument_list|)
expr_stmt|;
block|}
name|String
name|partName
init|=
name|FileUtils
operator|.
name|makePartName
argument_list|(
name|keyList
argument_list|,
name|valList
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setPartname
argument_list|(
name|partName
argument_list|)
expr_stmt|;
block|}
name|ShowLocksResponse
name|rsp
init|=
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|getLocks
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
return|return
name|rsp
operator|.
name|getLocks
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShowLocksAgentInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists XYZ (a int, b int)"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"select a from XYZ where b = 8"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"XYZ"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"XYZ"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong AgentInfo"
argument_list|,
name|driver
operator|.
name|getPlan
argument_list|()
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|locks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAgentInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMerge3Way01
parameter_list|()
throws|throws
name|Exception
block|{
name|testMerge3Way
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMerge3Way02
parameter_list|()
throws|throws
name|Exception
block|{
name|testMerge3Way
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param cc whether to cause a WW conflict or not    * @throws Exception    */
specifier|private
name|void
name|testMerge3Way
parameter_list|(
name|boolean
name|cc
parameter_list|)
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"target"
block|,
literal|"source"
block|,
literal|"source2"
block|}
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"create table target (a int, b int) "
operator|+
literal|"partitioned by (p int, q int) clustered by (a) into 2  buckets "
operator|+
literal|"stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
argument_list|)
expr_stmt|;
comment|//in practice we don't really care about the data in any of these tables (except as far as
comment|//it creates partitions, the SQL being test is not actually executed and results of the
comment|//wrt ACID metadata is supplied manually via addDynamicPartitions().  But having data makes
comment|//it easier to follow the intent
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into target partition(p,q) values (1,2,1,2), (3,4,1,2), (5,6,1,3), (7,8,2,2)"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"create table source (a int, b int, p int, q int)"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into source values "
operator|+
comment|// I-(1/2)            D-(1/2)    I-(1/3)     U-(1/3)     D-(2/2)     I-(1/1) - new part
literal|"(9,10,1,2),        (3,4,1,2), (11,12,1,3), (5,13,1,3), (7,8,2,2), (14,15,1,1)"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"create table source2 (a int, b int, p int, q int)"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into source2 values "
operator|+
comment|//cc ? -:U-(1/2)     D-(1/2)         cc ? U-(1/3):-             D-(2/2)       I-(1/1) - new part 2
literal|"(9,100,1,2),      (3,4,1,2),               (5,13,1,3),       (7,8,2,2), (14,15,2,1)"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|txnId1
init|=
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T1"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"merge into target t using source s on t.a=s.b "
operator|+
literal|"when matched and t.a=5 then update set b=s.b "
operator|+
comment|//updates p=1/q=3
literal|"when matched and t.a in (3,7) then delete "
operator|+
comment|//deletes from p=1/q=2, p=2/q=2
literal|"when not matched and t.a>= 8 then insert values(s.a, s.b, s.p, s.q)"
argument_list|)
argument_list|)
expr_stmt|;
comment|//insert p=1/q=2, p=1/q=3 and new part 1/1
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|5
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"source"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=1/q=2"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=1/q=3"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=2/q=2"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
comment|//start concurrent txn
name|DbTxnManager
name|txnMgr2
init|=
operator|(
name|DbTxnManager
operator|)
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|txnId2
init|=
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T2"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"merge into target t using source2 s on t.a=s.b "
operator|+
literal|"when matched and t.a="
operator|+
operator|(
name|cc
condition|?
literal|5
else|:
literal|9
operator|)
operator|+
literal|" then update set b=s.b "
operator|+
comment|//if conflict updates p=1/q=3 else update p=1/q=2
literal|"when matched and t.a in (3,7) then delete "
operator|+
comment|//deletes from p=1/q=2, p=2/q=2
literal|"when not matched and t.a>= 8 then insert values(s.a, s.b, s.p, s.q)"
argument_list|)
argument_list|)
expr_stmt|;
comment|//insert p=1/q=2, p=1/q=3 and new part 1/1
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|10
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"source"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=1/q=2"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=1/q=3"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=2/q=2"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|long
name|extLockId
init|=
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
operator|.
name|getLockid
argument_list|()
decl_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"source2"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=1/q=2"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=1/q=3"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=2/q=2"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId1
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnId1
argument_list|)
argument_list|)
expr_stmt|;
comment|//complete 1st txn
name|AddDynamicPartitions
name|adp
init|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnId1
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"p=1/q=3"
argument_list|)
argument_list|)
decl_stmt|;
comment|//update clause
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|adp
operator|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnId1
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p=1/q=2"
argument_list|,
literal|"p=2/q=2"
argument_list|)
argument_list|)
expr_stmt|;
comment|//delete clause
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|adp
operator|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnId1
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p=1/q=2"
argument_list|,
literal|"p=1/q=3"
argument_list|,
literal|"p=1/q=1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//insert clause
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|INSERT
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId1
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnId1
operator|+
literal|" and tc_operation_type='u'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId1
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnId1
operator|+
literal|" and tc_operation_type='d'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId1
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|3
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnId1
operator|+
literal|" and tc_operation_type='i'"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//commit T1
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"COMPLETED_TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId1
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|6
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where ctc_txnid="
operator|+
name|txnId1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId1
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_txnid="
operator|+
name|txnId1
operator|+
literal|" and ws_operation_type='u'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId1
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_txnid="
operator|+
name|txnId1
operator|+
literal|" and ws_operation_type='d'"
argument_list|)
argument_list|)
expr_stmt|;
comment|//re-check locks which were in Waiting state - should now be Acquired
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr2
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|checkLock
argument_list|(
name|extLockId
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|5
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"source2"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=1/q=2"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=1/q=3"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=2/q=2"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnId2
argument_list|)
argument_list|)
expr_stmt|;
comment|//complete 2nd txn
name|adp
operator|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnId2
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|cc
condition|?
literal|"p=1/q=3"
else|:
literal|"p=1/p=2"
argument_list|)
argument_list|)
expr_stmt|;
comment|//update clause
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|adp
operator|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnId2
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p=1/q=2"
argument_list|,
literal|"p=2/q=2"
argument_list|)
argument_list|)
expr_stmt|;
comment|//delete clause
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|adp
operator|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnId2
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p=1/q=2"
argument_list|,
literal|"p=1/q=3"
argument_list|,
literal|"p=1/q=1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//insert clause
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|INSERT
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnId2
operator|+
literal|" and tc_operation_type='u'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnId2
operator|+
literal|" and tc_operation_type='d'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|3
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnId2
operator|+
literal|" and tc_operation_type='i'"
argument_list|)
argument_list|)
expr_stmt|;
name|LockException
name|expectedException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//commit T2
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|expectedException
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|cc
condition|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"didn't get exception"
argument_list|,
name|expectedException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Transaction manager has aborted the transaction txnid:3.  Reason: "
operator|+
literal|"Aborting [txnid:3,3] due to a write conflict on default/target/p=1/q=3 "
operator|+
literal|"committed by [txnid:2,3] u/u"
argument_list|,
name|expectedException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"COMPLETED_TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where ctc_txnid="
operator|+
name|txnId2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_txnid="
operator|+
name|txnId2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Unexpected exception "
operator|+
name|expectedException
argument_list|,
name|expectedException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"COMPLETED_TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|6
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where ctc_txnid="
operator|+
name|txnId2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_txnid="
operator|+
name|txnId2
operator|+
literal|" and ws_operation_type='u'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_txnid="
operator|+
name|txnId2
operator|+
literal|" and ws_operation_type='d'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeUnpartitioned01
parameter_list|()
throws|throws
name|Exception
block|{
name|testMergeUnpartitioned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeUnpartitioned02
parameter_list|()
throws|throws
name|Exception
block|{
name|testMergeUnpartitioned
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * run a merge statement using un-partitioned target table and a concurrent op on the target    * Check that proper locks are acquired and Write conflict detection works and the state    * of internal table.    * @param causeConflict true to make 2 operations such that they update the same entity    * @throws Exception    */
specifier|private
name|void
name|testMergeUnpartitioned
parameter_list|(
name|boolean
name|causeConflict
parameter_list|)
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"target"
block|,
literal|"source"
block|}
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"create table target (a int, b int) "
operator|+
literal|"clustered by (a) into 2  buckets "
operator|+
literal|"stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into target values (1,2), (3,4), (5,6), (7,8)"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"create table source (a int, b int)"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|txnid1
init|=
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T1"
argument_list|)
decl_stmt|;
if|if
condition|(
name|causeConflict
condition|)
block|{
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update target set b = 2 where a=1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert into target values(9,10),(11,12)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnid1
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|1
argument_list|,
comment|//no DP, so it's populated from lock info
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnid1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|causeConflict
condition|?
name|LockType
operator|.
name|SHARED_WRITE
else|:
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|DbTxnManager
name|txnMgr2
init|=
operator|(
name|DbTxnManager
operator|)
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|//start a 2nd (overlapping) txn
name|long
name|txnid2
init|=
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T2"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"merge into target t using source s "
operator|+
literal|"on t.a=s.a "
operator|+
literal|"when matched then delete "
operator|+
literal|"when not matched then insert values(s.a,s.b)"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T2"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|3
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|causeConflict
condition|?
name|LockState
operator|.
name|WAITING
else|:
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"source"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|long
name|extLockId
init|=
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|causeConflict
condition|?
name|LockState
operator|.
name|WAITING
else|:
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
operator|.
name|getLockid
argument_list|()
decl_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//commit T1
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnid1
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
name|causeConflict
condition|?
literal|1
else|:
literal|0
argument_list|,
comment|//Inserts are not tracked by WRITE_SET
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_txnid="
operator|+
name|txnid1
operator|+
literal|" and ws_operation_type="
operator|+
operator|(
name|causeConflict
condition|?
literal|"'u'"
else|:
literal|"'i'"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//re-check locks which were in Waiting state - should now be Acquired
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr2
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|checkLock
argument_list|(
name|extLockId
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"source"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnid2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|1
argument_list|,
comment|//
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnid2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnid2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|1
argument_list|,
comment|//
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnid2
operator|+
literal|"and tc_operation_type='d'"
argument_list|)
argument_list|)
expr_stmt|;
comment|//complete T2 txn
name|LockException
name|expectedException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|expectedException
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|causeConflict
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Didn't get exception"
argument_list|,
name|expectedException
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Got wrong message code"
argument_list|,
name|ErrorMsg
operator|.
name|TXN_ABORTED
argument_list|,
name|expectedException
operator|.
name|getCanonicalErrorMsg
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Exception msg didn't match"
argument_list|,
literal|"Aborting [txnid:3,3] due to a write conflict on default/target committed by [txnid:2,3] d/u"
argument_list|,
name|expectedException
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnid1
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
comment|//Unpartitioned table: 1 row for Delete; Inserts are not tracked in WRITE_SET
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_txnid="
operator|+
name|txnid2
operator|+
literal|" and ws_operation_type='d'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check that DP with partial spec properly updates TXN_COMPONENTS    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testDynamicPartitionInsert
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"target"
block|}
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"create table target (a int, b int) "
operator|+
literal|"partitioned by (p int, q int) clustered by (a) into 2  buckets "
operator|+
literal|"stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|txnid1
init|=
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T1"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert into target partition(p=1,q) values (1,2,2), (3,4,2), (5,6,3), (7,8,2)"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//table is empty, so can only lock the table
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"HIVE_LOCKS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnid1
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from HIVE_LOCKS"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from HIVE_LOCKS where hl_txnid="
operator|+
name|txnid1
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|rollbackTxn
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnid1
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnid1
argument_list|)
argument_list|)
expr_stmt|;
comment|//now actually write to table to generate some partitions
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into target partition(p=1,q) values (1,2,2), (3,4,2), (5,6,3), (7,8,2)"
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"select count(*) from target"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
literal|"4"
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
comment|//look in COMPLETED_TXN_COMPONENTS because driver.run() committed!!!!
literal|"COMPLETED_TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnid1
operator|+
literal|1
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from COMPLETED_TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|2
argument_list|,
comment|//2 distinct partitions created
comment|//txnid+1 because we want txn used by previous driver.run("insert....)
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from COMPLETED_TXN_COMPONENTS where ctc_txnid="
operator|+
operator|(
name|txnid1
operator|+
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|txnid2
init|=
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T1"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert into target partition(p=1,q) values (10,2,2), (30,4,2), (50,6,3), (70,8,2)"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T1"
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Plan is using DummyPartition, so can only lock the table... unfortunately
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|AddDynamicPartitions
name|adp
init|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnid2
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p=1/q=2"
argument_list|,
literal|"p=1/q=2"
argument_list|)
argument_list|)
decl_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|INSERT
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnid2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|2
argument_list|,
comment|//2 distinct partitions modified
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnid2
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergePartitioned01
parameter_list|()
throws|throws
name|Exception
block|{
name|testMergePartitioned
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergePartitioned02
parameter_list|()
throws|throws
name|Exception
block|{
name|testMergePartitioned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * "run" an Update and Merge concurrently; Check that correct locks are acquired.    * Check state of auxiliary ACID tables.    * @param causeConflict - true to make the operations cause a Write conflict    * @throws Exception    */
specifier|private
name|void
name|testMergePartitioned
parameter_list|(
name|boolean
name|causeConflict
parameter_list|)
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"target"
block|,
literal|"source"
block|}
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"create table target (a int, b int) "
operator|+
literal|"partitioned by (p int, q int) clustered by (a) into 2  buckets "
operator|+
literal|"stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"insert into target partition(p,q) values (1,2,1,2), (3,4,1,2), (5,6,1,3), (7,8,2,2)"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|run
argument_list|(
literal|"create table source (a1 int, b1 int, p1 int, q1 int)"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|txnId1
init|=
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T1"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"update target set b = 2 where p=1"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=1/q=2"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=1/q=3"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|DbTxnManager
name|txnMgr2
init|=
operator|(
name|DbTxnManager
operator|)
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|//start a 2nd (overlapping) txn
name|long
name|txnid2
init|=
name|txnMgr2
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"T2"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"merge into target using source "
operator|+
literal|"on target.p=source.p1 and target.a=source.a1 "
operator|+
literal|"when matched then update set b = 11 "
operator|+
literal|"when not matched then insert values(a1,b1,p1,q1)"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"T2"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|7
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|/**      * W locks from T1 are still there, so all locks from T2 block.      * The Update part of Merge requests W locks for each existing partition in target.      * The Insert part doesn't know which partitions may be written to: thus R lock on target table.      * */
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"source"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|long
name|extLockId
init|=
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
operator|.
name|getLockid
argument_list|()
decl_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=1/q=2"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=1/q=2"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=1/q=3"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=1/q=3"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|WAITING
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=2/q=2"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId1
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|0
argument_list|,
comment|//because it's using a DP write
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnId1
argument_list|)
argument_list|)
expr_stmt|;
comment|//complete T1 transaction (simulate writing to 2 partitions)
name|AddDynamicPartitions
name|adp
init|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnId1
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p=1/q=2"
argument_list|,
literal|"p=1/q=3"
argument_list|)
argument_list|)
decl_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId1
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnId1
operator|+
literal|" and tc_operation_type='u'"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
comment|//commit T1
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId1
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|2
argument_list|,
comment|//2 partitions updated
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_txnid="
operator|+
name|txnId1
operator|+
literal|" and ws_operation_type='u'"
argument_list|)
argument_list|)
expr_stmt|;
comment|//re-check locks which were in Waiting state - should now be Acquired
operator|(
operator|(
name|DbLockManager
operator|)
name|txnMgr2
operator|.
name|getLockManager
argument_list|()
operator|)
operator|.
name|checkLock
argument_list|(
name|extLockId
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|5
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"source"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=1/q=2"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=1/q=3"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
literal|"p=2/q=2"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnid2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|0
argument_list|,
comment|//because it's using a DP write
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnid2
argument_list|)
argument_list|)
expr_stmt|;
comment|//complete T2 txn
comment|//simulate Insert into 2 partitions
name|adp
operator|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnid2
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p=1/q=2"
argument_list|,
literal|"p=1/q=3"
argument_list|)
argument_list|)
expr_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|INSERT
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnid2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnid2
operator|+
literal|" and tc_operation_type='i'"
argument_list|)
argument_list|)
expr_stmt|;
comment|//simulate Update of 1 partitions; depending on causeConflict, choose one of the partitions
comment|//which was modified by the T1 update stmt or choose a non-conflicting one
name|adp
operator|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnid2
argument_list|,
literal|"default"
argument_list|,
literal|"target"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|causeConflict
condition|?
literal|"p=1/q=2"
else|:
literal|"p=1/q=1"
argument_list|)
argument_list|)
expr_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TXN_COMPONENTS mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnid2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from TXN_COMPONENTS"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from TXN_COMPONENTS where tc_txnid="
operator|+
name|txnid2
operator|+
literal|" and tc_operation_type='u'"
argument_list|)
argument_list|)
expr_stmt|;
name|LockException
name|expectedException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|txnMgr2
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|expectedException
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|causeConflict
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Didn't get exception"
argument_list|,
name|expectedException
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Got wrong message code"
argument_list|,
name|ErrorMsg
operator|.
name|TXN_ABORTED
argument_list|,
name|expectedException
operator|.
name|getCanonicalErrorMsg
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Exception msg didn't match"
argument_list|,
literal|"Aborting [txnid:3,3] due to a write conflict on default/target/p=1/q=2 committed by [txnid:2,3] u/u"
argument_list|,
name|expectedException
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnid2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
comment|//1 partitions updated
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_txnid="
operator|+
name|txnid2
operator|+
literal|" and ws_operation_type='u'"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"WRITE_SET mismatch("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnid2
argument_list|)
operator|+
literal|"): "
operator|+
name|TxnDbUtil
operator|.
name|queryToString
argument_list|(
literal|"select * from WRITE_SET"
argument_list|)
argument_list|,
literal|1
argument_list|,
comment|//1 partitions updated (and no other entries)
name|TxnDbUtil
operator|.
name|countQueryAgent
argument_list|(
literal|"select count(*) from WRITE_SET where ws_txnid="
operator|+
name|txnid2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShowTablesLock
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"T, T2"
block|}
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists T (a int, b int)"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|long
name|txnid1
init|=
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert into T values(1,3)"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|getLocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"t"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|DbTxnManager
name|txnMgr2
init|=
operator|(
name|DbTxnManager
operator|)
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"show tables"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr2
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fidler"
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"t"
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|txnMgr2
operator|.
name|releaseLocks
argument_list|(
name|txnMgr2
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Lock remained"
argument_list|,
literal|0
argument_list|,
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Lock remained"
argument_list|,
literal|0
argument_list|,
name|getLocks
argument_list|(
name|txnMgr2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table if not exists T2 (a int, b int) partitioned by (p int) clustered by (a) "
operator|+
literal|"into 2  buckets stored as orc TBLPROPERTIES ('transactional'='false')"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|cpr
argument_list|)
expr_stmt|;
name|txnid1
operator|=
name|txnMgr
operator|.
name|openTxn
argument_list|(
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"insert into T2 partition(p=1) values(1,3)"
argument_list|)
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fifer"
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|1
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"t2"
argument_list|,
literal|"p=1"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|txnMgr2
operator|=
operator|(
name|DbTxnManager
operator|)
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|checkCmdOnDriver
argument_list|(
name|driver
operator|.
name|compileAndRespond
argument_list|(
literal|"show tables"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DbTxnManager
operator|)
name|txnMgr2
operator|)
operator|.
name|acquireLocks
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
argument_list|,
name|ctx
argument_list|,
literal|"Fidler"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|locks
operator|=
name|getLocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected lock count"
argument_list|,
literal|2
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|"t2"
argument_list|,
literal|"p=1"
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|checkLock
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
literal|"default"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|locks
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|commitTxn
argument_list|()
expr_stmt|;
name|txnMgr2
operator|.
name|releaseLocks
argument_list|(
name|txnMgr2
operator|.
name|getLockManager
argument_list|()
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Lock remained"
argument_list|,
literal|0
argument_list|,
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Lock remained"
argument_list|,
literal|0
argument_list|,
name|getLocks
argument_list|(
name|txnMgr2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

