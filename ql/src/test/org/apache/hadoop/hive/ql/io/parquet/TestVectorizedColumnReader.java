begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IOConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|vector
operator|.
name|VectorizedParquetRecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|ParquetInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|ParquetInputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|api
operator|.
name|ReadSupport
operator|.
name|PARQUET_READ_SCHEMA
import|;
end_import

begin_class
specifier|public
class|class
name|TestVectorizedColumnReader
extends|extends
name|VectorizedColumnReaderTestBase
block|{
specifier|static
name|boolean
name|isDictionaryEncoding
init|=
literal|false
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|removeFile
argument_list|()
expr_stmt|;
name|writeData
argument_list|(
name|initWriterFromFile
argument_list|()
argument_list|,
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|removeFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntRead
parameter_list|()
throws|throws
name|Exception
block|{
name|intRead
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongRead
parameter_list|()
throws|throws
name|Exception
block|{
name|longRead
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleRead
parameter_list|()
throws|throws
name|Exception
block|{
name|doubleRead
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloatRead
parameter_list|()
throws|throws
name|Exception
block|{
name|floatRead
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBooleanRead
parameter_list|()
throws|throws
name|Exception
block|{
name|booleanRead
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinaryRead
parameter_list|()
throws|throws
name|Exception
block|{
name|binaryRead
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructRead
parameter_list|()
throws|throws
name|Exception
block|{
name|structRead
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedStructRead
parameter_list|()
throws|throws
name|Exception
block|{
name|nestedStructRead0
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
name|nestedStructRead1
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|structReadSomeNull
parameter_list|()
throws|throws
name|Exception
block|{
name|structReadSomeNull
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|decimalRead
parameter_list|()
throws|throws
name|Exception
block|{
name|decimalRead
argument_list|(
name|isDictionaryEncoding
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|TestVectorizedParquetRecordReader
extends|extends
name|VectorizedParquetRecordReader
block|{
specifier|public
name|TestVectorizedParquetRecordReader
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
name|oldInputSplit
parameter_list|,
name|JobConf
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|oldInputSplit
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ParquetInputSplit
name|getSplit
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
name|oldInputSplit
parameter_list|,
name|JobConf
name|conf
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullSplitForParquetReader
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"int32_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PARQUET_READ_SCHEMA
argument_list|,
literal|"message test { required int32 int32_field;}"
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PLAN
argument_list|,
literal|"//tmp"
argument_list|)
expr_stmt|;
name|Job
name|vectorJob
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|,
literal|"read vector"
argument_list|)
decl_stmt|;
name|ParquetInputFormat
operator|.
name|setInputPaths
argument_list|(
name|vectorJob
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|initialVectorizedRowBatchCtx
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FileSplit
name|fsplit
init|=
name|getFileSplit
argument_list|(
name|vectorJob
argument_list|)
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TestVectorizedParquetRecordReader
name|testReader
init|=
operator|new
name|TestVectorizedParquetRecordReader
argument_list|(
name|fsplit
argument_list|,
name|jobConf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Test should return null split from getSplit() method"
argument_list|,
name|testReader
operator|.
name|getSplit
argument_list|(
name|fsplit
argument_list|,
name|jobConf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

