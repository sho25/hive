begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatchCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IOConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|read
operator|.
name|DataWritableReadSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|serde
operator|.
name|ArrayWritableObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|vector
operator|.
name|VectorizedParquetRecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|example
operator|.
name|data
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|example
operator|.
name|data
operator|.
name|simple
operator|.
name|SimpleGroupFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|ParquetInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|ParquetWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|example
operator|.
name|GroupReadSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|example
operator|.
name|GroupWriteSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|MessageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|column
operator|.
name|ParquetProperties
operator|.
name|WriterVersion
operator|.
name|PARQUET_1_0
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|api
operator|.
name|ReadSupport
operator|.
name|PARQUET_READ_SCHEMA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|metadata
operator|.
name|CompressionCodecName
operator|.
name|GZIP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|MessageTypeParser
operator|.
name|parseMessageType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|TestVectorizedColumnReader
block|{
specifier|private
specifier|static
specifier|final
name|int
name|nElements
init|=
literal|2500
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"target/test/TestParquetVectorReader/testParquetFile"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|uniqueStrs
init|=
operator|new
name|String
index|[
name|nElements
index|]
decl_stmt|;
specifier|private
specifier|static
name|boolean
index|[]
name|isNulls
init|=
operator|new
name|boolean
index|[
name|nElements
index|]
decl_stmt|;
specifier|private
specifier|static
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|MessageType
name|schema
init|=
name|parseMessageType
argument_list|(
literal|"message test { "
operator|+
literal|"required int32 int32_field; "
operator|+
literal|"required int64 int64_field; "
operator|+
literal|"required int96 int96_field; "
operator|+
literal|"required double double_field; "
operator|+
literal|"required float float_field; "
operator|+
literal|"required boolean boolean_field; "
operator|+
literal|"required fixed_len_byte_array(3) flba_field; "
operator|+
literal|"optional fixed_len_byte_array(1) some_null_field; "
operator|+
literal|"optional fixed_len_byte_array(1) all_null_field; "
operator|+
literal|"optional binary binary_field; "
operator|+
literal|"optional binary binary_field_non_repeating; "
operator|+
literal|"} "
argument_list|)
decl_stmt|;
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|file
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|prepareFile
parameter_list|()
throws|throws
name|IOException
block|{
name|cleanup
argument_list|()
expr_stmt|;
name|boolean
name|dictionaryEnabled
init|=
literal|true
decl_stmt|;
name|boolean
name|validating
init|=
literal|false
decl_stmt|;
name|GroupWriteSupport
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|SimpleGroupFactory
name|f
init|=
operator|new
name|SimpleGroupFactory
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|ParquetWriter
argument_list|<
name|Group
argument_list|>
name|writer
init|=
operator|new
name|ParquetWriter
argument_list|<
name|Group
argument_list|>
argument_list|(
name|file
argument_list|,
operator|new
name|GroupWriteSupport
argument_list|()
argument_list|,
name|GZIP
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|,
literal|1024
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|,
name|dictionaryEnabled
argument_list|,
name|validating
argument_list|,
name|PARQUET_1_0
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|f
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|writeData
parameter_list|(
name|SimpleGroupFactory
name|f
parameter_list|,
name|ParquetWriter
argument_list|<
name|Group
argument_list|>
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|initialStrings
argument_list|(
name|uniqueStrs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nElements
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|group
init|=
name|f
operator|.
name|newGroup
argument_list|()
operator|.
name|append
argument_list|(
literal|"int32_field"
argument_list|,
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"int64_field"
argument_list|,
operator|(
name|long
operator|)
literal|2
operator|*
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"int96_field"
argument_list|,
name|Binary
operator|.
name|fromReusedByteArray
argument_list|(
literal|"999999999999"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"double_field"
argument_list|,
name|i
operator|*
literal|1.0
argument_list|)
operator|.
name|append
argument_list|(
literal|"float_field"
argument_list|,
operator|(
call|(
name|float
call|)
argument_list|(
name|i
operator|*
literal|2.0
argument_list|)
operator|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"boolean_field"
argument_list|,
name|i
operator|%
literal|5
operator|==
literal|0
argument_list|)
operator|.
name|append
argument_list|(
literal|"flba_field"
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|group
operator|.
name|append
argument_list|(
literal|"some_null_field"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|%
literal|13
operator|!=
literal|1
condition|)
block|{
name|int
name|binaryLen
init|=
name|i
operator|%
literal|10
decl_stmt|;
name|group
operator|.
name|append
argument_list|(
literal|"binary_field"
argument_list|,
name|Binary
operator|.
name|fromString
argument_list|(
operator|new
name|String
argument_list|(
operator|new
name|char
index|[
name|binaryLen
index|]
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\0"
argument_list|,
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uniqueStrs
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|append
argument_list|(
literal|"binary_field_non_repeating"
argument_list|,
name|Binary
operator|.
name|fromString
argument_list|(
name|uniqueStrs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getRandomStr
parameter_list|()
block|{
name|int
name|len
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
literal|'a'
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|initialStrings
parameter_list|(
name|String
index|[]
name|uniqueStrs
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uniqueStrs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|str
init|=
name|getRandomStr
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|uniqueStrs
index|[
name|i
index|]
operator|=
name|str
expr_stmt|;
name|isNulls
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|isNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|VectorizedParquetRecordReader
name|createParquetReader
parameter_list|(
name|String
name|schemaString
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|HiveException
block|{
name|conf
operator|.
name|set
argument_list|(
name|PARQUET_READ_SCHEMA
argument_list|,
name|schemaString
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PLAN
argument_list|,
literal|"//tmp"
argument_list|)
expr_stmt|;
name|Job
name|vectorJob
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|,
literal|"read vector"
argument_list|)
decl_stmt|;
name|ParquetInputFormat
operator|.
name|setInputPaths
argument_list|(
name|vectorJob
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|ParquetInputFormat
name|parquetInputFormat
init|=
operator|new
name|ParquetInputFormat
argument_list|(
name|GroupReadSupport
operator|.
name|class
argument_list|)
decl_stmt|;
name|InputSplit
name|split
init|=
operator|(
name|InputSplit
operator|)
name|parquetInputFormat
operator|.
name|getSplits
argument_list|(
name|vectorJob
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|initialVectorizedRowBatchCtx
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
operator|new
name|VectorizedParquetRecordReader
argument_list|(
name|split
argument_list|,
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|initialVectorizedRowBatchCtx
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
name|MapWork
name|mapWork
init|=
operator|new
name|MapWork
argument_list|()
decl_stmt|;
name|VectorizedRowBatchCtx
name|rbCtx
init|=
operator|new
name|VectorizedRowBatchCtx
argument_list|()
decl_stmt|;
name|rbCtx
operator|.
name|init
argument_list|(
name|createStructObjectInspector
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|setVectorMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|setVectorizedRowBatchCtx
argument_list|(
name|rbCtx
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|setMapWork
argument_list|(
name|conf
argument_list|,
name|mapWork
argument_list|)
expr_stmt|;
block|}
specifier|private
name|StructObjectInspector
name|createStructObjectInspector
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Create row related objects
name|String
name|columnNames
init|=
name|conf
operator|.
name|get
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNamesList
init|=
name|DataWritableReadSupport
operator|.
name|getColumnNames
argument_list|(
name|columnNames
argument_list|)
decl_stmt|;
name|String
name|columnTypes
init|=
name|conf
operator|.
name|get
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypesList
init|=
name|DataWritableReadSupport
operator|.
name|getColumnTypes
argument_list|(
name|columnTypes
argument_list|)
decl_stmt|;
name|TypeInfo
name|rowTypeInfo
init|=
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|columnNamesList
argument_list|,
name|columnTypesList
argument_list|)
decl_stmt|;
return|return
operator|new
name|ArrayWritableObjectInspector
argument_list|(
operator|(
name|StructTypeInfo
operator|)
name|rowTypeInfo
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntRead
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"int32_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createParquetReader
argument_list|(
literal|"message test { required int32 int32_field;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|LongColumnVector
name|vector
init|=
operator|(
name|LongColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
name|c
argument_list|,
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongRead
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"int64_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"bigint"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createParquetReader
argument_list|(
literal|"message test { required int64 int64_field;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|LongColumnVector
name|vector
init|=
operator|(
name|LongColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
literal|2
operator|*
name|c
argument_list|,
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleRead
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"double_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createParquetReader
argument_list|(
literal|"message test { required double double_field;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|DoubleColumnVector
name|vector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
literal|1.0
operator|*
name|c
argument_list|,
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloatRead
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"float_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createParquetReader
argument_list|(
literal|"message test { required float float_field;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|DoubleColumnVector
name|vector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
operator|(
name|float
operator|)
literal|2.0
operator|*
name|c
argument_list|,
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBooleanRead
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"boolean_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"boolean"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createParquetReader
argument_list|(
literal|"message test { required boolean boolean_field;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|LongColumnVector
name|vector
init|=
operator|(
name|LongColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|int
name|e
init|=
operator|(
name|c
operator|%
literal|5
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|assertEquals
argument_list|(
name|e
argument_list|,
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinaryReadDictionaryEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"binary_field"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createParquetReader
argument_list|(
literal|"message test { required binary binary_field;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|BytesColumnVector
name|vector
init|=
operator|(
name|BytesColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|boolean
name|noNull
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|c
operator|%
literal|13
operator|==
literal|1
condition|)
block|{
name|assertTrue
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|int
name|binaryLen
init|=
name|c
operator|%
literal|10
decl_stmt|;
name|String
name|expected
init|=
operator|new
name|String
argument_list|(
operator|new
name|char
index|[
name|binaryLen
index|]
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\0"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|String
name|actual
init|=
operator|new
name|String
argument_list|(
name|ArrayUtils
operator|.
name|subarray
argument_list|(
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|i
index|]
operator|+
name|vector
operator|.
name|length
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Failed at "
operator|+
name|c
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|noNull
operator|=
literal|false
expr_stmt|;
block|}
name|c
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"No Null check failed at "
operator|+
name|c
argument_list|,
name|noNull
argument_list|,
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinaryRead
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS
argument_list|,
literal|"binary_field_non_repeating"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|COLUMNS_TYPES
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_ALL_COLUMNS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ColumnProjectionUtils
operator|.
name|READ_COLUMN_IDS_CONF_STR
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|VectorizedParquetRecordReader
name|reader
init|=
name|createParquetReader
argument_list|(
literal|"message test { required binary binary_field_non_repeating;}"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|previous
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|BytesColumnVector
name|vector
init|=
operator|(
name|BytesColumnVector
operator|)
name|previous
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|boolean
name|noNull
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
operator|==
name|nElements
condition|)
block|{
break|break;
block|}
name|String
name|actual
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Null assert failed at "
operator|+
name|c
argument_list|,
name|isNulls
index|[
name|c
index|]
argument_list|,
name|vector
operator|.
name|isNull
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|vector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|actual
operator|=
operator|new
name|String
argument_list|(
name|ArrayUtils
operator|.
name|subarray
argument_list|(
name|vector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|vector
operator|.
name|start
index|[
name|i
index|]
operator|+
name|vector
operator|.
name|length
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failed at "
operator|+
name|c
argument_list|,
name|uniqueStrs
index|[
name|c
index|]
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|noNull
operator|=
literal|false
expr_stmt|;
block|}
name|c
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"No Null check failed at "
operator|+
name|c
argument_list|,
name|noNull
argument_list|,
name|vector
operator|.
name|noNulls
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vector
operator|.
name|isRepeating
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"It doesn't exit at expected position"
argument_list|,
name|nElements
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

