begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|Task
implements|implements
name|TBase
argument_list|<
name|Task
argument_list|,
name|Task
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"Task"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TASK_ID_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"taskId"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TASK_TYPE_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"taskType"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TASK_ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"taskAttributes"
argument_list|,
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TASK_COUNTERS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"taskCounters"
argument_list|,
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|OPERATOR_GRAPH_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"operatorGraph"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|OPERATOR_LIST_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"operatorList"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DONE_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"done"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|STARTED_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"started"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|8
argument_list|)
decl_stmt|;
specifier|private
name|String
name|taskId
decl_stmt|;
specifier|private
name|TaskType
name|taskType
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|taskAttributes
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|taskCounters
decl_stmt|;
specifier|private
name|Graph
name|operatorGraph
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Operator
argument_list|>
name|operatorList
decl_stmt|;
specifier|private
name|boolean
name|done
decl_stmt|;
specifier|private
name|boolean
name|started
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|TASK_ID
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"taskId"
argument_list|)
block|,
comment|/**      *       * @see TaskType      */
name|TASK_TYPE
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"taskType"
argument_list|)
block|,
name|TASK_ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"taskAttributes"
argument_list|)
block|,
name|TASK_COUNTERS
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"taskCounters"
argument_list|)
block|,
name|OPERATOR_GRAPH
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"operatorGraph"
argument_list|)
block|,
name|OPERATOR_LIST
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"operatorList"
argument_list|)
block|,
name|DONE
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|,
literal|"done"
argument_list|)
block|,
name|STARTED
argument_list|(
operator|(
name|short
operator|)
literal|8
argument_list|,
literal|"started"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TASK_ID
return|return
name|TASK_ID
return|;
case|case
literal|2
case|:
comment|// TASK_TYPE
return|return
name|TASK_TYPE
return|;
case|case
literal|3
case|:
comment|// TASK_ATTRIBUTES
return|return
name|TASK_ATTRIBUTES
return|;
case|case
literal|4
case|:
comment|// TASK_COUNTERS
return|return
name|TASK_COUNTERS
return|;
case|case
literal|5
case|:
comment|// OPERATOR_GRAPH
return|return
name|OPERATOR_GRAPH
return|;
case|case
literal|6
case|:
comment|// OPERATOR_LIST
return|return
name|OPERATOR_LIST
return|;
case|case
literal|7
case|:
comment|// DONE
return|return
name|DONE
return|;
case|case
literal|8
case|:
comment|// STARTED
return|return
name|STARTED
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__DONE_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__STARTED_ISSET_ID
init|=
literal|1
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TASK_ID
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"taskId"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TASK_TYPE
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"taskType"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|EnumMetaData
argument_list|(
name|TType
operator|.
name|ENUM
argument_list|,
name|TaskType
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TASK_ATTRIBUTES
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"taskAttributes"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|MapMetaData
argument_list|(
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TASK_COUNTERS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"taskCounters"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|MapMetaData
argument_list|(
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|OPERATOR_GRAPH
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"operatorGraph"
argument_list|,
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Graph
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|OPERATOR_LIST
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"operatorList"
argument_list|,
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Operator
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DONE
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"done"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|STARTED
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"started"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|Task
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Task
parameter_list|()
block|{   }
specifier|public
name|Task
parameter_list|(
name|String
name|taskId
parameter_list|,
name|TaskType
name|taskType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|taskAttributes
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|taskCounters
parameter_list|,
name|boolean
name|done
parameter_list|,
name|boolean
name|started
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|taskId
operator|=
name|taskId
expr_stmt|;
name|this
operator|.
name|taskType
operator|=
name|taskType
expr_stmt|;
name|this
operator|.
name|taskAttributes
operator|=
name|taskAttributes
expr_stmt|;
name|this
operator|.
name|taskCounters
operator|=
name|taskCounters
expr_stmt|;
name|this
operator|.
name|done
operator|=
name|done
expr_stmt|;
name|setDoneIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|started
operator|=
name|started
expr_stmt|;
name|setStartedIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|Task
parameter_list|(
name|Task
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTaskId
argument_list|()
condition|)
block|{
name|this
operator|.
name|taskId
operator|=
name|other
operator|.
name|taskId
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTaskType
argument_list|()
condition|)
block|{
name|this
operator|.
name|taskType
operator|=
name|other
operator|.
name|taskType
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTaskAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|__this__taskAttributes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|other_element
range|:
name|other
operator|.
name|taskAttributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|__this__taskAttributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|String
name|__this__taskAttributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__taskAttributes
operator|.
name|put
argument_list|(
name|__this__taskAttributes_copy_key
argument_list|,
name|__this__taskAttributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|taskAttributes
operator|=
name|__this__taskAttributes
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTaskCounters
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|__this__taskCounters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|other_element
range|:
name|other
operator|.
name|taskCounters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Long
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|__this__taskCounters_copy_key
init|=
name|other_element_key
decl_stmt|;
name|Long
name|__this__taskCounters_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__taskCounters
operator|.
name|put
argument_list|(
name|__this__taskCounters_copy_key
argument_list|,
name|__this__taskCounters_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|taskCounters
operator|=
name|__this__taskCounters
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetOperatorGraph
argument_list|()
condition|)
block|{
name|this
operator|.
name|operatorGraph
operator|=
operator|new
name|Graph
argument_list|(
name|other
operator|.
name|operatorGraph
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetOperatorList
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Operator
argument_list|>
name|__this__operatorList
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
name|other_element
range|:
name|other
operator|.
name|operatorList
control|)
block|{
name|__this__operatorList
operator|.
name|add
argument_list|(
operator|new
name|Operator
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|operatorList
operator|=
name|__this__operatorList
expr_stmt|;
block|}
name|this
operator|.
name|done
operator|=
name|other
operator|.
name|done
expr_stmt|;
name|this
operator|.
name|started
operator|=
name|other
operator|.
name|started
expr_stmt|;
block|}
specifier|public
name|Task
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|Task
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|taskId
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|taskType
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|taskAttributes
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|taskCounters
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|operatorGraph
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|operatorList
operator|=
literal|null
expr_stmt|;
name|setDoneIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|done
operator|=
literal|false
expr_stmt|;
name|setStartedIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|started
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTaskId
parameter_list|()
block|{
return|return
name|this
operator|.
name|taskId
return|;
block|}
specifier|public
name|void
name|setTaskId
parameter_list|(
name|String
name|taskId
parameter_list|)
block|{
name|this
operator|.
name|taskId
operator|=
name|taskId
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTaskId
parameter_list|()
block|{
name|this
operator|.
name|taskId
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field taskId is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTaskId
parameter_list|()
block|{
return|return
name|this
operator|.
name|taskId
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTaskIdIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|taskId
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    *     * @see TaskType    */
specifier|public
name|TaskType
name|getTaskType
parameter_list|()
block|{
return|return
name|this
operator|.
name|taskType
return|;
block|}
comment|/**    *     * @see TaskType    */
specifier|public
name|void
name|setTaskType
parameter_list|(
name|TaskType
name|taskType
parameter_list|)
block|{
name|this
operator|.
name|taskType
operator|=
name|taskType
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTaskType
parameter_list|()
block|{
name|this
operator|.
name|taskType
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field taskType is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTaskType
parameter_list|()
block|{
return|return
name|this
operator|.
name|taskType
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTaskTypeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|taskType
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getTaskAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|taskAttributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|taskAttributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToTaskAttributes
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|taskAttributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|taskAttributes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|taskAttributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getTaskAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|taskAttributes
return|;
block|}
specifier|public
name|void
name|setTaskAttributes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|taskAttributes
parameter_list|)
block|{
name|this
operator|.
name|taskAttributes
operator|=
name|taskAttributes
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTaskAttributes
parameter_list|()
block|{
name|this
operator|.
name|taskAttributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field taskAttributes is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTaskAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|taskAttributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTaskAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|taskAttributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getTaskCountersSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|taskCounters
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|taskCounters
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToTaskCounters
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|taskCounters
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|taskCounters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|taskCounters
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getTaskCounters
parameter_list|()
block|{
return|return
name|this
operator|.
name|taskCounters
return|;
block|}
specifier|public
name|void
name|setTaskCounters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|taskCounters
parameter_list|)
block|{
name|this
operator|.
name|taskCounters
operator|=
name|taskCounters
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTaskCounters
parameter_list|()
block|{
name|this
operator|.
name|taskCounters
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field taskCounters is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTaskCounters
parameter_list|()
block|{
return|return
name|this
operator|.
name|taskCounters
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTaskCountersIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|taskCounters
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|Graph
name|getOperatorGraph
parameter_list|()
block|{
return|return
name|this
operator|.
name|operatorGraph
return|;
block|}
specifier|public
name|void
name|setOperatorGraph
parameter_list|(
name|Graph
name|operatorGraph
parameter_list|)
block|{
name|this
operator|.
name|operatorGraph
operator|=
name|operatorGraph
expr_stmt|;
block|}
specifier|public
name|void
name|unsetOperatorGraph
parameter_list|()
block|{
name|this
operator|.
name|operatorGraph
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field operatorGraph is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetOperatorGraph
parameter_list|()
block|{
return|return
name|this
operator|.
name|operatorGraph
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setOperatorGraphIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|operatorGraph
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getOperatorListSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|operatorList
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|operatorList
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Operator
argument_list|>
name|getOperatorListIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|operatorList
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|operatorList
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToOperatorList
parameter_list|(
name|Operator
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|operatorList
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|operatorList
operator|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|operatorList
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Operator
argument_list|>
name|getOperatorList
parameter_list|()
block|{
return|return
name|this
operator|.
name|operatorList
return|;
block|}
specifier|public
name|void
name|setOperatorList
parameter_list|(
name|List
argument_list|<
name|Operator
argument_list|>
name|operatorList
parameter_list|)
block|{
name|this
operator|.
name|operatorList
operator|=
name|operatorList
expr_stmt|;
block|}
specifier|public
name|void
name|unsetOperatorList
parameter_list|()
block|{
name|this
operator|.
name|operatorList
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field operatorList is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetOperatorList
parameter_list|()
block|{
return|return
name|this
operator|.
name|operatorList
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setOperatorListIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|operatorList
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|this
operator|.
name|done
return|;
block|}
specifier|public
name|void
name|setDone
parameter_list|(
name|boolean
name|done
parameter_list|)
block|{
name|this
operator|.
name|done
operator|=
name|done
expr_stmt|;
name|setDoneIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDone
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__DONE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field done is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDone
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__DONE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setDoneIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__DONE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|this
operator|.
name|started
return|;
block|}
specifier|public
name|void
name|setStarted
parameter_list|(
name|boolean
name|started
parameter_list|)
block|{
name|this
operator|.
name|started
operator|=
name|started
expr_stmt|;
name|setStartedIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetStarted
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__STARTED_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field started is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStarted
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__STARTED_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setStartedIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__STARTED_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TASK_ID
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTaskId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTaskId
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TASK_TYPE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTaskType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTaskType
argument_list|(
operator|(
name|TaskType
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TASK_ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTaskAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTaskAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TASK_COUNTERS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTaskCounters
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTaskCounters
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OPERATOR_GRAPH
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetOperatorGraph
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setOperatorGraph
argument_list|(
operator|(
name|Graph
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OPERATOR_LIST
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetOperatorList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setOperatorList
argument_list|(
operator|(
name|List
argument_list|<
name|Operator
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DONE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDone
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STARTED
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStarted
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStarted
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TASK_ID
case|:
return|return
name|getTaskId
argument_list|()
return|;
case|case
name|TASK_TYPE
case|:
return|return
name|getTaskType
argument_list|()
return|;
case|case
name|TASK_ATTRIBUTES
case|:
return|return
name|getTaskAttributes
argument_list|()
return|;
case|case
name|TASK_COUNTERS
case|:
return|return
name|getTaskCounters
argument_list|()
return|;
case|case
name|OPERATOR_GRAPH
case|:
return|return
name|getOperatorGraph
argument_list|()
return|;
case|case
name|OPERATOR_LIST
case|:
return|return
name|getOperatorList
argument_list|()
return|;
case|case
name|DONE
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isDone
argument_list|()
argument_list|)
return|;
case|case
name|STARTED
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isStarted
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TASK_ID
case|:
return|return
name|isSetTaskId
argument_list|()
return|;
case|case
name|TASK_TYPE
case|:
return|return
name|isSetTaskType
argument_list|()
return|;
case|case
name|TASK_ATTRIBUTES
case|:
return|return
name|isSetTaskAttributes
argument_list|()
return|;
case|case
name|TASK_COUNTERS
case|:
return|return
name|isSetTaskCounters
argument_list|()
return|;
case|case
name|OPERATOR_GRAPH
case|:
return|return
name|isSetOperatorGraph
argument_list|()
return|;
case|case
name|OPERATOR_LIST
case|:
return|return
name|isSetOperatorList
argument_list|()
return|;
case|case
name|DONE
case|:
return|return
name|isSetDone
argument_list|()
return|;
case|case
name|STARTED
case|:
return|return
name|isSetStarted
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|Task
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|Task
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Task
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_taskId
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTaskId
argument_list|()
decl_stmt|;
name|boolean
name|that_present_taskId
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTaskId
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_taskId
operator|||
name|that_present_taskId
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_taskId
operator|&&
name|that_present_taskId
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|taskId
operator|.
name|equals
argument_list|(
name|that
operator|.
name|taskId
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_taskType
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTaskType
argument_list|()
decl_stmt|;
name|boolean
name|that_present_taskType
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTaskType
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_taskType
operator|||
name|that_present_taskType
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_taskType
operator|&&
name|that_present_taskType
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|taskType
operator|.
name|equals
argument_list|(
name|that
operator|.
name|taskType
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_taskAttributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTaskAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_taskAttributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTaskAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_taskAttributes
operator|||
name|that_present_taskAttributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_taskAttributes
operator|&&
name|that_present_taskAttributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|taskAttributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|taskAttributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_taskCounters
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTaskCounters
argument_list|()
decl_stmt|;
name|boolean
name|that_present_taskCounters
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTaskCounters
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_taskCounters
operator|||
name|that_present_taskCounters
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_taskCounters
operator|&&
name|that_present_taskCounters
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|taskCounters
operator|.
name|equals
argument_list|(
name|that
operator|.
name|taskCounters
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_operatorGraph
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetOperatorGraph
argument_list|()
decl_stmt|;
name|boolean
name|that_present_operatorGraph
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetOperatorGraph
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_operatorGraph
operator|||
name|that_present_operatorGraph
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_operatorGraph
operator|&&
name|that_present_operatorGraph
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|operatorGraph
operator|.
name|equals
argument_list|(
name|that
operator|.
name|operatorGraph
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_operatorList
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetOperatorList
argument_list|()
decl_stmt|;
name|boolean
name|that_present_operatorList
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetOperatorList
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_operatorList
operator|||
name|that_present_operatorList
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_operatorList
operator|&&
name|that_present_operatorList
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|operatorList
operator|.
name|equals
argument_list|(
name|that
operator|.
name|operatorList
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_done
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_done
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_done
operator|||
name|that_present_done
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_done
operator|&&
name|that_present_done
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|done
operator|!=
name|that
operator|.
name|done
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_started
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_started
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_started
operator|||
name|that_present_started
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_started
operator|&&
name|that_present_started
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|started
operator|!=
name|that
operator|.
name|started
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Task
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|Task
name|typedOther
init|=
operator|(
name|Task
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTaskId
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTaskId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTaskId
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|taskId
argument_list|,
name|typedOther
operator|.
name|taskId
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTaskType
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTaskType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTaskType
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|taskType
argument_list|,
name|typedOther
operator|.
name|taskType
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTaskAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTaskAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTaskAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|taskAttributes
argument_list|,
name|typedOther
operator|.
name|taskAttributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTaskCounters
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTaskCounters
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTaskCounters
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|taskCounters
argument_list|,
name|typedOther
operator|.
name|taskCounters
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetOperatorGraph
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetOperatorGraph
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetOperatorGraph
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|operatorGraph
argument_list|,
name|typedOther
operator|.
name|operatorGraph
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetOperatorList
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetOperatorList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetOperatorList
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|operatorList
argument_list|,
name|typedOther
operator|.
name|operatorList
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDone
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDone
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDone
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|done
argument_list|,
name|typedOther
operator|.
name|done
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStarted
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStarted
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStarted
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|started
argument_list|,
name|typedOther
operator|.
name|started
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TASK_ID
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|taskId
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TASK_TYPE
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|taskType
operator|=
name|TaskType
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// TASK_ATTRIBUTES
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map22
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|taskAttributes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map22
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i23
init|=
literal|0
init|;
name|_i23
operator|<
name|_map22
operator|.
name|size
condition|;
operator|++
name|_i23
control|)
block|{
name|String
name|_key24
decl_stmt|;
name|String
name|_val25
decl_stmt|;
name|_key24
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val25
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|taskAttributes
operator|.
name|put
argument_list|(
name|_key24
argument_list|,
name|_val25
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// TASK_COUNTERS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map26
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|taskCounters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|(
literal|2
operator|*
name|_map26
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i27
init|=
literal|0
init|;
name|_i27
operator|<
name|_map26
operator|.
name|size
condition|;
operator|++
name|_i27
control|)
block|{
name|String
name|_key28
decl_stmt|;
name|long
name|_val29
decl_stmt|;
name|_key28
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val29
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|this
operator|.
name|taskCounters
operator|.
name|put
argument_list|(
name|_key28
argument_list|,
name|_val29
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// OPERATOR_GRAPH
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|operatorGraph
operator|=
operator|new
name|Graph
argument_list|()
expr_stmt|;
name|this
operator|.
name|operatorGraph
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// OPERATOR_LIST
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list30
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|operatorList
operator|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|>
argument_list|(
name|_list30
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i31
init|=
literal|0
init|;
name|_i31
operator|<
name|_list30
operator|.
name|size
condition|;
operator|++
name|_i31
control|)
block|{
name|Operator
name|_elem32
decl_stmt|;
name|_elem32
operator|=
operator|new
name|Operator
argument_list|()
expr_stmt|;
name|_elem32
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|operatorList
operator|.
name|add
argument_list|(
name|_elem32
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// DONE
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|done
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|setDoneIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// STARTED
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|started
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|setStartedIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|taskId
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TASK_ID_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|taskId
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|taskType
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TASK_TYPE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|taskType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|taskAttributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TASK_ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|taskAttributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|_iter33
range|:
name|this
operator|.
name|taskAttributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter33
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter33
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|taskCounters
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TASK_COUNTERS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|I64
argument_list|,
name|this
operator|.
name|taskCounters
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|_iter34
range|:
name|this
operator|.
name|taskCounters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter34
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|_iter34
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|operatorGraph
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isSetOperatorGraph
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|OPERATOR_GRAPH_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|operatorGraph
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|operatorList
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isSetOperatorList
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|OPERATOR_LIST_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|operatorList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
name|_iter35
range|:
name|this
operator|.
name|operatorList
control|)
block|{
name|_iter35
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DONE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|done
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|STARTED_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|started
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Task("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"taskId:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|taskId
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|taskId
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"taskType:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|taskType
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|taskType
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"taskAttributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|taskAttributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|taskAttributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"taskCounters:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|taskCounters
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|taskCounters
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isSetOperatorGraph
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"operatorGraph:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|operatorGraph
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|operatorGraph
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetOperatorList
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"operatorList:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|operatorList
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|operatorList
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"done:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|done
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"started:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|started
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
end_class

end_unit

