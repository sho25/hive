begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|QueryPlan
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"QueryPlan"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|QUERIES_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"queries"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DONE_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"done"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|STARTED_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"started"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Query
argument_list|>
name|queries
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|QUERIES
init|=
literal|1
decl_stmt|;
specifier|private
name|boolean
name|done
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DONE
init|=
literal|2
decl_stmt|;
specifier|private
name|boolean
name|started
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|STARTED
init|=
literal|3
decl_stmt|;
specifier|private
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|done
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|started
init|=
literal|false
decl_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
name|QUERIES
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"queries"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Query
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|DONE
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"done"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|STARTED
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"started"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
static|static
block|{
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|QueryPlan
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|QueryPlan
parameter_list|()
block|{   }
specifier|public
name|QueryPlan
parameter_list|(
name|List
argument_list|<
name|Query
argument_list|>
name|queries
parameter_list|,
name|boolean
name|done
parameter_list|,
name|boolean
name|started
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|queries
operator|=
name|queries
expr_stmt|;
name|this
operator|.
name|done
operator|=
name|done
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|done
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|started
operator|=
name|started
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|started
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|QueryPlan
parameter_list|(
name|QueryPlan
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetQueries
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Query
argument_list|>
name|__this__queries
init|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Query
name|other_element
range|:
name|other
operator|.
name|queries
control|)
block|{
name|__this__queries
operator|.
name|add
argument_list|(
operator|new
name|Query
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|queries
operator|=
name|__this__queries
expr_stmt|;
block|}
name|__isset
operator|.
name|done
operator|=
name|other
operator|.
name|__isset
operator|.
name|done
expr_stmt|;
name|this
operator|.
name|done
operator|=
name|other
operator|.
name|done
expr_stmt|;
name|__isset
operator|.
name|started
operator|=
name|other
operator|.
name|__isset
operator|.
name|started
expr_stmt|;
name|this
operator|.
name|started
operator|=
name|other
operator|.
name|started
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|QueryPlan
name|clone
parameter_list|()
block|{
return|return
operator|new
name|QueryPlan
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|int
name|getQueriesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|queries
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|queries
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Query
argument_list|>
name|getQueriesIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|queries
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|queries
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToQueries
parameter_list|(
name|Query
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|queries
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|queries
operator|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|queries
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Query
argument_list|>
name|getQueries
parameter_list|()
block|{
return|return
name|this
operator|.
name|queries
return|;
block|}
specifier|public
name|void
name|setQueries
parameter_list|(
name|List
argument_list|<
name|Query
argument_list|>
name|queries
parameter_list|)
block|{
name|this
operator|.
name|queries
operator|=
name|queries
expr_stmt|;
block|}
specifier|public
name|void
name|unsetQueries
parameter_list|()
block|{
name|this
operator|.
name|queries
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field queries is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetQueries
parameter_list|()
block|{
return|return
name|this
operator|.
name|queries
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|this
operator|.
name|done
return|;
block|}
specifier|public
name|void
name|setDone
parameter_list|(
name|boolean
name|done
parameter_list|)
block|{
name|this
operator|.
name|done
operator|=
name|done
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|done
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDone
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|done
operator|=
literal|false
expr_stmt|;
block|}
comment|// Returns true if field done is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetDone
parameter_list|()
block|{
return|return
name|this
operator|.
name|__isset
operator|.
name|done
return|;
block|}
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|this
operator|.
name|started
return|;
block|}
specifier|public
name|void
name|setStarted
parameter_list|(
name|boolean
name|started
parameter_list|)
block|{
name|this
operator|.
name|started
operator|=
name|started
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|started
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetStarted
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|started
operator|=
literal|false
expr_stmt|;
block|}
comment|// Returns true if field started is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetStarted
parameter_list|()
block|{
return|return
name|this
operator|.
name|__isset
operator|.
name|started
return|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|int
name|fieldID
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|QUERIES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetQueries
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setQueries
argument_list|(
operator|(
name|List
argument_list|<
name|Query
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DONE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDone
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STARTED
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStarted
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStarted
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|QUERIES
case|:
return|return
name|getQueries
argument_list|()
return|;
case|case
name|DONE
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isDone
argument_list|()
argument_list|)
return|;
case|case
name|STARTED
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isStarted
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
comment|// Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSet
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|QUERIES
case|:
return|return
name|isSetQueries
argument_list|()
return|;
case|case
name|DONE
case|:
return|return
name|isSetDone
argument_list|()
return|;
case|case
name|STARTED
case|:
return|return
name|isSetStarted
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|QueryPlan
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|QueryPlan
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|QueryPlan
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_queries
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetQueries
argument_list|()
decl_stmt|;
name|boolean
name|that_present_queries
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetQueries
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_queries
operator|||
name|that_present_queries
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_queries
operator|&&
name|that_present_queries
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|queries
operator|.
name|equals
argument_list|(
name|that
operator|.
name|queries
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_done
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_done
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_done
operator|||
name|that_present_done
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_done
operator|&&
name|that_present_done
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|done
operator|!=
name|that
operator|.
name|done
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_started
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_started
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_started
operator|||
name|that_present_started
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_started
operator|&&
name|that_present_started
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|started
operator|!=
name|that
operator|.
name|started
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
name|QUERIES
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list64
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|queries
operator|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|(
name|_list64
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i65
init|=
literal|0
init|;
name|_i65
operator|<
name|_list64
operator|.
name|size
condition|;
operator|++
name|_i65
control|)
block|{
name|Query
name|_elem66
decl_stmt|;
name|_elem66
operator|=
operator|new
name|Query
argument_list|()
expr_stmt|;
name|_elem66
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|queries
operator|.
name|add
argument_list|(
name|_elem66
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DONE
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|done
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|done
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STARTED
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|started
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|started
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|queries
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|QUERIES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|queries
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Query
name|_iter67
range|:
name|this
operator|.
name|queries
control|)
block|{
name|_iter67
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DONE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|done
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|STARTED_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|started
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"QueryPlan("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"queries:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|queries
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|queries
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"done:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|done
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"started:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|started
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
comment|// check that fields of type enum have valid values
block|}
block|}
end_class

end_unit

