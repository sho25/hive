begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|Stage
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"Stage"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|STAGE_ID_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"stageId"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|STAGE_TYPE_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"stageType"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|STAGE_ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"stageAttributes"
argument_list|,
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|STAGE_COUNTERS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"stageCounters"
argument_list|,
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TASK_LIST_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"taskList"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DONE_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"done"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|STARTED_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"started"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
specifier|private
name|String
name|stageId
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|STAGEID
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|stageType
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|STAGETYPE
init|=
literal|2
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stageAttributes
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|STAGEATTRIBUTES
init|=
literal|3
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|stageCounters
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|STAGECOUNTERS
init|=
literal|4
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Task
argument_list|>
name|taskList
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TASKLIST
init|=
literal|5
decl_stmt|;
specifier|private
name|boolean
name|done
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DONE
init|=
literal|6
decl_stmt|;
specifier|private
name|boolean
name|started
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|STARTED
init|=
literal|7
decl_stmt|;
specifier|private
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|stageType
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|done
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|started
init|=
literal|false
decl_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
name|STAGEID
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"stageId"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|STAGETYPE
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"stageType"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|STAGEATTRIBUTES
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"stageAttributes"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|MapMetaData
argument_list|(
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|STAGECOUNTERS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"stageCounters"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|MapMetaData
argument_list|(
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|TASKLIST
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"taskList"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Task
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|DONE
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"done"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|STARTED
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"started"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
static|static
block|{
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|Stage
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Stage
parameter_list|()
block|{   }
specifier|public
name|Stage
parameter_list|(
name|String
name|stageId
parameter_list|,
name|int
name|stageType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stageAttributes
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|stageCounters
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|>
name|taskList
parameter_list|,
name|boolean
name|done
parameter_list|,
name|boolean
name|started
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|stageId
operator|=
name|stageId
expr_stmt|;
name|this
operator|.
name|stageType
operator|=
name|stageType
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|stageType
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|stageAttributes
operator|=
name|stageAttributes
expr_stmt|;
name|this
operator|.
name|stageCounters
operator|=
name|stageCounters
expr_stmt|;
name|this
operator|.
name|taskList
operator|=
name|taskList
expr_stmt|;
name|this
operator|.
name|done
operator|=
name|done
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|done
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|started
operator|=
name|started
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|started
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|Stage
parameter_list|(
name|Stage
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetStageId
argument_list|()
condition|)
block|{
name|this
operator|.
name|stageId
operator|=
name|other
operator|.
name|stageId
expr_stmt|;
block|}
name|__isset
operator|.
name|stageType
operator|=
name|other
operator|.
name|__isset
operator|.
name|stageType
expr_stmt|;
name|this
operator|.
name|stageType
operator|=
name|other
operator|.
name|stageType
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetStageAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|__this__stageAttributes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|other_element
range|:
name|other
operator|.
name|stageAttributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|__this__stageAttributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|String
name|__this__stageAttributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__stageAttributes
operator|.
name|put
argument_list|(
name|__this__stageAttributes_copy_key
argument_list|,
name|__this__stageAttributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|stageAttributes
operator|=
name|__this__stageAttributes
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetStageCounters
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|__this__stageCounters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|other_element
range|:
name|other
operator|.
name|stageCounters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Long
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|__this__stageCounters_copy_key
init|=
name|other_element_key
decl_stmt|;
name|Long
name|__this__stageCounters_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__stageCounters
operator|.
name|put
argument_list|(
name|__this__stageCounters_copy_key
argument_list|,
name|__this__stageCounters_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|stageCounters
operator|=
name|__this__stageCounters
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTaskList
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Task
argument_list|>
name|__this__taskList
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
name|other_element
range|:
name|other
operator|.
name|taskList
control|)
block|{
name|__this__taskList
operator|.
name|add
argument_list|(
operator|new
name|Task
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|taskList
operator|=
name|__this__taskList
expr_stmt|;
block|}
name|__isset
operator|.
name|done
operator|=
name|other
operator|.
name|__isset
operator|.
name|done
expr_stmt|;
name|this
operator|.
name|done
operator|=
name|other
operator|.
name|done
expr_stmt|;
name|__isset
operator|.
name|started
operator|=
name|other
operator|.
name|__isset
operator|.
name|started
expr_stmt|;
name|this
operator|.
name|started
operator|=
name|other
operator|.
name|started
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Stage
name|clone
parameter_list|()
block|{
return|return
operator|new
name|Stage
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|String
name|getStageId
parameter_list|()
block|{
return|return
name|this
operator|.
name|stageId
return|;
block|}
specifier|public
name|void
name|setStageId
parameter_list|(
name|String
name|stageId
parameter_list|)
block|{
name|this
operator|.
name|stageId
operator|=
name|stageId
expr_stmt|;
block|}
specifier|public
name|void
name|unsetStageId
parameter_list|()
block|{
name|this
operator|.
name|stageId
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field stageId is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetStageId
parameter_list|()
block|{
return|return
name|this
operator|.
name|stageId
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getStageType
parameter_list|()
block|{
return|return
name|this
operator|.
name|stageType
return|;
block|}
specifier|public
name|void
name|setStageType
parameter_list|(
name|int
name|stageType
parameter_list|)
block|{
name|this
operator|.
name|stageType
operator|=
name|stageType
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|stageType
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetStageType
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|stageType
operator|=
literal|false
expr_stmt|;
block|}
comment|// Returns true if field stageType is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetStageType
parameter_list|()
block|{
return|return
name|this
operator|.
name|__isset
operator|.
name|stageType
return|;
block|}
specifier|public
name|int
name|getStageAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|stageAttributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|stageAttributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToStageAttributes
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|stageAttributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|stageAttributes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|stageAttributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getStageAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|stageAttributes
return|;
block|}
specifier|public
name|void
name|setStageAttributes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stageAttributes
parameter_list|)
block|{
name|this
operator|.
name|stageAttributes
operator|=
name|stageAttributes
expr_stmt|;
block|}
specifier|public
name|void
name|unsetStageAttributes
parameter_list|()
block|{
name|this
operator|.
name|stageAttributes
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field stageAttributes is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetStageAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|stageAttributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getStageCountersSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|stageCounters
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|stageCounters
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToStageCounters
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|stageCounters
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|stageCounters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|stageCounters
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getStageCounters
parameter_list|()
block|{
return|return
name|this
operator|.
name|stageCounters
return|;
block|}
specifier|public
name|void
name|setStageCounters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|stageCounters
parameter_list|)
block|{
name|this
operator|.
name|stageCounters
operator|=
name|stageCounters
expr_stmt|;
block|}
specifier|public
name|void
name|unsetStageCounters
parameter_list|()
block|{
name|this
operator|.
name|stageCounters
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field stageCounters is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetStageCounters
parameter_list|()
block|{
return|return
name|this
operator|.
name|stageCounters
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getTaskListSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|taskList
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|taskList
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Task
argument_list|>
name|getTaskListIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|taskList
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|taskList
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToTaskList
parameter_list|(
name|Task
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|taskList
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|taskList
operator|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|taskList
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Task
argument_list|>
name|getTaskList
parameter_list|()
block|{
return|return
name|this
operator|.
name|taskList
return|;
block|}
specifier|public
name|void
name|setTaskList
parameter_list|(
name|List
argument_list|<
name|Task
argument_list|>
name|taskList
parameter_list|)
block|{
name|this
operator|.
name|taskList
operator|=
name|taskList
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTaskList
parameter_list|()
block|{
name|this
operator|.
name|taskList
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field taskList is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetTaskList
parameter_list|()
block|{
return|return
name|this
operator|.
name|taskList
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|this
operator|.
name|done
return|;
block|}
specifier|public
name|void
name|setDone
parameter_list|(
name|boolean
name|done
parameter_list|)
block|{
name|this
operator|.
name|done
operator|=
name|done
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|done
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDone
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|done
operator|=
literal|false
expr_stmt|;
block|}
comment|// Returns true if field done is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetDone
parameter_list|()
block|{
return|return
name|this
operator|.
name|__isset
operator|.
name|done
return|;
block|}
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|this
operator|.
name|started
return|;
block|}
specifier|public
name|void
name|setStarted
parameter_list|(
name|boolean
name|started
parameter_list|)
block|{
name|this
operator|.
name|started
operator|=
name|started
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|started
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetStarted
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|started
operator|=
literal|false
expr_stmt|;
block|}
comment|// Returns true if field started is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetStarted
parameter_list|()
block|{
return|return
name|this
operator|.
name|__isset
operator|.
name|started
return|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|int
name|fieldID
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|STAGEID
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStageId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStageId
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STAGETYPE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStageType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStageType
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STAGEATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStageAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStageAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STAGECOUNTERS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStageCounters
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStageCounters
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TASKLIST
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTaskList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTaskList
argument_list|(
operator|(
name|List
argument_list|<
name|Task
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DONE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDone
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STARTED
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStarted
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStarted
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|STAGEID
case|:
return|return
name|getStageId
argument_list|()
return|;
case|case
name|STAGETYPE
case|:
return|return
name|getStageType
argument_list|()
return|;
case|case
name|STAGEATTRIBUTES
case|:
return|return
name|getStageAttributes
argument_list|()
return|;
case|case
name|STAGECOUNTERS
case|:
return|return
name|getStageCounters
argument_list|()
return|;
case|case
name|TASKLIST
case|:
return|return
name|getTaskList
argument_list|()
return|;
case|case
name|DONE
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isDone
argument_list|()
argument_list|)
return|;
case|case
name|STARTED
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isStarted
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
comment|// Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSet
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|STAGEID
case|:
return|return
name|isSetStageId
argument_list|()
return|;
case|case
name|STAGETYPE
case|:
return|return
name|isSetStageType
argument_list|()
return|;
case|case
name|STAGEATTRIBUTES
case|:
return|return
name|isSetStageAttributes
argument_list|()
return|;
case|case
name|STAGECOUNTERS
case|:
return|return
name|isSetStageCounters
argument_list|()
return|;
case|case
name|TASKLIST
case|:
return|return
name|isSetTaskList
argument_list|()
return|;
case|case
name|DONE
case|:
return|return
name|isSetDone
argument_list|()
return|;
case|case
name|STARTED
case|:
return|return
name|isSetStarted
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|Stage
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|Stage
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Stage
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_stageId
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStageId
argument_list|()
decl_stmt|;
name|boolean
name|that_present_stageId
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStageId
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_stageId
operator|||
name|that_present_stageId
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_stageId
operator|&&
name|that_present_stageId
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|stageId
operator|.
name|equals
argument_list|(
name|that
operator|.
name|stageId
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_stageType
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_stageType
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_stageType
operator|||
name|that_present_stageType
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_stageType
operator|&&
name|that_present_stageType
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|stageType
operator|!=
name|that
operator|.
name|stageType
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_stageAttributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStageAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_stageAttributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStageAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_stageAttributes
operator|||
name|that_present_stageAttributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_stageAttributes
operator|&&
name|that_present_stageAttributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|stageAttributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|stageAttributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_stageCounters
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStageCounters
argument_list|()
decl_stmt|;
name|boolean
name|that_present_stageCounters
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStageCounters
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_stageCounters
operator|||
name|that_present_stageCounters
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_stageCounters
operator|&&
name|that_present_stageCounters
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|stageCounters
operator|.
name|equals
argument_list|(
name|that
operator|.
name|stageCounters
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_taskList
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTaskList
argument_list|()
decl_stmt|;
name|boolean
name|that_present_taskList
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTaskList
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_taskList
operator|||
name|that_present_taskList
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_taskList
operator|&&
name|that_present_taskList
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|taskList
operator|.
name|equals
argument_list|(
name|that
operator|.
name|taskList
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_done
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_done
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_done
operator|||
name|that_present_done
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_done
operator|&&
name|that_present_done
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|done
operator|!=
name|that
operator|.
name|done
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_started
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_started
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_started
operator|||
name|that_present_started
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_started
operator|&&
name|that_present_started
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|started
operator|!=
name|that
operator|.
name|started
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
name|STAGEID
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|stageId
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STAGETYPE
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|stageType
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|stageType
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STAGEATTRIBUTES
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map36
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|stageAttributes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map36
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i37
init|=
literal|0
init|;
name|_i37
operator|<
name|_map36
operator|.
name|size
condition|;
operator|++
name|_i37
control|)
block|{
name|String
name|_key38
decl_stmt|;
name|String
name|_val39
decl_stmt|;
name|_key38
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val39
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|stageAttributes
operator|.
name|put
argument_list|(
name|_key38
argument_list|,
name|_val39
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STAGECOUNTERS
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map40
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|stageCounters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|(
literal|2
operator|*
name|_map40
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i41
init|=
literal|0
init|;
name|_i41
operator|<
name|_map40
operator|.
name|size
condition|;
operator|++
name|_i41
control|)
block|{
name|String
name|_key42
decl_stmt|;
name|long
name|_val43
decl_stmt|;
name|_key42
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val43
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|this
operator|.
name|stageCounters
operator|.
name|put
argument_list|(
name|_key42
argument_list|,
name|_val43
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TASKLIST
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list44
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|taskList
operator|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|>
argument_list|(
name|_list44
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i45
init|=
literal|0
init|;
name|_i45
operator|<
name|_list44
operator|.
name|size
condition|;
operator|++
name|_i45
control|)
block|{
name|Task
name|_elem46
decl_stmt|;
name|_elem46
operator|=
operator|new
name|Task
argument_list|()
expr_stmt|;
name|_elem46
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskList
operator|.
name|add
argument_list|(
name|_elem46
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DONE
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|done
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|done
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STARTED
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|started
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|started
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|stageId
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|STAGE_ID_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|stageId
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|STAGE_TYPE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|stageType
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|stageAttributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|STAGE_ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|stageAttributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|_iter47
range|:
name|this
operator|.
name|stageAttributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter47
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter47
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|stageCounters
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|STAGE_COUNTERS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|I64
argument_list|,
name|this
operator|.
name|stageCounters
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|_iter48
range|:
name|this
operator|.
name|stageCounters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter48
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|_iter48
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|taskList
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TASK_LIST_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|taskList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Task
name|_iter49
range|:
name|this
operator|.
name|taskList
control|)
block|{
name|_iter49
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DONE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|done
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|STARTED_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|started
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Stage("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"stageId:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|stageId
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|stageId
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"stageType:"
argument_list|)
expr_stmt|;
name|String
name|stageType_name
init|=
name|StageType
operator|.
name|VALUES_TO_NAMES
operator|.
name|get
argument_list|(
name|this
operator|.
name|stageType
argument_list|)
decl_stmt|;
if|if
condition|(
name|stageType_name
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|stageType_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|stageType
argument_list|)
expr_stmt|;
if|if
condition|(
name|stageType_name
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"stageAttributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|stageAttributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|stageAttributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"stageCounters:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|stageCounters
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|stageCounters
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"taskList:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|taskList
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|taskList
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"done:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|done
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"started:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|started
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
comment|// check that fields of type enum have valid values
if|if
condition|(
name|isSetStageType
argument_list|()
operator|&&
operator|!
name|StageType
operator|.
name|VALID_VALUES
operator|.
name|contains
argument_list|(
name|stageType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TProtocolException
argument_list|(
literal|"The field 'stageType' has been assigned the invalid value "
operator|+
name|stageType
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

