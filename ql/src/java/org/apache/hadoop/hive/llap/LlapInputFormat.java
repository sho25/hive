begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SerializationUtilities
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Kryo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SplitLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|DAG
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|Vertex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|DagUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|HiveSplitGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TezWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TaskLocationHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|VertexLocationHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|event
operator|.
name|VertexStateUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|mapreduce
operator|.
name|hadoop
operator|.
name|InputSplitInfoMem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|mapreduce
operator|.
name|hadoop
operator|.
name|MRInputHelpers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|mapreduce
operator|.
name|protos
operator|.
name|MRRuntimeProtos
operator|.
name|MRInputUserPayloadProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|mapreduce
operator|.
name|protos
operator|.
name|MRRuntimeProtos
operator|.
name|MRSplitProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|mapreduce
operator|.
name|protos
operator|.
name|MRRuntimeProtos
operator|.
name|MRSplitsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|InputInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|InputInitializerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|InputSpecUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|events
operator|.
name|InputConfigureVertexTasksEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|events
operator|.
name|InputDataInformationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|events
operator|.
name|InputInitializerEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
specifier|public
class|class
name|LlapInputFormat
parameter_list|<
name|V
extends|extends
name|WritableComparable
parameter_list|>
implements|implements
name|InputFormat
argument_list|<
name|NullWritable
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LlapInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TezWork
name|work
decl_stmt|;
specifier|private
name|Schema
name|schema
decl_stmt|;
specifier|public
name|LlapInputFormat
parameter_list|(
name|TezWork
name|tezWork
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
name|this
operator|.
name|work
operator|=
name|tezWork
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
comment|// need empty constructor for bean instantiation
specifier|public
name|LlapInputFormat
parameter_list|()
block|{}
comment|/*    * This proxy record reader has the duty of establishing a connected socket with LLAP, then fire    * off the work in the split to LLAP and finally return the connected socket back in an    * LlapRecordReader. The LlapRecordReader class reads the results from the socket.    */
specifier|public
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|V
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|LlapInputSplit
name|llapSplit
init|=
operator|(
name|LlapInputSplit
operator|)
name|split
decl_stmt|;
comment|// TODO: push event into LLAP
comment|// this is just the portion that sets up the io to receive data
name|String
name|host
init|=
name|split
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|String
name|id
init|=
name|job
operator|.
name|get
argument_list|(
name|LlapOutputFormat
operator|.
name|LLAP_OF_ID_KEY
argument_list|)
decl_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|Socket
name|socket
init|=
operator|new
name|Socket
argument_list|(
name|host
argument_list|,
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_OUTPUT_SERVICE_PORT
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Socket connected"
argument_list|)
expr_stmt|;
name|socket
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|id
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|socket
operator|.
name|getOutputStream
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registered id: "
operator|+
name|id
argument_list|)
expr_stmt|;
return|return
operator|new
name|LlapRecordReader
argument_list|(
name|socket
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|llapSplit
operator|.
name|getSchema
argument_list|()
argument_list|,
name|Text
operator|.
name|class
argument_list|)
return|;
block|}
comment|/*    * getSplits() gets called as part of the GenericUDFGetSplits call to get splits. Here we create    * an array of input splits from the work item we have, figure out the location for llap and pass    * that back for the submission. getRecordReader method above uses that split info to assign the    * work to llap.    */
annotation|@
name|Override
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: need to build proto of plan
name|DAG
name|dag
init|=
name|DAG
operator|.
name|create
argument_list|(
name|work
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|dag
operator|.
name|setCredentials
argument_list|(
name|job
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: set access control? TezTask.setAccessControlsForCurrentUser(dag);
name|DagUtils
name|utils
init|=
name|DagUtils
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Context
name|ctx
init|=
operator|new
name|Context
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|MapWork
name|mapWork
init|=
operator|(
name|MapWork
operator|)
name|work
operator|.
name|getAllWork
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// bunch of things get setup in the context based on conf but we need only the MR tmp directory
comment|// for the following method.
name|JobConf
name|wxConf
init|=
name|utils
operator|.
name|initializeVertexConf
argument_list|(
name|job
argument_list|,
name|ctx
argument_list|,
name|mapWork
argument_list|)
decl_stmt|;
name|Path
name|scratchDir
init|=
name|utils
operator|.
name|createTezDir
argument_list|(
name|ctx
operator|.
name|getMRScratchDir
argument_list|()
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|scratchDir
operator|.
name|getFileSystem
argument_list|(
name|job
argument_list|)
decl_stmt|;
try|try
block|{
name|LocalResource
name|appJarLr
init|=
name|createJarLocalResource
argument_list|(
name|utils
operator|.
name|getExecJarPathLocal
argument_list|()
argument_list|,
name|utils
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|Vertex
name|wx
init|=
name|utils
operator|.
name|createVertex
argument_list|(
name|wxConf
argument_list|,
name|mapWork
argument_list|,
name|scratchDir
argument_list|,
name|appJarLr
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|LocalResource
argument_list|>
argument_list|()
argument_list|,
name|fs
argument_list|,
name|ctx
argument_list|,
literal|false
argument_list|,
name|work
argument_list|,
name|work
operator|.
name|getVertexType
argument_list|(
name|mapWork
argument_list|)
argument_list|)
decl_stmt|;
name|dag
operator|.
name|addVertex
argument_list|(
name|wx
argument_list|)
expr_stmt|;
name|utils
operator|.
name|addCredentials
argument_list|(
name|mapWork
argument_list|,
name|dag
argument_list|)
expr_stmt|;
comment|// we have the dag now proceed to get the splits:
name|HiveSplitGenerator
name|splitGenerator
init|=
operator|new
name|HiveSplitGenerator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|splitGenerator
operator|.
name|initializeSplitGenerator
argument_list|(
name|wxConf
argument_list|,
name|mapWork
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|eventList
init|=
name|splitGenerator
operator|.
name|initialize
argument_list|()
decl_stmt|;
comment|// hack - just serializing with kryo for now. This needs to be done properly
name|InputSplit
index|[]
name|result
init|=
operator|new
name|InputSplit
index|[
name|eventList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|10240
argument_list|)
decl_stmt|;
name|InputConfigureVertexTasksEvent
name|configureEvent
init|=
operator|(
name|InputConfigureVertexTasksEvent
operator|)
name|eventList
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TaskLocationHint
argument_list|>
name|hints
init|=
name|configureEvent
operator|.
name|getLocationHint
argument_list|()
operator|.
name|getTaskLocationHints
argument_list|()
decl_stmt|;
for|for
control|(
name|Event
name|event
range|:
name|eventList
control|)
block|{
name|TaskLocationHint
name|hint
init|=
name|hints
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hosts
init|=
name|hint
operator|.
name|getHosts
argument_list|()
decl_stmt|;
name|SplitLocationInfo
index|[]
name|locations
init|=
operator|new
name|SplitLocationInfo
index|[
name|hosts
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|host
range|:
name|hosts
control|)
block|{
name|locations
index|[
name|j
operator|++
index|]
operator|=
operator|new
name|SplitLocationInfo
argument_list|(
name|host
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|bos
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Kryo
name|kryo
init|=
name|SerializationUtilities
operator|.
name|borrowKryo
argument_list|()
decl_stmt|;
name|SerializationUtilities
operator|.
name|serializeObjectByKryo
argument_list|(
name|kryo
argument_list|,
name|event
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|SerializationUtilities
operator|.
name|releaseKryo
argument_list|(
name|kryo
argument_list|)
expr_stmt|;
name|result
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|LlapInputSplit
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|locations
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns a local resource representing a jar. This resource will be used to execute the plan on    * the cluster.    *    * @param localJarPath    *          Local path to the jar to be localized.    * @return LocalResource corresponding to the localized hive exec resource.    * @throws IOException    *           when any file system related call fails.    * @throws LoginException    *           when we are unable to determine the user.    * @throws URISyntaxException    *           when current jar location cannot be determined.    */
specifier|private
name|LocalResource
name|createJarLocalResource
parameter_list|(
name|String
name|localJarPath
parameter_list|,
name|DagUtils
name|utils
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|IllegalArgumentException
throws|,
name|FileNotFoundException
block|{
name|FileStatus
name|destDirStatus
init|=
name|utils
operator|.
name|getHiveJarDirectory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
assert|assert
name|destDirStatus
operator|!=
literal|null
assert|;
name|Path
name|destDirPath
init|=
name|destDirStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|localFile
init|=
operator|new
name|Path
argument_list|(
name|localJarPath
argument_list|)
decl_stmt|;
name|String
name|sha
init|=
name|getSha
argument_list|(
name|localFile
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|destFileName
init|=
name|localFile
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Now, try to find the file based on SHA and name. Currently we require exact name match.
comment|// We could also allow cutting off versions and other stuff provided that SHA matches...
name|destFileName
operator|=
name|FilenameUtils
operator|.
name|removeExtension
argument_list|(
name|destFileName
argument_list|)
operator|+
literal|"-"
operator|+
name|sha
operator|+
name|FilenameUtils
operator|.
name|EXTENSION_SEPARATOR
operator|+
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|destFileName
argument_list|)
expr_stmt|;
comment|// TODO: if this method is ever called on more than one jar, getting the dir and the
comment|// list need to be refactored out to be done only once.
name|Path
name|destFile
init|=
operator|new
name|Path
argument_list|(
name|destDirPath
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|destFileName
argument_list|)
decl_stmt|;
return|return
name|utils
operator|.
name|localizeResource
argument_list|(
name|localFile
argument_list|,
name|destFile
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|conf
argument_list|)
return|;
block|}
specifier|private
name|String
name|getSha
parameter_list|(
name|Path
name|localFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalArgumentException
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|is
operator|=
name|localFs
operator|.
name|open
argument_list|(
name|localFile
argument_list|)
expr_stmt|;
return|return
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|is
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

