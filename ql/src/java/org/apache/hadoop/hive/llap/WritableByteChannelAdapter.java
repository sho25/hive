begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|WritableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|memory
operator|.
name|BufferAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_comment
comment|/**  * Provides an adapter between {@link java.nio.channels.WritableByteChannel}  * and {@link io.netty.channel.ChannelHandlerContext}.  * Additionally provides a form of flow-control by limiting the number of  * queued async writes.  */
end_comment

begin_class
specifier|public
class|class
name|WritableByteChannelAdapter
implements|implements
name|WritableByteChannel
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WritableByteChannelAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ChannelHandlerContext
name|chc
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxPendingWrites
decl_stmt|;
comment|// This semaphore provides two functions:
comment|// 1. Forces a cap on the number of outstanding async writes to channel
comment|// 2. Ensures that channel isn't closed if there are any outstanding async writes
specifier|private
specifier|final
name|Semaphore
name|writeResources
decl_stmt|;
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
name|BufferAllocator
name|allocator
decl_stmt|;
specifier|private
name|ChannelFutureListener
name|writeListener
init|=
operator|new
name|ChannelFutureListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
block|{
comment|//Asynch write completed
comment|//Up the semaphore
name|writeResources
operator|.
name|release
argument_list|()
expr_stmt|;
if|if
condition|(
name|future
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Write cancelled on ID "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Write error on ID "
operator|+
name|id
argument_list|,
name|future
operator|.
name|cause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
specifier|private
name|ChannelFutureListener
name|closeListener
init|=
operator|new
name|ChannelFutureListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
block|{
if|if
condition|(
name|future
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Close cancelled on ID "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Close failed on ID "
operator|+
name|id
argument_list|,
name|future
operator|.
name|cause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
specifier|public
name|WritableByteChannelAdapter
parameter_list|(
name|ChannelHandlerContext
name|chc
parameter_list|,
name|int
name|maxPendingWrites
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|chc
operator|=
name|chc
expr_stmt|;
name|this
operator|.
name|maxPendingWrites
operator|=
name|maxPendingWrites
expr_stmt|;
name|this
operator|.
name|writeResources
operator|=
operator|new
name|Semaphore
argument_list|(
name|maxPendingWrites
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|void
name|setAllocator
parameter_list|(
name|BufferAllocator
name|allocator
parameter_list|)
block|{
name|this
operator|.
name|allocator
operator|=
name|allocator
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|write
parameter_list|(
name|ByteBuffer
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|src
operator|.
name|remaining
argument_list|()
decl_stmt|;
comment|//Down the semaphore or block until available
name|takeWriteResources
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ByteBuf
name|buf
init|=
name|allocator
operator|.
name|buffer
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|buf
operator|.
name|writeBytes
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|chc
operator|.
name|writeAndFlush
argument_list|(
name|buf
argument_list|)
operator|.
name|addListener
argument_list|(
name|writeListener
argument_list|)
expr_stmt|;
return|return
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
name|chc
operator|.
name|channel
argument_list|()
operator|.
name|isOpen
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Already closed: "
operator|+
name|id
argument_list|)
throw|;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
comment|//Block until all semaphore resources are released
comment|//by outstanding async writes
name|takeWriteResources
argument_list|(
name|maxPendingWrites
argument_list|)
expr_stmt|;
try|try
block|{
name|chc
operator|.
name|close
argument_list|()
operator|.
name|addListener
argument_list|(
name|closeListener
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|chc
operator|=
literal|null
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|takeWriteResources
parameter_list|(
name|int
name|numResources
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|writeResources
operator|.
name|acquire
argument_list|(
name|numResources
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted while waiting for write resources for "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

