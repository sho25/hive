begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|CacheTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|DagUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BaseWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Covers utility functions that are used by LLAP code and depend on Hive constructs e.g. ql code.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|LlapHiveUtils
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LlapHiveUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|LlapHiveUtils
parameter_list|()
block|{
comment|// Not to be used;
block|}
specifier|public
specifier|static
name|CacheTag
name|getDbAndTableNameForMetrics
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|includeParts
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
name|parts
parameter_list|)
block|{
assert|assert
operator|(
name|parts
operator|!=
literal|null
operator|)
assert|;
comment|// Look for PartitionDesc instance matching our Path
name|Path
name|parentPath
init|=
name|path
decl_stmt|;
name|PartitionDesc
name|part
init|=
name|parts
operator|.
name|get
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|parentPath
operator|.
name|isRoot
argument_list|()
operator|&&
name|part
operator|==
literal|null
condition|)
block|{
name|parentPath
operator|=
name|parentPath
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|part
operator|=
name|parts
operator|.
name|get
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
block|}
comment|// Fallback to legacy cache tag creation logic.
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
return|return
name|CacheTag
operator|.
name|build
argument_list|(
name|LlapUtil
operator|.
name|getDbAndTableNameForMetrics
argument_list|(
name|path
argument_list|,
name|includeParts
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|includeParts
operator|||
operator|!
name|part
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
return|return
name|CacheTag
operator|.
name|build
argument_list|(
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|CacheTag
operator|.
name|build
argument_list|(
name|part
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part
operator|.
name|getPartSpec
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns MapWork based what is serialized in the JobConf instance provided.    * @param job    * @return the MapWork instance. Might be null if missing.    * @throws HiveException    */
specifier|public
specifier|static
name|MapWork
name|findMapWork
parameter_list|(
name|JobConf
name|job
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|inputName
init|=
name|job
operator|.
name|get
argument_list|(
name|Utilities
operator|.
name|INPUT_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initializing for input "
operator|+
name|inputName
argument_list|)
expr_stmt|;
block|}
name|String
name|prefixes
init|=
name|job
operator|.
name|get
argument_list|(
name|DagUtils
operator|.
name|TEZ_MERGE_WORK_FILE_PREFIXES
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefixes
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|prefixes
argument_list|)
condition|)
block|{
comment|// Currently SMB is broken, so we cannot check if it's  compatible with IO elevator.
comment|// So, we don't use the below code that would get the correct MapWork. See HIVE-16985.
return|return
literal|null
return|;
block|}
name|BaseWork
name|work
init|=
literal|null
decl_stmt|;
comment|// HIVE-16985: try to find the fake merge work for SMB join, that is really another MapWork.
if|if
condition|(
name|inputName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|prefixes
operator|==
literal|null
operator|||
operator|!
name|Lists
operator|.
name|newArrayList
argument_list|(
name|prefixes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|inputName
argument_list|)
condition|)
block|{
name|inputName
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|inputName
operator|!=
literal|null
condition|)
block|{
name|work
operator|=
name|Utilities
operator|.
name|getMergeWork
argument_list|(
name|job
argument_list|,
name|inputName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|work
operator|instanceof
name|MapWork
operator|)
condition|)
block|{
name|work
operator|=
name|Utilities
operator|.
name|getMapWork
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|MapWork
operator|)
name|work
return|;
block|}
specifier|public
specifier|static
name|void
name|throwIfCacheOnlyRead
parameter_list|(
name|boolean
name|isCacheOnlyRead
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isCacheOnlyRead
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"LLAP cache miss happened while reading. Aborting query as cache only reading is set. "
operator|+
literal|"Set "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_IO_CACHE_ONLY
operator|.
name|varname
operator|+
literal|" to false and repeat query if this was unintended."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

