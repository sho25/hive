begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|LlapProxy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelInboundHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|DelimiterBasedFrameDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|Delimiters
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|string
operator|.
name|StringDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|string
operator|.
name|StringEncoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_comment
comment|/**  * Responsible for sending back result set data to the connections made by external clients via the LLAP input format.  */
end_comment

begin_class
specifier|public
class|class
name|LlapOutputFormatService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LlapOutputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicBoolean
name|initing
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|LlapOutputFormatService
name|INSTANCE
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RecordWriter
argument_list|>
name|writers
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|WAIT_TIME
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_QUERY_ID_LENGTH
init|=
literal|256
decl_stmt|;
specifier|private
name|EventLoopGroup
name|eventLoopGroup
decl_stmt|;
specifier|private
name|ServerBootstrap
name|serverBootstrap
decl_stmt|;
specifier|private
name|ChannelFuture
name|listeningChannelFuture
decl_stmt|;
specifier|private
name|int
name|port
decl_stmt|;
specifier|private
name|LlapOutputFormatService
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|writers
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RecordWriter
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|initializeAndStart
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|initing
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|INSTANCE
operator|=
operator|new
name|LlapOutputFormatService
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|INSTANCE
operator|.
name|start
argument_list|()
expr_stmt|;
name|started
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|LlapOutputFormatService
name|get
parameter_list|()
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|started
operator|.
name|get
argument_list|()
argument_list|,
literal|"LlapOutputFormatService must be started before invoking get"
argument_list|)
expr_stmt|;
return|return
name|INSTANCE
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting LlapOutputFormatService"
argument_list|)
expr_stmt|;
name|int
name|portFromConf
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_OUTPUT_SERVICE_PORT
argument_list|)
decl_stmt|;
name|eventLoopGroup
operator|=
operator|new
name|NioEventLoopGroup
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|=
operator|new
name|ServerBootstrap
argument_list|()
expr_stmt|;
name|serverBootstrap
operator|.
name|group
argument_list|(
name|eventLoopGroup
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|channel
argument_list|(
name|NioServerSocketChannel
operator|.
name|class
argument_list|)
expr_stmt|;
name|serverBootstrap
operator|.
name|childHandler
argument_list|(
operator|new
name|LlapOutputFormatServiceChannelHandler
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|listeningChannelFuture
operator|=
name|serverBootstrap
operator|.
name|bind
argument_list|(
name|portFromConf
argument_list|)
operator|.
name|sync
argument_list|()
expr_stmt|;
name|this
operator|.
name|port
operator|=
operator|(
operator|(
name|InetSocketAddress
operator|)
name|listeningChannelFuture
operator|.
name|channel
argument_list|()
operator|.
name|localAddress
argument_list|()
operator|)
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"LlapOutputFormatService: Binding to port "
operator|+
name|this
operator|.
name|port
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"LlapOutputFormatService: Error binding to port "
operator|+
name|portFromConf
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping LlapOutputFormatService"
argument_list|)
expr_stmt|;
if|if
condition|(
name|listeningChannelFuture
operator|!=
literal|null
condition|)
block|{
name|listeningChannelFuture
operator|.
name|channel
argument_list|()
operator|.
name|close
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
name|listeningChannelFuture
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"LlapOutputFormatService does not appear to have a listening port to close."
argument_list|)
expr_stmt|;
block|}
name|Future
name|terminationFuture
init|=
name|eventLoopGroup
operator|.
name|shutdownGracefully
argument_list|(
literal|1
argument_list|,
name|WAIT_TIME
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|terminationFuture
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getWriter
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|RecordWriter
name|writer
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|INSTANCE
init|)
block|{
while|while
condition|(
operator|(
name|writer
operator|=
name|writers
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for writer for: "
operator|+
name|id
argument_list|)
expr_stmt|;
name|INSTANCE
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning writer for: "
operator|+
name|id
argument_list|)
expr_stmt|;
return|return
name|writer
return|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
specifier|protected
class|class
name|LlapOutputFormatServiceHandler
extends|extends
name|SimpleChannelInboundHandler
argument_list|<
name|String
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|String
name|id
init|=
name|msg
decl_stmt|;
name|registerReader
argument_list|(
name|ctx
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerReader
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|String
name|id
parameter_list|)
block|{
synchronized|synchronized
init|(
name|INSTANCE
init|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"registering socket for: "
operator|+
name|id
argument_list|)
expr_stmt|;
name|int
name|bufSize
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
comment|// configable?
name|OutputStream
name|stream
init|=
operator|new
name|ChannelOutputStream
argument_list|(
name|ctx
argument_list|,
name|id
argument_list|,
name|bufSize
argument_list|)
decl_stmt|;
name|LlapRecordWriter
name|writer
init|=
operator|new
name|LlapRecordWriter
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|writers
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|writer
argument_list|)
expr_stmt|;
comment|// Add listener to handle any cleanup for when the connection is closed
name|ctx
operator|.
name|channel
argument_list|()
operator|.
name|closeFuture
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|LlapOutputFormatChannelCloseListener
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|INSTANCE
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
class|class
name|LlapOutputFormatChannelCloseListener
implements|implements
name|ChannelFutureListener
block|{
specifier|private
name|String
name|id
decl_stmt|;
name|LlapOutputFormatChannelCloseListener
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
name|RecordWriter
name|writer
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|INSTANCE
init|)
block|{
name|writer
operator|=
name|writers
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Did not find a writer for ID "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
class|class
name|LlapOutputFormatServiceChannelHandler
extends|extends
name|ChannelInitializer
argument_list|<
name|SocketChannel
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|initChannel
parameter_list|(
name|SocketChannel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|DelimiterBasedFrameDecoder
argument_list|(
name|MAX_QUERY_ID_LENGTH
argument_list|,
name|Delimiters
operator|.
name|nulDelimiter
argument_list|()
argument_list|)
argument_list|,
operator|new
name|StringDecoder
argument_list|()
argument_list|,
operator|new
name|StringEncoder
argument_list|()
argument_list|,
operator|new
name|LlapOutputFormatServiceHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

