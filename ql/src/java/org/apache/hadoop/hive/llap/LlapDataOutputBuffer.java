begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * A thread-not-safe version of Hadoop's DataOutputBuffer, which removes all  * synchronized modifiers.  */
end_comment

begin_class
specifier|public
class|class
name|LlapDataOutputBuffer
implements|implements
name|DataOutput
block|{
name|int
name|readOffset
decl_stmt|;
name|int
name|writeOffset
decl_stmt|;
name|byte
index|[]
name|buffer
decl_stmt|;
comment|/** Constructs a new empty buffer. */
specifier|public
name|LlapDataOutputBuffer
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|buffer
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns the current contents of the buffer. Data is only valid to    * {@link #getLength()}.    */
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|buffer
return|;
block|}
comment|/** Returns the length of the valid data currently in the buffer. */
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
operator|(
name|writeOffset
operator|-
name|readOffset
operator|)
operator|%
name|buffer
operator|.
name|length
return|;
block|}
comment|/** Resets the buffer to empty. */
specifier|public
name|LlapDataOutputBuffer
name|reset
parameter_list|()
block|{
name|readOffset
operator|=
literal|0
expr_stmt|;
name|writeOffset
operator|=
literal|0
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Writes bytes from a DataInput directly into the buffer. */
specifier|public
name|void
name|write
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
comment|//
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|readOffset
operator|==
name|writeOffset
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
name|buffer
index|[
name|writeOffset
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|writeOffset
operator|=
operator|(
name|writeOffset
operator|+
literal|1
operator|)
operator|%
name|buffer
operator|.
name|length
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
name|readOffset
operator|==
name|writeOffset
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
name|int
name|b
init|=
name|buffer
index|[
name|readOffset
index|]
decl_stmt|;
name|readOffset
operator|=
operator|(
name|readOffset
operator|+
literal|1
operator|)
operator|%
name|buffer
operator|.
name|length
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|len
operator|--
operator|!=
literal|0
condition|)
block|{
name|write
argument_list|(
name|b
index|[
name|off
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeBoolean
parameter_list|(
name|boolean
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|v
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeByte
parameter_list|(
name|int
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeChar
parameter_list|(
name|int
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeBytes
parameter_list|(
name|String
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|v
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|v
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeChars
parameter_list|(
name|String
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|v
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|v
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeDouble
parameter_list|(
name|double
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
operator|.
name|putDouble
argument_list|(
name|v
argument_list|)
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeFloat
parameter_list|(
name|float
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
operator|.
name|putFloat
argument_list|(
name|v
argument_list|)
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeInt
parameter_list|(
name|int
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|v
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|v
operator|>>>
literal|16
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|v
operator|>>>
literal|24
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeLong
parameter_list|(
name|long
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|v1
init|=
operator|(
name|int
operator|)
name|v
decl_stmt|;
name|int
name|v2
init|=
operator|(
name|int
operator|)
name|v
operator|>>>
literal|32
decl_stmt|;
name|write
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|v2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeShort
parameter_list|(
name|int
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|v
operator|>>>
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeUTF
parameter_list|(
name|String
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|v
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|v
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

