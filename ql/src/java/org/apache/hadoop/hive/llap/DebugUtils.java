begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional debugrmation  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|encoded
operator|.
name|EncodedReaderImpl
import|;
end_import

begin_comment
comment|/**  * A class that contains debug methods; also allows enabling the logging of various  * trace messages with low runtime cost, in order to investigate reproducible bugs.  */
end_comment

begin_class
specifier|public
class|class
name|DebugUtils
block|{
specifier|public
specifier|static
name|boolean
name|isTraceEnabled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|private
specifier|final
specifier|static
name|boolean
name|isTraceOrcEnabled
init|=
name|EncodedReaderImpl
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|isTraceOrcEnabled
parameter_list|()
block|{
return|return
name|isTraceOrcEnabled
return|;
comment|// TODO: temporary, should be hardcoded false
block|}
specifier|public
specifier|static
name|boolean
name|isTraceLockingEnabled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isTraceMttEnabled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isTraceCachingEnabled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|long
index|[]
name|a
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|offset
operator|+
name|len
condition|;
operator|++
name|i
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|a
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|byte
index|[]
name|a
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|offset
operator|+
name|len
condition|;
operator|++
name|i
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|a
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|boolean
index|[]
name|a
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|a
index|[
name|i
index|]
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

