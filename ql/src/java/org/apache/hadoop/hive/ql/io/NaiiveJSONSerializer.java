begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|HiveObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CompositeHiveObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PrimitiveHiveObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|utils
operator|.
name|ByteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_comment
comment|/**  * Serializes and deserializes Hive Objects as a delimited strings.  *  * Lots of code shamelessly copied from NaiiveSerializer.   **/
end_comment

begin_class
specifier|public
class|class
name|NaiiveJSONSerializer
implements|implements
name|HiveObjectSerializer
block|{
name|List
argument_list|<
name|SerDeField
argument_list|>
name|topLevelFields
decl_stmt|;
name|int
name|separator
init|=
name|Utilities
operator|.
name|ctrlaCode
decl_stmt|;
name|int
name|terminator
init|=
name|Utilities
operator|.
name|newLineCode
decl_stmt|;
name|long
name|writeErrorCount
init|=
literal|0
decl_stmt|,
name|readErrorCount
init|=
literal|0
decl_stmt|;
name|ByteStream
operator|.
name|Output
name|bos
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
name|int
name|width
init|=
operator|-
literal|1
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|slist
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|isPrimitive
decl_stmt|,
name|isTopLevel
init|=
literal|true
decl_stmt|;
specifier|private
name|void
name|setSeparator
parameter_list|(
name|int
name|separator
parameter_list|)
block|{
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
block|}
specifier|private
name|void
name|setTerminator
parameter_list|(
name|int
name|terminator
parameter_list|)
block|{
name|this
operator|.
name|terminator
operator|=
name|terminator
expr_stmt|;
block|}
specifier|private
name|void
name|setIsTopLevel
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|isTopLevel
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|NaiiveJSONSerializer
parameter_list|()
block|{}
specifier|public
name|void
name|initialize
parameter_list|(
name|Properties
name|p
parameter_list|)
block|{
name|String
name|separator
init|=
name|p
operator|.
name|getProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|separator
operator|!=
literal|null
condition|)
block|{
name|setSeparator
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|separator
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|HiveObject
name|ho
parameter_list|,
name|DataOutput
name|os
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|topLevelFields
operator|==
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|ho
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|topLevelFields
operator|=
name|HiveObject
operator|.
name|nlist
expr_stmt|;
name|isPrimitive
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|topLevelFields
operator|=
name|ho
operator|.
name|getFields
argument_list|()
expr_stmt|;
name|isPrimitive
operator|=
literal|false
expr_stmt|;
comment|//System.err.println("Naiive: Hive Object has "+topLevelFields.size()+" fields");
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot get Fields from HiveObject"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|isPrimitive
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|ho
operator|.
name|getJavaObject
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|SerDeField
name|onef
range|:
name|topLevelFields
control|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|HiveObject
name|nho
init|=
name|ho
operator|.
name|get
argument_list|(
name|onef
argument_list|)
decl_stmt|;
if|if
condition|(
name|nho
operator|==
literal|null
condition|)
continue|continue;
name|os
operator|.
name|write
argument_list|(
name|nho
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isTopLevel
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|writeErrorCount
operator|++
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|String
name|NSTR
init|=
literal|""
decl_stmt|;
specifier|private
specifier|static
enum|enum
name|streamStatus
block|{
name|EOF
block|,
name|TERMINATED
block|,
name|NORMAL
block|}
specifier|public
name|HiveObject
name|deserialize
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|more
init|=
literal|true
decl_stmt|;
name|CompositeHiveObject
name|nr
init|=
literal|null
decl_stmt|;
name|int
name|entries
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|width
operator|!=
operator|-
literal|1
condition|)
block|{
name|nr
operator|=
operator|new
name|CompositeHiveObject
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|slist
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|do
block|{
name|bos
operator|.
name|reset
argument_list|()
expr_stmt|;
name|streamStatus
name|ss
init|=
name|readColumn
argument_list|(
name|in
argument_list|,
name|bos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ss
operator|==
name|streamStatus
operator|.
name|EOF
operator|)
operator|||
operator|(
name|ss
operator|==
name|streamStatus
operator|.
name|TERMINATED
operator|)
condition|)
block|{
comment|// read off entire row/file
name|more
operator|=
literal|false
expr_stmt|;
block|}
name|entries
operator|++
expr_stmt|;
name|String
name|col
decl_stmt|;
if|if
condition|(
name|bos
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|col
operator|=
operator|new
name|String
argument_list|(
name|bos
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bos
operator|.
name|getCount
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|col
operator|=
name|NSTR
expr_stmt|;
block|}
if|if
condition|(
name|width
operator|==
operator|-
literal|1
condition|)
block|{
name|slist
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|entries
operator|<=
name|width
condition|)
block|{
try|try
block|{
name|nr
operator|.
name|addHiveObject
argument_list|(
operator|new
name|PrimitiveHiveObject
argument_list|(
name|col
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
do|while
condition|(
name|more
condition|)
do|;
if|if
condition|(
name|width
operator|==
operator|-
literal|1
condition|)
block|{
name|width
operator|=
name|entries
expr_stmt|;
name|nr
operator|=
operator|new
name|CompositeHiveObject
argument_list|(
name|width
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|col
range|:
name|slist
control|)
block|{
try|try
block|{
name|nr
operator|.
name|addHiveObject
argument_list|(
operator|new
name|PrimitiveHiveObject
argument_list|(
name|col
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
operator|(
name|nr
operator|)
return|;
block|}
if|if
condition|(
name|width
operator|>
name|entries
condition|)
block|{
comment|// skip and move on ..
name|readErrorCount
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|nr
return|;
block|}
block|}
specifier|public
name|long
name|getReadErrorCount
parameter_list|()
block|{
return|return
name|readErrorCount
return|;
block|}
specifier|public
name|long
name|getWriteErrorCount
parameter_list|()
block|{
return|return
name|writeErrorCount
return|;
block|}
specifier|private
name|streamStatus
name|readColumn
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|b
decl_stmt|;
try|try
block|{
name|b
operator|=
operator|(
name|int
operator|)
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
return|return
name|streamStatus
operator|.
name|EOF
return|;
block|}
if|if
condition|(
name|b
operator|==
name|terminator
condition|)
block|{
return|return
name|streamStatus
operator|.
name|TERMINATED
return|;
block|}
if|if
condition|(
name|b
operator|==
name|separator
condition|)
block|{
return|return
name|streamStatus
operator|.
name|NORMAL
return|;
block|}
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
comment|// Unreachable
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|b1
parameter_list|,
name|int
name|s1
parameter_list|,
name|int
name|l1
parameter_list|,
name|byte
index|[]
name|b2
parameter_list|,
name|int
name|s2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
comment|// Since all data is strings - we just use lexicographic ordering
return|return
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|b1
argument_list|,
name|s1
argument_list|,
name|l2
argument_list|,
name|b2
argument_list|,
name|s2
argument_list|,
name|l2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

