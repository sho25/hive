begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * GenericUDTFParseUrlTuple: this  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"parse_url_tuple"
argument_list|,
name|value
operator|=
literal|"_FUNC_(url, partname1, partname2, ..., partnameN) - extracts N (N>=1) parts from a URL.\n"
operator|+
literal|"It takes a URL and one or multiple partnames, and returns a tuple. "
operator|+
literal|"All the input parameters and output column types are string."
argument_list|,
name|extended
operator|=
literal|"Partname: HOST, PATH, QUERY, REF, PROTOCOL, AUTHORITY, FILE, USERINFO, QUERY:<KEY_NAME>\n"
operator|+
literal|"Note: Partnames are case-sensitive, and should not contain unnecessary white spaces.\n"
operator|+
literal|"Example:\n"
operator|+
literal|"> SELECT b.* FROM src LATERAL VIEW _FUNC_(fullurl, 'HOST', 'PATH', 'QUERY', 'QUERY:id') "
operator|+
literal|"b as host, path, query, query_id LIMIT 1;\n"
operator|+
literal|"> SELECT _FUNC_(a.fullurl, 'HOST', 'PATH', 'QUERY', 'REF', 'PROTOCOL', 'FILE', "
operator|+
literal|" 'AUTHORITY', 'USERINFO', 'QUERY:k1') as (ho, pa, qu, re, pr, fi, au, us, qk1) from src a;"
argument_list|)
specifier|public
class|class
name|GenericUDTFParseUrlTuple
extends|extends
name|GenericUDTF
block|{
enum|enum
name|PARTNAME
block|{
name|HOST
block|,
name|PATH
block|,
name|QUERY
block|,
name|REF
block|,
name|PROTOCOL
block|,
name|AUTHORITY
block|,
name|FILE
block|,
name|USERINFO
block|,
name|QUERY_WITH_KEY
block|,
name|NULLNAME
block|}
empty_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GenericUDTFParseUrlTuple
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numCols
decl_stmt|;
comment|// number of output columns
name|String
index|[]
name|paths
decl_stmt|;
comment|// array of pathnames, each of which corresponds to a column
name|PARTNAME
index|[]
name|partnames
decl_stmt|;
comment|// mapping from pathnames to enum PARTNAME
name|Text
index|[]
name|retCols
decl_stmt|;
comment|// array of returned column values
name|Text
index|[]
name|cols
decl_stmt|;
comment|// object pool of non-null Text, avoid creating objects all the time
specifier|private
specifier|transient
name|Object
index|[]
name|nullCols
decl_stmt|;
comment|// array of null column values
specifier|private
specifier|transient
name|ObjectInspector
index|[]
name|inputOIs
decl_stmt|;
comment|// input ObjectInspectors
name|boolean
name|pathParsed
init|=
literal|false
decl_stmt|;
name|boolean
name|seenErrors
init|=
literal|false
decl_stmt|;
specifier|private
specifier|transient
name|URL
name|url
init|=
literal|null
decl_stmt|;
specifier|private
specifier|transient
name|Pattern
name|p
init|=
literal|null
decl_stmt|;
specifier|private
specifier|transient
name|String
name|lastKey
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|HiveException
block|{   }
annotation|@
name|Override
specifier|public
name|StructObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|args
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|inputOIs
operator|=
name|args
expr_stmt|;
name|numCols
operator|=
name|args
operator|.
name|length
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|numCols
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"parse_url_tuple() takes at least two arguments: "
operator|+
literal|"the url string and a part name"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
operator|||
operator|!
name|args
index|[
name|i
index|]
operator|.
name|getTypeName
argument_list|()
operator|.
name|equals
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"parse_url_tuple()'s arguments have to be string type"
argument_list|)
throw|;
block|}
block|}
name|seenErrors
operator|=
literal|false
expr_stmt|;
name|pathParsed
operator|=
literal|false
expr_stmt|;
name|url
operator|=
literal|null
expr_stmt|;
name|p
operator|=
literal|null
expr_stmt|;
name|lastKey
operator|=
literal|null
expr_stmt|;
name|paths
operator|=
operator|new
name|String
index|[
name|numCols
index|]
expr_stmt|;
name|partnames
operator|=
operator|new
name|PARTNAME
index|[
name|numCols
index|]
expr_stmt|;
name|cols
operator|=
operator|new
name|Text
index|[
name|numCols
index|]
expr_stmt|;
name|retCols
operator|=
operator|new
name|Text
index|[
name|numCols
index|]
expr_stmt|;
name|nullCols
operator|=
operator|new
name|Object
index|[
name|numCols
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
operator|++
name|i
control|)
block|{
name|cols
index|[
name|i
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|retCols
index|[
name|i
index|]
operator|=
name|cols
index|[
name|i
index|]
expr_stmt|;
name|nullCols
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
comment|// construct output object inspector
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|numCols
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldOIs
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|numCols
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
operator|++
name|i
control|)
block|{
comment|// column name can be anything since it will be named by UDTF as clause
name|fieldNames
operator|.
name|add
argument_list|(
literal|"c"
operator|+
name|i
argument_list|)
expr_stmt|;
comment|// all returned type will be Text
name|fieldOIs
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
block|}
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldOIs
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
index|[]
name|o
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|o
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|forward
argument_list|(
name|nullCols
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// get the path names for the 1st row only
if|if
condition|(
operator|!
name|pathParsed
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
operator|++
name|i
control|)
block|{
name|paths
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|StringObjectInspector
operator|)
name|inputOIs
index|[
name|i
operator|+
literal|1
index|]
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|paths
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|partnames
index|[
name|i
index|]
operator|=
name|PARTNAME
operator|.
name|NULLNAME
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|paths
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"HOST"
argument_list|)
condition|)
block|{
name|partnames
index|[
name|i
index|]
operator|=
name|PARTNAME
operator|.
name|HOST
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|paths
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"PATH"
argument_list|)
condition|)
block|{
name|partnames
index|[
name|i
index|]
operator|=
name|PARTNAME
operator|.
name|PATH
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|paths
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"QUERY"
argument_list|)
condition|)
block|{
name|partnames
index|[
name|i
index|]
operator|=
name|PARTNAME
operator|.
name|QUERY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|paths
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"REF"
argument_list|)
condition|)
block|{
name|partnames
index|[
name|i
index|]
operator|=
name|PARTNAME
operator|.
name|REF
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|paths
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"PROTOCOL"
argument_list|)
condition|)
block|{
name|partnames
index|[
name|i
index|]
operator|=
name|PARTNAME
operator|.
name|PROTOCOL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|paths
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"FILE"
argument_list|)
condition|)
block|{
name|partnames
index|[
name|i
index|]
operator|=
name|PARTNAME
operator|.
name|FILE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|paths
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"AUTHORITY"
argument_list|)
condition|)
block|{
name|partnames
index|[
name|i
index|]
operator|=
name|PARTNAME
operator|.
name|AUTHORITY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|paths
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"USERINFO"
argument_list|)
condition|)
block|{
name|partnames
index|[
name|i
index|]
operator|=
name|PARTNAME
operator|.
name|USERINFO
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|paths
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"QUERY:"
argument_list|)
condition|)
block|{
name|partnames
index|[
name|i
index|]
operator|=
name|PARTNAME
operator|.
name|QUERY_WITH_KEY
expr_stmt|;
name|paths
index|[
name|i
index|]
operator|=
name|paths
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
expr_stmt|;
comment|// update paths[i], e.g., from "QUERY:id" to "id"
block|}
else|else
block|{
name|partnames
index|[
name|i
index|]
operator|=
name|PARTNAME
operator|.
name|NULLNAME
expr_stmt|;
block|}
block|}
name|pathParsed
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|urlStr
init|=
operator|(
operator|(
name|StringObjectInspector
operator|)
name|inputOIs
index|[
literal|0
index|]
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|urlStr
operator|==
literal|null
condition|)
block|{
name|forward
argument_list|(
name|nullCols
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|String
name|ret
init|=
literal|null
decl_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|urlStr
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
operator|++
name|i
control|)
block|{
name|ret
operator|=
name|evaluate
argument_list|(
name|url
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
name|retCols
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|retCols
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|retCols
index|[
name|i
index|]
operator|=
name|cols
index|[
name|i
index|]
expr_stmt|;
comment|// use the object pool rather than creating a new object
block|}
name|retCols
index|[
name|i
index|]
operator|.
name|set
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
name|forward
argument_list|(
name|retCols
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// parsing error, invalid url string
if|if
condition|(
operator|!
name|seenErrors
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The input is not a valid url string: "
operator|+
name|urlStr
operator|+
literal|". Skipping such error messages in the future."
argument_list|)
expr_stmt|;
name|seenErrors
operator|=
literal|true
expr_stmt|;
block|}
name|forward
argument_list|(
name|nullCols
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"parse_url_tuple"
return|;
block|}
specifier|private
name|String
name|evaluate
parameter_list|(
name|URL
name|url
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|url
operator|==
literal|null
operator|||
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|partnames
operator|.
name|length
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|partnames
index|[
name|index
index|]
condition|)
block|{
case|case
name|HOST
case|:
return|return
name|url
operator|.
name|getHost
argument_list|()
return|;
case|case
name|PATH
case|:
return|return
name|url
operator|.
name|getPath
argument_list|()
return|;
case|case
name|QUERY
case|:
return|return
name|url
operator|.
name|getQuery
argument_list|()
return|;
case|case
name|REF
case|:
return|return
name|url
operator|.
name|getRef
argument_list|()
return|;
case|case
name|PROTOCOL
case|:
return|return
name|url
operator|.
name|getProtocol
argument_list|()
return|;
case|case
name|FILE
case|:
return|return
name|url
operator|.
name|getFile
argument_list|()
return|;
case|case
name|AUTHORITY
case|:
return|return
name|url
operator|.
name|getAuthority
argument_list|()
return|;
case|case
name|USERINFO
case|:
return|return
name|url
operator|.
name|getUserInfo
argument_list|()
return|;
case|case
name|QUERY_WITH_KEY
case|:
return|return
name|evaluateQuery
argument_list|(
name|url
operator|.
name|getQuery
argument_list|()
argument_list|,
name|paths
index|[
name|index
index|]
argument_list|)
return|;
case|case
name|NULLNAME
case|:
default|default            :
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|String
name|evaluateQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|query
operator|==
literal|null
operator|||
name|key
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|key
operator|.
name|equals
argument_list|(
name|lastKey
argument_list|)
condition|)
block|{
name|p
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(&|^)"
operator|+
name|key
operator|+
literal|"=([^&]*)"
argument_list|)
expr_stmt|;
block|}
name|lastKey
operator|=
name|key
expr_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

