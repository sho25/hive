begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * JDBM LICENSE v1.00  *  * Redistribution and use of this software and associated documentation  * ("Software"), with or without modification, are permitted provided  * that the following conditions are met:  *  * 1. Redistributions of source code must retain copyright  *    statements and notices.  Redistributions must also contain a  *    copy of this document.  *  * 2. Redistributions in binary form must reproduce the  *    above copyright notice, this list of conditions and the  *    following disclaimer in the documentation and/or other  *    materials provided with the distribution.  *  * 3. The name "JDBM" must not be used to endorse or promote  *    products derived from this Software without prior written  *    permission of Cees de Groot.  For written permission,  *    please contact cg@cdegroot.com.  *  * 4. Products derived from this Software may not be called "JDBM"  *    nor may "JDBM" appear in their names without prior written  *    permission of Cees de Groot.  *  * 5. Due credit should be given to the JDBM Project  *    (http://jdbm.sourceforge.net/).  *  * THIS SOFTWARE IS PROVIDED BY THE JDBM PROJECT AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL  * CEES DE GROOT OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  *  * Copyright 2000 (C) Cees de Groot. All Rights Reserved.  * Contributions are (C) Copyright 2000 by their associated contributors.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|htree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|RecordManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|helper
operator|.
name|FastIterator
import|;
end_import

begin_comment
comment|/**  * Persistent hashtable implementation for PageManager. Implemented as an H*Tree  * structure.  *   * WARNING! If this instance is used in a transactional context, it *must* be  * discarded after a rollback.  *   * @author<a href="mailto:boisvert@intalio.com">Alex Boisvert</a>  * @version $Id: HTree.java,v 1.3 2005/06/25 23:12:32 doomdark Exp $  */
end_comment

begin_class
specifier|public
class|class
name|HTree
block|{
comment|/**    * Root hash directory.    */
specifier|private
specifier|final
name|HashDirectory
name|_root
decl_stmt|;
comment|/**    * Private constructor    *     * @param root    *          Root hash directory.    */
specifier|private
name|HTree
parameter_list|(
name|HashDirectory
name|root
parameter_list|)
block|{
name|_root
operator|=
name|root
expr_stmt|;
block|}
comment|/**    * Create a persistent hashtable.    *     * @param recman    *          Record manager used for persistence.    */
specifier|public
specifier|static
name|HTree
name|createInstance
parameter_list|(
name|RecordManager
name|recman
parameter_list|)
throws|throws
name|IOException
block|{
name|HashDirectory
name|root
decl_stmt|;
name|long
name|recid
decl_stmt|;
name|root
operator|=
operator|new
name|HashDirectory
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|recid
operator|=
name|recman
operator|.
name|insert
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|root
operator|.
name|setPersistenceContext
argument_list|(
name|recman
argument_list|,
name|recid
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTree
argument_list|(
name|root
argument_list|)
return|;
block|}
comment|/**    * Load a persistent hashtable    *     * @param recman    *          RecordManager used to store the persistent hashtable    * @param root_recid    *          Record id of the root directory of the HTree    */
specifier|public
specifier|static
name|HTree
name|load
parameter_list|(
name|RecordManager
name|recman
parameter_list|,
name|long
name|root_recid
parameter_list|)
throws|throws
name|IOException
block|{
name|HTree
name|tree
decl_stmt|;
name|HashDirectory
name|root
decl_stmt|;
name|root
operator|=
operator|(
name|HashDirectory
operator|)
name|recman
operator|.
name|fetch
argument_list|(
name|root_recid
argument_list|)
expr_stmt|;
name|root
operator|.
name|setPersistenceContext
argument_list|(
name|recman
argument_list|,
name|root_recid
argument_list|)
expr_stmt|;
name|tree
operator|=
operator|new
name|HTree
argument_list|(
name|root
argument_list|)
expr_stmt|;
return|return
name|tree
return|;
block|}
comment|/**    * Associates the specified value with the specified key.    *     * @param key    *          key with which the specified value is to be assocated.    * @param value    *          value to be associated with the specified key.    */
specifier|public
specifier|synchronized
name|void
name|put
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|_root
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the value which is associated with the given key. Returns    *<code>null</code> if there is not association for this key.    *     * @param key    *          key whose associated value is to be returned    */
specifier|public
specifier|synchronized
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|_root
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Remove the value which is associated with the given key. If the key does    * not exist, this method simply ignores the operation.    *     * @param key    *          key whose associated value is to be removed    */
specifier|public
specifier|synchronized
name|void
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|_root
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns an enumeration of the keys contained in this    */
specifier|public
specifier|synchronized
name|FastIterator
name|keys
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|_root
operator|.
name|keys
argument_list|()
return|;
block|}
comment|/**    * Returns an enumeration of the values contained in this    */
specifier|public
specifier|synchronized
name|FastIterator
name|values
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|_root
operator|.
name|values
argument_list|()
return|;
block|}
comment|/**    * Get the record identifier used to load this hashtable.    */
specifier|public
name|long
name|getRecid
parameter_list|()
block|{
return|return
name|_root
operator|.
name|getRecid
argument_list|()
return|;
block|}
block|}
end_class

end_unit

