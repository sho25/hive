begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_comment
comment|/**  * VectorGroupByAggregrationInfo.  *  * A convenience data structure that has information needed to vectorize reduce sink.  *  * It is created by the Vectorizer when it is determining whether it can specialize so the  * information doesn't have to be recreated again and against by the VectorPTFOperator's  * constructors and later during execution.  */
end_comment

begin_class
specifier|public
class|class
name|VectorPTFInfo
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
index|[]
name|outputColumnMap
decl_stmt|;
specifier|private
name|int
index|[]
name|orderColumnMap
decl_stmt|;
specifier|private
name|Type
index|[]
name|orderColumnVectorTypes
decl_stmt|;
specifier|private
name|VectorExpression
index|[]
name|orderExpressions
decl_stmt|;
specifier|private
name|int
index|[]
name|partitionColumnMap
decl_stmt|;
specifier|private
name|Type
index|[]
name|partitionColumnVectorTypes
decl_stmt|;
specifier|private
name|VectorExpression
index|[]
name|partitionExpressions
decl_stmt|;
specifier|private
name|VectorExpression
index|[]
name|evaluatorInputExpressions
decl_stmt|;
specifier|private
name|Type
index|[]
name|evaluatorInputColumnVectorTypes
decl_stmt|;
specifier|private
name|int
index|[]
name|keyInputColumnMap
decl_stmt|;
specifier|private
name|int
index|[]
name|nonKeyInputColumnMap
decl_stmt|;
specifier|public
name|VectorPTFInfo
parameter_list|()
block|{
name|outputColumnMap
operator|=
literal|null
expr_stmt|;
name|orderColumnMap
operator|=
literal|null
expr_stmt|;
name|orderColumnVectorTypes
operator|=
literal|null
expr_stmt|;
name|orderExpressions
operator|=
literal|null
expr_stmt|;
name|partitionColumnMap
operator|=
literal|null
expr_stmt|;
name|partitionColumnVectorTypes
operator|=
literal|null
expr_stmt|;
name|partitionExpressions
operator|=
literal|null
expr_stmt|;
name|evaluatorInputExpressions
operator|=
literal|null
expr_stmt|;
name|evaluatorInputColumnVectorTypes
operator|=
literal|null
expr_stmt|;
name|keyInputColumnMap
operator|=
literal|null
expr_stmt|;
name|nonKeyInputColumnMap
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
index|[]
name|getOutputColumnMap
parameter_list|()
block|{
return|return
name|outputColumnMap
return|;
block|}
specifier|public
name|void
name|setOutputColumnMap
parameter_list|(
name|int
index|[]
name|outputColumnMap
parameter_list|)
block|{
name|this
operator|.
name|outputColumnMap
operator|=
name|outputColumnMap
expr_stmt|;
block|}
specifier|public
name|int
index|[]
name|getOrderColumnMap
parameter_list|()
block|{
return|return
name|orderColumnMap
return|;
block|}
specifier|public
name|void
name|setOrderColumnMap
parameter_list|(
name|int
index|[]
name|orderColumnMap
parameter_list|)
block|{
name|this
operator|.
name|orderColumnMap
operator|=
name|orderColumnMap
expr_stmt|;
block|}
specifier|public
name|Type
index|[]
name|getOrderColumnVectorTypes
parameter_list|()
block|{
return|return
name|orderColumnVectorTypes
return|;
block|}
specifier|public
name|void
name|setOrderColumnVectorTypes
parameter_list|(
name|Type
index|[]
name|orderColumnVectorTypes
parameter_list|)
block|{
name|this
operator|.
name|orderColumnVectorTypes
operator|=
name|orderColumnVectorTypes
expr_stmt|;
block|}
specifier|public
name|VectorExpression
index|[]
name|getOrderExpressions
parameter_list|()
block|{
return|return
name|orderExpressions
return|;
block|}
specifier|public
name|void
name|setOrderExpressions
parameter_list|(
name|VectorExpression
index|[]
name|orderExpressions
parameter_list|)
block|{
name|this
operator|.
name|orderExpressions
operator|=
name|orderExpressions
expr_stmt|;
block|}
specifier|public
name|int
index|[]
name|getPartitionColumnMap
parameter_list|()
block|{
return|return
name|partitionColumnMap
return|;
block|}
specifier|public
name|void
name|setPartitionColumnMap
parameter_list|(
name|int
index|[]
name|partitionColumnMap
parameter_list|)
block|{
name|this
operator|.
name|partitionColumnMap
operator|=
name|partitionColumnMap
expr_stmt|;
block|}
specifier|public
name|Type
index|[]
name|getPartitionColumnVectorTypes
parameter_list|()
block|{
return|return
name|partitionColumnVectorTypes
return|;
block|}
specifier|public
name|void
name|setPartitionColumnVectorTypes
parameter_list|(
name|Type
index|[]
name|partitionColumnVectorTypes
parameter_list|)
block|{
name|this
operator|.
name|partitionColumnVectorTypes
operator|=
name|partitionColumnVectorTypes
expr_stmt|;
block|}
specifier|public
name|VectorExpression
index|[]
name|getPartitionExpressions
parameter_list|()
block|{
return|return
name|partitionExpressions
return|;
block|}
specifier|public
name|void
name|setPartitionExpressions
parameter_list|(
name|VectorExpression
index|[]
name|partitionExpressions
parameter_list|)
block|{
name|this
operator|.
name|partitionExpressions
operator|=
name|partitionExpressions
expr_stmt|;
block|}
specifier|public
name|VectorExpression
index|[]
name|getEvaluatorInputExpressions
parameter_list|()
block|{
return|return
name|evaluatorInputExpressions
return|;
block|}
specifier|public
name|void
name|setEvaluatorInputExpressions
parameter_list|(
name|VectorExpression
index|[]
name|evaluatorInputExpressions
parameter_list|)
block|{
name|this
operator|.
name|evaluatorInputExpressions
operator|=
name|evaluatorInputExpressions
expr_stmt|;
block|}
specifier|public
name|Type
index|[]
name|getEvaluatorInputColumnVectorTypes
parameter_list|()
block|{
return|return
name|evaluatorInputColumnVectorTypes
return|;
block|}
specifier|public
name|void
name|setEvaluatorInputColumnVectorTypes
parameter_list|(
name|Type
index|[]
name|evaluatorInputColumnVectorTypes
parameter_list|)
block|{
name|this
operator|.
name|evaluatorInputColumnVectorTypes
operator|=
name|evaluatorInputColumnVectorTypes
expr_stmt|;
block|}
specifier|public
name|int
index|[]
name|getKeyInputColumnMap
parameter_list|()
block|{
return|return
name|keyInputColumnMap
return|;
block|}
specifier|public
name|void
name|setKeyInputColumnMap
parameter_list|(
name|int
index|[]
name|keyInputColumnMap
parameter_list|)
block|{
name|this
operator|.
name|keyInputColumnMap
operator|=
name|keyInputColumnMap
expr_stmt|;
block|}
specifier|public
name|int
index|[]
name|getNonKeyInputColumnMap
parameter_list|()
block|{
return|return
name|nonKeyInputColumnMap
return|;
block|}
specifier|public
name|void
name|setNonKeyInputColumnMap
parameter_list|(
name|int
index|[]
name|nonKeyInputColumnMap
parameter_list|)
block|{
name|this
operator|.
name|nonKeyInputColumnMap
operator|=
name|nonKeyInputColumnMap
expr_stmt|;
block|}
block|}
end_class

end_unit

