begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * UDFSha.  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"sha1,sha"
argument_list|,
name|value
operator|=
literal|"_FUNC_(str or bin) - Calculates the SHA-1 digest for string or binary "
operator|+
literal|"and returns the value as a hex string."
argument_list|,
name|extended
operator|=
literal|"Example:\n"
operator|+
literal|"> SELECT _FUNC_('ABC');\n"
operator|+
literal|"  '3c01bdbb26f358bab27f267924aa2c9a03fcfdb8'\n"
operator|+
literal|"> SELECT _FUNC_(binary('ABC'));\n"
operator|+
literal|"  '3c01bdbb26f358bab27f267924aa2c9a03fcfdb8'"
argument_list|)
specifier|public
class|class
name|UDFSha1
extends|extends
name|UDF
block|{
specifier|private
specifier|final
name|Text
name|result
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MessageDigest
name|digest
decl_stmt|;
specifier|public
name|UDFSha1
parameter_list|()
block|{
try|try
block|{
name|digest
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert String to SHA-1    */
specifier|public
name|Text
name|evaluate
parameter_list|(
name|Text
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|digest
operator|.
name|reset
argument_list|()
expr_stmt|;
name|digest
operator|.
name|update
argument_list|(
name|n
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|n
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|shaBytes
init|=
name|digest
operator|.
name|digest
argument_list|()
decl_stmt|;
name|String
name|shaHex
init|=
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|shaBytes
argument_list|)
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|shaHex
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Convert bytes to SHA-1    */
specifier|public
name|Text
name|evaluate
parameter_list|(
name|BytesWritable
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|digest
operator|.
name|reset
argument_list|()
expr_stmt|;
name|digest
operator|.
name|update
argument_list|(
name|b
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|shaBytes
init|=
name|digest
operator|.
name|digest
argument_list|()
decl_stmt|;
name|String
name|shaHex
init|=
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|shaBytes
argument_list|)
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|shaHex
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

