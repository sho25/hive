begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_class
specifier|public
class|class
name|StorageFormatFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StorageFormatFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|StorageFormatDescriptor
argument_list|>
name|storageFormats
decl_stmt|;
specifier|public
name|StorageFormatFactory
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|StorageFormatDescriptor
argument_list|>
name|localStorageFormats
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|StorageFormatDescriptor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageFormatDescriptor
name|descriptor
range|:
name|ServiceLoader
operator|.
name|load
argument_list|(
name|StorageFormatDescriptor
operator|.
name|class
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|name
range|:
name|descriptor
operator|.
name|getNames
argument_list|()
control|)
block|{
name|name
operator|=
name|name
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
name|StorageFormatDescriptor
name|oldDescriptor
init|=
name|localStorageFormats
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|descriptor
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDescriptor
operator|!=
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Storage Format Descriptor conflict at name '"
operator|+
name|name
operator|+
literal|"', "
operator|+
literal|"the descriptor "
operator|+
name|descriptor
operator|+
literal|" is overriding "
operator|+
name|oldDescriptor
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|storageFormats
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|localStorageFormats
argument_list|)
expr_stmt|;
block|}
specifier|public
annotation|@
name|Nullable
name|StorageFormatDescriptor
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|name
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
return|return
name|storageFormats
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

