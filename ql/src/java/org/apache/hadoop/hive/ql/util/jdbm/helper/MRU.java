begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * JDBM LICENSE v1.00  *  * Redistribution and use of this software and associated documentation  * ("Software"), with or without modification, are permitted provided  * that the following conditions are met:  *  * 1. Redistributions of source code must retain copyright  *    statements and notices.  Redistributions must also contain a  *    copy of this document.  *  * 2. Redistributions in binary form must reproduce the  *    above copyright notice, this list of conditions and the  *    following disclaimer in the documentation and/or other  *    materials provided with the distribution.  *  * 3. The name "JDBM" must not be used to endorse or promote  *    products derived from this Software without prior written  *    permission of Cees de Groot.  For written permission,  *    please contact cg@cdegroot.com.  *  * 4. Products derived from this Software may not be called "JDBM"  *    nor may "JDBM" appear in their names without prior written  *    permission of Cees de Groot.  *  * 5. Due credit should be given to the JDBM Project  *    (http://jdbm.sourceforge.net/).  *  * THIS SOFTWARE IS PROVIDED BY THE JDBM PROJECT AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL  * CEES DE GROOT OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  *  * Copyright 2000 (C) Cees de Groot. All Rights Reserved.  * Contributions are Copyright (C) 2000 by their associated contributors.  *  * $Id: MRU.java,v 1.8 2005/06/25 23:12:31 doomdark Exp $  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_comment
comment|/**  * MRU - Most Recently Used cache policy.  *   * Methods are *not* synchronized, so no concurrent access is allowed.  *   * @author<a href="mailto:boisvert@intalio.com">Alex Boisvert</a>  * @version $Id: MRU.java,v 1.8 2005/06/25 23:12:31 doomdark Exp $  */
end_comment

begin_class
specifier|public
class|class
name|MRU
implements|implements
name|CachePolicy
block|{
comment|/** Cached object hashtable */
name|Hashtable
name|_hash
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
comment|/**    * Maximum number of objects in the cache.    */
name|int
name|_max
decl_stmt|;
comment|/**    * Beginning of linked-list of cache elements. First entry is element which    * has been used least recently.    */
name|CacheEntry
name|_first
decl_stmt|;
comment|/**    * End of linked-list of cache elements. Last entry is element which has been    * used most recently.    */
name|CacheEntry
name|_last
decl_stmt|;
comment|/**    * Cache eviction listeners    */
name|Vector
name|listeners
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
comment|/**    * Construct an MRU with a given maximum number of objects.    */
specifier|public
name|MRU
parameter_list|(
name|int
name|max
parameter_list|)
block|{
if|if
condition|(
name|max
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"MRU cache must contain at least one entry"
argument_list|)
throw|;
block|}
name|_max
operator|=
name|max
expr_stmt|;
block|}
comment|/**    * Place an object in the cache.    */
specifier|public
name|void
name|put
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|CacheEvictionException
block|{
name|CacheEntry
name|entry
init|=
operator|(
name|CacheEntry
operator|)
name|_hash
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|touchEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_hash
operator|.
name|size
argument_list|()
operator|==
name|_max
condition|)
block|{
comment|// purge and recycle entry
name|entry
operator|=
name|purgeEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|=
operator|new
name|CacheEntry
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|addEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|_hash
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Obtain an object in the cache    */
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|CacheEntry
name|entry
init|=
operator|(
name|CacheEntry
operator|)
name|_hash
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|touchEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Remove an object from the cache    */
specifier|public
name|void
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|CacheEntry
name|entry
init|=
operator|(
name|CacheEntry
operator|)
name|_hash
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|_hash
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Remove all objects from the cache    */
specifier|public
name|void
name|removeAll
parameter_list|()
block|{
name|_hash
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|_first
operator|=
literal|null
expr_stmt|;
name|_last
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Enumerate elements' values in the cache    */
specifier|public
name|Enumeration
name|elements
parameter_list|()
block|{
return|return
operator|new
name|MRUEnumeration
argument_list|(
name|_hash
operator|.
name|elements
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Add a listener to this cache policy    *     * @param listener    *          Listener to add to this policy    */
specifier|public
name|void
name|addListener
parameter_list|(
name|CachePolicyListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot add null listener."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|listeners
operator|.
name|contains
argument_list|(
name|listener
argument_list|)
condition|)
block|{
name|listeners
operator|.
name|addElement
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Remove a listener from this cache policy    *     * @param listener    *          Listener to remove from this policy    */
specifier|public
name|void
name|removeListener
parameter_list|(
name|CachePolicyListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|removeElement
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a CacheEntry. Entry goes at the end of the list.    */
specifier|protected
name|void
name|addEntry
parameter_list|(
name|CacheEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|_first
operator|==
literal|null
condition|)
block|{
name|_first
operator|=
name|entry
expr_stmt|;
name|_last
operator|=
name|entry
expr_stmt|;
block|}
else|else
block|{
name|_last
operator|.
name|setNext
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setPrevious
argument_list|(
name|_last
argument_list|)
expr_stmt|;
name|_last
operator|=
name|entry
expr_stmt|;
block|}
block|}
comment|/**    * Remove a CacheEntry from linked list    */
specifier|protected
name|void
name|removeEntry
parameter_list|(
name|CacheEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|==
name|_first
condition|)
block|{
name|_first
operator|=
name|entry
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|_last
operator|==
name|entry
condition|)
block|{
name|_last
operator|=
name|entry
operator|.
name|getPrevious
argument_list|()
expr_stmt|;
block|}
name|CacheEntry
name|previous
init|=
name|entry
operator|.
name|getPrevious
argument_list|()
decl_stmt|;
name|CacheEntry
name|next
init|=
name|entry
operator|.
name|getNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|previous
operator|.
name|setNext
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|next
operator|.
name|setPrevious
argument_list|(
name|previous
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|setPrevious
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setNext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Place entry at the end of linked list -- Most Recently Used    */
specifier|protected
name|void
name|touchEntry
parameter_list|(
name|CacheEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|_last
operator|==
name|entry
condition|)
block|{
return|return;
block|}
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|addEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
comment|/**    * Purge least recently used object from the cache    *     * @return recyclable CacheEntry    */
specifier|protected
name|CacheEntry
name|purgeEntry
parameter_list|()
throws|throws
name|CacheEvictionException
block|{
name|CacheEntry
name|entry
init|=
name|_first
decl_stmt|;
comment|// Notify policy listeners first. if any of them throw an
comment|// eviction exception, then the internal data structure
comment|// remains untouched.
name|CachePolicyListener
name|listener
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listeners
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|listener
operator|=
operator|(
name|CachePolicyListener
operator|)
name|listeners
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|listener
operator|.
name|cacheObjectEvicted
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|_hash
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
block|}
end_class

begin_comment
comment|/**  * State information for cache entries.  */
end_comment

begin_class
class|class
name|CacheEntry
block|{
specifier|private
name|Object
name|_key
decl_stmt|;
specifier|private
name|Object
name|_value
decl_stmt|;
specifier|private
name|CacheEntry
name|_previous
decl_stmt|;
specifier|private
name|CacheEntry
name|_next
decl_stmt|;
name|CacheEntry
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|_key
operator|=
name|key
expr_stmt|;
name|_value
operator|=
name|value
expr_stmt|;
block|}
name|Object
name|getKey
parameter_list|()
block|{
return|return
name|_key
return|;
block|}
name|void
name|setKey
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|_key
operator|=
name|obj
expr_stmt|;
block|}
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|_value
return|;
block|}
name|void
name|setValue
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|_value
operator|=
name|obj
expr_stmt|;
block|}
name|CacheEntry
name|getPrevious
parameter_list|()
block|{
return|return
name|_previous
return|;
block|}
name|void
name|setPrevious
parameter_list|(
name|CacheEntry
name|entry
parameter_list|)
block|{
name|_previous
operator|=
name|entry
expr_stmt|;
block|}
name|CacheEntry
name|getNext
parameter_list|()
block|{
return|return
name|_next
return|;
block|}
name|void
name|setNext
parameter_list|(
name|CacheEntry
name|entry
parameter_list|)
block|{
name|_next
operator|=
name|entry
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**  * Enumeration wrapper to return actual user objects instead of CacheEntries.  */
end_comment

begin_class
class|class
name|MRUEnumeration
implements|implements
name|Enumeration
block|{
name|Enumeration
name|_enum
decl_stmt|;
name|MRUEnumeration
parameter_list|(
name|Enumeration
name|enume
parameter_list|)
block|{
name|_enum
operator|=
name|enume
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|_enum
operator|.
name|hasMoreElements
argument_list|()
return|;
block|}
specifier|public
name|Object
name|nextElement
parameter_list|()
block|{
name|CacheEntry
name|entry
init|=
operator|(
name|CacheEntry
operator|)
name|_enum
operator|.
name|nextElement
argument_list|()
decl_stmt|;
return|return
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

