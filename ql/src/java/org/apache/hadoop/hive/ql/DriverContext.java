begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|cache
operator|.
name|results
operator|.
name|CacheUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|cache
operator|.
name|results
operator|.
name|QueryResultsCache
operator|.
name|CacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveTxnManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
operator|.
name|StatsSource
import|;
end_import

begin_comment
comment|/**  * Context for the procedure managed by the Driver.  */
end_comment

begin_class
specifier|public
class|class
name|DriverContext
block|{
comment|// For WebUI.  Kept alive after queryPlan is freed.
specifier|private
specifier|final
name|QueryDisplay
name|queryDisplay
init|=
operator|new
name|QueryDisplay
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|QueryState
name|queryState
decl_stmt|;
specifier|private
specifier|final
name|QueryInfo
name|queryInfo
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|HookRunner
name|hookRunner
decl_stmt|;
comment|// Transaction manager the Driver has been initialized with (can be null).
comment|// If this is set then this Transaction manager will be used during query
comment|// compilation/execution rather than using the current session's transaction manager.
comment|// This might be needed in a situation where a Driver is nested within an already
comment|// running Driver/query - the nested Driver requires a separate transaction manager
comment|// so as not to conflict with the outer Driver/query which is using the session
comment|// transaction manager.
specifier|private
specifier|final
name|HiveTxnManager
name|initTxnManager
decl_stmt|;
specifier|private
name|QueryPlan
name|plan
decl_stmt|;
specifier|private
name|Schema
name|schema
decl_stmt|;
specifier|private
name|FetchTask
name|fetchTask
decl_stmt|;
comment|// Transaction manager used for the query. This will be set at compile time based on
comment|// either initTxnMgr or from the SessionState, in that order.
specifier|private
name|HiveTxnManager
name|txnManager
decl_stmt|;
specifier|private
name|TxnType
name|txnType
init|=
name|TxnType
operator|.
name|DEFAULT
decl_stmt|;
specifier|private
name|StatsSource
name|statsSource
decl_stmt|;
comment|// Boolean to store information about whether valid txn list was generated
comment|// for current query.
specifier|private
name|boolean
name|validTxnListsGenerated
decl_stmt|;
specifier|private
name|CacheUsage
name|cacheUsage
decl_stmt|;
specifier|private
name|CacheEntry
name|usedCacheEntry
decl_stmt|;
specifier|private
name|ValidWriteIdList
name|compactionWriteIds
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|compactorTxnId
init|=
literal|0
decl_stmt|;
specifier|private
name|Context
name|backupContext
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|retrial
init|=
literal|false
decl_stmt|;
specifier|private
name|DataInput
name|resStream
decl_stmt|;
comment|// HS2 operation handle guid string
specifier|private
name|String
name|operationId
decl_stmt|;
specifier|public
name|DriverContext
parameter_list|(
name|QueryState
name|queryState
parameter_list|,
name|QueryInfo
name|queryInfo
parameter_list|,
name|HookRunner
name|hookRunner
parameter_list|,
name|HiveTxnManager
name|initTxnManager
parameter_list|)
block|{
name|this
operator|.
name|queryState
operator|=
name|queryState
expr_stmt|;
name|this
operator|.
name|queryInfo
operator|=
name|queryInfo
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|queryState
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|this
operator|.
name|hookRunner
operator|=
name|hookRunner
expr_stmt|;
name|this
operator|.
name|initTxnManager
operator|=
name|initTxnManager
expr_stmt|;
block|}
specifier|public
name|QueryDisplay
name|getQueryDisplay
parameter_list|()
block|{
return|return
name|queryDisplay
return|;
block|}
specifier|public
name|String
name|getQueryId
parameter_list|()
block|{
return|return
name|queryDisplay
operator|.
name|getQueryId
argument_list|()
return|;
block|}
specifier|public
name|String
name|getQueryString
parameter_list|()
block|{
return|return
name|queryDisplay
operator|.
name|getQueryString
argument_list|()
return|;
block|}
specifier|public
name|QueryState
name|getQueryState
parameter_list|()
block|{
return|return
name|queryState
return|;
block|}
specifier|public
name|QueryInfo
name|getQueryInfo
parameter_list|()
block|{
return|return
name|queryInfo
return|;
block|}
specifier|public
name|HiveConf
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|HookRunner
name|getHookRunner
parameter_list|()
block|{
return|return
name|hookRunner
return|;
block|}
specifier|public
name|HiveTxnManager
name|getInitTxnManager
parameter_list|()
block|{
return|return
name|initTxnManager
return|;
block|}
specifier|public
name|QueryPlan
name|getPlan
parameter_list|()
block|{
return|return
name|plan
return|;
block|}
specifier|public
name|void
name|setPlan
parameter_list|(
name|QueryPlan
name|plan
parameter_list|)
block|{
name|this
operator|.
name|plan
operator|=
name|plan
expr_stmt|;
block|}
specifier|public
name|Schema
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
specifier|public
name|void
name|setSchema
parameter_list|(
name|Schema
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
specifier|public
name|FetchTask
name|getFetchTask
parameter_list|()
block|{
return|return
name|fetchTask
return|;
block|}
specifier|public
name|void
name|setFetchTask
parameter_list|(
name|FetchTask
name|fetchTask
parameter_list|)
block|{
name|this
operator|.
name|fetchTask
operator|=
name|fetchTask
expr_stmt|;
block|}
specifier|public
name|HiveTxnManager
name|getTxnManager
parameter_list|()
block|{
return|return
name|txnManager
return|;
block|}
specifier|public
name|void
name|setTxnManager
parameter_list|(
name|HiveTxnManager
name|txnManager
parameter_list|)
block|{
name|this
operator|.
name|txnManager
operator|=
name|txnManager
expr_stmt|;
block|}
specifier|public
name|TxnType
name|getTxnType
parameter_list|()
block|{
return|return
name|txnType
return|;
block|}
specifier|public
name|void
name|setTxnType
parameter_list|(
name|TxnType
name|txnType
parameter_list|)
block|{
name|this
operator|.
name|txnType
operator|=
name|txnType
expr_stmt|;
block|}
specifier|public
name|StatsSource
name|getStatsSource
parameter_list|()
block|{
return|return
name|statsSource
return|;
block|}
specifier|public
name|void
name|setStatsSource
parameter_list|(
name|StatsSource
name|statsSource
parameter_list|)
block|{
name|this
operator|.
name|statsSource
operator|=
name|statsSource
expr_stmt|;
block|}
specifier|public
name|boolean
name|isValidTxnListsGenerated
parameter_list|()
block|{
return|return
name|validTxnListsGenerated
return|;
block|}
specifier|public
name|void
name|setValidTxnListsGenerated
parameter_list|(
name|boolean
name|validTxnListsGenerated
parameter_list|)
block|{
name|this
operator|.
name|validTxnListsGenerated
operator|=
name|validTxnListsGenerated
expr_stmt|;
block|}
specifier|public
name|CacheUsage
name|getCacheUsage
parameter_list|()
block|{
return|return
name|cacheUsage
return|;
block|}
specifier|public
name|void
name|setCacheUsage
parameter_list|(
name|CacheUsage
name|cacheUsage
parameter_list|)
block|{
name|this
operator|.
name|cacheUsage
operator|=
name|cacheUsage
expr_stmt|;
block|}
specifier|public
name|CacheEntry
name|getUsedCacheEntry
parameter_list|()
block|{
return|return
name|usedCacheEntry
return|;
block|}
specifier|public
name|void
name|setUsedCacheEntry
parameter_list|(
name|CacheEntry
name|usedCacheEntry
parameter_list|)
block|{
name|this
operator|.
name|usedCacheEntry
operator|=
name|usedCacheEntry
expr_stmt|;
block|}
specifier|public
name|ValidWriteIdList
name|getCompactionWriteIds
parameter_list|()
block|{
return|return
name|compactionWriteIds
return|;
block|}
specifier|public
name|void
name|setCompactionWriteIds
parameter_list|(
name|ValidWriteIdList
name|compactionWriteIds
parameter_list|)
block|{
name|this
operator|.
name|compactionWriteIds
operator|=
name|compactionWriteIds
expr_stmt|;
block|}
specifier|public
name|long
name|getCompactorTxnId
parameter_list|()
block|{
return|return
name|compactorTxnId
return|;
block|}
specifier|public
name|void
name|setCompactorTxnId
parameter_list|(
name|long
name|compactorTxnId
parameter_list|)
block|{
name|this
operator|.
name|compactorTxnId
operator|=
name|compactorTxnId
expr_stmt|;
block|}
specifier|public
name|Context
name|getBackupContext
parameter_list|()
block|{
return|return
name|backupContext
return|;
block|}
specifier|public
name|void
name|setBackupContext
parameter_list|(
name|Context
name|backupContext
parameter_list|)
block|{
name|this
operator|.
name|backupContext
operator|=
name|backupContext
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRetrial
parameter_list|()
block|{
return|return
name|retrial
return|;
block|}
specifier|public
name|void
name|setRetrial
parameter_list|(
name|boolean
name|retrial
parameter_list|)
block|{
name|this
operator|.
name|retrial
operator|=
name|retrial
expr_stmt|;
block|}
specifier|public
name|DataInput
name|getResStream
parameter_list|()
block|{
return|return
name|resStream
return|;
block|}
specifier|public
name|void
name|setResStream
parameter_list|(
name|DataInput
name|resStream
parameter_list|)
block|{
name|this
operator|.
name|resStream
operator|=
name|resStream
expr_stmt|;
block|}
specifier|public
name|String
name|getOperationId
parameter_list|()
block|{
return|return
name|operationId
return|;
block|}
specifier|public
name|void
name|setOperationId
parameter_list|(
name|String
name|operationId
parameter_list|)
block|{
name|this
operator|.
name|operationId
operator|=
name|operationId
expr_stmt|;
block|}
block|}
end_class

end_unit

