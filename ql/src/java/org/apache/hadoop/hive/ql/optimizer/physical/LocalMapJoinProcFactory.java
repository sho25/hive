begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|HashTableDummyOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|HashTableSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
operator|.
name|MapJoinResolver
operator|.
name|LocalMapJoinProcCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HashTableDummyDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HashTableSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_comment
comment|/**  * Node processor factory for map join resolver. What it did is to replace the  * map-join operator in the local map join task with a hash-table dump operator.  * And if the map join is followed by a group by, the hash-table sink  * operator/mapjoin operator should be configured to use less memory to avoid  * OOM in group by operator.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|LocalMapJoinProcFactory
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LocalMapJoinProcFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|NodeProcessor
name|getJoinProc
parameter_list|()
block|{
return|return
operator|new
name|LocalMapJoinProcessor
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getGroupByProc
parameter_list|()
block|{
return|return
operator|new
name|MapJoinFollowedByGroupByProcessor
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getDefaultProc
parameter_list|()
block|{
return|return
operator|new
name|NodeProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
comment|/**    * MapJoinFollowByProcessor.    *    */
specifier|public
specifier|static
class|class
name|MapJoinFollowedByGroupByProcessor
implements|implements
name|NodeProcessor
block|{
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|LocalMapJoinProcCtx
name|context
init|=
operator|(
name|LocalMapJoinProcCtx
operator|)
name|ctx
decl_stmt|;
if|if
condition|(
operator|!
name|nd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"GBY"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|context
operator|.
name|setFollowedByGroupBy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|GroupByOperator
name|groupByOp
init|=
operator|(
name|GroupByOperator
operator|)
name|nd
decl_stmt|;
name|float
name|groupByMemoryUsage
init|=
name|context
operator|.
name|getParseCtx
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|getFloatVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPJOINFOLLOWEDBYMAPAGGRHASHMEMORY
argument_list|)
decl_stmt|;
name|groupByOp
operator|.
name|getConf
argument_list|()
operator|.
name|setGroupByMemoryUsage
argument_list|(
name|groupByMemoryUsage
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * LocalMapJoinProcessor.    *    */
specifier|public
specifier|static
class|class
name|LocalMapJoinProcessor
implements|implements
name|NodeProcessor
block|{
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|LocalMapJoinProcCtx
name|context
init|=
operator|(
name|LocalMapJoinProcCtx
operator|)
name|ctx
decl_stmt|;
if|if
condition|(
operator|!
name|nd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MAPJOIN"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MapJoinOperator
name|mapJoinOp
init|=
operator|(
name|MapJoinOperator
operator|)
name|nd
decl_stmt|;
try|try
block|{
name|hasGroupBy
argument_list|(
name|mapJoinOp
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|MapJoinDesc
name|mapJoinDesc
init|=
name|mapJoinOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// mapjoin should not affected by join reordering
name|mapJoinDesc
operator|.
name|resetOrder
argument_list|()
expr_stmt|;
name|HiveConf
name|conf
init|=
name|context
operator|.
name|getParseCtx
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// set hashtable memory usage
name|float
name|hashtableMemoryUsage
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isFollowedByGroupBy
argument_list|()
condition|)
block|{
name|hashtableMemoryUsage
operator|=
name|conf
operator|.
name|getFloatVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEHASHTABLEFOLLOWBYGBYMAXMEMORYUSAGE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hashtableMemoryUsage
operator|=
name|conf
operator|.
name|getFloatVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEHASHTABLEMAXMEMORYUSAGE
argument_list|)
expr_stmt|;
block|}
name|mapJoinDesc
operator|.
name|setHashTableMemoryUsage
argument_list|(
name|hashtableMemoryUsage
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting max memory usage to "
operator|+
name|hashtableMemoryUsage
operator|+
literal|" for table sink "
operator|+
operator|(
name|context
operator|.
name|isFollowedByGroupBy
argument_list|()
condition|?
literal|""
else|:
literal|"not"
operator|)
operator|+
literal|" followed by group by"
argument_list|)
expr_stmt|;
name|HashTableSinkDesc
name|hashTableSinkDesc
init|=
operator|new
name|HashTableSinkDesc
argument_list|(
name|mapJoinDesc
argument_list|)
decl_stmt|;
name|HashTableSinkOperator
name|hashTableSinkOp
init|=
operator|(
name|HashTableSinkOperator
operator|)
name|OperatorFactory
operator|.
name|get
argument_list|(
name|hashTableSinkDesc
argument_list|)
decl_stmt|;
comment|// get the last operator for processing big tables
name|int
name|bigTable
init|=
name|mapJoinDesc
operator|.
name|getPosBigTable
argument_list|()
decl_stmt|;
comment|// todo: support tez/vectorization
name|boolean
name|useNontaged
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECONVERTJOINUSENONSTAGED
argument_list|)
operator|&&
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"mr"
argument_list|)
operator|&&
operator|!
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|)
decl_stmt|;
comment|// the parent ops for hashTableSinkOp
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|smallTablesParentOp
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|dummyOperators
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|directOperators
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// get all parents
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentsOp
init|=
name|mapJoinOp
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parentsOp
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|bigTable
condition|)
block|{
name|smallTablesParentOp
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|directOperators
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
init|=
name|parentsOp
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|boolean
name|directFetchable
init|=
name|useNontaged
operator|&&
operator|(
name|parent
operator|instanceof
name|TableScanOperator
operator|||
name|parent
operator|instanceof
name|MapJoinOperator
operator|)
decl_stmt|;
if|if
condition|(
name|directFetchable
condition|)
block|{
comment|// no filter, no projection. no need to stage
name|smallTablesParentOp
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|directOperators
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|hashTableSinkDesc
operator|.
name|getKeys
argument_list|()
operator|.
name|put
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hashTableSinkDesc
operator|.
name|getExprs
argument_list|()
operator|.
name|put
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hashTableSinkDesc
operator|.
name|getFilters
argument_list|()
operator|.
name|put
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// keep the parent id correct
name|smallTablesParentOp
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|directOperators
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|int
index|[]
name|valueIndex
init|=
name|mapJoinDesc
operator|.
name|getValueIndex
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueIndex
operator|!=
literal|null
condition|)
block|{
comment|// remove values in key exprs
comment|// schema for value is already fixed in MapJoinProcessor#convertJoinOpMapJoinOp
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|newValues
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|values
init|=
name|hashTableSinkDesc
operator|.
name|getExprs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|valueIndex
index|[
name|index
index|]
operator|<
literal|0
condition|)
block|{
name|newValues
operator|.
name|add
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|hashTableSinkDesc
operator|.
name|getExprs
argument_list|()
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|newValues
argument_list|)
expr_stmt|;
block|}
block|}
comment|// let hashtable Op be the child of this parent
name|parent
operator|.
name|replaceChild
argument_list|(
name|mapJoinOp
argument_list|,
name|hashTableSinkOp
argument_list|)
expr_stmt|;
if|if
condition|(
name|directFetchable
condition|)
block|{
name|parent
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// create new operator: HashTable DummyOperator, which share the table desc
name|HashTableDummyDesc
name|desc
init|=
operator|new
name|HashTableDummyDesc
argument_list|()
decl_stmt|;
name|HashTableDummyOperator
name|dummyOp
init|=
operator|(
name|HashTableDummyOperator
operator|)
name|OperatorFactory
operator|.
name|get
argument_list|(
name|desc
argument_list|)
decl_stmt|;
name|TableDesc
name|tbl
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|getSchema
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|parent
operator|instanceof
name|TableScanOperator
condition|)
block|{
name|tbl
operator|=
operator|(
operator|(
name|TableScanOperator
operator|)
name|parent
operator|)
operator|.
name|getTableDesc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Expected parent operator of type TableScanOperator."
operator|+
literal|"Found "
operator|+
name|parent
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" instead."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// get parent schema
name|RowSchema
name|rowSchema
init|=
name|parent
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|tbl
operator|=
name|PlanUtils
operator|.
name|getIntermediateFileTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromRowSchema
argument_list|(
name|rowSchema
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dummyOp
operator|.
name|getConf
argument_list|()
operator|.
name|setTbl
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
comment|// let the dummy op be the parent of mapjoin op
name|mapJoinOp
operator|.
name|replaceParent
argument_list|(
name|parent
argument_list|,
name|dummyOp
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|dummyChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|dummyChildren
operator|.
name|add
argument_list|(
name|mapJoinOp
argument_list|)
expr_stmt|;
name|dummyOp
operator|.
name|setChildOperators
argument_list|(
name|dummyChildren
argument_list|)
expr_stmt|;
comment|// add this dummy op to the dummp operator list
name|dummyOperators
operator|.
name|add
argument_list|(
name|dummyOp
argument_list|)
expr_stmt|;
block|}
name|hashTableSinkOp
operator|.
name|setParentOperators
argument_list|(
name|smallTablesParentOp
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|dummyOperators
control|)
block|{
name|context
operator|.
name|addDummyParentOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasAnyDirectFetch
argument_list|(
name|directOperators
argument_list|)
condition|)
block|{
name|context
operator|.
name|addDirectWorks
argument_list|(
name|mapJoinOp
argument_list|,
name|directOperators
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|hasAnyDirectFetch
parameter_list|(
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|directOperators
parameter_list|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|operator
range|:
name|directOperators
control|)
block|{
if|if
condition|(
name|operator
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|hasGroupBy
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|mapJoinOp
parameter_list|,
name|LocalMapJoinProcCtx
name|localMapJoinProcCtx
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|childOps
init|=
name|mapJoinOp
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|LocalMapJoinProcFactory
operator|.
name|getGroupByProc
argument_list|()
argument_list|)
expr_stmt|;
comment|// The dispatcher fires the processor corresponding to the closest
comment|// matching rule and passes the context along
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|LocalMapJoinProcFactory
operator|.
name|getDefaultProc
argument_list|()
argument_list|,
name|opRules
argument_list|,
name|localMapJoinProcCtx
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// iterator the reducer operator tree
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|childOps
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|LocalMapJoinProcFactory
parameter_list|()
block|{
comment|// prevent instantiation
block|}
block|}
end_class

end_unit

