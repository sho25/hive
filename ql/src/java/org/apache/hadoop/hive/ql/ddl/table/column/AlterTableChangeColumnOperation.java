begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|column
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AlterTableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AbstractAlterTableOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroSerdeUtils
import|;
end_import

begin_comment
comment|/**  * Operation process changing a column.  */
end_comment

begin_class
specifier|public
class|class
name|AlterTableChangeColumnOperation
extends|extends
name|AbstractAlterTableOperation
argument_list|<
name|AlterTableChangeColumnDesc
argument_list|>
block|{
specifier|public
name|AlterTableChangeColumnOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|AlterTableChangeColumnDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doAlteration
parameter_list|(
name|Table
name|table
parameter_list|,
name|Partition
name|partition
parameter_list|)
throws|throws
name|HiveException
block|{
name|StorageDescriptor
name|sd
init|=
name|getStorageDescriptor
argument_list|(
name|table
argument_list|,
name|partition
argument_list|)
decl_stmt|;
name|String
name|serializationLib
init|=
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
decl_stmt|;
name|AvroSerdeUtils
operator|.
name|handleAlterTableForAvro
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
name|serializationLib
argument_list|,
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
comment|// if orc table, restrict reordering columns as it will break schema evolution
name|boolean
name|isOrcSchemaEvolution
init|=
name|sd
operator|.
name|getInputFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|OrcInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|AlterTableUtils
operator|.
name|isSchemaEvolutionEnabled
argument_list|(
name|table
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isOrcSchemaEvolution
operator|&&
operator|(
name|desc
operator|.
name|isFirst
argument_list|()
operator|||
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|desc
operator|.
name|getAfterColumn
argument_list|()
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|CANNOT_REORDER_COLUMNS
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
throw|;
block|}
name|FieldSchema
name|column
init|=
literal|null
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|int
name|position
init|=
name|desc
operator|.
name|isFirst
argument_list|()
condition|?
literal|0
else|:
operator|-
literal|1
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|oldColumns
init|=
operator|(
name|partition
operator|==
literal|null
condition|?
name|table
operator|.
name|getColsForMetastore
argument_list|()
else|:
name|partition
operator|.
name|getColsForMetastore
argument_list|()
operator|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|oldColumn
range|:
name|oldColumns
control|)
block|{
name|String
name|oldColumnName
init|=
name|oldColumn
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldColumnName
operator|.
name|equalsIgnoreCase
argument_list|(
name|desc
operator|.
name|getOldColumnName
argument_list|()
argument_list|)
condition|)
block|{
name|oldColumn
operator|.
name|setName
argument_list|(
name|desc
operator|.
name|getNewColumnName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|desc
operator|.
name|getNewColumnType
argument_list|()
argument_list|)
condition|)
block|{
name|oldColumn
operator|.
name|setType
argument_list|(
name|desc
operator|.
name|getNewColumnType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|desc
operator|.
name|getNewColumnComment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|oldColumn
operator|.
name|setComment
argument_list|(
name|desc
operator|.
name|getNewColumnComment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|isFirst
argument_list|()
operator|||
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|desc
operator|.
name|getAfterColumn
argument_list|()
argument_list|)
condition|)
block|{
name|column
operator|=
name|oldColumn
expr_stmt|;
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|oldColumnName
operator|.
name|equalsIgnoreCase
argument_list|(
name|desc
operator|.
name|getNewColumnName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|DUPLICATE_COLUMN_NAMES
argument_list|,
name|desc
operator|.
name|getNewColumnName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|oldColumnName
operator|.
name|equalsIgnoreCase
argument_list|(
name|desc
operator|.
name|getAfterColumn
argument_list|()
argument_list|)
condition|)
block|{
name|position
operator|=
name|i
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
name|newColumns
operator|.
name|add
argument_list|(
name|oldColumn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_COLUMN
argument_list|,
name|desc
operator|.
name|getOldColumnName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|desc
operator|.
name|getAfterColumn
argument_list|()
argument_list|)
operator|&&
name|position
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_COLUMN
argument_list|,
name|desc
operator|.
name|getAfterColumn
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|position
operator|>=
literal|0
condition|)
block|{
name|newColumns
operator|.
name|add
argument_list|(
name|position
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
name|sd
operator|.
name|setCols
argument_list|(
name|newColumns
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

