begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ptf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IdentityExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFrameDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_comment
comment|/**  * This is the vector PTF evaluator base class.  An evaluator does the group batch aggregation work  * on an aggregation's 0 or 1 argument(s) and at some point will fill in an output column with the  * aggregation result.  The aggregation argument is an input column or expression, or no argument.  *  * When the aggregation is streaming (e.g. row_number, rank, first_value, etc), the output column  * can be filled in immediately by the implementation of evaluateGroupBatch.  *  * For non-streaming aggregations, the aggregation result is not known until the last group batch  * is processed.  After the last group batch has been processed, the VectorPTFGroupBatches class  * will call the isGroupResultNull, getResultColumnVectorType, getLongGroupResult |  * getDoubleGroupResult | getDecimalGroupResult, and getOutputColumnNum methods to get aggregation  * result information necessary to write it into the output column (as a repeated column) of all  * the group batches.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorPTFEvaluatorBase
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
name|VectorPTFEvaluatorBase
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|WindowFrameDef
name|windowFrameDef
decl_stmt|;
specifier|private
specifier|final
name|VectorExpression
name|inputVecExpr
decl_stmt|;
specifier|protected
specifier|final
name|int
name|inputColumnNum
decl_stmt|;
specifier|protected
specifier|final
name|int
name|outputColumnNum
decl_stmt|;
specifier|public
name|VectorPTFEvaluatorBase
parameter_list|(
name|WindowFrameDef
name|windowFrameDef
parameter_list|,
name|VectorExpression
name|inputVecExpr
parameter_list|,
name|int
name|outputColumnNum
parameter_list|)
block|{
name|this
operator|.
name|windowFrameDef
operator|=
name|windowFrameDef
expr_stmt|;
if|if
condition|(
name|inputVecExpr
operator|==
literal|null
condition|)
block|{
name|inputColumnNum
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|inputVecExpr
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|inputColumnNum
operator|=
name|inputVecExpr
operator|.
name|getOutputColumnNum
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputVecExpr
operator|instanceof
name|IdentityExpression
condition|)
block|{
name|this
operator|.
name|inputVecExpr
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|inputVecExpr
operator|=
name|inputVecExpr
expr_stmt|;
block|}
block|}
name|this
operator|.
name|outputColumnNum
operator|=
name|outputColumnNum
expr_stmt|;
block|}
comment|// Evaluate the aggregation input argument expression.
specifier|public
name|void
name|evaluateInputExpr
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
if|if
condition|(
name|inputVecExpr
operator|!=
literal|null
condition|)
block|{
name|inputVecExpr
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Evaluate the aggregation over one of the group's batches.
specifier|public
specifier|abstract
name|void
name|evaluateGroupBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|boolean
name|isLastGroupBatch
parameter_list|)
function_decl|;
comment|// Returns true if the aggregation result will be streamed.
specifier|public
name|boolean
name|streamsResult
parameter_list|()
block|{
comment|// Assume it is not streamjng by default.
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|getOutputColumnNum
parameter_list|()
block|{
return|return
name|outputColumnNum
return|;
block|}
comment|// After processing all the group's batches with evaluateGroupBatch, is the non-streaming
comment|// aggregation result null?
specifier|public
name|boolean
name|isGroupResultNull
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|// What is the ColumnVector type of the aggregation result?
specifier|public
specifier|abstract
name|Type
name|getResultColumnVectorType
parameter_list|()
function_decl|;
comment|/*    * After processing all the non-streaming group's batches with evaluateGroupBatch and    * isGroupResultNull is false, the aggregation result value (based on getResultColumnVectorType).    */
specifier|public
name|long
name|getLongGroupResult
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No long group result evaluator implementation "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|double
name|getDoubleGroupResult
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No double group result evaluator implementation "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|HiveDecimalWritable
name|getDecimalGroupResult
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No decimal group result evaluator implementation "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|// Resets the aggregation calculation variable(s).
specifier|public
specifier|abstract
name|void
name|resetEvaluator
parameter_list|()
function_decl|;
block|}
end_class

end_unit

