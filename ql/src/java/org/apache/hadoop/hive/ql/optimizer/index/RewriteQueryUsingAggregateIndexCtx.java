begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|OpParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
import|;
end_import

begin_comment
comment|/**  * RewriteQueryUsingAggregateIndexCtx class stores the  * context for the {@link RewriteQueryUsingAggregateIndex}  * used to rewrite operator plan with index table instead of base table.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|RewriteQueryUsingAggregateIndexCtx
implements|implements
name|NodeProcessorCtx
block|{
specifier|private
name|RewriteQueryUsingAggregateIndexCtx
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|,
name|Hive
name|hiveDb
parameter_list|,
name|String
name|indexTableName
parameter_list|,
name|String
name|baseTableName
parameter_list|,
name|String
name|aggregateFunction
parameter_list|)
block|{
name|this
operator|.
name|parseContext
operator|=
name|parseContext
expr_stmt|;
name|this
operator|.
name|hiveDb
operator|=
name|hiveDb
expr_stmt|;
name|this
operator|.
name|indexTableName
operator|=
name|indexTableName
expr_stmt|;
name|this
operator|.
name|baseTableName
operator|=
name|baseTableName
expr_stmt|;
name|this
operator|.
name|aggregateFunction
operator|=
name|aggregateFunction
expr_stmt|;
name|this
operator|.
name|opc
operator|=
name|parseContext
operator|.
name|getOpParseCtx
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|RewriteQueryUsingAggregateIndexCtx
name|getInstance
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|,
name|Hive
name|hiveDb
parameter_list|,
name|String
name|indexTableName
parameter_list|,
name|String
name|baseTableName
parameter_list|,
name|String
name|aggregateFunction
parameter_list|)
block|{
return|return
operator|new
name|RewriteQueryUsingAggregateIndexCtx
argument_list|(
name|parseContext
argument_list|,
name|hiveDb
argument_list|,
name|indexTableName
argument_list|,
name|baseTableName
argument_list|,
name|aggregateFunction
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|OpParseContext
argument_list|>
name|opc
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|OpParseContext
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Hive
name|hiveDb
decl_stmt|;
specifier|private
specifier|final
name|ParseContext
name|parseContext
decl_stmt|;
comment|//We need the GenericUDAFEvaluator for GenericUDAF function "sum"
specifier|private
name|GenericUDAFEvaluator
name|eval
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|String
name|indexTableName
decl_stmt|;
specifier|private
specifier|final
name|String
name|baseTableName
decl_stmt|;
specifier|private
specifier|final
name|String
name|aggregateFunction
decl_stmt|;
specifier|private
name|ExprNodeColumnDesc
name|aggrExprNode
init|=
literal|null
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|OpParseContext
argument_list|>
name|getOpc
parameter_list|()
block|{
return|return
name|opc
return|;
block|}
specifier|public
name|ParseContext
name|getParseContext
parameter_list|()
block|{
return|return
name|parseContext
return|;
block|}
specifier|public
name|Hive
name|getHiveDb
parameter_list|()
block|{
return|return
name|hiveDb
return|;
block|}
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|indexTableName
return|;
block|}
specifier|public
name|GenericUDAFEvaluator
name|getEval
parameter_list|()
block|{
return|return
name|eval
return|;
block|}
specifier|public
name|void
name|setEval
parameter_list|(
name|GenericUDAFEvaluator
name|eval
parameter_list|)
block|{
name|this
operator|.
name|eval
operator|=
name|eval
expr_stmt|;
block|}
specifier|public
name|void
name|setAggrExprNode
parameter_list|(
name|ExprNodeColumnDesc
name|aggrExprNode
parameter_list|)
block|{
name|this
operator|.
name|aggrExprNode
operator|=
name|aggrExprNode
expr_stmt|;
block|}
specifier|public
name|ExprNodeColumnDesc
name|getAggrExprNode
parameter_list|()
block|{
return|return
name|aggrExprNode
return|;
block|}
comment|/**   * Walk the original operator tree using the {@link DefaultGraphWalker} using the rules.   * Each of the rules invoke respective methods from the {@link RewriteQueryUsingAggregateIndex}   * to rewrite the original query using aggregate index.   *   * @param topOp   * @throws SemanticException   */
specifier|public
name|void
name|invokeRewriteQueryProc
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|topOp
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
comment|// replace scan operator containing original table with index table
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|TableScanOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|RewriteQueryUsingAggregateIndex
operator|.
name|getReplaceTableScanProc
argument_list|()
argument_list|)
expr_stmt|;
comment|//rule that replaces index key selection with
comment|//sum(`_count_of_indexed_column`) function in original query
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R2"
argument_list|,
name|SelectOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|RewriteQueryUsingAggregateIndex
operator|.
name|getNewQuerySelectSchemaProc
argument_list|()
argument_list|)
expr_stmt|;
comment|//Manipulates the ExprNodeDesc from GroupByOperator aggregation list
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R3"
argument_list|,
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|RewriteQueryUsingAggregateIndex
operator|.
name|getNewQueryGroupbySchemaProc
argument_list|()
argument_list|)
expr_stmt|;
comment|// The dispatcher fires the processor corresponding to the closest matching
comment|// rule and passes the context along
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|getDefaultProc
argument_list|()
argument_list|,
name|opRules
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// Create a list of topop nodes
name|List
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|add
argument_list|(
name|topOp
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**   * Default procedure for {@link DefaultRuleDispatcher}.   * @return   */
specifier|private
name|NodeProcessor
name|getDefaultProc
parameter_list|()
block|{
return|return
operator|new
name|NodeProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
specifier|public
name|String
name|getBaseTableName
parameter_list|()
block|{
return|return
name|baseTableName
return|;
block|}
specifier|public
name|String
name|getAggregateFunction
parameter_list|()
block|{
return|return
name|aggregateFunction
return|;
block|}
block|}
end_class

end_unit

