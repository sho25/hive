begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLDesc
operator|.
name|DDLDescWithWriteId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
operator|.
name|PartitionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
operator|.
name|WriteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_comment
comment|/**  * Abstract ancestor of all Alter Table analyzer. The alter table commands have this structure:  * tableName command partitionSpec?  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractAlterTableAnalyzer
extends|extends
name|BaseSemanticAnalyzer
block|{
comment|// Equivalent to acidSinks, but for DDL operations that change data.
specifier|private
name|DDLDescWithWriteId
name|ddlDescWithWriteId
decl_stmt|;
specifier|public
name|AbstractAlterTableAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyzeInternal
parameter_list|(
name|ASTNode
name|root
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TableName
name|tableName
init|=
name|getQualifiedTableName
argument_list|(
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|MetaStoreUtils
operator|.
name|getDefaultCatalog
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|ASTNode
name|command
init|=
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
init|=
literal|null
decl_stmt|;
name|ASTNode
name|partitionSpecNode
init|=
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitionSpecNode
operator|!=
literal|null
condition|)
block|{
comment|//  We can use alter table partition rename to convert/normalize the legacy partition
comment|//  column values. In so, we should not enable the validation to the old partition spec
comment|//  passed in this command.
if|if
condition|(
name|command
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_ALTERTABLE_RENAMEPART
condition|)
block|{
name|partitionSpec
operator|=
name|getPartSpec
argument_list|(
name|partitionSpecNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|partitionSpec
operator|=
name|getValidatedPartSpec
argument_list|(
name|getTable
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|partitionSpecNode
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|analyzeCommand
argument_list|(
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|analyzeCommand
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|ASTNode
name|command
parameter_list|)
throws|throws
name|SemanticException
function_decl|;
specifier|protected
name|void
name|setAcidDdlDesc
parameter_list|(
name|DDLDescWithWriteId
name|descWithWriteId
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|ddlDescWithWriteId
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ddlDescWithWriteId is already set: "
operator|+
name|this
operator|.
name|ddlDescWithWriteId
argument_list|)
throw|;
block|}
name|this
operator|.
name|ddlDescWithWriteId
operator|=
name|descWithWriteId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DDLDescWithWriteId
name|getAcidDdlDesc
parameter_list|()
block|{
return|return
name|ddlDescWithWriteId
return|;
block|}
specifier|protected
name|void
name|addInputsOutputsAlterTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|AbstractAlterTableDesc
name|desc
parameter_list|,
name|AlterTableType
name|op
parameter_list|,
name|boolean
name|doForceExclusive
parameter_list|)
throws|throws
name|SemanticException
block|{
name|boolean
name|isCascade
init|=
name|desc
operator|!=
literal|null
operator|&&
name|desc
operator|.
name|isCascade
argument_list|()
decl_stmt|;
name|boolean
name|alterPartitions
init|=
name|partitionSpec
operator|!=
literal|null
operator|&&
operator|!
name|partitionSpec
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
comment|//cascade only occurs at table level then cascade to partition level
if|if
condition|(
name|isCascade
operator|&&
name|alterPartitions
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|ALTER_TABLE_PARTITION_CASCADE_NOT_SUPPORTED
argument_list|,
name|op
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|Table
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// cascade only occurs with partitioned table
if|if
condition|(
name|isCascade
operator|&&
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|ALTER_TABLE_NON_PARTITIONED_TABLE_CASCADE_NOT_SUPPORTED
argument_list|)
throw|;
block|}
comment|// Determine the lock type to acquire
name|WriteEntity
operator|.
name|WriteType
name|writeType
init|=
name|doForceExclusive
condition|?
name|WriteType
operator|.
name|DDL_EXCLUSIVE
else|:
name|determineAlterTableWriteType
argument_list|(
name|table
argument_list|,
name|desc
argument_list|,
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|alterPartitions
condition|)
block|{
name|inputs
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|WriteEntity
name|alterTableOutput
init|=
operator|new
name|WriteEntity
argument_list|(
name|table
argument_list|,
name|writeType
argument_list|)
decl_stmt|;
name|outputs
operator|.
name|add
argument_list|(
name|alterTableOutput
argument_list|)
expr_stmt|;
comment|//do not need the lock for partitions since they are covered by the table lock
if|if
condition|(
name|isCascade
condition|)
block|{
for|for
control|(
name|Partition
name|part
range|:
name|PartitionUtils
operator|.
name|getPartitions
argument_list|(
name|db
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|false
argument_list|)
control|)
block|{
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|part
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|ReadEntity
name|re
init|=
operator|new
name|ReadEntity
argument_list|(
name|table
argument_list|)
decl_stmt|;
comment|// In the case of altering a table for its partitions we don't need to lock the table
comment|// itself, just the partitions.  But the table will have a ReadEntity.  So mark that
comment|// ReadEntity as no lock.
name|re
operator|.
name|noLockNeeded
argument_list|()
expr_stmt|;
name|inputs
operator|.
name|add
argument_list|(
name|re
argument_list|)
expr_stmt|;
if|if
condition|(
name|AlterTableUtils
operator|.
name|isFullPartitionSpec
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|)
condition|)
block|{
comment|// Fully specified partition spec
name|Partition
name|part
init|=
name|PartitionUtils
operator|.
name|getPartition
argument_list|(
name|db
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|part
argument_list|,
name|writeType
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Partial partition spec supplied. Make sure this is allowed.
if|if
condition|(
operator|!
name|AlterTableType
operator|.
name|SUPPORT_PARTIAL_PARTITION_SPEC
operator|.
name|contains
argument_list|(
name|op
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|ALTER_TABLE_TYPE_PARTIAL_PARTITION_SPEC_NO_SUPPORTED
argument_list|,
name|op
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DYNAMICPARTITIONING
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|DYNAMIC_PARTITION_DISABLED
argument_list|)
throw|;
block|}
for|for
control|(
name|Partition
name|part
range|:
name|PartitionUtils
operator|.
name|getPartitions
argument_list|(
name|db
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|true
argument_list|)
control|)
block|{
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|part
argument_list|,
name|writeType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
name|validateAlterTableType
argument_list|(
name|table
argument_list|,
name|op
argument_list|,
name|desc
operator|.
name|expectView
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// For the time while all the alter table operations are getting migrated there is a duplication of this method here
specifier|private
name|WriteType
name|determineAlterTableWriteType
parameter_list|(
name|Table
name|tab
parameter_list|,
name|AbstractAlterTableDesc
name|desc
parameter_list|,
name|AlterTableType
name|op
parameter_list|)
block|{
name|boolean
name|convertingToAcid
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
operator|&&
name|desc
operator|.
name|getProps
argument_list|()
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|desc
operator|.
name|getProps
argument_list|()
operator|.
name|get
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_IS_TRANSACTIONAL
argument_list|)
argument_list|)
condition|)
block|{
name|convertingToAcid
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|tab
argument_list|)
operator|&&
name|convertingToAcid
condition|)
block|{
comment|// non-acid to transactional conversion (property itself) must be mutexed to prevent concurrent writes.
comment|// See HIVE-16688 for use cases.
return|return
name|WriteType
operator|.
name|DDL_EXCLUSIVE
return|;
block|}
return|return
name|WriteEntity
operator|.
name|determineAlterTableWriteType
argument_list|(
name|op
argument_list|)
return|;
block|}
specifier|protected
name|void
name|validateAlterTableType
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|AlterTableType
name|op
parameter_list|,
name|boolean
name|expectView
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|tbl
operator|.
name|isView
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|expectView
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|ALTER_COMMAND_FOR_VIEWS
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|ADDPARTITION
case|:
case|case
name|DROPPARTITION
case|:
case|case
name|RENAMEPARTITION
case|:
case|case
name|ADDPROPS
case|:
case|case
name|DROPPROPS
case|:
case|case
name|RENAME
case|:
comment|// allow this form
break|break;
default|default:
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|ALTER_VIEW_DISALLOWED_OP
operator|.
name|getMsg
argument_list|(
name|op
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|expectView
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|ALTER_COMMAND_FOR_TABLES
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|tbl
operator|.
name|isNonNative
argument_list|()
operator|&&
operator|!
name|AlterTableType
operator|.
name|NON_NATIVE_TABLE_ALLOWED
operator|.
name|contains
argument_list|(
name|op
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|ALTER_TABLE_NON_NATIVE
operator|.
name|format
argument_list|(
name|AlterTableType
operator|.
name|NON_NATIVE_TABLE_ALLOWED
operator|.
name|toString
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

