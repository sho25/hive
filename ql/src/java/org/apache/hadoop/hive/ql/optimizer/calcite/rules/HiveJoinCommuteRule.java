begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
operator|.
name|JoinCommuteRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Permutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveProject
import|;
end_import

begin_comment
comment|/**  * Planner rule that permutes the inputs of a Join, if it has a Project on top  * that simply swaps the fields of both inputs.  */
end_comment

begin_class
specifier|public
class|class
name|HiveJoinCommuteRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|HiveJoinCommuteRule
name|INSTANCE
init|=
operator|new
name|HiveJoinCommuteRule
argument_list|(
name|HiveProject
operator|.
name|class
argument_list|,
name|HiveJoin
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|HiveJoinCommuteRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Project
argument_list|>
name|projClazz
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Join
argument_list|>
name|joinClazz
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|projClazz
argument_list|,
name|operand
argument_list|(
name|joinClazz
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
specifier|final
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|Project
name|topProject
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// 1. We check if it is a permutation project. If it is
comment|//    not, or this is the identity, the rule will do nothing
specifier|final
name|Permutation
name|topPermutation
init|=
name|topProject
operator|.
name|getPermutation
argument_list|()
decl_stmt|;
if|if
condition|(
name|topPermutation
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|topPermutation
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// 2. We swap the join
specifier|final
name|RelNode
name|swapped
init|=
name|JoinCommuteRule
operator|.
name|swap
argument_list|(
name|join
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|swapped
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// 3. The result should have a project on top, otherwise we
comment|//    bail out.
if|if
condition|(
name|swapped
operator|instanceof
name|Join
condition|)
block|{
return|return;
block|}
comment|// 4. We check if it is a permutation project. If it is
comment|//    not, or this is the identity, the rule will do nothing
specifier|final
name|Project
name|bottomProject
init|=
operator|(
name|Project
operator|)
name|swapped
decl_stmt|;
specifier|final
name|Permutation
name|bottomPermutation
init|=
name|bottomProject
operator|.
name|getPermutation
argument_list|()
decl_stmt|;
if|if
condition|(
name|bottomPermutation
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|bottomPermutation
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// 5. If the product of the topPermutation and bottomPermutation yields
comment|//    the identity, then we can swap the join and remove the project on
comment|//    top.
specifier|final
name|Permutation
name|product
init|=
name|topPermutation
operator|.
name|product
argument_list|(
name|bottomPermutation
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|product
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// 6. Return the new join as a replacement
specifier|final
name|Join
name|swappedJoin
init|=
operator|(
name|Join
operator|)
name|bottomProject
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|swappedJoin
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

