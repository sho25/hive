begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|makePartName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|makeSpecFromName
import|;
end_import

begin_comment
comment|/**  * This stores partition information for a temp table.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|TempTable
block|{
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tTable
decl_stmt|;
specifier|private
specifier|final
name|PartitionTree
name|pTree
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXTERNAL_PARAM
init|=
literal|"EXTERNAL"
decl_stmt|;
name|TempTable
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|t
parameter_list|)
block|{
assert|assert
name|t
operator|!=
literal|null
assert|;
name|this
operator|.
name|tTable
operator|=
name|t
expr_stmt|;
name|pTree
operator|=
name|t
operator|.
name|getPartitionKeysSize
argument_list|()
operator|>
literal|0
condition|?
operator|new
name|PartitionTree
argument_list|(
name|tTable
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
name|Partition
name|addPartition
parameter_list|(
name|Partition
name|p
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|String
name|partName
init|=
name|makePartName
argument_list|(
name|tTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|p
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|Partition
name|partition
init|=
name|pTree
operator|.
name|addPartition
argument_list|(
name|p
argument_list|,
name|partName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|partition
operator|==
literal|null
condition|?
name|pTree
operator|.
name|getPartition
argument_list|(
name|partName
argument_list|)
else|:
name|partition
return|;
block|}
name|boolean
name|isExternal
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|tTable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|EXTERNAL_PARAM
argument_list|)
argument_list|)
return|;
block|}
name|Partition
name|getPartition
parameter_list|(
name|String
name|partName
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|partName
operator|==
literal|null
operator|||
name|partName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Partition name cannot be null or empty"
argument_list|)
throw|;
block|}
return|return
name|pTree
operator|.
name|getPartition
argument_list|(
name|partName
argument_list|)
return|;
block|}
name|Partition
name|getPartition
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|partVals
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Partition values cannot be null"
argument_list|)
throw|;
block|}
return|return
name|pTree
operator|.
name|getPartition
argument_list|(
name|partVals
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|addPartitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|)
throws|throws
name|MetaException
throws|,
name|AlreadyExistsException
block|{
return|return
name|pTree
operator|.
name|addPartitions
argument_list|(
name|partitions
argument_list|,
name|ifNotExists
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|partNames
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Partition names cannot be null"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
name|partition
init|=
name|getPartition
argument_list|(
name|partName
argument_list|)
decl_stmt|;
if|if
condition|(
name|partition
operator|!=
literal|null
condition|)
block|{
name|partitions
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partitions
return|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByPartitionVals
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partialPartVals
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|pTree
operator|.
name|getPartitionsByPartitionVals
argument_list|(
name|partialPartVals
argument_list|)
return|;
block|}
name|Partition
name|getPartitionWithAuthInfo
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partionVals
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
block|{
name|Partition
name|partition
init|=
name|getPartition
argument_list|(
name|partionVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|partition
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|checkPrivilegesForPartition
argument_list|(
name|partition
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
condition|?
name|partition
else|:
literal|null
return|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitions
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|pTree
operator|.
name|listPartitions
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsWithAuthInfo
parameter_list|(
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|listPartitions
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|forEach
argument_list|(
name|p
lambda|->
block|{
if|if
condition|(
name|checkPrivilegesForPartition
argument_list|(
name|p
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsByPartitionValsWithAuthInfo
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partialVals
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|pTree
operator|.
name|getPartitionsByPartitionVals
argument_list|(
name|partialVals
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|forEach
argument_list|(
name|p
lambda|->
block|{
if|if
condition|(
name|checkPrivilegesForPartition
argument_list|(
name|p
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|boolean
name|checkPrivilegesForPartition
parameter_list|(
name|Partition
name|partition
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
block|{
if|if
condition|(
operator|(
name|userName
operator|==
literal|null
operator|||
name|userName
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
name|groupNames
operator|==
literal|null
operator|||
name|groupNames
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|PrincipalPrivilegeSet
name|privileges
init|=
name|partition
operator|.
name|getPrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|privileges
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|privileges
operator|.
name|isSetUserPrivileges
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|privileges
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|containsKey
argument_list|(
name|userName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|privileges
operator|.
name|isSetGroupPrivileges
argument_list|()
condition|)
block|{
if|if
condition|(
name|groupNames
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|group
range|:
name|groupNames
control|)
block|{
if|if
condition|(
operator|!
name|privileges
operator|.
name|getGroupPrivileges
argument_list|()
operator|.
name|containsKey
argument_list|(
name|group
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
name|Partition
name|dropPartition
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|pTree
operator|.
name|dropPartition
argument_list|(
name|partVals
argument_list|)
return|;
block|}
name|Partition
name|dropPartition
parameter_list|(
name|String
name|partitionName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|specFromName
init|=
name|makeSpecFromName
argument_list|(
name|partitionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|specFromName
operator|==
literal|null
operator|||
name|specFromName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Invalid partition name "
operator|+
name|partitionName
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|pVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|field
range|:
name|tTable
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|String
name|val
init|=
name|specFromName
operator|.
name|get
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Partition name "
operator|+
name|partitionName
operator|+
literal|" and table partition keys "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|tTable
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
operator|+
literal|" does not match"
argument_list|)
throw|;
block|}
name|pVals
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|pTree
operator|.
name|dropPartition
argument_list|(
name|pVals
argument_list|)
return|;
block|}
block|}
end_class

end_unit

