begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardListObjectInspector
import|;
end_import

begin_class
specifier|public
class|class
name|GenericUDAFMkCollectionEvaluator
extends|extends
name|GenericUDAFEvaluator
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1l
decl_stmt|;
enum|enum
name|BufferType
block|{
name|SET
block|,
name|LIST
block|}
comment|// For PARTIAL1 and COMPLETE: ObjectInspectors for original data
specifier|private
specifier|transient
name|PrimitiveObjectInspector
name|inputOI
decl_stmt|;
comment|// For PARTIAL2 and FINAL: ObjectInspectors for partial aggregations (list
comment|// of objs)
specifier|private
specifier|transient
name|StandardListObjectInspector
name|loi
decl_stmt|;
specifier|private
specifier|transient
name|ListObjectInspector
name|internalMergeOI
decl_stmt|;
specifier|private
name|BufferType
name|bufferType
decl_stmt|;
comment|//needed by kyro
specifier|public
name|GenericUDAFMkCollectionEvaluator
parameter_list|()
block|{   }
specifier|public
name|GenericUDAFMkCollectionEvaluator
parameter_list|(
name|BufferType
name|bufferType
parameter_list|)
block|{
name|this
operator|.
name|bufferType
operator|=
name|bufferType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// init output object inspectors
comment|// The output of a partial aggregation is a list
if|if
condition|(
name|m
operator|==
name|Mode
operator|.
name|PARTIAL1
condition|)
block|{
name|inputOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|inputOI
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|parameters
index|[
literal|0
index|]
operator|instanceof
name|ListObjectInspector
operator|)
condition|)
block|{
comment|//no map aggregation.
name|inputOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|parameters
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
operator|(
name|StandardListObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|inputOI
argument_list|)
return|;
block|}
else|else
block|{
name|internalMergeOI
operator|=
operator|(
name|ListObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
name|inputOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|internalMergeOI
operator|.
name|getListElementObjectInspector
argument_list|()
expr_stmt|;
name|loi
operator|=
operator|(
name|StandardListObjectInspector
operator|)
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|internalMergeOI
argument_list|)
expr_stmt|;
return|return
name|loi
return|;
block|}
block|}
block|}
class|class
name|MkArrayAggregationBuffer
extends|extends
name|AbstractAggregationBuffer
block|{
specifier|private
name|Collection
argument_list|<
name|Object
argument_list|>
name|container
decl_stmt|;
specifier|public
name|MkArrayAggregationBuffer
parameter_list|()
block|{
if|if
condition|(
name|bufferType
operator|==
name|BufferType
operator|.
name|LIST
condition|)
block|{
name|container
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bufferType
operator|==
name|BufferType
operator|.
name|SET
condition|)
block|{
name|container
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Buffer type unknown"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
operator|(
operator|(
name|MkArrayAggregationBuffer
operator|)
name|agg
operator|)
operator|.
name|container
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
name|MkArrayAggregationBuffer
name|ret
init|=
operator|new
name|MkArrayAggregationBuffer
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
comment|//mapside
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
assert|assert
operator|(
name|parameters
operator|.
name|length
operator|==
literal|1
operator|)
assert|;
name|Object
name|p
init|=
name|parameters
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|MkArrayAggregationBuffer
name|myagg
init|=
operator|(
name|MkArrayAggregationBuffer
operator|)
name|agg
decl_stmt|;
name|putIntoCollection
argument_list|(
name|p
argument_list|,
name|myagg
argument_list|)
expr_stmt|;
block|}
block|}
comment|//mapside
annotation|@
name|Override
specifier|public
name|Object
name|terminatePartial
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|MkArrayAggregationBuffer
name|myagg
init|=
operator|(
name|MkArrayAggregationBuffer
operator|)
name|agg
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|myagg
operator|.
name|container
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|myagg
operator|.
name|container
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|merge
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
name|partial
parameter_list|)
throws|throws
name|HiveException
block|{
name|MkArrayAggregationBuffer
name|myagg
init|=
operator|(
name|MkArrayAggregationBuffer
operator|)
name|agg
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|partialResult
init|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|internalMergeOI
operator|.
name|getList
argument_list|(
name|partial
argument_list|)
decl_stmt|;
if|if
condition|(
name|partialResult
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|i
range|:
name|partialResult
control|)
block|{
name|putIntoCollection
argument_list|(
name|i
argument_list|,
name|myagg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|MkArrayAggregationBuffer
name|myagg
init|=
operator|(
name|MkArrayAggregationBuffer
operator|)
name|agg
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|myagg
operator|.
name|container
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|myagg
operator|.
name|container
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|putIntoCollection
parameter_list|(
name|Object
name|p
parameter_list|,
name|MkArrayAggregationBuffer
name|myagg
parameter_list|)
block|{
name|Object
name|pCopy
init|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|p
argument_list|,
name|this
operator|.
name|inputOI
argument_list|)
decl_stmt|;
name|myagg
operator|.
name|container
operator|.
name|add
argument_list|(
name|pCopy
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BufferType
name|getBufferType
parameter_list|()
block|{
return|return
name|bufferType
return|;
block|}
specifier|public
name|void
name|setBufferType
parameter_list|(
name|BufferType
name|bufferType
parameter_list|)
block|{
name|this
operator|.
name|bufferType
operator|=
name|bufferType
expr_stmt|;
block|}
block|}
end_class

end_unit

