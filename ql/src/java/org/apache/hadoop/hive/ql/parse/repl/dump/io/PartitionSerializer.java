begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|ReplUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ReplicationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TJSONProtocol
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|PartitionSerializer
implements|implements
name|JsonWriter
operator|.
name|Serializer
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_NAME
init|=
literal|"partitions"
decl_stmt|;
specifier|private
name|Partition
name|partition
decl_stmt|;
name|PartitionSerializer
parameter_list|(
name|Partition
name|partition
parameter_list|)
block|{
name|this
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|JsonWriter
name|writer
parameter_list|,
name|ReplicationSpec
name|additionalPropertiesProvider
parameter_list|)
throws|throws
name|SemanticException
throws|,
name|IOException
block|{
name|TSerializer
name|serializer
init|=
operator|new
name|TSerializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Remove all the entries from the parameters which are added by repl tasks internally.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
name|partition
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
name|parameters
operator|.
name|entrySet
argument_list|()
operator|.
name|removeIf
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|ReplUtils
operator|.
name|REPL_CHECKPOINT_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|additionalPropertiesProvider
operator|.
name|isInReplicationScope
argument_list|()
condition|)
block|{
comment|// Current replication state must be set on the Partition object only for bootstrap dump.
comment|// Event replication State will be null in case of bootstrap dump.
if|if
condition|(
name|additionalPropertiesProvider
operator|.
name|getReplSpecType
argument_list|()
operator|!=
name|ReplicationSpec
operator|.
name|Type
operator|.
name|INCREMENTAL_DUMP
condition|)
block|{
name|partition
operator|.
name|putToParameters
argument_list|(
name|ReplicationSpec
operator|.
name|KEY
operator|.
name|CURR_STATE_ID
operator|.
name|toString
argument_list|()
argument_list|,
name|additionalPropertiesProvider
operator|.
name|getCurrentReplicationState
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isPartitionExternal
argument_list|()
condition|)
block|{
comment|// Replication destination will not be external
name|partition
operator|.
name|putToParameters
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"FALSE"
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|jsonGenerator
operator|.
name|writeString
argument_list|(
name|serializer
operator|.
name|toString
argument_list|(
name|partition
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|jsonGenerator
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|ERROR_SERIALIZE_METASTORE
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isPartitionExternal
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|partition
operator|.
name|getParameters
argument_list|()
decl_stmt|;
return|return
name|params
operator|.
name|containsKey
argument_list|(
literal|"EXTERNAL"
argument_list|)
operator|&&
name|params
operator|.
name|get
argument_list|(
literal|"EXTERNAL"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TRUE"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

