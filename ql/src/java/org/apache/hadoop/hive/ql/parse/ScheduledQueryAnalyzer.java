begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|builder
operator|.
name|CronBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|CronType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|definition
operator|.
name|CronDefinition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|definition
operator|.
name|CronDefinitionBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|field
operator|.
name|expression
operator|.
name|FieldExpression
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ScheduledQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ScheduledQuery
operator|.
name|_Fields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ScheduledQueryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ScheduledQueryMaintenanceRequestType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|scheduled
operator|.
name|ScheduledQueryMaintenanceWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|TimestampParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|field
operator|.
name|expression
operator|.
name|FieldExpressionFactory
operator|.
name|always
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|field
operator|.
name|expression
operator|.
name|FieldExpressionFactory
operator|.
name|on
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|field
operator|.
name|expression
operator|.
name|FieldExpressionFactory
operator|.
name|every
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|cronutils
operator|.
name|model
operator|.
name|field
operator|.
name|expression
operator|.
name|FieldExpressionFactory
operator|.
name|questionMark
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|ScheduledQueryAnalyzer
extends|extends
name|BaseSemanticAnalyzer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ScheduledQueryAnalyzer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ScheduledQueryAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyzeInternal
parameter_list|(
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ScheduledQueryMaintenanceWork
name|work
decl_stmt|;
name|ScheduledQueryMaintenanceRequestType
name|type
init|=
name|translateAstType
argument_list|(
name|ast
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|ScheduledQuery
name|parsedSchq
init|=
name|interpretAstNode
argument_list|(
name|ast
argument_list|)
decl_stmt|;
name|ScheduledQuery
name|schq
init|=
name|fillScheduledQuery
argument_list|(
name|type
argument_list|,
name|parsedSchq
argument_list|)
decl_stmt|;
name|checkAuthorization
argument_list|(
name|type
argument_list|,
name|schq
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"scheduled query operation: "
operator|+
name|type
operator|+
literal|" "
operator|+
name|schq
argument_list|)
expr_stmt|;
try|try
block|{
name|schq
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"ScheduledQuery is invalid"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|work
operator|=
operator|new
name|ScheduledQueryMaintenanceWork
argument_list|(
name|type
argument_list|,
name|schq
argument_list|)
expr_stmt|;
name|rootTasks
operator|.
name|add
argument_list|(
name|TaskFactory
operator|.
name|get
argument_list|(
name|work
argument_list|)
argument_list|)
expr_stmt|;
name|queryState
operator|.
name|setCommandType
argument_list|(
name|toHiveOperation
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ScheduledQuery
name|fillScheduledQuery
parameter_list|(
name|ScheduledQueryMaintenanceRequestType
name|type
parameter_list|,
name|ScheduledQuery
name|schqChanges
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|type
operator|==
name|ScheduledQueryMaintenanceRequestType
operator|.
name|CREATE
condition|)
block|{
return|return
name|composeOverlayObject
argument_list|(
name|schqChanges
argument_list|,
name|buildEmptySchq
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
try|try
block|{
name|ScheduledQuery
name|schqStored
init|=
name|db
operator|.
name|getMSC
argument_list|()
operator|.
name|getScheduledQuery
argument_list|(
name|schqChanges
operator|.
name|getScheduleKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schqChanges
operator|.
name|isSetUser
argument_list|()
condition|)
block|{
comment|// in case the user will change; we have to run an authorization check beforehand
name|checkAuthorization
argument_list|(
name|type
argument_list|,
name|schqStored
argument_list|)
expr_stmt|;
block|}
return|return
name|composeOverlayObject
argument_list|(
name|schqChanges
argument_list|,
name|schqStored
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"unable to get Scheduled query"
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|ScheduledQuery
name|buildEmptySchq
parameter_list|()
block|{
name|ScheduledQuery
name|ret
init|=
operator|new
name|ScheduledQuery
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setEnabled
argument_list|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SCHEDULED_QUERIES_CREATE_AS_ENABLED
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setUser
argument_list|(
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|String
name|getUserName
parameter_list|()
block|{
name|SessionState
name|sessionState
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionState
operator|.
name|getAuthenticator
argument_list|()
operator|!=
literal|null
operator|&&
name|sessionState
operator|.
name|getAuthenticator
argument_list|()
operator|.
name|getUserName
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|sessionState
operator|.
name|getAuthenticator
argument_list|()
operator|.
name|getUserName
argument_list|()
return|;
block|}
name|String
name|userName
init|=
name|sessionState
operator|.
name|getUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|userName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"userName is unset; this is unexpected"
argument_list|)
throw|;
block|}
return|return
name|userName
return|;
block|}
comment|/**    * Composes an overlay object.    *    * Output is a flattened view of the input objects.    * having the value from the first one which has it defined from the overlays.    */
specifier|private
name|ScheduledQuery
name|composeOverlayObject
parameter_list|(
name|ScheduledQuery
modifier|...
name|overlays
parameter_list|)
block|{
name|ScheduledQuery
name|ret
init|=
operator|new
name|ScheduledQuery
argument_list|()
decl_stmt|;
name|_Fields
index|[]
name|q
init|=
name|ScheduledQuery
operator|.
name|_Fields
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|_Fields
name|field
range|:
name|q
control|)
block|{
for|for
control|(
name|ScheduledQuery
name|o
range|:
name|overlays
control|)
block|{
if|if
condition|(
name|o
operator|.
name|isSet
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|ret
operator|.
name|setFieldValue
argument_list|(
name|field
argument_list|,
name|o
operator|.
name|getFieldValue
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|ScheduledQueryMaintenanceRequestType
name|translateAstType
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SemanticException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_CREATE_SCHEDULED_QUERY
case|:
return|return
name|ScheduledQueryMaintenanceRequestType
operator|.
name|CREATE
return|;
case|case
name|HiveParser
operator|.
name|TOK_ALTER_SCHEDULED_QUERY
case|:
return|return
name|ScheduledQueryMaintenanceRequestType
operator|.
name|ALTER
return|;
case|case
name|HiveParser
operator|.
name|TOK_DROP_SCHEDULED_QUERY
case|:
return|return
name|ScheduledQueryMaintenanceRequestType
operator|.
name|DROP
return|;
default|default:
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Can't handle: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ScheduledQuery
name|interpretAstNode
parameter_list|(
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// child0 is the schedule name
name|String
name|scheduleName
init|=
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|clusterNamespace
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SCHEDULED_QUERIES_NAMESPACE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"scheduled query namespace:"
operator|+
name|clusterNamespace
argument_list|)
expr_stmt|;
name|ScheduledQueryKey
name|key
init|=
operator|new
name|ScheduledQueryKey
argument_list|(
name|scheduleName
argument_list|,
name|clusterNamespace
argument_list|)
decl_stmt|;
name|ScheduledQuery
name|ret
init|=
operator|new
name|ScheduledQuery
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// child 1..n are arguments/options/etc
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|ast
operator|.
name|getChildCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|processScheduledQueryAstNode
argument_list|(
name|ret
argument_list|,
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|processScheduledQueryAstNode
parameter_list|(
name|ScheduledQuery
name|schq
parameter_list|,
name|ASTNode
name|node
parameter_list|)
throws|throws
name|SemanticException
block|{
switch|switch
condition|(
name|node
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_ENABLE
case|:
name|schq
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
case|case
name|HiveParser
operator|.
name|TOK_DISABLE
case|:
name|schq
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
case|case
name|HiveParser
operator|.
name|TOK_CRON
case|:
name|schq
operator|.
name|setSchedule
argument_list|(
name|unescapeSQLString
argument_list|(
name|node
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
name|HiveParser
operator|.
name|TOK_SCHEDULE
case|:
name|schq
operator|.
name|setSchedule
argument_list|(
name|interpretEveryNode
argument_list|(
name|parseInteger
argument_list|(
name|node
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|node
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
name|parseTimeStamp
argument_list|(
name|node
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
name|HiveParser
operator|.
name|TOK_EXECUTED_AS
case|:
name|schq
operator|.
name|setUser
argument_list|(
name|unescapeSQLString
argument_list|(
name|node
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
name|HiveParser
operator|.
name|TOK_QUERY
case|:
name|schq
operator|.
name|setQuery
argument_list|(
name|unparseTree
argument_list|(
name|node
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
default|default:
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Unexpected token: "
operator|+
name|node
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|interpretEveryNode
parameter_list|(
name|int
name|every
parameter_list|,
name|int
name|intervalToken
parameter_list|,
name|Timestamp
name|ts
parameter_list|)
throws|throws
name|SemanticException
block|{
name|CronBuilder
name|b
init|=
name|getDefaultCronBuilder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|intervalToken
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_INTERVAL_DAY_LITERAL
case|:
if|if
condition|(
name|every
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"EVERY "
operator|+
name|every
operator|+
literal|" DAY is not supported; only EVERY DAY is supported"
argument_list|)
throw|;
block|}
name|b
operator|.
name|withSecond
argument_list|(
name|on
argument_list|(
name|ts
operator|.
name|getSeconds
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|withMinute
argument_list|(
name|on
argument_list|(
name|ts
operator|.
name|getMinutes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|withHour
argument_list|(
name|on
argument_list|(
name|ts
operator|.
name|getHours
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_INTERVAL_HOUR_LITERAL
case|:
name|b
operator|.
name|withSecond
argument_list|(
name|on
argument_list|(
name|ts
operator|.
name|getSeconds
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|withMinute
argument_list|(
name|on
argument_list|(
name|ts
operator|.
name|getMinutes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|withHour
argument_list|(
name|every
argument_list|(
name|on0
argument_list|(
name|ts
operator|.
name|getHours
argument_list|()
argument_list|)
argument_list|,
name|every
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_INTERVAL_MINUTE_LITERAL
case|:
name|b
operator|.
name|withSecond
argument_list|(
name|on
argument_list|(
name|ts
operator|.
name|getSeconds
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|withMinute
argument_list|(
name|every
argument_list|(
name|on0
argument_list|(
name|ts
operator|.
name|getMinutes
argument_list|()
argument_list|)
argument_list|,
name|every
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_INTERVAL_SECOND_LITERAL
case|:
name|b
operator|.
name|withSecond
argument_list|(
name|every
argument_list|(
name|on0
argument_list|(
name|ts
operator|.
name|getSeconds
argument_list|()
argument_list|)
argument_list|,
name|every
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"not supported schedule interval(only HOUR/MINUTE/SECOND is supported)"
argument_list|)
throw|;
block|}
return|return
name|b
operator|.
name|instance
argument_list|()
operator|.
name|asString
argument_list|()
return|;
block|}
specifier|private
name|FieldExpression
name|on0
parameter_list|(
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
return|return
name|always
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|on
argument_list|(
name|n
argument_list|)
return|;
block|}
block|}
specifier|private
name|int
name|parseInteger
parameter_list|(
name|Tree
name|node
parameter_list|,
name|int
name|def
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return
name|def
return|;
block|}
else|else
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|node
operator|.
name|getText
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
name|Timestamp
name|parseTimeStamp
parameter_list|(
name|Tree
name|offsetNode
parameter_list|)
block|{
if|if
condition|(
name|offsetNode
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Timestamp
argument_list|()
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|s
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|s
operator|.
name|add
argument_list|(
name|TimestampParser
operator|.
name|ISO_8601_FORMAT_STR
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|TimestampParser
operator|.
name|RFC_1123_FORMAT_STR
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
literal|"HH:mm:ss"
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
literal|"H:mm:ss"
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
literal|"HH:mm"
argument_list|)
expr_stmt|;
name|TimestampParser
name|p
init|=
operator|new
name|TimestampParser
argument_list|(
name|s
argument_list|)
decl_stmt|;
return|return
name|p
operator|.
name|parseTimestamp
argument_list|(
name|unescapeSQLString
argument_list|(
name|offsetNode
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|CronBuilder
name|getDefaultCronBuilder
parameter_list|()
block|{
name|CronDefinition
name|definition
init|=
name|CronDefinitionBuilder
operator|.
name|instanceDefinitionFor
argument_list|(
name|CronType
operator|.
name|QUARTZ
argument_list|)
decl_stmt|;
name|CronBuilder
name|b
init|=
name|CronBuilder
operator|.
name|cron
argument_list|(
name|definition
argument_list|)
operator|.
name|withYear
argument_list|(
name|always
argument_list|()
argument_list|)
operator|.
name|withDoM
argument_list|(
name|always
argument_list|()
argument_list|)
operator|.
name|withMonth
argument_list|(
name|always
argument_list|()
argument_list|)
operator|.
name|withDoW
argument_list|(
name|questionMark
argument_list|()
argument_list|)
operator|.
name|withHour
argument_list|(
name|always
argument_list|()
argument_list|)
operator|.
name|withMinute
argument_list|(
name|always
argument_list|()
argument_list|)
operator|.
name|withMinute
argument_list|(
name|always
argument_list|()
argument_list|)
operator|.
name|withSecond
argument_list|(
name|always
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|b
return|;
block|}
specifier|private
name|void
name|checkAuthorization
parameter_list|(
name|ScheduledQueryMaintenanceRequestType
name|type
parameter_list|,
name|ScheduledQuery
name|schq
parameter_list|)
throws|throws
name|SemanticException
block|{
name|boolean
name|schqAuthorization
init|=
operator|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthorizerV2
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SECURITY_AUTHORIZATION_SCHEDULED_QUERIES_SUPPORTED
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|schqAuthorization
condition|)
block|{
name|String
name|currentUser
init|=
name|getUserName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equal
argument_list|(
name|currentUser
argument_list|,
name|schq
operator|.
name|getUser
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveAccessControlException
argument_list|(
literal|"Authorization of scheduled queries is not enabled - only owners may change scheduled queries (currentUser: "
operator|+
name|currentUser
operator|+
literal|", owner: "
operator|+
name|schq
operator|.
name|getUser
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|HiveOperationType
name|opType
init|=
name|toHiveOpType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|privObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|HivePrivilegeObject
argument_list|>
argument_list|()
decl_stmt|;
name|ScheduledQueryKey
name|key
init|=
name|schq
operator|.
name|getScheduleKey
argument_list|()
decl_stmt|;
name|privObjects
operator|.
name|add
argument_list|(
name|HivePrivilegeObject
operator|.
name|forScheduledQuery
argument_list|(
name|schq
operator|.
name|getUser
argument_list|()
argument_list|,
name|key
operator|.
name|getClusterNamespace
argument_list|()
argument_list|,
name|key
operator|.
name|getScheduleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthorizerV2
argument_list|()
operator|.
name|checkPrivileges
argument_list|(
name|opType
argument_list|,
name|privObjects
argument_list|,
name|privObjects
argument_list|,
operator|new
name|HiveAuthzContext
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|HiveOperationType
name|toHiveOpType
parameter_list|(
name|ScheduledQueryMaintenanceRequestType
name|type
parameter_list|)
throws|throws
name|SemanticException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CREATE
case|:
return|return
name|HiveOperationType
operator|.
name|CREATE_SCHEDULED_QUERY
return|;
case|case
name|ALTER
case|:
return|return
name|HiveOperationType
operator|.
name|ALTER_SCHEDULED_QUERY
return|;
case|case
name|DROP
case|:
return|return
name|HiveOperationType
operator|.
name|DROP_SCHEDULED_QUERY
return|;
default|default:
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Unexpected type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
specifier|private
name|HiveOperation
name|toHiveOperation
parameter_list|(
name|ScheduledQueryMaintenanceRequestType
name|type
parameter_list|)
throws|throws
name|SemanticException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CREATE
case|:
return|return
name|HiveOperation
operator|.
name|CREATE_SCHEDULED_QUERY
return|;
case|case
name|ALTER
case|:
return|return
name|HiveOperation
operator|.
name|ALTER_SCHEDULED_QUERY
return|;
case|case
name|DROP
case|:
return|return
name|HiveOperation
operator|.
name|DROP_SCHEDULED_QUERY
return|;
default|default:
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Unexpected type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**    * Unparses the input AST node into correctly quoted sql string.    */
specifier|private
name|String
name|unparseTree
parameter_list|(
name|Tree
name|child
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ASTNode
name|input
init|=
operator|(
name|ASTNode
operator|)
name|child
decl_stmt|;
operator|(
call|(
name|HiveConf
call|)
argument_list|(
name|ctx
operator|.
name|getConf
argument_list|()
argument_list|)
operator|)
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_CBO_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|BaseSemanticAnalyzer
name|sem
init|=
name|SemanticAnalyzerFactory
operator|.
name|get
argument_list|(
name|queryState
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setEnableUnparse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sem
operator|.
name|analyze
argument_list|(
name|input
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|sem
operator|.
name|validate
argument_list|()
expr_stmt|;
name|sem
operator|.
name|executeUnparseTranlations
argument_list|()
expr_stmt|;
name|String
name|expandedText
init|=
name|ctx
operator|.
name|getTokenRewriteStream
argument_list|()
operator|.
name|toString
argument_list|(
name|input
operator|.
name|getTokenStartIndex
argument_list|()
argument_list|,
name|input
operator|.
name|getTokenStopIndex
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|expandedText
return|;
block|}
block|}
end_class

end_unit

