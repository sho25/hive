begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TezWork
operator|.
name|VertexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/*  * This class is the payload for custom vertex. It serializes and de-serializes  * @numBuckets: the number of buckets of the "big table"  * @vertexType: this is the type of vertex and differentiates between bucket map join and SMB joins  * @numInputs: The number of inputs that are directly connected to the vertex (MRInput/MultiMRInput).  *             In case of bucket map join, it is always 1.  * @inputName: This is the name of the input. Used in case of SMB joins. Empty in case of BucketMapJoin  */
end_comment

begin_class
specifier|public
class|class
name|CustomVertexConfiguration
implements|implements
name|Writable
block|{
specifier|private
name|int
name|numBuckets
decl_stmt|;
specifier|private
name|VertexType
name|vertexType
init|=
name|VertexType
operator|.
name|AUTO_INITIALIZED_EDGES
decl_stmt|;
specifier|private
name|int
name|numInputs
decl_stmt|;
specifier|private
name|String
name|inputName
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|inputToBucketMap
decl_stmt|;
specifier|public
name|CustomVertexConfiguration
parameter_list|()
block|{   }
comment|// this is the constructor to use for the Bucket map join case.
specifier|public
name|CustomVertexConfiguration
parameter_list|(
name|int
name|numBuckets
parameter_list|,
name|VertexType
name|vertexType
parameter_list|)
block|{
name|this
argument_list|(
name|numBuckets
argument_list|,
name|vertexType
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// this is the constructor to use for SMB.
specifier|public
name|CustomVertexConfiguration
parameter_list|(
name|int
name|numBuckets
parameter_list|,
name|VertexType
name|vertexType
parameter_list|,
name|String
name|inputName
parameter_list|,
name|int
name|numInputs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|inputToBucketMap
parameter_list|)
block|{
name|this
operator|.
name|numBuckets
operator|=
name|numBuckets
expr_stmt|;
name|this
operator|.
name|vertexType
operator|=
name|vertexType
expr_stmt|;
name|this
operator|.
name|numInputs
operator|=
name|numInputs
expr_stmt|;
name|this
operator|.
name|inputName
operator|=
name|inputName
expr_stmt|;
name|this
operator|.
name|inputToBucketMap
operator|=
name|inputToBucketMap
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|vertexType
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|numBuckets
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|numInputs
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|inputName
argument_list|)
expr_stmt|;
name|int
name|sz
init|=
name|inputToBucketMap
operator|!=
literal|null
condition|?
name|inputToBucketMap
operator|.
name|size
argument_list|()
else|:
literal|0
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|sz
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|inputToBucketMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|vertexType
operator|=
name|VertexType
operator|.
name|values
argument_list|()
index|[
name|in
operator|.
name|readInt
argument_list|()
index|]
expr_stmt|;
name|this
operator|.
name|numBuckets
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|numInputs
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|inputName
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|int
name|sz
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|sz
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|inputToBucketMap
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|inputToBucketMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|inputToBucketMap
operator|.
name|put
argument_list|(
name|in
operator|.
name|readUTF
argument_list|()
argument_list|,
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|getNumBuckets
parameter_list|()
block|{
return|return
name|numBuckets
return|;
block|}
specifier|public
name|VertexType
name|getVertexType
parameter_list|()
block|{
return|return
name|vertexType
return|;
block|}
specifier|public
name|String
name|getInputName
parameter_list|()
block|{
return|return
name|inputName
return|;
block|}
specifier|public
name|int
name|getNumInputs
parameter_list|()
block|{
return|return
name|numInputs
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getInputToBucketMap
parameter_list|()
block|{
return|return
name|inputToBucketMap
return|;
block|}
block|}
end_class

end_unit

