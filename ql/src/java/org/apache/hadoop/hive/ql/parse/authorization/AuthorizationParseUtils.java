begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|privilege
operator|.
name|PrincipalDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_comment
comment|/**  * Utility functions for creating objects relevant for authorization operations  * from AST  */
end_comment

begin_class
specifier|public
class|class
name|AuthorizationParseUtils
block|{
specifier|public
specifier|static
name|PrincipalDesc
name|getPrincipalDesc
parameter_list|(
name|ASTNode
name|principal
parameter_list|)
block|{
name|PrincipalType
name|type
init|=
name|getPrincipalType
argument_list|(
name|principal
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|String
name|text
init|=
name|principal
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|principalName
init|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|text
argument_list|)
decl_stmt|;
return|return
operator|new
name|PrincipalDesc
argument_list|(
name|principalName
argument_list|,
name|type
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|PrincipalType
name|getPrincipalType
parameter_list|(
name|ASTNode
name|principal
parameter_list|)
block|{
switch|switch
condition|(
name|principal
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_USER
case|:
return|return
name|PrincipalType
operator|.
name|USER
return|;
case|case
name|HiveParser
operator|.
name|TOK_GROUP
case|:
return|return
name|PrincipalType
operator|.
name|GROUP
return|;
case|case
name|HiveParser
operator|.
name|TOK_ROLE
case|:
return|return
name|PrincipalType
operator|.
name|ROLE
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|PrincipalDesc
argument_list|>
name|analyzePrincipalListDef
parameter_list|(
name|ASTNode
name|node
parameter_list|)
block|{
name|List
argument_list|<
name|PrincipalDesc
argument_list|>
name|principalList
init|=
operator|new
name|ArrayList
argument_list|<
name|PrincipalDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|node
operator|.
name|getChildCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|principalList
operator|.
name|add
argument_list|(
name|getPrincipalDesc
argument_list|(
operator|(
name|ASTNode
operator|)
name|node
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|principalList
return|;
block|}
block|}
end_class

end_unit

