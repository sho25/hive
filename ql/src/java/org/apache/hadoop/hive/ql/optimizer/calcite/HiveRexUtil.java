begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|HiveRexUtil
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveRexUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Simplifies a boolean expression.    *    *<p>In particular:</p>    *<ul>    *<li>{@code simplify(x = 1 AND y = 2 AND NOT x = 1)}    * returns {@code y = 2}</li>    *<li>{@code simplify(x = 1 AND FALSE)}    * returns {@code FALSE}</li>    *</ul>    */
specifier|public
specifier|static
name|RexNode
name|simplify
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexNode
name|e
parameter_list|)
block|{
return|return
name|simplify
argument_list|(
name|rexBuilder
argument_list|,
name|e
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RexNode
name|simplify
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexNode
name|e
parameter_list|,
name|boolean
name|unknownAsFalse
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|AND
case|:
return|return
name|simplifyAnd
argument_list|(
name|rexBuilder
argument_list|,
operator|(
name|RexCall
operator|)
name|e
argument_list|,
name|unknownAsFalse
argument_list|)
return|;
case|case
name|OR
case|:
return|return
name|simplifyOr
argument_list|(
name|rexBuilder
argument_list|,
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
case|case
name|NOT
case|:
return|return
name|simplifyNot
argument_list|(
name|rexBuilder
argument_list|,
operator|(
name|RexCall
operator|)
name|e
argument_list|)
return|;
case|case
name|CASE
case|:
return|return
name|simplifyCase
argument_list|(
name|rexBuilder
argument_list|,
operator|(
name|RexCall
operator|)
name|e
argument_list|,
name|unknownAsFalse
argument_list|)
return|;
case|case
name|IS_NULL
case|:
return|return
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|?
name|e
else|:
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
case|case
name|IS_NOT_NULL
case|:
return|return
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|?
name|e
else|:
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
default|default:
return|return
name|e
return|;
block|}
block|}
specifier|private
specifier|static
name|RexNode
name|simplifyNot
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
specifier|final
name|RexNode
name|a
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|a
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|NOT
case|:
comment|// NOT NOT x ==> x
return|return
name|simplify
argument_list|(
name|rexBuilder
argument_list|,
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
specifier|final
name|SqlKind
name|negateKind
init|=
name|a
operator|.
name|getKind
argument_list|()
operator|.
name|negate
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getKind
argument_list|()
operator|!=
name|negateKind
condition|)
block|{
return|return
name|simplify
argument_list|(
name|rexBuilder
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|op
argument_list|(
name|negateKind
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|final
name|SqlKind
name|negateKind2
init|=
name|negate
argument_list|(
name|a
operator|.
name|getKind
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getKind
argument_list|()
operator|!=
name|negateKind2
condition|)
block|{
return|return
name|simplify
argument_list|(
name|rexBuilder
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|op
argument_list|(
name|negateKind2
argument_list|)
argument_list|,
operator|(
operator|(
name|RexCall
operator|)
name|a
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
name|call
return|;
block|}
specifier|private
specifier|static
name|RexNode
name|simplifyCase
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|boolean
name|unknownAsFalse
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newOperands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|constainsNullableCase
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operands
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|operand
init|=
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|RexUtil
operator|.
name|isCasePredicate
argument_list|(
name|call
argument_list|,
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
name|operand
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
comment|// Predicate is always TRUE. Make value the ELSE and quit.
name|newOperands
operator|.
name|add
argument_list|(
name|operands
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|operand
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
name|constainsNullableCase
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
elseif|else
if|if
condition|(
name|operand
operator|.
name|isAlwaysFalse
argument_list|()
operator|||
name|RexUtil
operator|.
name|isNull
argument_list|(
name|operand
argument_list|)
condition|)
block|{
comment|// Predicate is always FALSE or NULL. Skip predicate and value.
operator|++
name|i
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|operand
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
name|constainsNullableCase
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|unknownAsFalse
operator|&&
name|RexUtil
operator|.
name|isNull
argument_list|(
name|operand
argument_list|)
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|.
name|add
argument_list|(
name|operand
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|newOperands
operator|.
name|add
argument_list|(
name|operand
argument_list|)
expr_stmt|;
block|}
assert|assert
name|newOperands
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|==
literal|1
assert|;
if|if
condition|(
name|newOperands
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|||
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|newOperands
operator|.
name|get
argument_list|(
name|newOperands
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
name|trueFalse
label|:
if|if
condition|(
name|call
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|BOOLEAN
operator|&&
operator|(
operator|!
name|constainsNullableCase
operator|||
name|unknownAsFalse
operator|)
condition|)
block|{
comment|// Optimize CASE where every branch returns constant true or constant
comment|// false:
comment|//   CASE
comment|//   WHEN p1 THEN TRUE
comment|//   WHEN p2 THEN FALSE
comment|//   WHEN p3 THEN TRUE
comment|//   ELSE FALSE
comment|//   END
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
argument_list|>
name|pairs
init|=
name|casePairs
argument_list|(
name|rexBuilder
argument_list|,
name|newOperands
argument_list|)
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
argument_list|>
name|pair
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|pairs
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|pair
operator|.
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|isAlwaysTrue
argument_list|()
operator|&&
operator|!
name|pair
operator|.
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|isAlwaysFalse
argument_list|()
operator|&&
operator|(
operator|!
name|unknownAsFalse
operator|||
operator|!
name|RexUtil
operator|.
name|isNull
argument_list|(
name|pair
operator|.
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|)
condition|)
block|{
break|break
name|trueFalse
break|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|notTerms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
argument_list|>
name|pair
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|pairs
argument_list|)
control|)
block|{
if|if
condition|(
name|pair
operator|.
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|RexUtil
operator|.
name|andNot
argument_list|(
name|rexBuilder
argument_list|,
name|pair
operator|.
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|notTerms
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|notTerms
operator|.
name|add
argument_list|(
name|pair
operator|.
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|RexUtil
operator|.
name|composeDisjunction
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|newOperands
operator|.
name|equals
argument_list|(
name|operands
argument_list|)
condition|)
block|{
return|return
name|call
return|;
block|}
return|return
name|call
operator|.
name|clone
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|newOperands
argument_list|)
return|;
block|}
comment|/** Given "CASE WHEN p1 THEN v1 ... ELSE e END"    * returns [(p1, v1), ..., (true, e)]. */
specifier|private
specifier|static
name|List
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
argument_list|>
name|casePairs
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operands
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|operands
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
operator|(
name|RexNode
operator|)
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
argument_list|,
name|Util
operator|.
name|last
argument_list|(
name|operands
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|RexNode
name|simplifyAnd
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexCall
name|e
parameter_list|,
name|boolean
name|unknownAsFalse
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|notTerms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|RelOptUtil
operator|.
name|decomposeConjunction
argument_list|(
name|e
argument_list|,
name|terms
argument_list|,
name|notTerms
argument_list|)
expr_stmt|;
if|if
condition|(
name|unknownAsFalse
condition|)
block|{
return|return
name|simplifyAnd2ForUnknownAsFalse
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|,
name|notTerms
argument_list|)
return|;
block|}
return|return
name|simplifyAnd2
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|,
name|notTerms
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RexNode
name|simplifyAnd2
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|notTerms
parameter_list|)
block|{
if|if
condition|(
name|terms
operator|.
name|contains
argument_list|(
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|terms
operator|.
name|isEmpty
argument_list|()
operator|&&
name|notTerms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|terms
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|notTerms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Make sure "x OR y OR x" (a single-term conjunction) gets simplified.
return|return
name|simplify
argument_list|(
name|rexBuilder
argument_list|,
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|// If one of the not-disjunctions is a disjunction that is wholly
comment|// contained in the disjunctions list, the expression is not
comment|// satisfiable.
comment|//
comment|// Example #1. x AND y AND z AND NOT (x AND y)  - not satisfiable
comment|// Example #2. x AND y AND NOT (x AND y)        - not satisfiable
comment|// Example #3. x AND y AND NOT (x AND y AND z)  - may be satisfiable
for|for
control|(
name|RexNode
name|notDisjunction
range|:
name|notTerms
control|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms2
init|=
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|notDisjunction
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|.
name|containsAll
argument_list|(
name|terms2
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
comment|// Add the NOT disjunctions back in.
for|for
control|(
name|RexNode
name|notDisjunction
range|:
name|notTerms
control|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|simplify
argument_list|(
name|rexBuilder
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|notDisjunction
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** As {@link #simplifyAnd2(RexBuilder, List, List)} but we assume that if the expression returns    * UNKNOWN it will be interpreted as FALSE. */
specifier|public
specifier|static
name|RexNode
name|simplifyAnd2ForUnknownAsFalse
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|notTerms
parameter_list|)
block|{
if|if
condition|(
name|terms
operator|.
name|contains
argument_list|(
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|terms
operator|.
name|isEmpty
argument_list|()
operator|&&
name|notTerms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|terms
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|notTerms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Make sure "x OR y OR x" (a single-term conjunction) gets simplified.
return|return
name|simplify
argument_list|(
name|rexBuilder
argument_list|,
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|// Try to simplify the expression
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|negatedTerms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|nullOperands
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RexNode
argument_list|>
name|notNullOperands
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|comparedOperands
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RexNode
name|term
init|=
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|HiveCalciteUtil
operator|.
name|isDeterministic
argument_list|(
name|term
argument_list|)
condition|)
block|{
continue|continue;
block|}
switch|switch
condition|(
name|term
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|term
decl_stmt|;
name|RexNode
name|left
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|comparedOperands
operator|.
name|add
argument_list|(
name|left
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// if it is a cast, we include the inner reference
if|if
condition|(
name|left
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CAST
condition|)
block|{
name|RexCall
name|leftCast
init|=
operator|(
name|RexCall
operator|)
name|left
decl_stmt|;
name|comparedOperands
operator|.
name|add
argument_list|(
name|leftCast
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RexNode
name|right
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|comparedOperands
operator|.
name|add
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// if it is a cast, we include the inner reference
if|if
condition|(
name|right
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CAST
condition|)
block|{
name|RexCall
name|rightCast
init|=
operator|(
name|RexCall
operator|)
name|right
decl_stmt|;
name|comparedOperands
operator|.
name|add
argument_list|(
name|rightCast
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Assume the expression a> 5 is part of a Filter condition.
comment|// Then we can derive the negated term: a<= 5.
comment|// But as the comparison is string based and thus operands order dependent,
comment|// we should also add the inverted negated term: 5>= a.
comment|// Observe that for creating the inverted term we invert the list of operands.
name|RexNode
name|negatedTerm
init|=
name|negate
argument_list|(
name|rexBuilder
argument_list|,
name|call
argument_list|)
decl_stmt|;
if|if
condition|(
name|negatedTerm
operator|!=
literal|null
condition|)
block|{
name|negatedTerms
operator|.
name|add
argument_list|(
name|negatedTerm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|RexNode
name|invertNegatedTerm
init|=
name|invert
argument_list|(
name|rexBuilder
argument_list|,
operator|(
name|RexCall
operator|)
name|negatedTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|invertNegatedTerm
operator|!=
literal|null
condition|)
block|{
name|negatedTerms
operator|.
name|add
argument_list|(
name|invertNegatedTerm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|IN
case|:
name|comparedOperands
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|term
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|BETWEEN
case|:
name|comparedOperands
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|term
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|IS_NOT_NULL
case|:
name|notNullOperands
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|term
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|terms
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|--
name|i
expr_stmt|;
break|break;
case|case
name|IS_NULL
case|:
name|nullOperands
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|term
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If one column should be null and is in a comparison predicate,
comment|// it is not satisfiable.
comment|// Example. IS NULL(x) AND x< 5  - not satisfiable
if|if
condition|(
operator|!
name|Collections
operator|.
name|disjoint
argument_list|(
name|nullOperands
argument_list|,
name|comparedOperands
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// Remove not necessary IS NOT NULL expressions.
comment|//
comment|// Example. IS NOT NULL(x) AND x< 5  : x< 5
for|for
control|(
name|RexNode
name|operand
range|:
name|notNullOperands
control|)
block|{
if|if
condition|(
operator|!
name|comparedOperands
operator|.
name|contains
argument_list|(
name|operand
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If one of the not-disjunctions is a disjunction that is wholly
comment|// contained in the disjunctions list, the expression is not
comment|// satisfiable.
comment|//
comment|// Example #1. x AND y AND z AND NOT (x AND y)  - not satisfiable
comment|// Example #2. x AND y AND NOT (x AND y)        - not satisfiable
comment|// Example #3. x AND y AND NOT (x AND y AND z)  - may be satisfiable
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|termsSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|terms
argument_list|,
name|HiveCalciteUtil
operator|.
name|REX_STR_FN
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|notDisjunction
range|:
name|notTerms
control|)
block|{
if|if
condition|(
operator|!
name|HiveCalciteUtil
operator|.
name|isDeterministic
argument_list|(
name|notDisjunction
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|terms2Set
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|notDisjunction
argument_list|)
argument_list|,
name|HiveCalciteUtil
operator|.
name|REX_STR_FN
argument_list|)
decl_stmt|;
if|if
condition|(
name|termsSet
operator|.
name|containsAll
argument_list|(
name|terms2Set
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
comment|// Add the NOT disjunctions back in.
for|for
control|(
name|RexNode
name|notDisjunction
range|:
name|notTerms
control|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|simplify
argument_list|(
name|rexBuilder
argument_list|,
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|notDisjunction
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The negated terms: only deterministic expressions
for|for
control|(
name|String
name|negatedTerm
range|:
name|negatedTerms
control|)
block|{
if|if
condition|(
name|termsSet
operator|.
name|contains
argument_list|(
name|negatedTerm
argument_list|)
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** Simplifies OR(x, x) into x, and similar. */
specifier|public
specifier|static
name|RexNode
name|simplifyOr
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
assert|assert
name|call
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|OR
assert|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|terms
init|=
name|RelOptUtil
operator|.
name|disjunctions
argument_list|(
name|call
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RexNode
name|term
init|=
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|term
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
if|if
condition|(
operator|!
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|term
argument_list|)
condition|)
block|{
if|if
condition|(
name|RexLiteral
operator|.
name|booleanValue
argument_list|(
name|term
argument_list|)
condition|)
block|{
return|return
name|term
return|;
comment|// true
block|}
else|else
block|{
name|terms
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|RexUtil
operator|.
name|composeDisjunction
argument_list|(
name|rexBuilder
argument_list|,
name|terms
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|RexCall
name|negate
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
operator|(
name|RexCall
operator|)
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|op
argument_list|(
name|negate
argument_list|(
name|call
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|SqlKind
name|negate
parameter_list|(
name|SqlKind
name|kind
parameter_list|)
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|EQUALS
case|:
return|return
name|SqlKind
operator|.
name|NOT_EQUALS
return|;
case|case
name|NOT_EQUALS
case|:
return|return
name|SqlKind
operator|.
name|EQUALS
return|;
case|case
name|LESS_THAN
case|:
return|return
name|SqlKind
operator|.
name|GREATER_THAN_OR_EQUAL
return|;
case|case
name|GREATER_THAN
case|:
return|return
name|SqlKind
operator|.
name|LESS_THAN_OR_EQUAL
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
name|SqlKind
operator|.
name|GREATER_THAN
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|SqlKind
operator|.
name|LESS_THAN
return|;
block|}
return|return
name|kind
return|;
block|}
specifier|private
specifier|static
name|RexCall
name|invert
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexCall
name|call
parameter_list|)
block|{
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
return|return
operator|(
name|RexCall
operator|)
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|Lists
operator|.
name|reverse
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|NOT_EQUALS
case|:
return|return
operator|(
name|RexCall
operator|)
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT_EQUALS
argument_list|,
name|Lists
operator|.
name|reverse
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|LESS_THAN
case|:
return|return
operator|(
name|RexCall
operator|)
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
argument_list|,
name|Lists
operator|.
name|reverse
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|GREATER_THAN
case|:
return|return
operator|(
name|RexCall
operator|)
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
argument_list|,
name|Lists
operator|.
name|reverse
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
operator|(
name|RexCall
operator|)
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN_OR_EQUAL
argument_list|,
name|Lists
operator|.
name|reverse
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
operator|(
name|RexCall
operator|)
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN_OR_EQUAL
argument_list|,
name|Lists
operator|.
name|reverse
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|SqlOperator
name|op
parameter_list|(
name|SqlKind
name|kind
parameter_list|)
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|IS_FALSE
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|IS_FALSE
return|;
case|case
name|IS_TRUE
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|IS_TRUE
return|;
case|case
name|IS_UNKNOWN
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|IS_UNKNOWN
return|;
case|case
name|IS_NULL
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|IS_NULL
return|;
case|case
name|IS_NOT_FALSE
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|IS_NOT_FALSE
return|;
case|case
name|IS_NOT_TRUE
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|IS_NOT_TRUE
return|;
case|case
name|IS_NOT_NULL
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
return|;
case|case
name|EQUALS
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|EQUALS
return|;
case|case
name|NOT_EQUALS
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|NOT_EQUALS
return|;
case|case
name|LESS_THAN
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
return|;
case|case
name|GREATER_THAN
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|LESS_THAN_OR_EQUAL
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN_OR_EQUAL
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|kind
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|SqlKind
name|invert
parameter_list|(
name|SqlKind
name|kind
parameter_list|)
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|EQUALS
case|:
return|return
name|SqlKind
operator|.
name|EQUALS
return|;
case|case
name|NOT_EQUALS
case|:
return|return
name|SqlKind
operator|.
name|NOT_EQUALS
return|;
case|case
name|LESS_THAN
case|:
return|return
name|SqlKind
operator|.
name|GREATER_THAN
return|;
case|case
name|GREATER_THAN
case|:
return|return
name|SqlKind
operator|.
name|LESS_THAN
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
name|SqlKind
operator|.
name|GREATER_THAN_OR_EQUAL
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|SqlKind
operator|.
name|LESS_THAN_OR_EQUAL
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
class|class
name|ExprSimplifier
extends|extends
name|RexShuttle
block|{
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|unknownAsFalse
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|RexNode
argument_list|,
name|Boolean
argument_list|>
name|unknownAsFalseMap
decl_stmt|;
specifier|public
name|ExprSimplifier
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|boolean
name|unknownAsFalse
parameter_list|)
block|{
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
name|this
operator|.
name|unknownAsFalse
operator|=
name|unknownAsFalse
expr_stmt|;
name|this
operator|.
name|unknownAsFalseMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
name|Boolean
name|unknownAsFalseCall
init|=
name|unknownAsFalse
decl_stmt|;
if|if
condition|(
name|unknownAsFalseCall
condition|)
block|{
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|AND
case|:
case|case
name|CASE
case|:
name|unknownAsFalseCall
operator|=
name|this
operator|.
name|unknownAsFalseMap
operator|.
name|get
argument_list|(
name|call
argument_list|)
expr_stmt|;
if|if
condition|(
name|unknownAsFalseCall
operator|==
literal|null
condition|)
block|{
comment|// Top operator
name|unknownAsFalseCall
operator|=
literal|true
expr_stmt|;
block|}
break|break;
default|default:
name|unknownAsFalseCall
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|RexNode
name|operand
range|:
name|call
operator|.
name|operands
control|)
block|{
name|this
operator|.
name|unknownAsFalseMap
operator|.
name|put
argument_list|(
name|operand
argument_list|,
name|unknownAsFalseCall
argument_list|)
expr_stmt|;
block|}
block|}
name|RexNode
name|node
init|=
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
decl_stmt|;
name|RexNode
name|simplifiedNode
init|=
name|HiveRexUtil
operator|.
name|simplify
argument_list|(
name|rexBuilder
argument_list|,
name|node
argument_list|,
name|unknownAsFalseCall
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
name|simplifiedNode
condition|)
block|{
return|return
name|node
return|;
block|}
if|if
condition|(
name|simplifiedNode
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|simplifiedNode
return|;
block|}
return|return
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|simplifiedNode
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

