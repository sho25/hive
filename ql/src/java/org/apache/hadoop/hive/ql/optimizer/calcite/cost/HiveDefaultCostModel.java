begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|cost
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_comment
comment|/**  * Default implementation of the cost model.  * Currently used by MR and Spark execution engines.  */
end_comment

begin_class
specifier|public
class|class
name|HiveDefaultCostModel
extends|extends
name|HiveCostModel
block|{
annotation|@
name|Override
specifier|public
name|RelOptCost
name|getDefaultCost
parameter_list|()
block|{
return|return
name|HiveCost
operator|.
name|FACTORY
operator|.
name|makeZeroCost
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|getAggregateCost
parameter_list|(
name|HiveAggregate
name|aggregate
parameter_list|)
block|{
return|return
name|HiveCost
operator|.
name|FACTORY
operator|.
name|makeZeroCost
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|EnumSet
argument_list|<
name|JoinAlgorithm
argument_list|>
name|getExecutableJoinAlgorithms
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
name|EnumSet
operator|.
name|of
argument_list|(
name|JoinAlgorithm
operator|.
name|NONE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RelOptCost
name|getJoinCost
parameter_list|(
name|HiveJoin
name|join
parameter_list|,
name|JoinAlgorithm
name|algorithm
parameter_list|)
block|{
name|RelOptCost
name|algorithmCost
decl_stmt|;
switch|switch
condition|(
name|algorithm
condition|)
block|{
case|case
name|NONE
case|:
name|algorithmCost
operator|=
name|computeJoinCardinalityCost
argument_list|(
name|join
argument_list|)
expr_stmt|;
break|break;
default|default:
name|algorithmCost
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|algorithmCost
return|;
block|}
specifier|private
specifier|static
name|RelOptCost
name|computeJoinCardinalityCost
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
name|double
name|leftRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|rightRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|HiveCost
operator|.
name|FACTORY
operator|.
name|makeCost
argument_list|(
name|leftRCount
operator|+
name|rightRCount
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

