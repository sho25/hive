begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Simple trigger expression for a rule.  */
end_comment

begin_class
specifier|public
class|class
name|TriggerExpression
implements|implements
name|Expression
block|{
specifier|private
name|CounterLimit
name|counterLimit
decl_stmt|;
specifier|private
name|Predicate
name|predicate
decl_stmt|;
specifier|public
name|TriggerExpression
parameter_list|(
specifier|final
name|CounterLimit
name|counter
parameter_list|,
specifier|final
name|Predicate
name|predicate
parameter_list|)
block|{
name|this
operator|.
name|counterLimit
operator|=
name|counter
expr_stmt|;
name|this
operator|.
name|predicate
operator|=
name|predicate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
specifier|final
name|long
name|current
parameter_list|)
block|{
if|if
condition|(
name|counterLimit
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|predicate
operator|.
name|equals
argument_list|(
name|Predicate
operator|.
name|GREATER_THAN
argument_list|)
condition|)
block|{
return|return
name|current
operator|>
name|counterLimit
operator|.
name|getLimit
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|CounterLimit
name|getCounterLimit
parameter_list|()
block|{
return|return
name|counterLimit
return|;
block|}
annotation|@
name|Override
specifier|public
name|Predicate
name|getPredicate
parameter_list|()
block|{
return|return
name|predicate
return|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|clone
parameter_list|()
block|{
return|return
operator|new
name|TriggerExpression
argument_list|(
name|counterLimit
operator|.
name|clone
argument_list|()
argument_list|,
name|predicate
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|counterLimit
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|predicate
operator|.
name|getSymbol
argument_list|()
operator|+
literal|" "
operator|+
name|counterLimit
operator|.
name|getLimit
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
name|counterLimit
operator|==
literal|null
condition|?
literal|31
else|:
literal|31
operator|*
name|counterLimit
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|hash
operator|+=
name|predicate
operator|==
literal|null
condition|?
literal|31
operator|*
name|hash
else|:
literal|31
operator|*
name|hash
operator|*
name|predicate
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
literal|31
operator|*
name|hash
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
operator|!
operator|(
name|other
operator|instanceof
name|TriggerExpression
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|counterLimit
argument_list|,
operator|(
operator|(
name|TriggerExpression
operator|)
name|other
operator|)
operator|.
name|counterLimit
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|predicate
argument_list|,
operator|(
operator|(
name|TriggerExpression
operator|)
name|other
operator|)
operator|.
name|predicate
argument_list|)
return|;
block|}
block|}
end_class

end_unit

