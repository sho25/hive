begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|load
operator|.
name|message
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WriteEventInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|CommitTxnMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|AddDependencyToLeaves
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|DAGTraversal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReplTxnWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * CommitTxnHandler  * Target(Load) side handler for commit transaction event.  */
end_comment

begin_class
specifier|public
class|class
name|CommitTxnHandler
extends|extends
name|AbstractMessageHandler
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|handle
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
operator|!
name|AcidUtils
operator|.
name|isAcidEnabled
argument_list|(
name|context
operator|.
name|hiveConf
argument_list|)
condition|)
block|{
name|context
operator|.
name|log
operator|.
name|error
argument_list|(
literal|"Cannot load transaction events as acid is not enabled"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Cannot load transaction events as acid is not enabled"
argument_list|)
throw|;
block|}
name|CommitTxnMessage
name|msg
init|=
name|deserializer
operator|.
name|getCommitTxnMessage
argument_list|(
name|context
operator|.
name|dmd
operator|.
name|getPayload
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numEntry
init|=
operator|(
name|msg
operator|.
name|getTables
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|msg
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|context
operator|.
name|dbName
decl_stmt|;
name|String
name|tableNamePrev
init|=
literal|null
decl_stmt|;
name|String
name|tblName
init|=
name|context
operator|.
name|tableName
decl_stmt|;
name|ReplTxnWork
name|work
init|=
operator|new
name|ReplTxnWork
argument_list|(
name|HiveUtils
operator|.
name|getReplPolicy
argument_list|(
name|context
operator|.
name|dbName
argument_list|,
name|context
operator|.
name|tableName
argument_list|)
argument_list|,
name|context
operator|.
name|dbName
argument_list|,
name|context
operator|.
name|tableName
argument_list|,
name|msg
operator|.
name|getTxnId
argument_list|()
argument_list|,
name|ReplTxnWork
operator|.
name|OperationType
operator|.
name|REPL_COMMIT_TXN
argument_list|,
name|context
operator|.
name|eventOnlyReplicationSpec
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|numEntry
operator|>
literal|0
condition|)
block|{
name|context
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"Commit txn handler for txnid "
operator|+
name|msg
operator|.
name|getTxnId
argument_list|()
operator|+
literal|" databases : "
operator|+
name|msg
operator|.
name|getDatabases
argument_list|()
operator|+
literal|" tables : "
operator|+
name|msg
operator|.
name|getTables
argument_list|()
operator|+
literal|" partitions : "
operator|+
name|msg
operator|.
name|getPartitions
argument_list|()
operator|+
literal|" files : "
operator|+
name|msg
operator|.
name|getFilesList
argument_list|()
operator|+
literal|" write ids : "
operator|+
name|msg
operator|.
name|getWriteIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|numEntry
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|actualTblName
init|=
name|msg
operator|.
name|getTables
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|String
name|actualDBName
init|=
name|msg
operator|.
name|getDatabases
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|String
name|completeName
init|=
name|Table
operator|.
name|getCompleteName
argument_list|(
name|actualDBName
argument_list|,
name|actualTblName
argument_list|)
decl_stmt|;
comment|// One import task per table. Events for same table are kept together in one dump directory during dump and are
comment|// grouped together in commit txn message.
if|if
condition|(
name|tableNamePrev
operator|==
literal|null
operator|||
operator|!
operator|(
name|completeName
operator|.
name|equals
argument_list|(
name|tableNamePrev
argument_list|)
operator|)
condition|)
block|{
comment|// The data location is created by source, so the location should be formed based on the table name in msg.
name|Path
name|location
init|=
name|HiveUtils
operator|.
name|getDumpPath
argument_list|(
operator|new
name|Path
argument_list|(
name|context
operator|.
name|location
argument_list|)
argument_list|,
name|actualDBName
argument_list|,
name|actualTblName
argument_list|)
decl_stmt|;
name|tblName
operator|=
name|context
operator|.
name|isTableNameEmpty
argument_list|()
condition|?
name|actualTblName
else|:
name|context
operator|.
name|tableName
expr_stmt|;
comment|// for warehouse level dump, use db name from write event
name|dbName
operator|=
operator|(
name|context
operator|.
name|isDbNameEmpty
argument_list|()
condition|?
name|actualDBName
else|:
name|context
operator|.
name|dbName
operator|)
expr_stmt|;
name|Context
name|currentContext
init|=
operator|new
name|Context
argument_list|(
name|context
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|currentContext
operator|.
name|setLocation
argument_list|(
name|location
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Piggybacking in Import logic for now
name|TableHandler
name|tableHandler
init|=
operator|new
name|TableHandler
argument_list|()
decl_stmt|;
name|tasks
operator|.
name|addAll
argument_list|(
operator|(
name|tableHandler
operator|.
name|handle
argument_list|(
name|currentContext
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|readEntitySet
operator|.
name|addAll
argument_list|(
name|tableHandler
operator|.
name|readEntities
argument_list|()
argument_list|)
expr_stmt|;
name|writeEntitySet
operator|.
name|addAll
argument_list|(
name|tableHandler
operator|.
name|writeEntities
argument_list|()
argument_list|)
expr_stmt|;
name|getUpdatedMetadata
argument_list|()
operator|.
name|copyUpdatedMetadata
argument_list|(
name|tableHandler
operator|.
name|getUpdatedMetadata
argument_list|()
argument_list|)
expr_stmt|;
name|tableNamePrev
operator|=
name|completeName
expr_stmt|;
block|}
try|try
block|{
name|WriteEventInfo
name|writeEventInfo
init|=
operator|new
name|WriteEventInfo
argument_list|(
name|msg
operator|.
name|getWriteIds
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|msg
operator|.
name|getFiles
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|getPartitions
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|msg
operator|.
name|getPartitions
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|writeEventInfo
operator|.
name|setPartition
argument_list|(
name|msg
operator|.
name|getPartitions
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|work
operator|.
name|addWriteEventInfo
argument_list|(
name|writeEventInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Failed to extract write event info from commit txn message : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|Task
argument_list|<
name|ReplTxnWork
argument_list|>
name|commitTxnTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
name|work
argument_list|,
name|context
operator|.
name|hiveConf
argument_list|)
decl_stmt|;
comment|// For warehouse level dump, don't update the metadata of database as we don't know this txn is for which database.
comment|// Anyways, if this event gets executed again, it is taken care of.
if|if
condition|(
operator|!
name|context
operator|.
name|isDbNameEmpty
argument_list|()
condition|)
block|{
name|updatedMetadata
operator|.
name|set
argument_list|(
name|context
operator|.
name|dmd
operator|.
name|getEventTo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|context
operator|.
name|dbName
argument_list|,
name|context
operator|.
name|tableName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"Added Commit txn task : {}"
argument_list|,
name|commitTxnTask
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|DAGTraversal
operator|.
name|traverse
argument_list|(
name|tasks
argument_list|,
operator|new
name|AddDependencyToLeaves
argument_list|(
name|commitTxnTask
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tasks
return|;
block|}
block|}
end_class

end_unit

