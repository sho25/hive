begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * GenericUDFSentences: splits a natural language chunk of text into sentences and words.  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"sentences"
argument_list|,
name|value
operator|=
literal|"_FUNC_(str, lang, country) - Splits str"
operator|+
literal|" into arrays of sentences, where each sentence is an array of words. The 'lang' and"
operator|+
literal|"'country' arguments are optional, and if omitted, the default locale is used."
argument_list|,
name|extended
operator|=
literal|"Example:\n"
operator|+
literal|"> SELECT _FUNC_('Hello there! I am a UDF.') FROM src LIMIT 1;\n"
operator|+
literal|"  [ [\"Hello\", \"there\"], [\"I\", \"am\", \"a\", \"UDF\"] ]\n"
operator|+
literal|"> SELECT _FUNC_(review, language) FROM movies;\n"
operator|+
literal|"Unnecessary punctuation, such as periods and commas in English, is automatically stripped."
operator|+
literal|" If specified, 'lang' should be a two-letter ISO-639 language code (such as 'en'), and "
operator|+
literal|"'country' should be a two-letter ISO-3166 code (such as 'us'). Not all country and "
operator|+
literal|"language codes are fully supported, and if an unsupported code is specified, a default "
operator|+
literal|"locale is used to process that string."
argument_list|)
specifier|public
class|class
name|GenericUDFSentences
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|transient
name|ObjectInspectorConverters
operator|.
name|Converter
index|[]
name|converters
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
argument_list|<
literal|1
operator|||
name|arguments
operator|.
name|length
argument_list|>
literal|3
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"The function sentences takes between 1 and 3 arguments."
argument_list|)
throw|;
block|}
name|converters
operator|=
operator|new
name|ObjectInspectorConverters
operator|.
name|Converter
index|[
name|arguments
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|converters
index|[
name|i
index|]
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|arguments
index|[
name|i
index|]
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
block|}
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
assert|assert
operator|(
name|arguments
operator|.
name|length
operator|>=
literal|1
operator|&&
name|arguments
operator|.
name|length
operator|<=
literal|3
operator|)
assert|;
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// if there is more than 1 argument specified, a different natural language
comment|// locale is being specified
name|Locale
name|locale
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|arguments
operator|.
name|length
operator|>
literal|1
operator|&&
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Text
name|language
init|=
operator|(
name|Text
operator|)
name|converters
index|[
literal|1
index|]
operator|.
name|convert
argument_list|(
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|Text
name|country
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|arguments
operator|.
name|length
operator|>
literal|2
operator|&&
name|arguments
index|[
literal|2
index|]
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|country
operator|=
operator|(
name|Text
operator|)
name|converters
index|[
literal|2
index|]
operator|.
name|convert
argument_list|(
name|arguments
index|[
literal|2
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|country
operator|!=
literal|null
condition|)
block|{
name|locale
operator|=
operator|new
name|Locale
argument_list|(
name|language
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|country
operator|.
name|toString
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|locale
operator|=
operator|new
name|Locale
argument_list|(
name|language
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|locale
operator|=
name|Locale
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
comment|// get the input and prepare the output
name|Text
name|chunk
init|=
operator|(
name|Text
operator|)
name|converters
index|[
literal|0
index|]
operator|.
name|convert
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|chunk
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Parse out sentences using Java's text-handling API
name|BreakIterator
name|bi
init|=
name|BreakIterator
operator|.
name|getSentenceInstance
argument_list|(
name|locale
argument_list|)
decl_stmt|;
name|bi
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|bi
operator|.
name|next
argument_list|()
operator|!=
name|BreakIterator
operator|.
name|DONE
condition|)
block|{
name|String
name|sentence
init|=
name|text
operator|.
name|substring
argument_list|(
name|idx
argument_list|,
name|bi
operator|.
name|current
argument_list|()
argument_list|)
decl_stmt|;
name|idx
operator|=
name|bi
operator|.
name|current
argument_list|()
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Parse out words in the sentence
name|BreakIterator
name|wi
init|=
name|BreakIterator
operator|.
name|getWordInstance
argument_list|(
name|locale
argument_list|)
decl_stmt|;
name|wi
operator|.
name|setText
argument_list|(
name|sentence
argument_list|)
expr_stmt|;
name|int
name|widx
init|=
literal|0
decl_stmt|;
name|ArrayList
argument_list|<
name|Text
argument_list|>
name|sent_array
init|=
name|result
operator|.
name|get
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
name|wi
operator|.
name|next
argument_list|()
operator|!=
name|BreakIterator
operator|.
name|DONE
condition|)
block|{
name|String
name|word
init|=
name|sentence
operator|.
name|substring
argument_list|(
name|widx
argument_list|,
name|wi
operator|.
name|current
argument_list|()
argument_list|)
decl_stmt|;
name|widx
operator|=
name|wi
operator|.
name|current
argument_list|()
expr_stmt|;
if|if
condition|(
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|word
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|sent_array
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
name|word
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
assert|assert
operator|(
name|children
operator|.
name|length
operator|>=
literal|1
operator|&&
name|children
operator|.
name|length
operator|<=
literal|3
operator|)
assert|;
return|return
name|getStandardDisplayString
argument_list|(
literal|"sentences"
argument_list|,
name|children
argument_list|)
return|;
block|}
block|}
end_class

end_unit

