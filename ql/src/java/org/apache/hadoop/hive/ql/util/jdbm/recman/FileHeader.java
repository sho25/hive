begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * JDBM LICENSE v1.00  *  * Redistribution and use of this software and associated documentation  * ("Software"), with or without modification, are permitted provided  * that the following conditions are met:  *  * 1. Redistributions of source code must retain copyright  *    statements and notices.  Redistributions must also contain a  *    copy of this document.  *  * 2. Redistributions in binary form must reproduce the  *    above copyright notice, this list of conditions and the  *    following disclaimer in the documentation and/or other  *    materials provided with the distribution.  *  * 3. The name "JDBM" must not be used to endorse or promote  *    products derived from this Software without prior written  *    permission of Cees de Groot.  For written permission,  *    please contact cg@cdegroot.com.  *  * 4. Products derived from this Software may not be called "JDBM"  *    nor may "JDBM" appear in their names without prior written  *    permission of Cees de Groot.   *  * 5. Due credit should be given to the JDBM Project  *    (http://jdbm.sourceforge.net/).  *  * THIS SOFTWARE IS PROVIDED BY THE JDBM PROJECT AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL  * CEES DE GROOT OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  *  * Copyright 2000 (C) Cees de Groot. All Rights Reserved.  * Contributions are Copyright (C) 2000 by their associated contributors.  *  * $Id: FileHeader.java,v 1.3 2005/06/25 23:12:32 doomdark Exp $  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|recman
package|;
end_package

begin_comment
comment|/**  *  This class represents a file header. It is a 1:1 representation of  *  the data that appears in block 0 of a file.  */
end_comment

begin_class
class|class
name|FileHeader
implements|implements
name|BlockView
block|{
comment|// offsets
specifier|private
specifier|static
specifier|final
name|short
name|O_MAGIC
init|=
literal|0
decl_stmt|;
comment|// short magic
specifier|private
specifier|static
specifier|final
name|short
name|O_LISTS
init|=
name|Magic
operator|.
name|SZ_SHORT
decl_stmt|;
comment|// long[2*NLISTS]
specifier|private
specifier|static
specifier|final
name|int
name|O_ROOTS
init|=
name|O_LISTS
operator|+
operator|(
name|Magic
operator|.
name|NLISTS
operator|*
literal|2
operator|*
name|Magic
operator|.
name|SZ_LONG
operator|)
decl_stmt|;
comment|// my block
specifier|private
name|BlockIo
name|block
decl_stmt|;
comment|/** The number of "root" rowids available in the file. */
specifier|static
specifier|final
name|int
name|NROOTS
init|=
operator|(
name|RecordFile
operator|.
name|BLOCK_SIZE
operator|-
name|O_ROOTS
operator|)
operator|/
name|Magic
operator|.
name|SZ_LONG
decl_stmt|;
comment|/**      *  Constructs a FileHeader object from a block.      *      *  @param block The block that contains the file header      *  @param isNew If true, the file header is for a new file.      *  @throws IOException if the block is too short to keep the file      *          header.      */
name|FileHeader
parameter_list|(
name|BlockIo
name|block
parameter_list|,
name|boolean
name|isNew
parameter_list|)
block|{
name|this
operator|.
name|block
operator|=
name|block
expr_stmt|;
if|if
condition|(
name|isNew
condition|)
name|block
operator|.
name|writeShort
argument_list|(
name|O_MAGIC
argument_list|,
name|Magic
operator|.
name|FILE_HEADER
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|magicOk
argument_list|()
condition|)
throw|throw
operator|new
name|Error
argument_list|(
literal|"CRITICAL: file header magic not OK "
operator|+
name|block
operator|.
name|readShort
argument_list|(
name|O_MAGIC
argument_list|)
argument_list|)
throw|;
block|}
comment|/** Returns true if the magic corresponds with the fileHeader magic.  */
specifier|private
name|boolean
name|magicOk
parameter_list|()
block|{
return|return
name|block
operator|.
name|readShort
argument_list|(
name|O_MAGIC
argument_list|)
operator|==
name|Magic
operator|.
name|FILE_HEADER
return|;
block|}
comment|/** Returns the offset of the "first" block of the indicated list */
specifier|private
name|short
name|offsetOfFirst
parameter_list|(
name|int
name|list
parameter_list|)
block|{
return|return
call|(
name|short
call|)
argument_list|(
name|O_LISTS
operator|+
operator|(
literal|2
operator|*
name|Magic
operator|.
name|SZ_LONG
operator|*
name|list
operator|)
argument_list|)
return|;
block|}
comment|/** Returns the offset of the "last" block of the indicated list */
specifier|private
name|short
name|offsetOfLast
parameter_list|(
name|int
name|list
parameter_list|)
block|{
return|return
call|(
name|short
call|)
argument_list|(
name|offsetOfFirst
argument_list|(
name|list
argument_list|)
operator|+
name|Magic
operator|.
name|SZ_LONG
argument_list|)
return|;
block|}
comment|/** Returns the offset of the indicated root */
specifier|private
name|short
name|offsetOfRoot
parameter_list|(
name|int
name|root
parameter_list|)
block|{
return|return
call|(
name|short
call|)
argument_list|(
name|O_ROOTS
operator|+
operator|(
name|root
operator|*
name|Magic
operator|.
name|SZ_LONG
operator|)
argument_list|)
return|;
block|}
comment|/**      *  Returns the first block of the indicated list      */
name|long
name|getFirstOf
parameter_list|(
name|int
name|list
parameter_list|)
block|{
return|return
name|block
operator|.
name|readLong
argument_list|(
name|offsetOfFirst
argument_list|(
name|list
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *  Sets the first block of the indicated list      */
name|void
name|setFirstOf
parameter_list|(
name|int
name|list
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|block
operator|.
name|writeLong
argument_list|(
name|offsetOfFirst
argument_list|(
name|list
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Returns the last block of the indicated list      */
name|long
name|getLastOf
parameter_list|(
name|int
name|list
parameter_list|)
block|{
return|return
name|block
operator|.
name|readLong
argument_list|(
name|offsetOfLast
argument_list|(
name|list
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *  Sets the last block of the indicated list      */
name|void
name|setLastOf
parameter_list|(
name|int
name|list
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|block
operator|.
name|writeLong
argument_list|(
name|offsetOfLast
argument_list|(
name|list
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Returns the indicated root rowid. A root rowid is a special rowid      *  that needs to be kept between sessions. It could conceivably be      *  stored in a special file, but as a large amount of space in the      *  block header is wasted anyway, it's more useful to store it where      *  it belongs.      *      *  @see #NROOTS      */
name|long
name|getRoot
parameter_list|(
name|int
name|root
parameter_list|)
block|{
return|return
name|block
operator|.
name|readLong
argument_list|(
name|offsetOfRoot
argument_list|(
name|root
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *  Sets the indicated root rowid.      *      *  @see #getRoot      *  @see #NROOTS      */
name|void
name|setRoot
parameter_list|(
name|int
name|root
parameter_list|,
name|long
name|rowid
parameter_list|)
block|{
name|block
operator|.
name|writeLong
argument_list|(
name|offsetOfRoot
argument_list|(
name|root
argument_list|)
argument_list|,
name|rowid
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

