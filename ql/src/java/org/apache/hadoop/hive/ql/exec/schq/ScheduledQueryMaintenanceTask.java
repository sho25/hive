begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|schq
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ScheduledQueryMaintenanceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|StageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|scheduled
operator|.
name|ScheduledQueryExecutionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|scheduled
operator|.
name|ScheduledQueryMaintenanceWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_comment
comment|/**  * Scheduled query maintenance task.  *  * CREATES/ALTERS or DROPs a scheduled query.  */
end_comment

begin_class
specifier|public
class|class
name|ScheduledQueryMaintenanceTask
extends|extends
name|Task
argument_list|<
name|ScheduledQueryMaintenanceWork
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"SCHEDULED QUERY MAINTENANCE TASK"
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
block|{
name|ScheduledQueryMaintenanceRequest
name|request
init|=
name|buildScheduledQueryRequest
argument_list|()
decl_stmt|;
try|try
block|{
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getMSC
argument_list|()
operator|.
name|scheduledQueryMaintenance
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|work
operator|.
name|getScheduledQuery
argument_list|()
operator|.
name|isSetNextExecution
argument_list|()
condition|)
block|{
name|ScheduledQueryExecutionService
operator|.
name|forceScheduleCheck
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TException
decl||
name|HiveException
name|e
parameter_list|)
block|{
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|ScheduledQueryMaintenanceRequest
name|buildScheduledQueryRequest
parameter_list|()
block|{
name|ScheduledQueryMaintenanceRequest
name|req
init|=
operator|new
name|ScheduledQueryMaintenanceRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setType
argument_list|(
name|work
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setScheduledQuery
argument_list|(
name|work
operator|.
name|getScheduledQuery
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|req
return|;
block|}
annotation|@
name|Override
specifier|public
name|StageType
name|getType
parameter_list|()
block|{
return|return
name|StageType
operator|.
name|SCHEDULED_QUERY_MAINT
return|;
block|}
block|}
end_class

end_unit

