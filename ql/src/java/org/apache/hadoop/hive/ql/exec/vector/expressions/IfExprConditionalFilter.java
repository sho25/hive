begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExpressionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_comment
comment|/**  * For conditional expressions, the{@code IfExprConditionalFilter} class updated  * the selected array of batch parameter after the conditional expression is executed.  * Then the remaining expression will only do the selected rows instead of all.  */
end_comment

begin_class
specifier|public
class|class
name|IfExprConditionalFilter
extends|extends
name|VectorExpression
block|{
specifier|protected
name|int
name|arg1Column
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|int
name|arg2Column
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|int
name|arg3Column
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|int
name|arg2ColumnTmp
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|IfExprConditionalFilter
parameter_list|(
name|int
name|arg1Column
parameter_list|,
name|int
name|arg2Column
parameter_list|,
name|int
name|arg3Column
parameter_list|,
name|int
name|outputColumnNum
parameter_list|)
block|{
name|super
argument_list|(
name|outputColumnNum
argument_list|)
expr_stmt|;
name|this
operator|.
name|arg1Column
operator|=
name|arg1Column
expr_stmt|;
if|if
condition|(
name|arg2Column
operator|==
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|arg2Column
operator|=
name|arg3Column
expr_stmt|;
name|this
operator|.
name|arg2ColumnTmp
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|arg2Column
operator|=
name|arg2Column
expr_stmt|;
name|this
operator|.
name|arg3Column
operator|=
name|arg3Column
expr_stmt|;
name|this
operator|.
name|arg2ColumnTmp
operator|=
name|arg2Column
expr_stmt|;
block|}
block|}
specifier|public
name|IfExprConditionalFilter
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * For If(expr1,expr2,expr3) expression,    * Firstly, save the previous selected vector, size and selectedInUse value of batch.    * Secondly evaluate the conditional expression and update the selected array of batch based    * on the result of conditional expression(1 denote done, 0 denote not done)    * Then evaluate the expr2 based on the updated selected.    * After the expr2 is executed, remove the indexes which have done in expr2.    * Last, evaluate the expr3 based on the updated selected.    *    * @param batch    * @param childExpressions the childExpressions need to be evaluated.    */
specifier|public
name|void
name|evaluateIfConditionalExpr
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|VectorExpression
index|[]
name|childExpressions
parameter_list|)
block|{
if|if
condition|(
name|childExpressions
operator|!=
literal|null
condition|)
block|{
comment|// Save the previous selected vector, size and selectedInUse value of batch.
name|int
index|[]
name|prevSelected
init|=
operator|new
name|int
index|[
name|batch
operator|.
name|selected
operator|.
name|length
index|]
decl_stmt|;
name|int
index|[]
name|prevSelectedFalse
init|=
operator|new
name|int
index|[
name|batch
operator|.
name|selected
operator|.
name|length
index|]
decl_stmt|;
name|int
name|prevSize
init|=
name|batch
operator|.
name|size
decl_stmt|;
name|boolean
name|prevSelectInUse
init|=
name|batch
operator|.
name|selectedInUse
decl_stmt|;
if|if
condition|(
operator|!
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
name|prevSelected
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|batch
operator|.
name|selected
argument_list|,
literal|0
argument_list|,
name|prevSelectedFalse
argument_list|,
literal|0
argument_list|,
name|batch
operator|.
name|selected
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|prevSelected
argument_list|,
literal|0
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
literal|0
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|batch
operator|.
name|selected
argument_list|,
literal|0
argument_list|,
name|prevSelected
argument_list|,
literal|0
argument_list|,
name|batch
operator|.
name|selected
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// Evaluate the conditional expression.
name|evaluateConditionalExpression
argument_list|(
name|batch
argument_list|,
name|childExpressions
index|[
literal|0
index|]
argument_list|,
name|prevSize
argument_list|,
name|prevSelectInUse
argument_list|)
expr_stmt|;
if|if
condition|(
name|childExpressions
operator|!=
literal|null
operator|&&
name|childExpressions
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// If the length is 2, it has two situations:If(expr1,expr2,null) or
comment|// If(expr1,null,expr3) distinguished by the indexes.
if|if
condition|(
name|childExpressions
index|[
literal|1
index|]
operator|.
name|getOutputColumnNum
argument_list|()
operator|==
name|arg2ColumnTmp
condition|)
block|{
comment|// Evaluate the expr2 expression.
name|childExpressions
index|[
literal|1
index|]
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Update the selected array of batch to remove the index of being done.
name|evaluateSelectedArray
argument_list|(
name|batch
argument_list|,
name|arg1Column
argument_list|,
name|prevSelected
argument_list|,
name|prevSize
argument_list|)
expr_stmt|;
comment|// If(expr1,null,expr3), if the expr1 is false, expr3 will be evaluated.
name|childExpressions
index|[
literal|1
index|]
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|childExpressions
operator|!=
literal|null
operator|&&
name|childExpressions
operator|.
name|length
operator|==
literal|3
condition|)
block|{
comment|// IF(expr1,expr2,expr3). expr1,expr2,expr3 are all the expression.
comment|// Evaluate the expr2 expression.
name|childExpressions
index|[
literal|1
index|]
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// Update the selected array of batch to remove the index of being done.
name|evaluateSelectedArray
argument_list|(
name|batch
argument_list|,
name|arg1Column
argument_list|,
name|prevSelected
argument_list|,
name|prevSize
argument_list|)
expr_stmt|;
comment|// Evaluate the expr3 expression.
name|childExpressions
index|[
literal|2
index|]
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
comment|// When evaluate all the expressions, restore the previous selected
comment|// vector,size and selectedInUse value of batch.
name|batch
operator|.
name|size
operator|=
name|prevSize
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
name|prevSelectInUse
expr_stmt|;
if|if
condition|(
operator|!
name|prevSelectInUse
condition|)
block|{
name|batch
operator|.
name|selected
operator|=
name|prevSelectedFalse
expr_stmt|;
block|}
else|else
block|{
name|batch
operator|.
name|selected
operator|=
name|prevSelected
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Update the selected array of batch based on the conditional expression    * result, remove the index of being done.    *    * @param batch    * @param num  the column num of conditional expression in batch cols    * @param prevSelected the previous selected array    */
specifier|private
specifier|static
name|void
name|evaluateSelectedArray
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|num
parameter_list|,
name|int
index|[]
name|prevSelected
parameter_list|,
name|int
name|prevSize
parameter_list|)
block|{
comment|// Get the result of conditional expression.
name|LongColumnVector
name|outputColVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|num
index|]
decl_stmt|;
name|long
index|[]
name|flag
init|=
name|outputColVector
operator|.
name|vector
decl_stmt|;
name|int
name|newSize
init|=
literal|0
decl_stmt|;
comment|// Update the selected array of batch
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|prevSize
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|flag
index|[
name|prevSelected
index|[
name|j
index|]
index|]
operator|==
literal|0
condition|)
block|{
name|batch
operator|.
name|selected
index|[
name|newSize
operator|++
index|]
operator|=
name|prevSelected
index|[
name|j
index|]
expr_stmt|;
block|}
block|}
name|batch
operator|.
name|size
operator|=
name|newSize
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Evaluate the conditional expression and update the selected array of batch    * based on the result of conditional expression.    *    * @param batch    * @param ve   the conditional expression need to evaluate    * @param prevSize the previous batch size    * @param prevSelectInUse the previous selectInUse    */
specifier|private
specifier|static
name|void
name|evaluateConditionalExpression
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|VectorExpression
name|ve
parameter_list|,
name|int
name|prevSize
parameter_list|,
name|boolean
name|prevSelectInUse
parameter_list|)
block|{
name|batch
operator|.
name|size
operator|=
name|prevSize
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
name|prevSelectInUse
expr_stmt|;
name|int
name|colNum
init|=
name|ve
operator|.
name|getOutputColumnNum
argument_list|()
decl_stmt|;
comment|// Evaluate the conditional expression.
name|ve
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|LongColumnVector
name|outputColVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|colNum
index|]
decl_stmt|;
name|long
index|[]
name|flag
init|=
name|outputColVector
operator|.
name|vector
decl_stmt|;
name|int
index|[]
name|sel
init|=
name|batch
operator|.
name|selected
decl_stmt|;
name|int
name|newSize
init|=
literal|0
decl_stmt|;
comment|// Update the selected array of the batch based on the conditional expression.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|batch
operator|.
name|size
condition|;
name|j
operator|++
control|)
block|{
name|int
name|k
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|flag
index|[
name|k
index|]
operator|==
literal|1
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|k
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newSize
operator|<
name|batch
operator|.
name|size
condition|)
block|{
name|batch
operator|.
name|size
operator|=
name|newSize
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{    }
annotation|@
name|Override
specifier|public
name|VectorExpressionDescriptor
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Undefined descriptor"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|vectorExpressionParameters
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

