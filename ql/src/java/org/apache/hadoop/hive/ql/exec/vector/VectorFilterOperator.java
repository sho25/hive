begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|ConstantVectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FilterDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_comment
comment|/**  * Filter operator implementation.  **/
end_comment

begin_class
specifier|public
class|class
name|VectorFilterOperator
extends|extends
name|Operator
argument_list|<
name|FilterDesc
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**    * Counter.    *    */
specifier|public
specifier|static
enum|enum
name|Counter
block|{
name|FILTERED
block|,
name|PASSED
block|}
specifier|private
specifier|final
specifier|transient
name|LongWritable
name|filtered_count
decl_stmt|,
name|passed_count
decl_stmt|;
specifier|private
name|VectorExpression
name|conditionEvaluator
init|=
literal|null
decl_stmt|;
specifier|transient
name|int
name|heartbeatInterval
decl_stmt|;
comment|// filterMode is 1 if condition is always true, -1 if always false
comment|// and 0 if condition needs to be computed.
specifier|transient
specifier|private
name|int
name|filterMode
init|=
literal|0
decl_stmt|;
specifier|public
name|VectorFilterOperator
parameter_list|(
name|VectorizationContext
name|vContext
parameter_list|,
name|OperatorDesc
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
argument_list|()
expr_stmt|;
name|vContext
operator|.
name|setOperatorType
argument_list|(
name|OperatorType
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|oldExpression
init|=
operator|(
operator|(
name|FilterDesc
operator|)
name|conf
operator|)
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
name|conditionEvaluator
operator|=
name|vContext
operator|.
name|getVectorExpression
argument_list|(
name|oldExpression
argument_list|)
expr_stmt|;
block|}
specifier|public
name|VectorFilterOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|filtered_count
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
name|passed_count
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
operator|(
name|FilterDesc
operator|)
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|heartbeatInterval
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESENDHEARTBEAT
argument_list|)
expr_stmt|;
name|statsMap
operator|.
name|put
argument_list|(
name|Counter
operator|.
name|FILTERED
argument_list|,
name|filtered_count
argument_list|)
expr_stmt|;
name|statsMap
operator|.
name|put
argument_list|(
name|Counter
operator|.
name|PASSED
argument_list|,
name|passed_count
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|conditionEvaluator
operator|instanceof
name|ConstantVectorExpression
condition|)
block|{
name|ConstantVectorExpression
name|cve
init|=
operator|(
name|ConstantVectorExpression
operator|)
name|this
operator|.
name|conditionEvaluator
decl_stmt|;
if|if
condition|(
name|cve
operator|.
name|getLongValue
argument_list|()
operator|==
literal|1
condition|)
block|{
name|filterMode
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|filterMode
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
name|initializeChildren
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFilterCondition
parameter_list|(
name|VectorExpression
name|expr
parameter_list|)
block|{
name|this
operator|.
name|conditionEvaluator
operator|=
name|expr
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processOp
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|vrg
init|=
operator|(
name|VectorizedRowBatch
operator|)
name|row
decl_stmt|;
comment|//Evaluate the predicate expression
comment|//The selected vector represents selected rows.
switch|switch
condition|(
name|filterMode
condition|)
block|{
case|case
literal|0
case|:
name|conditionEvaluator
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
break|break;
case|case
operator|-
literal|1
case|:
comment|// All will be filtered out
name|vrg
operator|.
name|size
operator|=
literal|0
expr_stmt|;
break|break;
case|case
literal|1
case|:
default|default:
comment|// All are selected, do nothing
block|}
if|if
condition|(
name|vrg
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|forward
argument_list|(
name|vrg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return the name of the operator    */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"FIL"
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|FILTER
return|;
block|}
specifier|public
name|VectorExpression
name|getConditionEvaluator
parameter_list|()
block|{
return|return
name|conditionEvaluator
return|;
block|}
specifier|public
name|void
name|setConditionEvaluator
parameter_list|(
name|VectorExpression
name|conditionEvaluator
parameter_list|)
block|{
name|this
operator|.
name|conditionEvaluator
operator|=
name|conditionEvaluator
expr_stmt|;
block|}
block|}
end_class

end_unit

