begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|utils
operator|.
name|ByteStream
import|;
end_import

begin_comment
comment|/**  * Data for each row is passed around as HiveObjects in Hive  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|HiveObject
block|{
specifier|protected
name|Object
name|javaObject
decl_stmt|;
specifier|protected
name|boolean
name|isNull
decl_stmt|;
comment|/**    * @param expr a well formed expression nesting within this Hive Object    * @return field handler that can be used in a subsequent get() call    */
specifier|public
specifier|abstract
name|SerDeField
name|getFieldFromExpression
parameter_list|(
name|String
name|expr
parameter_list|)
throws|throws
name|HiveException
function_decl|;
comment|/**    * @param field obtained using call to getFieldFromExpression    * @return another subObject    */
specifier|public
specifier|abstract
name|HiveObject
name|get
parameter_list|(
name|SerDeField
name|field
parameter_list|)
throws|throws
name|HiveException
function_decl|;
comment|/**    * @return get the current HiveObject as a Java Object    */
specifier|public
name|Object
name|getJavaObject
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|isNull
condition|)
return|return
literal|null
return|;
return|return
name|javaObject
return|;
block|}
comment|/**    * @return get isNull    */
specifier|public
name|boolean
name|getIsNull
parameter_list|()
block|{
return|return
name|isNull
return|;
block|}
specifier|public
name|void
name|setIsNull
parameter_list|(
name|boolean
name|isNull
parameter_list|)
block|{
name|this
operator|.
name|isNull
operator|=
name|isNull
expr_stmt|;
block|}
comment|/**    * @return list of top level fields in this Hive Object    */
specifier|public
specifier|abstract
name|List
argument_list|<
name|SerDeField
argument_list|>
name|getFields
parameter_list|()
throws|throws
name|HiveException
function_decl|;
comment|/**    * Used to detect base case of object hierarchy    * @return true if the Object encapsulates a Hive Primitive Object. False otherwise    */
specifier|public
specifier|abstract
name|boolean
name|isPrimitive
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|int
name|hashCode
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
function_decl|;
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
name|HiveObjectSerializer
name|hos
init|=
operator|new
name|NaiiveSerializer
argument_list|()
decl_stmt|;
name|ByteStream
operator|.
name|Output
name|bos
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
name|hos
operator|.
name|serialize
argument_list|(
name|this
argument_list|,
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|bos
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bos
operator|.
name|getCount
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|(
literal|"Exception:  "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|ArrayList
argument_list|<
name|SerDeField
argument_list|>
name|nlist
init|=
operator|new
name|ArrayList
argument_list|<
name|SerDeField
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

