begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_comment
comment|/**  * base class for operator graph walker  * this class takes list of starting ops and walks them one by one. it maintains list of walked  * operators (dispatchedList) and a list of operators that are discovered but not yet dispatched  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|DefaultOpGraphWalker
implements|implements
name|OpGraphWalker
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|toWalk
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|dispatchedList
init|=
operator|new
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Dispatcher
name|dispatcher
decl_stmt|;
comment|/**    * Constructor    * @param ctx graph of operators to walk    * @param disp dispatcher to call for each op encountered    */
specifier|public
name|DefaultOpGraphWalker
parameter_list|(
name|Dispatcher
name|disp
parameter_list|)
block|{
name|this
operator|.
name|dispatcher
operator|=
name|disp
expr_stmt|;
block|}
comment|/**    * @return the toWalk    */
specifier|public
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|getToWalk
parameter_list|()
block|{
return|return
name|toWalk
return|;
block|}
comment|/**    * @return the doneList    */
specifier|public
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|getDispatchedList
parameter_list|()
block|{
return|return
name|dispatchedList
return|;
block|}
comment|/**    * Dispatch the current operator    * @param op operator being walked    * @param opStack stack of operators encountered    * @throws SemanticException    */
specifier|public
name|void
name|dispatch
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
parameter_list|,
name|Stack
name|opStack
parameter_list|)
throws|throws
name|SemanticException
block|{
name|this
operator|.
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|op
argument_list|,
name|opStack
argument_list|)
expr_stmt|;
name|this
operator|.
name|dispatchedList
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
comment|/**    * starting point for walking    * @throws SemanticException    */
specifier|public
name|void
name|startWalking
parameter_list|(
name|Collection
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|startOps
parameter_list|)
throws|throws
name|SemanticException
block|{
name|toWalk
operator|.
name|addAll
argument_list|(
name|startOps
argument_list|)
expr_stmt|;
while|while
condition|(
name|toWalk
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|walk
argument_list|(
name|toWalk
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * walk the current operator and its descendants    * @param op current operator in the graph    * @throws SemanticException    */
specifier|public
specifier|abstract
name|void
name|walk
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
parameter_list|)
throws|throws
name|SemanticException
function_decl|;
block|}
end_class

end_unit

