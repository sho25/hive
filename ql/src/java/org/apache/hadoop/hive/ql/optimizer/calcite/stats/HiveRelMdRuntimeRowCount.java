begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|ReflectiveRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HivePlannerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
operator|.
name|RelTreeSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
operator|.
name|StatsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|OperatorStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|HiveRelMdRuntimeRowCount
extends|extends
name|HiveRelMdRowCount
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveRelMdRuntimeRowCount
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RelMetadataProvider
name|SOURCE
init|=
name|ReflectiveRelMetadataProvider
operator|.
name|reflectiveSource
argument_list|(
name|BuiltInMethod
operator|.
name|ROW_COUNT
operator|.
name|method
argument_list|,
operator|new
name|HiveRelMdRuntimeRowCount
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|HiveRelMdRuntimeRowCount
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Double
name|getRowCount
parameter_list|(
name|Filter
name|rel
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
name|Optional
argument_list|<
name|Long
argument_list|>
name|runtimeRowCount
init|=
name|getRuntimeRowCount
argument_list|(
name|rel
argument_list|)
decl_stmt|;
if|if
condition|(
name|runtimeRowCount
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|runtimeRowCount
operator|.
name|get
argument_list|()
operator|.
name|doubleValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getRowCount
argument_list|(
name|rel
argument_list|,
name|mq
argument_list|)
return|;
block|}
block|}
specifier|public
name|Optional
argument_list|<
name|Long
argument_list|>
name|getRuntimeRowCount
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|RelOptCluster
name|cluster
init|=
name|rel
operator|.
name|getCluster
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|cluster
operator|.
name|getPlanner
argument_list|()
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|instanceof
name|HivePlannerContext
condition|)
block|{
name|StatsSource
name|ss
init|=
operator|(
operator|(
name|HivePlannerContext
operator|)
name|context
operator|)
operator|.
name|unwrap
argument_list|(
name|StatsSource
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|canProvideStatsFor
argument_list|(
name|rel
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|Optional
argument_list|<
name|OperatorStats
argument_list|>
name|os
init|=
name|ss
operator|.
name|lookup
argument_list|(
name|RelTreeSignature
operator|.
name|of
argument_list|(
name|rel
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|long
name|outputRecords
init|=
name|os
operator|.
name|get
argument_list|()
operator|.
name|getOutputRecords
argument_list|()
decl_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|outputRecords
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

