begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|read
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|FilterPredicateLeafBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|LeafFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|ExpressionTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|PredicateLeaf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|filter2
operator|.
name|predicate
operator|.
name|FilterApi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|filter2
operator|.
name|predicate
operator|.
name|FilterPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|MessageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|ParquetFilterPredicateConverter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ParquetFilterPredicateConverter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Translate the search argument to the filter predicate parquet uses. It includes    * only the columns from the passed schema.    * @return translate the sarg into a filter predicate    */
specifier|public
specifier|static
name|FilterPredicate
name|toFilterPredicate
parameter_list|(
name|SearchArgument
name|sarg
parameter_list|,
name|MessageType
name|schema
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|columns
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|columns
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Type
name|field
range|:
name|schema
operator|.
name|getFields
argument_list|()
control|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|translate
argument_list|(
name|sarg
operator|.
name|getExpression
argument_list|()
argument_list|,
name|sarg
operator|.
name|getLeaves
argument_list|()
argument_list|,
name|columns
argument_list|,
name|schema
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|FilterPredicate
name|translate
parameter_list|(
name|ExpressionTree
name|root
parameter_list|,
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leaves
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|,
name|MessageType
name|schema
parameter_list|)
block|{
name|FilterPredicate
name|p
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|root
operator|.
name|getOperator
argument_list|()
condition|)
block|{
case|case
name|OR
case|:
for|for
control|(
name|ExpressionTree
name|child
range|:
name|root
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
name|translate
argument_list|(
name|child
argument_list|,
name|leaves
argument_list|,
name|columns
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FilterPredicate
name|right
init|=
name|translate
argument_list|(
name|child
argument_list|,
name|leaves
argument_list|,
name|columns
argument_list|,
name|schema
argument_list|)
decl_stmt|;
comment|// constant means no filter, ignore it when it is null
if|if
condition|(
name|right
operator|!=
literal|null
condition|)
block|{
name|p
operator|=
name|FilterApi
operator|.
name|or
argument_list|(
name|p
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|p
return|;
case|case
name|AND
case|:
for|for
control|(
name|ExpressionTree
name|child
range|:
name|root
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
name|translate
argument_list|(
name|child
argument_list|,
name|leaves
argument_list|,
name|columns
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FilterPredicate
name|right
init|=
name|translate
argument_list|(
name|child
argument_list|,
name|leaves
argument_list|,
name|columns
argument_list|,
name|schema
argument_list|)
decl_stmt|;
comment|// constant means no filter, ignore it when it is null
if|if
condition|(
name|right
operator|!=
literal|null
condition|)
block|{
name|p
operator|=
name|FilterApi
operator|.
name|and
argument_list|(
name|p
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|p
return|;
case|case
name|NOT
case|:
name|FilterPredicate
name|op
init|=
name|translate
argument_list|(
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|leaves
argument_list|,
name|columns
argument_list|,
name|schema
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
return|return
name|FilterApi
operator|.
name|not
argument_list|(
name|op
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
case|case
name|LEAF
case|:
name|PredicateLeaf
name|leaf
init|=
name|leaves
operator|.
name|get
argument_list|(
name|root
operator|.
name|getLeaf
argument_list|()
argument_list|)
decl_stmt|;
comment|// If columns is null, then we need to create the leaf
if|if
condition|(
name|columns
operator|.
name|contains
argument_list|(
name|leaf
operator|.
name|getColumnName
argument_list|()
argument_list|)
condition|)
block|{
name|Type
name|parquetType
init|=
name|schema
operator|.
name|getType
argument_list|(
name|leaf
operator|.
name|getColumnName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|buildFilterPredicateFromPredicateLeaf
argument_list|(
name|leaf
argument_list|,
name|parquetType
argument_list|)
return|;
block|}
else|else
block|{
comment|// Do not create predicate if the leaf is not on the passed schema.
return|return
literal|null
return|;
block|}
case|case
name|CONSTANT
case|:
return|return
literal|null
return|;
comment|// no filter will be executed for constant
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown operator: "
operator|+
name|root
operator|.
name|getOperator
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|FilterPredicate
name|buildFilterPredicateFromPredicateLeaf
parameter_list|(
name|PredicateLeaf
name|leaf
parameter_list|,
name|Type
name|parquetType
parameter_list|)
block|{
name|LeafFilterFactory
name|leafFilterFactory
init|=
operator|new
name|LeafFilterFactory
argument_list|()
decl_stmt|;
name|FilterPredicateLeafBuilder
name|builder
decl_stmt|;
try|try
block|{
name|builder
operator|=
name|leafFilterFactory
operator|.
name|getLeafFilterBuilderByType
argument_list|(
name|leaf
operator|.
name|getType
argument_list|()
argument_list|,
name|parquetType
argument_list|)
expr_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|isMultiLiteralsOperator
argument_list|(
name|leaf
operator|.
name|getOperator
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|builder
operator|.
name|buildPredicate
argument_list|(
name|leaf
operator|.
name|getOperator
argument_list|()
argument_list|,
name|leaf
operator|.
name|getLiteralList
argument_list|()
argument_list|,
name|leaf
operator|.
name|getColumnName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|builder
operator|.
name|buildPredict
argument_list|(
name|leaf
operator|.
name|getOperator
argument_list|()
argument_list|,
name|leaf
operator|.
name|getLiteral
argument_list|()
argument_list|,
name|leaf
operator|.
name|getColumnName
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"fail to build predicate filter leaf with errors"
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isMultiLiteralsOperator
parameter_list|(
name|PredicateLeaf
operator|.
name|Operator
name|op
parameter_list|)
block|{
return|return
operator|(
name|op
operator|==
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|IN
operator|)
operator|||
operator|(
name|op
operator|==
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|BETWEEN
operator|)
return|;
block|}
block|}
end_class

end_unit

