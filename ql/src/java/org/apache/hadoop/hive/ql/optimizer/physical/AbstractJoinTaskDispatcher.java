begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ConditionalTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|MapRedTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|TaskGraphWalker
operator|.
name|TaskGraphWalkerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_comment
comment|/**  * Common iteration methods for converting joins and sort-merge joins.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractJoinTaskDispatcher
implements|implements
name|Dispatcher
block|{
specifier|protected
specifier|final
name|PhysicalContext
name|physicalContext
decl_stmt|;
specifier|public
name|AbstractJoinTaskDispatcher
parameter_list|(
name|PhysicalContext
name|context
parameter_list|)
block|{
name|physicalContext
operator|=
name|context
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|processCurrentTask
parameter_list|(
name|MapRedTask
name|currTask
parameter_list|,
name|ConditionalTask
name|conditionalTask
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|SemanticException
function_decl|;
specifier|protected
name|void
name|replaceTaskWithConditionalTask
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|currTask
parameter_list|,
name|ConditionalTask
name|cndTsk
parameter_list|)
block|{
comment|// add this task into task tree
comment|// set all parent tasks
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|parentTasks
init|=
name|currTask
operator|.
name|getParentTasks
argument_list|()
decl_stmt|;
name|currTask
operator|.
name|setParentTasks
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentTasks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|parentTasks
control|)
block|{
comment|// make new generated task depends on all the parent tasks of current task.
name|tsk
operator|.
name|addDependentTask
argument_list|(
name|cndTsk
argument_list|)
expr_stmt|;
comment|// remove the current task from its original parent task's dependent task
name|tsk
operator|.
name|removeDependentTask
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// remove from current root task and add conditional task to root tasks
name|physicalContext
operator|.
name|removeFromRootTask
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
name|physicalContext
operator|.
name|addToRootTask
argument_list|(
name|cndTsk
argument_list|)
expr_stmt|;
block|}
comment|// set all child tasks
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|oldChildTasks
init|=
name|currTask
operator|.
name|getChildTasks
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldChildTasks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|cndTsk
operator|.
name|getListTasks
argument_list|()
control|)
block|{
if|if
condition|(
name|tsk
operator|.
name|equals
argument_list|(
name|currTask
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|oldChild
range|:
name|oldChildTasks
control|)
block|{
name|tsk
operator|.
name|addDependentTask
argument_list|(
name|oldChild
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Replace the task with the new task. Copy the children and parents of the old
comment|// task to the new task.
specifier|protected
name|void
name|replaceTask
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|currTask
parameter_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|newTask
parameter_list|)
block|{
comment|// add this task into task tree
comment|// set all parent tasks
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|parentTasks
init|=
name|currTask
operator|.
name|getParentTasks
argument_list|()
decl_stmt|;
name|currTask
operator|.
name|setParentTasks
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentTasks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|parentTasks
control|)
block|{
comment|// remove the current task from its original parent task's dependent task
name|tsk
operator|.
name|removeDependentTask
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
comment|// make new generated task depends on all the parent tasks of current task.
name|tsk
operator|.
name|addDependentTask
argument_list|(
name|newTask
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// remove from current root task and add conditional task to root tasks
name|physicalContext
operator|.
name|removeFromRootTask
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
name|physicalContext
operator|.
name|addToRootTask
argument_list|(
name|newTask
argument_list|)
expr_stmt|;
block|}
comment|// set all child tasks
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|oldChildTasks
init|=
name|currTask
operator|.
name|getChildTasks
argument_list|()
decl_stmt|;
name|currTask
operator|.
name|setChildTasks
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldChildTasks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|oldChildTasks
control|)
block|{
comment|// remove the current task from its original parent task's dependent task
name|tsk
operator|.
name|getParentTasks
argument_list|()
operator|.
name|remove
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
comment|// make new generated task depends on all the parent tasks of current task.
name|newTask
operator|.
name|addDependentTask
argument_list|(
name|tsk
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|long
name|getTotalKnownInputSize
parameter_list|(
name|Context
name|context
parameter_list|,
name|MapWork
name|currWork
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliases
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|aliasToSize
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
comment|// go over all the input paths, and calculate a known total size, known
comment|// size for each input alias.
name|Utilities
operator|.
name|getInputSummary
argument_list|(
name|context
argument_list|,
name|currWork
argument_list|,
literal|null
argument_list|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
comment|// set alias to size mapping, this can be used to determine if one table
comment|// is chosen as big table, what's the total size of left tables, which
comment|// are going to be small tables.
name|long
name|aliasTotalKnownInputSize
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|pathToAliases
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aliasList
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ContentSummary
name|cs
init|=
name|context
operator|.
name|getCS
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|long
name|size
init|=
name|cs
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|aliasList
control|)
block|{
name|aliasTotalKnownInputSize
operator|+=
name|size
expr_stmt|;
name|Long
name|es
init|=
name|aliasToSize
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|es
operator|==
literal|null
condition|)
block|{
name|es
operator|=
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|es
operator|+=
name|size
expr_stmt|;
name|aliasToSize
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|es
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|aliasTotalKnownInputSize
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Generate Map Join Task Error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|dispatch
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|nodeOutputs
operator|==
literal|null
operator|||
name|nodeOutputs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"No Dispatch Context"
argument_list|)
throw|;
block|}
name|TaskGraphWalkerContext
name|walkerCtx
init|=
operator|(
name|TaskGraphWalkerContext
operator|)
name|nodeOutputs
index|[
literal|0
index|]
decl_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|currTask
init|=
operator|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|nd
decl_stmt|;
comment|// not map reduce task or not conditional task, just skip
if|if
condition|(
name|currTask
operator|.
name|isMapRedTask
argument_list|()
condition|)
block|{
if|if
condition|(
name|currTask
operator|instanceof
name|ConditionalTask
condition|)
block|{
comment|// get the list of task
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|taskList
init|=
operator|(
operator|(
name|ConditionalTask
operator|)
name|currTask
operator|)
operator|.
name|getListTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|taskList
control|)
block|{
if|if
condition|(
name|tsk
operator|.
name|isMapRedTask
argument_list|()
condition|)
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|newTask
init|=
name|this
operator|.
name|processCurrentTask
argument_list|(
operator|(
name|MapRedTask
operator|)
name|tsk
argument_list|,
operator|(
operator|(
name|ConditionalTask
operator|)
name|currTask
operator|)
argument_list|,
name|physicalContext
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|walkerCtx
operator|.
name|addToDispatchList
argument_list|(
name|newTask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|newTask
init|=
name|this
operator|.
name|processCurrentTask
argument_list|(
operator|(
name|MapRedTask
operator|)
name|currTask
argument_list|,
literal|null
argument_list|,
name|physicalContext
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|walkerCtx
operator|.
name|addToDispatchList
argument_list|(
name|newTask
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

