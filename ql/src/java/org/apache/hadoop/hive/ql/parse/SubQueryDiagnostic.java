begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|TokenRewriteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_comment
comment|/*  * Contains functionality that helps with understanding how a SubQuery was rewritten.  */
end_comment

begin_class
specifier|public
class|class
name|SubQueryDiagnostic
block|{
specifier|static
name|QBSubQueryRewrite
name|getRewrite
parameter_list|(
name|QBSubQuery
name|subQuery
parameter_list|,
name|TokenRewriteStream
name|stream
parameter_list|,
name|Context
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|getExplain
argument_list|()
condition|)
block|{
return|return
operator|new
name|QBSubQueryRewrite
argument_list|(
name|subQuery
argument_list|,
name|stream
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|QBSubQueryRewriteNoop
argument_list|(
name|subQuery
argument_list|,
name|stream
argument_list|)
return|;
block|}
block|}
comment|/*    * Responsible for capturing SubQuery rewrites and providing the rewritten query    * as SQL.    */
specifier|public
specifier|static
class|class
name|QBSubQueryRewrite
block|{
name|QBSubQuery
name|subQuery
decl_stmt|;
name|TokenRewriteStream
name|stream
decl_stmt|;
comment|/*      * the rewritten where Clause      */
name|String
name|whereClause
decl_stmt|;
comment|/*      * any additions to the SubQueries Select Clause.      */
name|String
name|selectClauseAdditions
decl_stmt|;
comment|/*      * additions to the Group By Clause.      */
name|String
name|gByClauseAdditions
decl_stmt|;
name|boolean
name|addGroupByClause
decl_stmt|;
name|String
name|joiningCondition
decl_stmt|;
name|String
name|outerQueryPostJoinCond
decl_stmt|;
name|QBSubQueryRewrite
parameter_list|(
name|QBSubQuery
name|subQuery
parameter_list|,
name|TokenRewriteStream
name|stream
parameter_list|)
block|{
name|this
operator|.
name|subQuery
operator|=
name|subQuery
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
block|}
specifier|public
name|String
name|getRewrittenQuery
parameter_list|()
block|{
name|ASTNode
name|sqAST
init|=
name|subQuery
operator|.
name|getSubQueryAST
argument_list|()
decl_stmt|;
if|if
condition|(
name|whereClause
operator|!=
literal|null
condition|)
block|{
name|ASTNode
name|whereAST
init|=
operator|(
name|ASTNode
operator|)
name|sqAST
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|stream
operator|.
name|replace
argument_list|(
name|subQuery
operator|.
name|getAlias
argument_list|()
argument_list|,
name|whereAST
operator|.
name|getTokenStartIndex
argument_list|()
argument_list|,
name|whereAST
operator|.
name|getTokenStopIndex
argument_list|()
argument_list|,
name|whereClause
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|selectClauseAdditions
operator|!=
literal|null
condition|)
block|{
name|ASTNode
name|selectClause
init|=
operator|(
name|ASTNode
operator|)
name|sqAST
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|stream
operator|.
name|insertAfter
argument_list|(
name|subQuery
operator|.
name|getAlias
argument_list|()
argument_list|,
name|selectClause
operator|.
name|getTokenStopIndex
argument_list|()
argument_list|,
name|selectClauseAdditions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gByClauseAdditions
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|addGroupByClause
condition|)
block|{
name|ASTNode
name|groupBy
init|=
operator|(
name|ASTNode
operator|)
name|sqAST
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getChild
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|stream
operator|.
name|insertAfter
argument_list|(
name|subQuery
operator|.
name|getAlias
argument_list|()
argument_list|,
name|groupBy
operator|.
name|getTokenStopIndex
argument_list|()
argument_list|,
name|gByClauseAdditions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gByClauseAdditions
operator|=
literal|" group by "
operator|+
name|gByClauseAdditions
expr_stmt|;
name|stream
operator|.
name|insertAfter
argument_list|(
name|subQuery
operator|.
name|getAlias
argument_list|()
argument_list|,
name|sqAST
operator|.
name|getTokenStopIndex
argument_list|()
operator|-
literal|1
argument_list|,
name|gByClauseAdditions
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
return|return
name|stream
operator|.
name|toString
argument_list|(
name|subQuery
operator|.
name|getAlias
argument_list|()
argument_list|,
name|sqAST
operator|.
name|getTokenStartIndex
argument_list|()
argument_list|,
name|sqAST
operator|.
name|getTokenStopIndex
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|subQuery
operator|.
name|getAlias
argument_list|()
return|;
block|}
finally|finally
block|{
name|stream
operator|.
name|deleteProgram
argument_list|(
name|subQuery
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getJoiningCondition
parameter_list|()
block|{
return|return
name|joiningCondition
return|;
block|}
name|void
name|addWhereClauseRewrite
parameter_list|(
name|ASTNode
name|predicate
parameter_list|)
block|{
name|String
name|cond
init|=
name|stream
operator|.
name|toString
argument_list|(
name|predicate
operator|.
name|getTokenStartIndex
argument_list|()
argument_list|,
name|predicate
operator|.
name|getTokenStopIndex
argument_list|()
argument_list|)
decl_stmt|;
name|addWhereClauseRewrite
argument_list|(
name|cond
argument_list|)
expr_stmt|;
block|}
name|void
name|addWhereClauseRewrite
parameter_list|(
name|String
name|cond
parameter_list|)
block|{
name|whereClause
operator|=
name|whereClause
operator|==
literal|null
condition|?
literal|"where "
else|:
name|whereClause
operator|+
literal|" and "
expr_stmt|;
name|whereClause
operator|+=
name|cond
expr_stmt|;
block|}
name|void
name|addSelectClauseRewrite
parameter_list|(
name|ASTNode
name|selectExpr
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
if|if
condition|(
name|selectClauseAdditions
operator|==
literal|null
condition|)
block|{
name|selectClauseAdditions
operator|=
literal|""
expr_stmt|;
block|}
name|selectClauseAdditions
operator|+=
literal|", "
operator|+
name|stream
operator|.
name|toString
argument_list|(
name|selectExpr
operator|.
name|getTokenStartIndex
argument_list|()
argument_list|,
name|selectExpr
operator|.
name|getTokenStopIndex
argument_list|()
argument_list|)
operator|+
literal|" as "
operator|+
name|alias
expr_stmt|;
block|}
name|void
name|setAddGroupByClause
parameter_list|()
block|{
name|this
operator|.
name|addGroupByClause
operator|=
literal|true
expr_stmt|;
block|}
name|void
name|addGByClauseRewrite
parameter_list|(
name|ASTNode
name|selectExpr
parameter_list|)
block|{
if|if
condition|(
name|gByClauseAdditions
operator|==
literal|null
condition|)
block|{
name|gByClauseAdditions
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|addGroupByClause
operator|||
operator|!
name|gByClauseAdditions
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|gByClauseAdditions
operator|+=
literal|", "
expr_stmt|;
block|}
name|gByClauseAdditions
operator|+=
name|stream
operator|.
name|toString
argument_list|(
name|selectExpr
operator|.
name|getTokenStartIndex
argument_list|()
argument_list|,
name|selectExpr
operator|.
name|getTokenStopIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * joinCond represents a correlated predicate.      * leftIsRewritten, rightIsRewritten indicates if either side has been replaced by a column alias.      *       * If a side is not rewritten, we get its text from the tokenstream.       * For rewritten conditions we form the text based on the table and column reference.      */
name|void
name|addJoinCondition
parameter_list|(
name|ASTNode
name|joinCond
parameter_list|,
name|boolean
name|leftIsRewritten
parameter_list|,
name|boolean
name|rightIsRewritten
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|joiningCondition
operator|==
literal|null
condition|)
block|{
name|joiningCondition
operator|=
literal|" on "
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|" and "
argument_list|)
expr_stmt|;
block|}
name|addCondition
argument_list|(
name|b
argument_list|,
operator|(
name|ASTNode
operator|)
name|joinCond
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|leftIsRewritten
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
name|addCondition
argument_list|(
name|b
argument_list|,
operator|(
name|ASTNode
operator|)
name|joinCond
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rightIsRewritten
argument_list|)
expr_stmt|;
name|joiningCondition
operator|+=
name|b
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addCondition
parameter_list|(
name|StringBuilder
name|b
parameter_list|,
name|ASTNode
name|cond
parameter_list|,
name|boolean
name|rewritten
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rewritten
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|stream
operator|.
name|toString
argument_list|(
name|cond
operator|.
name|getTokenStartIndex
argument_list|()
argument_list|,
name|cond
operator|.
name|getTokenStopIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addReference
argument_list|(
name|b
argument_list|,
name|cond
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addReference
parameter_list|(
name|StringBuilder
name|b
parameter_list|,
name|ASTNode
name|ref
parameter_list|)
block|{
if|if
condition|(
name|ref
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|DOT
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
name|ref
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|addPostJoinCondition
parameter_list|(
name|ASTNode
name|cond
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|addReference
argument_list|(
name|b
argument_list|,
operator|(
name|ASTNode
operator|)
name|cond
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|outerQueryPostJoinCond
operator|=
name|b
operator|.
name|toString
argument_list|()
operator|+
literal|" is null"
expr_stmt|;
block|}
specifier|public
name|String
name|getOuterQueryPostJoinCond
parameter_list|()
block|{
return|return
name|outerQueryPostJoinCond
return|;
block|}
block|}
comment|/*    * In the non explain code path, we don't need to track Query rewrites.    * All add fns during Plan generation are Noops.    * If the get Rewrite methods are called, an UnsupportedOperationException is thrown.    */
specifier|public
specifier|static
class|class
name|QBSubQueryRewriteNoop
extends|extends
name|QBSubQueryRewrite
block|{
name|QBSubQueryRewriteNoop
parameter_list|(
name|QBSubQuery
name|subQuery
parameter_list|,
name|TokenRewriteStream
name|stream
parameter_list|)
block|{
name|super
argument_list|(
name|subQuery
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getRewrittenQuery
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getJoiningCondition
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|final
name|void
name|addWhereClauseRewrite
parameter_list|(
name|ASTNode
name|predicate
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|final
name|void
name|addWhereClauseRewrite
parameter_list|(
name|String
name|cond
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|final
name|void
name|addSelectClauseRewrite
parameter_list|(
name|ASTNode
name|selectExpr
parameter_list|,
name|String
name|alias
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|final
name|void
name|setAddGroupByClause
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|final
name|void
name|addGByClauseRewrite
parameter_list|(
name|ASTNode
name|selectExpr
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|final
name|void
name|addJoinCondition
parameter_list|(
name|ASTNode
name|joinCond
parameter_list|,
name|boolean
name|leftIsRewritten
parameter_list|,
name|boolean
name|rightIsRewritten
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|final
name|void
name|addPostJoinCondition
parameter_list|(
name|ASTNode
name|cond
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getOuterQueryPostJoinCond
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

