begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|TreeReaderFactory
operator|.
name|TreeReaderSchema
import|;
end_import

begin_comment
comment|/**  * Take the file types and the (optional) configuration column names/types and see if there  * has been schema evolution.  */
end_comment

begin_class
specifier|public
class|class
name|SchemaEvolution
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SchemaEvolution
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|TreeReaderSchema
name|validateAndCreate
parameter_list|(
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|fileTypes
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|schemaTypes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// For ACID, the row is the ROW field in the outer STRUCT.
specifier|final
name|boolean
name|isAcid
init|=
name|checkAcidSchema
argument_list|(
name|fileTypes
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|rowSchema
decl_stmt|;
name|int
name|rowSubtype
decl_stmt|;
if|if
condition|(
name|isAcid
condition|)
block|{
name|rowSubtype
operator|=
name|OrcRecordUpdater
operator|.
name|ROW
operator|+
literal|1
expr_stmt|;
name|rowSchema
operator|=
name|fileTypes
operator|.
name|subList
argument_list|(
name|rowSubtype
argument_list|,
name|fileTypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rowSubtype
operator|=
literal|0
expr_stmt|;
name|rowSchema
operator|=
name|fileTypes
expr_stmt|;
block|}
comment|// Do checking on the overlap.  Additional columns will be defaulted to NULL.
name|int
name|numFileColumns
init|=
name|rowSchema
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubtypesCount
argument_list|()
decl_stmt|;
name|int
name|numDesiredColumns
init|=
name|schemaTypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubtypesCount
argument_list|()
decl_stmt|;
name|int
name|numReadColumns
init|=
name|Math
operator|.
name|min
argument_list|(
name|numFileColumns
argument_list|,
name|numDesiredColumns
argument_list|)
decl_stmt|;
comment|/**      * Check type promotion.      *      * Currently, we only support integer type promotions that can be done "implicitly".      * That is, we know that using a bigger integer tree reader on the original smaller integer      * column will "just work".      *      * In the future, other type promotions might require type conversion.      */
comment|// short -> int -> bigint as same integer readers are used for the above types.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numReadColumns
condition|;
name|i
operator|++
control|)
block|{
name|OrcProto
operator|.
name|Type
name|fColType
init|=
name|fileTypes
operator|.
name|get
argument_list|(
name|rowSubtype
operator|+
name|i
argument_list|)
decl_stmt|;
name|OrcProto
operator|.
name|Type
name|rColType
init|=
name|schemaTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fColType
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|rColType
operator|.
name|getKind
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fColType
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|SHORT
argument_list|)
condition|)
block|{
if|if
condition|(
name|rColType
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|INT
argument_list|)
operator|||
name|rColType
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|LONG
argument_list|)
condition|)
block|{
comment|// type promotion possible, converting SHORT to INT/LONG requested type
name|ok
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fColType
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|INT
argument_list|)
condition|)
block|{
if|if
condition|(
name|rColType
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|LONG
argument_list|)
condition|)
block|{
comment|// type promotion possible, converting INT to LONG requested type
name|ok
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ok
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ORC does not support type conversion from "
operator|+
name|fColType
operator|.
name|getKind
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" to "
operator|+
name|rColType
operator|.
name|getKind
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|List
argument_list|<
name|Type
argument_list|>
name|fullSchemaTypes
decl_stmt|;
if|if
condition|(
name|isAcid
condition|)
block|{
name|fullSchemaTypes
operator|=
operator|new
name|ArrayList
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
argument_list|()
expr_stmt|;
comment|// This copies the ACID struct type which is subtype = 0.
comment|// It has field names "operation" through "row".
comment|// And we copy the types for all fields EXCEPT ROW (which must be last!).
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowSubtype
condition|;
name|i
operator|++
control|)
block|{
name|fullSchemaTypes
operator|.
name|add
argument_list|(
name|fileTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add the row struct type.
name|OrcUtils
operator|.
name|appendOrcTypesRebuildSubtypes
argument_list|(
name|fullSchemaTypes
argument_list|,
name|schemaTypes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fullSchemaTypes
operator|=
name|schemaTypes
expr_stmt|;
block|}
name|int
name|innerStructSubtype
init|=
name|rowSubtype
decl_stmt|;
comment|// LOG.info("Schema evolution: (fileTypes) " + fileTypes.toString() +
comment|//     " (schemaEvolutionTypes) " + schemaEvolutionTypes.toString());
return|return
operator|new
name|TreeReaderSchema
argument_list|()
operator|.
name|fileTypes
argument_list|(
name|fileTypes
argument_list|)
operator|.
name|schemaTypes
argument_list|(
name|fullSchemaTypes
argument_list|)
operator|.
name|innerStructSubtype
argument_list|(
name|innerStructSubtype
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|checkAcidSchema
parameter_list|(
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|fileSchema
parameter_list|)
block|{
if|if
condition|(
name|fileSchema
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRUCT
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|rootFields
init|=
name|fileSchema
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldNamesList
argument_list|()
decl_stmt|;
if|if
condition|(
name|acidEventFieldNames
operator|.
name|equals
argument_list|(
name|rootFields
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * @param typeDescr    * @return ORC types for the ACID event based on the row's type description    */
specifier|public
specifier|static
name|List
argument_list|<
name|Type
argument_list|>
name|createEventSchema
parameter_list|(
name|TypeDescription
name|typeDescr
parameter_list|)
block|{
name|List
argument_list|<
name|Type
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Type
argument_list|>
argument_list|()
decl_stmt|;
name|OrcProto
operator|.
name|Type
operator|.
name|Builder
name|type
init|=
name|OrcProto
operator|.
name|Type
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRUCT
argument_list|)
expr_stmt|;
name|type
operator|.
name|addAllFieldNames
argument_list|(
name|acidEventFieldNames
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|acidEventFieldNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|type
operator|.
name|addSubtypes
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|type
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Automatically add all fields except the last (ROW).
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|acidEventOrcTypeKinds
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|type
operator|.
name|clear
argument_list|()
expr_stmt|;
name|type
operator|.
name|setKind
argument_list|(
name|acidEventOrcTypeKinds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|type
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|OrcUtils
operator|.
name|appendOrcTypesRebuildSubtypes
argument_list|(
name|result
argument_list|,
name|typeDescr
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|acidEventFieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|acidEventFieldNames
operator|.
name|add
argument_list|(
literal|"operation"
argument_list|)
expr_stmt|;
name|acidEventFieldNames
operator|.
name|add
argument_list|(
literal|"originalTransaction"
argument_list|)
expr_stmt|;
name|acidEventFieldNames
operator|.
name|add
argument_list|(
literal|"bucket"
argument_list|)
expr_stmt|;
name|acidEventFieldNames
operator|.
name|add
argument_list|(
literal|"rowId"
argument_list|)
expr_stmt|;
name|acidEventFieldNames
operator|.
name|add
argument_list|(
literal|"currentTransaction"
argument_list|)
expr_stmt|;
name|acidEventFieldNames
operator|.
name|add
argument_list|(
literal|"row"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
argument_list|>
name|acidEventOrcTypeKinds
init|=
operator|new
name|ArrayList
argument_list|<
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|acidEventOrcTypeKinds
operator|.
name|add
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|INT
argument_list|)
expr_stmt|;
name|acidEventOrcTypeKinds
operator|.
name|add
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|acidEventOrcTypeKinds
operator|.
name|add
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|INT
argument_list|)
expr_stmt|;
name|acidEventOrcTypeKinds
operator|.
name|add
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|acidEventOrcTypeKinds
operator|.
name|add
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|acidEventOrcTypeKinds
operator|.
name|add
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRUCT
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

