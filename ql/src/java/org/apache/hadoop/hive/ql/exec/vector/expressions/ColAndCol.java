begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExpressionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Evaluate AND of 2 or more boolean columns and store the boolean result in the  * output boolean column.  This is a projection or result producing expression (as opposed to  * a filter expression).  *  * Some child boolean columns may be vector expressions evaluated into boolean scratch columns.  */
end_comment

begin_class
specifier|public
class|class
name|ColAndCol
extends|extends
name|VectorExpression
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
index|[]
name|colNums
decl_stmt|;
specifier|private
name|int
name|outputColumn
decl_stmt|;
specifier|private
name|int
index|[]
name|mapToChildExpression
decl_stmt|;
specifier|private
name|int
index|[]
name|andSelected
decl_stmt|;
specifier|private
name|boolean
index|[]
name|intermediateNulls
decl_stmt|;
specifier|public
name|ColAndCol
parameter_list|(
name|int
index|[]
name|colNums
parameter_list|,
name|int
name|outputColumn
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|colNums
operator|=
name|colNums
expr_stmt|;
name|this
operator|.
name|outputColumn
operator|=
name|outputColumn
expr_stmt|;
name|mapToChildExpression
operator|=
literal|null
expr_stmt|;
name|andSelected
operator|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|intermediateNulls
operator|=
operator|new
name|boolean
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
block|}
specifier|public
name|ColAndCol
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|colNums
operator|.
name|length
operator|>=
literal|2
argument_list|)
expr_stmt|;
comment|/*      * Vector child expressions will be omitted if they are existing boolean vector columns,      * so the child index does not necessarily index into the childExpressions.      * We construct a simple index map to the child expression in mapToChildExpression.      */
if|if
condition|(
name|childExpressions
operator|!=
literal|null
operator|&&
name|mapToChildExpression
operator|==
literal|null
condition|)
block|{
comment|// Some vector child expressions can be omitted (e.g. if they are existing boolean columns).
name|mapToChildExpression
operator|=
operator|new
name|int
index|[
name|colNums
operator|.
name|length
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|mapToChildExpression
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|childExpressions
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
name|VectorExpression
name|ve
init|=
name|childExpressions
index|[
name|c
index|]
decl_stmt|;
name|int
name|outputColumn
init|=
name|ve
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|i
operator|>=
name|colNums
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Vectorized child expression output not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|colNums
index|[
name|i
index|]
operator|==
name|outputColumn
condition|)
block|{
name|mapToChildExpression
index|[
name|i
index|]
operator|=
name|c
expr_stmt|;
break|break;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|int
name|n
init|=
name|batch
operator|.
name|size
decl_stmt|;
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
block|{
comment|// Nothing to do
return|return;
block|}
if|if
condition|(
name|childExpressions
operator|!=
literal|null
condition|)
block|{
comment|/*        * Evaluate first child expression.  Other child are conditionally evaluated later        * based on whether there is still a need for AND processing.        */
name|int
name|childExpressionIndex
init|=
name|mapToChildExpression
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|childExpressionIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|VectorExpression
name|ve
init|=
name|childExpressions
index|[
name|childExpressionIndex
index|]
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|ve
operator|.
name|getOutputColumn
argument_list|()
operator|==
name|colNums
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ve
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
name|int
index|[]
name|sel
init|=
name|batch
operator|.
name|selected
decl_stmt|;
name|LongColumnVector
name|outV
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|outputColumn
index|]
decl_stmt|;
name|long
index|[]
name|outputVector
init|=
name|outV
operator|.
name|vector
decl_stmt|;
comment|/**      * Null processing complicates the algorithm here for Multi-AND.      *      * All true --> true      * 0 or more true with 1 or more null --> result = null      * Any false --> false      *      * For AND-processing, we remember nulls in the intermediateNulls array as we go along so      * later we can mark the row as null instead of true when there is a null.      */
comment|/*      * andRepeating will be true when all the children column vectors processed so far are      * some combination of repeating true and repeating null.      * andRepeatingIsNull will be true when there has been at least one repeating null column.      */
name|boolean
name|andRepeating
init|=
literal|false
decl_stmt|;
name|boolean
name|andRepeatingIsNull
init|=
literal|false
decl_stmt|;
comment|/*      * The andSel variable and andSelected member array represent rows that have at have      * some combination of true and nulls.      */
name|int
name|andSel
init|=
literal|0
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|intermediateNulls
argument_list|,
literal|0
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Reset noNulls to true, isNull to false, isRepeating to false.
name|outV
operator|.
name|reset
argument_list|()
expr_stmt|;
name|LongColumnVector
name|firstColVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|colNums
index|[
literal|0
index|]
index|]
decl_stmt|;
name|long
index|[]
name|firstVector
init|=
name|firstColVector
operator|.
name|vector
decl_stmt|;
comment|/*      * We prime the pump by evaluating the first child to see if we are starting with      * andRepeating/andRepeatingHasNulls or we are starting with andSel/andSelected processing.      */
if|if
condition|(
name|firstColVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|firstColVector
operator|.
name|noNulls
operator|||
operator|!
name|firstColVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
if|if
condition|(
name|firstVector
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
comment|// When the entire child column is repeating false, we are done for AND.
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outputVector
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// First column is repeating true.
block|}
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|firstColVector
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// At least one repeating null column.
name|andRepeatingIsNull
operator|=
literal|true
expr_stmt|;
block|}
name|andRepeating
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|firstColVector
operator|.
name|noNulls
condition|)
block|{
comment|/*        * No nulls -- so all true rows go in andSel/andSelected.        */
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|firstVector
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|andSelected
index|[
name|andSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|firstVector
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|andSelected
index|[
name|andSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|/*        * Can be nulls -- so all true rows and null rows go in andSel/andSelected.        * Remember nulls in our separate intermediateNulls array.        */
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|firstColVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|intermediateNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|andSelected
index|[
name|andSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|firstVector
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|andSelected
index|[
name|andSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|firstColVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|intermediateNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|andSelected
index|[
name|andSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|firstVector
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|andSelected
index|[
name|andSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*      * Process child #2 and above.      */
name|int
name|colNum
init|=
literal|1
decl_stmt|;
do|do
block|{
if|if
condition|(
operator|!
name|andRepeating
operator|&&
name|andSel
operator|==
literal|0
condition|)
block|{
comment|/*          * Since andSel/andSelected represent currently true entries and there are none,          * then nothing is true (how philosophical!).          */
break|break;
block|}
if|if
condition|(
name|childExpressions
operator|!=
literal|null
condition|)
block|{
name|int
name|childExpressionIndex
init|=
name|mapToChildExpression
index|[
name|colNum
index|]
decl_stmt|;
if|if
condition|(
name|childExpressionIndex
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|andRepeating
condition|)
block|{
comment|/*              * We need to start with a full evaluate on all [selected] rows.              */
name|VectorExpression
name|ve
init|=
name|childExpressions
index|[
name|childExpressionIndex
index|]
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|ve
operator|.
name|getOutputColumn
argument_list|()
operator|==
name|colNums
index|[
name|colNum
index|]
argument_list|)
expr_stmt|;
name|ve
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/*              * Evaluate next child expression.              * But only evaluate the andSelected rows (i.e. current true or true with nulls rows).              */
name|boolean
name|saveSelectedInUse
init|=
name|batch
operator|.
name|selectedInUse
decl_stmt|;
name|int
index|[]
name|saveSelected
init|=
name|sel
decl_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
name|andSelected
expr_stmt|;
name|VectorExpression
name|ve
init|=
name|childExpressions
index|[
name|childExpressionIndex
index|]
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|ve
operator|.
name|getOutputColumn
argument_list|()
operator|==
name|colNums
index|[
name|colNum
index|]
argument_list|)
expr_stmt|;
name|ve
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
name|saveSelectedInUse
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
name|saveSelected
expr_stmt|;
block|}
block|}
block|}
name|LongColumnVector
name|nextColVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|colNums
index|[
name|colNum
index|]
index|]
decl_stmt|;
name|long
index|[]
name|nextVector
init|=
name|nextColVector
operator|.
name|vector
decl_stmt|;
if|if
condition|(
name|andRepeating
condition|)
block|{
comment|/*          * The andRepeating flag means the whole batch is repeating true possibly with          * some repeating nulls.          */
if|if
condition|(
name|nextColVector
operator|.
name|isRepeating
condition|)
block|{
comment|/*            * Current child column is repeating so stay in repeating mode.            */
if|if
condition|(
name|nextColVector
operator|.
name|noNulls
operator|||
operator|!
name|nextColVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
if|if
condition|(
name|nextVector
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
comment|// When the entire child column is repeating false, we are done for AND.
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outputVector
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// Current column is repeating true.
block|}
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|nextColVector
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// At least one repeating null column.
name|andRepeatingIsNull
operator|=
literal|true
expr_stmt|;
block|}
comment|// Continue with andRepeating as true.
block|}
else|else
block|{
comment|/*            * Switch away from andRepeating/andRepeatingIsNull and now represent individual rows in            * andSel/andSelected.            */
if|if
condition|(
name|nextColVector
operator|.
name|noNulls
condition|)
block|{
comment|/*              * Current child column has no nulls.              */
name|Preconditions
operator|.
name|checkState
argument_list|(
name|andSel
operator|==
literal|0
argument_list|)
expr_stmt|;
name|andRepeating
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|andRepeatingIsNull
condition|)
block|{
comment|/*                * Since andRepeatingIsNull is true, we always set intermediateNulls when building                * andSel/andSelected when the next row is true.                */
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|nextVector
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|intermediateNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|andSelected
index|[
name|andSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nextVector
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|intermediateNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|andSelected
index|[
name|andSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
name|andRepeatingIsNull
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|/*                * Previous rounds were all true with no null child columns.  Just build                * andSel/andSelected when the next row is true.                */
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|nextVector
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|andSelected
index|[
name|andSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nextVector
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|andSelected
index|[
name|andSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
comment|/*              * Current child column can have nulls.              */
name|Preconditions
operator|.
name|checkState
argument_list|(
name|andSel
operator|==
literal|0
argument_list|)
expr_stmt|;
name|andRepeating
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|andRepeatingIsNull
condition|)
block|{
comment|/*                * Since andRepeatingIsNull is true, we always set intermediateNulls when building                * andSel/andSelected when the next row is null or true...                */
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|nextColVector
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|nextVector
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|intermediateNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|andSelected
index|[
name|andSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nextColVector
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|nextVector
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|intermediateNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|andSelected
index|[
name|andSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
name|andRepeatingIsNull
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|/*                * Previous rounds were all true with no null child columns.  Build                * andSel/andSelected when the next row is true; also build when next is null                * and set intermediateNulls to true, too.                */
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|nextColVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|intermediateNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|andSelected
index|[
name|andSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextVector
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|andSelected
index|[
name|andSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nextColVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|intermediateNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|andSelected
index|[
name|andSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextVector
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|andSelected
index|[
name|andSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
else|else
block|{
comment|/*          * Continue in row mode: the andSel variable and andSelected member array contains the          * rows that are some combination of true and null.          */
if|if
condition|(
name|nextColVector
operator|.
name|isRepeating
condition|)
block|{
comment|/*            * Current child column is repeating which affects all rows.            */
if|if
condition|(
name|nextColVector
operator|.
name|noNulls
operator|||
operator|!
name|nextColVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
if|if
condition|(
name|nextVector
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
comment|// When the entire child column is repeating false, we are done for AND.
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outputVector
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// Child column is all true. Keep current andSel/andSelected rows.
block|}
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|nextColVector
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Column is repeating null -- need to mark all current rows in andSel/andSelected
comment|// as null.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|andSel
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|andSelected
index|[
name|j
index|]
decl_stmt|;
name|intermediateNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|nextColVector
operator|.
name|noNulls
condition|)
block|{
comment|/*            * Current child column has no nulls.            */
comment|/*            * Rebuild andSel/andSelected to keep true rows.            */
name|int
name|newSel
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|andSel
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|andSelected
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|nextVector
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|andSelected
index|[
name|newSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
name|andSel
operator|=
name|newSel
expr_stmt|;
block|}
else|else
block|{
comment|/*            * Current child column can have nulls.            */
comment|/*            * Rebuild andSel/andSelected to keep true rows or null rows.            */
name|int
name|newSel
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|andSel
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|andSelected
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|nextColVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
comment|// At least one null.
name|intermediateNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|andSelected
index|[
name|newSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextVector
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|andSelected
index|[
name|newSel
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
name|andSel
operator|=
name|newSel
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
operator|++
name|colNum
operator|<
name|colNums
operator|.
name|length
condition|)
do|;
comment|/*      * Produce final result.      */
if|if
condition|(
name|andRepeating
condition|)
block|{
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|andRepeatingIsNull
condition|)
block|{
comment|// The appearance of a null makes the repeated result null.
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// All columns are repeating true.
name|outputVector
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|andSel
operator|==
literal|0
condition|)
block|{
comment|// No rows had true.
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outputVector
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// Ok, rows were some combination of true and null throughout.
name|int
name|andIndex
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
comment|/*          * The batch selected array has all the rows we are projecting a boolean from.          * The andSelected array has a subset of the selected rows that have at least          * one true and may have some nulls. Now we need to decide if we are going to mark          * those rows as true, or null because there was at least one null.          *          * We use the andIndex to progress through the andSelected array and make a decision          * on how to fill out the boolean result.          *          * Since we reset the output column, we shouldn't have to set isNull false for true          * entries.          */
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|andIndex
operator|<
name|andSel
operator|&&
name|andSelected
index|[
name|andIndex
index|]
operator|==
name|i
condition|)
block|{
comment|// We haven't processed all the andSelected entries and the row index is in
comment|// andSelected, so make a result decision for true or null.
if|if
condition|(
name|intermediateNulls
index|[
name|i
index|]
condition|)
block|{
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|outputVector
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
block|}
name|andIndex
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// The row is not in the andSelected array.  Result is false.
name|outputVector
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|andIndex
operator|==
name|andSel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/*          * The andSelected array has a subset of the selected rows that have at least          * one true and may have some nulls. Now we need to decide if we are going to mark          * those rows as true, or null because there was at least one null.          *          * Prefill the result as all false.  Then decide about the andSelected entries.          */
name|Arrays
operator|.
name|fill
argument_list|(
name|outputVector
argument_list|,
literal|0
argument_list|,
name|n
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|andSel
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|andSelected
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|intermediateNulls
index|[
name|i
index|]
condition|)
block|{
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|outputVector
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getOutputColumn
parameter_list|()
block|{
return|return
name|outputColumn
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOutputType
parameter_list|()
block|{
return|return
literal|"boolean"
return|;
block|}
specifier|public
name|void
name|setOutputColumn
parameter_list|(
name|int
name|outputColumn
parameter_list|)
block|{
name|this
operator|.
name|outputColumn
operator|=
name|outputColumn
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|VectorExpressionDescriptor
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
operator|(
operator|new
name|VectorExpressionDescriptor
operator|.
name|Builder
argument_list|()
operator|)
operator|.
name|setMode
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
operator|.
name|setNumArguments
argument_list|(
literal|2
argument_list|)
operator|.
name|setArgumentTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|ArgumentType
operator|.
name|getType
argument_list|(
literal|"long"
argument_list|)
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|ArgumentType
operator|.
name|getType
argument_list|(
literal|"long"
argument_list|)
argument_list|)
operator|.
name|setInputExpressionTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|InputExpressionType
operator|.
name|COLUMN
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|InputExpressionType
operator|.
name|COLUMN
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

