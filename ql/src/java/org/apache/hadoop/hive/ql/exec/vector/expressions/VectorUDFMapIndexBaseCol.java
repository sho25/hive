begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|MapColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_comment
comment|/**  * Superclass to support vectorized functions that take a column value as key of Map  * and return the value of Map.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorUDFMapIndexBaseCol
extends|extends
name|VectorExpression
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|mapColumnNum
decl_stmt|;
specifier|private
name|int
name|indexColumnNum
decl_stmt|;
specifier|private
name|ColumnVector
name|indexColumnVector
decl_stmt|;
specifier|public
name|VectorUDFMapIndexBaseCol
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|VectorUDFMapIndexBaseCol
parameter_list|(
name|int
name|mapColumnNum
parameter_list|,
name|int
name|indexColumnNum
parameter_list|,
name|int
name|outputColumnNum
parameter_list|)
block|{
name|super
argument_list|(
name|outputColumnNum
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapColumnNum
operator|=
name|mapColumnNum
expr_stmt|;
name|this
operator|.
name|indexColumnNum
operator|=
name|indexColumnNum
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// return immediately if batch is empty
specifier|final
name|int
name|n
init|=
name|batch
operator|.
name|size
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|childExpressions
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|evaluateChildren
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|ColumnVector
name|outV
init|=
name|batch
operator|.
name|cols
index|[
name|outputColumnNum
index|]
decl_stmt|;
name|MapColumnVector
name|mapV
init|=
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|mapColumnNum
index|]
decl_stmt|;
comment|// indexColumnVector includes the keys of Map
name|indexColumnVector
operator|=
name|batch
operator|.
name|cols
index|[
name|indexColumnNum
index|]
expr_stmt|;
name|ColumnVector
name|valuesV
init|=
name|mapV
operator|.
name|values
decl_stmt|;
name|int
index|[]
name|sel
init|=
name|batch
operator|.
name|selected
decl_stmt|;
name|boolean
index|[]
name|indexIsNull
init|=
name|indexColumnVector
operator|.
name|isNull
decl_stmt|;
name|boolean
index|[]
name|mapIsNull
init|=
name|mapV
operator|.
name|isNull
decl_stmt|;
name|boolean
index|[]
name|outputIsNull
init|=
name|outV
operator|.
name|isNull
decl_stmt|;
comment|// We do not need to do a column reset since we are carefully changing the output.
name|outV
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
comment|/*      * Do careful maintenance of the outputColVector.noNulls flag.      */
if|if
condition|(
name|indexColumnVector
operator|.
name|isRepeating
condition|)
block|{
comment|/*        * Repeated index or repeated NULL index.        */
if|if
condition|(
name|indexColumnVector
operator|.
name|noNulls
operator|||
operator|!
name|indexIsNull
index|[
literal|0
index|]
condition|)
block|{
comment|/*          * Same INDEX for entire batch.          */
if|if
condition|(
name|mapV
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|mapV
operator|.
name|noNulls
operator|||
operator|!
name|mapIsNull
index|[
literal|0
index|]
condition|)
block|{
specifier|final
name|int
name|repeatedMapIndex
init|=
name|findInMap
argument_list|(
name|indexColumnVector
argument_list|,
literal|0
argument_list|,
name|mapV
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|repeatedMapIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outV
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|setElement
argument_list|(
literal|0
argument_list|,
name|repeatedMapIndex
argument_list|,
name|valuesV
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputIsNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
return|return;
block|}
comment|/*          * Individual row processing for LIST vector with *repeated* INDEX value.          */
if|if
condition|(
name|mapV
operator|.
name|noNulls
condition|)
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
comment|// CONSIDER: For large n, fill n or all of isNull array and use the tighter ELSE loop.
if|if
condition|(
operator|!
name|outV
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|n
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
specifier|final
name|int
name|mapIndex
init|=
name|findInMap
argument_list|(
name|indexColumnVector
argument_list|,
literal|0
argument_list|,
name|mapV
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|setElement
argument_list|(
name|i
argument_list|,
name|mapIndex
argument_list|,
name|valuesV
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|n
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
specifier|final
name|int
name|mapIndex
init|=
name|findInMap
argument_list|(
name|indexColumnVector
argument_list|,
literal|0
argument_list|,
name|mapV
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outV
operator|.
name|setElement
argument_list|(
name|i
argument_list|,
name|mapIndex
argument_list|,
name|valuesV
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|outV
operator|.
name|noNulls
condition|)
block|{
comment|// Assume it is almost always a performance win to fill all of isNull so we can
comment|// safely reset noNulls.
name|Arrays
operator|.
name|fill
argument_list|(
name|outputIsNull
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|mapIndex
init|=
name|findInMap
argument_list|(
name|indexColumnVector
argument_list|,
literal|0
argument_list|,
name|mapV
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outV
operator|.
name|setElement
argument_list|(
name|i
argument_list|,
name|mapIndex
argument_list|,
name|valuesV
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
comment|/* there are NULLs in the LIST */
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|mapIsNull
index|[
name|i
index|]
condition|)
block|{
specifier|final
name|int
name|mapIndex
init|=
name|findInMap
argument_list|(
name|indexColumnVector
argument_list|,
literal|0
argument_list|,
name|mapV
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|setElement
argument_list|(
name|i
argument_list|,
name|mapIndex
argument_list|,
name|valuesV
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputIsNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|mapIsNull
index|[
name|i
index|]
condition|)
block|{
specifier|final
name|int
name|mapIndex
init|=
name|findInMap
argument_list|(
name|indexColumnVector
argument_list|,
literal|0
argument_list|,
name|mapV
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|setElement
argument_list|(
name|i
argument_list|,
name|mapIndex
argument_list|,
name|valuesV
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputIsNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|outputIsNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
return|return;
block|}
comment|// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
comment|/*      * Same MAP instance for entire batch.      *      * (Repeated INDEX case handled above).      */
if|if
condition|(
name|mapV
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|mapV
operator|.
name|noNulls
operator|||
operator|!
name|mapIsNull
index|[
literal|0
index|]
condition|)
block|{
comment|/*          * Individual row processing for INDEX vector with *repeated* MAP instance.          */
if|if
condition|(
name|indexColumnVector
operator|.
name|noNulls
condition|)
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
comment|// CONSIDER: For large n, fill n or all of isNull array and use the tighter ELSE loop.
if|if
condition|(
operator|!
name|outV
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
specifier|final
name|int
name|mapIndex
init|=
name|findInMap
argument_list|(
name|indexColumnVector
argument_list|,
name|i
argument_list|,
name|mapV
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|setElement
argument_list|(
name|i
argument_list|,
name|mapIndex
argument_list|,
name|valuesV
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
specifier|final
name|int
name|mapIndex
init|=
name|findInMap
argument_list|(
name|indexColumnVector
argument_list|,
name|i
argument_list|,
name|mapV
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outV
operator|.
name|setElement
argument_list|(
name|i
argument_list|,
name|mapIndex
argument_list|,
name|valuesV
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|outV
operator|.
name|noNulls
condition|)
block|{
comment|// Assume it is almost always a performance win to fill all of isNull so we can
comment|// safely reset noNulls.
name|Arrays
operator|.
name|fill
argument_list|(
name|outputIsNull
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|mapIndex
init|=
name|findInMap
argument_list|(
name|indexColumnVector
argument_list|,
name|i
argument_list|,
name|mapV
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outV
operator|.
name|setElement
argument_list|(
name|i
argument_list|,
name|mapIndex
argument_list|,
name|valuesV
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
comment|/* there are NULLs in the inputColVector */
block|{
comment|/*            * Do careful maintenance of the outV.noNulls flag.            */
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|indexIsNull
index|[
name|i
index|]
condition|)
block|{
specifier|final
name|int
name|mapIndex
init|=
name|findInMap
argument_list|(
name|indexColumnVector
argument_list|,
name|i
argument_list|,
name|mapV
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|setElement
argument_list|(
name|i
argument_list|,
name|mapIndex
argument_list|,
name|valuesV
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputIsNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|indexIsNull
index|[
name|i
index|]
condition|)
block|{
specifier|final
name|int
name|mapIndex
init|=
name|findInMap
argument_list|(
name|indexColumnVector
argument_list|,
name|i
argument_list|,
name|mapV
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|setElement
argument_list|(
name|i
argument_list|,
name|mapIndex
argument_list|,
name|valuesV
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputIsNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|outputIsNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
return|return;
block|}
comment|// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
comment|/*      * Individual row processing for INDEX vectors and LIST vectors.      */
specifier|final
name|boolean
name|listNoNulls
init|=
name|mapV
operator|.
name|noNulls
decl_stmt|;
if|if
condition|(
name|indexColumnVector
operator|.
name|noNulls
condition|)
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
comment|// CONSIDER: For large n, fill n or all of isNull array and use the tighter ELSE loop.
if|if
condition|(
operator|!
name|outV
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|listNoNulls
operator|||
operator|!
name|mapIsNull
index|[
name|i
index|]
condition|)
block|{
specifier|final
name|int
name|mapIndex
init|=
name|findInMap
argument_list|(
name|indexColumnVector
argument_list|,
name|i
argument_list|,
name|mapV
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|setElement
argument_list|(
name|i
argument_list|,
name|mapIndex
argument_list|,
name|valuesV
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputIsNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|listNoNulls
operator|||
operator|!
name|mapIsNull
index|[
name|i
index|]
condition|)
block|{
specifier|final
name|int
name|mapIndex
init|=
name|findInMap
argument_list|(
name|indexColumnVector
argument_list|,
name|i
argument_list|,
name|mapV
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outV
operator|.
name|setElement
argument_list|(
name|i
argument_list|,
name|mapIndex
argument_list|,
name|valuesV
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputIsNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|outV
operator|.
name|noNulls
condition|)
block|{
comment|// Assume it is almost always a performance win to fill all of isNull so we can
comment|// safely reset noNulls.
name|Arrays
operator|.
name|fill
argument_list|(
name|outputIsNull
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|listNoNulls
operator|||
operator|!
name|mapIsNull
index|[
name|i
index|]
condition|)
block|{
specifier|final
name|int
name|mapIndex
init|=
name|findInMap
argument_list|(
name|indexColumnVector
argument_list|,
name|i
argument_list|,
name|mapV
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outV
operator|.
name|setElement
argument_list|(
name|i
argument_list|,
name|mapIndex
argument_list|,
name|valuesV
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputIsNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
comment|/* there are NULLs in the inputColVector */
block|{
comment|/*        * Do careful maintenance of the outV.noNulls flag.        */
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|indexIsNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|listNoNulls
operator|||
operator|!
name|mapIsNull
index|[
name|i
index|]
condition|)
block|{
specifier|final
name|int
name|mapIndex
init|=
name|findInMap
argument_list|(
name|indexColumnVector
argument_list|,
name|i
argument_list|,
name|mapV
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|setElement
argument_list|(
name|i
argument_list|,
name|mapIndex
argument_list|,
name|valuesV
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputIsNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputIsNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|indexIsNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|listNoNulls
operator|||
operator|!
name|mapIsNull
index|[
name|i
index|]
condition|)
block|{
specifier|final
name|int
name|mapIndex
init|=
name|findInMap
argument_list|(
name|indexColumnVector
argument_list|,
name|i
argument_list|,
name|mapV
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|setElement
argument_list|(
name|i
argument_list|,
name|mapIndex
argument_list|,
name|valuesV
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputIsNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputIsNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|int
name|findInMap
parameter_list|(
name|ColumnVector
name|indexColumnVector
parameter_list|,
name|int
name|indexBatchIndex
parameter_list|,
name|MapColumnVector
name|mapColumnVector
parameter_list|,
name|int
name|mapBatchIndex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|getMapColumnNum
parameter_list|()
block|{
return|return
name|mapColumnNum
return|;
block|}
specifier|public
name|int
name|getIndexColumnNum
parameter_list|()
block|{
return|return
name|indexColumnNum
return|;
block|}
block|}
end_class

end_unit

