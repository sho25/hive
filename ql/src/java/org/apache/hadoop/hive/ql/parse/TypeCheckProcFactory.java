begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnListDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeFieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeNullDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|SettableUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBaseCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_comment
comment|/**  * The Factory for creating typecheck processors. The typecheck processors are  * used to processes the syntax trees for expressions and convert them into  * expression Node Descriptor trees. They also introduce the correct conversion  * functions to do proper implicit conversion.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|TypeCheckProcFactory
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TypeCheckProcFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|TypeCheckProcFactory
parameter_list|()
block|{
comment|// prevent instantiation
block|}
comment|/**    * Function to do groupby subexpression elimination. This is called by all the    * processors initially. As an example, consider the query select a+b,    * count(1) from T group by a+b; Then a+b is already precomputed in the group    * by operators key, so we substitute a+b in the select list with the internal    * column name of the a+b expression that appears in the in input row    * resolver.    *    * @param nd    *          The node that is being inspected.    * @param procCtx    *          The processor context.    *    * @return exprNodeColumnDesc.    */
specifier|public
specifier|static
name|ExprNodeDesc
name|processGByExpr
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Object
name|procCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// We recursively create the exprNodeDesc. Base cases: when we encounter
comment|// a column ref, we convert that into an exprNodeColumnDesc; when we
comment|// encounter
comment|// a constant, we convert that into an exprNodeConstantDesc. For others we
comment|// just
comment|// build the exprNodeFuncDesc with recursively built children.
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|nd
decl_stmt|;
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
name|RowResolver
name|input
init|=
name|ctx
operator|.
name|getInputRR
argument_list|()
decl_stmt|;
name|ExprNodeDesc
name|desc
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|ctx
operator|==
literal|null
operator|)
operator|||
operator|(
name|input
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// If the current subExpression is pre-calculated, as in Group-By etc.
name|ColumnInfo
name|colInfo
init|=
name|input
operator|.
name|getExpression
argument_list|(
name|expr
argument_list|)
decl_stmt|;
if|if
condition|(
name|colInfo
operator|!=
literal|null
condition|)
block|{
name|desc
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
expr_stmt|;
name|ASTNode
name|source
init|=
name|input
operator|.
name|getExpressionSource
argument_list|(
name|expr
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|getUnparseTranslator
argument_list|()
operator|.
name|addCopyTranslation
argument_list|(
name|expr
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
return|;
block|}
return|return
name|desc
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|ASTNode
argument_list|,
name|ExprNodeDesc
argument_list|>
name|genExprNode
parameter_list|(
name|ASTNode
name|expr
parameter_list|,
name|TypeCheckCtx
name|tcCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Create the walker, the rules dispatcher and the context.
comment|// create a walker which walks the tree in a DFS manner while maintaining
comment|// the operator stack. The dispatcher
comment|// generates the plan from the operator tree
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|HiveParser
operator|.
name|TOK_NULL
operator|+
literal|"%"
argument_list|)
argument_list|,
name|getNullExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R2"
argument_list|,
name|HiveParser
operator|.
name|Number
operator|+
literal|"%|"
operator|+
name|HiveParser
operator|.
name|TinyintLiteral
operator|+
literal|"%|"
operator|+
name|HiveParser
operator|.
name|SmallintLiteral
operator|+
literal|"%|"
operator|+
name|HiveParser
operator|.
name|BigintLiteral
operator|+
literal|"%|"
operator|+
name|HiveParser
operator|.
name|DecimalLiteral
operator|+
literal|"%"
argument_list|)
argument_list|,
name|getNumExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R3"
argument_list|,
name|HiveParser
operator|.
name|Identifier
operator|+
literal|"%|"
operator|+
name|HiveParser
operator|.
name|StringLiteral
operator|+
literal|"%|"
operator|+
name|HiveParser
operator|.
name|TOK_CHARSETLITERAL
operator|+
literal|"%|"
operator|+
name|HiveParser
operator|.
name|TOK_STRINGLITERALSEQUENCE
operator|+
literal|"%|"
operator|+
literal|"%|"
operator|+
name|HiveParser
operator|.
name|KW_IF
operator|+
literal|"%|"
operator|+
name|HiveParser
operator|.
name|KW_CASE
operator|+
literal|"%|"
operator|+
name|HiveParser
operator|.
name|KW_WHEN
operator|+
literal|"%|"
operator|+
name|HiveParser
operator|.
name|KW_IN
operator|+
literal|"%|"
operator|+
name|HiveParser
operator|.
name|KW_ARRAY
operator|+
literal|"%|"
operator|+
name|HiveParser
operator|.
name|KW_MAP
operator|+
literal|"%|"
operator|+
name|HiveParser
operator|.
name|KW_STRUCT
operator|+
literal|"%"
argument_list|)
argument_list|,
name|getStrExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R4"
argument_list|,
name|HiveParser
operator|.
name|KW_TRUE
operator|+
literal|"%|"
operator|+
name|HiveParser
operator|.
name|KW_FALSE
operator|+
literal|"%"
argument_list|)
argument_list|,
name|getBoolExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R5"
argument_list|,
name|HiveParser
operator|.
name|TOK_DATELITERAL
operator|+
literal|"%"
argument_list|)
argument_list|,
name|getDateExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R6"
argument_list|,
name|HiveParser
operator|.
name|TOK_TABLE_OR_COL
operator|+
literal|"%"
argument_list|)
argument_list|,
name|getColumnExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
comment|// The dispatcher fires the processor corresponding to the closest matching
comment|// rule and passes the context along
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|getDefaultExprProcessor
argument_list|()
argument_list|,
name|opRules
argument_list|,
name|tcCtx
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// Create a list of topop nodes
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutputs
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
name|nodeOutputs
argument_list|)
expr_stmt|;
return|return
name|convert
argument_list|(
name|nodeOutputs
argument_list|)
return|;
block|}
comment|// temporary type-safe casting
specifier|private
specifier|static
name|Map
argument_list|<
name|ASTNode
argument_list|,
name|ExprNodeDesc
argument_list|>
name|convert
parameter_list|(
name|Map
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|outputs
parameter_list|)
block|{
name|Map
argument_list|<
name|ASTNode
argument_list|,
name|ExprNodeDesc
argument_list|>
name|converted
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|ASTNode
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|outputs
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|instanceof
name|ASTNode
operator|&&
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|ExprNodeDesc
operator|)
condition|)
block|{
name|converted
operator|.
name|put
argument_list|(
operator|(
name|ASTNode
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|ExprNodeDesc
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid type entry "
operator|+
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|converted
return|;
block|}
comment|/**    * Processor for processing NULL expression.    */
specifier|public
specifier|static
class|class
name|NullExprProcessor
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExprNodeDesc
name|desc
init|=
name|TypeCheckProcFactory
operator|.
name|processGByExpr
argument_list|(
name|nd
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
return|return
name|desc
return|;
block|}
return|return
operator|new
name|ExprNodeNullDesc
argument_list|()
return|;
block|}
block|}
comment|/**    * Factory method to get NullExprProcessor.    *    * @return NullExprProcessor.    */
specifier|public
specifier|static
name|NullExprProcessor
name|getNullExprProcessor
parameter_list|()
block|{
return|return
operator|new
name|NullExprProcessor
argument_list|()
return|;
block|}
comment|/**    * Processor for processing numeric constants.    */
specifier|public
specifier|static
class|class
name|NumExprProcessor
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExprNodeDesc
name|desc
init|=
name|TypeCheckProcFactory
operator|.
name|processGByExpr
argument_list|(
name|nd
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
return|return
name|desc
return|;
block|}
name|Number
name|v
init|=
literal|null
decl_stmt|;
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|nd
decl_stmt|;
comment|// The expression can be any one of Double, Long and Integer. We
comment|// try to parse the expression in that order to ensure that the
comment|// most specific type is used for conversion.
try|try
block|{
if|if
condition|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"L"
argument_list|)
condition|)
block|{
comment|// Literal bigint.
name|v
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"S"
argument_list|)
condition|)
block|{
comment|// Literal smallint.
name|v
operator|=
name|Short
operator|.
name|valueOf
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Y"
argument_list|)
condition|)
block|{
comment|// Literal tinyint.
name|v
operator|=
name|Byte
operator|.
name|valueOf
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"BD"
argument_list|)
condition|)
block|{
comment|// Literal decimal
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|decimalTypeInfo
argument_list|,
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|v
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// do nothing here, we will throw an exception in the following block
block|}
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_NUMERICAL_CONSTANT
operator|.
name|getMsg
argument_list|(
name|expr
argument_list|)
argument_list|)
throw|;
block|}
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|v
argument_list|)
return|;
block|}
block|}
comment|/**    * Factory method to get NumExprProcessor.    *    * @return NumExprProcessor.    */
specifier|public
specifier|static
name|NumExprProcessor
name|getNumExprProcessor
parameter_list|()
block|{
return|return
operator|new
name|NumExprProcessor
argument_list|()
return|;
block|}
comment|/**    * Processor for processing string constants.    */
specifier|public
specifier|static
class|class
name|StrExprProcessor
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExprNodeDesc
name|desc
init|=
name|TypeCheckProcFactory
operator|.
name|processGByExpr
argument_list|(
name|nd
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
return|return
name|desc
return|;
block|}
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|nd
decl_stmt|;
name|String
name|str
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|expr
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|StringLiteral
case|:
name|str
operator|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_STRINGLITERALSEQUENCE
case|:
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|expr
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
operator|(
operator|(
name|ASTNode
operator|)
name|n
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|str
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_CHARSETLITERAL
case|:
name|str
operator|=
name|BaseSemanticAnalyzer
operator|.
name|charSetString
argument_list|(
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|,
name|expr
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// HiveParser.identifier | HiveParse.KW_IF | HiveParse.KW_LEFT |
comment|// HiveParse.KW_RIGHT
name|str
operator|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|str
argument_list|)
return|;
block|}
block|}
comment|/**    * Factory method to get StrExprProcessor.    *    * @return StrExprProcessor.    */
specifier|public
specifier|static
name|StrExprProcessor
name|getStrExprProcessor
parameter_list|()
block|{
return|return
operator|new
name|StrExprProcessor
argument_list|()
return|;
block|}
comment|/**    * Processor for boolean constants.    */
specifier|public
specifier|static
class|class
name|BoolExprProcessor
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExprNodeDesc
name|desc
init|=
name|TypeCheckProcFactory
operator|.
name|processGByExpr
argument_list|(
name|nd
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
return|return
name|desc
return|;
block|}
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|nd
decl_stmt|;
name|Boolean
name|bool
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|expr
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|KW_TRUE
case|:
name|bool
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|KW_FALSE
case|:
name|bool
operator|=
name|Boolean
operator|.
name|FALSE
expr_stmt|;
break|break;
default|default:
assert|assert
literal|false
assert|;
block|}
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|bool
argument_list|)
return|;
block|}
block|}
comment|/**    * Factory method to get BoolExprProcessor.    *    * @return BoolExprProcessor.    */
specifier|public
specifier|static
name|BoolExprProcessor
name|getBoolExprProcessor
parameter_list|()
block|{
return|return
operator|new
name|BoolExprProcessor
argument_list|()
return|;
block|}
comment|/**    * Processor for date constants.    */
specifier|public
specifier|static
class|class
name|DateExprProcessor
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExprNodeDesc
name|desc
init|=
name|TypeCheckProcFactory
operator|.
name|processGByExpr
argument_list|(
name|nd
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
return|return
name|desc
return|;
block|}
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|nd
decl_stmt|;
comment|// Get the string value and convert to a Date value.
try|try
block|{
name|String
name|dateString
init|=
name|BaseSemanticAnalyzer
operator|.
name|stripQuotes
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|Date
name|date
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|dateString
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|dateTypeInfo
argument_list|,
name|date
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Unable to convert date literal string to date value."
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Factory method to get DateExprProcessor.    *    * @return DateExprProcessor.    */
specifier|public
specifier|static
name|DateExprProcessor
name|getDateExprProcessor
parameter_list|()
block|{
return|return
operator|new
name|DateExprProcessor
argument_list|()
return|;
block|}
comment|/**    * Processor for table columns.    */
specifier|public
specifier|static
class|class
name|ColumnExprProcessor
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExprNodeDesc
name|desc
init|=
name|TypeCheckProcFactory
operator|.
name|processGByExpr
argument_list|(
name|nd
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
return|return
name|desc
return|;
block|}
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|nd
decl_stmt|;
name|ASTNode
name|parent
init|=
name|stack
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
operator|(
name|ASTNode
operator|)
name|stack
operator|.
name|get
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
else|:
literal|null
decl_stmt|;
name|RowResolver
name|input
init|=
name|ctx
operator|.
name|getInputRR
argument_list|()
decl_stmt|;
if|if
condition|(
name|expr
operator|.
name|getType
argument_list|()
operator|!=
name|HiveParser
operator|.
name|TOK_TABLE_OR_COL
condition|)
block|{
name|ctx
operator|.
name|setError
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_COLUMN
operator|.
name|getMsg
argument_list|(
name|expr
argument_list|)
argument_list|,
name|expr
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
assert|assert
operator|(
name|expr
operator|.
name|getChildCount
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|String
name|tableOrCol
init|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isTableAlias
init|=
name|input
operator|.
name|hasTableAlias
argument_list|(
name|tableOrCol
argument_list|)
decl_stmt|;
name|ColumnInfo
name|colInfo
init|=
name|input
operator|.
name|get
argument_list|(
literal|null
argument_list|,
name|tableOrCol
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTableAlias
condition|)
block|{
if|if
condition|(
name|colInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|DOT
condition|)
block|{
comment|// It's a table alias.
return|return
literal|null
return|;
block|}
comment|// It's a column.
return|return
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// It's a table alias.
comment|// We will process that later in DOT.
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|colInfo
operator|==
literal|null
condition|)
block|{
comment|// It's not a column or a table alias.
if|if
condition|(
name|input
operator|.
name|getIsExprResolver
argument_list|()
condition|)
block|{
name|ASTNode
name|exprNode
init|=
name|expr
decl_stmt|;
if|if
condition|(
operator|!
name|stack
operator|.
name|empty
argument_list|()
condition|)
block|{
name|ASTNode
name|tmp
init|=
operator|(
name|ASTNode
operator|)
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|stack
operator|.
name|empty
argument_list|()
condition|)
block|{
name|exprNode
operator|=
operator|(
name|ASTNode
operator|)
name|stack
operator|.
name|peek
argument_list|()
expr_stmt|;
block|}
name|stack
operator|.
name|push
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|setError
argument_list|(
name|ErrorMsg
operator|.
name|NON_KEY_EXPR_IN_GROUPBY
operator|.
name|getMsg
argument_list|(
name|exprNode
argument_list|)
argument_list|,
name|expr
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|possibleColumnNames
init|=
name|input
operator|.
name|getReferenceableColumnAliases
argument_list|(
name|tableOrCol
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|reason
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(possible column names are: %s)"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|possibleColumnNames
argument_list|,
literal|", "
argument_list|)
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setError
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE_OR_COLUMN
operator|.
name|getMsg
argument_list|(
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|reason
argument_list|)
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE_OR_COLUMN
operator|.
name|toString
argument_list|()
operator|+
literal|":"
operator|+
name|input
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
comment|// It's a column.
name|ExprNodeColumnDesc
name|exprNodColDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|exprNodColDesc
operator|.
name|setSkewedCol
argument_list|(
name|colInfo
operator|.
name|isSkewedCol
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exprNodColDesc
return|;
block|}
block|}
block|}
block|}
comment|/**    * Factory method to get ColumnExprProcessor.    *    * @return ColumnExprProcessor.    */
specifier|public
specifier|static
name|ColumnExprProcessor
name|getColumnExprProcessor
parameter_list|()
block|{
return|return
operator|new
name|ColumnExprProcessor
argument_list|()
return|;
block|}
comment|/**    * The default processor for typechecking.    */
specifier|public
specifier|static
class|class
name|DefaultExprProcessor
implements|implements
name|NodeProcessor
block|{
specifier|static
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|specialUnaryOperatorTextHashMap
decl_stmt|;
specifier|static
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|specialFunctionTextHashMap
decl_stmt|;
specifier|static
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|conversionFunctionTextHashMap
decl_stmt|;
specifier|static
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|windowingTokens
decl_stmt|;
static|static
block|{
name|specialUnaryOperatorTextHashMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|specialUnaryOperatorTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|PLUS
argument_list|,
literal|"positive"
argument_list|)
expr_stmt|;
name|specialUnaryOperatorTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|MINUS
argument_list|,
literal|"negative"
argument_list|)
expr_stmt|;
name|specialFunctionTextHashMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|specialFunctionTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_ISNULL
argument_list|,
literal|"isnull"
argument_list|)
expr_stmt|;
name|specialFunctionTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_ISNOTNULL
argument_list|,
literal|"isnotnull"
argument_list|)
expr_stmt|;
name|conversionFunctionTextHashMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|conversionFunctionTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_BOOLEAN
argument_list|,
name|serdeConstants
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
expr_stmt|;
name|conversionFunctionTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_TINYINT
argument_list|,
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
argument_list|)
expr_stmt|;
name|conversionFunctionTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_SMALLINT
argument_list|,
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
expr_stmt|;
name|conversionFunctionTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_INT
argument_list|,
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|)
expr_stmt|;
name|conversionFunctionTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_BIGINT
argument_list|,
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
expr_stmt|;
name|conversionFunctionTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_FLOAT
argument_list|,
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
expr_stmt|;
name|conversionFunctionTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_DOUBLE
argument_list|,
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
expr_stmt|;
name|conversionFunctionTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_STRING
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
name|conversionFunctionTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_VARCHAR
argument_list|,
name|serdeConstants
operator|.
name|VARCHAR_TYPE_NAME
argument_list|)
expr_stmt|;
name|conversionFunctionTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_BINARY
argument_list|,
name|serdeConstants
operator|.
name|BINARY_TYPE_NAME
argument_list|)
expr_stmt|;
name|conversionFunctionTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_DATE
argument_list|,
name|serdeConstants
operator|.
name|DATE_TYPE_NAME
argument_list|)
expr_stmt|;
name|conversionFunctionTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_TIMESTAMP
argument_list|,
name|serdeConstants
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|)
expr_stmt|;
name|conversionFunctionTextHashMap
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_DECIMAL
argument_list|,
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
argument_list|)
expr_stmt|;
name|windowingTokens
operator|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|windowingTokens
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|KW_OVER
argument_list|)
expr_stmt|;
name|windowingTokens
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_PARTITIONINGSPEC
argument_list|)
expr_stmt|;
name|windowingTokens
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_DISTRIBUTEBY
argument_list|)
expr_stmt|;
name|windowingTokens
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_SORTBY
argument_list|)
expr_stmt|;
name|windowingTokens
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_CLUSTERBY
argument_list|)
expr_stmt|;
name|windowingTokens
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_WINDOWSPEC
argument_list|)
expr_stmt|;
name|windowingTokens
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_WINDOWRANGE
argument_list|)
expr_stmt|;
name|windowingTokens
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_WINDOWVALUES
argument_list|)
expr_stmt|;
name|windowingTokens
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|KW_UNBOUNDED
argument_list|)
expr_stmt|;
name|windowingTokens
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|KW_PRECEDING
argument_list|)
expr_stmt|;
name|windowingTokens
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|KW_FOLLOWING
argument_list|)
expr_stmt|;
name|windowingTokens
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|KW_CURRENT
argument_list|)
expr_stmt|;
name|windowingTokens
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_TABSORTCOLNAMEASC
argument_list|)
expr_stmt|;
name|windowingTokens
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_TABSORTCOLNAMEDESC
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|isRedundantConversionFunction
parameter_list|(
name|ASTNode
name|expr
parameter_list|,
name|boolean
name|isFunction
parameter_list|,
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isFunction
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// conversion functions take a single parameter
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|funcText
init|=
name|conversionFunctionTextHashMap
operator|.
name|get
argument_list|(
operator|(
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
comment|// not a conversion function
if|if
condition|(
name|funcText
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// return true when the child type and the conversion target type is the
comment|// same
return|return
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
operator|)
operator|.
name|getTypeName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|funcText
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getFunctionText
parameter_list|(
name|ASTNode
name|expr
parameter_list|,
name|boolean
name|isFunction
parameter_list|)
block|{
name|String
name|funcText
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isFunction
condition|)
block|{
comment|// For operator, the function name is the operator text, unless it's in
comment|// our special dictionary
if|if
condition|(
name|expr
operator|.
name|getChildCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|funcText
operator|=
name|specialUnaryOperatorTextHashMap
operator|.
name|get
argument_list|(
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcText
operator|==
literal|null
condition|)
block|{
name|funcText
operator|=
name|expr
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// For TOK_FUNCTION, the function name is stored in the first child,
comment|// unless it's in our
comment|// special dictionary.
assert|assert
operator|(
name|expr
operator|.
name|getChildCount
argument_list|()
operator|>=
literal|1
operator|)
assert|;
name|int
name|funcType
init|=
operator|(
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|funcText
operator|=
name|specialFunctionTextHashMap
operator|.
name|get
argument_list|(
name|funcType
argument_list|)
expr_stmt|;
if|if
condition|(
name|funcText
operator|==
literal|null
condition|)
block|{
name|funcText
operator|=
name|conversionFunctionTextHashMap
operator|.
name|get
argument_list|(
name|funcType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcText
operator|==
literal|null
condition|)
block|{
name|funcText
operator|=
operator|(
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|funcText
argument_list|)
return|;
block|}
comment|/**      * This function create an ExprNodeDesc for a UDF function given the      * children (arguments). It will insert implicit type conversion functions      * if necessary.      *      * @throws UDFArgumentException      */
specifier|static
name|ExprNodeDesc
name|getFuncExprNodeDescWithUdfData
parameter_list|(
name|String
name|udfName
parameter_list|,
name|Object
name|udfData
parameter_list|,
name|ExprNodeDesc
modifier|...
name|children
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|FunctionInfo
name|fi
init|=
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|udfName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
name|udfName
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
name|GenericUDF
name|genericUDF
init|=
name|fi
operator|.
name|getGenericUDF
argument_list|()
decl_stmt|;
if|if
condition|(
name|genericUDF
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
name|udfName
operator|+
literal|" is an aggregation function or a table function."
argument_list|)
throw|;
block|}
comment|// Add udfData to UDF if necessary
if|if
condition|(
name|udfData
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|genericUDF
operator|instanceof
name|SettableUDF
condition|)
block|{
operator|(
operator|(
name|SettableUDF
operator|)
name|genericUDF
operator|)
operator|.
name|setParams
argument_list|(
name|udfData
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childrenList
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
name|children
operator|.
name|length
argument_list|)
decl_stmt|;
name|childrenList
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|children
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ExprNodeGenericFuncDesc
operator|.
name|newInstance
argument_list|(
name|genericUDF
argument_list|,
name|childrenList
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ExprNodeDesc
name|getFuncExprNodeDesc
parameter_list|(
name|String
name|udfName
parameter_list|,
name|ExprNodeDesc
modifier|...
name|children
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
return|return
name|getFuncExprNodeDescWithUdfData
argument_list|(
name|udfName
argument_list|,
literal|null
argument_list|,
name|children
argument_list|)
return|;
block|}
specifier|static
name|ExprNodeDesc
name|getXpathOrFuncExprNodeDesc
parameter_list|(
name|ASTNode
name|expr
parameter_list|,
name|boolean
name|isFunction
parameter_list|,
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
parameter_list|,
name|TypeCheckCtx
name|ctx
parameter_list|)
throws|throws
name|SemanticException
throws|,
name|UDFArgumentException
block|{
comment|// return the child directly if the conversion is redundant.
if|if
condition|(
name|isRedundantConversionFunction
argument_list|(
name|expr
argument_list|,
name|isFunction
argument_list|,
name|children
argument_list|)
condition|)
block|{
assert|assert
operator|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
operator|)
assert|;
return|return
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|String
name|funcText
init|=
name|getFunctionText
argument_list|(
name|expr
argument_list|,
name|isFunction
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|desc
decl_stmt|;
if|if
condition|(
name|funcText
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
comment|// "." : FIELD Expression
assert|assert
operator|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|// Only allow constant field name for now
assert|assert
operator|(
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ExprNodeConstantDesc
operator|)
assert|;
name|ExprNodeDesc
name|object
init|=
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|fieldName
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|fieldName
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
operator|)
assert|;
comment|// Calculate result TypeInfo
name|String
name|fieldNameString
init|=
operator|(
name|String
operator|)
name|fieldName
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|TypeInfo
name|objectTypeInfo
init|=
name|object
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
comment|// Allow accessing a field of list element structs directly from a list
name|boolean
name|isList
init|=
operator|(
name|object
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|LIST
operator|)
decl_stmt|;
if|if
condition|(
name|isList
condition|)
block|{
name|objectTypeInfo
operator|=
operator|(
operator|(
name|ListTypeInfo
operator|)
name|objectTypeInfo
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|objectTypeInfo
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|STRUCT
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_DOT
operator|.
name|getMsg
argument_list|(
name|expr
argument_list|)
argument_list|)
throw|;
block|}
name|TypeInfo
name|t
init|=
operator|(
operator|(
name|StructTypeInfo
operator|)
name|objectTypeInfo
operator|)
operator|.
name|getStructFieldTypeInfo
argument_list|(
name|fieldNameString
argument_list|)
decl_stmt|;
if|if
condition|(
name|isList
condition|)
block|{
name|t
operator|=
name|TypeInfoFactory
operator|.
name|getListTypeInfo
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|desc
operator|=
operator|new
name|ExprNodeFieldDesc
argument_list|(
name|t
argument_list|,
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|fieldNameString
argument_list|,
name|isList
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|funcText
operator|.
name|equals
argument_list|(
literal|"["
argument_list|)
condition|)
block|{
comment|// "[]" : LSQUARE/INDEX Expression
assert|assert
operator|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|// Check whether this is a list or a map
name|TypeInfo
name|myt
init|=
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|myt
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|LIST
condition|)
block|{
comment|// Only allow integer index for now
if|if
condition|(
operator|!
operator|(
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ExprNodeConstantDesc
operator|)
operator|||
operator|!
operator|(
operator|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|SemanticAnalyzer
operator|.
name|generateErrorMessage
argument_list|(
name|expr
argument_list|,
name|ErrorMsg
operator|.
name|INVALID_ARRAYINDEX_CONSTANT
operator|.
name|getMsg
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// Calculate TypeInfo
name|TypeInfo
name|t
init|=
operator|(
operator|(
name|ListTypeInfo
operator|)
name|myt
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
name|desc
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|t
argument_list|,
name|FunctionRegistry
operator|.
name|getGenericUDFForIndex
argument_list|()
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|myt
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|MAP
condition|)
block|{
comment|// Only allow constant map key for now
if|if
condition|(
operator|!
operator|(
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ExprNodeConstantDesc
operator|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|SemanticAnalyzer
operator|.
name|generateErrorMessage
argument_list|(
name|expr
argument_list|,
name|ErrorMsg
operator|.
name|INVALID_MAPINDEX_CONSTANT
operator|.
name|getMsg
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|MapTypeInfo
operator|)
name|myt
operator|)
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_MAPINDEX_TYPE
operator|.
name|getMsg
argument_list|(
name|expr
argument_list|)
argument_list|)
throw|;
block|}
comment|// Calculate TypeInfo
name|TypeInfo
name|t
init|=
operator|(
operator|(
name|MapTypeInfo
operator|)
name|myt
operator|)
operator|.
name|getMapValueTypeInfo
argument_list|()
decl_stmt|;
name|desc
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|t
argument_list|,
name|FunctionRegistry
operator|.
name|getGenericUDFForIndex
argument_list|()
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|NON_COLLECTION_TYPE
operator|.
name|getMsg
argument_list|(
name|expr
argument_list|,
name|myt
operator|.
name|getTypeName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// other operators or functions
name|FunctionInfo
name|fi
init|=
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|funcText
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isFunction
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_FUNCTION
operator|.
name|getMsg
argument_list|(
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_FUNCTION
operator|.
name|getMsg
argument_list|(
name|expr
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// getGenericUDF() actually clones the UDF. Just call it once and reuse.
name|GenericUDF
name|genericUDF
init|=
name|fi
operator|.
name|getGenericUDF
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fi
operator|.
name|isNative
argument_list|()
condition|)
block|{
name|ctx
operator|.
name|getUnparseTranslator
argument_list|()
operator|.
name|addIdentifierTranslation
argument_list|(
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Handle type casts that may contain type parameters
if|if
condition|(
name|isFunction
condition|)
block|{
name|ASTNode
name|funcNameNode
init|=
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|funcNameNode
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_VARCHAR
case|:
comment|// Add type params
name|VarcharTypeParams
name|varcharTypeParams
init|=
operator|new
name|VarcharTypeParams
argument_list|()
decl_stmt|;
name|varcharTypeParams
operator|.
name|length
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|funcNameNode
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|genericUDF
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|SettableUDF
operator|)
name|genericUDF
operator|)
operator|.
name|setParams
argument_list|(
name|varcharTypeParams
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
comment|// Do nothing
break|break;
block|}
block|}
comment|// Detect UDTF's in nested SELECT, GROUP BY, etc as they aren't
comment|// supported
if|if
condition|(
name|fi
operator|.
name|getGenericUDTF
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|UDTF_INVALID_LOCATION
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
comment|// UDAF in filter condition, group-by caluse, param of funtion, etc.
if|if
condition|(
name|fi
operator|.
name|getGenericUDAFResolver
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isFunction
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|UDAF_INVALID_LOCATION
operator|.
name|getMsg
argument_list|(
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|UDAF_INVALID_LOCATION
operator|.
name|getMsg
argument_list|(
name|expr
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|ctx
operator|.
name|getAllowStatefulFunctions
argument_list|()
operator|&&
operator|(
name|genericUDF
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|FunctionRegistry
operator|.
name|isStateful
argument_list|(
name|genericUDF
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|UDF_STATEFUL_INVALID_LOCATION
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Try to infer the type of the constant only if there are two
comment|// nodes, one of them is column and the other is numeric const
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFBaseCompare
operator|&&
name|children
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|&&
operator|(
operator|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ExprNodeConstantDesc
operator|&&
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ExprNodeColumnDesc
operator|)
operator|||
operator|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ExprNodeColumnDesc
operator|&&
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ExprNodeConstantDesc
operator|)
operator|)
condition|)
block|{
name|int
name|constIdx
init|=
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ExprNodeConstantDesc
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|inferTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|serdeConstants
operator|.
name|INT_TYPE_NAME
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|constType
init|=
name|children
operator|.
name|get
argument_list|(
name|constIdx
argument_list|)
operator|.
name|getTypeString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|columnType
init|=
name|children
operator|.
name|get
argument_list|(
literal|1
operator|-
name|constIdx
argument_list|)
operator|.
name|getTypeString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|inferTypes
operator|.
name|contains
argument_list|(
name|constType
argument_list|)
operator|&&
name|inferTypes
operator|.
name|contains
argument_list|(
name|columnType
argument_list|)
operator|&&
operator|!
name|columnType
operator|.
name|equalsIgnoreCase
argument_list|(
name|constType
argument_list|)
condition|)
block|{
name|Object
name|originalValue
init|=
operator|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|children
operator|.
name|get
argument_list|(
name|constIdx
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|constValue
init|=
name|originalValue
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|triedDouble
init|=
literal|false
decl_stmt|;
name|Number
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|columnType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
argument_list|)
condition|)
block|{
name|value
operator|=
operator|new
name|Byte
argument_list|(
name|constValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
condition|)
block|{
name|value
operator|=
operator|new
name|Short
argument_list|(
name|constValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|)
condition|)
block|{
name|value
operator|=
operator|new
name|Integer
argument_list|(
name|constValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
condition|)
block|{
name|value
operator|=
operator|new
name|Long
argument_list|(
name|constValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
condition|)
block|{
name|value
operator|=
operator|new
name|Float
argument_list|(
name|constValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
condition|)
block|{
name|triedDouble
operator|=
literal|true
expr_stmt|;
name|value
operator|=
operator|new
name|Double
argument_list|(
name|constValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
condition|)
block|{
comment|// Don't scramble the const type information if comparing to a string column,
comment|// It's not useful to do so; as of now, there is also a hack in
comment|// SemanticAnalyzer#genTablePlan that causes every column to look like a string
comment|// a string down here, so number type information is always lost otherwise.
name|boolean
name|isNumber
init|=
operator|(
name|originalValue
operator|instanceof
name|Number
operator|)
decl_stmt|;
name|triedDouble
operator|=
operator|!
name|isNumber
expr_stmt|;
name|value
operator|=
name|isNumber
condition|?
operator|(
name|Number
operator|)
name|originalValue
else|:
operator|new
name|Double
argument_list|(
name|constValue
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
comment|// this exception suggests the precise type inference did not succeed
comment|// we'll try again to convert it to double
comment|// however, if we already tried this, or the column is NUMBER type and
comment|// the operator is EQUAL, return false due to the type mismatch
if|if
condition|(
name|triedDouble
operator|||
operator|(
name|genericUDF
operator|instanceof
name|GenericUDFOPEqual
operator|&&
operator|!
name|columnType
operator|.
name|equals
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|)
condition|)
block|{
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|false
argument_list|)
return|;
block|}
try|try
block|{
name|value
operator|=
operator|new
name|Double
argument_list|(
name|constValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|children
operator|.
name|set
argument_list|(
name|constIdx
argument_list|,
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|desc
operator|=
name|ExprNodeGenericFuncDesc
operator|.
name|newInstance
argument_list|(
name|genericUDF
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
comment|// UDFOPPositive is a no-op.
comment|// However, we still create it, and then remove it here, to make sure we
comment|// only allow
comment|// "+" for numeric types.
if|if
condition|(
name|FunctionRegistry
operator|.
name|isOpPositive
argument_list|(
name|desc
argument_list|)
condition|)
block|{
assert|assert
operator|(
name|desc
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|desc
operator|=
name|desc
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
assert|assert
operator|(
name|desc
operator|!=
literal|null
operator|)
assert|;
return|return
name|desc
return|;
block|}
comment|/**      * Returns true if des is a descendant of ans (ancestor)      */
specifier|private
name|boolean
name|isDescendant
parameter_list|(
name|Node
name|ans
parameter_list|,
name|Node
name|des
parameter_list|)
block|{
if|if
condition|(
name|ans
operator|.
name|getChildren
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Node
name|c
range|:
name|ans
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|==
name|des
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|isDescendant
argument_list|(
name|c
argument_list|,
name|des
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
name|ExprNodeDesc
name|desc
init|=
name|TypeCheckProcFactory
operator|.
name|processGByExpr
argument_list|(
name|nd
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
comment|// Here we know nd represents a group by expression.
comment|// During the DFS traversal of the AST, a descendant of nd likely set an
comment|// error because a sub-tree of nd is unlikely to also be a group by
comment|// expression. For example, in a query such as
comment|// SELECT *concat(key)* FROM src GROUP BY concat(key), 'key' will be
comment|// processed before 'concat(key)' and since 'key' is not a group by
comment|// expression, an error will be set in ctx by ColumnExprProcessor.
comment|// We can clear the global error when we see that it was set in a
comment|// descendant node of a group by expression because
comment|// processGByExpr() returns a ExprNodeDesc that effectively ignores
comment|// its children. Although the error can be set multiple times by
comment|// descendant nodes, DFS traversal ensures that the error only needs to
comment|// be cleared once. Also, for a case like
comment|// SELECT concat(value, concat(value))... the logic still works as the
comment|// error is only set with the first 'value'; all node pocessors quit
comment|// early if the global error is set.
if|if
condition|(
name|isDescendant
argument_list|(
name|nd
argument_list|,
name|ctx
operator|.
name|getErrorSrcNode
argument_list|()
argument_list|)
condition|)
block|{
name|ctx
operator|.
name|setError
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
return|;
block|}
if|if
condition|(
name|ctx
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|nd
decl_stmt|;
comment|/*        * A Windowing specification get added as a child to a UDAF invocation to distinguish it        * from similar UDAFs but on different windows.        * The UDAF is translated to a WindowFunction invocation in the PTFTranslator.        * So here we just return null for tokens that appear in a Window Specification.        * When the traversal reaches up to the UDAF invocation its ExprNodeDesc is build using the        * ColumnInfo in the InputRR. This is similar to how UDAFs are handled in Select lists.        * The difference is that there is translation for Window related tokens, so we just        * return null;        */
if|if
condition|(
name|windowingTokens
operator|.
name|contains
argument_list|(
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABNAME
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_ALLCOLREF
condition|)
block|{
name|RowResolver
name|input
init|=
name|ctx
operator|.
name|getInputRR
argument_list|()
decl_stmt|;
name|ExprNodeColumnListDesc
name|columnList
init|=
operator|new
name|ExprNodeColumnListDesc
argument_list|()
decl_stmt|;
assert|assert
name|expr
operator|.
name|getChildCount
argument_list|()
operator|<=
literal|1
assert|;
if|if
condition|(
name|expr
operator|.
name|getChildCount
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// table aliased (select a.*, for example)
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|child
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABNAME
assert|;
assert|assert
name|child
operator|.
name|getChildCount
argument_list|()
operator|==
literal|1
assert|;
name|String
name|tableAlias
init|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|ColumnInfo
argument_list|>
name|columns
init|=
name|input
operator|.
name|getFieldMap
argument_list|(
name|tableAlias
argument_list|)
decl_stmt|;
if|if
condition|(
name|columns
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE_ALIAS
operator|.
name|getMsg
argument_list|(
name|child
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ColumnInfo
argument_list|>
name|colMap
range|:
name|columns
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ColumnInfo
name|colInfo
init|=
name|colMap
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
condition|)
block|{
name|columnList
operator|.
name|addColumn
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// all columns (select *, for example)
for|for
control|(
name|ColumnInfo
name|colInfo
range|:
name|input
operator|.
name|getColumnInfos
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
condition|)
block|{
name|columnList
operator|.
name|addColumn
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|columnList
return|;
block|}
comment|// If the first child is a TOK_TABLE_OR_COL, and nodeOutput[0] is NULL,
comment|// and the operator is a DOT, then it's a table column reference.
if|if
condition|(
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|DOT
operator|&&
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABLE_OR_COL
operator|&&
name|nodeOutputs
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|RowResolver
name|input
init|=
name|ctx
operator|.
name|getInputRR
argument_list|()
decl_stmt|;
name|String
name|tableAlias
init|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
comment|// NOTE: tableAlias must be a valid non-ambiguous table alias,
comment|// because we've checked that in TOK_TABLE_OR_COL's process method.
name|ColumnInfo
name|colInfo
init|=
name|input
operator|.
name|get
argument_list|(
name|tableAlias
argument_list|,
operator|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|nodeOutputs
index|[
literal|1
index|]
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|colInfo
operator|==
literal|null
condition|)
block|{
name|ctx
operator|.
name|setError
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_COLUMN
operator|.
name|getMsg
argument_list|(
name|expr
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|expr
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
return|;
block|}
comment|// Return nulls for conversion operators
if|if
condition|(
name|conversionFunctionTextHashMap
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
name|specialFunctionTextHashMap
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
name|expr
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|CharSetName
operator|||
name|expr
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|CharSetLiteral
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|isFunction
init|=
operator|(
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_FUNCTION
operator|||
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_FUNCTIONSTAR
operator|||
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_FUNCTIONDI
operator|)
decl_stmt|;
comment|// Create all children
name|int
name|childrenBegin
init|=
operator|(
name|isFunction
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
name|expr
operator|.
name|getChildCount
argument_list|()
operator|-
name|childrenBegin
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|ci
init|=
name|childrenBegin
init|;
name|ci
operator|<
name|expr
operator|.
name|getChildCount
argument_list|()
condition|;
name|ci
operator|++
control|)
block|{
if|if
condition|(
name|nodeOutputs
index|[
name|ci
index|]
operator|instanceof
name|ExprNodeColumnListDesc
condition|)
block|{
name|children
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|ExprNodeColumnListDesc
operator|)
name|nodeOutputs
index|[
name|ci
index|]
operator|)
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|children
operator|.
name|add
argument_list|(
operator|(
name|ExprNodeDesc
operator|)
name|nodeOutputs
index|[
name|ci
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_FUNCTIONSTAR
condition|)
block|{
name|RowResolver
name|input
init|=
name|ctx
operator|.
name|getInputRR
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|colInfo
range|:
name|input
operator|.
name|getColumnInfos
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
condition|)
block|{
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// If any of the children contains null, then return a null
comment|// this is a hack for now to handle the group by case
if|if
condition|(
name|children
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
condition|)
block|{
name|RowResolver
name|input
init|=
name|ctx
operator|.
name|getInputRR
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|possibleColumnNames
init|=
name|input
operator|.
name|getReferenceableColumnAliases
argument_list|(
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|reason
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(possible column names are: %s)"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|possibleColumnNames
argument_list|,
literal|", "
argument_list|)
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setError
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_COLUMN
operator|.
name|getMsg
argument_list|(
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|reason
argument_list|)
argument_list|,
name|expr
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Create function desc
try|try
block|{
return|return
name|getXpathOrFuncExprNodeDesc
argument_list|(
name|expr
argument_list|,
name|isFunction
argument_list|,
name|children
argument_list|,
name|ctx
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UDFArgumentTypeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_ARGUMENT_TYPE
operator|.
name|getMsg
argument_list|(
name|expr
operator|.
name|getChild
argument_list|(
name|childrenBegin
operator|+
name|e
operator|.
name|getArgumentId
argument_list|()
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UDFArgumentLengthException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_ARGUMENT_LENGTH
operator|.
name|getMsg
argument_list|(
name|expr
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UDFArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_ARGUMENT
operator|.
name|getMsg
argument_list|(
name|expr
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Factory method to get DefaultExprProcessor.    *    * @return DefaultExprProcessor.    */
specifier|public
specifier|static
name|DefaultExprProcessor
name|getDefaultExprProcessor
parameter_list|()
block|{
return|return
operator|new
name|DefaultExprProcessor
argument_list|()
return|;
block|}
block|}
end_class

end_unit

