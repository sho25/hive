begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/*  * HiveCommand is non-SQL statement such as setting a property or  * adding a resource.  **/
end_comment

begin_enum
specifier|public
enum|enum
name|HiveCommand
block|{
name|SET
parameter_list|()
operator|,
constructor|RESET(
block|)
enum|,
name|DFS
argument_list|()
operator|,
name|ADD
argument_list|()
operator|,
name|DELETE
argument_list|()
operator|,
name|COMPILE
argument_list|()
enum|;
end_enum

begin_decl_stmt
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|COMMANDS
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_static
static|static
block|{
for|for
control|(
name|HiveCommand
name|command
range|:
name|HiveCommand
operator|.
name|values
argument_list|()
control|)
block|{
name|COMMANDS
operator|.
name|add
argument_list|(
name|command
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_static

begin_function
specifier|public
specifier|static
name|HiveCommand
name|find
parameter_list|(
name|String
index|[]
name|command
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|command
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|cmd
init|=
name|command
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|cmd
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|=
name|cmd
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|command
operator|.
name|length
operator|>
literal|1
operator|&&
literal|"role"
operator|.
name|equalsIgnoreCase
argument_list|(
name|command
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
comment|// special handling for set role r1 statement
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|COMMANDS
operator|.
name|contains
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
return|return
name|HiveCommand
operator|.
name|valueOf
argument_list|(
name|cmd
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

unit|}
end_unit

