begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_comment
comment|/**  * A TableHiveObject is Hive encapsulation of Objects returned from a table  * It allows navigation using the SerDe associated with the Table. They also  * encapsulate the position relative to the row object that the current object  * represents.  */
end_comment

begin_class
specifier|public
class|class
name|TableHiveObject
extends|extends
name|HiveObject
block|{
comment|// References to the table and initial table Object
specifier|protected
name|SerDe
name|tableSerDe
decl_stmt|;
specifier|protected
name|Object
name|rowObject
decl_stmt|;
specifier|protected
name|ArrayList
argument_list|<
name|String
argument_list|>
name|partCols
decl_stmt|;
specifier|protected
name|ArrayList
argument_list|<
name|SerDeField
argument_list|>
name|partFields
decl_stmt|;
comment|// References to the field of the row that the HiveObject refers to
specifier|protected
name|SerDeField
name|myField
decl_stmt|;
specifier|public
name|TableHiveObject
parameter_list|(
name|Object
name|javaObject
parameter_list|,
name|SerDe
name|tableSerDe
parameter_list|)
block|{
if|if
condition|(
name|javaObject
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"javaObject may not be null in TableHiveObject constructor"
argument_list|)
throw|;
block|}
name|this
operator|.
name|javaObject
operator|=
name|javaObject
expr_stmt|;
name|this
operator|.
name|tableSerDe
operator|=
name|tableSerDe
expr_stmt|;
name|this
operator|.
name|rowObject
operator|=
name|javaObject
expr_stmt|;
name|this
operator|.
name|partCols
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|partFields
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|TableHiveObject
parameter_list|(
name|Object
name|javaObject
parameter_list|,
name|SerDe
name|tableSerDe
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|partCols
parameter_list|,
name|ArrayList
argument_list|<
name|SerDeField
argument_list|>
name|partFields
parameter_list|)
block|{
if|if
condition|(
name|javaObject
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"javaObject may not be null in TableHiveObject constructor"
argument_list|)
throw|;
block|}
name|this
operator|.
name|javaObject
operator|=
name|javaObject
expr_stmt|;
name|this
operator|.
name|tableSerDe
operator|=
name|tableSerDe
expr_stmt|;
name|this
operator|.
name|rowObject
operator|=
name|javaObject
expr_stmt|;
name|this
operator|.
name|partCols
operator|=
name|partCols
expr_stmt|;
name|this
operator|.
name|partFields
operator|=
name|partFields
expr_stmt|;
block|}
specifier|protected
name|TableHiveObject
parameter_list|(
name|Object
name|javaObject
parameter_list|,
name|SerDe
name|tableSerDe
parameter_list|,
name|SerDeField
name|myField
parameter_list|,
name|Object
name|rowObject
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|partCols
parameter_list|,
name|ArrayList
argument_list|<
name|SerDeField
argument_list|>
name|partFields
parameter_list|)
block|{
if|if
condition|(
name|javaObject
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"javaObject may not be null in TableHiveObject constructor"
argument_list|)
throw|;
block|}
name|this
operator|.
name|javaObject
operator|=
name|javaObject
expr_stmt|;
name|this
operator|.
name|tableSerDe
operator|=
name|tableSerDe
expr_stmt|;
name|this
operator|.
name|myField
operator|=
name|myField
expr_stmt|;
name|this
operator|.
name|rowObject
operator|=
name|rowObject
expr_stmt|;
name|this
operator|.
name|partCols
operator|=
name|partCols
expr_stmt|;
name|this
operator|.
name|partFields
operator|=
name|partFields
expr_stmt|;
block|}
specifier|public
name|SerDeField
name|getFieldFromExpression
parameter_list|(
name|String
name|expr
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
if|if
condition|(
name|expr
operator|==
literal|null
operator|||
name|expr
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Need non empty expression"
argument_list|)
throw|;
comment|// Check if this is a partition column
if|if
condition|(
name|partCols
operator|!=
literal|null
condition|)
block|{
name|int
name|pos
init|=
name|partCols
operator|.
name|indexOf
argument_list|(
name|expr
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|partFields
operator|.
name|get
argument_list|(
name|pos
argument_list|)
return|;
block|}
block|}
name|String
name|realExpr
decl_stmt|;
if|if
condition|(
name|myField
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|expr
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'['
condition|)
block|{
name|realExpr
operator|=
name|myField
operator|.
name|getName
argument_list|()
operator|+
name|expr
expr_stmt|;
block|}
else|else
block|{
name|realExpr
operator|=
name|myField
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|expr
expr_stmt|;
block|}
block|}
else|else
block|{
name|realExpr
operator|=
name|expr
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ExpressionUtils
operator|.
name|isComplexExpression
argument_list|(
name|realExpr
argument_list|)
condition|)
block|{
return|return
name|tableSerDe
operator|.
name|getFieldFromExpression
argument_list|(
literal|null
argument_list|,
name|realExpr
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ComplexSerDeField
argument_list|(
literal|null
argument_list|,
name|realExpr
argument_list|,
name|tableSerDe
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|HiveObject
name|get
parameter_list|(
name|SerDeField
name|field
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|Object
name|o
init|=
name|field
operator|.
name|get
argument_list|(
name|rowObject
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
return|return
operator|new
name|NullHiveObject
argument_list|()
return|;
if|if
condition|(
name|field
operator|.
name|isPrimitive
argument_list|()
condition|)
return|return
operator|new
name|PrimitiveHiveObject
argument_list|(
name|o
argument_list|)
return|;
else|else
return|return
operator|new
name|TableHiveObject
argument_list|(
name|o
argument_list|,
name|tableSerDe
argument_list|,
name|field
argument_list|,
name|rowObject
argument_list|,
name|partCols
argument_list|,
name|partFields
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|SerDeField
argument_list|>
name|getFields
parameter_list|()
throws|throws
name|HiveException
block|{
try|try
block|{
return|return
name|tableSerDe
operator|.
name|getFields
argument_list|(
name|myField
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isPrimitive
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
return|return
name|tableSerDe
operator|.
name|toJSONString
argument_list|(
name|myField
operator|.
name|get
argument_list|(
name|rowObject
argument_list|)
argument_list|,
name|myField
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"not supported"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

