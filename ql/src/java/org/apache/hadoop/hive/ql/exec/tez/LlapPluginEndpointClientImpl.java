begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|AmPluginNode
operator|.
name|AmPluginInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|AsyncPbRpcProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|impl
operator|.
name|LlapPluginProtocolClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|plugin
operator|.
name|rpc
operator|.
name|LlapPluginProtocolProtos
operator|.
name|UpdateQueryRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|plugin
operator|.
name|rpc
operator|.
name|LlapPluginProtocolProtos
operator|.
name|UpdateQueryResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|protocol
operator|.
name|LlapPluginProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|LlapPluginEndpointClientImpl
extends|extends
name|AsyncPbRpcProxy
argument_list|<
name|LlapPluginProtocolPB
argument_list|,
name|JobTokenIdentifier
argument_list|>
implements|implements
name|LlapPluginEndpointClient
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LlapPluginEndpointClientImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|LlapPluginEndpointClientImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|int
name|expectedNodes
parameter_list|)
block|{
comment|// A single concurrent request per node is currently hardcoded. The node includes a port number
comment|// so different AMs on the same host count as different nodes; we only have one request type,
comment|// and it is not useful to send more than one in parallel.
name|super
argument_list|(
name|LlapPluginEndpointClientImpl
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_PLUGIN_CLIENT_NUM_THREADS
argument_list|)
argument_list|,
name|conf
argument_list|,
name|token
argument_list|,
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_TASK_COMMUNICATOR_CONNECTION_TIMEOUT_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_TASK_COMMUNICATOR_CONNECTION_SLEEP_BETWEEN_RETRIES_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|expectedNodes
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|LlapPluginProtocolPB
name|createProtocolImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|RetryPolicy
name|retryPolicy
parameter_list|,
name|SocketFactory
name|socketFactory
parameter_list|)
block|{
return|return
operator|new
name|LlapPluginProtocolClientImpl
argument_list|(
name|conf
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|,
name|retryPolicy
argument_list|,
name|socketFactory
argument_list|,
name|ugi
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|shutdownProtocolImpl
parameter_list|(
name|LlapPluginProtocolPB
name|proxy
parameter_list|)
block|{
comment|// Nothing to do.
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getTokenUser
parameter_list|(
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|token
parameter_list|)
block|{
try|try
block|{
name|JobTokenIdentifier
name|id
init|=
name|token
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Token ID is null from "
operator|+
name|token
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|id
operator|.
name|getJobId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Job ID is null from "
operator|+
name|id
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|id
operator|.
name|getJobId
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.hive.ql.exec.tez.LlapPluginEndpointClient#sendUpdateQuery(org.apache.hadoop.hive.llap.plugin.rpc.LlapPluginProtocolProtos.UpdateQueryRequestProto, java.lang.String, int, org.apache.hadoop.security.token.Token, org.apache.hadoop.hive.llap.AsyncPbRpcProxy.ExecuteRequestCallback)    */
annotation|@
name|Override
specifier|public
name|void
name|sendUpdateQuery
parameter_list|(
name|UpdateQueryRequestProto
name|request
parameter_list|,
name|AmPluginNode
name|node
parameter_list|,
name|UpdateRequestContext
name|callback
parameter_list|)
block|{
name|queueRequest
argument_list|(
operator|new
name|SendUpdateQueryCallable
argument_list|(
name|node
argument_list|,
name|request
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|SendUpdateQueryCallable
extends|extends
name|CallableRequest
argument_list|<
name|UpdateQueryRequestProto
argument_list|,
name|UpdateQueryResponseProto
argument_list|>
block|{
specifier|private
specifier|final
name|AmPluginNode
name|node
decl_stmt|;
specifier|private
name|AmPluginInfo
name|info
decl_stmt|;
specifier|private
specifier|final
name|UpdateRequestContext
name|context
decl_stmt|;
specifier|protected
name|SendUpdateQueryCallable
parameter_list|(
name|AmPluginNode
name|node
parameter_list|,
name|UpdateQueryRequestProto
name|request
parameter_list|,
name|UpdateRequestContext
name|callback
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|callback
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|LlapNodeId
name|getNodeId
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|ensureInfo
argument_list|()
expr_stmt|;
return|return
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|info
operator|.
name|amHost
argument_list|,
name|info
operator|.
name|amPluginPort
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|UpdateQueryResponseProto
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ensureInfo
argument_list|()
expr_stmt|;
name|LlapNodeId
name|nodeId
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|info
operator|.
name|amHost
argument_list|,
name|info
operator|.
name|amPluginPort
argument_list|)
decl_stmt|;
return|return
name|getProxy
argument_list|(
name|nodeId
argument_list|,
name|info
operator|.
name|amPluginToken
argument_list|)
operator|.
name|updateQuery
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
return|;
block|}
specifier|private
name|void
name|ensureInfo
parameter_list|()
block|{
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
return|return;
name|Ref
argument_list|<
name|Integer
argument_list|>
name|endpointVersion
init|=
operator|new
name|Ref
argument_list|<>
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|info
operator|=
name|node
operator|.
name|getAmPluginInfo
argument_list|(
name|endpointVersion
argument_list|)
expr_stmt|;
name|context
operator|.
name|setNodeInfo
argument_list|(
name|info
argument_list|,
name|endpointVersion
operator|.
name|value
argument_list|)
expr_stmt|;
comment|// Give the caller context for future errors.
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
comment|// RequestManager will catch this and handle like any other error.
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No AM plugin info for "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

