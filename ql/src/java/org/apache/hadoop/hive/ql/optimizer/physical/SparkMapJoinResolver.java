begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SparkHashTableSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|SparkTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|TaskGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BaseWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredLocalWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SparkWork
import|;
end_import

begin_class
specifier|public
class|class
name|SparkMapJoinResolver
implements|implements
name|PhysicalPlanResolver
block|{
annotation|@
name|Override
specifier|public
name|PhysicalContext
name|resolve
parameter_list|(
name|PhysicalContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Dispatcher
name|dispatcher
init|=
operator|new
name|SparkMapJoinTaskDispatcher
argument_list|(
name|pctx
argument_list|)
decl_stmt|;
name|TaskGraphWalker
name|graphWalker
init|=
operator|new
name|TaskGraphWalker
argument_list|(
name|dispatcher
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pctx
operator|.
name|getRootTasks
argument_list|()
argument_list|)
expr_stmt|;
name|graphWalker
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|pctx
return|;
block|}
comment|// Check whether the specified BaseWork's operator tree contains a operator
comment|// of the specified operator class
specifier|private
name|boolean
name|containsOp
parameter_list|(
name|BaseWork
name|work
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|ops
init|=
operator|new
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|work
operator|instanceof
name|MapWork
condition|)
block|{
name|Collection
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|opSet
init|=
operator|(
operator|(
name|MapWork
operator|)
name|work
operator|)
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|opStack
init|=
operator|new
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|opStack
operator|.
name|addAll
argument_list|(
name|opSet
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|opStack
operator|.
name|empty
argument_list|()
condition|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|op
init|=
name|opStack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opStack
operator|.
name|addAll
argument_list|(
name|op
operator|.
name|getChildOperators
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|ops
operator|.
name|addAll
argument_list|(
name|work
operator|.
name|getAllOperators
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|ops
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|op
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
class|class
name|SparkMapJoinTaskDispatcher
implements|implements
name|Dispatcher
block|{
specifier|private
specifier|final
name|PhysicalContext
name|physicalContext
decl_stmt|;
comment|// For each BaseWork with MJ operator, we build a SparkWork for its small table BaseWorks
comment|// This map records such information
specifier|private
specifier|final
name|Map
argument_list|<
name|BaseWork
argument_list|,
name|SparkWork
argument_list|>
name|sparkWorkMap
decl_stmt|;
comment|// SparkWork dependency graph - from a SparkWork with MJ operators to all
comment|// of its parent SparkWorks for the small tables
specifier|private
specifier|final
name|Map
argument_list|<
name|SparkWork
argument_list|,
name|List
argument_list|<
name|SparkWork
argument_list|>
argument_list|>
name|dependencyGraph
decl_stmt|;
specifier|public
name|SparkMapJoinTaskDispatcher
parameter_list|(
name|PhysicalContext
name|pc
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|physicalContext
operator|=
name|pc
expr_stmt|;
name|sparkWorkMap
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|BaseWork
argument_list|,
name|SparkWork
argument_list|>
argument_list|()
expr_stmt|;
name|dependencyGraph
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|SparkWork
argument_list|,
name|List
argument_list|<
name|SparkWork
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// Move the specified work from the sparkWork to the targetWork
comment|// Note that, in order not to break the graph (since we need it for the edges),
comment|// we don't remove the work from the sparkWork here. The removal is done later.
specifier|private
name|void
name|moveWork
parameter_list|(
name|SparkWork
name|sparkWork
parameter_list|,
name|BaseWork
name|work
parameter_list|,
name|SparkWork
name|targetWork
parameter_list|)
block|{
name|List
argument_list|<
name|BaseWork
argument_list|>
name|parentWorks
init|=
name|sparkWork
operator|.
name|getParents
argument_list|(
name|work
argument_list|)
decl_stmt|;
if|if
condition|(
name|sparkWork
operator|!=
name|targetWork
condition|)
block|{
name|targetWork
operator|.
name|add
argument_list|(
name|work
argument_list|)
expr_stmt|;
comment|// If any child work for this work is already added to the targetWork earlier,
comment|// we should connect this work with it
for|for
control|(
name|BaseWork
name|childWork
range|:
name|sparkWork
operator|.
name|getChildren
argument_list|(
name|work
argument_list|)
control|)
block|{
if|if
condition|(
name|targetWork
operator|.
name|contains
argument_list|(
name|childWork
argument_list|)
condition|)
block|{
name|targetWork
operator|.
name|connect
argument_list|(
name|work
argument_list|,
name|childWork
argument_list|,
name|sparkWork
operator|.
name|getEdgeProperty
argument_list|(
name|work
argument_list|,
name|childWork
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|containsOp
argument_list|(
name|work
argument_list|,
name|MapJoinOperator
operator|.
name|class
argument_list|)
condition|)
block|{
for|for
control|(
name|BaseWork
name|parent
range|:
name|parentWorks
control|)
block|{
name|moveWork
argument_list|(
name|sparkWork
argument_list|,
name|parent
argument_list|,
name|targetWork
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Create a new SparkWork for all the small tables of this work
name|SparkWork
name|parentWork
init|=
operator|new
name|SparkWork
argument_list|(
name|physicalContext
operator|.
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
argument_list|)
decl_stmt|;
comment|// copy cloneToWork to ensure RDD cache still works
name|parentWork
operator|.
name|setCloneToWork
argument_list|(
name|sparkWork
operator|.
name|getCloneToWork
argument_list|()
argument_list|)
expr_stmt|;
name|dependencyGraph
operator|.
name|get
argument_list|(
name|targetWork
argument_list|)
operator|.
name|add
argument_list|(
name|parentWork
argument_list|)
expr_stmt|;
name|dependencyGraph
operator|.
name|put
argument_list|(
name|parentWork
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|SparkWork
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// this work is now moved to the parentWork, thus we should
comment|// update this information in sparkWorkMap
name|sparkWorkMap
operator|.
name|put
argument_list|(
name|work
argument_list|,
name|parentWork
argument_list|)
expr_stmt|;
for|for
control|(
name|BaseWork
name|parent
range|:
name|parentWorks
control|)
block|{
if|if
condition|(
name|containsOp
argument_list|(
name|parent
argument_list|,
name|SparkHashTableSinkOperator
operator|.
name|class
argument_list|)
condition|)
block|{
name|moveWork
argument_list|(
name|sparkWork
argument_list|,
name|parent
argument_list|,
name|parentWork
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|moveWork
argument_list|(
name|sparkWork
argument_list|,
name|parent
argument_list|,
name|targetWork
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|generateLocalWork
parameter_list|(
name|SparkTask
name|originalTask
parameter_list|)
block|{
name|SparkWork
name|originalWork
init|=
name|originalTask
operator|.
name|getWork
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|BaseWork
argument_list|>
name|allBaseWorks
init|=
name|originalWork
operator|.
name|getAllWorkUnsorted
argument_list|()
decl_stmt|;
for|for
control|(
name|BaseWork
name|work
range|:
name|allBaseWorks
control|)
block|{
if|if
condition|(
name|containsOp
argument_list|(
name|work
argument_list|,
name|SparkHashTableSinkOperator
operator|.
name|class
argument_list|)
operator|||
name|containsOp
argument_list|(
name|work
argument_list|,
name|MapJoinOperator
operator|.
name|class
argument_list|)
condition|)
block|{
name|work
operator|.
name|setMapRedLocalWork
argument_list|(
operator|new
name|MapredLocalWork
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Context
name|ctx
init|=
name|physicalContext
operator|.
name|getContext
argument_list|()
decl_stmt|;
for|for
control|(
name|BaseWork
name|work
range|:
name|allBaseWorks
control|)
block|{
if|if
condition|(
name|containsOp
argument_list|(
name|work
argument_list|,
name|MapJoinOperator
operator|.
name|class
argument_list|)
condition|)
block|{
name|Path
name|tmpPath
init|=
name|Utilities
operator|.
name|generateTmpPath
argument_list|(
name|ctx
operator|.
name|getMRTmpPath
argument_list|()
argument_list|,
name|originalTask
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|MapredLocalWork
name|bigTableLocalWork
init|=
name|work
operator|.
name|getMapRedLocalWork
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|dummyOps
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|(
name|work
operator|.
name|getDummyOps
argument_list|()
argument_list|)
decl_stmt|;
name|bigTableLocalWork
operator|.
name|setDummyParentOp
argument_list|(
name|dummyOps
argument_list|)
expr_stmt|;
for|for
control|(
name|BaseWork
name|parentWork
range|:
name|originalWork
operator|.
name|getParents
argument_list|(
name|work
argument_list|)
control|)
block|{
if|if
condition|(
name|containsOp
argument_list|(
name|parentWork
argument_list|,
name|SparkHashTableSinkOperator
operator|.
name|class
argument_list|)
condition|)
block|{
name|parentWork
operator|.
name|getMapRedLocalWork
argument_list|()
operator|.
name|setTmpHDFSPath
argument_list|(
name|tmpPath
argument_list|)
expr_stmt|;
block|}
block|}
name|bigTableLocalWork
operator|.
name|setTmpPath
argument_list|(
name|tmpPath
argument_list|)
expr_stmt|;
comment|// TODO: set inputFileChangeSensitive and BucketMapjoinContext,
comment|// TODO: enable non-staged mapjoin
block|}
block|}
block|}
comment|// Create a new SparkTask for the specified SparkWork, recursively compute
comment|// all the parent SparkTasks that this new task is depend on, if they don't already exists.
specifier|private
name|SparkTask
name|createSparkTask
parameter_list|(
name|SparkTask
name|originalTask
parameter_list|,
name|SparkWork
name|sparkWork
parameter_list|,
name|Map
argument_list|<
name|SparkWork
argument_list|,
name|SparkTask
argument_list|>
name|createdTaskMap
parameter_list|)
block|{
if|if
condition|(
name|createdTaskMap
operator|.
name|containsKey
argument_list|(
name|sparkWork
argument_list|)
condition|)
block|{
return|return
name|createdTaskMap
operator|.
name|get
argument_list|(
name|sparkWork
argument_list|)
return|;
block|}
name|SparkTask
name|resultTask
init|=
name|originalTask
operator|.
name|getWork
argument_list|()
operator|==
name|sparkWork
condition|?
name|originalTask
else|:
operator|(
name|SparkTask
operator|)
name|TaskFactory
operator|.
name|get
argument_list|(
name|sparkWork
argument_list|,
name|physicalContext
operator|.
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dependencyGraph
operator|.
name|get
argument_list|(
name|sparkWork
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|SparkWork
name|parentWork
range|:
name|dependencyGraph
operator|.
name|get
argument_list|(
name|sparkWork
argument_list|)
control|)
block|{
name|SparkTask
name|parentTask
init|=
name|createSparkTask
argument_list|(
name|originalTask
argument_list|,
name|parentWork
argument_list|,
name|createdTaskMap
argument_list|)
decl_stmt|;
name|parentTask
operator|.
name|addDependentTask
argument_list|(
name|resultTask
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|originalTask
operator|!=
name|resultTask
condition|)
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|parentTasks
init|=
name|originalTask
operator|.
name|getParentTasks
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentTasks
operator|!=
literal|null
operator|&&
name|parentTasks
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parentTask
range|:
name|parentTasks
control|)
block|{
name|parentTask
operator|.
name|addDependentTask
argument_list|(
name|resultTask
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|physicalContext
operator|.
name|addToRootTask
argument_list|(
name|resultTask
argument_list|)
expr_stmt|;
name|physicalContext
operator|.
name|removeFromRootTask
argument_list|(
name|originalTask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|createdTaskMap
operator|.
name|put
argument_list|(
name|sparkWork
argument_list|,
name|resultTask
argument_list|)
expr_stmt|;
return|return
name|resultTask
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|dispatch
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|Object
modifier|...
name|nos
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|currentTask
init|=
operator|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|nd
decl_stmt|;
if|if
condition|(
name|currentTask
operator|instanceof
name|SparkTask
condition|)
block|{
name|SparkTask
name|sparkTask
init|=
operator|(
name|SparkTask
operator|)
name|currentTask
decl_stmt|;
name|SparkWork
name|sparkWork
init|=
name|sparkTask
operator|.
name|getWork
argument_list|()
decl_stmt|;
comment|// Generate MapredLocalWorks for MJ and HTS
name|generateLocalWork
argument_list|(
name|sparkTask
argument_list|)
expr_stmt|;
name|dependencyGraph
operator|.
name|put
argument_list|(
name|sparkWork
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|SparkWork
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|BaseWork
argument_list|>
name|leaves
init|=
name|sparkWork
operator|.
name|getLeaves
argument_list|()
decl_stmt|;
for|for
control|(
name|BaseWork
name|leaf
range|:
name|leaves
control|)
block|{
name|moveWork
argument_list|(
name|sparkWork
argument_list|,
name|leaf
argument_list|,
name|sparkWork
argument_list|)
expr_stmt|;
block|}
comment|// Now remove all BaseWorks in all the childSparkWorks that we created
comment|// from the original SparkWork
for|for
control|(
name|SparkWork
name|newSparkWork
range|:
name|sparkWorkMap
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|BaseWork
name|work
range|:
name|newSparkWork
operator|.
name|getAllWorkUnsorted
argument_list|()
control|)
block|{
name|sparkWork
operator|.
name|remove
argument_list|(
name|work
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|SparkWork
argument_list|,
name|SparkTask
argument_list|>
name|createdTaskMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|SparkWork
argument_list|,
name|SparkTask
argument_list|>
argument_list|()
decl_stmt|;
comment|// Now create SparkTasks from the SparkWorks, also set up dependency
for|for
control|(
name|SparkWork
name|work
range|:
name|dependencyGraph
operator|.
name|keySet
argument_list|()
control|)
block|{
name|createSparkTask
argument_list|(
name|sparkTask
argument_list|,
name|work
argument_list|,
name|createdTaskMap
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

