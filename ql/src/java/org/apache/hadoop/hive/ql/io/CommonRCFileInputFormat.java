begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedInputFormatInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|BytesRefArrayWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_comment
comment|/**  * CommonRCFileInputFormat.  * Wrapper class that calls the correct input format for RC file base on  * HiveConf.ConfVars.HIVE_VECTORIZATION_ENABLED parameter  */
end_comment

begin_class
specifier|public
class|class
name|CommonRCFileInputFormat
extends|extends
name|FileInputFormat
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
implements|implements
name|InputFormatChecker
implements|,
name|VectorizedInputFormatInterface
block|{
name|RCFileInputFormat
argument_list|<
name|LongWritable
argument_list|,
name|BytesRefArrayWritable
argument_list|>
name|rcif
init|=
operator|new
name|RCFileInputFormat
argument_list|<
name|LongWritable
argument_list|,
name|BytesRefArrayWritable
argument_list|>
argument_list|()
decl_stmt|;
name|VectorizedRCFileInputFormat
name|vrcif
init|=
operator|new
name|VectorizedRCFileInputFormat
argument_list|()
decl_stmt|;
specifier|private
specifier|static
class|class
name|CommonOrcRecordReader
implements|implements
name|RecordReader
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
block|{
specifier|final
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|VectorizedRowBatch
argument_list|>
name|vrcrr
decl_stmt|;
specifier|final
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|BytesRefArrayWritable
argument_list|>
name|rcrr
decl_stmt|;
specifier|public
name|CommonOrcRecordReader
parameter_list|(
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|VectorizedRowBatch
argument_list|>
name|vrcrr
parameter_list|,
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|BytesRefArrayWritable
argument_list|>
name|rcrr
parameter_list|)
block|{
name|this
operator|.
name|vrcrr
operator|=
name|vrcrr
expr_stmt|;
name|this
operator|.
name|rcrr
operator|=
name|rcrr
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|vrcrr
operator|!=
literal|null
condition|)
block|{
name|vrcrr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rcrr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|createKey
parameter_list|()
block|{
if|if
condition|(
name|vrcrr
operator|!=
literal|null
condition|)
block|{
return|return
name|vrcrr
operator|.
name|createKey
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|rcrr
operator|.
name|createKey
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|createValue
parameter_list|()
block|{
if|if
condition|(
name|vrcrr
operator|!=
literal|null
condition|)
block|{
return|return
name|vrcrr
operator|.
name|createValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|rcrr
operator|.
name|createValue
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|vrcrr
operator|!=
literal|null
condition|)
block|{
return|return
name|vrcrr
operator|.
name|getPos
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|rcrr
operator|.
name|getPos
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|vrcrr
operator|!=
literal|null
condition|)
block|{
return|return
name|vrcrr
operator|.
name|getProgress
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|rcrr
operator|.
name|getProgress
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|Writable
name|arg0
parameter_list|,
name|Writable
name|arg1
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|vrcrr
operator|!=
literal|null
condition|)
block|{
return|return
name|vrcrr
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
operator|(
name|VectorizedRowBatch
operator|)
name|arg1
argument_list|)
return|;
block|}
else|else
block|{
name|LongWritable
name|d
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
return|return
name|rcrr
operator|.
name|next
argument_list|(
name|d
argument_list|,
operator|(
name|BytesRefArrayWritable
operator|)
name|arg1
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|validateInput
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|vectorPath
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|vectorPath
condition|)
block|{
return|return
name|vrcif
operator|.
name|validateInput
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|files
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rcif
operator|.
name|validateInput
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|files
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|vectorPath
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|vectorPath
condition|)
block|{
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|VectorizedRowBatch
argument_list|>
name|vrcrr
init|=
name|vrcif
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|conf
argument_list|,
name|reporter
argument_list|)
decl_stmt|;
return|return
operator|new
name|CommonOrcRecordReader
argument_list|(
name|vrcrr
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|BytesRefArrayWritable
argument_list|>
name|rcrr
init|=
name|rcif
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|conf
argument_list|,
name|reporter
argument_list|)
decl_stmt|;
return|return
operator|new
name|CommonOrcRecordReader
argument_list|(
literal|null
argument_list|,
name|rcrr
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

