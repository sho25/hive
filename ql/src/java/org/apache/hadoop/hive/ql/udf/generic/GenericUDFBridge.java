begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFUtils
operator|.
name|ConversionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_comment
comment|/**  * GenericUDFBridge encapsulates UDF to provide the same interface as  * GenericUDF.  *  * Note that GenericUDFBridge implements Serializable because the name of the  * UDF class needs to be serialized with the plan.  *  */
end_comment

begin_class
specifier|public
class|class
name|GenericUDFBridge
extends|extends
name|GenericUDF
implements|implements
name|Serializable
block|{
comment|/**    * The name of the UDF.    */
name|String
name|udfName
decl_stmt|;
comment|/**    * Whether the UDF is an operator or not. This controls how the display string    * is generated.    */
name|boolean
name|isOperator
decl_stmt|;
comment|/**    * The underlying UDF class Name.    */
name|String
name|udfClassName
decl_stmt|;
comment|/**    * Create a new GenericUDFBridge object.    *    * @param udfName    *          The name of the corresponding udf.    * @param isOperator    * @param udfClassName java class name of UDF    */
specifier|public
name|GenericUDFBridge
parameter_list|(
name|String
name|udfName
parameter_list|,
name|boolean
name|isOperator
parameter_list|,
name|String
name|udfClassName
parameter_list|)
block|{
name|this
operator|.
name|udfName
operator|=
name|udfName
expr_stmt|;
name|this
operator|.
name|isOperator
operator|=
name|isOperator
expr_stmt|;
name|this
operator|.
name|udfClassName
operator|=
name|udfClassName
expr_stmt|;
block|}
comment|// For Java serialization only
specifier|public
name|GenericUDFBridge
parameter_list|()
block|{   }
specifier|public
name|void
name|setUdfName
parameter_list|(
name|String
name|udfName
parameter_list|)
block|{
name|this
operator|.
name|udfName
operator|=
name|udfName
expr_stmt|;
block|}
specifier|public
name|String
name|getUdfName
parameter_list|()
block|{
return|return
name|udfName
return|;
block|}
specifier|public
name|String
name|getUdfClassName
parameter_list|()
block|{
return|return
name|udfClassName
return|;
block|}
specifier|public
name|void
name|setUdfClassName
parameter_list|(
name|String
name|udfClassName
parameter_list|)
block|{
name|this
operator|.
name|udfClassName
operator|=
name|udfClassName
expr_stmt|;
block|}
specifier|public
name|boolean
name|isOperator
parameter_list|()
block|{
return|return
name|isOperator
return|;
block|}
specifier|public
name|void
name|setOperator
parameter_list|(
name|boolean
name|isOperator
parameter_list|)
block|{
name|this
operator|.
name|isOperator
operator|=
name|isOperator
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|getUdfClass
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|udfClassName
argument_list|,
literal|true
argument_list|,
name|JavaUtils
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * The underlying method of the UDF class.    */
specifier|transient
name|Method
name|udfMethod
decl_stmt|;
comment|/**    * Helper to convert the parameters before passing to udfMethod.    */
specifier|transient
name|ConversionHelper
name|conversionHelper
decl_stmt|;
comment|/**    * The actual udf object.    */
specifier|transient
name|UDF
name|udf
decl_stmt|;
comment|/**    * The non-deferred real arguments for method invocation.    */
specifier|transient
name|Object
index|[]
name|realArguments
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
try|try
block|{
name|udf
operator|=
operator|(
name|UDF
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|udfClassName
argument_list|,
literal|true
argument_list|,
name|JavaUtils
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"The UDF implementation class '"
operator|+
name|udfClassName
operator|+
literal|"' is not present in the class path"
argument_list|)
throw|;
block|}
comment|// Resolve for the method based on argument types
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|argumentTypeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|(
name|arguments
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectInspector
name|argument
range|:
name|arguments
control|)
block|{
name|argumentTypeInfos
operator|.
name|add
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|argument
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|udfMethod
operator|=
name|udf
operator|.
name|getResolver
argument_list|()
operator|.
name|getEvalMethod
argument_list|(
name|argumentTypeInfos
argument_list|)
expr_stmt|;
name|udfMethod
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Create parameter converters
name|conversionHelper
operator|=
operator|new
name|ConversionHelper
argument_list|(
name|udfMethod
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
comment|// Create the non-deferred realArgument
name|realArguments
operator|=
operator|new
name|Object
index|[
name|arguments
operator|.
name|length
index|]
expr_stmt|;
comment|// Get the return ObjectInspector.
name|ObjectInspector
name|returnOI
init|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|udfMethod
operator|.
name|getGenericReturnType
argument_list|()
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
return|return
name|returnOI
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
assert|assert
operator|(
name|arguments
operator|.
name|length
operator|==
name|realArguments
operator|.
name|length
operator|)
assert|;
comment|// Calculate all the arguments
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|realArguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|realArguments
index|[
name|i
index|]
operator|=
name|arguments
index|[
name|i
index|]
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// Call the function
name|Object
name|result
init|=
name|FunctionRegistry
operator|.
name|invoke
argument_list|(
name|udfMethod
argument_list|,
name|udf
argument_list|,
name|conversionHelper
operator|.
name|convertIfNecessary
argument_list|(
name|realArguments
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
if|if
condition|(
name|isOperator
condition|)
block|{
if|if
condition|(
name|children
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// Prefix operator
return|return
literal|"("
operator|+
name|udfName
operator|+
literal|" "
operator|+
name|children
index|[
literal|0
index|]
operator|+
literal|")"
return|;
block|}
else|else
block|{
comment|// Infix operator
assert|assert
name|children
operator|.
name|length
operator|==
literal|2
assert|;
return|return
literal|"("
operator|+
name|children
index|[
literal|0
index|]
operator|+
literal|" "
operator|+
name|udfName
operator|+
literal|" "
operator|+
name|children
index|[
literal|1
index|]
operator|+
literal|")"
return|;
block|}
block|}
else|else
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|udfName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|children
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|children
operator|.
name|length
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getRequiredJars
parameter_list|()
block|{
return|return
name|udf
operator|.
name|getRequiredJars
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getRequiredFiles
parameter_list|()
block|{
return|return
name|udf
operator|.
name|getRequiredFiles
argument_list|()
return|;
block|}
block|}
end_class

end_unit

