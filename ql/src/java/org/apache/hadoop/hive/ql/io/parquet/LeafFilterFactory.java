begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|PredicateLeaf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|PredicateLeaf
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|filter2
operator|.
name|predicate
operator|.
name|FilterApi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|filter2
operator|.
name|predicate
operator|.
name|FilterPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|PrimitiveType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|Type
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|filter2
operator|.
name|predicate
operator|.
name|FilterApi
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|filter2
operator|.
name|predicate
operator|.
name|FilterApi
operator|.
name|lt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|filter2
operator|.
name|predicate
operator|.
name|FilterApi
operator|.
name|ltEq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|filter2
operator|.
name|predicate
operator|.
name|FilterApi
operator|.
name|binaryColumn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|filter2
operator|.
name|predicate
operator|.
name|FilterApi
operator|.
name|booleanColumn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|filter2
operator|.
name|predicate
operator|.
name|FilterApi
operator|.
name|doubleColumn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|filter2
operator|.
name|predicate
operator|.
name|FilterApi
operator|.
name|floatColumn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|filter2
operator|.
name|predicate
operator|.
name|FilterApi
operator|.
name|intColumn
import|;
end_import

begin_class
specifier|public
class|class
name|LeafFilterFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LeafFilterFactory
operator|.
name|class
argument_list|)
decl_stmt|;
class|class
name|IntFilterPredicateLeafBuilder
extends|extends
name|FilterPredicateLeafBuilder
block|{
comment|/**      * @param op         consists of EQUALS, NULL_SAFE_EQUALS, LESS_THAN, LESS_THAN_EQUALS, IS_NULL      * @param literal      * @param columnName      * @return      */
annotation|@
name|Override
specifier|public
name|FilterPredicate
name|buildPredict
parameter_list|(
name|Operator
name|op
parameter_list|,
name|Object
name|literal
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|LESS_THAN
case|:
return|return
name|lt
argument_list|(
name|intColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|literal
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
case|case
name|IS_NULL
case|:
case|case
name|EQUALS
case|:
case|case
name|NULL_SAFE_EQUALS
case|:
return|return
name|eq
argument_list|(
name|intColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
operator|(
name|literal
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
operator|(
name|Number
operator|)
name|literal
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
case|case
name|LESS_THAN_EQUALS
case|:
return|return
name|ltEq
argument_list|(
name|intColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|literal
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown PredicateLeaf Operator type: "
operator|+
name|op
argument_list|)
throw|;
block|}
block|}
block|}
class|class
name|LongFilterPredicateLeafBuilder
extends|extends
name|FilterPredicateLeafBuilder
block|{
annotation|@
name|Override
specifier|public
name|FilterPredicate
name|buildPredict
parameter_list|(
name|Operator
name|op
parameter_list|,
name|Object
name|constant
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|LESS_THAN
case|:
return|return
name|lt
argument_list|(
name|FilterApi
operator|.
name|longColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|constant
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
case|case
name|IS_NULL
case|:
case|case
name|EQUALS
case|:
case|case
name|NULL_SAFE_EQUALS
case|:
return|return
name|eq
argument_list|(
name|FilterApi
operator|.
name|longColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
operator|(
name|constant
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
operator|(
name|Number
operator|)
name|constant
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
case|case
name|LESS_THAN_EQUALS
case|:
return|return
name|ltEq
argument_list|(
name|FilterApi
operator|.
name|longColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|constant
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown PredicateLeaf Operator type: "
operator|+
name|op
argument_list|)
throw|;
block|}
block|}
block|}
class|class
name|FloatFilterPredicateLeafBuilder
extends|extends
name|FilterPredicateLeafBuilder
block|{
annotation|@
name|Override
specifier|public
name|FilterPredicate
name|buildPredict
parameter_list|(
name|Operator
name|op
parameter_list|,
name|Object
name|constant
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|LESS_THAN
case|:
return|return
name|lt
argument_list|(
name|floatColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|constant
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
return|;
case|case
name|IS_NULL
case|:
case|case
name|EQUALS
case|:
case|case
name|NULL_SAFE_EQUALS
case|:
return|return
name|eq
argument_list|(
name|floatColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
operator|(
name|constant
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
operator|(
name|Number
operator|)
name|constant
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
return|;
case|case
name|LESS_THAN_EQUALS
case|:
return|return
name|ltEq
argument_list|(
name|FilterApi
operator|.
name|floatColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|constant
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown PredicateLeaf Operator type: "
operator|+
name|op
argument_list|)
throw|;
block|}
block|}
block|}
class|class
name|DoubleFilterPredicateLeafBuilder
extends|extends
name|FilterPredicateLeafBuilder
block|{
annotation|@
name|Override
specifier|public
name|FilterPredicate
name|buildPredict
parameter_list|(
name|Operator
name|op
parameter_list|,
name|Object
name|constant
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|LESS_THAN
case|:
return|return
name|lt
argument_list|(
name|doubleColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|constant
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
case|case
name|IS_NULL
case|:
case|case
name|EQUALS
case|:
case|case
name|NULL_SAFE_EQUALS
case|:
return|return
name|eq
argument_list|(
name|doubleColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
operator|(
name|constant
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
operator|(
name|Number
operator|)
name|constant
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
case|case
name|LESS_THAN_EQUALS
case|:
return|return
name|ltEq
argument_list|(
name|FilterApi
operator|.
name|doubleColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|constant
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown PredicateLeaf Operator type: "
operator|+
name|op
argument_list|)
throw|;
block|}
block|}
block|}
class|class
name|BooleanFilterPredicateLeafBuilder
extends|extends
name|FilterPredicateLeafBuilder
block|{
annotation|@
name|Override
specifier|public
name|FilterPredicate
name|buildPredict
parameter_list|(
name|Operator
name|op
parameter_list|,
name|Object
name|constant
parameter_list|,
name|String
name|columnName
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|IS_NULL
case|:
case|case
name|EQUALS
case|:
case|case
name|NULL_SAFE_EQUALS
case|:
return|return
name|eq
argument_list|(
name|booleanColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
operator|(
name|constant
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
operator|(
name|Boolean
operator|)
name|constant
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown PredicateLeaf Operator type: "
operator|+
name|op
argument_list|)
throw|;
block|}
block|}
block|}
class|class
name|BinaryFilterPredicateLeafBuilder
extends|extends
name|FilterPredicateLeafBuilder
block|{
annotation|@
name|Override
specifier|public
name|FilterPredicate
name|buildPredict
parameter_list|(
name|Operator
name|op
parameter_list|,
name|Object
name|constant
parameter_list|,
name|String
name|columnName
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|LESS_THAN
case|:
return|return
name|lt
argument_list|(
name|binaryColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|Binary
operator|.
name|fromString
argument_list|(
operator|(
name|String
operator|)
name|constant
argument_list|)
argument_list|)
return|;
case|case
name|IS_NULL
case|:
case|case
name|EQUALS
case|:
case|case
name|NULL_SAFE_EQUALS
case|:
return|return
name|eq
argument_list|(
name|binaryColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
operator|(
name|constant
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|Binary
operator|.
name|fromString
argument_list|(
operator|(
name|String
operator|)
name|constant
argument_list|)
argument_list|)
return|;
case|case
name|LESS_THAN_EQUALS
case|:
return|return
name|ltEq
argument_list|(
name|binaryColumn
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|Binary
operator|.
name|fromString
argument_list|(
operator|(
name|String
operator|)
name|constant
argument_list|)
argument_list|)
return|;
default|default:
comment|// should never be executed
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown PredicateLeaf Operator type: "
operator|+
name|op
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * get leaf filter builder by FilterPredicateType, currently date, decimal and timestamp is not    * supported yet.    * @param type FilterPredicateType    * @return    * @throws HiveException Exception is thrown for unsupported data types so we can skip filtering    */
specifier|public
name|FilterPredicateLeafBuilder
name|getLeafFilterBuilderByType
parameter_list|(
name|PredicateLeaf
operator|.
name|Type
name|type
parameter_list|,
name|Type
name|parquetType
parameter_list|)
throws|throws
name|HiveException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|STRING
case|:
comment|// string, char, varchar
case|case
name|BOOLEAN
case|:
return|return
name|getLeafFilterBuilderByParquetType
argument_list|(
name|parquetType
argument_list|)
return|;
case|case
name|DATE
case|:
case|case
name|DECIMAL
case|:
case|case
name|TIMESTAMP
case|:
default|default:
name|String
name|msg
init|=
literal|"Conversion to Parquet FilterPredicate not supported for "
operator|+
name|type
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates FilterPredicateLeafBuilder as per Parquet FileSchema type    * @param parquetType    * @return    * @throws HiveException    */
specifier|private
name|FilterPredicateLeafBuilder
name|getLeafFilterBuilderByParquetType
parameter_list|(
name|Type
name|parquetType
parameter_list|)
throws|throws
name|HiveException
block|{
switch|switch
condition|(
name|parquetType
operator|.
name|asPrimitiveType
argument_list|()
operator|.
name|getPrimitiveTypeName
argument_list|()
condition|)
block|{
case|case
name|INT32
case|:
comment|// TINYINT, SMALLINT, INT
return|return
operator|new
name|IntFilterPredicateLeafBuilder
argument_list|()
return|;
case|case
name|INT64
case|:
comment|// LONG
return|return
operator|new
name|LongFilterPredicateLeafBuilder
argument_list|()
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatFilterPredicateLeafBuilder
argument_list|()
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleFilterPredicateLeafBuilder
argument_list|()
return|;
case|case
name|BINARY
case|:
comment|// STRING, CHAR, VARCHAR
return|return
operator|new
name|BinaryFilterPredicateLeafBuilder
argument_list|()
return|;
case|case
name|BOOLEAN
case|:
return|return
operator|new
name|BooleanFilterPredicateLeafBuilder
argument_list|()
return|;
default|default:
name|String
name|msg
init|=
literal|"Conversion to Parquet FilterPredicate not supported for "
operator|+
name|parquetType
operator|.
name|asPrimitiveType
argument_list|()
operator|.
name|getPrimitiveTypeName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

