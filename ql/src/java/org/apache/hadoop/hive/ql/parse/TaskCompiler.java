begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Interner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Interners
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|HiveStatsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|DDLTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MaterializedViewDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|StatsTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMapRedUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
operator|.
name|AnalyzeRewriteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
operator|.
name|TableSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BasicStatsWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ColumnStatsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CreateTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CreateViewDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadFileDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MoveWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|StatsWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|BasicStatsNoJobTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|DefaultFetchFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|NoOpFetchFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|ThriftFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|ThriftJDBCBinarySerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * TaskCompiler is a the base class for classes that compile  * operator pipelines into tasks.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|TaskCompiler
block|{
specifier|protected
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TaskCompiler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Assumes one instance of this + single-threaded compilation for each query.
specifier|protected
name|Hive
name|db
decl_stmt|;
specifier|protected
name|LogHelper
name|console
decl_stmt|;
specifier|protected
name|QueryState
name|queryState
decl_stmt|;
specifier|protected
name|HiveConf
name|conf
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|(
name|QueryState
name|queryState
parameter_list|,
name|LogHelper
name|console
parameter_list|,
name|Hive
name|db
parameter_list|)
block|{
name|this
operator|.
name|queryState
operator|=
name|queryState
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|queryState
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|console
operator|=
name|console
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"nls"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|public
name|void
name|compile
parameter_list|(
specifier|final
name|ParseContext
name|pCtx
parameter_list|,
specifier|final
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|,
specifier|final
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
specifier|final
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Context
name|ctx
init|=
name|pCtx
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|GlobalLimitCtx
name|globalLimitCtx
init|=
name|pCtx
operator|.
name|getGlobalLimitCtx
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|MoveWork
argument_list|>
argument_list|>
name|mvTask
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LoadTableDesc
argument_list|>
name|loadTableWork
init|=
name|pCtx
operator|.
name|getLoadTableWork
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LoadFileDesc
argument_list|>
name|loadFileWork
init|=
name|pCtx
operator|.
name|getLoadFileWork
argument_list|()
decl_stmt|;
name|boolean
name|isCStats
init|=
name|pCtx
operator|.
name|getQueryProperties
argument_list|()
operator|.
name|isAnalyzeRewrite
argument_list|()
decl_stmt|;
name|int
name|outerQueryLimit
init|=
name|pCtx
operator|.
name|getQueryProperties
argument_list|()
operator|.
name|getOuterQueryLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|pCtx
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pCtx
operator|.
name|getFetchTask
argument_list|()
operator|.
name|getTblDesc
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|pCtx
operator|.
name|getFetchTask
argument_list|()
operator|.
name|getWork
argument_list|()
operator|.
name|setHiveServerQuery
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isHiveServerQuery
argument_list|()
argument_list|)
expr_stmt|;
name|TableDesc
name|resultTab
init|=
name|pCtx
operator|.
name|getFetchTask
argument_list|()
operator|.
name|getTblDesc
argument_list|()
decl_stmt|;
comment|// If the serializer is ThriftJDBCBinarySerDe, then it requires that NoOpFetchFormatter be used. But when it isn't,
comment|// then either the ThriftFormatter or the DefaultFetchFormatter should be used.
if|if
condition|(
operator|!
name|resultTab
operator|.
name|getSerdeClassName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|ThriftJDBCBinarySerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isHiveServerQuery
argument_list|()
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|SerDeUtils
operator|.
name|LIST_SINK_OUTPUT_FORMATTER
argument_list|,
name|ThriftFormatter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|formatterName
init|=
name|conf
operator|.
name|get
argument_list|(
name|SerDeUtils
operator|.
name|LIST_SINK_OUTPUT_FORMATTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatterName
operator|==
literal|null
operator|||
name|formatterName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|SerDeUtils
operator|.
name|LIST_SINK_OUTPUT_FORMATTER
argument_list|,
name|DefaultFetchFormatter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return;
block|}
name|optimizeOperatorPlan
argument_list|(
name|pCtx
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
comment|/*      * In case of a select, use a fetch task instead of a move task.      * If the select is from analyze table column rewrite, don't create a fetch task. Instead create      * a column stats task later.      */
if|if
condition|(
name|pCtx
operator|.
name|getQueryProperties
argument_list|()
operator|.
name|isQuery
argument_list|()
operator|&&
operator|!
name|isCStats
condition|)
block|{
if|if
condition|(
operator|(
operator|!
name|loadTableWork
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|loadFileWork
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_LOAD_TABLE_FILE_WORK
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|LoadFileDesc
name|loadFileDesc
init|=
name|loadFileWork
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|cols
init|=
name|loadFileDesc
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|String
name|colTypes
init|=
name|loadFileDesc
operator|.
name|getColumnTypes
argument_list|()
decl_stmt|;
name|String
name|resFileFormat
decl_stmt|;
name|TableDesc
name|resultTab
init|=
name|pCtx
operator|.
name|getFetchTableDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|resultTab
operator|==
literal|null
condition|)
block|{
name|resFileFormat
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYRESULTFILEFORMAT
argument_list|)
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getIsUsingThriftJDBCBinarySerDe
argument_list|()
operator|&&
operator|(
name|resFileFormat
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"SequenceFile"
argument_list|)
operator|)
condition|)
block|{
name|resultTab
operator|=
name|PlanUtils
operator|.
name|getDefaultQueryOutputTableDesc
argument_list|(
name|cols
argument_list|,
name|colTypes
argument_list|,
name|resFileFormat
argument_list|,
name|ThriftJDBCBinarySerDe
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Set the fetch formatter to be a no-op for the ListSinkOperator, since we'll
comment|// read formatted thrift objects from the output SequenceFile written by Tasks.
name|conf
operator|.
name|set
argument_list|(
name|SerDeUtils
operator|.
name|LIST_SINK_OUTPUT_FORMATTER
argument_list|,
name|NoOpFetchFormatter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultTab
operator|=
name|PlanUtils
operator|.
name|getDefaultQueryOutputTableDesc
argument_list|(
name|cols
argument_list|,
name|colTypes
argument_list|,
name|resFileFormat
argument_list|,
name|LazySimpleSerDe
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|resultTab
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_LIB
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|ThriftJDBCBinarySerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// Set the fetch formatter to be a no-op for the ListSinkOperator, since we'll
comment|// read formatted thrift objects from the output SequenceFile written by Tasks.
name|conf
operator|.
name|set
argument_list|(
name|SerDeUtils
operator|.
name|LIST_SINK_OUTPUT_FORMATTER
argument_list|,
name|NoOpFetchFormatter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|FetchWork
name|fetch
init|=
operator|new
name|FetchWork
argument_list|(
name|loadFileDesc
operator|.
name|getSourcePath
argument_list|()
argument_list|,
name|resultTab
argument_list|,
name|outerQueryLimit
argument_list|)
decl_stmt|;
name|boolean
name|isHiveServerQuery
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isHiveServerQuery
argument_list|()
decl_stmt|;
name|fetch
operator|.
name|setHiveServerQuery
argument_list|(
name|isHiveServerQuery
argument_list|)
expr_stmt|;
name|fetch
operator|.
name|setSource
argument_list|(
name|pCtx
operator|.
name|getFetchSource
argument_list|()
argument_list|)
expr_stmt|;
name|fetch
operator|.
name|setSink
argument_list|(
name|pCtx
operator|.
name|getFetchSink
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isHiveServerQuery
operator|&&
literal|null
operator|!=
name|resultTab
operator|&&
name|resultTab
operator|.
name|getSerdeClassName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|ThriftJDBCBinarySerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_RESULTSET_SERIALIZE_IN_TASKS
argument_list|)
condition|)
block|{
name|fetch
operator|.
name|setIsUsingThriftJDBCBinarySerDe
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fetch
operator|.
name|setIsUsingThriftJDBCBinarySerDe
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|pCtx
operator|.
name|setFetchTask
argument_list|(
operator|(
name|FetchTask
operator|)
name|TaskFactory
operator|.
name|get
argument_list|(
name|fetch
argument_list|)
argument_list|)
expr_stmt|;
comment|// For the FetchTask, the limit optimization requires we fetch all the rows
comment|// in memory and count how many rows we get. It's not practical if the
comment|// limit factor is too big
name|int
name|fetchLimit
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVELIMITOPTMAXFETCH
argument_list|)
decl_stmt|;
if|if
condition|(
name|globalLimitCtx
operator|.
name|isEnable
argument_list|()
operator|&&
name|globalLimitCtx
operator|.
name|getGlobalLimit
argument_list|()
operator|>
name|fetchLimit
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"For FetchTask, LIMIT "
operator|+
name|globalLimitCtx
operator|.
name|getGlobalLimit
argument_list|()
operator|+
literal|"> "
operator|+
name|fetchLimit
operator|+
literal|". Doesn't qualify limit optimization."
argument_list|)
expr_stmt|;
name|globalLimitCtx
operator|.
name|disableOpt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|outerQueryLimit
operator|==
literal|0
condition|)
block|{
comment|// Believe it or not, some tools do generate queries with limit 0 and than expect
comment|// query to run quickly. Lets meet their requirement.
name|LOG
operator|.
name|info
argument_list|(
literal|"Limit 0. No query execution needed."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|isCStats
condition|)
block|{
for|for
control|(
name|LoadTableDesc
name|ltd
range|:
name|loadTableWork
control|)
block|{
name|Task
argument_list|<
name|MoveWork
argument_list|>
name|tsk
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|MoveWork
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|ltd
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|mvTask
operator|.
name|add
argument_list|(
name|tsk
argument_list|)
expr_stmt|;
block|}
name|boolean
name|oneLoadFileForCtas
init|=
literal|true
decl_stmt|;
for|for
control|(
name|LoadFileDesc
name|lfd
range|:
name|loadFileWork
control|)
block|{
if|if
condition|(
name|pCtx
operator|.
name|getQueryProperties
argument_list|()
operator|.
name|isCTAS
argument_list|()
operator|||
name|pCtx
operator|.
name|getQueryProperties
argument_list|()
operator|.
name|isMaterializedView
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|oneLoadFileForCtas
condition|)
block|{
comment|// should not have more than 1 load file for CTAS.
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"One query is not expected to contain multiple CTAS loads statements"
argument_list|)
throw|;
block|}
name|setLoadFileLocation
argument_list|(
name|pCtx
argument_list|,
name|lfd
argument_list|)
expr_stmt|;
name|oneLoadFileForCtas
operator|=
literal|false
expr_stmt|;
block|}
name|mvTask
operator|.
name|add
argument_list|(
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|MoveWork
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|lfd
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|generateTaskTree
argument_list|(
name|rootTasks
argument_list|,
name|pCtx
argument_list|,
name|mvTask
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
comment|// For each task, set the key descriptor for the reducer
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|rootTask
range|:
name|rootTasks
control|)
block|{
name|GenMapRedUtils
operator|.
name|setKeyAndValueDescForTaskTree
argument_list|(
name|rootTask
argument_list|)
expr_stmt|;
block|}
comment|// If a task contains an operator which instructs bucketizedhiveinputformat
comment|// to be used, please do so
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|rootTask
range|:
name|rootTasks
control|)
block|{
name|setInputFormat
argument_list|(
name|rootTask
argument_list|)
expr_stmt|;
block|}
name|optimizeTaskPlan
argument_list|(
name|rootTasks
argument_list|,
name|pCtx
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
comment|/*      * If the query was the result of analyze table column compute statistics rewrite, create      * a column stats task instead of a fetch task to persist stats to the metastore.      * As per HIVE-15903, we will also collect table stats when user computes column stats.      * That means, if isCStats || !pCtx.getColumnStatsAutoGatherContexts().isEmpty()      * We need to collect table stats      * if isCStats, we need to include a basic stats task      * else it is ColumnStatsAutoGather, which should have a move task with a stats task already.      */
if|if
condition|(
name|isCStats
operator|||
operator|!
name|pCtx
operator|.
name|getColumnStatsAutoGatherContexts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// map from tablename to task (ColumnStatsTask which includes a BasicStatsTask)
name|Map
argument_list|<
name|String
argument_list|,
name|StatsTask
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isCStats
condition|)
block|{
if|if
condition|(
name|rootTasks
operator|==
literal|null
operator|||
name|rootTasks
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|pCtx
operator|.
name|getTopOps
argument_list|()
operator|==
literal|null
operator|||
name|pCtx
operator|.
name|getTopOps
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Can not find correct root task!"
argument_list|)
throw|;
block|}
try|try
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|root
init|=
name|rootTasks
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|StatsTask
name|tsk
init|=
operator|(
name|StatsTask
operator|)
name|genTableStats
argument_list|(
name|pCtx
argument_list|,
name|pCtx
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|root
argument_list|,
name|outputs
argument_list|)
decl_stmt|;
name|root
operator|.
name|addDependentTask
argument_list|(
name|tsk
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|extractTableFullName
argument_list|(
name|tsk
argument_list|)
argument_list|,
name|tsk
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|genColumnStatsTask
argument_list|(
name|pCtx
operator|.
name|getAnalyzeRewrite
argument_list|()
argument_list|,
name|loadFileWork
argument_list|,
name|map
argument_list|,
name|outerQueryLimit
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Set
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|leafTasks
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|getLeafTasks
argument_list|(
name|rootTasks
argument_list|,
name|leafTasks
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|nonStatsLeafTasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|leafTasks
control|)
block|{
comment|// map table name to the correct ColumnStatsTask
if|if
condition|(
name|tsk
operator|instanceof
name|StatsTask
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|extractTableFullName
argument_list|(
operator|(
name|StatsTask
operator|)
name|tsk
argument_list|)
argument_list|,
operator|(
name|StatsTask
operator|)
name|tsk
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonStatsLeafTasks
operator|.
name|add
argument_list|(
name|tsk
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add cStatsTask as a dependent of all the nonStatsLeafTasks
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|nonStatsLeafTasks
control|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|cStatsTask
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|tsk
operator|.
name|addDependentTask
argument_list|(
name|cStatsTask
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ColumnStatsAutoGatherContext
name|columnStatsAutoGatherContext
range|:
name|pCtx
operator|.
name|getColumnStatsAutoGatherContexts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|columnStatsAutoGatherContext
operator|.
name|isInsertInto
argument_list|()
condition|)
block|{
name|genColumnStatsTask
argument_list|(
name|columnStatsAutoGatherContext
operator|.
name|getAnalyzeRewrite
argument_list|()
argument_list|,
name|columnStatsAutoGatherContext
operator|.
name|getLoadFileWork
argument_list|()
argument_list|,
name|map
argument_list|,
name|outerQueryLimit
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|numBitVector
decl_stmt|;
try|try
block|{
name|numBitVector
operator|=
name|HiveStatsUtils
operator|.
name|getNumBitVectorsForNDVEstimation
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|genColumnStatsTask
argument_list|(
name|columnStatsAutoGatherContext
operator|.
name|getAnalyzeRewrite
argument_list|()
argument_list|,
name|columnStatsAutoGatherContext
operator|.
name|getLoadFileWork
argument_list|()
argument_list|,
name|map
argument_list|,
name|outerQueryLimit
argument_list|,
name|numBitVector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|decideExecMode
argument_list|(
name|rootTasks
argument_list|,
name|ctx
argument_list|,
name|globalLimitCtx
argument_list|)
expr_stmt|;
if|if
condition|(
name|pCtx
operator|.
name|getQueryProperties
argument_list|()
operator|.
name|isCTAS
argument_list|()
operator|&&
operator|!
name|pCtx
operator|.
name|getCreateTable
argument_list|()
operator|.
name|isMaterialization
argument_list|()
condition|)
block|{
comment|// generate a DDL task and make it a dependent task of the leaf
name|CreateTableDesc
name|crtTblDesc
init|=
name|pCtx
operator|.
name|getCreateTable
argument_list|()
decl_stmt|;
name|crtTblDesc
operator|.
name|validate
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|crtTblTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|crtTblDesc
argument_list|)
argument_list|)
decl_stmt|;
name|patchUpAfterCTASorMaterializedView
argument_list|(
name|rootTasks
argument_list|,
name|outputs
argument_list|,
name|crtTblTask
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pCtx
operator|.
name|getQueryProperties
argument_list|()
operator|.
name|isMaterializedView
argument_list|()
condition|)
block|{
comment|// generate a DDL task and make it a dependent task of the leaf
name|CreateViewDesc
name|viewDesc
init|=
name|pCtx
operator|.
name|getCreateViewDesc
argument_list|()
decl_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|crtViewTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|viewDesc
argument_list|)
argument_list|)
decl_stmt|;
name|patchUpAfterCTASorMaterializedView
argument_list|(
name|rootTasks
argument_list|,
name|outputs
argument_list|,
name|crtViewTask
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pCtx
operator|.
name|getMaterializedViewUpdateDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// If there is a materialized view update desc, we create introduce it at the end
comment|// of the tree.
name|MaterializedViewDesc
name|materializedViewDesc
init|=
name|pCtx
operator|.
name|getMaterializedViewUpdateDesc
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|leafTasks
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|getLeafTasks
argument_list|(
name|rootTasks
argument_list|,
name|leafTasks
argument_list|)
expr_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|materializedViewTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
name|materializedViewDesc
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
range|:
name|leafTasks
control|)
block|{
name|task
operator|.
name|addDependentTask
argument_list|(
name|materializedViewTask
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|globalLimitCtx
operator|.
name|isEnable
argument_list|()
operator|&&
name|pCtx
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"set least row check for FetchTask: "
operator|+
name|globalLimitCtx
operator|.
name|getGlobalLimit
argument_list|()
argument_list|)
expr_stmt|;
name|pCtx
operator|.
name|getFetchTask
argument_list|()
operator|.
name|getWork
argument_list|()
operator|.
name|setLeastNumRows
argument_list|(
name|globalLimitCtx
operator|.
name|getGlobalLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|globalLimitCtx
operator|.
name|isEnable
argument_list|()
operator|&&
name|globalLimitCtx
operator|.
name|getLastReduceLimitDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"set least row check for LimitDesc: "
operator|+
name|globalLimitCtx
operator|.
name|getGlobalLimit
argument_list|()
argument_list|)
expr_stmt|;
name|globalLimitCtx
operator|.
name|getLastReduceLimitDesc
argument_list|()
operator|.
name|setLeastRows
argument_list|(
name|globalLimitCtx
operator|.
name|getGlobalLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Interner
argument_list|<
name|TableDesc
argument_list|>
name|interner
init|=
name|Interners
operator|.
name|newStrongInterner
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|rootTask
range|:
name|rootTasks
control|)
block|{
name|GenMapRedUtils
operator|.
name|internTableDesc
argument_list|(
name|rootTask
argument_list|,
name|interner
argument_list|)
expr_stmt|;
name|GenMapRedUtils
operator|.
name|deriveFinalExplainAttributes
argument_list|(
name|rootTask
argument_list|,
name|pCtx
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|extractTableFullName
parameter_list|(
name|StatsTask
name|tsk
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
name|tsk
operator|.
name|getWork
argument_list|()
operator|.
name|getFullTableName
argument_list|()
return|;
block|}
specifier|private
name|Task
argument_list|<
name|?
argument_list|>
name|genTableStats
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|,
name|TableScanOperator
name|tableScan
parameter_list|,
name|Task
name|currentTask
parameter_list|,
specifier|final
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|HiveException
block|{
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormat
init|=
name|tableScan
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
operator|.
name|getInputFormatClass
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|tableScan
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|partitions
operator|.
name|addAll
argument_list|(
name|parseContext
operator|.
name|getPrunedPartitions
argument_list|(
name|tableScan
argument_list|)
operator|.
name|getPartitions
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|partn
range|:
name|partitions
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"adding part: "
operator|+
name|partn
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|partn
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|TableSpec
name|tableSpec
init|=
operator|new
name|TableSpec
argument_list|(
name|table
argument_list|,
name|partitions
argument_list|)
decl_stmt|;
name|tableScan
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
operator|.
name|setTableSpec
argument_list|(
name|tableSpec
argument_list|)
expr_stmt|;
comment|// Note: this should probably use BasicStatsNoJobTask.canUseFooterScan, but it doesn't check
comment|//       Parquet for some reason. I'm keeping the existing behavior for now.
if|if
condition|(
name|inputFormat
operator|.
name|equals
argument_list|(
name|OrcInputFormat
operator|.
name|class
argument_list|)
operator|&&
operator|!
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
comment|// For ORC, there is no Tez Job for table stats.
name|StatsWork
name|columnStatsWork
init|=
operator|new
name|StatsWork
argument_list|(
name|table
argument_list|,
name|parseContext
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|columnStatsWork
operator|.
name|setFooterScan
argument_list|()
expr_stmt|;
comment|// If partition is specified, get pruned partition list
if|if
condition|(
name|partitions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|columnStatsWork
operator|.
name|addInputPartitions
argument_list|(
name|parseContext
operator|.
name|getPrunedPartitions
argument_list|(
name|tableScan
argument_list|)
operator|.
name|getPartitions
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
name|columnStatsWork
argument_list|)
return|;
block|}
else|else
block|{
name|BasicStatsWork
name|statsWork
init|=
operator|new
name|BasicStatsWork
argument_list|(
name|tableScan
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
operator|.
name|getTableSpec
argument_list|()
argument_list|)
decl_stmt|;
name|statsWork
operator|.
name|setIsExplicitAnalyze
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|StatsWork
name|columnStatsWork
init|=
operator|new
name|StatsWork
argument_list|(
name|table
argument_list|,
name|statsWork
argument_list|,
name|parseContext
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|columnStatsWork
operator|.
name|collectStatsFromAggregator
argument_list|(
name|tableScan
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|columnStatsWork
operator|.
name|setSourceTask
argument_list|(
name|currentTask
argument_list|)
expr_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
name|columnStatsWork
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|setLoadFileLocation
parameter_list|(
specifier|final
name|ParseContext
name|pCtx
parameter_list|,
name|LoadFileDesc
name|lfd
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// CTAS; make the movetask's destination directory the table's destination.
name|Long
name|txnIdForCtas
init|=
literal|null
decl_stmt|;
name|int
name|stmtId
init|=
literal|0
decl_stmt|;
comment|// CTAS cannot be part of multi-txn stmt
name|FileSinkDesc
name|dataSinkForCtas
init|=
literal|null
decl_stmt|;
name|String
name|loc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pCtx
operator|.
name|getQueryProperties
argument_list|()
operator|.
name|isCTAS
argument_list|()
condition|)
block|{
name|CreateTableDesc
name|ctd
init|=
name|pCtx
operator|.
name|getCreateTable
argument_list|()
decl_stmt|;
name|dataSinkForCtas
operator|=
name|ctd
operator|.
name|getAndUnsetWriter
argument_list|()
expr_stmt|;
name|txnIdForCtas
operator|=
name|ctd
operator|.
name|getInitialMmWriteId
argument_list|()
expr_stmt|;
name|loc
operator|=
name|ctd
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|loc
operator|=
name|pCtx
operator|.
name|getCreateViewDesc
argument_list|()
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
name|Path
name|location
init|=
operator|(
name|loc
operator|==
literal|null
operator|)
condition|?
name|getDefaultCtasLocation
argument_list|(
name|pCtx
argument_list|)
else|:
operator|new
name|Path
argument_list|(
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
name|txnIdForCtas
operator|!=
literal|null
condition|)
block|{
name|dataSinkForCtas
operator|.
name|setDirName
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|location
operator|=
operator|new
name|Path
argument_list|(
name|location
argument_list|,
name|AcidUtils
operator|.
name|deltaSubdir
argument_list|(
name|txnIdForCtas
argument_list|,
name|txnIdForCtas
argument_list|,
name|stmtId
argument_list|)
argument_list|)
expr_stmt|;
name|lfd
operator|.
name|setSourcePath
argument_list|(
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|Utilities
operator|.
name|FILE_OP_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|Utilities
operator|.
name|FILE_OP_LOGGER
operator|.
name|trace
argument_list|(
literal|"Setting MM CTAS to "
operator|+
name|location
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|Utilities
operator|.
name|FILE_OP_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|Utilities
operator|.
name|FILE_OP_LOGGER
operator|.
name|trace
argument_list|(
literal|"Location for LFD is being set to "
operator|+
name|location
operator|+
literal|"; moving from "
operator|+
name|lfd
operator|.
name|getSourcePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lfd
operator|.
name|setTargetDir
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Path
name|getDefaultCtasLocation
parameter_list|(
specifier|final
name|ParseContext
name|pCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
name|String
name|protoName
init|=
literal|null
decl_stmt|;
name|boolean
name|isExternal
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pCtx
operator|.
name|getQueryProperties
argument_list|()
operator|.
name|isCTAS
argument_list|()
condition|)
block|{
name|protoName
operator|=
name|pCtx
operator|.
name|getCreateTable
argument_list|()
operator|.
name|getTableName
argument_list|()
expr_stmt|;
name|isExternal
operator|=
name|pCtx
operator|.
name|getCreateTable
argument_list|()
operator|.
name|isExternal
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pCtx
operator|.
name|getQueryProperties
argument_list|()
operator|.
name|isMaterializedView
argument_list|()
condition|)
block|{
name|protoName
operator|=
name|pCtx
operator|.
name|getCreateViewDesc
argument_list|()
operator|.
name|getViewName
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|names
init|=
name|Utilities
operator|.
name|getDbTableName
argument_list|(
name|protoName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|databaseExists
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"ERROR: The database "
operator|+
name|names
index|[
literal|0
index|]
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|Warehouse
name|wh
init|=
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|wh
operator|.
name|getDefaultTablePath
argument_list|(
name|db
operator|.
name|getDatabase
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|names
index|[
literal|1
index|]
argument_list|,
name|isExternal
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|patchUpAfterCTASorMaterializedView
parameter_list|(
specifier|final
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|,
specifier|final
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|createTask
parameter_list|)
block|{
comment|// clear the mapredWork output file from outputs for CTAS
comment|// DDLWork at the tail of the chain will have the output
name|Iterator
argument_list|<
name|WriteEntity
argument_list|>
name|outIter
init|=
name|outputs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|outIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|outIter
operator|.
name|next
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|DFS_DIR
case|:
case|case
name|LOCAL_DIR
case|:
name|outIter
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
comment|// find all leaf tasks and make the DDLTask as a dependent task on all of them
name|HashSet
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|leaves
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|getLeafTasks
argument_list|(
name|rootTasks
argument_list|,
name|leaves
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|leaves
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
assert|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|targetTask
init|=
name|createTask
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
range|:
name|leaves
control|)
block|{
if|if
condition|(
name|task
operator|instanceof
name|StatsTask
condition|)
block|{
comment|// StatsTask require table to already exist
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parentOfStatsTask
range|:
name|task
operator|.
name|getParentTasks
argument_list|()
control|)
block|{
name|parentOfStatsTask
operator|.
name|addDependentTask
argument_list|(
name|createTask
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parentOfCrtTblTask
range|:
name|createTask
operator|.
name|getParentTasks
argument_list|()
control|)
block|{
name|parentOfCrtTblTask
operator|.
name|removeDependentTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|createTask
operator|.
name|addDependentTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|targetTask
operator|=
name|task
expr_stmt|;
block|}
else|else
block|{
name|task
operator|.
name|addDependentTask
argument_list|(
name|createTask
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add task to insert / delete materialized view from registry if needed
if|if
condition|(
name|createTask
operator|instanceof
name|DDLTask
condition|)
block|{
name|DDLTask
name|ddlTask
init|=
operator|(
name|DDLTask
operator|)
name|createTask
decl_stmt|;
name|DDLWork
name|work
init|=
name|ddlTask
operator|.
name|getWork
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
literal|null
decl_stmt|;
name|boolean
name|retrieveAndInclude
init|=
literal|false
decl_stmt|;
name|boolean
name|disableRewrite
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|work
operator|.
name|getCreateViewDesc
argument_list|()
operator|!=
literal|null
operator|&&
name|work
operator|.
name|getCreateViewDesc
argument_list|()
operator|.
name|isMaterialized
argument_list|()
condition|)
block|{
name|tableName
operator|=
name|work
operator|.
name|getCreateViewDesc
argument_list|()
operator|.
name|getViewName
argument_list|()
expr_stmt|;
name|retrieveAndInclude
operator|=
name|work
operator|.
name|getCreateViewDesc
argument_list|()
operator|.
name|isRewriteEnabled
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|work
operator|.
name|getAlterMaterializedViewDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tableName
operator|=
name|work
operator|.
name|getAlterMaterializedViewDesc
argument_list|()
operator|.
name|getMaterializedViewName
argument_list|()
expr_stmt|;
if|if
condition|(
name|work
operator|.
name|getAlterMaterializedViewDesc
argument_list|()
operator|.
name|isRewriteEnable
argument_list|()
condition|)
block|{
name|retrieveAndInclude
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|disableRewrite
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
return|return;
block|}
name|targetTask
operator|.
name|addDependentTask
argument_list|(
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|MaterializedViewDesc
argument_list|(
name|tableName
argument_list|,
name|retrieveAndInclude
argument_list|,
name|disableRewrite
argument_list|,
literal|false
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A helper function to generate a column stats task on top of map-red task. The column stats    * task fetches from the output of the map-red task, constructs the column stats object and    * persists it to the metastore.    *    * This method generates a plan with a column stats task on top of map-red task and sets up the    * appropriate metadata to be used during execution.    *    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|genColumnStatsTask
parameter_list|(
name|AnalyzeRewriteContext
name|analyzeRewrite
parameter_list|,
name|List
argument_list|<
name|LoadFileDesc
argument_list|>
name|loadFileWork
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StatsTask
argument_list|>
name|map
parameter_list|,
name|int
name|outerQueryLimit
parameter_list|,
name|int
name|numBitVector
parameter_list|)
throws|throws
name|SemanticException
block|{
name|FetchWork
name|fetch
decl_stmt|;
name|String
name|tableName
init|=
name|analyzeRewrite
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colName
init|=
name|analyzeRewrite
operator|.
name|getColName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colType
init|=
name|analyzeRewrite
operator|.
name|getColType
argument_list|()
decl_stmt|;
name|boolean
name|isTblLevel
init|=
name|analyzeRewrite
operator|.
name|isTblLvl
argument_list|()
decl_stmt|;
name|String
name|cols
init|=
name|loadFileWork
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|String
name|colTypes
init|=
name|loadFileWork
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumnTypes
argument_list|()
decl_stmt|;
name|String
name|resFileFormat
decl_stmt|;
name|TableDesc
name|resultTab
decl_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isHiveServerQuery
argument_list|()
operator|&&
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_RESULTSET_SERIALIZE_IN_TASKS
argument_list|)
condition|)
block|{
name|resFileFormat
operator|=
literal|"SequenceFile"
expr_stmt|;
name|resultTab
operator|=
name|PlanUtils
operator|.
name|getDefaultQueryOutputTableDesc
argument_list|(
name|cols
argument_list|,
name|colTypes
argument_list|,
name|resFileFormat
argument_list|,
name|ThriftJDBCBinarySerDe
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resFileFormat
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYRESULTFILEFORMAT
argument_list|)
expr_stmt|;
name|resultTab
operator|=
name|PlanUtils
operator|.
name|getDefaultQueryOutputTableDesc
argument_list|(
name|cols
argument_list|,
name|colTypes
argument_list|,
name|resFileFormat
argument_list|,
name|LazySimpleSerDe
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|fetch
operator|=
operator|new
name|FetchWork
argument_list|(
name|loadFileWork
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSourcePath
argument_list|()
argument_list|,
name|resultTab
argument_list|,
name|outerQueryLimit
argument_list|)
expr_stmt|;
name|ColumnStatsDesc
name|cStatsDesc
init|=
operator|new
name|ColumnStatsDesc
argument_list|(
name|tableName
argument_list|,
name|colName
argument_list|,
name|colType
argument_list|,
name|isTblLevel
argument_list|,
name|numBitVector
argument_list|,
name|fetch
argument_list|)
decl_stmt|;
name|StatsTask
name|columnStatsTask
init|=
name|map
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnStatsTask
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Can not find "
operator|+
name|tableName
operator|+
literal|" in genColumnStatsTask"
argument_list|)
throw|;
block|}
else|else
block|{
name|columnStatsTask
operator|.
name|getWork
argument_list|()
operator|.
name|setColStats
argument_list|(
name|cStatsDesc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Find all leaf tasks of the list of root tasks.    */
specifier|private
name|void
name|getLeafTasks
parameter_list|(
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|,
name|Set
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|leaves
parameter_list|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|root
range|:
name|rootTasks
control|)
block|{
name|getLeafTasks
argument_list|(
name|root
argument_list|,
name|leaves
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|getLeafTasks
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
parameter_list|,
name|Set
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|leaves
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|getDependentTasks
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|leaves
operator|.
name|contains
argument_list|(
name|task
argument_list|)
condition|)
block|{
name|leaves
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getLeafTasks
argument_list|(
name|task
operator|.
name|getDependentTasks
argument_list|()
argument_list|,
name|leaves
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Called to transform tasks into local tasks where possible/desirable    */
specifier|protected
specifier|abstract
name|void
name|decideExecMode
parameter_list|(
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|,
name|Context
name|ctx
parameter_list|,
name|GlobalLimitCtx
name|globalLimitCtx
parameter_list|)
throws|throws
name|SemanticException
function_decl|;
comment|/*    * Called at the beginning of the compile phase to have another chance to optimize the operator plan    */
specifier|protected
name|void
name|optimizeOperatorPlan
parameter_list|(
name|ParseContext
name|pCtxSet
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|SemanticException
block|{   }
comment|/*    * Called after the tasks have been generated to run another round of optimization    */
specifier|protected
specifier|abstract
name|void
name|optimizeTaskPlan
parameter_list|(
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|,
name|ParseContext
name|pCtx
parameter_list|,
name|Context
name|ctx
parameter_list|)
throws|throws
name|SemanticException
function_decl|;
comment|/*    * Called to set the appropriate input format for tasks    */
specifier|protected
specifier|abstract
name|void
name|setInputFormat
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|rootTask
parameter_list|)
function_decl|;
comment|/*    * Called to generate the taks tree from the parse context/operator tree    */
specifier|protected
specifier|abstract
name|void
name|generateTaskTree
parameter_list|(
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|,
name|ParseContext
name|pCtx
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|MoveWork
argument_list|>
argument_list|>
name|mvTask
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|SemanticException
function_decl|;
comment|/**    * Create a clone of the parse context    */
specifier|public
name|ParseContext
name|getParseContext
parameter_list|(
name|ParseContext
name|pCtx
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|)
block|{
name|ParseContext
name|clone
init|=
operator|new
name|ParseContext
argument_list|(
name|queryState
argument_list|,
name|pCtx
operator|.
name|getOpToPartPruner
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getOpToPartList
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getTopOps
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getJoinOps
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getSmbMapJoinOps
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getLoadTableWork
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getLoadFileWork
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getColumnStatsAutoGatherContexts
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getContext
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getIdToTableNameMap
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getDestTableId
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getUCtx
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getListMapJoinOpsNoReducer
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getPrunedPartitions
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getTabNameToTabObject
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getOpToSamplePruner
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getGlobalLimitCtx
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getNameToSplitSample
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getSemanticInputs
argument_list|()
argument_list|,
name|rootTasks
argument_list|,
name|pCtx
operator|.
name|getOpToPartToSkewedPruner
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getViewAliasToInput
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getReduceSinkOperatorsAddedByEnforceBucketingSorting
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getAnalyzeRewrite
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getCreateTable
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getCreateViewDesc
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getMaterializedViewUpdateDesc
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getQueryProperties
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getViewProjectToTableSchema
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getAcidSinks
argument_list|()
argument_list|)
decl_stmt|;
name|clone
operator|.
name|setFetchTask
argument_list|(
name|pCtx
operator|.
name|getFetchTask
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setLineageInfo
argument_list|(
name|pCtx
operator|.
name|getLineageInfo
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setMapJoinOps
argument_list|(
name|pCtx
operator|.
name|getMapJoinOps
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setRsToRuntimeValuesInfoMap
argument_list|(
name|pCtx
operator|.
name|getRsToRuntimeValuesInfoMap
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setRsToSemiJoinBranchInfo
argument_list|(
name|pCtx
operator|.
name|getRsToSemiJoinBranchInfo
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setColExprToGBMap
argument_list|(
name|pCtx
operator|.
name|getColExprToGBMap
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setSemiJoinHints
argument_list|(
name|pCtx
operator|.
name|getSemiJoinHints
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
block|}
end_class

end_unit

