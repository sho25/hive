begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * This class is used as a static factory for VectorColumnAssign.  * Is capable of building assigners from expression nodes or from object inspectors.  */
end_comment

begin_class
specifier|public
class|class
name|VectorColumnAssignFactory
block|{
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorColumnAssignVectorBase
parameter_list|<
name|T
extends|extends
name|ColumnVector
parameter_list|>
implements|implements
name|VectorColumnAssign
block|{
specifier|protected
name|VectorizedRowBatch
name|outBatch
decl_stmt|;
specifier|protected
name|T
name|outCol
decl_stmt|;
specifier|protected
name|void
name|copyValue
parameter_list|(
name|T
name|in
parameter_list|,
name|int
name|srcIndex
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|assignVectorValue
parameter_list|(
name|VectorizedRowBatch
name|inBatch
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|int
name|valueColumnIndex
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
name|T
name|in
init|=
operator|(
name|T
operator|)
name|inBatch
operator|.
name|cols
index|[
name|valueColumnIndex
index|]
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|in
operator|.
name|noNulls
condition|)
block|{
name|copyValue
argument_list|(
name|in
argument_list|,
literal|0
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assignNull
argument_list|(
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|srcIndex
init|=
name|inBatch
operator|.
name|selectedInUse
condition|?
name|inBatch
operator|.
name|selected
index|[
name|batchIndex
index|]
else|:
name|batchIndex
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|noNulls
operator|||
operator|!
name|in
operator|.
name|isNull
index|[
name|srcIndex
index|]
condition|)
block|{
name|copyValue
argument_list|(
name|in
argument_list|,
name|srcIndex
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assignNull
argument_list|(
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|VectorColumnAssign
name|init
parameter_list|(
name|VectorizedRowBatch
name|out
parameter_list|,
name|T
name|cv
parameter_list|)
block|{
name|this
operator|.
name|outBatch
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|outCol
operator|=
name|cv
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|protected
name|void
name|assignNull
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|outCol
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|assignObjectValue
parameter_list|(
name|Object
name|value
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorLongColumnAssign
extends|extends
name|VectorColumnAssignVectorBase
argument_list|<
name|LongColumnVector
argument_list|>
block|{
specifier|protected
name|void
name|assignLong
parameter_list|(
name|long
name|value
parameter_list|,
name|int
name|destIndex
parameter_list|)
block|{
name|outCol
operator|.
name|vector
index|[
name|destIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorDoubleColumnAssign
extends|extends
name|VectorColumnAssignVectorBase
argument_list|<
name|DoubleColumnVector
argument_list|>
block|{
specifier|protected
name|void
name|assignDouble
parameter_list|(
name|double
name|value
parameter_list|,
name|int
name|destIndex
parameter_list|)
block|{
name|outCol
operator|.
name|vector
index|[
name|destIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorBytesColumnAssign
extends|extends
name|VectorColumnAssignVectorBase
argument_list|<
name|BytesColumnVector
argument_list|>
block|{
name|byte
index|[]
name|pad
init|=
operator|new
name|byte
index|[
name|BytesColumnVector
operator|.
name|DEFAULT_BUFFER_SIZE
index|]
decl_stmt|;
name|int
name|padUsed
init|=
literal|0
decl_stmt|;
specifier|protected
name|void
name|assignBytes
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|destIndex
parameter_list|)
block|{
if|if
condition|(
name|padUsed
operator|+
name|length
operator|<=
name|pad
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|start
argument_list|,
name|pad
argument_list|,
name|padUsed
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|outCol
operator|.
name|vector
index|[
name|destIndex
index|]
operator|=
name|pad
expr_stmt|;
name|outCol
operator|.
name|start
index|[
name|destIndex
index|]
operator|=
name|padUsed
expr_stmt|;
name|outCol
operator|.
name|length
index|[
name|destIndex
index|]
operator|=
name|length
expr_stmt|;
name|padUsed
operator|+=
name|length
expr_stmt|;
block|}
else|else
block|{
name|outCol
operator|.
name|vector
index|[
name|destIndex
index|]
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|outCol
operator|.
name|start
index|[
name|destIndex
index|]
operator|=
literal|0
expr_stmt|;
name|outCol
operator|.
name|length
index|[
name|destIndex
index|]
operator|=
name|length
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|padUsed
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorDecimalColumnAssign
extends|extends
name|VectorColumnAssignVectorBase
argument_list|<
name|DecimalColumnVector
argument_list|>
block|{
specifier|protected
name|void
name|assignDecimal
parameter_list|(
name|HiveDecimal
name|value
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|outCol
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assignDecimal
parameter_list|(
name|HiveDecimalWritable
name|hdw
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|outCol
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|hdw
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|VectorColumnAssign
index|[]
name|buildAssigners
parameter_list|(
name|VectorizedRowBatch
name|outputBatch
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorColumnAssign
index|[]
name|vca
init|=
operator|new
name|VectorColumnAssign
index|[
name|outputBatch
operator|.
name|cols
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vca
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ColumnVector
name|cv
init|=
name|outputBatch
operator|.
name|cols
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|cv
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|cv
operator|instanceof
name|LongColumnVector
condition|)
block|{
name|vca
index|[
name|i
index|]
operator|=
operator|new
name|VectorLongColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|copyValue
parameter_list|(
name|LongColumnVector
name|in
parameter_list|,
name|int
name|srcIndex
parameter_list|,
name|int
name|destIndex
parameter_list|)
block|{
name|assignLong
argument_list|(
name|in
operator|.
name|vector
index|[
name|srcIndex
index|]
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|LongColumnVector
operator|)
name|cv
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cv
operator|instanceof
name|DoubleColumnVector
condition|)
block|{
name|vca
index|[
name|i
index|]
operator|=
operator|new
name|VectorDoubleColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|copyValue
parameter_list|(
name|DoubleColumnVector
name|in
parameter_list|,
name|int
name|srcIndex
parameter_list|,
name|int
name|destIndex
parameter_list|)
block|{
name|assignDouble
argument_list|(
name|in
operator|.
name|vector
index|[
name|srcIndex
index|]
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|DoubleColumnVector
operator|)
name|cv
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cv
operator|instanceof
name|BytesColumnVector
condition|)
block|{
name|vca
index|[
name|i
index|]
operator|=
operator|new
name|VectorBytesColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|copyValue
parameter_list|(
name|BytesColumnVector
name|src
parameter_list|,
name|int
name|srcIndex
parameter_list|,
name|int
name|destIndex
parameter_list|)
block|{
name|assignBytes
argument_list|(
name|src
operator|.
name|vector
index|[
name|srcIndex
index|]
argument_list|,
name|src
operator|.
name|start
index|[
name|srcIndex
index|]
argument_list|,
name|src
operator|.
name|length
index|[
name|srcIndex
index|]
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|BytesColumnVector
operator|)
name|cv
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cv
operator|instanceof
name|DecimalColumnVector
condition|)
block|{
name|vca
index|[
name|i
index|]
operator|=
operator|new
name|VectorDecimalColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|copyValue
parameter_list|(
name|DecimalColumnVector
name|src
parameter_list|,
name|int
name|srcIndex
parameter_list|,
name|int
name|destIndex
parameter_list|)
block|{
name|assignDecimal
argument_list|(
name|src
operator|.
name|vector
index|[
name|srcIndex
index|]
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unimplemented vector column type: "
operator|+
name|cv
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|vca
return|;
block|}
specifier|public
specifier|static
name|VectorColumnAssign
name|buildObjectAssign
parameter_list|(
name|VectorizedRowBatch
name|outputBatch
parameter_list|,
name|int
name|outColIndex
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|objInspector
decl_stmt|;
return|return
name|buildObjectAssign
argument_list|(
name|outputBatch
argument_list|,
name|outColIndex
argument_list|,
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|VectorColumnAssign
name|buildObjectAssign
parameter_list|(
name|VectorizedRowBatch
name|outputBatch
parameter_list|,
name|int
name|outColIndex
parameter_list|,
name|PrimitiveCategory
name|category
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorColumnAssign
name|outVCA
init|=
literal|null
decl_stmt|;
name|ColumnVector
name|destCol
init|=
name|outputBatch
operator|.
name|cols
index|[
name|outColIndex
index|]
decl_stmt|;
if|if
condition|(
name|destCol
operator|==
literal|null
condition|)
block|{
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|VOID
case|:
name|outVCA
operator|=
operator|new
name|VectorLongColumnAssign
argument_list|()
block|{
comment|// This is a dummy assigner
annotation|@
name|Override
specifier|public
name|void
name|assignObjectValue
parameter_list|(
name|Object
name|val
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// This is no-op, there is no column to assign to and val is expected to be null
assert|assert
operator|(
name|val
operator|==
literal|null
operator|)
assert|;
block|}
block|}
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Incompatible (null) vector column and primitive category "
operator|+
name|category
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|destCol
operator|instanceof
name|LongColumnVector
condition|)
block|{
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|outVCA
operator|=
operator|new
name|VectorLongColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assignObjectValue
parameter_list|(
name|Object
name|val
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|assignNull
argument_list|(
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BooleanWritable
name|bw
init|=
operator|(
name|BooleanWritable
operator|)
name|val
decl_stmt|;
name|assignLong
argument_list|(
name|bw
operator|.
name|get
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|LongColumnVector
operator|)
name|destCol
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|outVCA
operator|=
operator|new
name|VectorLongColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assignObjectValue
parameter_list|(
name|Object
name|val
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|assignNull
argument_list|(
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteWritable
name|bw
init|=
operator|(
name|ByteWritable
operator|)
name|val
decl_stmt|;
name|assignLong
argument_list|(
name|bw
operator|.
name|get
argument_list|()
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|LongColumnVector
operator|)
name|destCol
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|outVCA
operator|=
operator|new
name|VectorLongColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assignObjectValue
parameter_list|(
name|Object
name|val
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|assignNull
argument_list|(
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ShortWritable
name|bw
init|=
operator|(
name|ShortWritable
operator|)
name|val
decl_stmt|;
name|assignLong
argument_list|(
name|bw
operator|.
name|get
argument_list|()
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|LongColumnVector
operator|)
name|destCol
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|outVCA
operator|=
operator|new
name|VectorLongColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assignObjectValue
parameter_list|(
name|Object
name|val
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|assignNull
argument_list|(
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IntWritable
name|bw
init|=
operator|(
name|IntWritable
operator|)
name|val
decl_stmt|;
name|assignLong
argument_list|(
name|bw
operator|.
name|get
argument_list|()
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|LongColumnVector
operator|)
name|destCol
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|outVCA
operator|=
operator|new
name|VectorLongColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assignObjectValue
parameter_list|(
name|Object
name|val
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|assignNull
argument_list|(
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LongWritable
name|bw
init|=
operator|(
name|LongWritable
operator|)
name|val
decl_stmt|;
name|assignLong
argument_list|(
name|bw
operator|.
name|get
argument_list|()
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|LongColumnVector
operator|)
name|destCol
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|outVCA
operator|=
operator|new
name|VectorLongColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assignObjectValue
parameter_list|(
name|Object
name|val
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|assignNull
argument_list|(
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TimestampWritable
name|bw
init|=
operator|(
name|TimestampWritable
operator|)
name|val
decl_stmt|;
name|Timestamp
name|t
init|=
name|bw
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|assignLong
argument_list|(
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|t
argument_list|)
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|LongColumnVector
operator|)
name|destCol
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|outVCA
operator|=
operator|new
name|VectorLongColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assignObjectValue
parameter_list|(
name|Object
name|val
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|assignNull
argument_list|(
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DateWritable
name|bw
init|=
operator|(
name|DateWritable
operator|)
name|val
decl_stmt|;
name|assignLong
argument_list|(
name|bw
operator|.
name|getDays
argument_list|()
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|LongColumnVector
operator|)
name|destCol
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Incompatible Long vector column and primitive category "
operator|+
name|category
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|destCol
operator|instanceof
name|DoubleColumnVector
condition|)
block|{
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|DOUBLE
case|:
name|outVCA
operator|=
operator|new
name|VectorDoubleColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assignObjectValue
parameter_list|(
name|Object
name|val
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|assignNull
argument_list|(
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DoubleWritable
name|bw
init|=
operator|(
name|DoubleWritable
operator|)
name|val
decl_stmt|;
name|assignDouble
argument_list|(
name|bw
operator|.
name|get
argument_list|()
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|DoubleColumnVector
operator|)
name|destCol
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|outVCA
operator|=
operator|new
name|VectorDoubleColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assignObjectValue
parameter_list|(
name|Object
name|val
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|assignNull
argument_list|(
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FloatWritable
name|bw
init|=
operator|(
name|FloatWritable
operator|)
name|val
decl_stmt|;
name|assignDouble
argument_list|(
name|bw
operator|.
name|get
argument_list|()
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|DoubleColumnVector
operator|)
name|destCol
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Incompatible Double vector column and primitive category "
operator|+
name|category
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|destCol
operator|instanceof
name|BytesColumnVector
condition|)
block|{
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|BINARY
case|:
name|outVCA
operator|=
operator|new
name|VectorBytesColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assignObjectValue
parameter_list|(
name|Object
name|val
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|assignNull
argument_list|(
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BytesWritable
name|bw
init|=
operator|(
name|BytesWritable
operator|)
name|val
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|bw
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|assignBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bw
operator|.
name|getLength
argument_list|()
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|BytesColumnVector
operator|)
name|destCol
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|outVCA
operator|=
operator|new
name|VectorBytesColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assignObjectValue
parameter_list|(
name|Object
name|val
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|assignNull
argument_list|(
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Text
name|bw
init|=
operator|(
name|Text
operator|)
name|val
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|bw
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|assignBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bw
operator|.
name|getLength
argument_list|()
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|BytesColumnVector
operator|)
name|destCol
argument_list|)
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
name|outVCA
operator|=
operator|new
name|VectorBytesColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assignObjectValue
parameter_list|(
name|Object
name|val
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|assignNull
argument_list|(
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We store VARCHAR type stripped of pads.
name|HiveVarchar
name|hiveVarchar
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|HiveVarchar
condition|)
block|{
name|hiveVarchar
operator|=
operator|(
name|HiveVarchar
operator|)
name|val
expr_stmt|;
block|}
else|else
block|{
name|hiveVarchar
operator|=
operator|(
operator|(
name|HiveVarcharWritable
operator|)
name|val
operator|)
operator|.
name|getHiveVarchar
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|bytes
init|=
name|hiveVarchar
operator|.
name|getValue
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|assignBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|BytesColumnVector
operator|)
name|destCol
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
name|outVCA
operator|=
operator|new
name|VectorBytesColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assignObjectValue
parameter_list|(
name|Object
name|val
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|assignNull
argument_list|(
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We store CHAR type stripped of pads.
name|HiveChar
name|hiveChar
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|HiveChar
condition|)
block|{
name|hiveChar
operator|=
operator|(
name|HiveChar
operator|)
name|val
expr_stmt|;
block|}
else|else
block|{
name|hiveChar
operator|=
operator|(
operator|(
name|HiveCharWritable
operator|)
name|val
operator|)
operator|.
name|getHiveChar
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|bytes
init|=
name|hiveChar
operator|.
name|getStrippedValue
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|assignBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|BytesColumnVector
operator|)
name|destCol
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Incompatible Bytes vector column and primitive category "
operator|+
name|category
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|destCol
operator|instanceof
name|DecimalColumnVector
condition|)
block|{
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|DECIMAL
case|:
name|outVCA
operator|=
operator|new
name|VectorDecimalColumnAssign
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assignObjectValue
parameter_list|(
name|Object
name|val
parameter_list|,
name|int
name|destIndex
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|assignNull
argument_list|(
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|val
operator|instanceof
name|HiveDecimal
condition|)
block|{
name|assignDecimal
argument_list|(
operator|(
name|HiveDecimal
operator|)
name|val
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assignDecimal
argument_list|(
operator|(
name|HiveDecimalWritable
operator|)
name|val
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
operator|.
name|init
argument_list|(
name|outputBatch
argument_list|,
operator|(
name|DecimalColumnVector
operator|)
name|destCol
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Incompatible Decimal vector column and primitive category "
operator|+
name|category
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unknown vector column type "
operator|+
name|destCol
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|outVCA
return|;
block|}
comment|/**    * Builds the assigners from an object inspector and from a list of columns.    * @param outputBatch The batch to which the assigners are bound    * @param outputOI  The row object inspector    * @param columnMap Vector column map    * @param outputColumnNames Column names, used both to find the vector columns and the    * @return    * @throws HiveException    */
specifier|public
specifier|static
name|VectorColumnAssign
index|[]
name|buildAssigners
parameter_list|(
name|VectorizedRowBatch
name|outputBatch
parameter_list|,
name|ObjectInspector
name|outputOI
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|columnMap
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNames
parameter_list|)
throws|throws
name|HiveException
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|outputOI
decl_stmt|;
name|VectorColumnAssign
index|[]
name|vcas
init|=
operator|new
name|VectorColumnAssign
index|[
name|outputColumnNames
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputColumnNames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|String
name|columnName
init|=
name|outputColumnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Integer
name|columnIndex
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|StructField
name|columnRef
init|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueOI
init|=
name|columnRef
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|vcas
index|[
name|i
index|]
operator|=
name|buildObjectAssign
argument_list|(
name|outputBatch
argument_list|,
name|columnIndex
argument_list|,
name|valueOI
argument_list|)
expr_stmt|;
block|}
return|return
name|vcas
return|;
block|}
specifier|public
specifier|static
name|VectorColumnAssign
index|[]
name|buildAssigners
parameter_list|(
name|VectorizedRowBatch
name|outputBatch
parameter_list|,
name|Writable
index|[]
name|writables
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorColumnAssign
index|[]
name|vcas
init|=
operator|new
name|VectorColumnAssign
index|[
name|outputBatch
operator|.
name|numCols
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writables
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|writables
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
assert|assert
operator|(
name|outputBatch
operator|.
name|cols
index|[
name|i
index|]
operator|==
literal|null
operator|)
assert|;
name|vcas
index|[
name|i
index|]
operator|=
name|buildObjectAssign
argument_list|(
name|outputBatch
argument_list|,
name|i
argument_list|,
name|PrimitiveCategory
operator|.
name|VOID
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|writables
index|[
name|i
index|]
operator|instanceof
name|ByteWritable
condition|)
block|{
name|vcas
index|[
name|i
index|]
operator|=
name|buildObjectAssign
argument_list|(
name|outputBatch
argument_list|,
name|i
argument_list|,
name|PrimitiveCategory
operator|.
name|BYTE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|writables
index|[
name|i
index|]
operator|instanceof
name|ShortWritable
condition|)
block|{
name|vcas
index|[
name|i
index|]
operator|=
name|buildObjectAssign
argument_list|(
name|outputBatch
argument_list|,
name|i
argument_list|,
name|PrimitiveCategory
operator|.
name|SHORT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|writables
index|[
name|i
index|]
operator|instanceof
name|IntWritable
condition|)
block|{
name|vcas
index|[
name|i
index|]
operator|=
name|buildObjectAssign
argument_list|(
name|outputBatch
argument_list|,
name|i
argument_list|,
name|PrimitiveCategory
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|writables
index|[
name|i
index|]
operator|instanceof
name|LongWritable
condition|)
block|{
name|vcas
index|[
name|i
index|]
operator|=
name|buildObjectAssign
argument_list|(
name|outputBatch
argument_list|,
name|i
argument_list|,
name|PrimitiveCategory
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|writables
index|[
name|i
index|]
operator|instanceof
name|FloatWritable
condition|)
block|{
name|vcas
index|[
name|i
index|]
operator|=
name|buildObjectAssign
argument_list|(
name|outputBatch
argument_list|,
name|i
argument_list|,
name|PrimitiveCategory
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|writables
index|[
name|i
index|]
operator|instanceof
name|DoubleWritable
condition|)
block|{
name|vcas
index|[
name|i
index|]
operator|=
name|buildObjectAssign
argument_list|(
name|outputBatch
argument_list|,
name|i
argument_list|,
name|PrimitiveCategory
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|writables
index|[
name|i
index|]
operator|instanceof
name|Text
condition|)
block|{
name|vcas
index|[
name|i
index|]
operator|=
name|buildObjectAssign
argument_list|(
name|outputBatch
argument_list|,
name|i
argument_list|,
name|PrimitiveCategory
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|writables
index|[
name|i
index|]
operator|instanceof
name|BytesWritable
condition|)
block|{
name|vcas
index|[
name|i
index|]
operator|=
name|buildObjectAssign
argument_list|(
name|outputBatch
argument_list|,
name|i
argument_list|,
name|PrimitiveCategory
operator|.
name|BINARY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|writables
index|[
name|i
index|]
operator|instanceof
name|TimestampWritable
condition|)
block|{
name|vcas
index|[
name|i
index|]
operator|=
name|buildObjectAssign
argument_list|(
name|outputBatch
argument_list|,
name|i
argument_list|,
name|PrimitiveCategory
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|writables
index|[
name|i
index|]
operator|instanceof
name|BooleanWritable
condition|)
block|{
name|vcas
index|[
name|i
index|]
operator|=
name|buildObjectAssign
argument_list|(
name|outputBatch
argument_list|,
name|i
argument_list|,
name|PrimitiveCategory
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unimplemented vector assigner for writable type "
operator|+
name|writables
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|vcas
return|;
block|}
block|}
end_class

end_unit

