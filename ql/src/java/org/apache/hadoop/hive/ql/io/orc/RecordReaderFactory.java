begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Factory to create ORC tree readers. It also compares file schema with schema specified on read  * to see if type promotions are possible.  */
end_comment

begin_class
specifier|public
class|class
name|RecordReaderFactory
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RecordReaderFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|isLogInfoEnabled
init|=
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|TreeReaderFactory
operator|.
name|TreeReader
name|createTreeReader
parameter_list|(
name|int
name|colId
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|fileSchema
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|isAcid
init|=
name|checkAcidSchema
argument_list|(
name|fileSchema
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|originalFileSchema
decl_stmt|;
if|if
condition|(
name|isAcid
condition|)
block|{
name|originalFileSchema
operator|=
name|fileSchema
operator|.
name|subList
argument_list|(
name|fileSchema
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubtypesCount
argument_list|()
argument_list|,
name|fileSchema
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|originalFileSchema
operator|=
name|fileSchema
expr_stmt|;
block|}
specifier|final
name|int
name|numCols
init|=
name|originalFileSchema
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubtypesCount
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|schemaOnRead
init|=
name|getSchemaOnRead
argument_list|(
name|numCols
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|schemaUsed
init|=
name|getMatchingSchema
argument_list|(
name|fileSchema
argument_list|,
name|schemaOnRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaUsed
operator|==
literal|null
condition|)
block|{
return|return
name|TreeReaderFactory
operator|.
name|createTreeReader
argument_list|(
name|colId
argument_list|,
name|fileSchema
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ConversionTreeReaderFactory
operator|.
name|createTreeReader
argument_list|(
name|colId
argument_list|,
name|schemaUsed
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
block|}
block|}
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getAcidEventFields
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"operation"
argument_list|,
literal|"originalTransaction"
argument_list|,
literal|"bucket"
argument_list|,
literal|"rowId"
argument_list|,
literal|"currentTransaction"
argument_list|,
literal|"row"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|checkAcidSchema
parameter_list|(
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|fileSchema
parameter_list|)
block|{
if|if
condition|(
name|fileSchema
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRUCT
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|acidFields
init|=
name|getAcidEventFields
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rootFields
init|=
name|fileSchema
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldNamesList
argument_list|()
decl_stmt|;
if|if
condition|(
name|acidFields
operator|.
name|equals
argument_list|(
name|rootFields
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|getMatchingSchema
parameter_list|(
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|fileSchema
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|schemaOnRead
parameter_list|)
block|{
if|if
condition|(
name|schemaOnRead
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Schema is not specified on read. Using file schema."
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
name|fileSchema
operator|.
name|size
argument_list|()
operator|!=
name|schemaOnRead
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Schema on read column count does not match file schema's column count."
operator|+
literal|" Falling back to using file schema."
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|fileSchema
argument_list|)
decl_stmt|;
comment|// check type promotion. ORC can only support type promotions for integer types
comment|// short -> int -> bigint as same integer readers are used for the above types.
name|boolean
name|canPromoteType
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileSchema
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|OrcProto
operator|.
name|Type
name|fColType
init|=
name|fileSchema
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|OrcProto
operator|.
name|Type
name|rColType
init|=
name|schemaOnRead
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fColType
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|rColType
operator|.
name|getKind
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|fColType
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|SHORT
argument_list|)
condition|)
block|{
if|if
condition|(
name|rColType
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|INT
argument_list|)
operator|||
name|rColType
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|LONG
argument_list|)
condition|)
block|{
comment|// type promotion possible, converting SHORT to INT/LONG requested type
name|result
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|rColType
operator|.
name|getKind
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|canPromoteType
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|canPromoteType
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fColType
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|INT
argument_list|)
condition|)
block|{
if|if
condition|(
name|rColType
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|LONG
argument_list|)
condition|)
block|{
comment|// type promotion possible, converting INT to LONG requested type
name|result
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|rColType
operator|.
name|getKind
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|canPromoteType
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|canPromoteType
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|canPromoteType
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|canPromoteType
condition|)
block|{
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Integer type promotion happened in ORC record reader. Using promoted schema."
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|getSchemaOnRead
parameter_list|(
name|int
name|numCols
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|columnTypeProperty
init|=
name|conf
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
decl_stmt|;
specifier|final
name|String
name|columnNameProperty
init|=
name|conf
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnTypeProperty
operator|==
literal|null
operator|||
name|columnNameProperty
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|columnNameProperty
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypes
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
name|columnTypeProperty
argument_list|)
decl_stmt|;
name|StructTypeInfo
name|structTypeInfo
init|=
operator|new
name|StructTypeInfo
argument_list|()
decl_stmt|;
comment|// Column types from conf includes virtual and partition columns at the end. We consider only
comment|// the actual columns in the file.
name|structTypeInfo
operator|.
name|setAllStructFieldNames
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|columnNames
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|numCols
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|structTypeInfo
operator|.
name|setAllStructFieldTypeInfos
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|fieldTypes
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|numCols
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectInspector
name|oi
init|=
name|TypeInfoUtils
operator|.
name|getStandardJavaObjectInspectorFromTypeInfo
argument_list|(
name|structTypeInfo
argument_list|)
decl_stmt|;
return|return
name|getOrcTypes
argument_list|(
name|oi
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|getOrcTypes
parameter_list|(
name|ObjectInspector
name|inspector
parameter_list|)
block|{
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|getOrcTypesImpl
argument_list|(
name|result
argument_list|,
name|inspector
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|void
name|getOrcTypesImpl
parameter_list|(
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|result
parameter_list|,
name|ObjectInspector
name|inspector
parameter_list|)
block|{
name|OrcProto
operator|.
name|Type
operator|.
name|Builder
name|type
init|=
name|OrcProto
operator|.
name|Type
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|inspector
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|BYTE
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|SHORT
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|INT
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|LONG
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRING
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
comment|// The char length needs to be written to file and should be available
comment|// from the object inspector
name|CharTypeInfo
name|charTypeInfo
init|=
call|(
name|CharTypeInfo
call|)
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|inspector
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|type
operator|.
name|setMaximumLength
argument_list|(
name|charTypeInfo
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
comment|// The varchar length needs to be written to file and should be available
comment|// from the object inspector
name|VarcharTypeInfo
name|typeInfo
init|=
call|(
name|VarcharTypeInfo
call|)
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|inspector
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|type
operator|.
name|setMaximumLength
argument_list|(
name|typeInfo
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|BINARY
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|DATE
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|DecimalTypeInfo
name|decTypeInfo
init|=
call|(
name|DecimalTypeInfo
call|)
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|inspector
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|type
operator|.
name|setPrecision
argument_list|(
name|decTypeInfo
operator|.
name|precision
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setScale
argument_list|(
name|decTypeInfo
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown primitive category: "
operator|+
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
name|result
operator|.
name|add
argument_list|(
name|type
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LIST
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|LIST
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|type
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|getOrcTypesImpl
argument_list|(
name|result
argument_list|,
operator|(
operator|(
name|ListObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|MAP
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|type
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|getOrcTypesImpl
argument_list|(
name|result
argument_list|,
operator|(
operator|(
name|MapObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|getOrcTypesImpl
argument_list|(
name|result
argument_list|,
operator|(
operator|(
name|MapObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRUCT
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|type
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StructField
name|field
range|:
operator|(
operator|(
name|StructObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
control|)
block|{
name|getOrcTypesImpl
argument_list|(
name|result
argument_list|,
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|UNION
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|UNION
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|type
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectInspector
name|oi
range|:
operator|(
operator|(
name|UnionObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getObjectInspectors
argument_list|()
control|)
block|{
name|getOrcTypesImpl
argument_list|(
name|result
argument_list|,
name|oi
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown category: "
operator|+
name|inspector
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

