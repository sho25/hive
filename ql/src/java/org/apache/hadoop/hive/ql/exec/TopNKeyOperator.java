begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorTopNKeyOperator
operator|.
name|checkTopNFilterEfficiency
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
operator|.
name|TOPNKEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TopNKeyDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_comment
comment|/**  * TopNKeyOperator passes rows that contains top N keys only.  */
end_comment

begin_class
specifier|public
class|class
name|TopNKeyOperator
extends|extends
name|Operator
argument_list|<
name|TopNKeyDesc
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|transient
name|Map
argument_list|<
name|KeyWrapper
argument_list|,
name|TopNKeyFilter
argument_list|>
name|topNKeyFilters
decl_stmt|;
specifier|private
specifier|transient
name|KeyWrapper
name|partitionKeyWrapper
decl_stmt|;
specifier|private
specifier|transient
name|KeyWrapper
name|keyWrapper
decl_stmt|;
specifier|private
specifier|transient
name|KeyWrapperComparator
name|keyWrapperComparator
decl_stmt|;
specifier|private
specifier|transient
name|Set
argument_list|<
name|KeyWrapper
argument_list|>
name|disabledPartitions
decl_stmt|;
comment|/** Kryo ctor. */
specifier|public
name|TopNKeyOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TopNKeyOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initializeOp
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|ObjectInspector
name|rowInspector
init|=
name|inputObjInspectors
index|[
literal|0
index|]
decl_stmt|;
name|outputObjInspector
operator|=
name|rowInspector
expr_stmt|;
name|int
name|numPartitionKeys
init|=
name|conf
operator|.
name|getPartitionKeyColumns
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyColumns
init|=
name|conf
operator|.
name|getKeyColumns
argument_list|()
operator|.
name|subList
argument_list|(
name|numPartitionKeys
argument_list|,
name|conf
operator|.
name|getKeyColumns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|columnSortOrder
init|=
name|conf
operator|.
name|getColumnSortOrder
argument_list|()
operator|.
name|substring
argument_list|(
name|numPartitionKeys
argument_list|)
decl_stmt|;
name|String
name|nullSortOrder
init|=
name|conf
operator|.
name|getNullOrder
argument_list|()
operator|.
name|substring
argument_list|(
name|numPartitionKeys
argument_list|)
decl_stmt|;
comment|// init keyFields
name|ObjectInspector
index|[]
name|keyObjectInspectors
init|=
operator|new
name|ObjectInspector
index|[
name|keyColumns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|ObjectInspector
index|[]
name|currentKeyObjectInspectors
init|=
operator|new
name|ObjectInspector
index|[
name|keyColumns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|keyWrapper
operator|=
name|initObjectInspectors
argument_list|(
name|hconf
argument_list|,
name|keyColumns
argument_list|,
name|rowInspector
argument_list|,
name|keyObjectInspectors
argument_list|,
name|currentKeyObjectInspectors
argument_list|)
expr_stmt|;
name|ObjectInspector
index|[]
name|partitionKeyObjectInspectors
init|=
operator|new
name|ObjectInspector
index|[
name|numPartitionKeys
index|]
decl_stmt|;
name|ObjectInspector
index|[]
name|partitionCurrentKeyObjectInspectors
init|=
operator|new
name|ObjectInspector
index|[
name|numPartitionKeys
index|]
decl_stmt|;
name|partitionKeyWrapper
operator|=
name|initObjectInspectors
argument_list|(
name|hconf
argument_list|,
name|conf
operator|.
name|getPartitionKeyColumns
argument_list|()
argument_list|,
name|rowInspector
argument_list|,
name|partitionKeyObjectInspectors
argument_list|,
name|partitionCurrentKeyObjectInspectors
argument_list|)
expr_stmt|;
name|keyWrapperComparator
operator|=
operator|new
name|KeyWrapperComparator
argument_list|(
name|keyObjectInspectors
argument_list|,
name|currentKeyObjectInspectors
argument_list|,
name|columnSortOrder
argument_list|,
name|nullSortOrder
argument_list|)
expr_stmt|;
name|this
operator|.
name|topNKeyFilters
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|disabledPartitions
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|private
name|KeyWrapper
name|initObjectInspectors
parameter_list|(
name|Configuration
name|hconf
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyColumns
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|,
name|ObjectInspector
index|[]
name|keyObjectInspectors
parameter_list|,
name|ObjectInspector
index|[]
name|currentKeyObjectInspectors
parameter_list|)
throws|throws
name|HiveException
block|{
name|ExprNodeEvaluator
index|[]
name|keyFields
init|=
operator|new
name|ExprNodeEvaluator
index|[
name|keyColumns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyColumns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeDesc
name|key
init|=
name|keyColumns
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|keyFields
index|[
name|i
index|]
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hconf
argument_list|)
expr_stmt|;
name|keyObjectInspectors
index|[
name|i
index|]
operator|=
name|keyFields
index|[
name|i
index|]
operator|.
name|initialize
argument_list|(
name|rowInspector
argument_list|)
expr_stmt|;
name|currentKeyObjectInspectors
index|[
name|i
index|]
operator|=
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|keyObjectInspectors
index|[
name|i
index|]
argument_list|,
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
block|}
name|KeyWrapperFactory
name|keyWrapperFactory
init|=
operator|new
name|KeyWrapperFactory
argument_list|(
name|keyFields
argument_list|,
name|keyObjectInspectors
argument_list|,
name|currentKeyObjectInspectors
argument_list|)
decl_stmt|;
return|return
name|keyWrapperFactory
operator|.
name|getKeyWrapper
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|disabledPartitions
operator|.
name|isEmpty
argument_list|()
operator|&&
name|disabledPartitions
operator|.
name|size
argument_list|()
operator|==
name|topNKeyFilters
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// all filters are disabled due to efficiency check
name|forward
argument_list|(
name|row
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
return|return;
block|}
name|partitionKeyWrapper
operator|.
name|getNewKey
argument_list|(
name|row
argument_list|,
name|inputObjInspectors
index|[
name|tag
index|]
argument_list|)
expr_stmt|;
name|partitionKeyWrapper
operator|.
name|setHashKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|disabledPartitions
operator|.
name|contains
argument_list|(
name|partitionKeyWrapper
argument_list|)
condition|)
block|{
comment|// filter for this partition is disabled
name|forward
argument_list|(
name|row
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
return|return;
block|}
name|TopNKeyFilter
name|topNKeyFilter
init|=
name|topNKeyFilters
operator|.
name|get
argument_list|(
name|partitionKeyWrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|topNKeyFilter
operator|==
literal|null
operator|&&
name|topNKeyFilters
operator|.
name|size
argument_list|()
operator|<
name|conf
operator|.
name|getMaxNumberOfPartitions
argument_list|()
condition|)
block|{
name|topNKeyFilter
operator|=
operator|new
name|TopNKeyFilter
argument_list|(
name|conf
operator|.
name|getTopN
argument_list|()
argument_list|,
name|keyWrapperComparator
argument_list|)
expr_stmt|;
name|topNKeyFilters
operator|.
name|put
argument_list|(
name|partitionKeyWrapper
operator|.
name|copyKey
argument_list|()
argument_list|,
name|topNKeyFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|topNKeyFilter
operator|==
literal|null
condition|)
block|{
name|forward
argument_list|(
name|row
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyWrapper
operator|.
name|getNewKey
argument_list|(
name|row
argument_list|,
name|inputObjInspectors
index|[
name|tag
index|]
argument_list|)
expr_stmt|;
name|keyWrapper
operator|.
name|setHashKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|topNKeyFilter
operator|.
name|canForward
argument_list|(
name|keyWrapper
argument_list|)
condition|)
block|{
name|forward
argument_list|(
name|row
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|runTimeNumRows
operator|%
name|conf
operator|.
name|getCheckEfficiencyNumRows
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// check the efficiency at every nth rows
name|checkTopNFilterEfficiency
argument_list|(
name|topNKeyFilters
argument_list|,
name|disabledPartitions
argument_list|,
name|conf
operator|.
name|getEfficiencyThreshold
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
specifier|final
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|topNKeyFilters
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|TopNKeyFilter
name|filter
init|=
name|topNKeyFilters
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing TopNKeyFilter: {}"
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|filter
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing {} TopNKeyFilters"
argument_list|,
name|topNKeyFilters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TopNKeyFilter
name|each
range|:
name|topNKeyFilters
operator|.
name|values
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing TopNKeyFilter: {}"
argument_list|,
name|each
argument_list|)
expr_stmt|;
name|each
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|topNKeyFilters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disabledPartitions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|super
operator|.
name|closeOp
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"TNK"
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|TOPNKEY
return|;
block|}
comment|// Because a TopNKeyOperator works like a FilterOperator with top n key condition, its properties
comment|// for optimizers has same values. Following methods are same with FilterOperator;
comment|// supportSkewJoinOptimization, columnNamesRowResolvedCanBeObtained,
comment|// supportAutomaticSortMergeJoin, and supportUnionRemoveOptimization.
annotation|@
name|Override
specifier|public
name|boolean
name|supportSkewJoinOptimization
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|columnNamesRowResolvedCanBeObtained
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportAutomaticSortMergeJoin
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportUnionRemoveOptimization
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

