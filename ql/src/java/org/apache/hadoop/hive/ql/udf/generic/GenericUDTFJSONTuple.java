begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParser
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|type
operator|.
name|TypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|type
operator|.
name|JavaType
import|;
end_import

begin_comment
comment|/**  * GenericUDTFJSONTuple: this  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"json_tuple"
argument_list|,
name|value
operator|=
literal|"_FUNC_(jsonStr, p1, p2, ..., pn) - like get_json_object, but it takes multiple names and return a tuple. "
operator|+
literal|"All the input parameters and output column types are string."
argument_list|)
specifier|public
class|class
name|GenericUDTFJSONTuple
extends|extends
name|GenericUDTF
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GenericUDTFJSONTuple
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|JsonFactory
name|JSON_FACTORY
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
static|static
block|{
comment|// Allows for unescaped ASCII control characters in JSON values
name|JSON_FACTORY
operator|.
name|enable
argument_list|(
name|Feature
operator|.
name|ALLOW_UNQUOTED_CONTROL_CHARS
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|ObjectMapper
name|MAPPER
init|=
operator|new
name|ObjectMapper
argument_list|(
name|JSON_FACTORY
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|JavaType
name|MAP_TYPE
init|=
name|TypeFactory
operator|.
name|fromClass
argument_list|(
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|numCols
decl_stmt|;
comment|// number of output columns
name|String
index|[]
name|paths
decl_stmt|;
comment|// array of path expressions, each of which corresponds to a column
name|Text
index|[]
name|retCols
decl_stmt|;
comment|// array of returned column values
name|Text
index|[]
name|cols
decl_stmt|;
comment|// object pool of non-null Text, avoid creating objects all the time
name|Object
index|[]
name|nullCols
decl_stmt|;
comment|// array of null column values
name|ObjectInspector
index|[]
name|inputOIs
decl_stmt|;
comment|// input ObjectInspectors
name|boolean
name|pathParsed
init|=
literal|false
decl_stmt|;
name|boolean
name|seenErrors
init|=
literal|false
decl_stmt|;
comment|//An LRU cache using a linked hash map
specifier|static
class|class
name|HashCache
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|int
name|CACHE_SIZE
init|=
literal|16
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|INIT_SIZE
init|=
literal|32
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|LOAD_FACTOR
init|=
literal|0.6f
decl_stmt|;
name|HashCache
parameter_list|()
block|{
name|super
argument_list|(
name|INIT_SIZE
argument_list|,
name|LOAD_FACTOR
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>
name|CACHE_SIZE
return|;
block|}
block|}
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonObjectCache
init|=
operator|new
name|HashCache
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|HiveException
block|{   }
annotation|@
name|Override
specifier|public
name|StructObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|args
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|inputOIs
operator|=
name|args
expr_stmt|;
name|numCols
operator|=
name|args
operator|.
name|length
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|numCols
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"json_tuple() takes at least two arguments: "
operator|+
literal|"the json string and a path expression"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
operator|||
operator|!
name|args
index|[
name|i
index|]
operator|.
name|getTypeName
argument_list|()
operator|.
name|equals
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"json_tuple()'s arguments have to be string type"
argument_list|)
throw|;
block|}
block|}
name|seenErrors
operator|=
literal|false
expr_stmt|;
name|pathParsed
operator|=
literal|false
expr_stmt|;
name|paths
operator|=
operator|new
name|String
index|[
name|numCols
index|]
expr_stmt|;
name|cols
operator|=
operator|new
name|Text
index|[
name|numCols
index|]
expr_stmt|;
name|retCols
operator|=
operator|new
name|Text
index|[
name|numCols
index|]
expr_stmt|;
name|nullCols
operator|=
operator|new
name|Object
index|[
name|numCols
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
operator|++
name|i
control|)
block|{
name|cols
index|[
name|i
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|retCols
index|[
name|i
index|]
operator|=
name|cols
index|[
name|i
index|]
expr_stmt|;
name|nullCols
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
comment|// construct output object inspector
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|numCols
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldOIs
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|numCols
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
operator|++
name|i
control|)
block|{
comment|// column name can be anything since it will be named by UDTF as clause
name|fieldNames
operator|.
name|add
argument_list|(
literal|"c"
operator|+
name|i
argument_list|)
expr_stmt|;
comment|// all returned type will be Text
name|fieldOIs
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
block|}
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldOIs
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
index|[]
name|o
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|o
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|forward
argument_list|(
name|nullCols
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// get the path expression for the 1st row only
if|if
condition|(
operator|!
name|pathParsed
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
operator|++
name|i
control|)
block|{
name|paths
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|StringObjectInspector
operator|)
name|inputOIs
index|[
name|i
operator|+
literal|1
index|]
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|pathParsed
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|jsonStr
init|=
operator|(
operator|(
name|StringObjectInspector
operator|)
name|inputOIs
index|[
literal|0
index|]
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonStr
operator|==
literal|null
condition|)
block|{
name|forward
argument_list|(
name|nullCols
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Object
name|jsonObj
init|=
name|jsonObjectCache
operator|.
name|get
argument_list|(
name|jsonStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonObj
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|jsonObj
operator|=
name|MAPPER
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|MAP_TYPE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|reportInvalidJson
argument_list|(
name|jsonStr
argument_list|)
expr_stmt|;
name|forward
argument_list|(
name|nullCols
argument_list|)
expr_stmt|;
return|return;
block|}
name|jsonObjectCache
operator|.
name|put
argument_list|(
name|jsonStr
argument_list|,
name|jsonObj
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|jsonObj
operator|instanceof
name|Map
operator|)
condition|)
block|{
name|reportInvalidJson
argument_list|(
name|jsonStr
argument_list|)
expr_stmt|;
name|forward
argument_list|(
name|nullCols
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|retCols
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|retCols
index|[
name|i
index|]
operator|=
name|cols
index|[
name|i
index|]
expr_stmt|;
comment|// use the object pool rather than creating a new object
block|}
name|Object
name|extractObject
init|=
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|jsonObj
operator|)
operator|.
name|get
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|extractObject
operator|instanceof
name|Map
operator|||
name|extractObject
operator|instanceof
name|List
condition|)
block|{
name|retCols
index|[
name|i
index|]
operator|.
name|set
argument_list|(
name|MAPPER
operator|.
name|writeValueAsString
argument_list|(
name|extractObject
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extractObject
operator|!=
literal|null
condition|)
block|{
name|retCols
index|[
name|i
index|]
operator|.
name|set
argument_list|(
name|extractObject
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retCols
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|forward
argument_list|(
name|retCols
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"JSON parsing/evaluation exception"
operator|+
name|e
argument_list|)
expr_stmt|;
name|forward
argument_list|(
name|nullCols
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"json_tuple"
return|;
block|}
specifier|private
name|void
name|reportInvalidJson
parameter_list|(
name|String
name|jsonStr
parameter_list|)
block|{
if|if
condition|(
operator|!
name|seenErrors
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The input is not a valid JSON string: "
operator|+
name|jsonStr
operator|+
literal|". Skipping such error messages in the future."
argument_list|)
expr_stmt|;
name|seenErrors
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

