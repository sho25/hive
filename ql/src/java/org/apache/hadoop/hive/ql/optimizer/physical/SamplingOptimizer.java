begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|MapRedTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceWork
import|;
end_import

begin_comment
comment|/**  * Mark final MapredWork for ORDER BY to use sampling and set number of reduce task as -1  */
end_comment

begin_class
specifier|public
class|class
name|SamplingOptimizer
implements|implements
name|PhysicalPlanResolver
block|{
specifier|public
name|PhysicalContext
name|resolve
parameter_list|(
name|PhysicalContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
for|for
control|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
range|:
name|pctx
operator|.
name|getRootTasks
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|task
operator|instanceof
name|MapRedTask
operator|)
operator|||
operator|!
operator|(
operator|(
name|MapRedTask
operator|)
name|task
operator|)
operator|.
name|getWork
argument_list|()
operator|.
name|isFinalMapRed
argument_list|()
condition|)
block|{
continue|continue;
comment|// this could be replaced by bucketing on RS + bucketed fetcher for next MR
block|}
name|MapredWork
name|mrWork
init|=
operator|(
operator|(
name|MapRedTask
operator|)
name|task
operator|)
operator|.
name|getWork
argument_list|()
decl_stmt|;
name|MapWork
name|mapWork
init|=
name|mrWork
operator|.
name|getMapWork
argument_list|()
decl_stmt|;
name|ReduceWork
name|reduceWork
init|=
name|mrWork
operator|.
name|getReduceWork
argument_list|()
decl_stmt|;
if|if
condition|(
name|reduceWork
operator|==
literal|null
operator|||
name|reduceWork
operator|.
name|getNumReduceTasks
argument_list|()
operator|!=
literal|1
operator|||
name|mapWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|mapWork
operator|.
name|getSamplingType
argument_list|()
operator|>
literal|0
operator|||
name|reduceWork
operator|.
name|getReducer
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// GROUPBY operator in reducer may not be processed in parallel. Skip optimizing.
if|if
condition|(
name|OperatorUtils
operator|.
name|findSingleOperator
argument_list|(
name|reduceWork
operator|.
name|getReducer
argument_list|()
argument_list|,
name|GroupByOperator
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|Operator
argument_list|<
name|?
argument_list|>
name|operator
init|=
name|mapWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|operator
operator|instanceof
name|TableScanOperator
operator|)
condition|)
block|{
continue|continue;
block|}
name|ReduceSinkOperator
name|child
init|=
name|OperatorUtils
operator|.
name|findSingleOperator
argument_list|(
name|operator
argument_list|,
name|ReduceSinkOperator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
operator|||
name|child
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
operator|!=
literal|1
operator|||
operator|!
name|child
operator|.
name|getConf
argument_list|()
operator|.
name|getPartitionCols
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|child
operator|.
name|getConf
argument_list|()
operator|.
name|setNumReducers
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|reduceWork
operator|.
name|setNumReduceTasks
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|setSamplingType
argument_list|(
name|MapWork
operator|.
name|SAMPLING_ON_START
argument_list|)
expr_stmt|;
block|}
return|return
name|pctx
return|;
block|}
block|}
end_class

end_unit

