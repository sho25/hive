begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|wrapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|wrapper
operator|.
name|VectorHashKeyWrapperBase
operator|.
name|HashContext
import|;
end_import

begin_class
specifier|public
class|class
name|VectorHashKeyWrapperFactory
block|{
specifier|public
specifier|static
name|VectorHashKeyWrapperBase
name|allocate
parameter_list|(
name|HashContext
name|ctx
parameter_list|,
name|int
name|longValuesCount
parameter_list|,
name|int
name|doubleValuesCount
parameter_list|,
name|int
name|byteValuesCount
parameter_list|,
name|int
name|decimalValuesCount
parameter_list|,
name|int
name|timestampValuesCount
parameter_list|,
name|int
name|intervalDayTimeValuesCount
parameter_list|,
name|int
name|keyCount
parameter_list|)
block|{
specifier|final
name|int
name|nonLongBytesCount
init|=
name|doubleValuesCount
operator|+
name|decimalValuesCount
operator|+
name|timestampValuesCount
operator|+
name|intervalDayTimeValuesCount
decl_stmt|;
comment|/*      * Add more special cases as desired.      * FUTURE: Consider writing a init time "classifier" that returns an enum so we don't have to      * FUTURE: analyze these counts over and over...      */
if|if
condition|(
name|nonLongBytesCount
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|byteValuesCount
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|longValuesCount
operator|==
literal|1
condition|)
block|{
return|return
operator|new
name|VectorHashKeyWrapperSingleLong
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|longValuesCount
operator|==
literal|2
condition|)
block|{
return|return
operator|new
name|VectorHashKeyWrapperTwoLong
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|longValuesCount
operator|==
literal|0
condition|)
block|{
return|return
name|VectorHashKeyWrapperEmpty
operator|.
name|EMPTY_KEY_WRAPPER
return|;
block|}
block|}
block|}
comment|// Fall through to use the general wrapper.
return|return
operator|new
name|VectorHashKeyWrapperGeneral
argument_list|(
name|ctx
argument_list|,
name|longValuesCount
argument_list|,
name|doubleValuesCount
argument_list|,
name|byteValuesCount
argument_list|,
name|decimalValuesCount
argument_list|,
name|timestampValuesCount
argument_list|,
name|intervalDayTimeValuesCount
argument_list|,
name|keyCount
argument_list|)
return|;
block|}
block|}
end_class

end_unit

