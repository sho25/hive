begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTrait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistributionTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
operator|.
name|TargetMapping
import|;
end_import

begin_class
specifier|public
class|class
name|HiveRelDistribution
implements|implements
name|RelDistribution
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|keys
decl_stmt|;
name|RelDistribution
operator|.
name|Type
name|type
decl_stmt|;
specifier|public
name|HiveRelDistribution
parameter_list|(
name|Type
name|type
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|keys
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|keys
operator|=
name|keys
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelTraitDef
argument_list|<
name|?
argument_list|>
name|getTraitDef
parameter_list|()
block|{
return|return
name|RelDistributionTraitDef
operator|.
name|INSTANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|register
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{    }
annotation|@
name|Override
specifier|public
name|boolean
name|satisfies
parameter_list|(
name|RelTrait
name|trait
parameter_list|)
block|{
if|if
condition|(
name|trait
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
switch|switch
condition|(
operator|(
operator|(
name|RelDistribution
operator|)
name|trait
operator|)
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HASH_DISTRIBUTED
case|:
return|return
name|this
operator|.
name|getKeys
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|RelDistribution
operator|)
name|trait
operator|)
operator|.
name|getKeys
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Other distributions are not used yet."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RelDistribution
name|apply
parameter_list|(
name|TargetMapping
name|mapping
parameter_list|)
block|{
if|if
condition|(
name|keys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|HiveRelDistribution
argument_list|(
name|type
argument_list|,
name|keys
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getKeys
parameter_list|()
block|{
return|return
name|keys
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
end_class

end_unit

