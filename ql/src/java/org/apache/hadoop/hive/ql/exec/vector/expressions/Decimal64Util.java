begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|RoundUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_comment
comment|/**  * Utility functions for vector operations on decimal64 values.  */
end_comment

begin_class
specifier|public
class|class
name|Decimal64Util
block|{
specifier|public
specifier|static
name|long
name|getDecimal64AbsMaxFromDecimalTypeString
parameter_list|(
name|String
name|typeString
parameter_list|)
block|{
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeString
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|typeInfo
operator|instanceof
name|DecimalTypeInfo
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected decimal type but found "
operator|+
name|typeInfo
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|int
name|precision
init|=
name|decimalTypeInfo
operator|.
name|precision
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|HiveDecimalWritable
operator|.
name|isPrecisionDecimal64
argument_list|(
name|precision
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected decimal type "
operator|+
name|typeInfo
operator|.
name|toString
argument_list|()
operator|+
literal|" to have a decimal64 precision (i.e.<= "
operator|+
name|HiveDecimalWritable
operator|.
name|DECIMAL64_DECIMAL_DIGITS
operator|+
literal|")"
argument_list|)
throw|;
block|}
return|return
name|HiveDecimalWritable
operator|.
name|getDecimal64AbsMax
argument_list|(
name|precision
argument_list|)
return|;
block|}
block|}
end_class

end_unit

