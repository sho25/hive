begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|database
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_comment
comment|/**  * Operation process of describing a database.  */
end_comment

begin_class
specifier|public
class|class
name|DescDatabaseOperation
extends|extends
name|DDLOperation
block|{
specifier|private
specifier|final
name|DescDatabaseDesc
name|desc
decl_stmt|;
specifier|public
name|DescDatabaseOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|DescDatabaseDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
try|try
init|(
name|DataOutputStream
name|outStream
init|=
name|getOutputStream
argument_list|(
operator|new
name|Path
argument_list|(
name|desc
operator|.
name|getResFile
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|Database
name|database
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|desc
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|database
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|DATABASE_NOT_EXISTS
argument_list|,
name|desc
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|isExt
argument_list|()
condition|)
block|{
name|params
operator|=
name|database
operator|.
name|getParameters
argument_list|()
expr_stmt|;
block|}
comment|// If this is a q-test, let's order the params map (lexicographically) by
comment|// key. This is to get consistent param ordering between Java7 and Java8.
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
operator|&&
name|params
operator|!=
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
name|String
name|location
init|=
name|database
operator|.
name|getLocationUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
condition|)
block|{
name|location
operator|=
literal|"location/in/test"
expr_stmt|;
block|}
name|PrincipalType
name|ownerType
init|=
name|database
operator|.
name|getOwnerType
argument_list|()
decl_stmt|;
name|context
operator|.
name|getFormatter
argument_list|()
operator|.
name|showDatabaseDescription
argument_list|(
name|outStream
argument_list|,
name|database
operator|.
name|getName
argument_list|()
argument_list|,
name|database
operator|.
name|getDescription
argument_list|()
argument_list|,
name|location
argument_list|,
name|database
operator|.
name|getOwnerName
argument_list|()
argument_list|,
operator|(
literal|null
operator|==
name|ownerType
operator|)
condition|?
literal|null
else|:
name|ownerType
operator|.
name|name
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|GENERIC_ERROR
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

