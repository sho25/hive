begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedInputFormatInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatchCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConfigurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_comment
comment|/**  * NullRowsInputFormat outputs null rows, maximum 100.  */
end_comment

begin_class
specifier|public
class|class
name|NullRowsInputFormat
implements|implements
name|InputFormat
argument_list|<
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
implements|,
name|JobConfigurable
implements|,
name|VectorizedInputFormatInterface
block|{
specifier|static
specifier|final
name|int
name|MAX_ROW
init|=
literal|100
decl_stmt|;
comment|// to prevent infinite loop
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NullRowsRecordReader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
class|class
name|DummyInputSplit
extends|extends
name|FileSplit
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// Serialization ctor.
specifier|private
name|DummyInputSplit
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DummyInputSplit
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"null"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
specifier|static
class|class
name|NullRowsRecordReader
implements|implements
name|RecordReader
block|{
specifier|private
name|int
name|counter
decl_stmt|;
specifier|protected
specifier|final
name|VectorizedRowBatchCtx
name|rbCtx
decl_stmt|;
specifier|private
specifier|final
name|Object
index|[]
name|partitionValues
decl_stmt|;
specifier|private
name|boolean
name|addPartitionCols
init|=
literal|true
decl_stmt|;
specifier|public
name|NullRowsRecordReader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|InputSplit
name|split
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isVectorMode
init|=
name|Utilities
operator|.
name|getIsVectorized
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" in "
operator|+
operator|(
name|isVectorMode
condition|?
literal|""
else|:
literal|"non-"
operator|)
operator|+
literal|"vector mode"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isVectorMode
condition|)
block|{
name|rbCtx
operator|=
name|Utilities
operator|.
name|getVectorizedRowBatchCtx
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|partitionColumnCount
init|=
name|rbCtx
operator|.
name|getPartitionColumnCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|partitionColumnCount
operator|>
literal|0
condition|)
block|{
name|partitionValues
operator|=
operator|new
name|Object
index|[
name|partitionColumnCount
index|]
expr_stmt|;
name|VectorizedRowBatchCtx
operator|.
name|getPartitionValues
argument_list|(
name|rbCtx
argument_list|,
name|conf
argument_list|,
operator|(
name|FileSplit
operator|)
name|split
argument_list|,
name|partitionValues
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|partitionValues
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|rbCtx
operator|=
literal|null
expr_stmt|;
name|partitionValues
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|NullWritable
name|createKey
parameter_list|()
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|createValue
parameter_list|()
block|{
return|return
name|rbCtx
operator|==
literal|null
condition|?
name|NullWritable
operator|.
name|get
argument_list|()
else|:
name|rbCtx
operator|.
name|createVectorizedRowBatch
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|counter
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|float
operator|)
name|counter
operator|/
name|MAX_ROW
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|Object
name|arg0
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rbCtx
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|counter
operator|>=
name|MAX_ROW
condition|)
return|return
literal|false
return|;
name|makeNullVrb
argument_list|(
name|value
argument_list|,
name|MAX_ROW
argument_list|)
expr_stmt|;
name|counter
operator|=
name|MAX_ROW
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|counter
operator|++
operator|<
name|MAX_ROW
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|makeNullVrb
parameter_list|(
name|Object
name|value
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|VectorizedRowBatch
name|vrb
init|=
operator|(
name|VectorizedRowBatch
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|addPartitionCols
condition|)
block|{
if|if
condition|(
name|partitionValues
operator|!=
literal|null
condition|)
block|{
name|rbCtx
operator|.
name|addPartitionColsToBatch
argument_list|(
name|vrb
argument_list|,
name|partitionValues
argument_list|)
expr_stmt|;
block|}
name|addPartitionCols
operator|=
literal|false
expr_stmt|;
block|}
name|vrb
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|vrb
operator|.
name|selectedInUse
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rbCtx
operator|.
name|getDataColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ColumnVector
name|cv
init|=
name|vrb
operator|.
name|cols
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|cv
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|cv
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|cv
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|cv
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|Reporter
name|arg2
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|NullRowsRecordReader
argument_list|(
name|conf
argument_list|,
name|split
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|int
name|arg1
parameter_list|)
throws|throws
name|IOException
block|{
comment|// It's important to read the correct nulls! (in truth, the path is needed for SplitGrouper).
name|String
index|[]
name|paths
init|=
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|FileInputFormat
operator|.
name|INPUT_DIR
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|paths
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot find path in conf"
argument_list|)
throw|;
name|InputSplit
index|[]
name|result
init|=
operator|new
name|InputSplit
index|[
name|paths
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|new
name|DummyInputSplit
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using null rows input format"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

