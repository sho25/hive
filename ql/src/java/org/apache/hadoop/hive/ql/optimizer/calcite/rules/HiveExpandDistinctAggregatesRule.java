begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelColumnOrigin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|RelOptHiveTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveAggregate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Planner rule that expands distinct aggregates  * (such as {@code COUNT(DISTINCT x)}) from a  * {@link org.apache.calcite.rel.core.Aggregate}.  *  *<p>How this is done depends upon the arguments to the function. If all  * functions have the same argument  * (e.g. {@code COUNT(DISTINCT x), SUM(DISTINCT x)} both have the argument  * {@code x}) then one extra {@link org.apache.calcite.rel.core.Aggregate} is  * sufficient.  *  *<p>If there are multiple arguments  * (e.g. {@code COUNT(DISTINCT x), COUNT(DISTINCT y)})  * the rule creates separate {@code Aggregate}s and combines using a  * {@link org.apache.calcite.rel.core.Join}.  */
end_comment

begin_comment
comment|// Stripped down version of org.apache.calcite.rel.rules.AggregateExpandDistinctAggregatesRule
end_comment

begin_comment
comment|// This is adapted for Hive, but should eventually be deleted from Hive and make use of above.
end_comment

begin_class
specifier|public
specifier|final
class|class
name|HiveExpandDistinctAggregatesRule
extends|extends
name|RelOptRule
block|{
comment|//~ Static fields/initializers ---------------------------------------------
comment|/** The default instance of the rule; operates only on logical expressions. */
specifier|public
specifier|static
specifier|final
name|HiveExpandDistinctAggregatesRule
name|INSTANCE
init|=
operator|new
name|HiveExpandDistinctAggregatesRule
argument_list|(
name|HiveAggregate
operator|.
name|class
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_PROJECT_FACTORY
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|RelFactories
operator|.
name|ProjectFactory
name|projFactory
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|HiveExpandDistinctAggregatesRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Aggregate
argument_list|>
name|clazz
parameter_list|,
name|RelFactories
operator|.
name|ProjectFactory
name|projectFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|clazz
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|projFactory
operator|=
name|projectFactory
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|aggregate
operator|.
name|containsDistinctCall
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Find all of the agg expressions. We use a LinkedHashSet to ensure
comment|// determinism.
name|int
name|nonDistinctCount
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|argListSets
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
operator|++
name|nonDistinctCount
expr_stmt|;
continue|continue;
block|}
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|argList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|arg
range|:
name|aggCall
operator|.
name|getArgList
argument_list|()
control|)
block|{
name|argList
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
name|argListSets
operator|.
name|add
argument_list|(
name|argList
argument_list|)
expr_stmt|;
block|}
name|Util
operator|.
name|permAssert
argument_list|(
name|argListSets
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|,
literal|"containsDistinctCall lied"
argument_list|)
expr_stmt|;
comment|// If all of the agg expressions are distinct and have the same
comment|// arguments then we can use a more efficient form.
if|if
condition|(
operator|(
name|nonDistinctCount
operator|==
literal|0
operator|)
operator|&&
operator|(
name|argListSets
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
condition|)
block|{
for|for
control|(
name|Integer
name|arg
range|:
name|argListSets
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|RelColumnOrigin
argument_list|>
name|colOrigs
init|=
name|RelMetadataQuery
operator|.
name|getColumnOrigins
argument_list|(
name|aggregate
argument_list|,
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|colOrigs
condition|)
block|{
for|for
control|(
name|RelColumnOrigin
name|colOrig
range|:
name|colOrigs
control|)
block|{
name|RelOptHiveTable
name|hiveTbl
init|=
operator|(
name|RelOptHiveTable
operator|)
name|colOrig
operator|.
name|getOriginTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiveTbl
operator|.
name|getPartColInfoMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|colOrig
operator|.
name|getOriginColumnOrdinal
argument_list|()
argument_list|)
condition|)
block|{
comment|// Encountered partitioning column, this will be better handled by MetadataOnly optimizer.
return|return;
block|}
block|}
block|}
block|}
name|RelNode
name|converted
init|=
name|convertMonopole
argument_list|(
name|aggregate
argument_list|,
name|argListSets
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|converted
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|/**    * Converts an aggregate relational expression that contains just one    * distinct aggregate function (or perhaps several over the same arguments)    * and no non-distinct aggregate functions.    */
specifier|private
name|RelNode
name|convertMonopole
parameter_list|(
name|Aggregate
name|aggregate
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
parameter_list|)
block|{
comment|// For example,
comment|//    SELECT deptno, COUNT(DISTINCT sal), SUM(DISTINCT sal)
comment|//    FROM emp
comment|//    GROUP BY deptno
comment|//
comment|// becomes
comment|//
comment|//    SELECT deptno, COUNT(distinct_sal), SUM(distinct_sal)
comment|//    FROM (
comment|//      SELECT DISTINCT deptno, sal AS distinct_sal
comment|//      FROM EMP GROUP BY deptno)
comment|//    GROUP BY deptno
comment|// Project the columns of the GROUP BY plus the arguments
comment|// to the agg function.
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sourceOf
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Aggregate
name|distinct
init|=
name|createSelectDistinct
argument_list|(
name|aggregate
argument_list|,
name|argList
argument_list|,
name|sourceOf
argument_list|)
decl_stmt|;
comment|// Create an aggregate on top, with the new aggregate list.
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newAggCalls
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
decl_stmt|;
name|rewriteAggCalls
argument_list|(
name|newAggCalls
argument_list|,
name|argList
argument_list|,
name|sourceOf
argument_list|)
expr_stmt|;
specifier|final
name|int
name|cardinality
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|cardinality
argument_list|()
decl_stmt|;
return|return
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|distinct
argument_list|,
name|aggregate
operator|.
name|indicator
argument_list|,
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|cardinality
argument_list|)
argument_list|,
literal|null
argument_list|,
name|newAggCalls
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|rewriteAggCalls
parameter_list|(
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newAggCalls
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sourceOf
parameter_list|)
block|{
comment|// Rewrite the agg calls. Each distinct agg becomes a non-distinct call
comment|// to the corresponding field from the right; for example,
comment|// "COUNT(DISTINCT e.sal)" becomes   "COUNT(distinct_e.sal)".
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newAggCalls
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|AggregateCall
name|aggCall
init|=
name|newAggCalls
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Ignore agg calls which are not distinct or have the wrong set
comment|// arguments. If we're rewriting aggs whose args are {sal}, we will
comment|// rewrite COUNT(DISTINCT sal) and SUM(DISTINCT sal) but ignore
comment|// COUNT(DISTINCT gender) or SUM(sal).
if|if
condition|(
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|equals
argument_list|(
name|argList
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Re-map arguments.
specifier|final
name|int
name|argCount
init|=
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|newArgs
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|argCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|argCount
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|Integer
name|arg
init|=
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|newArgs
operator|.
name|add
argument_list|(
name|sourceOf
operator|.
name|get
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AggregateCall
name|newAggCall
init|=
operator|new
name|AggregateCall
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
literal|false
argument_list|,
name|newArgs
argument_list|,
name|aggCall
operator|.
name|getType
argument_list|()
argument_list|,
name|aggCall
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|newAggCalls
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|newAggCall
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Given an {@link org.apache.calcite.rel.logical.LogicalAggregate}    * and the ordinals of the arguments to a    * particular call to an aggregate function, creates a 'select distinct'    * relational expression which projects the group columns and those    * arguments but nothing else.    *    *<p>For example, given    *    *<blockquote>    *<pre>select f0, count(distinct f1), count(distinct f2)    * from t group by f0</pre>    *</blockquote>    *    * and the arglist    *    *<blockquote>{2}</blockquote>    *    * returns    *    *<blockquote>    *<pre>select distinct f0, f2 from t</pre>    *</blockquote>    *    * '    *    *<p>The<code>sourceOf</code> map is populated with the source of each    * column; in this case sourceOf.get(0) = 0, and sourceOf.get(1) = 2.</p>    *    * @param aggregate Aggregate relational expression    * @param argList   Ordinals of columns to make distinct    * @param sourceOf  Out parameter, is populated with a map of where each    *                  output field came from    * @return Aggregate relational expression which projects the required    * columns    */
specifier|private
specifier|static
name|Aggregate
name|createSelectDistinct
parameter_list|(
name|Aggregate
name|aggregate
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|argList
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|sourceOf
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
argument_list|>
name|projects
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|RexNode
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|child
init|=
name|aggregate
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|childFields
init|=
name|child
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|aggregate
operator|.
name|getGroupSet
argument_list|()
control|)
block|{
name|sourceOf
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|projects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|projects
operator|.
name|add
argument_list|(
name|RexInputRef
operator|.
name|of2
argument_list|(
name|i
argument_list|,
name|childFields
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Integer
name|arg
range|:
name|argList
control|)
block|{
if|if
condition|(
name|sourceOf
operator|.
name|get
argument_list|(
name|arg
argument_list|)
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|sourceOf
operator|.
name|put
argument_list|(
name|arg
argument_list|,
name|projects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|projects
operator|.
name|add
argument_list|(
name|RexInputRef
operator|.
name|of2
argument_list|(
name|arg
argument_list|,
name|childFields
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelNode
name|project
init|=
name|projFactory
operator|.
name|createProject
argument_list|(
name|child
argument_list|,
name|Pair
operator|.
name|left
argument_list|(
name|projects
argument_list|)
argument_list|,
name|Pair
operator|.
name|right
argument_list|(
name|projects
argument_list|)
argument_list|)
decl_stmt|;
comment|// Get the distinct values of the GROUP BY fields and the arguments
comment|// to the agg functions.
return|return
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|project
argument_list|,
literal|false
argument_list|,
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|projects
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|ImmutableList
operator|.
expr|<
name|AggregateCall
operator|>
name|of
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End AggregateExpandDistinctAggregatesRule.java
end_comment

end_unit

