begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A RecordUpdater where the files are stored as ORC.  */
end_comment

begin_class
specifier|public
class|class
name|OrcRecordUpdater
implements|implements
name|RecordUpdater
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OrcRecordUpdater
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ACID_KEY_INDEX_NAME
init|=
literal|"hive.acid.key.index"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ACID_FORMAT
init|=
literal|"_orc_acid_version"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ORC_ACID_VERSION
init|=
literal|0
decl_stmt|;
specifier|final
specifier|static
name|int
name|INSERT_OPERATION
init|=
literal|0
decl_stmt|;
specifier|final
specifier|static
name|int
name|UPDATE_OPERATION
init|=
literal|1
decl_stmt|;
specifier|final
specifier|static
name|int
name|DELETE_OPERATION
init|=
literal|2
decl_stmt|;
specifier|final
specifier|static
name|int
name|OPERATION
init|=
literal|0
decl_stmt|;
specifier|final
specifier|static
name|int
name|ORIGINAL_TRANSACTION
init|=
literal|1
decl_stmt|;
specifier|final
specifier|static
name|int
name|BUCKET
init|=
literal|2
decl_stmt|;
specifier|final
specifier|static
name|int
name|ROW_ID
init|=
literal|3
decl_stmt|;
specifier|final
specifier|static
name|int
name|CURRENT_TRANSACTION
init|=
literal|4
decl_stmt|;
specifier|final
specifier|static
name|int
name|ROW
init|=
literal|5
decl_stmt|;
specifier|final
specifier|static
name|int
name|FIELDS
init|=
literal|6
decl_stmt|;
specifier|final
specifier|static
name|int
name|DELTA_BUFFER_SIZE
init|=
literal|16
operator|*
literal|1024
decl_stmt|;
specifier|final
specifier|static
name|long
name|DELTA_STRIPE_SIZE
init|=
literal|16
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|AcidOutputFormat
operator|.
name|Options
name|options
decl_stmt|;
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Writer
name|writer
decl_stmt|;
specifier|private
specifier|final
name|FSDataOutputStream
name|flushLengths
decl_stmt|;
specifier|private
specifier|final
name|OrcStruct
name|item
decl_stmt|;
specifier|private
specifier|final
name|IntWritable
name|operation
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongWritable
name|currentTransaction
init|=
operator|new
name|LongWritable
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|LongWritable
name|originalTransaction
init|=
operator|new
name|LongWritable
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|IntWritable
name|bucket
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongWritable
name|rowId
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
specifier|private
name|long
name|insertedRows
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|KeyIndexBuilder
name|indexBuilder
init|=
operator|new
name|KeyIndexBuilder
argument_list|()
decl_stmt|;
specifier|static
name|Path
name|getSideFile
parameter_list|(
name|Path
name|main
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|main
operator|+
literal|"_flush_length"
argument_list|)
return|;
block|}
specifier|static
name|int
name|getOperation
parameter_list|(
name|OrcStruct
name|struct
parameter_list|)
block|{
return|return
operator|(
operator|(
name|IntWritable
operator|)
name|struct
operator|.
name|getFieldValue
argument_list|(
name|OPERATION
argument_list|)
operator|)
operator|.
name|get
argument_list|()
return|;
block|}
specifier|static
name|long
name|getCurrentTransaction
parameter_list|(
name|OrcStruct
name|struct
parameter_list|)
block|{
return|return
operator|(
operator|(
name|LongWritable
operator|)
name|struct
operator|.
name|getFieldValue
argument_list|(
name|CURRENT_TRANSACTION
argument_list|)
operator|)
operator|.
name|get
argument_list|()
return|;
block|}
specifier|static
name|long
name|getOriginalTransaction
parameter_list|(
name|OrcStruct
name|struct
parameter_list|)
block|{
return|return
operator|(
operator|(
name|LongWritable
operator|)
name|struct
operator|.
name|getFieldValue
argument_list|(
name|ORIGINAL_TRANSACTION
argument_list|)
operator|)
operator|.
name|get
argument_list|()
return|;
block|}
specifier|static
name|int
name|getBucket
parameter_list|(
name|OrcStruct
name|struct
parameter_list|)
block|{
return|return
operator|(
operator|(
name|IntWritable
operator|)
name|struct
operator|.
name|getFieldValue
argument_list|(
name|BUCKET
argument_list|)
operator|)
operator|.
name|get
argument_list|()
return|;
block|}
specifier|static
name|long
name|getRowId
parameter_list|(
name|OrcStruct
name|struct
parameter_list|)
block|{
return|return
operator|(
operator|(
name|LongWritable
operator|)
name|struct
operator|.
name|getFieldValue
argument_list|(
name|ROW_ID
argument_list|)
operator|)
operator|.
name|get
argument_list|()
return|;
block|}
specifier|static
name|OrcStruct
name|getRow
parameter_list|(
name|OrcStruct
name|struct
parameter_list|)
block|{
if|if
condition|(
name|struct
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|(
name|OrcStruct
operator|)
name|struct
operator|.
name|getFieldValue
argument_list|(
name|ROW
argument_list|)
return|;
block|}
block|}
comment|/**    * An extension to AcidOutputFormat that allows users to add additional    * options.    */
specifier|public
specifier|static
class|class
name|OrcOptions
extends|extends
name|AcidOutputFormat
operator|.
name|Options
block|{
name|OrcFile
operator|.
name|WriterOptions
name|orcOptions
init|=
literal|null
decl_stmt|;
specifier|public
name|OrcOptions
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OrcOptions
name|orcOptions
parameter_list|(
name|OrcFile
operator|.
name|WriterOptions
name|opts
parameter_list|)
block|{
name|this
operator|.
name|orcOptions
operator|=
name|opts
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|OrcFile
operator|.
name|WriterOptions
name|getOrcOptions
parameter_list|()
block|{
return|return
name|orcOptions
return|;
block|}
block|}
comment|/**    * Create an object inspector for the ACID event based on the object inspector    * for the underlying row.    * @param rowInspector the row's object inspector    * @return an object inspector for the event stream    */
specifier|static
name|ObjectInspector
name|createEventSchema
parameter_list|(
name|ObjectInspector
name|rowInspector
parameter_list|)
block|{
name|List
argument_list|<
name|StructField
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|StructField
argument_list|>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|OrcStruct
operator|.
name|Field
argument_list|(
literal|"operation"
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
argument_list|,
name|OPERATION
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|OrcStruct
operator|.
name|Field
argument_list|(
literal|"originalTransaction"
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|,
name|ORIGINAL_TRANSACTION
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|OrcStruct
operator|.
name|Field
argument_list|(
literal|"bucket"
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
argument_list|,
name|BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|OrcStruct
operator|.
name|Field
argument_list|(
literal|"rowId"
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|,
name|ROW_ID
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|OrcStruct
operator|.
name|Field
argument_list|(
literal|"currentTransaction"
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|,
name|CURRENT_TRANSACTION
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|OrcStruct
operator|.
name|Field
argument_list|(
literal|"row"
argument_list|,
name|rowInspector
argument_list|,
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|OrcStruct
operator|.
name|OrcStructInspector
argument_list|(
name|fields
argument_list|)
return|;
block|}
name|OrcRecordUpdater
parameter_list|(
name|Path
name|path
parameter_list|,
name|AcidOutputFormat
operator|.
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|bucket
operator|.
name|set
argument_list|(
name|options
operator|.
name|getBucket
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|AcidUtils
operator|.
name|createFilename
argument_list|(
name|path
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|options
operator|.
name|getFilesystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
name|fs
operator|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|options
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
try|try
block|{
name|FSDataOutputStream
name|strm
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|ACID_FORMAT
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|strm
operator|.
name|writeInt
argument_list|(
name|ORC_ACID_VERSION
argument_list|)
expr_stmt|;
name|strm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to create "
operator|+
name|path
operator|+
literal|"/"
operator|+
name|ACID_FORMAT
operator|+
literal|" with "
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|getMinimumTransactionId
argument_list|()
operator|!=
name|options
operator|.
name|getMaximumTransactionId
argument_list|()
operator|&&
operator|!
name|options
operator|.
name|isWritingBase
argument_list|()
condition|)
block|{
name|flushLengths
operator|=
name|fs
operator|.
name|create
argument_list|(
name|getSideFile
argument_list|(
name|this
operator|.
name|path
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|8
argument_list|,
name|options
operator|.
name|getReporter
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|flushLengths
operator|=
literal|null
expr_stmt|;
block|}
name|OrcFile
operator|.
name|WriterOptions
name|writerOptions
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|options
operator|instanceof
name|OrcOptions
condition|)
block|{
name|writerOptions
operator|=
operator|(
operator|(
name|OrcOptions
operator|)
name|options
operator|)
operator|.
name|getOrcOptions
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|writerOptions
operator|==
literal|null
condition|)
block|{
name|writerOptions
operator|=
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|options
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writerOptions
operator|.
name|fileSystem
argument_list|(
name|fs
argument_list|)
operator|.
name|callback
argument_list|(
name|indexBuilder
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|options
operator|.
name|isWritingBase
argument_list|()
condition|)
block|{
name|writerOptions
operator|.
name|blockPadding
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|writerOptions
operator|.
name|bufferSize
argument_list|(
name|DELTA_BUFFER_SIZE
argument_list|)
expr_stmt|;
name|writerOptions
operator|.
name|stripeSize
argument_list|(
name|DELTA_STRIPE_SIZE
argument_list|)
expr_stmt|;
block|}
name|writerOptions
operator|.
name|inspector
argument_list|(
name|createEventSchema
argument_list|(
name|options
operator|.
name|getInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|this
operator|.
name|path
argument_list|,
name|writerOptions
argument_list|)
expr_stmt|;
name|item
operator|=
operator|new
name|OrcStruct
argument_list|(
name|FIELDS
argument_list|)
expr_stmt|;
name|item
operator|.
name|setFieldValue
argument_list|(
name|OPERATION
argument_list|,
name|operation
argument_list|)
expr_stmt|;
name|item
operator|.
name|setFieldValue
argument_list|(
name|CURRENT_TRANSACTION
argument_list|,
name|currentTransaction
argument_list|)
expr_stmt|;
name|item
operator|.
name|setFieldValue
argument_list|(
name|ORIGINAL_TRANSACTION
argument_list|,
name|originalTransaction
argument_list|)
expr_stmt|;
name|item
operator|.
name|setFieldValue
argument_list|(
name|BUCKET
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|item
operator|.
name|setFieldValue
argument_list|(
name|ROW_ID
argument_list|,
name|rowId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addEvent
parameter_list|(
name|int
name|operation
parameter_list|,
name|long
name|currentTransaction
parameter_list|,
name|long
name|originalTransaction
parameter_list|,
name|long
name|rowId
parameter_list|,
name|Object
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|operation
operator|.
name|set
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentTransaction
operator|.
name|set
argument_list|(
name|currentTransaction
argument_list|)
expr_stmt|;
name|this
operator|.
name|originalTransaction
operator|.
name|set
argument_list|(
name|originalTransaction
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowId
operator|.
name|set
argument_list|(
name|rowId
argument_list|)
expr_stmt|;
name|item
operator|.
name|setFieldValue
argument_list|(
name|OrcRecordUpdater
operator|.
name|ROW
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|indexBuilder
operator|.
name|addKey
argument_list|(
name|originalTransaction
argument_list|,
name|bucket
operator|.
name|get
argument_list|()
argument_list|,
name|rowId
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRow
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|insert
parameter_list|(
name|long
name|currentTransaction
parameter_list|,
name|Object
name|row
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|currentTransaction
operator|.
name|get
argument_list|()
operator|!=
name|currentTransaction
condition|)
block|{
name|insertedRows
operator|=
literal|0
expr_stmt|;
block|}
name|addEvent
argument_list|(
name|INSERT_OPERATION
argument_list|,
name|currentTransaction
argument_list|,
name|currentTransaction
argument_list|,
name|insertedRows
operator|++
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|long
name|currentTransaction
parameter_list|,
name|long
name|originalTransaction
parameter_list|,
name|long
name|rowId
parameter_list|,
name|Object
name|row
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|currentTransaction
operator|.
name|get
argument_list|()
operator|!=
name|currentTransaction
condition|)
block|{
name|insertedRows
operator|=
literal|0
expr_stmt|;
block|}
name|addEvent
argument_list|(
name|UPDATE_OPERATION
argument_list|,
name|currentTransaction
argument_list|,
name|originalTransaction
argument_list|,
name|rowId
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|long
name|currentTransaction
parameter_list|,
name|long
name|originalTransaction
parameter_list|,
name|long
name|rowId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|currentTransaction
operator|.
name|get
argument_list|()
operator|!=
name|currentTransaction
condition|)
block|{
name|insertedRows
operator|=
literal|0
expr_stmt|;
block|}
name|addEvent
argument_list|(
name|DELETE_OPERATION
argument_list|,
name|currentTransaction
argument_list|,
name|originalTransaction
argument_list|,
name|rowId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
comment|// We only support flushes on files with multiple transactions, because
comment|// flushes create significant overhead in HDFS. Record updaters with a
comment|// single transaction should be closed rather than flushed.
if|if
condition|(
name|flushLengths
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Attempting to flush a RecordUpdater on "
operator|+
name|path
operator|+
literal|" with a single transaction."
argument_list|)
throw|;
block|}
name|long
name|len
init|=
name|writer
operator|.
name|writeIntermediateFooter
argument_list|()
decl_stmt|;
name|flushLengths
operator|.
name|writeLong
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|OrcInputFormat
operator|.
name|SHIMS
operator|.
name|hflush
argument_list|(
name|flushLengths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|abort
condition|)
block|{
if|if
condition|(
name|flushLengths
operator|==
literal|null
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flushLengths
operator|!=
literal|null
condition|)
block|{
name|flushLengths
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|getSideFile
argument_list|(
name|path
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|writer
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getStats
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|VisibleForTesting
name|Writer
name|getWriter
parameter_list|()
block|{
return|return
name|writer
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Charset
name|utf8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CharsetDecoder
name|utf8Decoder
init|=
name|utf8
operator|.
name|newDecoder
argument_list|()
decl_stmt|;
specifier|static
name|RecordIdentifier
index|[]
name|parseKeyIndex
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
name|String
index|[]
name|stripes
decl_stmt|;
try|try
block|{
name|ByteBuffer
name|val
init|=
name|reader
operator|.
name|getMetadataValue
argument_list|(
name|OrcRecordUpdater
operator|.
name|ACID_KEY_INDEX_NAME
argument_list|)
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|stripes
operator|=
name|utf8Decoder
operator|.
name|decode
argument_list|(
name|val
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad string encoding for "
operator|+
name|OrcRecordUpdater
operator|.
name|ACID_KEY_INDEX_NAME
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|RecordIdentifier
index|[]
name|result
init|=
operator|new
name|RecordIdentifier
index|[
name|stripes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stripes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|stripes
index|[
name|i
index|]
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|stripes
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|result
index|[
name|i
index|]
operator|=
operator|new
name|RecordIdentifier
argument_list|()
expr_stmt|;
name|result
index|[
name|i
index|]
operator|.
name|setValues
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|static
class|class
name|KeyIndexBuilder
implements|implements
name|OrcFile
operator|.
name|WriterCallback
block|{
name|StringBuilder
name|lastKey
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|long
name|lastTransaction
decl_stmt|;
name|int
name|lastBucket
decl_stmt|;
name|long
name|lastRowId
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|preStripeWrite
parameter_list|(
name|OrcFile
operator|.
name|WriterContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|lastKey
operator|.
name|append
argument_list|(
name|lastTransaction
argument_list|)
expr_stmt|;
name|lastKey
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|lastKey
operator|.
name|append
argument_list|(
name|lastBucket
argument_list|)
expr_stmt|;
name|lastKey
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|lastKey
operator|.
name|append
argument_list|(
name|lastRowId
argument_list|)
expr_stmt|;
name|lastKey
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preFooterWrite
parameter_list|(
name|OrcFile
operator|.
name|WriterContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|context
operator|.
name|getWriter
argument_list|()
operator|.
name|addUserMetadata
argument_list|(
name|OrcRecordUpdater
operator|.
name|ACID_KEY_INDEX_NAME
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|lastKey
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|addKey
parameter_list|(
name|long
name|transaction
parameter_list|,
name|int
name|bucket
parameter_list|,
name|long
name|rowId
parameter_list|)
block|{
name|lastTransaction
operator|=
name|transaction
expr_stmt|;
name|lastBucket
operator|=
name|bucket
expr_stmt|;
name|lastRowId
operator|=
name|rowId
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

