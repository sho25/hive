begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|opconventer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|StrictChecks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|ExprNodeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDescUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|final
class|class
name|HiveOpConverterUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveOpConverterUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HiveOpConverterUtils
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"HiveOpConverterUtils should not be instantiated!"
argument_list|)
throw|;
block|}
specifier|static
name|SelectOperator
name|genReduceSinkAndBacktrackSelect
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|input
parameter_list|,
name|ExprNodeDesc
index|[]
name|keys
parameter_list|,
name|int
name|tag
parameter_list|,
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|partitionCols
parameter_list|,
name|String
name|order
parameter_list|,
name|String
name|nullOrder
parameter_list|,
name|int
name|numReducers
parameter_list|,
name|Operation
name|acidOperation
parameter_list|,
name|HiveConf
name|hiveConf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|keepColNames
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// 1. Generate RS operator
comment|// 1.1 Prune the tableNames, only count the tableNames that are not empty strings
comment|// as empty string in table aliases is only allowed for virtual columns.
name|String
name|tableAlias
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|input
operator|.
name|getSchema
argument_list|()
operator|.
name|getTableNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|tableNames
control|)
block|{
if|if
condition|(
name|tableName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|tableName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|tableAlias
operator|==
literal|null
condition|)
block|{
name|tableAlias
operator|=
name|tableName
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|tableAlias
operator|==
literal|null
operator|||
name|tableAlias
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|tableAlias
operator|=
name|tableName
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|tableName
operator|.
name|equals
argument_list|(
name|tableAlias
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"In CBO return path, genReduceSinkAndBacktrackSelect is expecting only "
operator|+
literal|"one tableAlias but there is more than one"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|tableAlias
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"In CBO return path, genReduceSinkAndBacktrackSelect is expecting only one tableAlias but there is none"
argument_list|)
throw|;
block|}
comment|// 1.2 Now generate RS operator
name|ReduceSinkOperator
name|rsOp
init|=
name|genReduceSink
argument_list|(
name|input
argument_list|,
name|tableAlias
argument_list|,
name|keys
argument_list|,
name|tag
argument_list|,
name|partitionCols
argument_list|,
name|order
argument_list|,
name|nullOrder
argument_list|,
name|numReducers
argument_list|,
name|acidOperation
argument_list|,
name|hiveConf
argument_list|)
decl_stmt|;
comment|// 2. Generate backtrack Select operator
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|descriptors
init|=
name|buildBacktrackFromReduceSink
argument_list|(
name|keepColNames
argument_list|,
name|rsOp
operator|.
name|getConf
argument_list|()
operator|.
name|getOutputKeyColumnNames
argument_list|()
argument_list|,
name|rsOp
operator|.
name|getConf
argument_list|()
operator|.
name|getOutputValueColumnNames
argument_list|()
argument_list|,
name|rsOp
operator|.
name|getValueIndex
argument_list|()
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|SelectDesc
name|selectDesc
init|=
operator|new
name|SelectDesc
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
name|descriptors
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|descriptors
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|cinfoLst
init|=
name|createColInfosSubset
argument_list|(
name|input
argument_list|,
name|keepColNames
argument_list|)
decl_stmt|;
name|SelectOperator
name|selectOp
init|=
operator|(
name|SelectOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|selectDesc
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|cinfoLst
argument_list|)
argument_list|,
name|rsOp
argument_list|)
decl_stmt|;
name|selectOp
operator|.
name|setColumnExprMap
argument_list|(
name|descriptors
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated "
operator|+
name|selectOp
operator|+
literal|" with row schema: ["
operator|+
name|selectOp
operator|.
name|getSchema
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|selectOp
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|static
name|ReduceSinkOperator
name|genReduceSink
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|input
parameter_list|,
name|String
name|tableAlias
parameter_list|,
name|ExprNodeDesc
index|[]
name|keys
parameter_list|,
name|int
name|tag
parameter_list|,
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|partitionCols
parameter_list|,
name|String
name|order
parameter_list|,
name|String
name|nullOrder
parameter_list|,
name|int
name|numReducers
parameter_list|,
name|Operation
name|acidOperation
parameter_list|,
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Operator
name|dummy
init|=
name|Operator
operator|.
name|createDummy
argument_list|()
decl_stmt|;
comment|// dummy for backtracking
name|dummy
operator|.
name|setParentOperators
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|reduceKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|reduceKeysBack
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
comment|// Compute join keys and store in reduceKeys
for|for
control|(
name|ExprNodeDesc
name|key
range|:
name|keys
control|)
block|{
name|reduceKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|reduceKeysBack
operator|.
name|add
argument_list|(
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|key
argument_list|,
name|dummy
argument_list|,
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Walk over the input schema and copy in the output
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|reduceValues
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|reduceValuesBack
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|inputColumns
init|=
name|input
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|outputColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
index|[]
name|index
init|=
operator|new
name|int
index|[
name|inputColumns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputColumns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ColumnInfo
name|colInfo
init|=
name|inputColumns
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|outputColName
init|=
name|colInfo
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
name|ExprNodeColumnDesc
name|expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|colInfo
argument_list|)
decl_stmt|;
comment|// backtrack can be null when input is script operator
name|ExprNodeDesc
name|exprBack
init|=
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|expr
argument_list|,
name|dummy
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|int
name|kindex
init|=
name|exprBack
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|ExprNodeDescUtils
operator|.
name|indexOf
argument_list|(
name|exprBack
argument_list|,
name|reduceKeysBack
argument_list|)
decl_stmt|;
if|if
condition|(
name|kindex
operator|>=
literal|0
condition|)
block|{
name|ColumnInfo
name|newColInfo
init|=
operator|new
name|ColumnInfo
argument_list|(
name|colInfo
argument_list|)
decl_stmt|;
name|newColInfo
operator|.
name|setInternalName
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|KEY
operator|+
literal|".reducesinkkey"
operator|+
name|kindex
argument_list|)
expr_stmt|;
name|newColInfo
operator|.
name|setAlias
argument_list|(
name|outputColName
argument_list|)
expr_stmt|;
name|newColInfo
operator|.
name|setTabAlias
argument_list|(
name|tableAlias
argument_list|)
expr_stmt|;
name|outputColumns
operator|.
name|add
argument_list|(
name|newColInfo
argument_list|)
expr_stmt|;
name|index
index|[
name|i
index|]
operator|=
name|kindex
expr_stmt|;
continue|continue;
block|}
name|int
name|vindex
init|=
name|exprBack
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|ExprNodeDescUtils
operator|.
name|indexOf
argument_list|(
name|exprBack
argument_list|,
name|reduceValuesBack
argument_list|)
decl_stmt|;
if|if
condition|(
name|vindex
operator|>=
literal|0
condition|)
block|{
name|index
index|[
name|i
index|]
operator|=
operator|-
name|vindex
operator|-
literal|1
expr_stmt|;
continue|continue;
block|}
name|index
index|[
name|i
index|]
operator|=
operator|-
name|reduceValues
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
name|reduceValues
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|reduceValuesBack
operator|.
name|add
argument_list|(
name|exprBack
argument_list|)
expr_stmt|;
name|ColumnInfo
name|newColInfo
init|=
operator|new
name|ColumnInfo
argument_list|(
name|colInfo
argument_list|)
decl_stmt|;
name|newColInfo
operator|.
name|setInternalName
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|+
literal|"."
operator|+
name|outputColName
argument_list|)
expr_stmt|;
name|newColInfo
operator|.
name|setAlias
argument_list|(
name|outputColName
argument_list|)
expr_stmt|;
name|newColInfo
operator|.
name|setTabAlias
argument_list|(
name|tableAlias
argument_list|)
expr_stmt|;
name|outputColumns
operator|.
name|add
argument_list|(
name|newColInfo
argument_list|)
expr_stmt|;
name|outputColumnNames
operator|.
name|add
argument_list|(
name|outputColName
argument_list|)
expr_stmt|;
block|}
name|dummy
operator|.
name|setParentOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Use only 1 reducer if no reduce keys
if|if
condition|(
name|reduceKeys
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|numReducers
operator|=
literal|1
expr_stmt|;
comment|// Cartesian product is not supported in strict mode
name|String
name|error
init|=
name|StrictChecks
operator|.
name|checkCartesian
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|error
argument_list|)
throw|;
block|}
block|}
name|ReduceSinkDesc
name|rsDesc
decl_stmt|;
if|if
condition|(
name|order
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rsDesc
operator|=
name|PlanUtils
operator|.
name|getReduceSinkDesc
argument_list|(
name|reduceKeys
argument_list|,
name|reduceValues
argument_list|,
name|outputColumnNames
argument_list|,
literal|false
argument_list|,
name|tag
argument_list|,
name|reduceKeys
operator|.
name|size
argument_list|()
argument_list|,
name|numReducers
argument_list|,
name|acidOperation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rsDesc
operator|=
name|PlanUtils
operator|.
name|getReduceSinkDesc
argument_list|(
name|reduceKeys
argument_list|,
name|reduceValues
argument_list|,
name|outputColumnNames
argument_list|,
literal|false
argument_list|,
name|tag
argument_list|,
name|partitionCols
argument_list|,
name|order
argument_list|,
name|nullOrder
argument_list|,
name|numReducers
argument_list|,
name|acidOperation
argument_list|)
expr_stmt|;
block|}
name|ReduceSinkOperator
name|rsOp
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|rsDesc
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|outputColumns
argument_list|)
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keyColNames
init|=
name|rsDesc
operator|.
name|getOutputKeyColumnNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyColNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|colExprMap
operator|.
name|put
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|KEY
operator|+
literal|"."
operator|+
name|keyColNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|reduceKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|valColNames
init|=
name|rsDesc
operator|.
name|getOutputValueColumnNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valColNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|colExprMap
operator|.
name|put
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|+
literal|"."
operator|+
name|valColNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|reduceValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rsOp
operator|.
name|setValueIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|rsOp
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
name|rsOp
operator|.
name|setInputAliases
argument_list|(
name|input
operator|.
name|getSchema
argument_list|()
operator|.
name|getTableNames
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|input
operator|.
name|getSchema
argument_list|()
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated "
operator|+
name|rsOp
operator|+
literal|" with row schema: ["
operator|+
name|rsOp
operator|.
name|getSchema
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|rsOp
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|buildBacktrackFromReduceSink
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|keepColNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|keyColNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|valueColNames
parameter_list|,
name|int
index|[]
name|index
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|inputOp
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|columnDescriptors
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ColumnInfo
name|info
init|=
name|inputOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
name|keepColNames
operator|.
name|size
argument_list|()
operator|&&
name|info
operator|.
name|getInternalName
argument_list|()
operator|.
name|equals
argument_list|(
name|keepColNames
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|field
decl_stmt|;
if|if
condition|(
name|index
index|[
name|i
index|]
operator|>=
literal|0
condition|)
block|{
name|field
operator|=
name|Utilities
operator|.
name|ReduceField
operator|.
name|KEY
operator|+
literal|"."
operator|+
name|keyColNames
operator|.
name|get
argument_list|(
name|index
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|field
operator|=
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|+
literal|"."
operator|+
name|valueColNames
operator|.
name|get
argument_list|(
operator|-
name|index
index|[
name|i
index|]
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|ExprNodeColumnDesc
name|desc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|info
operator|.
name|getType
argument_list|()
argument_list|,
name|field
argument_list|,
name|info
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|info
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|columnDescriptors
operator|.
name|put
argument_list|(
name|keepColNames
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
block|}
return|return
name|columnDescriptors
return|;
block|}
specifier|static
name|ExprNodeDesc
name|convertToExprNode
parameter_list|(
name|RexNode
name|rn
parameter_list|,
name|RelNode
name|inputRel
parameter_list|,
name|String
name|tabAlias
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|vcolsInCalcite
parameter_list|)
block|{
return|return
name|rn
operator|.
name|accept
argument_list|(
operator|new
name|ExprNodeConverter
argument_list|(
name|tabAlias
argument_list|,
name|inputRel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|vcolsInCalcite
argument_list|,
name|inputRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|createColInfos
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|input
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|cInfoLst
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|input
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
control|)
block|{
name|cInfoLst
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cInfoLst
return|;
block|}
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|createColInfosSubset
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|input
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|keepColNames
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|cInfoLst
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|input
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
control|)
block|{
if|if
condition|(
name|pos
operator|<
name|keepColNames
operator|.
name|size
argument_list|()
operator|&&
name|ci
operator|.
name|getInternalName
argument_list|()
operator|.
name|equals
argument_list|(
name|keepColNames
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|)
condition|)
block|{
name|cInfoLst
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
block|}
return|return
name|cInfoLst
return|;
block|}
block|}
end_class

end_unit

