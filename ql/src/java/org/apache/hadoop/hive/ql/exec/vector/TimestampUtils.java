begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|TimestampUtils
block|{
specifier|public
specifier|static
name|void
name|assignTimeInNanoSec
parameter_list|(
name|long
name|timeInNanoSec
parameter_list|,
name|Timestamp
name|t
parameter_list|)
block|{
name|t
operator|.
name|setTime
argument_list|(
operator|(
name|timeInNanoSec
operator|)
operator|/
literal|1000000
argument_list|)
expr_stmt|;
name|t
operator|.
name|setNanos
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|t
operator|.
name|getNanos
argument_list|()
operator|)
operator|+
operator|(
name|timeInNanoSec
operator|%
literal|1000000
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|long
name|getTimeNanoSec
parameter_list|(
name|Timestamp
name|t
parameter_list|)
block|{
name|long
name|time
init|=
name|t
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|int
name|nanos
init|=
name|t
operator|.
name|getNanos
argument_list|()
decl_stmt|;
return|return
operator|(
name|time
operator|*
literal|1000000
operator|)
operator|+
operator|(
name|nanos
operator|%
literal|1000000
operator|)
return|;
block|}
block|}
end_class

end_unit

