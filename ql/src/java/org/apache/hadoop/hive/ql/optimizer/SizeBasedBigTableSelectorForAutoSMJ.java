begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CommonJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_comment
comment|/*  * This is a pluggable policy to chose the candidate map-join table for converting a join to a  * sort merge join. The largest table is chosen based on the size of the tables.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SizeBasedBigTableSelectorForAutoSMJ
block|{
specifier|protected
name|void
name|getListTopOps
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|,
name|List
argument_list|<
name|TableScanOperator
argument_list|>
name|topOps
parameter_list|)
block|{
if|if
condition|(
operator|(
name|op
operator|.
name|getParentOperators
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|op
operator|.
name|getParentOperators
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|parentOp
operator|instanceof
name|TableScanOperator
condition|)
block|{
name|topOps
operator|.
name|add
argument_list|(
operator|(
name|TableScanOperator
operator|)
name|parentOp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parentOp
operator|instanceof
name|CommonJoinOperator
condition|)
block|{
name|topOps
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getListTopOps
argument_list|(
name|parentOp
argument_list|,
name|topOps
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|long
name|getSize
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|size
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
comment|// If the size is present in the metastore, use it
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|size
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
try|try
block|{
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|getContentSummary
argument_list|(
name|path
argument_list|)
operator|.
name|getLength
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|protected
name|long
name|getSize
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Table
name|table
parameter_list|)
block|{
name|Path
name|path
init|=
name|table
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|size
init|=
name|table
operator|.
name|getProperty
argument_list|(
literal|"totalSize"
argument_list|)
decl_stmt|;
return|return
name|getSize
argument_list|(
name|conf
argument_list|,
name|size
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|protected
name|long
name|getSize
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Partition
name|partition
parameter_list|)
block|{
name|Path
name|path
init|=
name|partition
operator|.
name|getPartitionPath
argument_list|()
decl_stmt|;
name|String
name|size
init|=
name|partition
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"totalSize"
argument_list|)
decl_stmt|;
return|return
name|getSize
argument_list|(
name|conf
argument_list|,
name|size
argument_list|,
name|path
argument_list|)
return|;
block|}
block|}
end_class

end_unit

