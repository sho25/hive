begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|ppr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartitionExpressionProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_comment
comment|/**  * The basic implementation of PartitionExpressionProxy that uses ql package classes.  */
end_comment

begin_class
specifier|public
class|class
name|PartitionExpressionForMetastore
implements|implements
name|PartitionExpressionProxy
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PartitionExpressionForMetastore
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|convertExprToFilter
parameter_list|(
name|byte
index|[]
name|exprBytes
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|deserializeExpr
argument_list|(
name|exprBytes
argument_list|)
operator|.
name|getExprString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterPartitionsByExpr
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
parameter_list|,
name|byte
index|[]
name|exprBytes
parameter_list|,
name|String
name|defaultPartitionName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
parameter_list|)
throws|throws
name|MetaException
block|{
name|ExprNodeDesc
name|expr
init|=
name|deserializeExpr
argument_list|(
name|exprBytes
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|,
name|len
init|=
name|partitionNames
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
name|PartitionPruner
operator|.
name|prunePartitionNames
argument_list|(
name|columnNames
argument_list|,
name|expr
argument_list|,
name|defaultPartitionName
argument_list|,
name|partitionNames
argument_list|)
decl_stmt|;
name|double
name|timeMs
init|=
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000000.0
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Pruning "
operator|+
name|len
operator|+
literal|" partition names took "
operator|+
name|timeMs
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to apply the expression"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ExprNodeDesc
name|deserializeExpr
parameter_list|(
name|byte
index|[]
name|exprBytes
parameter_list|)
throws|throws
name|MetaException
block|{
name|ExprNodeDesc
name|expr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|expr
operator|=
name|Utilities
operator|.
name|deserializeExpressionFromKryo
argument_list|(
name|exprBytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to deserialize the expression"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|expr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Failed to deserialize expression - ExprNodeDesc not present"
argument_list|)
throw|;
block|}
return|return
name|expr
return|;
block|}
block|}
end_class

end_unit

