begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|writable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
operator|.
name|VInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * This file is taken from a patch to hive 0.11  * Issue : https://issues.apache.org/jira/browse/HIVE-2693  *  */
end_comment

begin_class
specifier|public
class|class
name|BigDecimalWritable
implements|implements
name|WritableComparable
argument_list|<
name|BigDecimalWritable
argument_list|>
block|{
specifier|private
name|byte
index|[]
name|internalStorage
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
specifier|private
name|int
name|scale
decl_stmt|;
specifier|private
specifier|final
name|VInt
name|vInt
init|=
operator|new
name|VInt
argument_list|()
decl_stmt|;
comment|// reusable integer
specifier|public
name|BigDecimalWritable
parameter_list|()
block|{   }
specifier|public
name|BigDecimalWritable
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|,
specifier|final
name|int
name|scale
parameter_list|)
block|{
name|set
argument_list|(
name|bytes
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BigDecimalWritable
parameter_list|(
specifier|final
name|BigDecimalWritable
name|writable
parameter_list|)
block|{
name|set
argument_list|(
name|writable
operator|.
name|getBigDecimal
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BigDecimalWritable
parameter_list|(
specifier|final
name|BigDecimal
name|value
parameter_list|)
block|{
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|BigDecimal
name|value
parameter_list|)
block|{
name|value
operator|=
name|value
operator|.
name|stripTrailingZeros
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|compareTo
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Special case for 0, because java doesn't strip zeros correctly on
comment|// that number.
name|value
operator|=
name|BigDecimal
operator|.
name|ZERO
expr_stmt|;
block|}
name|set
argument_list|(
name|value
operator|.
name|unscaledValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|value
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
specifier|final
name|BigDecimalWritable
name|writable
parameter_list|)
block|{
name|set
argument_list|(
name|writable
operator|.
name|getBigDecimal
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|,
specifier|final
name|int
name|scale
parameter_list|)
block|{
name|this
operator|.
name|internalStorage
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
specifier|public
name|void
name|setFromBytes
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|vInt
argument_list|)
expr_stmt|;
name|scale
operator|=
name|vInt
operator|.
name|value
expr_stmt|;
name|offset
operator|+=
name|vInt
operator|.
name|length
expr_stmt|;
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|vInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|vInt
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|internalStorage
operator|.
name|length
operator|!=
name|vInt
operator|.
name|value
condition|)
block|{
name|internalStorage
operator|=
operator|new
name|byte
index|[
name|vInt
operator|.
name|value
index|]
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|internalStorage
argument_list|,
literal|0
argument_list|,
name|vInt
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BigDecimal
name|getBigDecimal
parameter_list|()
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|internalStorage
argument_list|)
argument_list|,
name|scale
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
specifier|final
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|scale
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
specifier|final
name|int
name|byteArrayLen
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|internalStorage
operator|.
name|length
operator|!=
name|byteArrayLen
condition|)
block|{
name|internalStorage
operator|=
operator|new
name|byte
index|[
name|byteArrayLen
index|]
expr_stmt|;
block|}
name|in
operator|.
name|readFully
argument_list|(
name|internalStorage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|internalStorage
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|internalStorage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|BigDecimalWritable
name|that
parameter_list|)
block|{
return|return
name|getBigDecimal
argument_list|()
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|getBigDecimal
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|writeToByteStream
parameter_list|(
specifier|final
name|Output
name|byteStream
parameter_list|)
block|{
name|LazyBinaryUtils
operator|.
name|writeVInt
argument_list|(
name|byteStream
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|LazyBinaryUtils
operator|.
name|writeVInt
argument_list|(
name|byteStream
argument_list|,
name|internalStorage
operator|.
name|length
argument_list|)
expr_stmt|;
name|byteStream
operator|.
name|write
argument_list|(
name|internalStorage
argument_list|,
literal|0
argument_list|,
name|internalStorage
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getBigDecimal
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
operator|!
operator|(
name|other
operator|instanceof
name|BigDecimalWritable
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|BigDecimalWritable
name|bdw
init|=
operator|(
name|BigDecimalWritable
operator|)
name|other
decl_stmt|;
comment|// 'equals' and 'compareTo' are not compatible with BigDecimals. We want
comment|// compareTo which returns true iff the numbers are equal (e.g.: 3.14 is
comment|// the same as 3.140). 'Equals' returns true iff equal and the same
comment|// scale
comment|// is set in the decimals (e.g.: 3.14 is not the same as 3.140)
return|return
name|getBigDecimal
argument_list|()
operator|.
name|compareTo
argument_list|(
name|bdw
operator|.
name|getBigDecimal
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getBigDecimal
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

