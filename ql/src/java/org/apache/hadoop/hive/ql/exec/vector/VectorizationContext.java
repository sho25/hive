begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|ColumnExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|FilterExprAndExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|FilterExprOrExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|FilterNotExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IdentityExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|SelectColumnIsFalse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|SelectColumnIsNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|SelectColumnIsNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|SelectColumnIsTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|VectorAggregateExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFAvgDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFAvgLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFCountDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFCountLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFMaxDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFMaxLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFMinDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFMinLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFStdPopDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFStdPopLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFStdSampDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFStdSampLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFSumDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFSumLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFVarPopDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFVarPopLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFVarSampDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|VectorUDAFVarSampLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPDivide
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPMinus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPMod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPMultiply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPNegative
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPPositive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_comment
comment|/**  * Context class for vectorization execution.  * Main role is to map column names to column indices and serves as a  * factory class for building vectorized expressions out of descriptors.  *  */
end_comment

begin_class
specifier|public
class|class
name|VectorizationContext
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VectorizationContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|//columnName to column position map
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|columnMap
decl_stmt|;
comment|//Next column to be used for intermediate output
specifier|private
name|int
name|nextOutputColumn
decl_stmt|;
specifier|private
name|OperatorType
name|opType
decl_stmt|;
comment|//Map column number to type
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|outputColumnTypes
decl_stmt|;
specifier|public
name|VectorizationContext
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|columnMap
parameter_list|,
name|int
name|initialOutputCol
parameter_list|)
block|{
name|this
operator|.
name|columnMap
operator|=
name|columnMap
expr_stmt|;
name|this
operator|.
name|nextOutputColumn
operator|=
name|initialOutputCol
expr_stmt|;
name|this
operator|.
name|outputColumnTypes
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|allocateOutputColumn
parameter_list|(
name|String
name|columnName
parameter_list|,
name|String
name|columnType
parameter_list|)
block|{
name|int
name|newColumnIndex
init|=
name|nextOutputColumn
operator|++
decl_stmt|;
name|columnMap
operator|.
name|put
argument_list|(
name|columnName
argument_list|,
name|newColumnIndex
argument_list|)
expr_stmt|;
name|outputColumnTypes
operator|.
name|put
argument_list|(
name|newColumnIndex
argument_list|,
name|columnType
argument_list|)
expr_stmt|;
return|return
name|newColumnIndex
return|;
block|}
specifier|public
name|void
name|setOperatorType
parameter_list|(
name|OperatorType
name|opType
parameter_list|)
block|{
name|this
operator|.
name|opType
operator|=
name|opType
expr_stmt|;
block|}
specifier|private
name|VectorExpression
name|getVectorExpression
parameter_list|(
name|ExprNodeColumnDesc
name|exprDesc
parameter_list|)
block|{
name|int
name|columnNum
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|exprDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|VectorExpression
name|expr
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|opType
condition|)
block|{
case|case
name|FILTER
case|:
comment|//Important: It will come here only if the column is being used as a boolean
name|expr
operator|=
operator|new
name|SelectColumnIsTrue
argument_list|(
name|columnNum
argument_list|)
expr_stmt|;
break|break;
case|case
name|SELECT
case|:
case|case
name|GROUPBY
case|:
case|case
name|REDUCESINK
case|:
name|expr
operator|=
operator|new
name|IdentityExpression
argument_list|(
name|columnNum
argument_list|,
name|exprDesc
operator|.
name|getTypeString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|expr
return|;
block|}
specifier|public
name|VectorExpression
index|[]
name|getVectorExpressions
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprNodes
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|VectorExpression
index|[]
name|ret
init|=
operator|new
name|VectorExpression
index|[
name|exprNodes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|e
range|:
name|exprNodes
control|)
block|{
name|ret
index|[
name|i
operator|++
index|]
operator|=
name|getVectorExpression
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|VectorExpression
name|getVectorExpression
parameter_list|(
name|ExprNodeDesc
name|exprDesc
parameter_list|)
block|{
if|if
condition|(
name|exprDesc
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
return|return
name|getVectorExpression
argument_list|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|exprDesc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|exprDesc
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|ExprNodeGenericFuncDesc
name|expr
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|exprDesc
decl_stmt|;
return|return
name|getVectorExpression
argument_list|(
name|expr
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|expr
operator|.
name|getChildExprs
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|VectorExpression
name|getUnaryMinusExpression
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExprList
parameter_list|)
block|{
name|ExprNodeDesc
name|childExpr
init|=
name|childExprList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|inputCol
decl_stmt|;
name|String
name|colType
decl_stmt|;
name|VectorExpression
name|v1
init|=
literal|null
decl_stmt|;
name|int
name|outputCol
init|=
name|this
operator|.
name|nextOutputColumn
operator|++
decl_stmt|;
if|if
condition|(
name|childExpr
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|v1
operator|=
name|getVectorExpression
argument_list|(
name|childExpr
argument_list|)
expr_stmt|;
name|inputCol
operator|=
name|v1
operator|.
name|getOutputColumn
argument_list|()
expr_stmt|;
name|colType
operator|=
name|v1
operator|.
name|getOutputType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childExpr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|childExpr
decl_stmt|;
name|inputCol
operator|=
name|columnMap
operator|.
name|get
argument_list|(
name|colDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|colType
operator|=
name|colDesc
operator|.
name|getTypeString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expression not supported: "
operator|+
name|childExpr
argument_list|)
throw|;
block|}
name|String
name|className
init|=
name|getNormalizedTypeName
argument_list|(
name|colType
argument_list|)
operator|+
literal|"colUnaryMinus"
decl_stmt|;
name|this
operator|.
name|nextOutputColumn
operator|=
name|outputCol
operator|+
literal|1
expr_stmt|;
name|VectorExpression
name|expr
decl_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol
argument_list|,
name|outputCol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|v1
operator|!=
literal|null
condition|)
block|{
name|expr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|v1
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|expr
return|;
block|}
specifier|public
name|VectorExpression
name|getUnaryPlusExpression
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExprList
parameter_list|)
block|{
name|ExprNodeDesc
name|childExpr
init|=
name|childExprList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|inputCol
decl_stmt|;
name|String
name|colType
decl_stmt|;
name|VectorExpression
name|v1
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|childExpr
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|v1
operator|=
name|getVectorExpression
argument_list|(
name|childExpr
argument_list|)
expr_stmt|;
name|inputCol
operator|=
name|v1
operator|.
name|getOutputColumn
argument_list|()
expr_stmt|;
name|colType
operator|=
name|v1
operator|.
name|getOutputType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childExpr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|childExpr
decl_stmt|;
name|inputCol
operator|=
name|columnMap
operator|.
name|get
argument_list|(
name|colDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|colType
operator|=
name|colDesc
operator|.
name|getTypeString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expression not supported: "
operator|+
name|childExpr
argument_list|)
throw|;
block|}
name|VectorExpression
name|expr
init|=
operator|new
name|IdentityExpression
argument_list|(
name|inputCol
argument_list|,
name|colType
argument_list|)
decl_stmt|;
if|if
condition|(
name|v1
operator|!=
literal|null
condition|)
block|{
name|expr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|v1
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|expr
return|;
block|}
specifier|private
name|VectorExpression
name|getVectorExpression
parameter_list|(
name|GenericUDF
name|udf
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
parameter_list|)
block|{
if|if
condition|(
name|udf
operator|instanceof
name|GenericUDFOPLessThan
condition|)
block|{
return|return
name|getVectorBinaryComparisonFilterExpression
argument_list|(
literal|"Less"
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|udf
operator|instanceof
name|GenericUDFOPEqualOrLessThan
condition|)
block|{
return|return
name|getVectorBinaryComparisonFilterExpression
argument_list|(
literal|"LessEqual"
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|udf
operator|instanceof
name|GenericUDFOPEqual
condition|)
block|{
return|return
name|getVectorBinaryComparisonFilterExpression
argument_list|(
literal|"Equal"
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|udf
operator|instanceof
name|GenericUDFOPGreaterThan
condition|)
block|{
return|return
name|getVectorBinaryComparisonFilterExpression
argument_list|(
literal|"Greater"
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|udf
operator|instanceof
name|GenericUDFOPEqualOrGreaterThan
condition|)
block|{
return|return
name|getVectorBinaryComparisonFilterExpression
argument_list|(
literal|"GreaterEqual"
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|udf
operator|instanceof
name|GenericUDFOPNotEqual
condition|)
block|{
return|return
name|getVectorBinaryComparisonFilterExpression
argument_list|(
literal|"NotEqual"
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|udf
operator|instanceof
name|GenericUDFOPNotNull
condition|)
block|{
return|return
name|getVectorExpression
argument_list|(
operator|(
name|GenericUDFOPNotNull
operator|)
name|udf
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|udf
operator|instanceof
name|GenericUDFOPNull
condition|)
block|{
return|return
name|getVectorExpression
argument_list|(
operator|(
name|GenericUDFOPNull
operator|)
name|udf
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|udf
operator|instanceof
name|GenericUDFOPAnd
condition|)
block|{
return|return
name|getVectorExpression
argument_list|(
operator|(
name|GenericUDFOPAnd
operator|)
name|udf
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|udf
operator|instanceof
name|GenericUDFOPNot
condition|)
block|{
return|return
name|getVectorExpression
argument_list|(
operator|(
name|GenericUDFOPNot
operator|)
name|udf
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|udf
operator|instanceof
name|GenericUDFOPOr
condition|)
block|{
return|return
name|getVectorExpression
argument_list|(
operator|(
name|GenericUDFOPOr
operator|)
name|udf
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|udf
operator|instanceof
name|GenericUDFBridge
condition|)
block|{
return|return
name|getVectorExpression
argument_list|(
operator|(
name|GenericUDFBridge
operator|)
name|udf
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|VectorExpression
name|getVectorExpression
parameter_list|(
name|GenericUDFBridge
name|udf
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|cl
init|=
name|udf
operator|.
name|getUdfClass
argument_list|()
decl_stmt|;
comment|// (UDFBaseNumericOp.class.isAssignableFrom(cl)) == true
if|if
condition|(
name|cl
operator|.
name|equals
argument_list|(
name|UDFOPPlus
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|getBinaryArithmeticExpression
argument_list|(
literal|"Add"
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cl
operator|.
name|equals
argument_list|(
name|UDFOPMinus
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|getBinaryArithmeticExpression
argument_list|(
literal|"Subtract"
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cl
operator|.
name|equals
argument_list|(
name|UDFOPMultiply
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|getBinaryArithmeticExpression
argument_list|(
literal|"Multiply"
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cl
operator|.
name|equals
argument_list|(
name|UDFOPDivide
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|getBinaryArithmeticExpression
argument_list|(
literal|"Divide"
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cl
operator|.
name|equals
argument_list|(
name|UDFOPMod
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|getBinaryArithmeticExpression
argument_list|(
literal|"Modulo"
argument_list|,
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cl
operator|.
name|equals
argument_list|(
name|UDFOPNegative
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|getUnaryMinusExpression
argument_list|(
name|childExpr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cl
operator|.
name|equals
argument_list|(
name|UDFOPPositive
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|getUnaryPlusExpression
argument_list|(
name|childExpr
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|VectorExpression
name|getBinaryArithmeticExpression
parameter_list|(
name|String
name|method
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
parameter_list|)
block|{
name|ExprNodeDesc
name|leftExpr
init|=
name|childExpr
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|rightExpr
init|=
name|childExpr
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|VectorExpression
name|expr
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|leftExpr
operator|instanceof
name|ExprNodeColumnDesc
operator|)
operator|&&
operator|(
name|rightExpr
operator|instanceof
name|ExprNodeConstantDesc
operator|)
condition|)
block|{
name|ExprNodeColumnDesc
name|leftColDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|leftExpr
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|rightExpr
decl_stmt|;
name|int
name|inputCol
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|leftColDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|colType
init|=
name|leftColDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|scalarType
init|=
name|constDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getBinaryColumnScalarExpressionClassName
argument_list|(
name|colType
argument_list|,
name|scalarType
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|int
name|outputCol
init|=
name|this
operator|.
name|nextOutputColumn
operator|++
decl_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol
argument_list|,
name|getScalarValue
argument_list|(
name|constDesc
argument_list|)
argument_list|,
name|outputCol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|rightExpr
operator|instanceof
name|ExprNodeColumnDesc
operator|)
operator|&&
operator|(
name|leftExpr
operator|instanceof
name|ExprNodeConstantDesc
operator|)
condition|)
block|{
name|ExprNodeColumnDesc
name|rightColDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|rightExpr
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|leftExpr
decl_stmt|;
name|int
name|inputCol
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|rightColDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|colType
init|=
name|rightColDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|scalarType
init|=
name|constDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getBinaryColumnScalarExpressionClassName
argument_list|(
name|colType
argument_list|,
name|scalarType
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|int
name|outputCol
init|=
name|this
operator|.
name|nextOutputColumn
operator|++
decl_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol
argument_list|,
name|getScalarValue
argument_list|(
name|constDesc
argument_list|)
argument_list|,
name|outputCol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|rightExpr
operator|instanceof
name|ExprNodeColumnDesc
operator|)
operator|&&
operator|(
name|leftExpr
operator|instanceof
name|ExprNodeColumnDesc
operator|)
condition|)
block|{
name|ExprNodeColumnDesc
name|rightColDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|rightExpr
decl_stmt|;
name|ExprNodeColumnDesc
name|leftColDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|leftExpr
decl_stmt|;
name|int
name|inputCol1
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|rightColDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|inputCol2
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|leftColDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|colType1
init|=
name|rightColDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|colType2
init|=
name|leftColDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getBinaryColumnColumnExpressionClassName
argument_list|(
name|colType1
argument_list|,
name|colType2
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|int
name|outputCol
init|=
name|this
operator|.
name|nextOutputColumn
operator|++
decl_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol1
argument_list|,
name|inputCol2
argument_list|,
name|outputCol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|leftExpr
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
operator|&&
operator|(
name|rightExpr
operator|instanceof
name|ExprNodeColumnDesc
operator|)
condition|)
block|{
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|rightExpr
decl_stmt|;
name|int
name|outputCol
init|=
name|this
operator|.
name|nextOutputColumn
operator|++
decl_stmt|;
name|VectorExpression
name|v1
init|=
name|getVectorExpression
argument_list|(
name|leftExpr
argument_list|)
decl_stmt|;
name|int
name|inputCol1
init|=
name|v1
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|int
name|inputCol2
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|colDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|colType1
init|=
name|v1
operator|.
name|getOutputType
argument_list|()
decl_stmt|;
name|String
name|colType2
init|=
name|colDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getBinaryColumnColumnExpressionClassName
argument_list|(
name|colType1
argument_list|,
name|colType2
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|this
operator|.
name|nextOutputColumn
operator|=
name|outputCol
operator|+
literal|1
expr_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol1
argument_list|,
name|inputCol2
argument_list|,
name|outputCol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
name|expr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|v1
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|leftExpr
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
operator|&&
operator|(
name|rightExpr
operator|instanceof
name|ExprNodeConstantDesc
operator|)
condition|)
block|{
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|rightExpr
decl_stmt|;
name|int
name|outputCol
init|=
name|this
operator|.
name|nextOutputColumn
operator|++
decl_stmt|;
name|VectorExpression
name|v1
init|=
name|getVectorExpression
argument_list|(
name|leftExpr
argument_list|)
decl_stmt|;
name|int
name|inputCol1
init|=
name|v1
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|String
name|colType1
init|=
name|v1
operator|.
name|getOutputType
argument_list|()
decl_stmt|;
name|String
name|scalarType
init|=
name|constDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getBinaryColumnScalarExpressionClassName
argument_list|(
name|colType1
argument_list|,
name|scalarType
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|this
operator|.
name|nextOutputColumn
operator|=
name|outputCol
operator|+
literal|1
expr_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol1
argument_list|,
name|getScalarValue
argument_list|(
name|constDesc
argument_list|)
argument_list|,
name|outputCol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
name|expr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|v1
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|leftExpr
operator|instanceof
name|ExprNodeColumnDesc
operator|)
operator|&&
operator|(
name|rightExpr
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
condition|)
block|{
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|leftExpr
decl_stmt|;
name|int
name|outputCol
init|=
name|this
operator|.
name|nextOutputColumn
operator|++
decl_stmt|;
name|VectorExpression
name|v2
init|=
name|getVectorExpression
argument_list|(
name|rightExpr
argument_list|)
decl_stmt|;
name|int
name|inputCol1
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|colDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|inputCol2
init|=
name|v2
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|String
name|colType1
init|=
name|colDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|colType2
init|=
name|v2
operator|.
name|getOutputType
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getBinaryColumnColumnExpressionClassName
argument_list|(
name|colType1
argument_list|,
name|colType2
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|this
operator|.
name|nextOutputColumn
operator|=
name|outputCol
operator|+
literal|1
expr_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol1
argument_list|,
name|inputCol2
argument_list|,
name|outputCol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
name|expr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|v2
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|leftExpr
operator|instanceof
name|ExprNodeConstantDesc
operator|)
operator|&&
operator|(
name|rightExpr
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
condition|)
block|{
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|leftExpr
decl_stmt|;
name|int
name|outputCol
init|=
name|this
operator|.
name|nextOutputColumn
operator|++
decl_stmt|;
name|VectorExpression
name|v2
init|=
name|getVectorExpression
argument_list|(
name|rightExpr
argument_list|)
decl_stmt|;
name|int
name|inputCol2
init|=
name|v2
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|String
name|colType2
init|=
name|v2
operator|.
name|getOutputType
argument_list|()
decl_stmt|;
name|String
name|scalarType
init|=
name|constDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getBinaryScalarColumnExpressionClassName
argument_list|(
name|colType2
argument_list|,
name|scalarType
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|this
operator|.
name|nextOutputColumn
operator|=
name|outputCol
operator|+
literal|1
expr_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol2
argument_list|,
name|getScalarValue
argument_list|(
name|constDesc
argument_list|)
argument_list|,
name|outputCol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
name|expr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|v2
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|leftExpr
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
operator|&&
operator|(
name|rightExpr
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
condition|)
block|{
comment|//For arithmetic expression, the child expressions must be materializing
comment|//columns
name|int
name|outputCol
init|=
name|this
operator|.
name|nextOutputColumn
operator|++
decl_stmt|;
name|VectorExpression
name|v1
init|=
name|getVectorExpression
argument_list|(
name|leftExpr
argument_list|)
decl_stmt|;
name|VectorExpression
name|v2
init|=
name|getVectorExpression
argument_list|(
name|rightExpr
argument_list|)
decl_stmt|;
name|int
name|inputCol1
init|=
name|v1
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|int
name|inputCol2
init|=
name|v2
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|String
name|colType1
init|=
name|v1
operator|.
name|getOutputType
argument_list|()
decl_stmt|;
name|String
name|colType2
init|=
name|v2
operator|.
name|getOutputType
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getBinaryColumnColumnExpressionClassName
argument_list|(
name|colType1
argument_list|,
name|colType2
argument_list|,
name|method
argument_list|)
decl_stmt|;
comment|//Reclaim the output columns
name|this
operator|.
name|nextOutputColumn
operator|=
name|outputCol
operator|+
literal|1
expr_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol1
argument_list|,
name|inputCol2
argument_list|,
name|outputCol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
name|expr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|v1
block|,
name|v2
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|expr
return|;
block|}
specifier|private
name|VectorExpression
name|getVectorExpression
parameter_list|(
name|GenericUDFOPOr
name|udf
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
parameter_list|)
block|{
name|ExprNodeDesc
name|leftExpr
init|=
name|childExpr
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|rightExpr
init|=
name|childExpr
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve1
decl_stmt|;
name|VectorExpression
name|ve2
decl_stmt|;
if|if
condition|(
name|leftExpr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|leftExpr
decl_stmt|;
name|int
name|inputCol
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|colDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|ve1
operator|=
operator|new
name|SelectColumnIsTrue
argument_list|(
name|inputCol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ve1
operator|=
name|getVectorExpression
argument_list|(
name|leftExpr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rightExpr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|rightExpr
decl_stmt|;
name|int
name|inputCol
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|colDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|ve2
operator|=
operator|new
name|SelectColumnIsTrue
argument_list|(
name|inputCol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ve2
operator|=
name|getVectorExpression
argument_list|(
name|leftExpr
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FilterExprOrExpr
argument_list|(
name|ve1
argument_list|,
name|ve2
argument_list|)
return|;
block|}
specifier|private
name|VectorExpression
name|getVectorExpression
parameter_list|(
name|GenericUDFOPNot
name|udf
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
parameter_list|)
block|{
name|ExprNodeDesc
name|expr
init|=
name|childExpr
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|expr
decl_stmt|;
name|int
name|inputCol
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|colDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
operator|new
name|SelectColumnIsFalse
argument_list|(
name|inputCol
argument_list|)
decl_stmt|;
return|return
name|ve
return|;
block|}
else|else
block|{
name|VectorExpression
name|ve
init|=
name|getVectorExpression
argument_list|(
name|expr
argument_list|)
decl_stmt|;
operator|new
name|FilterNotExpr
argument_list|(
name|ve
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|VectorExpression
name|getVectorExpression
parameter_list|(
name|GenericUDFOPAnd
name|udf
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
parameter_list|)
block|{
name|ExprNodeDesc
name|leftExpr
init|=
name|childExpr
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|rightExpr
init|=
name|childExpr
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve1
decl_stmt|;
name|VectorExpression
name|ve2
decl_stmt|;
if|if
condition|(
name|leftExpr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|leftExpr
decl_stmt|;
name|int
name|inputCol
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|colDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|ve1
operator|=
operator|new
name|SelectColumnIsTrue
argument_list|(
name|inputCol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ve1
operator|=
name|getVectorExpression
argument_list|(
name|leftExpr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rightExpr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|rightExpr
decl_stmt|;
name|int
name|inputCol
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|colDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|ve2
operator|=
operator|new
name|SelectColumnIsTrue
argument_list|(
name|inputCol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ve2
operator|=
name|getVectorExpression
argument_list|(
name|leftExpr
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FilterExprAndExpr
argument_list|(
name|ve1
argument_list|,
name|ve2
argument_list|)
return|;
block|}
specifier|private
name|VectorExpression
name|getVectorExpression
parameter_list|(
name|GenericUDFOPNull
name|udf
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
parameter_list|)
block|{
name|ExprNodeDesc
name|expr
init|=
name|childExpr
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|expr
decl_stmt|;
name|int
name|inputCol
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|colDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|ve
operator|=
operator|new
name|SelectColumnIsNull
argument_list|(
name|inputCol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//TODO
block|}
return|return
name|ve
return|;
block|}
specifier|private
name|VectorExpression
name|getVectorExpression
parameter_list|(
name|GenericUDFOPNotNull
name|udf
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
parameter_list|)
block|{
name|ExprNodeDesc
name|expr
init|=
name|childExpr
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|colDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|expr
decl_stmt|;
name|int
name|inputCol
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|colDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
operator|new
name|SelectColumnIsNotNull
argument_list|(
name|inputCol
argument_list|)
decl_stmt|;
return|return
name|ve
return|;
block|}
else|else
block|{
comment|//TODO
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Object
name|getScalarValue
parameter_list|(
name|ExprNodeConstantDesc
name|constDesc
parameter_list|)
block|{
if|if
condition|(
name|constDesc
operator|.
name|getTypeString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"String"
argument_list|)
condition|)
block|{
return|return
operator|(
operator|(
name|String
operator|)
name|constDesc
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|constDesc
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
specifier|private
name|VectorExpression
name|getVectorBinaryComparisonFilterExpression
parameter_list|(
name|String
name|opName
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExpr
parameter_list|)
block|{
name|ExprNodeDesc
name|leftExpr
init|=
name|childExpr
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|rightExpr
init|=
name|childExpr
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|VectorExpression
name|expr
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|leftExpr
operator|instanceof
name|ExprNodeColumnDesc
operator|)
operator|&&
operator|(
name|rightExpr
operator|instanceof
name|ExprNodeConstantDesc
operator|)
condition|)
block|{
name|ExprNodeColumnDesc
name|leftColDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|leftExpr
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|rightExpr
decl_stmt|;
name|int
name|inputCol
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|leftColDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|colType
init|=
name|leftColDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|scalarType
init|=
name|constDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getFilterColumnScalarExpressionClassName
argument_list|(
name|colType
argument_list|,
name|scalarType
argument_list|,
name|opName
argument_list|)
decl_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol
argument_list|,
name|getScalarValue
argument_list|(
name|constDesc
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|rightExpr
operator|instanceof
name|ExprNodeColumnDesc
operator|)
operator|&&
operator|(
name|leftExpr
operator|instanceof
name|ExprNodeConstantDesc
operator|)
condition|)
block|{
name|ExprNodeColumnDesc
name|rightColDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|rightExpr
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|leftExpr
decl_stmt|;
name|int
name|inputCol
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|rightColDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|colType
init|=
name|rightColDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|scalarType
init|=
name|constDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getFilterColumnScalarExpressionClassName
argument_list|(
name|colType
argument_list|,
name|scalarType
argument_list|,
name|opName
argument_list|)
decl_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol
argument_list|,
name|getScalarValue
argument_list|(
name|constDesc
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|rightExpr
operator|instanceof
name|ExprNodeColumnDesc
operator|)
operator|&&
operator|(
name|leftExpr
operator|instanceof
name|ExprNodeColumnDesc
operator|)
condition|)
block|{
name|ExprNodeColumnDesc
name|rightColDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|rightExpr
decl_stmt|;
name|ExprNodeColumnDesc
name|leftColDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|leftExpr
decl_stmt|;
name|int
name|inputCol1
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|rightColDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|inputCol2
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|leftColDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|colType1
init|=
name|rightColDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|colType2
init|=
name|leftColDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getFilterColumnColumnExpressionClassName
argument_list|(
name|colType1
argument_list|,
name|colType2
argument_list|,
name|opName
argument_list|)
decl_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol1
argument_list|,
name|inputCol2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|leftExpr
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
operator|&&
operator|(
name|rightExpr
operator|instanceof
name|ExprNodeColumnDesc
operator|)
condition|)
block|{
name|VectorExpression
name|v1
init|=
name|getVectorExpression
argument_list|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|leftExpr
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|leftColDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|leftExpr
decl_stmt|;
name|int
name|inputCol1
init|=
name|v1
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|int
name|inputCol2
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|leftColDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|colType1
init|=
name|v1
operator|.
name|getOutputType
argument_list|()
decl_stmt|;
name|String
name|colType2
init|=
name|leftColDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getFilterColumnColumnExpressionClassName
argument_list|(
name|colType1
argument_list|,
name|colType2
argument_list|,
name|opName
argument_list|)
decl_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol1
argument_list|,
name|inputCol2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
name|expr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|v1
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|leftExpr
operator|instanceof
name|ExprNodeColumnDesc
operator|)
operator|&&
operator|(
name|rightExpr
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
condition|)
block|{
name|ExprNodeColumnDesc
name|rightColDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|leftExpr
decl_stmt|;
name|VectorExpression
name|v2
init|=
name|getVectorExpression
argument_list|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|rightExpr
argument_list|)
decl_stmt|;
name|int
name|inputCol1
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|rightColDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|inputCol2
init|=
name|v2
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|String
name|colType1
init|=
name|rightColDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|colType2
init|=
name|v2
operator|.
name|getOutputType
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getFilterColumnColumnExpressionClassName
argument_list|(
name|colType1
argument_list|,
name|colType2
argument_list|,
name|opName
argument_list|)
decl_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol1
argument_list|,
name|inputCol2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
name|expr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|v2
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|leftExpr
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
operator|&&
operator|(
name|rightExpr
operator|instanceof
name|ExprNodeConstantDesc
operator|)
condition|)
block|{
name|VectorExpression
name|v1
init|=
name|getVectorExpression
argument_list|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|leftExpr
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|leftExpr
decl_stmt|;
name|int
name|inputCol1
init|=
name|v1
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|String
name|colType1
init|=
name|v1
operator|.
name|getOutputType
argument_list|()
decl_stmt|;
name|String
name|scalarType
init|=
name|constDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getFilterColumnScalarExpressionClassName
argument_list|(
name|colType1
argument_list|,
name|scalarType
argument_list|,
name|opName
argument_list|)
decl_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol1
argument_list|,
name|getScalarValue
argument_list|(
name|constDesc
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
name|expr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|v1
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|leftExpr
operator|instanceof
name|ExprNodeConstantDesc
operator|)
operator|&&
operator|(
name|rightExpr
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
condition|)
block|{
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|leftExpr
decl_stmt|;
name|VectorExpression
name|v2
init|=
name|getVectorExpression
argument_list|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|rightExpr
argument_list|)
decl_stmt|;
name|int
name|inputCol2
init|=
name|v2
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|String
name|scalarType
init|=
name|constDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|String
name|colType
init|=
name|v2
operator|.
name|getOutputType
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getFilterScalarColumnExpressionClassName
argument_list|(
name|colType
argument_list|,
name|scalarType
argument_list|,
name|opName
argument_list|)
decl_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol2
argument_list|,
name|getScalarValue
argument_list|(
name|constDesc
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
name|expr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|v2
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//For comparison expression, the child expressions must be materializing
comment|//columns
name|VectorExpression
name|v1
init|=
name|getVectorExpression
argument_list|(
name|leftExpr
argument_list|)
decl_stmt|;
name|VectorExpression
name|v2
init|=
name|getVectorExpression
argument_list|(
name|rightExpr
argument_list|)
decl_stmt|;
name|int
name|inputCol1
init|=
name|v1
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|int
name|inputCol2
init|=
name|v2
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|String
name|colType1
init|=
name|v1
operator|.
name|getOutputType
argument_list|()
decl_stmt|;
name|String
name|colType2
init|=
name|v2
operator|.
name|getOutputType
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|getFilterColumnColumnExpressionClassName
argument_list|(
name|colType1
argument_list|,
name|colType2
argument_list|,
name|opName
argument_list|)
decl_stmt|;
try|try
block|{
name|expr
operator|=
operator|(
name|VectorExpression
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
name|inputCol1
argument_list|,
name|inputCol2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|(
name|ex
operator|)
argument_list|)
throw|;
block|}
name|expr
operator|.
name|setChildExpressions
argument_list|(
operator|new
name|VectorExpression
index|[]
block|{
name|v1
block|,
name|v2
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|expr
return|;
block|}
specifier|private
name|String
name|getNormalizedTypeName
parameter_list|(
name|String
name|colType
parameter_list|)
block|{
name|String
name|normalizedType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Double"
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Float"
argument_list|)
condition|)
block|{
name|normalizedType
operator|=
literal|"Double"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"String"
argument_list|)
condition|)
block|{
name|normalizedType
operator|=
literal|"String"
expr_stmt|;
block|}
else|else
block|{
name|normalizedType
operator|=
literal|"Long"
expr_stmt|;
block|}
return|return
name|normalizedType
return|;
block|}
specifier|private
name|String
name|getFilterColumnColumnExpressionClassName
parameter_list|(
name|String
name|colType1
parameter_list|,
name|String
name|colType2
parameter_list|,
name|String
name|opName
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"org.apache.hadoop.hive.ql.exec.vector.expressions.gen."
argument_list|)
expr_stmt|;
if|if
condition|(
name|opType
operator|.
name|equals
argument_list|(
name|OperatorType
operator|.
name|FILTER
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"Filter"
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|getNormalizedTypeName
argument_list|(
name|colType1
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"Col"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|opName
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|getNormalizedTypeName
argument_list|(
name|colType2
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"Column"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getFilterColumnScalarExpressionClassName
parameter_list|(
name|String
name|colType
parameter_list|,
name|String
name|scalarType
parameter_list|,
name|String
name|opName
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"org.apache.hadoop.hive.ql.exec.vector.expressions.gen."
argument_list|)
expr_stmt|;
if|if
condition|(
name|opType
operator|.
name|equals
argument_list|(
name|OperatorType
operator|.
name|FILTER
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"Filter"
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|getNormalizedTypeName
argument_list|(
name|colType
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"Col"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|opName
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|getNormalizedTypeName
argument_list|(
name|scalarType
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"Scalar"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getFilterScalarColumnExpressionClassName
parameter_list|(
name|String
name|colType
parameter_list|,
name|String
name|scalarType
parameter_list|,
name|String
name|opName
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"org.apache.hadoop.hive.ql.exec.vector.expressions.gen."
argument_list|)
expr_stmt|;
if|if
condition|(
name|opType
operator|.
name|equals
argument_list|(
name|OperatorType
operator|.
name|FILTER
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"Filter"
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|getNormalizedTypeName
argument_list|(
name|scalarType
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"Scalar"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|opName
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|getNormalizedTypeName
argument_list|(
name|colType
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"Column"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getBinaryColumnScalarExpressionClassName
parameter_list|(
name|String
name|colType
parameter_list|,
name|String
name|scalarType
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"org.apache.hadoop.hive.ql.exec.vector.expressions.gen."
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|getNormalizedTypeName
argument_list|(
name|colType
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"Col"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|getNormalizedTypeName
argument_list|(
name|scalarType
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"Scalar"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getBinaryScalarColumnExpressionClassName
parameter_list|(
name|String
name|colType
parameter_list|,
name|String
name|scalarType
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"org.apache.hadoop.hive.ql.exec.vector.expressions.gen."
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|this
operator|.
name|getNormalizedTypeName
argument_list|(
name|scalarType
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"Scalar"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|this
operator|.
name|getNormalizedTypeName
argument_list|(
name|colType
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"Column"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getBinaryColumnColumnExpressionClassName
parameter_list|(
name|String
name|colType1
parameter_list|,
name|String
name|colType2
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"org.apache.hadoop.hive.ql.exec.vector.expressions.gen."
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|getNormalizedTypeName
argument_list|(
name|colType1
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"Col"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|getNormalizedTypeName
argument_list|(
name|colType2
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"Column"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|Object
index|[]
index|[]
name|aggregatesDefinition
init|=
block|{
block|{
literal|"min"
block|,
literal|"Long"
block|,
name|VectorUDAFMinLong
operator|.
name|class
block|}
block|,
block|{
literal|"min"
block|,
literal|"Double"
block|,
name|VectorUDAFMinDouble
operator|.
name|class
block|}
block|,
block|{
literal|"max"
block|,
literal|"Long"
block|,
name|VectorUDAFMaxLong
operator|.
name|class
block|}
block|,
block|{
literal|"max"
block|,
literal|"Double"
block|,
name|VectorUDAFMaxDouble
operator|.
name|class
block|}
block|,
block|{
literal|"count"
block|,
literal|"Long"
block|,
name|VectorUDAFCountLong
operator|.
name|class
block|}
block|,
block|{
literal|"count"
block|,
literal|"Double"
block|,
name|VectorUDAFCountDouble
operator|.
name|class
block|}
block|,
block|{
literal|"sum"
block|,
literal|"Long"
block|,
name|VectorUDAFSumLong
operator|.
name|class
block|}
block|,
block|{
literal|"sum"
block|,
literal|"Double"
block|,
name|VectorUDAFSumDouble
operator|.
name|class
block|}
block|,
block|{
literal|"avg"
block|,
literal|"Long"
block|,
name|VectorUDAFAvgLong
operator|.
name|class
block|}
block|,
block|{
literal|"avg"
block|,
literal|"Double"
block|,
name|VectorUDAFAvgDouble
operator|.
name|class
block|}
block|,
block|{
literal|"variance"
block|,
literal|"Long"
block|,
name|VectorUDAFVarPopLong
operator|.
name|class
block|}
block|,
block|{
literal|"var_pop"
block|,
literal|"Long"
block|,
name|VectorUDAFVarPopLong
operator|.
name|class
block|}
block|,
block|{
literal|"variance"
block|,
literal|"Double"
block|,
name|VectorUDAFVarPopDouble
operator|.
name|class
block|}
block|,
block|{
literal|"var_pop"
block|,
literal|"Double"
block|,
name|VectorUDAFVarPopDouble
operator|.
name|class
block|}
block|,
block|{
literal|"var_samp"
block|,
literal|"Long"
block|,
name|VectorUDAFVarSampLong
operator|.
name|class
block|}
block|,
block|{
literal|"var_samp"
block|,
literal|"Double"
block|,
name|VectorUDAFVarSampDouble
operator|.
name|class
block|}
block|,
block|{
literal|"std"
block|,
literal|"Long"
block|,
name|VectorUDAFStdPopLong
operator|.
name|class
block|}
block|,
block|{
literal|"stddev"
block|,
literal|"Long"
block|,
name|VectorUDAFStdPopLong
operator|.
name|class
block|}
block|,
block|{
literal|"stddev_pop"
block|,
literal|"Long"
block|,
name|VectorUDAFStdPopLong
operator|.
name|class
block|}
block|,
block|{
literal|"std"
block|,
literal|"Long"
block|,
name|VectorUDAFStdPopDouble
operator|.
name|class
block|}
block|,
block|{
literal|"stddev"
block|,
literal|"Long"
block|,
name|VectorUDAFStdPopDouble
operator|.
name|class
block|}
block|,
block|{
literal|"stddev_pop"
block|,
literal|"Long"
block|,
name|VectorUDAFStdPopDouble
operator|.
name|class
block|}
block|,
block|{
literal|"stddev_samp"
block|,
literal|"Long"
block|,
name|VectorUDAFStdSampLong
operator|.
name|class
block|}
block|,
block|{
literal|"stddev_samp"
block|,
literal|"Double"
block|,
name|VectorUDAFStdSampDouble
operator|.
name|class
block|}
block|,   }
decl_stmt|;
specifier|public
name|VectorAggregateExpression
name|getAggregatorExpression
parameter_list|(
name|AggregationDesc
name|desc
parameter_list|)
throws|throws
name|HiveException
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|paramDescList
init|=
name|desc
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|VectorExpression
index|[]
name|vectorParams
init|=
operator|new
name|VectorExpression
index|[
name|paramDescList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paramDescList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ExprNodeDesc
name|exprDesc
init|=
name|paramDescList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|vectorParams
index|[
name|i
index|]
operator|=
name|this
operator|.
name|getVectorExpression
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
block|}
name|String
name|aggregateName
init|=
name|desc
operator|.
name|getGenericUDAFName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|params
init|=
name|desc
operator|.
name|getParameters
argument_list|()
decl_stmt|;
comment|//TODO: handle length != 1
assert|assert
operator|(
name|params
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|ExprNodeDesc
name|inputExpr
init|=
name|params
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|inputType
init|=
name|getNormalizedTypeName
argument_list|(
name|inputExpr
operator|.
name|getTypeString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|aggDef
range|:
name|aggregatesDefinition
control|)
block|{
if|if
condition|(
name|aggDef
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|aggregateName
argument_list|)
operator|&&
name|aggDef
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|inputType
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|VectorAggregateExpression
argument_list|>
name|aggClass
init|=
call|(
name|Class
argument_list|<
name|?
extends|extends
name|VectorAggregateExpression
argument_list|>
call|)
argument_list|(
name|aggDef
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|VectorAggregateExpression
argument_list|>
name|ctor
init|=
name|aggClass
operator|.
name|getConstructor
argument_list|(
name|VectorExpression
operator|.
name|class
argument_list|)
decl_stmt|;
name|VectorAggregateExpression
name|aggExpr
init|=
name|ctor
operator|.
name|newInstance
argument_list|(
name|vectorParams
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
return|return
name|aggExpr
return|;
block|}
comment|// TODO: change to 1.7 syntax when possible
comment|//catch (InvocationTargetException | IllegalAccessException
comment|// | NoSuchMethodException | InstantiationException)
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal exception for vector aggregate : \""
operator|+
name|aggregateName
operator|+
literal|"\" for type: \""
operator|+
name|inputType
operator|+
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Vector aggregate not implemented: \""
operator|+
name|aggregateName
operator|+
literal|"\" for type: \""
operator|+
name|inputType
operator|+
literal|""
argument_list|)
throw|;
block|}
specifier|static
name|Object
index|[]
index|[]
name|columnTypes
init|=
block|{
block|{
literal|"Double"
block|,
name|DoubleColumnVector
operator|.
name|class
block|}
block|,
block|{
literal|"Long"
block|,
name|LongColumnVector
operator|.
name|class
block|}
block|,
block|{
literal|"String"
block|,
name|BytesColumnVector
operator|.
name|class
block|}
block|,   }
decl_stmt|;
specifier|public
name|VectorizedRowBatch
name|allocateRowBatch
parameter_list|(
name|int
name|rowCount
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|ret
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|nextOutputColumn
argument_list|,
name|rowCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nextOutputColumn
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
literal|false
operator|==
name|outputColumnTypes
operator|.
name|containsKey
argument_list|(
name|i
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|columnTypeName
init|=
name|outputColumnTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|columnType
range|:
name|columnTypes
control|)
block|{
if|if
condition|(
name|columnTypeName
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|columnType
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ColumnVector
argument_list|>
name|columnTypeClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|ColumnVector
argument_list|>
operator|)
name|columnType
index|[
literal|1
index|]
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|ColumnVector
argument_list|>
name|ctor
init|=
name|columnTypeClass
operator|.
name|getConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|ret
operator|.
name|cols
index|[
name|i
index|]
operator|=
name|ctor
operator|.
name|newInstance
argument_list|(
name|rowCount
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Internal exception occured trying to allocate a vectorized column %d of type %s"
argument_list|,
name|i
argument_list|,
name|columnTypeName
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
name|Object
index|[]
index|[]
name|mapObjectInspectors
init|=
block|{
block|{
literal|"double"
block|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
block|}
block|,
block|{
literal|"long"
block|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
block|}
block|,   }
decl_stmt|;
specifier|public
name|ObjectInspector
name|getVectorRowObjectInspector
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|oids
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|columnName
range|:
name|columnNames
control|)
block|{
name|int
name|columnIndex
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|String
name|outputType
init|=
name|outputColumnTypes
operator|.
name|get
argument_list|(
name|columnIndex
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|moi
range|:
name|mapObjectInspectors
control|)
block|{
if|if
condition|(
name|outputType
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|moi
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|oi
operator|=
operator|(
name|ObjectInspector
operator|)
name|moi
index|[
literal|1
index|]
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|oi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unsuported type: %s for column %d:%s"
argument_list|,
name|outputType
argument_list|,
name|columnIndex
argument_list|,
name|columnName
argument_list|)
argument_list|)
throw|;
block|}
name|oids
operator|.
name|add
argument_list|(
name|oi
argument_list|)
expr_stmt|;
block|}
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|oids
argument_list|)
return|;
block|}
block|}
end_class

end_unit

