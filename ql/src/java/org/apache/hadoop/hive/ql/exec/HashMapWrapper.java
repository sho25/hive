begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|RecordManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|RecordManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|RecordManagerOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|htree
operator|.
name|HTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|helper
operator|.
name|FastIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MRU
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|DCLLItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Simple wrapper for persistent Hashmap implementing only the put/get/remove/clear interface.  * The main memory hash table acts as a cache and all put/get will operate on it first. If the  * size of the main memory hash table exceeds a certain threshold, new elements will go into  * the persistent hash table.  */
end_comment

begin_class
specifier|public
class|class
name|HashMapWrapper
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
specifier|protected
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// default threshold for using main memory based HashMap
specifier|private
specifier|static
specifier|final
name|int
name|THRESHOLD
init|=
literal|25000
decl_stmt|;
specifier|private
name|int
name|threshold
decl_stmt|;
comment|// threshold to put data into persistent hash table instead
specifier|private
name|HashMap
argument_list|<
name|K
argument_list|,
name|MRUItem
argument_list|>
name|mHash
decl_stmt|;
comment|// main memory HashMap
specifier|private
name|HTree
name|pHash
decl_stmt|;
comment|// persistent HashMap
specifier|private
name|RecordManager
name|recman
decl_stmt|;
comment|// record manager required by HTree
specifier|private
name|File
name|tmpFile
decl_stmt|;
comment|// temp file holding the persistent data from record manager.
specifier|private
name|MRU
argument_list|<
name|MRUItem
argument_list|>
name|MRUList
decl_stmt|;
comment|// MRU cache entry
comment|/**    * Doubly linked list of value items.    * Note: this is only used along with memory hash table. Persistent hash stores the value directory.    */
class|class
name|MRUItem
extends|extends
name|DCLLItem
block|{
name|K
name|key
decl_stmt|;
name|V
name|value
decl_stmt|;
name|MRUItem
parameter_list|(
name|K
name|k
parameter_list|,
name|V
name|v
parameter_list|)
block|{
name|key
operator|=
name|k
expr_stmt|;
name|value
operator|=
name|v
expr_stmt|;
block|}
block|}
comment|/**    * Constructor.    * @param threshold User specified threshold to store new values into persistent storage.    */
specifier|public
name|HashMapWrapper
parameter_list|(
name|int
name|threshold
parameter_list|)
block|{
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
name|this
operator|.
name|pHash
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|recman
operator|=
literal|null
expr_stmt|;
name|mHash
operator|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|MRUItem
argument_list|>
argument_list|()
expr_stmt|;
name|MRUList
operator|=
operator|new
name|MRU
argument_list|<
name|MRUItem
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HashMapWrapper
parameter_list|()
block|{
name|this
argument_list|(
name|THRESHOLD
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the value based on the key. We try to get it from the main memory hash table first.    * If it is not there we will look up the persistent hash table. This function also guarantees    * if any item is found given a key, it is available in main memory HashMap. So mutating the     * returned value will be reflected (saved) in HashMapWrapper.    * @param key    * @return Value corresponding to the key. If the key is not found, return null.    */
specifier|public
name|V
name|get
parameter_list|(
name|K
name|key
parameter_list|)
throws|throws
name|HiveException
block|{
name|V
name|value
init|=
literal|null
decl_stmt|;
comment|// if not the MRU, searching the main memory hash table.
name|MRUItem
name|item
init|=
name|mHash
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|item
operator|.
name|value
expr_stmt|;
name|MRUList
operator|.
name|moveToHead
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pHash
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|value
operator|=
operator|(
name|V
operator|)
name|pHash
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mHash
operator|.
name|size
argument_list|()
operator|<
name|threshold
condition|)
block|{
name|mHash
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|MRUItem
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|pHash
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|threshold
operator|>
literal|0
condition|)
block|{
comment|// flush the LRU to disk
name|MRUItem
name|tail
init|=
name|MRUList
operator|.
name|tail
argument_list|()
decl_stmt|;
comment|// least recently used item
name|pHash
operator|.
name|put
argument_list|(
name|tail
operator|.
name|key
argument_list|,
name|tail
operator|.
name|value
argument_list|)
expr_stmt|;
name|pHash
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|recman
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// update mHash -- reuse MRUItem
name|item
operator|=
name|mHash
operator|.
name|remove
argument_list|(
name|tail
operator|.
name|key
argument_list|)
expr_stmt|;
name|item
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|item
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|mHash
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|item
argument_list|)
expr_stmt|;
comment|// update MRU -- reusing MRUItem
name|tail
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|tail
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|MRUList
operator|.
name|moveToHead
argument_list|(
name|tail
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|value
return|;
block|}
comment|/**    * Put the key value pair in the hash table. It will first try to     * put it into the main memory hash table. If the size exceeds the    * threshold, it will put it into the persistent hash table.    * @param key    * @param value    * @throws HiveException    */
specifier|public
name|void
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|mm_size
init|=
name|mHash
operator|.
name|size
argument_list|()
decl_stmt|;
name|MRUItem
name|itm
init|=
name|mHash
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|mm_size
operator|<
name|threshold
condition|)
block|{
if|if
condition|(
name|itm
operator|!=
literal|null
condition|)
block|{
comment|// re-use the MRU item -- just overwrite value, key is the same
name|itm
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|MRUList
operator|.
name|moveToHead
argument_list|(
name|itm
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mHash
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|value
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
name|LOG
operator|.
name|error
argument_list|(
literal|"HashMapWrapper.put() reuse MRUItem inconsistency [1]."
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|mHash
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|value
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|)
assert|;
block|}
else|else
block|{
comment|// check if key already exists in pHash
try|try
block|{
if|if
condition|(
name|pHash
operator|!=
literal|null
operator|&&
name|pHash
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// remove the old item from pHash and insert the new one
name|pHash
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|pHash
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|recman
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|itm
operator|=
operator|new
name|MRUItem
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|MRUList
operator|.
name|put
argument_list|(
name|itm
argument_list|)
expr_stmt|;
name|mHash
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|itm
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|itm
operator|!=
literal|null
condition|)
block|{
comment|// replace existing item
comment|// re-use the MRU item -- just overwrite value, key is the same
name|itm
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|MRUList
operator|.
name|moveToHead
argument_list|(
name|itm
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mHash
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|value
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
name|LOG
operator|.
name|error
argument_list|(
literal|"HashMapWrapper.put() reuse MRUItem inconsistency [2]."
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|mHash
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|value
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|)
assert|;
block|}
else|else
block|{
comment|// for items inserted into persistent hash table, we don't put it into MRU
try|try
block|{
if|if
condition|(
name|pHash
operator|==
literal|null
condition|)
block|{
comment|// Create a temporary file for the page manager to hold persistent data.
comment|// Delete it if the JVM terminate normally.
comment|// Caveat: it won't be deleted if JVM is killed by 'kill -9'.
if|if
condition|(
name|tmpFile
operator|!=
literal|null
condition|)
name|tmpFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tmpFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"HashMapWrapper"
argument_list|,
literal|".tmp"
argument_list|)
expr_stmt|;
name|tmpFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|RecordManagerOptions
operator|.
name|CACHE_TYPE
argument_list|,
name|RecordManagerOptions
operator|.
name|NO_CACHE
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|RecordManagerOptions
operator|.
name|DISABLE_TRANSACTIONS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|recman
operator|=
name|RecordManagerFactory
operator|.
name|createRecordManager
argument_list|(
name|tmpFile
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|pHash
operator|=
name|HTree
operator|.
name|createInstance
argument_list|(
name|recman
argument_list|)
expr_stmt|;
block|}
name|pHash
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|recman
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**    * Clean up the hash table. All elements in the main memory hash table will be removed, and    * the persistent hash table will be destroyed (temporary file will be deleted).    */
specifier|public
name|void
name|clear
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|mHash
operator|!=
literal|null
condition|)
block|{
name|mHash
operator|.
name|clear
argument_list|()
expr_stmt|;
name|MRUList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Remove one key-value pairs from the hash table based on the given key. If the pairs are    * removed from the main memory hash table, pairs in the persistent hash table will not be    * moved to the main memory hash table. Future inserted elements will go into the main memory    * hash table though.    * @param key    * @throws HiveException    */
specifier|public
name|void
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|HiveException
block|{
name|MRUItem
name|entry
init|=
name|mHash
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|MRUList
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pHash
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|pHash
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * There will be no more put to the hash map before it is destroyed or cleared.     * This is used to optimize MRU list maintenance cost.    */
specifier|public
name|void
name|noMorePut
parameter_list|()
block|{
if|if
condition|(
name|pHash
operator|==
literal|null
condition|)
block|{
comment|// all data in main memory, no need MRU
block|}
block|}
comment|/**    * Get a list of all keys in the hash map.    * @return    */
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
name|HashSet
argument_list|<
name|K
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mHash
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
operator|new
name|HashSet
argument_list|<
name|K
argument_list|>
argument_list|()
expr_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|mHash
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pHash
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|FastIterator
name|fitr
init|=
name|pHash
operator|.
name|keys
argument_list|()
decl_stmt|;
if|if
condition|(
name|fitr
operator|!=
literal|null
condition|)
block|{
name|K
name|k
decl_stmt|;
while|while
condition|(
operator|(
name|k
operator|=
operator|(
name|K
operator|)
name|fitr
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Get the main memory cache capacity.     * @return the maximum number of items can be put into main memory HashMap cache.    */
specifier|public
name|int
name|cacheSize
parameter_list|()
block|{
return|return
name|threshold
return|;
block|}
comment|/**    * Close the persistent hash table and clean it up.    * @throws HiveException    */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|pHash
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|recman
operator|!=
literal|null
condition|)
name|recman
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// delete the temporary file
name|tmpFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tmpFile
operator|=
literal|null
expr_stmt|;
name|pHash
operator|=
literal|null
expr_stmt|;
name|recman
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

