begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveBaseChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|timestamp
operator|.
name|NanoTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|timestamp
operator|.
name|NanoTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|bytes
operator|.
name|ByteBufferInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|column
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|column
operator|.
name|values
operator|.
name|ValuesReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|OriginalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|PrimitiveType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Parquet file has self-describing schema which may differ from the user required schema (e.g.  * schema evolution). This factory is used to retrieve user required typed data via corresponding  * reader which reads the underlying data.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ParquetDataColumnReaderFactory
block|{
specifier|private
name|ParquetDataColumnReaderFactory
parameter_list|()
block|{   }
comment|/**    * The default data column reader for existing Parquet page reader which works for both    * dictionary or non dictionary types, Mirror from dictionary encoding path.    */
specifier|public
specifier|static
class|class
name|DefaultParquetDataColumnReader
implements|implements
name|ParquetDataColumnReader
block|{
specifier|protected
name|ValuesReader
name|valuesReader
decl_stmt|;
specifier|protected
name|Dictionary
name|dict
decl_stmt|;
comment|// Varchar or char length
specifier|protected
name|int
name|length
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|DefaultParquetDataColumnReader
parameter_list|(
name|ValuesReader
name|valuesReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|valuesReader
operator|=
name|valuesReader
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|DefaultParquetDataColumnReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|dict
operator|=
name|dict
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initFromPage
parameter_list|(
name|int
name|i
parameter_list|,
name|ByteBufferInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|valuesReader
operator|.
name|initFromPage
argument_list|(
name|i
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|readBoolean
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readBoolean
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|readBoolean
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToBoolean
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readString
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToBinary
argument_list|(
name|id
argument_list|)
operator|.
name|getBytesUnsafe
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readString
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readBytes
argument_list|()
operator|.
name|getBytesUnsafe
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|()
block|{
comment|// we need to enforce the size here even the types are the same
return|return
name|valuesReader
operator|.
name|readBytes
argument_list|()
operator|.
name|getBytesUnsafe
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToBinary
argument_list|(
name|id
argument_list|)
operator|.
name|getBytesUnsafe
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readBytes
argument_list|()
operator|.
name|getBytesUnsafe
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToBinary
argument_list|(
name|id
argument_list|)
operator|.
name|getBytesUnsafe
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readBytes
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readBytes
argument_list|()
operator|.
name|getBytesUnsafe
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readBytes
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToBinary
argument_list|(
name|id
argument_list|)
operator|.
name|getBytesUnsafe
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readDecimal
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readBytes
argument_list|()
operator|.
name|getBytesUnsafe
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readDecimal
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToBinary
argument_list|(
name|id
argument_list|)
operator|.
name|getBytesUnsafe
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|readFloat
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readFloat
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|readFloat
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToFloat
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|readDouble
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readDouble
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|readDouble
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToDouble
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Timestamp
name|readTimestamp
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported operation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Timestamp
name|readTimestamp
parameter_list|(
name|int
name|id
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported operation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|readInteger
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readInteger
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|readInteger
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToInt
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|float
name|value
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|readLong
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToLong
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|readLong
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readLong
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|readValueDictionaryId
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readValueDictionaryId
argument_list|()
return|;
block|}
specifier|public
name|void
name|skip
parameter_list|()
block|{
name|valuesReader
operator|.
name|skip
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Dictionary
name|getDictionary
parameter_list|()
block|{
return|return
name|dict
return|;
block|}
comment|/**      * Enforce the max legnth of varchar or char.      */
specifier|protected
name|String
name|enforceMaxLength
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|HiveBaseChar
operator|.
name|enforceMaxLength
argument_list|(
name|value
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**      * Enforce the char length.      */
specifier|protected
name|String
name|getPaddedString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|HiveBaseChar
operator|.
name|getPaddedValue
argument_list|(
name|value
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**      * Method to convert string to UTF-8 bytes.      */
specifier|protected
specifier|static
name|byte
index|[]
name|convertToBytes
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
comment|// convert integer to string
return|return
name|value
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to encode string in UTF-8"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * The reader who reads from the underlying int32 value value. Implementation is in consist with    * ETypeConverter EINT32_CONVERTER    */
specifier|public
specifier|static
class|class
name|TypesFromInt32PageReader
extends|extends
name|DefaultParquetDataColumnReader
block|{
specifier|public
name|TypesFromInt32PageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TypesFromInt32PageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|readLong
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readInteger
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|readLong
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToInt
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|readFloat
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readInteger
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|readFloat
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToInt
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|readDouble
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readInteger
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|readDouble
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToInt
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readString
parameter_list|()
block|{
return|return
name|convertToBytes
argument_list|(
name|valuesReader
operator|.
name|readInteger
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readString
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|convertToBytes
argument_list|(
name|dict
operator|.
name|decodeToInt
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|()
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|valuesReader
operator|.
name|readInteger
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|dict
operator|.
name|decodeToInt
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|()
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|valuesReader
operator|.
name|readInteger
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|dict
operator|.
name|decodeToInt
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|convertToString
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|convertToBytes
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
name|convertToBytes
argument_list|(
name|convertToString
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * The reader who reads from the underlying int64 value value. Implementation is in consist with    * ETypeConverter EINT64_CONVERTER    */
specifier|public
specifier|static
class|class
name|TypesFromInt64PageReader
extends|extends
name|DefaultParquetDataColumnReader
block|{
specifier|public
name|TypesFromInt64PageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TypesFromInt64PageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|readInteger
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readLong
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|readInteger
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToLong
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|readFloat
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readLong
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|readFloat
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToLong
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|readDouble
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readLong
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|readDouble
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToLong
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readString
parameter_list|()
block|{
return|return
name|convertToBytes
argument_list|(
name|valuesReader
operator|.
name|readLong
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readString
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|convertToBytes
argument_list|(
name|dict
operator|.
name|decodeToLong
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|()
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|valuesReader
operator|.
name|readLong
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|dict
operator|.
name|decodeToLong
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|()
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|valuesReader
operator|.
name|readLong
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|dict
operator|.
name|decodeToLong
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|convertToString
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|convertToBytes
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
name|convertToBytes
argument_list|(
name|convertToString
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * The reader who reads long data using int type.    */
specifier|public
specifier|static
class|class
name|Types64Int2IntPageReader
extends|extends
name|TypesFromInt64PageReader
block|{
specifier|public
name|Types64Int2IntPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Types64Int2IntPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|(
operator|(
name|value
operator|<=
name|Integer
operator|.
name|MAX_VALUE
operator|)
operator|&&
operator|(
name|value
operator|>=
name|Integer
operator|.
name|MIN_VALUE
operator|)
operator|)
return|;
block|}
block|}
comment|/**    * The reader who reads long data using smallint type.    */
specifier|public
specifier|static
class|class
name|Types64Int2SmallintPageReader
extends|extends
name|TypesFromInt64PageReader
block|{
specifier|public
name|Types64Int2SmallintPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Types64Int2SmallintPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|(
operator|(
name|value
operator|<=
name|Short
operator|.
name|MAX_VALUE
operator|)
operator|&&
operator|(
name|value
operator|>=
name|Short
operator|.
name|MIN_VALUE
operator|)
operator|)
return|;
block|}
block|}
comment|/**    * The reader who reads long data using tinyint type.    */
specifier|public
specifier|static
class|class
name|Types64Int2TinyintPageReader
extends|extends
name|TypesFromInt64PageReader
block|{
specifier|public
name|Types64Int2TinyintPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Types64Int2TinyintPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|(
operator|(
name|value
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|)
operator|&&
operator|(
name|value
operator|>=
name|Byte
operator|.
name|MIN_VALUE
operator|)
operator|)
return|;
block|}
block|}
comment|/**    * The reader who reads long data using Decimal type.    */
specifier|public
specifier|static
class|class
name|Types64Int2DecimalPageReader
extends|extends
name|TypesFromInt64PageReader
block|{
specifier|private
name|int
name|precision
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|scale
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|HiveDecimalWritable
name|hiveDecimalWritable
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
specifier|public
name|Types64Int2DecimalPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
specifier|public
name|Types64Int2DecimalPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|hiveDecimalWritable
operator|.
name|setFromLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|hiveDecimalWritable
operator|.
name|mutateEnforcePrecisionScale
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
return|return
name|hiveDecimalWritable
operator|.
name|isSet
argument_list|()
return|;
block|}
block|}
comment|/**    * The reader who reads unsigned long data.    */
specifier|public
specifier|static
class|class
name|TypesFromUInt64PageReader
extends|extends
name|TypesFromInt64PageReader
block|{
specifier|public
name|TypesFromUInt64PageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TypesFromUInt64PageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|>=
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|float
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|>=
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|>=
literal|0
operator|)
return|;
block|}
block|}
comment|/**    * The reader who reads unsigned long data using int type.    */
specifier|public
specifier|static
class|class
name|Types64UInt2IntPageReader
extends|extends
name|TypesFromInt64PageReader
block|{
specifier|public
name|Types64UInt2IntPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Types64UInt2IntPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|(
operator|(
name|value
operator|<=
name|Integer
operator|.
name|MAX_VALUE
operator|)
operator|&&
operator|(
name|value
operator|>=
literal|0
operator|)
operator|)
return|;
block|}
block|}
comment|/**    * The reader who reads unsigned long data using smallint type.    */
specifier|public
specifier|static
class|class
name|Types64UInt2SmallintPageReader
extends|extends
name|TypesFromInt64PageReader
block|{
specifier|public
name|Types64UInt2SmallintPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Types64UInt2SmallintPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|(
operator|(
name|value
operator|<=
name|Short
operator|.
name|MAX_VALUE
operator|)
operator|&&
operator|(
name|value
operator|>=
literal|0
operator|)
operator|)
return|;
block|}
block|}
comment|/**    * The reader who reads unsigned long data using tinyint type.    */
specifier|public
specifier|static
class|class
name|Types64UInt2TinyintPageReader
extends|extends
name|TypesFromInt64PageReader
block|{
specifier|public
name|Types64UInt2TinyintPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Types64UInt2TinyintPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|(
operator|(
name|value
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|)
operator|&&
operator|(
name|value
operator|>=
literal|0
operator|)
operator|)
return|;
block|}
block|}
comment|/**    * The reader who reads unsigned long data using Decimal type.    */
specifier|public
specifier|static
class|class
name|Types64UInt2DecimalPageReader
extends|extends
name|TypesFromInt64PageReader
block|{
specifier|private
name|int
name|precision
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|scale
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|HiveDecimalWritable
name|hiveDecimalWritable
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
specifier|public
name|Types64UInt2DecimalPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
specifier|public
name|Types64UInt2DecimalPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|hiveDecimalWritable
operator|.
name|setFromLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|hiveDecimalWritable
operator|.
name|mutateEnforcePrecisionScale
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|value
operator|>=
literal|0
operator|)
operator|&&
name|hiveDecimalWritable
operator|.
name|isSet
argument_list|()
operator|)
return|;
block|}
block|}
comment|/**    * The reader who reads int data using smallint type.    */
specifier|public
specifier|static
class|class
name|Types32Int2SmallintPageReader
extends|extends
name|TypesFromInt32PageReader
block|{
specifier|public
name|Types32Int2SmallintPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Types32Int2SmallintPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|(
operator|(
name|value
operator|<=
name|Short
operator|.
name|MAX_VALUE
operator|)
operator|&&
operator|(
name|value
operator|>=
name|Short
operator|.
name|MIN_VALUE
operator|)
operator|)
return|;
block|}
block|}
comment|/**    * The reader who reads int data using tinyint type.    */
specifier|public
specifier|static
class|class
name|Types32Int2TinyintPageReader
extends|extends
name|TypesFromInt32PageReader
block|{
specifier|public
name|Types32Int2TinyintPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Types32Int2TinyintPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|(
operator|(
name|value
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|)
operator|&&
operator|(
name|value
operator|>=
name|Byte
operator|.
name|MIN_VALUE
operator|)
operator|)
return|;
block|}
block|}
comment|/**    * The reader who reads int data using Decimal type.    */
specifier|public
specifier|static
class|class
name|Types32Int2DecimalPageReader
extends|extends
name|TypesFromInt32PageReader
block|{
specifier|private
name|int
name|precision
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|scale
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|HiveDecimalWritable
name|hiveDecimalWritable
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
specifier|public
name|Types32Int2DecimalPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
specifier|public
name|Types32Int2DecimalPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|hiveDecimalWritable
operator|.
name|setFromLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|hiveDecimalWritable
operator|.
name|mutateEnforcePrecisionScale
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
return|return
name|hiveDecimalWritable
operator|.
name|isSet
argument_list|()
return|;
block|}
block|}
comment|/**    * The reader who reads unsigned int data.    */
specifier|public
specifier|static
class|class
name|TypesFromUInt32PageReader
extends|extends
name|TypesFromInt32PageReader
block|{
specifier|public
name|TypesFromUInt32PageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TypesFromUInt32PageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|>=
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|float
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|>=
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|>=
literal|0
operator|)
return|;
block|}
block|}
comment|/**    * The reader who reads unsigned int data using smallint type.    */
specifier|public
specifier|static
class|class
name|Types32UInt2SmallintPageReader
extends|extends
name|TypesFromInt32PageReader
block|{
specifier|public
name|Types32UInt2SmallintPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Types32UInt2SmallintPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|(
operator|(
name|value
operator|<=
name|Short
operator|.
name|MAX_VALUE
operator|)
operator|&&
operator|(
name|value
operator|>=
literal|0
operator|)
operator|)
return|;
block|}
block|}
comment|/**    * The reader who reads unsigned int data using tinyint type.    */
specifier|public
specifier|static
class|class
name|Types32UInt2TinyintPageReader
extends|extends
name|TypesFromInt32PageReader
block|{
specifier|public
name|Types32UInt2TinyintPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Types32UInt2TinyintPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|(
operator|(
name|value
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|)
operator|&&
operator|(
name|value
operator|>=
literal|0
operator|)
operator|)
return|;
block|}
block|}
comment|/**    * The reader who reads unsigned int data using Decimal type.    */
specifier|public
specifier|static
class|class
name|Types32UInt2DecimalPageReader
extends|extends
name|TypesFromInt32PageReader
block|{
specifier|private
name|int
name|precision
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|scale
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|HiveDecimalWritable
name|hiveDecimalWritable
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
specifier|public
name|Types32UInt2DecimalPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
specifier|public
name|Types32UInt2DecimalPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|hiveDecimalWritable
operator|.
name|setFromLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|hiveDecimalWritable
operator|.
name|mutateEnforcePrecisionScale
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|value
operator|>=
literal|0
operator|)
operator|&&
name|hiveDecimalWritable
operator|.
name|isSet
argument_list|()
operator|)
return|;
block|}
block|}
comment|/**    * The reader who reads from the underlying float value value. Implementation is in consist with    * ETypeConverter EFLOAT_CONVERTER    */
specifier|public
specifier|static
class|class
name|TypesFromFloatPageReader
extends|extends
name|DefaultParquetDataColumnReader
block|{
specifier|public
name|TypesFromFloatPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TypesFromFloatPageReader
parameter_list|(
name|Dictionary
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|readDouble
parameter_list|()
block|{
return|return
name|valuesReader
operator|.
name|readFloat
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|readDouble
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|dict
operator|.
name|decodeToFloat
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readString
parameter_list|()
block|{
return|return
name|convertToBytes
argument_list|(
name|valuesReader
operator|.
name|readFloat
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readString
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|convertToBytes
argument_list|(
name|dict
operator|.
name|decodeToFloat
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|()
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|valuesReader
operator|.
name|readFloat
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|dict
operator|.
name|decodeToFloat
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|()
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|valuesReader
operator|.
name|readFloat
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|dict
operator|.
name|decodeToFloat
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|convertToString
parameter_list|(
name|float
name|value
parameter_list|)
block|{
return|return
name|Float
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|convertToBytes
parameter_list|(
name|float
name|value
parameter_list|)
block|{
return|return
name|convertToBytes
argument_list|(
name|convertToString
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * The reader who reads from the underlying double value value.    */
specifier|public
specifier|static
class|class
name|TypesFromDoublePageReader
extends|extends
name|DefaultParquetDataColumnReader
block|{
specifier|public
name|TypesFromDoublePageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TypesFromDoublePageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readString
parameter_list|()
block|{
return|return
name|convertToBytes
argument_list|(
name|valuesReader
operator|.
name|readDouble
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readString
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|convertToBytes
argument_list|(
name|dict
operator|.
name|decodeToDouble
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|()
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|valuesReader
operator|.
name|readDouble
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|dict
operator|.
name|decodeToDouble
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|()
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|valuesReader
operator|.
name|readDouble
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|dict
operator|.
name|decodeToDouble
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|convertToString
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
name|Double
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|convertToBytes
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
name|convertToBytes
argument_list|(
name|convertToString
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * The reader who reads from the underlying boolean value value.    */
specifier|public
specifier|static
class|class
name|TypesFromBooleanPageReader
extends|extends
name|DefaultParquetDataColumnReader
block|{
specifier|public
name|TypesFromBooleanPageReader
parameter_list|(
name|ValuesReader
name|valuesReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TypesFromBooleanPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readString
parameter_list|()
block|{
return|return
name|convertToBytes
argument_list|(
name|valuesReader
operator|.
name|readBoolean
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readString
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|convertToBytes
argument_list|(
name|dict
operator|.
name|decodeToBoolean
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|()
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|valuesReader
operator|.
name|readBoolean
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|dict
operator|.
name|decodeToBoolean
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|()
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|valuesReader
operator|.
name|readBoolean
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|dict
operator|.
name|decodeToBoolean
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|convertToString
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|convertToBytes
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
return|return
name|convertToBytes
argument_list|(
name|convertToString
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * The reader who reads from the underlying Timestamp value value.    */
specifier|public
specifier|static
class|class
name|TypesFromInt96PageReader
extends|extends
name|DefaultParquetDataColumnReader
block|{
specifier|private
name|boolean
name|skipTimestampConversion
init|=
literal|false
decl_stmt|;
specifier|public
name|TypesFromInt96PageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|,
name|boolean
name|skipTimestampConversion
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|skipTimestampConversion
operator|=
name|skipTimestampConversion
expr_stmt|;
block|}
specifier|public
name|TypesFromInt96PageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|,
name|boolean
name|skipTimestampConversion
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|skipTimestampConversion
operator|=
name|skipTimestampConversion
expr_stmt|;
block|}
specifier|private
name|Timestamp
name|convert
parameter_list|(
name|Binary
name|binary
parameter_list|)
block|{
name|ByteBuffer
name|buf
init|=
name|binary
operator|.
name|toByteBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
argument_list|)
expr_stmt|;
name|long
name|timeOfDayNanos
init|=
name|buf
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|int
name|julianDay
init|=
name|buf
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|NanoTime
name|nt
init|=
operator|new
name|NanoTime
argument_list|(
name|julianDay
argument_list|,
name|timeOfDayNanos
argument_list|)
decl_stmt|;
return|return
name|NanoTimeUtils
operator|.
name|getTimestamp
argument_list|(
name|nt
argument_list|,
name|skipTimestampConversion
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Timestamp
name|readTimestamp
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|dict
operator|.
name|decodeToBinary
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Timestamp
name|readTimestamp
parameter_list|()
block|{
return|return
name|convert
argument_list|(
name|valuesReader
operator|.
name|readBytes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readString
parameter_list|()
block|{
return|return
name|convertToBytes
argument_list|(
name|readTimestamp
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readString
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|convertToBytes
argument_list|(
name|readTimestamp
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|()
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|readTimestamp
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|readTimestamp
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|()
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|readTimestamp
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|readTimestamp
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|convertToString
parameter_list|(
name|Timestamp
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|convertToBytes
parameter_list|(
name|Timestamp
name|value
parameter_list|)
block|{
return|return
name|convertToBytes
argument_list|(
name|convertToString
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * The reader who reads from the underlying decimal value value.    */
specifier|public
specifier|static
class|class
name|TypesFromDecimalPageReader
extends|extends
name|DefaultParquetDataColumnReader
block|{
specifier|private
name|HiveDecimalWritable
name|tempDecimal
init|=
operator|new
name|HiveDecimalWritable
argument_list|()
decl_stmt|;
specifier|private
name|short
name|scale
decl_stmt|;
specifier|public
name|TypesFromDecimalPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|,
name|short
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
specifier|public
name|TypesFromDecimalPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|,
name|short
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readString
parameter_list|()
block|{
return|return
name|convertToBytes
argument_list|(
name|valuesReader
operator|.
name|readBytes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readString
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|convertToBytes
argument_list|(
name|dict
operator|.
name|decodeToBinary
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|()
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|valuesReader
operator|.
name|readBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|dict
operator|.
name|decodeToBinary
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|()
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|valuesReader
operator|.
name|readBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|String
name|value
init|=
name|enforceMaxLength
argument_list|(
name|convertToString
argument_list|(
name|dict
operator|.
name|decodeToBinary
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToBytes
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
name|String
name|convertToString
parameter_list|(
name|Binary
name|value
parameter_list|)
block|{
name|tempDecimal
operator|.
name|set
argument_list|(
name|value
operator|.
name|getBytesUnsafe
argument_list|()
argument_list|,
name|scale
argument_list|)
expr_stmt|;
return|return
name|tempDecimal
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|convertToBytes
parameter_list|(
name|Binary
name|value
parameter_list|)
block|{
return|return
name|convertToBytes
argument_list|(
name|convertToString
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * The reader who reads from the underlying UTF8 string.    */
specifier|public
specifier|static
class|class
name|TypesFromStringPageReader
extends|extends
name|DefaultParquetDataColumnReader
block|{
specifier|public
name|TypesFromStringPageReader
parameter_list|(
name|ValuesReader
name|realReader
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|realReader
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TypesFromStringPageReader
parameter_list|(
name|Dictionary
name|dict
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|()
block|{
comment|// check the character numbers with the length
specifier|final
name|byte
index|[]
name|value
init|=
name|valuesReader
operator|.
name|readBytes
argument_list|()
operator|.
name|getBytesUnsafe
argument_list|()
decl_stmt|;
return|return
name|truncateIfNecesssary
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readVarchar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
comment|// check the character numbers with the length
specifier|final
name|byte
index|[]
name|value
init|=
name|dict
operator|.
name|decodeToBinary
argument_list|(
name|id
argument_list|)
operator|.
name|getBytesUnsafe
argument_list|()
decl_stmt|;
return|return
name|truncateIfNecesssary
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|()
block|{
comment|// check the character numbers with the length
specifier|final
name|byte
index|[]
name|value
init|=
name|valuesReader
operator|.
name|readBytes
argument_list|()
operator|.
name|getBytesUnsafe
argument_list|()
decl_stmt|;
return|return
name|truncateIfNecesssary
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readChar
parameter_list|(
name|int
name|id
parameter_list|)
block|{
comment|// check the character numbers with the length
specifier|final
name|byte
index|[]
name|value
init|=
name|dict
operator|.
name|decodeToBinary
argument_list|(
name|id
argument_list|)
operator|.
name|getBytesUnsafe
argument_list|()
decl_stmt|;
return|return
name|truncateIfNecesssary
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|private
name|byte
index|[]
name|truncateIfNecesssary
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|length
operator|<=
literal|0
operator|||
name|bytes
operator|==
literal|null
condition|)
block|{
return|return
name|bytes
return|;
block|}
name|int
name|len
init|=
name|bytes
operator|.
name|length
decl_stmt|;
name|int
name|truncatedLength
init|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|truncatedLength
operator|>=
name|len
condition|)
block|{
return|return
name|bytes
return|;
block|}
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|bytes
argument_list|,
name|truncatedLength
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|ParquetDataColumnReader
name|getDataColumnReaderByTypeHelper
parameter_list|(
name|boolean
name|isDictionary
parameter_list|,
name|PrimitiveType
name|parquetType
parameter_list|,
name|TypeInfo
name|hiveType
parameter_list|,
name|Dictionary
name|dictionary
parameter_list|,
name|ValuesReader
name|valuesReader
parameter_list|,
name|boolean
name|skipTimestampConversion
parameter_list|)
throws|throws
name|IOException
block|{
comment|// max length for varchar and char cases
name|int
name|length
init|=
name|getVarcharLength
argument_list|(
name|hiveType
argument_list|)
decl_stmt|;
name|String
name|typeName
init|=
name|TypeInfoUtils
operator|.
name|getBaseName
argument_list|(
name|hiveType
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|parquetType
operator|.
name|getPrimitiveTypeName
argument_list|()
condition|)
block|{
case|case
name|INT32
case|:
if|if
condition|(
name|OriginalType
operator|.
name|UINT_8
operator|==
name|parquetType
operator|.
name|getOriginalType
argument_list|()
operator|||
name|OriginalType
operator|.
name|UINT_16
operator|==
name|parquetType
operator|.
name|getOriginalType
argument_list|()
operator|||
name|OriginalType
operator|.
name|UINT_32
operator|==
name|parquetType
operator|.
name|getOriginalType
argument_list|()
operator|||
name|OriginalType
operator|.
name|UINT_64
operator|==
name|parquetType
operator|.
name|getOriginalType
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
case|:
return|return
name|isDictionary
condition|?
operator|new
name|Types32UInt2SmallintPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|Types32UInt2SmallintPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
case|case
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
case|:
return|return
name|isDictionary
condition|?
operator|new
name|Types32UInt2TinyintPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|Types32UInt2TinyintPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
case|case
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
case|:
return|return
name|isDictionary
condition|?
operator|new
name|Types32UInt2DecimalPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveType
operator|)
operator|.
name|getPrecision
argument_list|()
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveType
operator|)
operator|.
name|getScale
argument_list|()
argument_list|)
else|:
operator|new
name|Types32UInt2DecimalPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveType
operator|)
operator|.
name|getPrecision
argument_list|()
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveType
operator|)
operator|.
name|getScale
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|isDictionary
condition|?
operator|new
name|TypesFromUInt32PageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|TypesFromUInt32PageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
case|:
return|return
name|isDictionary
condition|?
operator|new
name|Types32Int2SmallintPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|Types32Int2SmallintPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
case|case
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
case|:
return|return
name|isDictionary
condition|?
operator|new
name|Types32Int2TinyintPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|Types32Int2TinyintPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
case|case
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
case|:
return|return
name|isDictionary
condition|?
operator|new
name|Types32Int2DecimalPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveType
operator|)
operator|.
name|getPrecision
argument_list|()
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveType
operator|)
operator|.
name|getScale
argument_list|()
argument_list|)
else|:
operator|new
name|Types32Int2DecimalPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveType
operator|)
operator|.
name|getPrecision
argument_list|()
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveType
operator|)
operator|.
name|getScale
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|isDictionary
condition|?
operator|new
name|TypesFromInt32PageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|TypesFromInt32PageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
case|case
name|INT64
case|:
if|if
condition|(
name|OriginalType
operator|.
name|UINT_8
operator|==
name|parquetType
operator|.
name|getOriginalType
argument_list|()
operator|||
name|OriginalType
operator|.
name|UINT_16
operator|==
name|parquetType
operator|.
name|getOriginalType
argument_list|()
operator|||
name|OriginalType
operator|.
name|UINT_32
operator|==
name|parquetType
operator|.
name|getOriginalType
argument_list|()
operator|||
name|OriginalType
operator|.
name|UINT_64
operator|==
name|parquetType
operator|.
name|getOriginalType
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|serdeConstants
operator|.
name|INT_TYPE_NAME
case|:
return|return
name|isDictionary
condition|?
operator|new
name|Types64UInt2IntPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|Types64UInt2IntPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
case|case
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
case|:
return|return
name|isDictionary
condition|?
operator|new
name|Types64UInt2SmallintPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|Types64UInt2SmallintPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
case|case
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
case|:
return|return
name|isDictionary
condition|?
operator|new
name|Types64UInt2TinyintPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|Types64UInt2TinyintPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
case|case
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
case|:
return|return
name|isDictionary
condition|?
operator|new
name|Types64UInt2DecimalPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveType
operator|)
operator|.
name|getPrecision
argument_list|()
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveType
operator|)
operator|.
name|getScale
argument_list|()
argument_list|)
else|:
operator|new
name|Types64UInt2DecimalPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveType
operator|)
operator|.
name|getPrecision
argument_list|()
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveType
operator|)
operator|.
name|getScale
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|isDictionary
condition|?
operator|new
name|TypesFromUInt64PageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|TypesFromUInt64PageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|serdeConstants
operator|.
name|INT_TYPE_NAME
case|:
return|return
name|isDictionary
condition|?
operator|new
name|Types64Int2IntPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|Types64Int2IntPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
case|case
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
case|:
return|return
name|isDictionary
condition|?
operator|new
name|Types64Int2SmallintPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|Types64Int2SmallintPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
case|case
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
case|:
return|return
name|isDictionary
condition|?
operator|new
name|Types64Int2TinyintPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|Types64Int2TinyintPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
case|case
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
case|:
return|return
name|isDictionary
condition|?
operator|new
name|Types64Int2DecimalPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveType
operator|)
operator|.
name|getPrecision
argument_list|()
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveType
operator|)
operator|.
name|getScale
argument_list|()
argument_list|)
else|:
operator|new
name|Types64Int2DecimalPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveType
operator|)
operator|.
name|getPrecision
argument_list|()
argument_list|,
operator|(
operator|(
name|DecimalTypeInfo
operator|)
name|hiveType
operator|)
operator|.
name|getScale
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|isDictionary
condition|?
operator|new
name|TypesFromInt64PageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|TypesFromInt64PageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
case|case
name|FLOAT
case|:
return|return
name|isDictionary
condition|?
operator|new
name|TypesFromFloatPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|TypesFromFloatPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
case|case
name|INT96
case|:
return|return
name|isDictionary
condition|?
operator|new
name|TypesFromInt96PageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|,
name|skipTimestampConversion
argument_list|)
else|:
operator|new
name|TypesFromInt96PageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|,
name|skipTimestampConversion
argument_list|)
return|;
case|case
name|BOOLEAN
case|:
return|return
name|isDictionary
condition|?
operator|new
name|TypesFromBooleanPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|TypesFromBooleanPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
case|case
name|BINARY
case|:
case|case
name|FIXED_LEN_BYTE_ARRAY
case|:
return|return
name|getConvertorFromBinary
argument_list|(
name|isDictionary
argument_list|,
name|parquetType
argument_list|,
name|hiveType
argument_list|,
name|valuesReader
argument_list|,
name|dictionary
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|isDictionary
condition|?
operator|new
name|TypesFromDoublePageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|TypesFromDoublePageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
default|default:
return|return
name|isDictionary
condition|?
operator|new
name|DefaultParquetDataColumnReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|DefaultParquetDataColumnReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|ParquetDataColumnReader
name|getConvertorFromBinary
parameter_list|(
name|boolean
name|isDict
parameter_list|,
name|PrimitiveType
name|parquetType
parameter_list|,
name|TypeInfo
name|hiveType
parameter_list|,
name|ValuesReader
name|valuesReader
parameter_list|,
name|Dictionary
name|dictionary
parameter_list|)
block|{
name|OriginalType
name|originalType
init|=
name|parquetType
operator|.
name|getOriginalType
argument_list|()
decl_stmt|;
comment|// max length for varchar and char cases
name|int
name|length
init|=
name|getVarcharLength
argument_list|(
name|hiveType
argument_list|)
decl_stmt|;
if|if
condition|(
name|originalType
operator|==
literal|null
condition|)
block|{
return|return
name|isDict
condition|?
operator|new
name|DefaultParquetDataColumnReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|DefaultParquetDataColumnReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
block|}
switch|switch
condition|(
name|originalType
condition|)
block|{
case|case
name|DECIMAL
case|:
specifier|final
name|short
name|scale
init|=
operator|(
name|short
operator|)
name|parquetType
operator|.
name|asPrimitiveType
argument_list|()
operator|.
name|getDecimalMetadata
argument_list|()
operator|.
name|getScale
argument_list|()
decl_stmt|;
return|return
name|isDict
condition|?
operator|new
name|TypesFromDecimalPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|,
name|scale
argument_list|)
else|:
operator|new
name|TypesFromDecimalPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|,
name|scale
argument_list|)
return|;
case|case
name|UTF8
case|:
return|return
name|isDict
condition|?
operator|new
name|TypesFromStringPageReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|TypesFromStringPageReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
default|default:
return|return
name|isDict
condition|?
operator|new
name|DefaultParquetDataColumnReader
argument_list|(
name|dictionary
argument_list|,
name|length
argument_list|)
else|:
operator|new
name|DefaultParquetDataColumnReader
argument_list|(
name|valuesReader
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|ParquetDataColumnReader
name|getDataColumnReaderByTypeOnDictionary
parameter_list|(
name|PrimitiveType
name|parquetType
parameter_list|,
name|TypeInfo
name|hiveType
parameter_list|,
name|Dictionary
name|realReader
parameter_list|,
name|boolean
name|skipTimestampConversion
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getDataColumnReaderByTypeHelper
argument_list|(
literal|true
argument_list|,
name|parquetType
argument_list|,
name|hiveType
argument_list|,
name|realReader
argument_list|,
literal|null
argument_list|,
name|skipTimestampConversion
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ParquetDataColumnReader
name|getDataColumnReaderByType
parameter_list|(
name|PrimitiveType
name|parquetType
parameter_list|,
name|TypeInfo
name|hiveType
parameter_list|,
name|ValuesReader
name|realReader
parameter_list|,
name|boolean
name|skipTimestampConversion
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getDataColumnReaderByTypeHelper
argument_list|(
literal|false
argument_list|,
name|parquetType
argument_list|,
name|hiveType
argument_list|,
literal|null
argument_list|,
name|realReader
argument_list|,
name|skipTimestampConversion
argument_list|)
return|;
block|}
comment|// For Varchar or char type, return the max length of the type
specifier|private
specifier|static
name|int
name|getVarcharLength
parameter_list|(
name|TypeInfo
name|hiveType
parameter_list|)
block|{
name|int
name|length
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|hiveType
operator|instanceof
name|PrimitiveTypeInfo
condition|)
block|{
name|PrimitiveTypeInfo
name|hivePrimitiveType
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|hiveType
decl_stmt|;
switch|switch
condition|(
name|hivePrimitiveType
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
name|length
operator|=
operator|(
operator|(
name|CharTypeInfo
operator|)
name|hivePrimitiveType
operator|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
name|length
operator|=
operator|(
operator|(
name|VarcharTypeInfo
operator|)
name|hivePrimitiveType
operator|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|length
return|;
block|}
block|}
end_class

end_unit

