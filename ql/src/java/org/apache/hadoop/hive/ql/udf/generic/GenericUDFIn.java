begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFUtils
operator|.
name|ReturnObjectInspectorResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ConstantObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|minlog
operator|.
name|Log
import|;
end_import

begin_comment
comment|/**  * GenericUDFIn  *  * Example usage:  * SELECT key FROM src WHERE key IN ("238", "1");  *  * From MySQL page on IN(): To comply with the SQL standard, IN returns NULL  * not only if the expression on the left hand side is NULL, but also if no  * match is found in the list and one of the expressions in the list is NULL.  *  * Also noteworthy: type conversion behavior is different from MySQL. With  * expr IN expr1, expr2... in MySQL, exprN will each be converted into the same  * type as expr. In the Hive implementation, all expr(N) will be converted into  * a common type for conversion consistency with other UDF's, and to prevent  * conversions from a big type to a small type (e.g. int to tinyint)  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"in"
argument_list|,
name|value
operator|=
literal|"test _FUNC_(val1, val2...) - returns true if test equals any valN "
argument_list|)
specifier|public
class|class
name|GenericUDFIn
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|transient
name|ObjectInspector
index|[]
name|argumentOIs
decl_stmt|;
comment|// this set is a copy of the arguments objects - avoid serializing
specifier|private
specifier|transient
name|Set
argument_list|<
name|Object
argument_list|>
name|constantInSet
decl_stmt|;
specifier|private
name|boolean
name|isInSetConstant
init|=
literal|true
decl_stmt|;
comment|//are variables from IN(...) constant
specifier|private
specifier|final
name|BooleanWritable
name|bw
init|=
operator|new
name|BooleanWritable
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|ReturnObjectInspectorResolver
name|conversionHelper
decl_stmt|;
specifier|private
specifier|transient
name|ObjectInspector
name|compareOI
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"The function IN requires at least two arguments, got "
operator|+
name|arguments
operator|.
name|length
argument_list|)
throw|;
block|}
name|argumentOIs
operator|=
name|arguments
expr_stmt|;
comment|// We want to use the ReturnObjectInspectorResolver because otherwise
comment|// ObjectInspectorUtils.compare() will return != for two objects that have
comment|// different object inspectors, e.g. 238 and "238". The ROIR will help convert
comment|// both values to a common type so that they can be compared reasonably.
name|conversionHelper
operator|=
operator|new
name|GenericUDFUtils
operator|.
name|ReturnObjectInspectorResolver
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectInspector
name|oi
range|:
name|arguments
control|)
block|{
if|if
condition|(
operator|!
name|conversionHelper
operator|.
name|updateForComparison
argument_list|(
name|oi
argument_list|)
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"The arguments for IN should be the same type! Types are: {"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" IN ("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|arguments
index|[
name|i
index|]
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")}"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|compareOI
operator|=
name|conversionHelper
operator|.
name|get
argument_list|()
expr_stmt|;
name|checkIfInSetConstant
argument_list|()
expr_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBooleanObjectInspector
return|;
block|}
specifier|private
name|void
name|checkIfInSetConstant
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|argumentOIs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|argumentOIs
index|[
name|i
index|]
operator|instanceof
name|ConstantObjectInspector
operator|)
condition|)
block|{
name|isInSetConstant
operator|=
literal|false
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|// we start at index 1, since at 0 is the variable from table column
comment|// (and those from IN(...) follow it)
specifier|private
name|void
name|prepareInSet
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|constantInSet
operator|=
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|compareOI
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|constantInSet
operator|.
name|add
argument_list|(
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|compareOI
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|conversionHelper
operator|.
name|convertIfNecessary
argument_list|(
name|arguments
index|[
name|i
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|argumentOIs
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|constantInSet
operator|.
name|add
argument_list|(
operator|(
operator|(
name|ConstantObjectInspector
operator|)
name|argumentOIs
index|[
name|i
index|]
operator|)
operator|.
name|getWritableConstantValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|bw
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|isInSetConstant
condition|)
block|{
if|if
condition|(
name|constantInSet
operator|==
literal|null
condition|)
block|{
name|prepareInSet
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|compareOI
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
if|if
condition|(
name|constantInSet
operator|.
name|contains
argument_list|(
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|compareOI
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|conversionHelper
operator|.
name|convertIfNecessary
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|argumentOIs
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|bw
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|bw
return|;
block|}
break|break;
block|}
case|case
name|LIST
case|:
block|{
if|if
condition|(
name|constantInSet
operator|.
name|contains
argument_list|(
operator|(
operator|(
name|ListObjectInspector
operator|)
name|compareOI
operator|)
operator|.
name|getList
argument_list|(
name|conversionHelper
operator|.
name|convertIfNecessary
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|argumentOIs
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|bw
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|bw
return|;
block|}
break|break;
block|}
case|case
name|MAP
case|:
block|{
if|if
condition|(
name|constantInSet
operator|.
name|contains
argument_list|(
operator|(
operator|(
name|MapObjectInspector
operator|)
name|compareOI
operator|)
operator|.
name|getMap
argument_list|(
name|conversionHelper
operator|.
name|convertIfNecessary
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|argumentOIs
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|bw
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|bw
return|;
block|}
break|break;
block|}
case|case
name|STRUCT
case|:
block|{
if|if
condition|(
name|constantInSet
operator|.
name|contains
argument_list|(
operator|(
operator|(
name|StructObjectInspector
operator|)
name|compareOI
operator|)
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|conversionHelper
operator|.
name|convertIfNecessary
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|argumentOIs
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|bw
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|bw
return|;
block|}
break|break;
block|}
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Compare of unsupported constant type: "
operator|+
name|compareOI
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|constantInSet
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|conversionHelper
operator|.
name|convertIfNecessary
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|argumentOIs
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|compareOI
argument_list|,
name|conversionHelper
operator|.
name|convertIfNecessary
argument_list|(
name|arguments
index|[
name|i
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|argumentOIs
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
argument_list|,
name|compareOI
argument_list|)
operator|==
literal|0
condition|)
block|{
name|bw
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|bw
return|;
block|}
block|}
comment|// Nothing matched. See comment at top.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arguments
index|[
name|i
index|]
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
return|return
name|bw
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
assert|assert
operator|(
name|children
operator|.
name|length
operator|>=
literal|2
operator|)
assert|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|children
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"IN ("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|children
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|!=
name|children
operator|.
name|length
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

