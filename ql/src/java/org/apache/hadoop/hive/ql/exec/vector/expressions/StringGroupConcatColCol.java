begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExpressionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_comment
comment|/**  * Vectorized instruction to concatenate two string columns and put  * the output in a third column.  */
end_comment

begin_class
specifier|public
class|class
name|StringGroupConcatColCol
extends|extends
name|VectorExpression
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|final
name|int
name|colNum1
decl_stmt|;
specifier|private
specifier|final
name|int
name|colNum2
decl_stmt|;
specifier|public
name|StringGroupConcatColCol
parameter_list|(
name|int
name|colNum1
parameter_list|,
name|int
name|colNum2
parameter_list|,
name|int
name|outputColumnNum
parameter_list|)
block|{
name|super
argument_list|(
name|outputColumnNum
argument_list|)
expr_stmt|;
name|this
operator|.
name|colNum1
operator|=
name|colNum1
expr_stmt|;
name|this
operator|.
name|colNum2
operator|=
name|colNum2
expr_stmt|;
block|}
specifier|public
name|StringGroupConcatColCol
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// Dummy final assignments.
name|colNum1
operator|=
operator|-
literal|1
expr_stmt|;
name|colNum2
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
if|if
condition|(
name|childExpressions
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|evaluateChildren
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|BytesColumnVector
name|inV1
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|colNum1
index|]
decl_stmt|;
name|BytesColumnVector
name|inV2
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|colNum2
index|]
decl_stmt|;
name|BytesColumnVector
name|outV
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|outputColumnNum
index|]
decl_stmt|;
name|int
index|[]
name|sel
init|=
name|batch
operator|.
name|selected
decl_stmt|;
name|int
name|n
init|=
name|batch
operator|.
name|size
decl_stmt|;
name|byte
index|[]
index|[]
name|vector1
init|=
name|inV1
operator|.
name|vector
decl_stmt|;
name|byte
index|[]
index|[]
name|vector2
init|=
name|inV2
operator|.
name|vector
decl_stmt|;
name|int
index|[]
name|len1
init|=
name|inV1
operator|.
name|length
decl_stmt|;
name|int
index|[]
name|len2
init|=
name|inV2
operator|.
name|length
decl_stmt|;
name|int
index|[]
name|start1
init|=
name|inV1
operator|.
name|start
decl_stmt|;
name|int
index|[]
name|start2
init|=
name|inV2
operator|.
name|start
decl_stmt|;
comment|// return immediately if batch is empty
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// prepare output buffer to accept results
name|outV
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
comment|/* Handle default case for isRepeating setting for output. This will be set to true      * later in the special cases where that is necessary.      */
name|outV
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|inV1
operator|.
name|noNulls
operator|&&
operator|!
name|inV2
operator|.
name|noNulls
condition|)
block|{
comment|// propagate nulls
comment|/* We'll assume that there *may* be nulls in the input if !noNulls is true        * for an input vector. This is to be more forgiving of errors in loading        * the vectors. A properly-written vectorized iterator will make sure that        * isNull[0] is set if !noNulls and isRepeating are true for the vector.        */
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|inV2
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|inV2
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
comment|// Output will also be repeating and null
name|outV
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|//return as no further processing is needed
return|return;
block|}
block|}
else|else
block|{
name|propagateNulls
argument_list|(
name|batch
operator|.
name|selectedInUse
argument_list|,
name|n
argument_list|,
name|sel
argument_list|,
name|inV2
argument_list|,
name|outV
argument_list|)
expr_stmt|;
block|}
comment|// perform data operation
if|if
condition|(
name|inV1
operator|.
name|isRepeating
operator|&&
name|inV2
operator|.
name|isRepeating
condition|)
block|{
comment|/* All must be selected otherwise size would be zero.          * Repeating property will not change.          */
if|if
condition|(
operator|!
name|inV2
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
literal|0
argument_list|,
name|vector1
index|[
literal|0
index|]
argument_list|,
name|start1
index|[
literal|0
index|]
argument_list|,
name|len1
index|[
literal|0
index|]
argument_list|,
name|vector2
index|[
literal|0
index|]
argument_list|,
name|start2
index|[
literal|0
index|]
argument_list|,
name|len2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inV1
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|inV2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
literal|0
index|]
argument_list|,
name|start1
index|[
literal|0
index|]
argument_list|,
name|len1
index|[
literal|0
index|]
argument_list|,
name|vector2
index|[
name|i
index|]
argument_list|,
name|start2
index|[
name|i
index|]
argument_list|,
name|len2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inV2
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
literal|0
index|]
argument_list|,
name|start1
index|[
literal|0
index|]
argument_list|,
name|len1
index|[
literal|0
index|]
argument_list|,
name|vector2
index|[
name|i
index|]
argument_list|,
name|start2
index|[
name|i
index|]
argument_list|,
name|len2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|inV2
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|inV2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
name|i
index|]
argument_list|,
name|start1
index|[
name|i
index|]
argument_list|,
name|len1
index|[
name|i
index|]
argument_list|,
name|vector2
index|[
literal|0
index|]
argument_list|,
name|start2
index|[
literal|0
index|]
argument_list|,
name|len2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inV2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
name|i
index|]
argument_list|,
name|start1
index|[
name|i
index|]
argument_list|,
name|len1
index|[
name|i
index|]
argument_list|,
name|vector2
index|[
literal|0
index|]
argument_list|,
name|start2
index|[
literal|0
index|]
argument_list|,
name|len2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|inV2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
name|i
index|]
argument_list|,
name|start1
index|[
name|i
index|]
argument_list|,
name|len1
index|[
name|i
index|]
argument_list|,
name|vector2
index|[
name|i
index|]
argument_list|,
name|start2
index|[
name|i
index|]
argument_list|,
name|len2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inV2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
name|i
index|]
argument_list|,
name|start1
index|[
name|i
index|]
argument_list|,
name|len1
index|[
name|i
index|]
argument_list|,
name|vector2
index|[
name|i
index|]
argument_list|,
name|start2
index|[
name|i
index|]
argument_list|,
name|len2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|inV1
operator|.
name|noNulls
operator|&&
name|inV2
operator|.
name|noNulls
condition|)
block|{
comment|// propagate nulls
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|inV1
operator|.
name|isRepeating
condition|)
block|{
comment|//Output will also be repeating and null
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
comment|//return as no further processing is needed
return|return;
block|}
else|else
block|{
name|propagateNulls
argument_list|(
name|batch
operator|.
name|selectedInUse
argument_list|,
name|n
argument_list|,
name|sel
argument_list|,
name|inV1
argument_list|,
name|outV
argument_list|)
expr_stmt|;
block|}
comment|// perform data operation
if|if
condition|(
name|inV1
operator|.
name|isRepeating
operator|&&
name|inV2
operator|.
name|isRepeating
condition|)
block|{
comment|//All must be selected otherwise size would be zero
comment|//Repeating property will not change.
if|if
condition|(
operator|!
name|inV1
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
literal|0
argument_list|,
name|vector1
index|[
literal|0
index|]
argument_list|,
name|start1
index|[
literal|0
index|]
argument_list|,
name|len1
index|[
literal|0
index|]
argument_list|,
name|vector2
index|[
literal|0
index|]
argument_list|,
name|start2
index|[
literal|0
index|]
argument_list|,
name|len2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inV1
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|inV1
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
literal|0
index|]
argument_list|,
name|start1
index|[
literal|0
index|]
argument_list|,
name|len1
index|[
literal|0
index|]
argument_list|,
name|vector2
index|[
name|i
index|]
argument_list|,
name|start2
index|[
name|i
index|]
argument_list|,
name|len2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inV1
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
literal|0
index|]
argument_list|,
name|start1
index|[
literal|0
index|]
argument_list|,
name|len1
index|[
literal|0
index|]
argument_list|,
name|vector2
index|[
name|i
index|]
argument_list|,
name|start2
index|[
name|i
index|]
argument_list|,
name|len2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|inV2
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|inV1
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
name|i
index|]
argument_list|,
name|start1
index|[
name|i
index|]
argument_list|,
name|len1
index|[
name|i
index|]
argument_list|,
name|vector2
index|[
literal|0
index|]
argument_list|,
name|start2
index|[
literal|0
index|]
argument_list|,
name|len2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inV1
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
name|i
index|]
argument_list|,
name|start1
index|[
name|i
index|]
argument_list|,
name|len1
index|[
name|i
index|]
argument_list|,
name|vector2
index|[
literal|0
index|]
argument_list|,
name|start2
index|[
literal|0
index|]
argument_list|,
name|len2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|inV1
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
name|i
index|]
argument_list|,
name|start1
index|[
name|i
index|]
argument_list|,
name|len1
index|[
name|i
index|]
argument_list|,
name|vector2
index|[
name|i
index|]
argument_list|,
name|start2
index|[
name|i
index|]
argument_list|,
name|len2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inV1
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
name|i
index|]
argument_list|,
name|start1
index|[
name|i
index|]
argument_list|,
name|len1
index|[
name|i
index|]
argument_list|,
name|vector2
index|[
name|i
index|]
argument_list|,
name|start2
index|[
name|i
index|]
argument_list|,
name|len2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|inV1
operator|.
name|noNulls
operator|&&
operator|!
name|inV2
operator|.
name|noNulls
condition|)
block|{
comment|// propagate nulls
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|inV1
operator|.
name|isRepeating
operator|&&
name|inV2
operator|.
name|isRepeating
condition|)
block|{
name|outV
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
name|inV1
operator|.
name|isNull
index|[
literal|0
index|]
operator|||
name|inV2
operator|.
name|isNull
index|[
literal|0
index|]
expr_stmt|;
comment|//Output will also be repeating
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
comment|// return if output is null because no additional work is needed
if|if
condition|(
name|outV
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|inV1
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|inV1
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
comment|// then all output will be null
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
return|return;
block|}
else|else
block|{
name|outV
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|propagateNulls
argument_list|(
name|batch
operator|.
name|selectedInUse
argument_list|,
name|n
argument_list|,
name|sel
argument_list|,
name|inV2
argument_list|,
name|outV
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|inV2
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|inV2
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
return|return;
block|}
else|else
block|{
name|outV
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|propagateNulls
argument_list|(
name|batch
operator|.
name|selectedInUse
argument_list|,
name|n
argument_list|,
name|sel
argument_list|,
name|inV1
argument_list|,
name|outV
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|propagateNullsCombine
argument_list|(
name|batch
operator|.
name|selectedInUse
argument_list|,
name|n
argument_list|,
name|sel
argument_list|,
name|inV1
argument_list|,
name|inV2
argument_list|,
name|outV
argument_list|)
expr_stmt|;
block|}
comment|// perform data operation
if|if
condition|(
name|inV1
operator|.
name|isRepeating
operator|&&
name|inV2
operator|.
name|isRepeating
condition|)
block|{
comment|// All must be selected otherwise size would be zero. Repeating property will not change.
if|if
condition|(
operator|!
name|inV1
operator|.
name|isNull
index|[
literal|0
index|]
operator|&&
operator|!
name|inV2
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
literal|0
argument_list|,
name|vector1
index|[
literal|0
index|]
argument_list|,
name|start1
index|[
literal|0
index|]
argument_list|,
name|len1
index|[
literal|0
index|]
argument_list|,
name|vector2
index|[
literal|0
index|]
argument_list|,
name|start2
index|[
literal|0
index|]
argument_list|,
name|len2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inV1
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|inV1
operator|.
name|isNull
index|[
literal|0
index|]
operator|&&
operator|!
name|inV2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
literal|0
index|]
argument_list|,
name|start1
index|[
literal|0
index|]
argument_list|,
name|len1
index|[
literal|0
index|]
argument_list|,
name|vector2
index|[
name|i
index|]
argument_list|,
name|start2
index|[
name|i
index|]
argument_list|,
name|len2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inV1
operator|.
name|isNull
index|[
literal|0
index|]
operator|&&
operator|!
name|inV2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
literal|0
index|]
argument_list|,
name|start1
index|[
literal|0
index|]
argument_list|,
name|len1
index|[
literal|0
index|]
argument_list|,
name|vector2
index|[
name|i
index|]
argument_list|,
name|start2
index|[
name|i
index|]
argument_list|,
name|len2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|inV2
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|inV1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inV2
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
name|i
index|]
argument_list|,
name|start1
index|[
name|i
index|]
argument_list|,
name|len1
index|[
name|i
index|]
argument_list|,
name|vector2
index|[
literal|0
index|]
argument_list|,
name|start2
index|[
literal|0
index|]
argument_list|,
name|len2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inV1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inV2
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
name|i
index|]
argument_list|,
name|start1
index|[
name|i
index|]
argument_list|,
name|len1
index|[
name|i
index|]
argument_list|,
name|vector2
index|[
literal|0
index|]
argument_list|,
name|start2
index|[
literal|0
index|]
argument_list|,
name|len2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|inV1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inV2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
name|i
index|]
argument_list|,
name|start1
index|[
name|i
index|]
argument_list|,
name|len1
index|[
name|i
index|]
argument_list|,
name|vector2
index|[
name|i
index|]
argument_list|,
name|start2
index|[
name|i
index|]
argument_list|,
name|len2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|inV1
operator|.
name|isNull
index|[
name|i
index|]
operator|&&
operator|!
name|inV2
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
name|i
index|]
argument_list|,
name|start1
index|[
name|i
index|]
argument_list|,
name|len1
index|[
name|i
index|]
argument_list|,
name|vector2
index|[
name|i
index|]
argument_list|,
name|start2
index|[
name|i
index|]
argument_list|,
name|len2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
comment|// there are no nulls in either input vector
comment|// propagate null information
name|outV
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
comment|// perform data operation
if|if
condition|(
name|inV1
operator|.
name|isRepeating
operator|&&
name|inV2
operator|.
name|isRepeating
condition|)
block|{
comment|// All must be selected otherwise size would be zero. Repeating property will not change.
name|outV
operator|.
name|setConcat
argument_list|(
literal|0
argument_list|,
name|vector1
index|[
literal|0
index|]
argument_list|,
name|start1
index|[
literal|0
index|]
argument_list|,
name|len1
index|[
literal|0
index|]
argument_list|,
name|vector2
index|[
literal|0
index|]
argument_list|,
name|start2
index|[
literal|0
index|]
argument_list|,
name|len2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|outV
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inV1
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
literal|0
index|]
argument_list|,
name|start1
index|[
literal|0
index|]
argument_list|,
name|len1
index|[
literal|0
index|]
argument_list|,
name|vector2
index|[
name|i
index|]
argument_list|,
name|start2
index|[
name|i
index|]
argument_list|,
name|len2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
literal|0
index|]
argument_list|,
name|start1
index|[
literal|0
index|]
argument_list|,
name|len1
index|[
literal|0
index|]
argument_list|,
name|vector2
index|[
name|i
index|]
argument_list|,
name|start2
index|[
name|i
index|]
argument_list|,
name|len2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|inV2
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
name|i
index|]
argument_list|,
name|start1
index|[
name|i
index|]
argument_list|,
name|len1
index|[
name|i
index|]
argument_list|,
name|vector2
index|[
literal|0
index|]
argument_list|,
name|start2
index|[
literal|0
index|]
argument_list|,
name|len2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
name|i
index|]
argument_list|,
name|start1
index|[
name|i
index|]
argument_list|,
name|len1
index|[
name|i
index|]
argument_list|,
name|vector2
index|[
literal|0
index|]
argument_list|,
name|start2
index|[
literal|0
index|]
argument_list|,
name|len2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
name|i
index|]
argument_list|,
name|start1
index|[
name|i
index|]
argument_list|,
name|len1
index|[
name|i
index|]
argument_list|,
name|vector2
index|[
name|i
index|]
argument_list|,
name|start2
index|[
name|i
index|]
argument_list|,
name|len2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|outV
operator|.
name|setConcat
argument_list|(
name|i
argument_list|,
name|vector1
index|[
name|i
index|]
argument_list|,
name|start1
index|[
name|i
index|]
argument_list|,
name|len1
index|[
name|i
index|]
argument_list|,
name|vector2
index|[
name|i
index|]
argument_list|,
name|start2
index|[
name|i
index|]
argument_list|,
name|len2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Propagate the logic OR of null vectors from two inputs to output.    *    * @param selectedInUse true/false flag to tell if sel[] is in use    * @param n number of qualifying rows    * @param sel selected value position array    * @param inV1 input vector 1    * @param inV2 input vector 2    * @param outV output vector    */
specifier|private
specifier|static
name|void
name|propagateNullsCombine
parameter_list|(
name|boolean
name|selectedInUse
parameter_list|,
name|int
name|n
parameter_list|,
name|int
index|[]
name|sel
parameter_list|,
name|ColumnVector
name|inV1
parameter_list|,
name|ColumnVector
name|inV2
parameter_list|,
name|BytesColumnVector
name|outV
parameter_list|)
block|{
if|if
condition|(
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
name|inV1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inV2
operator|.
name|isNull
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
name|inV1
operator|.
name|isNull
index|[
name|i
index|]
operator|||
name|inV2
operator|.
name|isNull
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Propagate nulls from input vector inV to output vector outV.    *    * @param selectedInUse true/false flag to tell if sel[] is in use    * @param sel selected value position array    * @param n number of qualifying rows    * @param inV input vector    * @param outV ouput vector    */
specifier|private
specifier|static
name|void
name|propagateNulls
parameter_list|(
name|boolean
name|selectedInUse
parameter_list|,
name|int
name|n
parameter_list|,
name|int
index|[]
name|sel
parameter_list|,
name|ColumnVector
name|inV
parameter_list|,
name|ColumnVector
name|outV
parameter_list|)
block|{
if|if
condition|(
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|outV
operator|.
name|isNull
index|[
name|i
index|]
operator|=
name|inV
operator|.
name|isNull
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|inV
operator|.
name|isNull
argument_list|,
literal|0
argument_list|,
name|outV
operator|.
name|isNull
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|vectorExpressionParameters
parameter_list|()
block|{
return|return
name|getColumnParamString
argument_list|(
literal|0
argument_list|,
name|colNum1
argument_list|)
operator|+
literal|", "
operator|+
name|getColumnParamString
argument_list|(
literal|1
argument_list|,
name|colNum2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorExpressionDescriptor
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
operator|(
operator|new
name|VectorExpressionDescriptor
operator|.
name|Builder
argument_list|()
operator|)
operator|.
name|setMode
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
operator|.
name|setNumArguments
argument_list|(
literal|2
argument_list|)
operator|.
name|setArgumentTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|ArgumentType
operator|.
name|STRING_FAMILY
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|ArgumentType
operator|.
name|STRING_FAMILY
argument_list|)
operator|.
name|setInputExpressionTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|InputExpressionType
operator|.
name|COLUMN
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|InputExpressionType
operator|.
name|COLUMN
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

