begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|incremental
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|EximUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|load
operator|.
name|EventDumpDirComparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * IncrementalLoadEventsIterator  * Helper class to iterate through event dump directory.  */
end_comment

begin_class
specifier|public
class|class
name|IncrementalLoadEventsIterator
implements|implements
name|Iterator
argument_list|<
name|FileStatus
argument_list|>
block|{
specifier|private
name|FileStatus
index|[]
name|eventDirs
decl_stmt|;
specifier|private
name|int
name|currentIndex
decl_stmt|;
specifier|private
name|int
name|numEvents
decl_stmt|;
specifier|public
name|IncrementalLoadEventsIterator
parameter_list|(
name|String
name|loadPath
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|eventPath
init|=
operator|new
name|Path
argument_list|(
name|loadPath
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|eventPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|eventDirs
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|eventPath
argument_list|,
name|EximUtil
operator|.
name|getDirectoryFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|eventDirs
operator|==
literal|null
operator|)
operator|||
operator|(
name|eventDirs
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
name|currentIndex
operator|=
literal|0
expr_stmt|;
name|numEvents
operator|=
literal|0
expr_stmt|;
return|return;
block|}
comment|// For event dump, each sub-dir is an individual event dump.
comment|// We need to guarantee that the directory listing we got is in order of event id.
name|Arrays
operator|.
name|sort
argument_list|(
name|eventDirs
argument_list|,
operator|new
name|EventDumpDirComparator
argument_list|()
argument_list|)
expr_stmt|;
name|currentIndex
operator|=
literal|0
expr_stmt|;
name|numEvents
operator|=
name|eventDirs
operator|.
name|length
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|(
name|eventDirs
operator|!=
literal|null
operator|&&
name|currentIndex
operator|<
name|numEvents
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileStatus
name|next
parameter_list|()
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|eventDirs
index|[
name|currentIndex
operator|++
index|]
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"no more events"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|getNumEvents
parameter_list|()
block|{
return|return
name|numEvents
return|;
block|}
block|}
end_class

end_unit

