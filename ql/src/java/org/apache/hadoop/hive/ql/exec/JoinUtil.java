begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|AbstractMapJoinKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinDoubleKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinObjectKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinSingleKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|RowContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveSequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinarySerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_class
specifier|public
class|class
name|JoinUtil
block|{
specifier|public
specifier|static
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
name|getObjectInspectorsFromEvaluators
parameter_list|(
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
argument_list|>
name|exprEntries
parameter_list|,
name|ObjectInspector
index|[]
name|inputObjInspector
parameter_list|,
name|int
name|posBigTableAlias
parameter_list|)
throws|throws
name|HiveException
block|{
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
argument_list|>
name|exprEntry
range|:
name|exprEntries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Byte
name|alias
init|=
name|exprEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|//get big table
if|if
condition|(
name|alias
operator|==
operator|(
name|byte
operator|)
name|posBigTableAlias
condition|)
block|{
comment|//skip the big tables
continue|continue;
block|}
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
name|exprList
init|=
name|exprEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldOIList
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exprList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fieldOIList
operator|.
name|add
argument_list|(
name|exprList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|initialize
argument_list|(
name|inputObjInspector
index|[
name|alias
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|fieldOIList
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
name|getStandardObjectInspectors
parameter_list|(
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
name|aliasToObjectInspectors
parameter_list|,
name|int
name|posBigTableAlias
parameter_list|)
block|{
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
name|oiEntry
range|:
name|aliasToObjectInspectors
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Byte
name|alias
init|=
name|oiEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|//get big table
if|if
condition|(
name|alias
operator|==
operator|(
name|byte
operator|)
name|posBigTableAlias
condition|)
block|{
comment|//skip the big tables
continue|continue;
block|}
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|oiList
init|=
name|oiEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldOIList
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|oiList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oiList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fieldOIList
operator|.
name|add
argument_list|(
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|oiList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|fieldOIList
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|int
name|populateJoinKeyValue
parameter_list|(
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
argument_list|>
name|outMap
parameter_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|inputMap
parameter_list|,
name|Byte
index|[]
name|order
parameter_list|,
name|int
name|posBigTableAlias
parameter_list|)
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|>
name|entryIter
init|=
name|inputMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entryIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|e
init|=
name|entryIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Byte
name|key
init|=
name|order
index|[
name|e
operator|.
name|getKey
argument_list|()
index|]
decl_stmt|;
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
name|valueFields
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeEvaluator
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|expr
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|sz
init|=
name|expr
operator|.
name|size
argument_list|()
decl_stmt|;
name|total
operator|+=
name|sz
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sz
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|key
operator|==
operator|(
name|byte
operator|)
name|posBigTableAlias
condition|)
block|{
name|valueFields
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|valueFields
operator|.
name|add
argument_list|(
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|expr
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|outMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|valueFields
argument_list|)
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
comment|/**    * Return the key as a standard object. StandardObject can be inspected by a    * standard ObjectInspector.    */
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|computeKeys
parameter_list|(
name|Object
name|row
parameter_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
name|keyFields
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|keyFieldsOI
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Compute the keys
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|nr
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|keyFields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyFields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|nr
operator|.
name|add
argument_list|(
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|keyFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
argument_list|,
name|keyFieldsOI
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nr
return|;
block|}
comment|/**    * Return the key as a standard object. StandardObject can be inspected by a    * standard ObjectInspector.    */
specifier|public
specifier|static
name|AbstractMapJoinKey
name|computeMapJoinKeys
parameter_list|(
name|Object
name|row
parameter_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
name|keyFields
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|keyFieldsOI
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|size
init|=
name|keyFields
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
name|Object
name|obj
init|=
operator|(
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|keyFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
argument_list|,
name|keyFieldsOI
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
operator|)
decl_stmt|;
name|MapJoinSingleKey
name|key
init|=
operator|new
name|MapJoinSingleKey
argument_list|(
name|obj
argument_list|)
decl_stmt|;
return|return
name|key
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|2
condition|)
block|{
name|Object
name|obj1
init|=
operator|(
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|keyFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
argument_list|,
name|keyFieldsOI
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
operator|)
decl_stmt|;
name|Object
name|obj2
init|=
operator|(
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|keyFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
argument_list|,
name|keyFieldsOI
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
operator|)
decl_stmt|;
name|MapJoinDoubleKeys
name|key
init|=
operator|new
name|MapJoinDoubleKeys
argument_list|(
name|obj1
argument_list|,
name|obj2
argument_list|)
decl_stmt|;
return|return
name|key
return|;
block|}
else|else
block|{
comment|// Compute the keys
name|Object
index|[]
name|nr
init|=
operator|new
name|Object
index|[
name|keyFields
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyFields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|nr
index|[
name|i
index|]
operator|=
operator|(
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|keyFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
argument_list|,
name|keyFieldsOI
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
operator|)
expr_stmt|;
block|}
name|MapJoinObjectKey
name|key
init|=
operator|new
name|MapJoinObjectKey
argument_list|(
name|nr
argument_list|)
decl_stmt|;
return|return
name|key
return|;
block|}
block|}
comment|/**    * Return the value as a standard object. StandardObject can be inspected by a    * standard ObjectInspector.    */
specifier|public
specifier|static
name|Object
index|[]
name|computeMapJoinValues
parameter_list|(
name|Object
name|row
parameter_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
name|valueFields
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|valueFieldsOI
parameter_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
name|filters
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|filtersOI
parameter_list|,
name|boolean
name|noOuterJoin
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Compute the keys
name|Object
index|[]
name|nr
decl_stmt|;
if|if
condition|(
operator|!
name|noOuterJoin
condition|)
block|{
name|nr
operator|=
operator|new
name|Object
index|[
name|valueFields
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
expr_stmt|;
comment|// add whether the row is filtered or not.
name|nr
index|[
name|valueFields
operator|.
name|size
argument_list|()
index|]
operator|=
operator|new
name|BooleanWritable
argument_list|(
name|isFiltered
argument_list|(
name|row
argument_list|,
name|filters
argument_list|,
name|filtersOI
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nr
operator|=
operator|new
name|Object
index|[
name|valueFields
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueFields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|nr
index|[
name|i
index|]
operator|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|valueFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
argument_list|,
name|valueFieldsOI
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
block|}
return|return
name|nr
return|;
block|}
comment|/**    * Return the value as a standard object. StandardObject can be inspected by a    * standard ObjectInspector.    */
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|computeValues
parameter_list|(
name|Object
name|row
parameter_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
name|valueFields
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|valueFieldsOI
parameter_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
name|filters
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|filtersOI
parameter_list|,
name|boolean
name|noOuterJoin
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Compute the values
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|nr
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|valueFields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueFields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|nr
operator|.
name|add
argument_list|(
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|valueFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
argument_list|,
name|valueFieldsOI
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|noOuterJoin
condition|)
block|{
comment|// add whether the row is filtered or not.
name|nr
operator|.
name|add
argument_list|(
operator|new
name|BooleanWritable
argument_list|(
name|isFiltered
argument_list|(
name|row
argument_list|,
name|filters
argument_list|,
name|filtersOI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nr
return|;
block|}
comment|/**    * Returns true if the row does not pass through filters.    */
specifier|protected
specifier|static
name|Boolean
name|isFiltered
parameter_list|(
name|Object
name|row
parameter_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
name|filters
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// apply join filters on the row.
name|Boolean
name|ret
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|filters
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|condition
init|=
name|filters
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|ret
operator|=
call|(
name|Boolean
call|)
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|ois
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|condition
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
operator|||
operator|!
name|ret
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|TableDesc
name|getSpillTableDesc
parameter_list|(
name|Byte
name|alias
parameter_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|TableDesc
argument_list|>
name|spillTableDesc
parameter_list|,
name|JoinDesc
name|conf
parameter_list|,
name|boolean
name|noOuterJoin
parameter_list|)
block|{
if|if
condition|(
name|spillTableDesc
operator|==
literal|null
operator|||
name|spillTableDesc
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|spillTableDesc
operator|=
name|initSpillTables
argument_list|(
name|conf
argument_list|,
name|noOuterJoin
argument_list|)
expr_stmt|;
block|}
return|return
name|spillTableDesc
operator|.
name|get
argument_list|(
name|alias
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|Byte
argument_list|,
name|TableDesc
argument_list|>
name|getSpillTableDesc
parameter_list|(
name|Map
argument_list|<
name|Byte
argument_list|,
name|TableDesc
argument_list|>
name|spillTableDesc
parameter_list|,
name|JoinDesc
name|conf
parameter_list|,
name|boolean
name|noOuterJoin
parameter_list|)
block|{
if|if
condition|(
name|spillTableDesc
operator|==
literal|null
condition|)
block|{
name|spillTableDesc
operator|=
name|initSpillTables
argument_list|(
name|conf
argument_list|,
name|noOuterJoin
argument_list|)
expr_stmt|;
block|}
return|return
name|spillTableDesc
return|;
block|}
specifier|public
specifier|static
name|SerDe
name|getSpillSerDe
parameter_list|(
name|byte
name|alias
parameter_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|TableDesc
argument_list|>
name|spillTableDesc
parameter_list|,
name|JoinDesc
name|conf
parameter_list|,
name|boolean
name|noOuterJoin
parameter_list|)
block|{
name|TableDesc
name|desc
init|=
name|getSpillTableDesc
argument_list|(
name|alias
argument_list|,
name|spillTableDesc
argument_list|,
name|conf
argument_list|,
name|noOuterJoin
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SerDe
name|sd
init|=
operator|(
name|SerDe
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|desc
operator|.
name|getDeserializerClass
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|sd
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|desc
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|sd
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|Byte
argument_list|,
name|TableDesc
argument_list|>
name|initSpillTables
parameter_list|(
name|JoinDesc
name|conf
parameter_list|,
name|boolean
name|noOuterJoin
parameter_list|)
block|{
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|exprs
init|=
name|conf
operator|.
name|getExprs
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|TableDesc
argument_list|>
name|spillTableDesc
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|TableDesc
argument_list|>
argument_list|(
name|exprs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|tag
init|=
literal|0
init|;
name|tag
operator|<
name|exprs
operator|.
name|size
argument_list|()
condition|;
name|tag
operator|++
control|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueCols
init|=
name|exprs
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|tag
argument_list|)
decl_stmt|;
name|int
name|columnSize
init|=
name|valueCols
operator|.
name|size
argument_list|()
decl_stmt|;
name|StringBuilder
name|colNames
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|colTypes
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnSize
operator|<=
literal|0
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|columnSize
condition|;
name|k
operator|++
control|)
block|{
name|String
name|newColName
init|=
name|tag
operator|+
literal|"_VALUE_"
operator|+
name|k
decl_stmt|;
comment|// any name, it does not
comment|// matter.
name|colNames
operator|.
name|append
argument_list|(
name|newColName
argument_list|)
expr_stmt|;
name|colNames
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|colTypes
operator|.
name|append
argument_list|(
name|valueCols
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|getTypeString
argument_list|()
argument_list|)
expr_stmt|;
name|colTypes
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|noOuterJoin
condition|)
block|{
name|colNames
operator|.
name|append
argument_list|(
literal|"filtered"
argument_list|)
expr_stmt|;
name|colNames
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|colTypes
operator|.
name|append
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|colTypes
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
comment|// remove the last ','
name|colNames
operator|.
name|setLength
argument_list|(
name|colNames
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|colTypes
operator|.
name|setLength
argument_list|(
name|colTypes
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|TableDesc
name|tblDesc
init|=
operator|new
name|TableDesc
argument_list|(
name|LazyBinarySerDe
operator|.
name|class
argument_list|,
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|HiveSequenceFileOutputFormat
operator|.
name|class
argument_list|,
name|Utilities
operator|.
name|makeProperties
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|""
operator|+
name|Utilities
operator|.
name|ctrlaCode
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|LIST_COLUMNS
argument_list|,
name|colNames
operator|.
name|toString
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|colTypes
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|spillTableDesc
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|tag
argument_list|,
name|tblDesc
argument_list|)
expr_stmt|;
block|}
return|return
name|spillTableDesc
return|;
block|}
specifier|public
specifier|static
name|RowContainer
name|getRowContainer
parameter_list|(
name|Configuration
name|hconf
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|structFieldObjectInspectors
parameter_list|,
name|Byte
name|alias
parameter_list|,
name|int
name|containerSize
parameter_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|TableDesc
argument_list|>
name|spillTableDesc
parameter_list|,
name|JoinDesc
name|conf
parameter_list|,
name|boolean
name|noOuterJoin
parameter_list|)
throws|throws
name|HiveException
block|{
name|TableDesc
name|tblDesc
init|=
name|JoinUtil
operator|.
name|getSpillTableDesc
argument_list|(
name|alias
argument_list|,
name|spillTableDesc
argument_list|,
name|conf
argument_list|,
name|noOuterJoin
argument_list|)
decl_stmt|;
name|SerDe
name|serde
init|=
name|JoinUtil
operator|.
name|getSpillSerDe
argument_list|(
name|alias
argument_list|,
name|spillTableDesc
argument_list|,
name|conf
argument_list|,
name|noOuterJoin
argument_list|)
decl_stmt|;
if|if
condition|(
name|serde
operator|==
literal|null
condition|)
block|{
name|containerSize
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|RowContainer
name|rc
init|=
operator|new
name|RowContainer
argument_list|(
name|containerSize
argument_list|,
name|hconf
argument_list|)
decl_stmt|;
name|StructObjectInspector
name|rcOI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tblDesc
operator|!=
literal|null
condition|)
block|{
comment|// arbitrary column names used internally for serializing to spill table
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|Utilities
operator|.
name|getColumnNames
argument_list|(
name|tblDesc
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
comment|// object inspector for serializing input tuples
name|rcOI
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|colNames
argument_list|,
name|structFieldObjectInspectors
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|setSerDe
argument_list|(
name|serde
argument_list|,
name|rcOI
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setTableDesc
argument_list|(
name|tblDesc
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
block|}
end_class

end_unit

