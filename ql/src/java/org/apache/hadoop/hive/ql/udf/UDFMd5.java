begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * UDFMd5.  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"md5"
argument_list|,
name|value
operator|=
literal|"_FUNC_(str or bin) - Calculates an MD5 128-bit checksum for the string or binary."
argument_list|,
name|extended
operator|=
literal|"The value is returned as a string of 32 hex digits, or NULL if the argument was NULL.\n"
operator|+
literal|"Example:\n"
operator|+
literal|"> SELECT _FUNC_('ABC');\n"
operator|+
literal|"  '902fbdd2b1df0c4f70b4a5d23525e932'\n"
operator|+
literal|"> SELECT _FUNC_(binary('ABC'));\n"
operator|+
literal|"  '902fbdd2b1df0c4f70b4a5d23525e932'"
argument_list|)
specifier|public
class|class
name|UDFMd5
extends|extends
name|UDF
block|{
specifier|private
specifier|final
name|Text
name|result
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
comment|/**    * Convert String to md5    */
specifier|public
name|Text
name|evaluate
parameter_list|(
name|Text
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|str
init|=
name|n
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|md5Hex
init|=
name|DigestUtils
operator|.
name|md5Hex
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|md5Hex
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Convert bytes to md5    */
specifier|public
name|Text
name|evaluate
parameter_list|(
name|BytesWritable
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|bytes
init|=
name|copyBytes
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|String
name|md5Hex
init|=
name|DigestUtils
operator|.
name|md5Hex
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|md5Hex
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|protected
name|byte
index|[]
name|copyBytes
parameter_list|(
name|BytesWritable
name|b
parameter_list|)
block|{
name|int
name|size
init|=
name|b
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

