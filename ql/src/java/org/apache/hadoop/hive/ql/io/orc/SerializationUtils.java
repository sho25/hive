begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_class
specifier|final
class|class
name|SerializationUtils
block|{
comment|// unused
specifier|private
name|SerializationUtils
parameter_list|()
block|{}
specifier|static
name|void
name|writeVulong
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|(
name|value
operator|&
operator|~
literal|0x7f
operator|)
operator|==
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|output
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
name|value
operator|&
literal|0x7f
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|>>>=
literal|7
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|void
name|writeVslong
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writeVulong
argument_list|(
name|output
argument_list|,
operator|(
name|value
operator|<<
literal|1
operator|)
operator|^
operator|(
name|value
operator|>>
literal|63
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|long
name|readVulong
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
name|long
name|b
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
do|do
block|{
name|b
operator|=
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|b
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Reading Vulong past EOF"
argument_list|)
throw|;
block|}
name|result
operator||=
operator|(
literal|0x7f
operator|&
name|b
operator|)
operator|<<
name|offset
expr_stmt|;
name|offset
operator|+=
literal|7
expr_stmt|;
block|}
do|while
condition|(
name|b
operator|>=
literal|0x80
condition|)
do|;
return|return
name|result
return|;
block|}
specifier|static
name|long
name|readVslong
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|result
init|=
name|readVulong
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
operator|(
name|result
operator|>>>
literal|1
operator|)
operator|^
operator|-
operator|(
name|result
operator|&
literal|1
operator|)
return|;
block|}
specifier|static
name|float
name|readFloat
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ser
init|=
name|in
operator|.
name|read
argument_list|()
operator||
operator|(
name|in
operator|.
name|read
argument_list|()
operator|<<
literal|8
operator|)
operator||
operator|(
name|in
operator|.
name|read
argument_list|()
operator|<<
literal|16
operator|)
operator||
operator|(
name|in
operator|.
name|read
argument_list|()
operator|<<
literal|24
operator|)
decl_stmt|;
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|ser
argument_list|)
return|;
block|}
specifier|static
name|void
name|writeFloat
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|float
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ser
init|=
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|ser
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
operator|(
name|ser
operator|>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
operator|(
name|ser
operator|>>
literal|16
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
operator|(
name|ser
operator|>>
literal|24
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
specifier|static
name|double
name|readDouble
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|ser
init|=
operator|(
name|long
operator|)
name|in
operator|.
name|read
argument_list|()
operator||
operator|(
operator|(
name|long
operator|)
name|in
operator|.
name|read
argument_list|()
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|long
operator|)
name|in
operator|.
name|read
argument_list|()
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|long
operator|)
name|in
operator|.
name|read
argument_list|()
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|long
operator|)
name|in
operator|.
name|read
argument_list|()
operator|<<
literal|32
operator|)
operator||
operator|(
operator|(
name|long
operator|)
name|in
operator|.
name|read
argument_list|()
operator|<<
literal|40
operator|)
operator||
operator|(
operator|(
name|long
operator|)
name|in
operator|.
name|read
argument_list|()
operator|<<
literal|48
operator|)
operator||
operator|(
operator|(
name|long
operator|)
name|in
operator|.
name|read
argument_list|()
operator|<<
literal|56
operator|)
decl_stmt|;
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|ser
argument_list|)
return|;
block|}
specifier|static
name|void
name|writeDouble
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|double
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|ser
init|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
operator|(
operator|(
name|int
operator|)
name|ser
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
operator|(
call|(
name|int
call|)
argument_list|(
name|ser
operator|>>
literal|8
argument_list|)
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
operator|(
call|(
name|int
call|)
argument_list|(
name|ser
operator|>>
literal|16
argument_list|)
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
operator|(
call|(
name|int
call|)
argument_list|(
name|ser
operator|>>
literal|24
argument_list|)
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
operator|(
call|(
name|int
call|)
argument_list|(
name|ser
operator|>>
literal|32
argument_list|)
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
operator|(
call|(
name|int
call|)
argument_list|(
name|ser
operator|>>
literal|40
argument_list|)
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
operator|(
call|(
name|int
call|)
argument_list|(
name|ser
operator|>>
literal|48
argument_list|)
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
operator|(
call|(
name|int
call|)
argument_list|(
name|ser
operator|>>
literal|56
argument_list|)
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write the arbitrarily sized signed BigInteger in vint format.    *    * Signed integers are encoded using the low bit as the sign bit using zigzag    * encoding.    *    * Each byte uses the low 7 bits for data and the high bit for stop/continue.    *    * Bytes are stored LSB first.    * @param output the stream to write to    * @param value the value to output    * @throws IOException    */
specifier|static
name|void
name|writeBigInteger
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|BigInteger
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// encode the signed number as a positive integer
name|value
operator|=
name|value
operator|.
name|shiftLeft
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|int
name|sign
init|=
name|value
operator|.
name|signum
argument_list|()
decl_stmt|;
if|if
condition|(
name|sign
operator|<
literal|0
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|negate
argument_list|()
expr_stmt|;
name|value
operator|=
name|value
operator|.
name|subtract
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
expr_stmt|;
block|}
name|int
name|length
init|=
name|value
operator|.
name|bitLength
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|lowBits
init|=
name|value
operator|.
name|longValue
argument_list|()
operator|&
literal|0x7fffffffffffffffL
decl_stmt|;
name|length
operator|-=
literal|63
expr_stmt|;
comment|// write out the next 63 bits worth of data
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|9
condition|;
operator|++
name|i
control|)
block|{
comment|// if this is the last byte, leave the high bit off
if|if
condition|(
name|length
operator|<=
literal|0
operator|&&
operator|(
name|lowBits
operator|&
operator|~
literal|0x7f
operator|)
operator|==
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|lowBits
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|output
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
name|lowBits
operator|&
literal|0x7f
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|lowBits
operator|>>>=
literal|7
expr_stmt|;
block|}
block|}
name|value
operator|=
name|value
operator|.
name|shiftRight
argument_list|(
literal|63
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Read the signed arbitrary sized BigInteger BigInteger in vint format    * @param input the stream to read from    * @return the read BigInteger    * @throws IOException    */
specifier|static
name|BigInteger
name|readBigInteger
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|BigInteger
name|result
init|=
name|BigInteger
operator|.
name|ZERO
decl_stmt|;
name|long
name|work
init|=
literal|0
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|long
name|b
decl_stmt|;
do|do
block|{
name|b
operator|=
name|input
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|b
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Reading BigInteger past EOF from "
operator|+
name|input
argument_list|)
throw|;
block|}
name|work
operator||=
operator|(
literal|0x7f
operator|&
name|b
operator|)
operator|<<
operator|(
name|offset
operator|%
literal|63
operator|)
expr_stmt|;
name|offset
operator|+=
literal|7
expr_stmt|;
comment|// if we've read 63 bits, roll them into the result
if|if
condition|(
name|offset
operator|==
literal|63
condition|)
block|{
name|result
operator|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|work
argument_list|)
expr_stmt|;
name|work
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|offset
operator|%
literal|63
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|or
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|work
argument_list|)
operator|.
name|shiftLeft
argument_list|(
name|offset
operator|-
literal|63
argument_list|)
argument_list|)
expr_stmt|;
name|work
operator|=
literal|0
expr_stmt|;
block|}
block|}
do|while
condition|(
name|b
operator|>=
literal|0x80
condition|)
do|;
if|if
condition|(
name|work
operator|!=
literal|0
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|or
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|work
argument_list|)
operator|.
name|shiftLeft
argument_list|(
operator|(
name|offset
operator|/
literal|63
operator|)
operator|*
literal|63
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// convert back to a signed number
name|boolean
name|isNegative
init|=
name|result
operator|.
name|testBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNegative
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|negate
argument_list|()
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|.
name|shiftRight
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
enum|enum
name|FixedBitSizes
block|{
name|ONE
block|,
name|TWO
block|,
name|THREE
block|,
name|FOUR
block|,
name|FIVE
block|,
name|SIX
block|,
name|SEVEN
block|,
name|EIGHT
block|,
name|NINE
block|,
name|TEN
block|,
name|ELEVEN
block|,
name|TWELVE
block|,
name|THIRTEEN
block|,
name|FOURTEEN
block|,
name|FIFTEEN
block|,
name|SIXTEEN
block|,
name|SEVENTEEN
block|,
name|EIGHTEEN
block|,
name|NINETEEN
block|,
name|TWENTY
block|,
name|TWENTYONE
block|,
name|TWENTYTWO
block|,
name|TWENTYTHREE
block|,
name|TWENTYFOUR
block|,
name|TWENTYSIX
block|,
name|TWENTYEIGHT
block|,
name|THIRTY
block|,
name|THIRTYTWO
block|,
name|FORTY
block|,
name|FORTYEIGHT
block|,
name|FIFTYSIX
block|,
name|SIXTYFOUR
block|;   }
comment|/**    * Count the number of bits required to encode the given value    * @param value    * @return bits required to store value    */
specifier|static
name|int
name|findClosestNumBits
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|value
operator|!=
literal|0
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|value
operator|=
name|value
operator|>>>
literal|1
expr_stmt|;
block|}
return|return
name|getClosestFixedBits
argument_list|(
name|count
argument_list|)
return|;
block|}
comment|/**    * zigzag encode the given value    * @param val    * @return zigzag encoded value    */
specifier|static
name|long
name|zigzagEncode
parameter_list|(
name|long
name|val
parameter_list|)
block|{
return|return
operator|(
name|val
operator|<<
literal|1
operator|)
operator|^
operator|(
name|val
operator|>>
literal|63
operator|)
return|;
block|}
comment|/**    * zigzag decode the given value    * @param val    * @return zizag decoded value    */
specifier|static
name|long
name|zigzagDecode
parameter_list|(
name|long
name|val
parameter_list|)
block|{
return|return
operator|(
name|val
operator|>>>
literal|1
operator|)
operator|^
operator|-
operator|(
name|val
operator|&
literal|1
operator|)
return|;
block|}
comment|/**    * Compute the bits required to represent pth percentile value    * @param data - array    * @param p - percentile value (>=0.0 to<=1.0)    * @return pth percentile bits    */
specifier|static
name|int
name|percentileBits
parameter_list|(
name|long
index|[]
name|data
parameter_list|,
name|double
name|p
parameter_list|)
block|{
if|if
condition|(
operator|(
name|p
operator|>
literal|1.0
operator|)
operator|||
operator|(
name|p
operator|<=
literal|0.0
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// histogram that store the encoded bit requirement for each values.
comment|// maximum number of bits that can encoded is 32 (refer FixedBitSizes)
name|int
index|[]
name|hist
init|=
operator|new
name|int
index|[
literal|32
index|]
decl_stmt|;
comment|// compute the histogram
for|for
control|(
name|long
name|l
range|:
name|data
control|)
block|{
name|int
name|idx
init|=
name|encodeBitWidth
argument_list|(
name|findClosestNumBits
argument_list|(
name|l
argument_list|)
argument_list|)
decl_stmt|;
name|hist
index|[
name|idx
index|]
operator|+=
literal|1
expr_stmt|;
block|}
name|int
name|len
init|=
name|data
operator|.
name|length
decl_stmt|;
name|int
name|perLen
init|=
call|(
name|int
call|)
argument_list|(
name|len
operator|*
operator|(
literal|1.0
operator|-
name|p
operator|)
argument_list|)
decl_stmt|;
comment|// return the bits required by pth percentile length
for|for
control|(
name|int
name|i
init|=
name|hist
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|perLen
operator|-=
name|hist
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|perLen
operator|<
literal|0
condition|)
block|{
return|return
name|decodeBitWidth
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Read n bytes in big endian order and convert to long    * @param b - byte array    * @return long value    */
specifier|static
name|long
name|bytesToLongBE
parameter_list|(
name|InStream
name|input
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|out
init|=
literal|0
decl_stmt|;
name|long
name|val
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|n
operator|--
expr_stmt|;
comment|// store it in a long and then shift else integer overflow will occur
name|val
operator|=
name|input
operator|.
name|read
argument_list|()
expr_stmt|;
name|out
operator||=
operator|(
name|val
operator|<<
operator|(
name|n
operator|*
literal|8
operator|)
operator|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
comment|/**    * Calculate the number of bytes required    * @param n - number of values    * @param numBits - bit width    * @return number of bytes required    */
specifier|static
name|int
name|getTotalBytesRequired
parameter_list|(
name|int
name|n
parameter_list|,
name|int
name|numBits
parameter_list|)
block|{
return|return
operator|(
name|n
operator|*
name|numBits
operator|+
literal|7
operator|)
operator|/
literal|8
return|;
block|}
comment|/**    * For a given fixed bit this function will return the closest available fixed    * bit    * @param n    * @return closest valid fixed bit    */
specifier|static
name|int
name|getClosestFixedBits
parameter_list|(
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|n
operator|>=
literal|1
operator|&&
name|n
operator|<=
literal|24
condition|)
block|{
return|return
name|n
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|>
literal|24
operator|&&
name|n
operator|<=
literal|26
condition|)
block|{
return|return
literal|26
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|>
literal|26
operator|&&
name|n
operator|<=
literal|28
condition|)
block|{
return|return
literal|28
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|>
literal|28
operator|&&
name|n
operator|<=
literal|30
condition|)
block|{
return|return
literal|30
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|>
literal|30
operator|&&
name|n
operator|<=
literal|32
condition|)
block|{
return|return
literal|32
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|>
literal|32
operator|&&
name|n
operator|<=
literal|40
condition|)
block|{
return|return
literal|40
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|>
literal|40
operator|&&
name|n
operator|<=
literal|48
condition|)
block|{
return|return
literal|48
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|>
literal|48
operator|&&
name|n
operator|<=
literal|56
condition|)
block|{
return|return
literal|56
return|;
block|}
else|else
block|{
return|return
literal|64
return|;
block|}
block|}
comment|/**    * Finds the closest available fixed bit width match and returns its encoded    * value (ordinal)    * @param n - fixed bit width to encode    * @return encoded fixed bit width    */
specifier|static
name|int
name|encodeBitWidth
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|n
operator|=
name|getClosestFixedBits
argument_list|(
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|>=
literal|1
operator|&&
name|n
operator|<=
literal|24
condition|)
block|{
return|return
name|n
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|>
literal|24
operator|&&
name|n
operator|<=
literal|26
condition|)
block|{
return|return
name|FixedBitSizes
operator|.
name|TWENTYSIX
operator|.
name|ordinal
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|>
literal|26
operator|&&
name|n
operator|<=
literal|28
condition|)
block|{
return|return
name|FixedBitSizes
operator|.
name|TWENTYEIGHT
operator|.
name|ordinal
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|>
literal|28
operator|&&
name|n
operator|<=
literal|30
condition|)
block|{
return|return
name|FixedBitSizes
operator|.
name|THIRTY
operator|.
name|ordinal
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|>
literal|30
operator|&&
name|n
operator|<=
literal|32
condition|)
block|{
return|return
name|FixedBitSizes
operator|.
name|THIRTYTWO
operator|.
name|ordinal
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|>
literal|32
operator|&&
name|n
operator|<=
literal|40
condition|)
block|{
return|return
name|FixedBitSizes
operator|.
name|FORTY
operator|.
name|ordinal
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|>
literal|40
operator|&&
name|n
operator|<=
literal|48
condition|)
block|{
return|return
name|FixedBitSizes
operator|.
name|FORTYEIGHT
operator|.
name|ordinal
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|>
literal|48
operator|&&
name|n
operator|<=
literal|56
condition|)
block|{
return|return
name|FixedBitSizes
operator|.
name|FIFTYSIX
operator|.
name|ordinal
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|FixedBitSizes
operator|.
name|SIXTYFOUR
operator|.
name|ordinal
argument_list|()
return|;
block|}
block|}
comment|/**    * Decodes the ordinal fixed bit value to actual fixed bit width value    * @param n - encoded fixed bit width    * @return decoded fixed bit width    */
specifier|static
name|int
name|decodeBitWidth
parameter_list|(
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|>=
name|FixedBitSizes
operator|.
name|ONE
operator|.
name|ordinal
argument_list|()
operator|&&
name|n
operator|<=
name|FixedBitSizes
operator|.
name|TWENTYFOUR
operator|.
name|ordinal
argument_list|()
condition|)
block|{
return|return
name|n
operator|+
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|==
name|FixedBitSizes
operator|.
name|TWENTYSIX
operator|.
name|ordinal
argument_list|()
condition|)
block|{
return|return
literal|26
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|==
name|FixedBitSizes
operator|.
name|TWENTYEIGHT
operator|.
name|ordinal
argument_list|()
condition|)
block|{
return|return
literal|28
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|==
name|FixedBitSizes
operator|.
name|THIRTY
operator|.
name|ordinal
argument_list|()
condition|)
block|{
return|return
literal|30
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|==
name|FixedBitSizes
operator|.
name|THIRTYTWO
operator|.
name|ordinal
argument_list|()
condition|)
block|{
return|return
literal|32
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|==
name|FixedBitSizes
operator|.
name|FORTY
operator|.
name|ordinal
argument_list|()
condition|)
block|{
return|return
literal|40
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|==
name|FixedBitSizes
operator|.
name|FORTYEIGHT
operator|.
name|ordinal
argument_list|()
condition|)
block|{
return|return
literal|48
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|==
name|FixedBitSizes
operator|.
name|FIFTYSIX
operator|.
name|ordinal
argument_list|()
condition|)
block|{
return|return
literal|56
return|;
block|}
else|else
block|{
return|return
literal|64
return|;
block|}
block|}
comment|/**    * Bitpack and write the input values to underlying output stream    * @param input - values to write    * @param offset - offset    * @param len - length    * @param bitSize - bit width    * @param output - output stream    * @throws IOException    */
specifier|static
name|void
name|writeInts
parameter_list|(
name|long
index|[]
name|input
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|bitSize
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|input
operator|==
literal|null
operator|||
name|input
operator|.
name|length
operator|<
literal|1
operator|||
name|offset
operator|<
literal|0
operator|||
name|len
operator|<
literal|1
operator|||
name|bitSize
operator|<
literal|1
condition|)
block|{
return|return;
block|}
name|int
name|bitsLeft
init|=
literal|8
decl_stmt|;
name|byte
name|current
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
operator|(
name|offset
operator|+
name|len
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|long
name|value
init|=
name|input
index|[
name|i
index|]
decl_stmt|;
name|int
name|bitsToWrite
init|=
name|bitSize
decl_stmt|;
while|while
condition|(
name|bitsToWrite
operator|>
name|bitsLeft
condition|)
block|{
comment|// add the bits to the bottom of the current word
name|current
operator||=
name|value
operator|>>>
operator|(
name|bitsToWrite
operator|-
name|bitsLeft
operator|)
expr_stmt|;
comment|// subtract out the bits we just added
name|bitsToWrite
operator|-=
name|bitsLeft
expr_stmt|;
comment|// zero out the bits above bitsToWrite
name|value
operator|&=
operator|(
literal|1L
operator|<<
name|bitsToWrite
operator|)
operator|-
literal|1
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
literal|0
expr_stmt|;
name|bitsLeft
operator|=
literal|8
expr_stmt|;
block|}
name|bitsLeft
operator|-=
name|bitsToWrite
expr_stmt|;
name|current
operator||=
name|value
operator|<<
name|bitsLeft
expr_stmt|;
if|if
condition|(
name|bitsLeft
operator|==
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
literal|0
expr_stmt|;
name|bitsLeft
operator|=
literal|8
expr_stmt|;
block|}
block|}
comment|// flush
if|if
condition|(
name|bitsLeft
operator|!=
literal|8
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
literal|0
expr_stmt|;
name|bitsLeft
operator|=
literal|8
expr_stmt|;
block|}
block|}
comment|/**    * Read bitpacked integers from input stream    * @param buffer - input buffer    * @param offset - offset    * @param len - length    * @param bitSize - bit width    * @param input - input stream    * @throws IOException    */
specifier|static
name|void
name|readInts
parameter_list|(
name|long
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|bitSize
parameter_list|,
name|InStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bitsLeft
init|=
literal|0
decl_stmt|;
name|int
name|current
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
operator|(
name|offset
operator|+
name|len
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
name|int
name|bitsLeftToRead
init|=
name|bitSize
decl_stmt|;
while|while
condition|(
name|bitsLeftToRead
operator|>
name|bitsLeft
condition|)
block|{
name|result
operator|<<=
name|bitsLeft
expr_stmt|;
name|result
operator||=
name|current
operator|&
operator|(
operator|(
literal|1
operator|<<
name|bitsLeft
operator|)
operator|-
literal|1
operator|)
expr_stmt|;
name|bitsLeftToRead
operator|-=
name|bitsLeft
expr_stmt|;
name|current
operator|=
name|input
operator|.
name|read
argument_list|()
expr_stmt|;
name|bitsLeft
operator|=
literal|8
expr_stmt|;
block|}
comment|// handle the left over bits
if|if
condition|(
name|bitsLeftToRead
operator|>
literal|0
condition|)
block|{
name|result
operator|<<=
name|bitsLeftToRead
expr_stmt|;
name|bitsLeft
operator|-=
name|bitsLeftToRead
expr_stmt|;
name|result
operator||=
operator|(
name|current
operator|>>
name|bitsLeft
operator|)
operator|&
operator|(
operator|(
literal|1
operator|<<
name|bitsLeftToRead
operator|)
operator|-
literal|1
operator|)
expr_stmt|;
block|}
name|buffer
index|[
name|i
index|]
operator|=
name|result
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

