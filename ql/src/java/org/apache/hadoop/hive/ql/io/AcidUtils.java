begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Utilities that are shared by all of the ACID input and output formats. They  * are used by the compactor and cleaner and thus must be format agnostic.  */
end_comment

begin_class
specifier|public
class|class
name|AcidUtils
block|{
specifier|private
name|AcidUtils
parameter_list|()
block|{
comment|// NOT USED
block|}
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AcidUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BASE_PREFIX
init|=
literal|"base_"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELTA_PREFIX
init|=
literal|"delta_"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BUCKET_PREFIX
init|=
literal|"bucket_"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BUCKET_DIGITS
init|=
literal|"%05d"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELTA_DIGITS
init|=
literal|"%07d"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|ORIGINAL_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[0-9]+_[0-9]+"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PathFilter
name|hiddenFileFilter
init|=
operator|new
name|PathFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|String
name|name
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HadoopShims
name|SHIMS
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
decl_stmt|;
comment|/**    * Create the bucket filename.    * @param subdir the subdirectory for the bucket.    * @param bucket the bucket number    * @return the filename    */
specifier|public
specifier|static
name|Path
name|createBucketFile
parameter_list|(
name|Path
name|subdir
parameter_list|,
name|int
name|bucket
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
name|BUCKET_PREFIX
operator|+
name|String
operator|.
name|format
argument_list|(
name|BUCKET_DIGITS
argument_list|,
name|bucket
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|deltaSubdir
parameter_list|(
name|long
name|min
parameter_list|,
name|long
name|max
parameter_list|)
block|{
return|return
name|DELTA_PREFIX
operator|+
name|String
operator|.
name|format
argument_list|(
name|DELTA_DIGITS
argument_list|,
name|min
argument_list|)
operator|+
literal|"_"
operator|+
name|String
operator|.
name|format
argument_list|(
name|DELTA_DIGITS
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**    * Create a filename for a bucket file.    * @param directory the partition directory    * @param options the options for writing the bucket    * @return the filename that should store the bucket    */
specifier|public
specifier|static
name|Path
name|createFilename
parameter_list|(
name|Path
name|directory
parameter_list|,
name|AcidOutputFormat
operator|.
name|Options
name|options
parameter_list|)
block|{
name|String
name|subdir
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|getOldStyle
argument_list|()
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|directory
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|BUCKET_DIGITS
argument_list|,
name|options
operator|.
name|getBucket
argument_list|()
argument_list|)
operator|+
literal|"_0"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|isWritingBase
argument_list|()
condition|)
block|{
name|subdir
operator|=
name|BASE_PREFIX
operator|+
name|String
operator|.
name|format
argument_list|(
name|DELTA_DIGITS
argument_list|,
name|options
operator|.
name|getMaximumTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|subdir
operator|=
name|deltaSubdir
argument_list|(
name|options
operator|.
name|getMinimumTransactionId
argument_list|()
argument_list|,
name|options
operator|.
name|getMaximumTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|createBucketFile
argument_list|(
operator|new
name|Path
argument_list|(
name|directory
argument_list|,
name|subdir
argument_list|)
argument_list|,
name|options
operator|.
name|getBucket
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the transaction id from a base directory name.    * @param path the base directory name    * @return the maximum transaction id that is included    */
specifier|static
name|long
name|parseBase
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|String
name|filename
init|=
name|path
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|startsWith
argument_list|(
name|BASE_PREFIX
argument_list|)
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|filename
operator|.
name|substring
argument_list|(
name|BASE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|filename
operator|+
literal|" does not start with "
operator|+
name|BASE_PREFIX
argument_list|)
throw|;
block|}
comment|/**    * Parse a bucket filename back into the options that would have created    * the file.    * @param bucketFile the path to a bucket file    * @param conf the configuration    * @return the options used to create that filename    */
specifier|public
specifier|static
name|AcidOutputFormat
operator|.
name|Options
name|parseBaseBucketFilename
parameter_list|(
name|Path
name|bucketFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|AcidOutputFormat
operator|.
name|Options
name|result
init|=
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
name|bucketFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|result
operator|.
name|writingBase
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ORIGINAL_PATTERN
operator|.
name|matcher
argument_list|(
name|filename
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|int
name|bucket
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|filename
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|filename
operator|.
name|indexOf
argument_list|(
literal|'_'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|setOldStyle
argument_list|(
literal|true
argument_list|)
operator|.
name|minimumTransactionId
argument_list|(
literal|0
argument_list|)
operator|.
name|maximumTransactionId
argument_list|(
literal|0
argument_list|)
operator|.
name|bucket
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filename
operator|.
name|startsWith
argument_list|(
name|AcidUtils
operator|.
name|BUCKET_PREFIX
argument_list|)
condition|)
block|{
name|int
name|bucket
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|filename
operator|.
name|substring
argument_list|(
name|filename
operator|.
name|indexOf
argument_list|(
literal|'_'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|setOldStyle
argument_list|(
literal|false
argument_list|)
operator|.
name|minimumTransactionId
argument_list|(
literal|0
argument_list|)
operator|.
name|maximumTransactionId
argument_list|(
name|parseBase
argument_list|(
name|bucketFile
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
operator|.
name|bucket
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setOldStyle
argument_list|(
literal|true
argument_list|)
operator|.
name|bucket
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|minimumTransactionId
argument_list|(
literal|0
argument_list|)
operator|.
name|maximumTransactionId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
interface|interface
name|Directory
block|{
comment|/**      * Get the base directory.      * @return the base directory to read      */
name|Path
name|getBaseDirectory
parameter_list|()
function_decl|;
comment|/**      * Get the list of original files.      * @return the list of original files (eg. 000000_0)      */
name|List
argument_list|<
name|FileStatus
argument_list|>
name|getOriginalFiles
parameter_list|()
function_decl|;
comment|/**      * Get the list of base and delta directories that are valid and not      * obsolete.      * @return the minimal list of current directories      */
name|List
argument_list|<
name|ParsedDelta
argument_list|>
name|getCurrentDirectories
parameter_list|()
function_decl|;
comment|/**      * Get the list of obsolete directories. After filtering out bases and      * deltas that are not selected by the valid transaction list, return the      * list of original files, bases, and deltas that have been replaced by      * more up to date ones.      */
name|List
argument_list|<
name|FileStatus
argument_list|>
name|getObsolete
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|ParsedDelta
implements|implements
name|Comparable
argument_list|<
name|ParsedDelta
argument_list|>
block|{
specifier|final
name|long
name|minTransaction
decl_stmt|;
specifier|final
name|long
name|maxTransaction
decl_stmt|;
specifier|final
name|FileStatus
name|path
decl_stmt|;
name|ParsedDelta
parameter_list|(
name|long
name|min
parameter_list|,
name|long
name|max
parameter_list|,
name|FileStatus
name|path
parameter_list|)
block|{
name|this
operator|.
name|minTransaction
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|maxTransaction
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
specifier|public
name|long
name|getMinTransaction
parameter_list|()
block|{
return|return
name|minTransaction
return|;
block|}
specifier|public
name|long
name|getMaxTransaction
parameter_list|()
block|{
return|return
name|maxTransaction
return|;
block|}
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|path
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|ParsedDelta
name|parsedDelta
parameter_list|)
block|{
if|if
condition|(
name|minTransaction
operator|!=
name|parsedDelta
operator|.
name|minTransaction
condition|)
block|{
if|if
condition|(
name|minTransaction
operator|<
name|parsedDelta
operator|.
name|minTransaction
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|maxTransaction
operator|!=
name|parsedDelta
operator|.
name|maxTransaction
condition|)
block|{
if|if
condition|(
name|maxTransaction
operator|<
name|parsedDelta
operator|.
name|maxTransaction
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
else|else
block|{
return|return
name|path
operator|.
name|compareTo
argument_list|(
name|parsedDelta
operator|.
name|path
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Convert a list of deltas to a list of delta directories.    * @param deltas the list of deltas out of a Directory object.    * @return a list of delta directory paths that need to be read    */
specifier|public
specifier|static
name|Path
index|[]
name|getPaths
parameter_list|(
name|List
argument_list|<
name|ParsedDelta
argument_list|>
name|deltas
parameter_list|)
block|{
name|Path
index|[]
name|result
init|=
operator|new
name|Path
index|[
name|deltas
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|deltas
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Convert the list of deltas into an equivalent list of begin/end    * transaction id pairs.    * @param deltas    * @return the list of transaction ids to serialize    */
specifier|public
specifier|static
name|List
argument_list|<
name|Long
argument_list|>
name|serializeDeltas
parameter_list|(
name|List
argument_list|<
name|ParsedDelta
argument_list|>
name|deltas
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|deltas
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|ParsedDelta
name|delta
range|:
name|deltas
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|delta
operator|.
name|minTransaction
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|delta
operator|.
name|maxTransaction
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Convert the list of begin/end transaction id pairs to a list of delta    * directories.    * @param root the root directory    * @param deltas list of begin/end transaction id pairs    * @return the list of delta paths    */
specifier|public
specifier|static
name|Path
index|[]
name|deserializeDeltas
parameter_list|(
name|Path
name|root
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|deltas
parameter_list|)
block|{
name|int
name|deltaSize
init|=
name|deltas
operator|.
name|size
argument_list|()
operator|/
literal|2
decl_stmt|;
name|Path
index|[]
name|result
init|=
operator|new
name|Path
index|[
name|deltaSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deltaSize
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|deltaSubdir
argument_list|(
name|deltas
operator|.
name|get
argument_list|(
name|i
operator|*
literal|2
argument_list|)
argument_list|,
name|deltas
operator|.
name|get
argument_list|(
name|i
operator|*
literal|2
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|static
name|ParsedDelta
name|parseDelta
parameter_list|(
name|FileStatus
name|path
parameter_list|)
block|{
name|String
name|filename
init|=
name|path
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|startsWith
argument_list|(
name|DELTA_PREFIX
argument_list|)
condition|)
block|{
name|String
name|rest
init|=
name|filename
operator|.
name|substring
argument_list|(
name|DELTA_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|split
init|=
name|rest
operator|.
name|indexOf
argument_list|(
literal|'_'
argument_list|)
decl_stmt|;
name|long
name|min
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|rest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|split
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|max
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|rest
operator|.
name|substring
argument_list|(
name|split
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ParsedDelta
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|path
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|path
operator|+
literal|" does not start with "
operator|+
name|DELTA_PREFIX
argument_list|)
throw|;
block|}
comment|/**    * Get the ACID state of the given directory. It finds the minimal set of    * base and diff directories. Note that because major compactions don't    * preserve the history, we can't use a base directory that includes a    * transaction id that we must exclude.    * @param directory the partition directory to analyze    * @param conf the configuration    * @param txnList the list of transactions that we are reading    * @return the state of the directory    * @throws IOException    */
specifier|public
specifier|static
name|Directory
name|getAcidState
parameter_list|(
name|Path
name|directory
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ValidTxnList
name|txnList
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|directory
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|bestBase
init|=
literal|null
decl_stmt|;
name|long
name|bestBaseTxn
init|=
literal|0
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ParsedDelta
argument_list|>
name|deltas
init|=
operator|new
name|ArrayList
argument_list|<
name|ParsedDelta
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ParsedDelta
argument_list|>
name|working
init|=
operator|new
name|ArrayList
argument_list|<
name|ParsedDelta
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FileStatus
argument_list|>
name|original
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FileStatus
argument_list|>
name|obsolete
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|Path
name|ignoredBase
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|children
init|=
name|SHIMS
operator|.
name|listLocatedStatus
argument_list|(
name|fs
argument_list|,
name|directory
argument_list|,
name|hiddenFileFilter
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|child
range|:
name|children
control|)
block|{
name|Path
name|p
init|=
name|child
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|fn
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fn
operator|.
name|startsWith
argument_list|(
name|BASE_PREFIX
argument_list|)
operator|&&
name|child
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|long
name|txn
init|=
name|parseBase
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|txnList
operator|.
name|isTxnRangeCommitted
argument_list|(
literal|0
argument_list|,
name|txn
argument_list|)
operator|!=
name|ValidTxnList
operator|.
name|RangeResponse
operator|.
name|ALL
condition|)
block|{
name|ignoredBase
operator|=
name|p
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bestBase
operator|==
literal|null
condition|)
block|{
name|bestBase
operator|=
name|child
expr_stmt|;
name|bestBaseTxn
operator|=
name|txn
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bestBaseTxn
operator|<
name|txn
condition|)
block|{
name|obsolete
operator|.
name|add
argument_list|(
name|bestBase
argument_list|)
expr_stmt|;
name|bestBase
operator|=
name|child
expr_stmt|;
name|bestBaseTxn
operator|=
name|txn
expr_stmt|;
block|}
else|else
block|{
name|obsolete
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|fn
operator|.
name|startsWith
argument_list|(
name|DELTA_PREFIX
argument_list|)
operator|&&
name|child
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|ParsedDelta
name|delta
init|=
name|parseDelta
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|txnList
operator|.
name|isTxnRangeCommitted
argument_list|(
name|delta
operator|.
name|minTransaction
argument_list|,
name|delta
operator|.
name|maxTransaction
argument_list|)
operator|!=
name|ValidTxnList
operator|.
name|RangeResponse
operator|.
name|NONE
condition|)
block|{
name|working
operator|.
name|add
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|findOriginals
argument_list|(
name|fs
argument_list|,
name|child
argument_list|,
name|original
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Complain if all of the bases were too recent for the minimum excluded
comment|// transaction.
if|if
condition|(
name|bestBase
operator|==
literal|null
operator|&&
name|ignoredBase
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All base directories were ignored,"
operator|+
literal|" such as "
operator|+
name|ignoredBase
operator|+
literal|" by "
operator|+
name|txnList
argument_list|)
throw|;
block|}
comment|// if we have a base, the original files are obsolete.
if|if
condition|(
name|bestBase
operator|!=
literal|null
condition|)
block|{
name|obsolete
operator|.
name|addAll
argument_list|(
name|original
argument_list|)
expr_stmt|;
comment|// remove the entries so we don't get confused later and think we should
comment|// use them.
name|original
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|working
argument_list|)
expr_stmt|;
name|long
name|current
init|=
name|bestBaseTxn
decl_stmt|;
for|for
control|(
name|ParsedDelta
name|next
range|:
name|working
control|)
block|{
if|if
condition|(
name|next
operator|.
name|maxTransaction
operator|>
name|current
condition|)
block|{
comment|// are any of the new transactions ones that we care about?
if|if
condition|(
name|txnList
operator|.
name|isTxnRangeCommitted
argument_list|(
name|current
operator|+
literal|1
argument_list|,
name|next
operator|.
name|maxTransaction
argument_list|)
operator|!=
name|ValidTxnList
operator|.
name|RangeResponse
operator|.
name|NONE
condition|)
block|{
name|deltas
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|current
operator|=
name|next
operator|.
name|maxTransaction
expr_stmt|;
block|}
block|}
else|else
block|{
name|obsolete
operator|.
name|add
argument_list|(
name|next
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Path
name|base
init|=
name|bestBase
operator|==
literal|null
condition|?
literal|null
else|:
name|bestBase
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"base = "
operator|+
name|base
operator|+
literal|" deltas = "
operator|+
name|deltas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Directory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Path
name|getBaseDirectory
parameter_list|()
block|{
return|return
name|base
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FileStatus
argument_list|>
name|getOriginalFiles
parameter_list|()
block|{
return|return
name|original
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ParsedDelta
argument_list|>
name|getCurrentDirectories
parameter_list|()
block|{
return|return
name|deltas
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FileStatus
argument_list|>
name|getObsolete
parameter_list|()
block|{
return|return
name|obsolete
return|;
block|}
block|}
return|;
block|}
comment|/**    * Find the original files (non-ACID layout) recursively under the partition    * directory.    * @param fs the file system    * @param stat the file/directory to add    * @param original the list of original files    * @throws IOException    */
specifier|private
specifier|static
name|void
name|findOriginals
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|stat
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|original
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stat
operator|.
name|isDir
argument_list|()
condition|)
block|{
for|for
control|(
name|FileStatus
name|child
range|:
name|SHIMS
operator|.
name|listLocatedStatus
argument_list|(
name|fs
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
name|hiddenFileFilter
argument_list|)
control|)
block|{
name|findOriginals
argument_list|(
name|fs
argument_list|,
name|child
argument_list|,
name|original
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|original
operator|.
name|add
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

