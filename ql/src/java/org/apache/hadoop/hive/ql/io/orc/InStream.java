begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|DiskRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DebugUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LogLevels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|EncodedColumnBatch
operator|.
name|StreamBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|cache
operator|.
name|LlapMemoryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|cache
operator|.
name|LowLevelCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|RecordReaderImpl
operator|.
name|BufferChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|RecordReaderImpl
operator|.
name|CacheChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|ZeroCopyReaderShim
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|InStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|InStream
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|LogLevels
name|LOGL
init|=
operator|new
name|LogLevels
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|String
name|fileName
decl_stmt|;
specifier|protected
specifier|final
name|String
name|name
decl_stmt|;
specifier|protected
specifier|final
name|long
name|length
decl_stmt|;
specifier|public
name|InStream
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|fileName
return|;
block|}
specifier|public
name|String
name|getStreamName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|long
name|getStreamLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
specifier|private
specifier|static
class|class
name|UncompressedStream
extends|extends
name|InStream
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|DiskRange
argument_list|>
name|bytes
decl_stmt|;
specifier|private
specifier|final
name|long
name|length
decl_stmt|;
specifier|private
name|long
name|currentOffset
decl_stmt|;
specifier|private
name|ByteBuffer
name|range
decl_stmt|;
specifier|private
name|int
name|currentRange
decl_stmt|;
specifier|public
name|UncompressedStream
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|DiskRange
argument_list|>
name|input
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|fileName
argument_list|,
name|name
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|bytes
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|currentRange
operator|=
literal|0
expr_stmt|;
name|currentOffset
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
block|{
if|if
condition|(
name|range
operator|==
literal|null
operator|||
name|range
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|currentOffset
operator|==
name|length
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|seek
argument_list|(
name|currentOffset
argument_list|)
expr_stmt|;
block|}
name|currentOffset
operator|+=
literal|1
expr_stmt|;
return|return
literal|0xff
operator|&
name|range
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|range
operator|==
literal|null
operator|||
name|range
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|currentOffset
operator|==
name|this
operator|.
name|length
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|seek
argument_list|(
name|currentOffset
argument_list|)
expr_stmt|;
block|}
name|int
name|actualLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|range
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|range
operator|.
name|get
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|actualLength
argument_list|)
expr_stmt|;
name|currentOffset
operator|+=
name|actualLength
expr_stmt|;
return|return
name|actualLength
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|available
parameter_list|()
block|{
if|if
condition|(
name|range
operator|!=
literal|null
operator|&&
name|range
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|range
operator|.
name|remaining
argument_list|()
return|;
block|}
return|return
call|(
name|int
call|)
argument_list|(
name|length
operator|-
name|currentOffset
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|currentRange
operator|=
name|bytes
operator|.
name|size
argument_list|()
expr_stmt|;
name|currentOffset
operator|=
name|length
expr_stmt|;
comment|// explicit de-ref of bytes[]
name|bytes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|desired
parameter_list|)
block|{
if|if
condition|(
name|desired
operator|==
literal|0
operator|&&
name|bytes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logEmptySeek
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DiskRange
name|curRange
range|:
name|bytes
control|)
block|{
if|if
condition|(
name|desired
operator|==
literal|0
operator|&&
name|curRange
operator|.
name|getData
argument_list|()
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
name|logEmptySeek
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|curRange
operator|.
name|offset
operator|<=
name|desired
operator|&&
operator|(
name|desired
operator|-
name|curRange
operator|.
name|offset
operator|)
operator|<
name|curRange
operator|.
name|getLength
argument_list|()
condition|)
block|{
name|currentOffset
operator|=
name|desired
expr_stmt|;
name|currentRange
operator|=
name|i
expr_stmt|;
name|this
operator|.
name|range
operator|=
name|curRange
operator|.
name|getData
argument_list|()
expr_stmt|;
name|int
name|pos
init|=
name|range
operator|.
name|position
argument_list|()
decl_stmt|;
name|pos
operator|+=
call|(
name|int
call|)
argument_list|(
name|desired
operator|-
name|curRange
operator|.
name|offset
argument_list|)
expr_stmt|;
comment|// this is why we duplicate
name|this
operator|.
name|range
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
return|return;
block|}
operator|++
name|i
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Seek in "
operator|+
name|name
operator|+
literal|" to "
operator|+
name|desired
operator|+
literal|" is outside of the data"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"uncompressed stream "
operator|+
name|name
operator|+
literal|" position: "
operator|+
name|currentOffset
operator|+
literal|" length: "
operator|+
name|length
operator|+
literal|" range: "
operator|+
name|currentRange
operator|+
literal|" offset: "
operator|+
operator|(
name|range
operator|==
literal|null
condition|?
literal|0
else|:
name|range
operator|.
name|position
argument_list|()
operator|)
operator|+
literal|" limit: "
operator|+
operator|(
name|range
operator|==
literal|null
condition|?
literal|0
else|:
name|range
operator|.
name|limit
argument_list|()
operator|)
return|;
block|}
block|}
specifier|private
specifier|static
name|ByteBuffer
name|allocateBuffer
parameter_list|(
name|int
name|size
parameter_list|,
name|boolean
name|isDirect
parameter_list|)
block|{
comment|// TODO: use the same pool as the ORC readers
if|if
condition|(
name|isDirect
condition|)
block|{
return|return
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|size
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|size
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CompressedStream
extends|extends
name|InStream
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|DiskRange
argument_list|>
name|bytes
decl_stmt|;
specifier|private
specifier|final
name|int
name|bufferSize
decl_stmt|;
specifier|private
name|LlapMemoryBuffer
name|cacheBuffer
decl_stmt|;
specifier|private
name|ByteBuffer
name|uncompressed
decl_stmt|;
specifier|private
specifier|final
name|CompressionCodec
name|codec
decl_stmt|;
specifier|private
name|ByteBuffer
name|compressed
decl_stmt|;
specifier|private
name|long
name|currentOffset
decl_stmt|;
specifier|private
name|int
name|currentRange
decl_stmt|;
specifier|private
name|boolean
name|isUncompressedOriginal
decl_stmt|;
specifier|private
specifier|final
name|LowLevelCache
name|cache
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|doManageBuffers
init|=
literal|true
decl_stmt|;
specifier|public
name|CompressedStream
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|DiskRange
argument_list|>
name|input
parameter_list|,
name|long
name|length
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|LowLevelCache
name|cache
parameter_list|)
block|{
name|super
argument_list|(
name|fileName
argument_list|,
name|name
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|bytes
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|codec
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
name|currentOffset
operator|=
literal|0
expr_stmt|;
name|currentRange
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
block|}
comment|// TODO: This should not be used for main path.
specifier|private
specifier|final
name|LlapMemoryBuffer
index|[]
name|singleAllocDest
init|=
operator|new
name|LlapMemoryBuffer
index|[
literal|1
index|]
decl_stmt|;
specifier|private
name|void
name|allocateForUncompressed
parameter_list|(
name|int
name|size
parameter_list|,
name|boolean
name|isDirect
parameter_list|)
block|{
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|cacheBuffer
operator|=
literal|null
expr_stmt|;
name|uncompressed
operator|=
name|allocateBuffer
argument_list|(
name|size
argument_list|,
name|isDirect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|singleAllocDest
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
name|cache
operator|.
name|allocateMultiple
argument_list|(
name|singleAllocDest
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|cacheBuffer
operator|=
name|singleAllocDest
index|[
literal|0
index|]
expr_stmt|;
name|uncompressed
operator|=
name|cacheBuffer
operator|.
name|byteBuffer
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|readHeader
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|compressed
operator|==
literal|null
operator|||
name|compressed
operator|.
name|remaining
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|seek
argument_list|(
name|currentOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cacheBuffer
operator|!=
literal|null
condition|)
block|{
assert|assert
name|compressed
operator|==
literal|null
assert|;
return|return;
comment|// Next block is ready from cache.
block|}
name|long
name|originalOffset
init|=
name|currentOffset
decl_stmt|;
if|if
condition|(
name|compressed
operator|.
name|remaining
argument_list|()
operator|>
name|OutStream
operator|.
name|HEADER_SIZE
condition|)
block|{
name|int
name|b0
init|=
name|compressed
operator|.
name|get
argument_list|()
operator|&
literal|0xff
decl_stmt|;
name|int
name|b1
init|=
name|compressed
operator|.
name|get
argument_list|()
operator|&
literal|0xff
decl_stmt|;
name|int
name|b2
init|=
name|compressed
operator|.
name|get
argument_list|()
operator|&
literal|0xff
decl_stmt|;
name|boolean
name|isOriginal
init|=
operator|(
name|b0
operator|&
literal|0x01
operator|)
operator|==
literal|1
decl_stmt|;
name|int
name|chunkLength
init|=
operator|(
name|b2
operator|<<
literal|15
operator|)
operator||
operator|(
name|b1
operator|<<
literal|7
operator|)
operator||
operator|(
name|b0
operator|>>
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|chunkLength
operator|>
name|bufferSize
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Buffer size too small. size = "
operator|+
name|bufferSize
operator|+
literal|" needed = "
operator|+
name|chunkLength
argument_list|)
throw|;
block|}
comment|// read 3 bytes, which should be equal to OutStream.HEADER_SIZE always
assert|assert
name|OutStream
operator|.
name|HEADER_SIZE
operator|==
literal|3
operator|:
literal|"The Orc HEADER_SIZE must be the same in OutStream and InStream"
assert|;
name|currentOffset
operator|+=
name|OutStream
operator|.
name|HEADER_SIZE
expr_stmt|;
name|ByteBuffer
name|slice
init|=
name|this
operator|.
name|slice
argument_list|(
name|chunkLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|isOriginal
condition|)
block|{
name|uncompressed
operator|=
name|slice
expr_stmt|;
name|isUncompressedOriginal
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isUncompressedOriginal
condition|)
block|{
name|allocateForUncompressed
argument_list|(
name|bufferSize
argument_list|,
name|slice
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|isUncompressedOriginal
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|uncompressed
operator|==
literal|null
condition|)
block|{
name|allocateForUncompressed
argument_list|(
name|bufferSize
argument_list|,
name|slice
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uncompressed
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|codec
operator|.
name|decompress
argument_list|(
name|slice
argument_list|,
name|uncompressed
argument_list|)
expr_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
comment|// TODO: this is the inefficient path
comment|// TODO#: this is invalid; base stripe offset should be passed.
name|cache
operator|.
name|putFileData
argument_list|(
name|fileName
argument_list|,
operator|new
name|DiskRange
index|[]
block|{
operator|new
name|DiskRange
argument_list|(
name|originalOffset
argument_list|,
name|chunkLength
operator|+
name|OutStream
operator|.
name|HEADER_SIZE
argument_list|)
block|}
argument_list|,
operator|new
name|LlapMemoryBuffer
index|[]
block|{
name|cacheBuffer
block|}
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't read header at "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|uncompressed
operator|==
literal|null
operator|||
name|uncompressed
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|currentOffset
operator|==
name|length
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|readHeader
argument_list|()
expr_stmt|;
block|}
return|return
literal|0xff
operator|&
name|uncompressed
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|uncompressed
operator|==
literal|null
operator|||
name|uncompressed
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|currentOffset
operator|==
name|this
operator|.
name|length
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|readHeader
argument_list|()
expr_stmt|;
block|}
name|int
name|actualLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|uncompressed
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|uncompressed
operator|.
name|get
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|actualLength
argument_list|)
expr_stmt|;
return|return
name|actualLength
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|uncompressed
operator|==
literal|null
operator|||
name|uncompressed
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|currentOffset
operator|==
name|length
condition|)
block|{
return|return
literal|0
return|;
block|}
name|readHeader
argument_list|()
expr_stmt|;
block|}
return|return
name|uncompressed
operator|.
name|remaining
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|cacheBuffer
operator|=
literal|null
expr_stmt|;
name|uncompressed
operator|=
literal|null
expr_stmt|;
name|compressed
operator|=
literal|null
expr_stmt|;
name|currentRange
operator|=
name|bytes
operator|.
name|size
argument_list|()
expr_stmt|;
name|currentOffset
operator|=
name|length
expr_stmt|;
if|if
condition|(
name|doManageBuffers
condition|)
block|{
comment|// TODO: this is the inefficient path for now. LLAP will used this differently.
for|for
control|(
name|DiskRange
name|range
range|:
name|bytes
control|)
block|{
if|if
condition|(
name|range
operator|instanceof
name|CacheChunk
condition|)
block|{
name|cache
operator|.
name|releaseBuffer
argument_list|(
operator|(
operator|(
name|CacheChunk
operator|)
name|range
operator|)
operator|.
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|bytes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|uncompressedBytes
init|=
name|index
operator|.
name|getNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|uncompressedBytes
operator|!=
literal|0
condition|)
block|{
name|readHeader
argument_list|()
expr_stmt|;
name|uncompressed
operator|.
name|position
argument_list|(
name|uncompressed
operator|.
name|position
argument_list|()
operator|+
operator|(
name|int
operator|)
name|uncompressedBytes
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|uncompressed
operator|!=
literal|null
condition|)
block|{
comment|// mark the uncompressed buffer as done
name|uncompressed
operator|.
name|position
argument_list|(
name|uncompressed
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* slices a read only contiguous buffer of chunkLength */
specifier|private
name|ByteBuffer
name|slice
parameter_list|(
name|int
name|chunkLength
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|chunkLength
decl_stmt|;
specifier|final
name|long
name|oldOffset
init|=
name|currentOffset
decl_stmt|;
name|ByteBuffer
name|slice
decl_stmt|;
if|if
condition|(
name|compressed
operator|.
name|remaining
argument_list|()
operator|>=
name|len
condition|)
block|{
name|slice
operator|=
name|compressed
operator|.
name|slice
argument_list|()
expr_stmt|;
comment|// simple case
name|slice
operator|.
name|limit
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|currentOffset
operator|+=
name|len
expr_stmt|;
name|compressed
operator|.
name|position
argument_list|(
name|compressed
operator|.
name|position
argument_list|()
operator|+
name|len
argument_list|)
expr_stmt|;
return|return
name|slice
return|;
block|}
elseif|else
if|if
condition|(
name|currentRange
operator|>=
operator|(
name|bytes
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
comment|// nothing has been modified yet
throw|throw
operator|new
name|IOException
argument_list|(
literal|"EOF in "
operator|+
name|this
operator|+
literal|" while trying to read "
operator|+
name|chunkLength
operator|+
literal|" bytes"
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Crossing into next BufferChunk because compressed only has %d bytes (needs %d)"
argument_list|,
name|compressed
operator|.
name|remaining
argument_list|()
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// we need to consolidate 2 or more buffers into 1
comment|// first copy out compressed buffers
name|ByteBuffer
name|copy
init|=
name|allocateBuffer
argument_list|(
name|chunkLength
argument_list|,
name|compressed
operator|.
name|isDirect
argument_list|()
argument_list|)
decl_stmt|;
name|currentOffset
operator|+=
name|compressed
operator|.
name|remaining
argument_list|()
expr_stmt|;
name|len
operator|-=
name|compressed
operator|.
name|remaining
argument_list|()
expr_stmt|;
name|copy
operator|.
name|put
argument_list|(
name|compressed
argument_list|)
expr_stmt|;
name|ListIterator
argument_list|<
name|DiskRange
argument_list|>
name|iter
init|=
name|bytes
operator|.
name|listIterator
argument_list|(
name|currentRange
argument_list|)
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
operator|&&
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
operator|++
name|currentRange
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Read slow-path,>1 cross block reads with %s"
argument_list|,
name|this
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DiskRange
name|range
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|compressed
operator|=
name|range
operator|.
name|getData
argument_list|()
operator|.
name|duplicate
argument_list|()
expr_stmt|;
if|if
condition|(
name|compressed
operator|.
name|remaining
argument_list|()
operator|>=
name|len
condition|)
block|{
name|slice
operator|=
name|compressed
operator|.
name|slice
argument_list|()
expr_stmt|;
name|slice
operator|.
name|limit
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|copy
operator|.
name|put
argument_list|(
name|slice
argument_list|)
expr_stmt|;
name|currentOffset
operator|+=
name|len
expr_stmt|;
name|compressed
operator|.
name|position
argument_list|(
name|compressed
operator|.
name|position
argument_list|()
operator|+
name|len
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
name|currentOffset
operator|+=
name|compressed
operator|.
name|remaining
argument_list|()
expr_stmt|;
name|len
operator|-=
name|compressed
operator|.
name|remaining
argument_list|()
expr_stmt|;
name|copy
operator|.
name|put
argument_list|(
name|compressed
argument_list|)
expr_stmt|;
block|}
comment|// restore offsets for exception clarity
name|seek
argument_list|(
name|oldOffset
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"EOF in "
operator|+
name|this
operator|+
literal|" while trying to read "
operator|+
name|chunkLength
operator|+
literal|" bytes"
argument_list|)
throw|;
block|}
specifier|private
name|void
name|seek
parameter_list|(
name|long
name|desired
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|desired
operator|==
literal|0
operator|&&
name|bytes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logEmptySeek
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DiskRange
name|range
range|:
name|bytes
control|)
block|{
if|if
condition|(
name|range
operator|.
name|offset
operator|<=
name|desired
operator|&&
name|desired
operator|<
name|range
operator|.
name|end
condition|)
block|{
name|currentRange
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|range
operator|instanceof
name|BufferChunk
condition|)
block|{
name|cacheBuffer
operator|=
literal|null
expr_stmt|;
name|compressed
operator|=
name|range
operator|.
name|getData
argument_list|()
operator|.
name|duplicate
argument_list|()
expr_stmt|;
name|int
name|pos
init|=
name|compressed
operator|.
name|position
argument_list|()
decl_stmt|;
name|pos
operator|+=
call|(
name|int
call|)
argument_list|(
name|desired
operator|-
name|range
operator|.
name|offset
argument_list|)
expr_stmt|;
name|compressed
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compressed
operator|=
literal|null
expr_stmt|;
name|cacheBuffer
operator|=
operator|(
operator|(
name|CacheChunk
operator|)
name|range
operator|)
operator|.
name|buffer
expr_stmt|;
name|uncompressed
operator|=
name|cacheBuffer
operator|.
name|byteBuffer
operator|.
name|duplicate
argument_list|()
expr_stmt|;
if|if
condition|(
name|desired
operator|!=
name|range
operator|.
name|offset
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot seek into the middle of uncompressed cached data"
argument_list|)
throw|;
block|}
block|}
name|currentOffset
operator|=
name|desired
expr_stmt|;
return|return;
block|}
operator|++
name|i
expr_stmt|;
block|}
comment|// if they are seeking to the precise end, go ahead and let them go there
name|int
name|segments
init|=
name|bytes
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|segments
operator|!=
literal|0
operator|&&
name|desired
operator|==
name|bytes
operator|.
name|get
argument_list|(
name|segments
operator|-
literal|1
argument_list|)
operator|.
name|end
condition|)
block|{
name|DiskRange
name|range
init|=
name|bytes
operator|.
name|get
argument_list|(
name|segments
operator|-
literal|1
argument_list|)
decl_stmt|;
name|currentRange
operator|=
name|segments
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|range
operator|instanceof
name|BufferChunk
condition|)
block|{
name|cacheBuffer
operator|=
literal|null
expr_stmt|;
name|compressed
operator|=
name|range
operator|.
name|getData
argument_list|()
operator|.
name|duplicate
argument_list|()
expr_stmt|;
name|compressed
operator|.
name|position
argument_list|(
name|compressed
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compressed
operator|=
literal|null
expr_stmt|;
name|cacheBuffer
operator|=
operator|(
operator|(
name|CacheChunk
operator|)
name|range
operator|)
operator|.
name|buffer
expr_stmt|;
name|uncompressed
operator|=
name|cacheBuffer
operator|.
name|byteBuffer
operator|.
name|duplicate
argument_list|()
expr_stmt|;
name|uncompressed
operator|.
name|position
argument_list|(
name|uncompressed
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|desired
operator|!=
name|range
operator|.
name|offset
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot seek into the middle of uncompressed cached data"
argument_list|)
throw|;
block|}
name|currentOffset
operator|=
name|desired
expr_stmt|;
block|}
return|return;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Seek outside of data in "
operator|+
name|this
operator|+
literal|" to "
operator|+
name|desired
argument_list|)
throw|;
block|}
specifier|private
name|String
name|rangeString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DiskRange
name|range
range|:
name|bytes
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|" range "
operator|+
name|i
operator|+
literal|" = "
operator|+
name|range
operator|.
name|offset
operator|+
literal|" to "
operator|+
operator|(
name|range
operator|.
name|end
operator|-
name|range
operator|.
name|offset
operator|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"compressed stream "
operator|+
name|name
operator|+
literal|" position: "
operator|+
name|currentOffset
operator|+
literal|" length: "
operator|+
name|length
operator|+
literal|" range: "
operator|+
name|currentRange
operator|+
literal|" offset: "
operator|+
operator|(
name|compressed
operator|==
literal|null
condition|?
literal|0
else|:
name|compressed
operator|.
name|position
argument_list|()
operator|)
operator|+
literal|" limit: "
operator|+
operator|(
name|compressed
operator|==
literal|null
condition|?
literal|0
else|:
name|compressed
operator|.
name|limit
argument_list|()
operator|)
operator|+
name|rangeString
argument_list|()
operator|+
operator|(
name|uncompressed
operator|==
literal|null
condition|?
literal|""
else|:
literal|" uncompressed: "
operator|+
name|uncompressed
operator|.
name|position
argument_list|()
operator|+
literal|" to "
operator|+
name|uncompressed
operator|.
name|limit
argument_list|()
operator|)
return|;
block|}
block|}
specifier|public
specifier|abstract
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|private
specifier|static
name|void
name|logEmptySeek
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|LOGL
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Attempting seek into empty stream ("
operator|+
name|name
operator|+
literal|") Skipping stream."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|InStream
name|create
parameter_list|(
name|String
name|streamName
parameter_list|,
name|ByteBuffer
index|[]
name|buffers
parameter_list|,
name|long
index|[]
name|offsets
parameter_list|,
name|long
name|length
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
literal|null
argument_list|,
name|streamName
argument_list|,
name|buffers
argument_list|,
name|offsets
argument_list|,
name|length
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
comment|/**    * Create an input stream from a list of buffers.    * @param fileName name of the file    * @param streamName the name of the stream    * @param buffers the list of ranges of bytes for the stream    * @param offsets a list of offsets (the same length as input) that must    *                contain the first offset of the each set of bytes in input    * @param length the length in bytes of the stream    * @param codec the compression codec    * @param bufferSize the compression buffer size    * @return an input stream    * @throws IOException    */
annotation|@
name|VisibleForTesting
annotation|@
name|Deprecated
specifier|public
specifier|static
name|InStream
name|create
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|streamName
parameter_list|,
name|ByteBuffer
index|[]
name|buffers
parameter_list|,
name|long
index|[]
name|offsets
parameter_list|,
name|long
name|length
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|DiskRange
argument_list|>
name|input
init|=
operator|new
name|ArrayList
argument_list|<
name|DiskRange
argument_list|>
argument_list|(
name|buffers
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|input
operator|.
name|add
argument_list|(
operator|new
name|BufferChunk
argument_list|(
name|buffers
index|[
name|i
index|]
argument_list|,
name|offsets
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|create
argument_list|(
name|fileName
argument_list|,
name|streamName
argument_list|,
name|input
argument_list|,
name|length
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Create an input stream from a list of disk ranges with data.    * @param name the name of the stream    * @param input the list of ranges of bytes for the stream; from disk or cache    * @param length the length in bytes of the stream    * @param codec the compression codec    * @param bufferSize the compression buffer size    * @param cache Low-level cache to use to put data, if any. Only works with compressed streams.    * @return an input stream    * @throws IOException    */
specifier|public
specifier|static
name|InStream
name|create
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|DiskRange
argument_list|>
name|input
parameter_list|,
name|long
name|length
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|LowLevelCache
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|codec
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|UncompressedStream
argument_list|(
name|fileName
argument_list|,
name|name
argument_list|,
name|input
argument_list|,
name|length
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|CompressedStream
argument_list|(
name|fileName
argument_list|,
name|name
argument_list|,
name|input
argument_list|,
name|length
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|,
name|cache
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ProcCacheChunk
extends|extends
name|CacheChunk
block|{
specifier|public
name|ProcCacheChunk
parameter_list|(
name|long
name|cbStartOffset
parameter_list|,
name|long
name|cbEndOffset
parameter_list|,
name|boolean
name|isCompressed
parameter_list|,
name|ByteBuffer
name|originalData
parameter_list|,
name|LlapMemoryBuffer
name|targetBuffer
parameter_list|)
block|{
name|super
argument_list|(
name|targetBuffer
argument_list|,
name|cbStartOffset
argument_list|,
name|cbEndOffset
argument_list|)
expr_stmt|;
name|this
operator|.
name|isCompressed
operator|=
name|isCompressed
expr_stmt|;
name|this
operator|.
name|originalData
operator|=
name|originalData
expr_stmt|;
block|}
name|boolean
name|isCompressed
decl_stmt|;
name|ByteBuffer
name|originalData
init|=
literal|null
decl_stmt|;
block|}
comment|/**    * Uncompresses part of the stream. RGs can overlap, so we cannot just go and decompress    * and remove what we have returned. We will keep iterator as a "hint" point.    * TODO: Java LinkedList and iter have a really stupid interface. Replace with own simple one?    * @param zcr    */
specifier|public
specifier|static
name|void
name|uncompressStream
parameter_list|(
name|String
name|fileName
parameter_list|,
name|long
name|baseOffset
parameter_list|,
name|ZeroCopyReaderShim
name|zcr
parameter_list|,
name|ListIterator
argument_list|<
name|DiskRange
argument_list|>
name|ranges
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|LowLevelCache
name|cache
parameter_list|,
name|long
name|cOffset
parameter_list|,
name|long
name|endCOffset
parameter_list|,
name|StreamBuffer
name|streamBuffer
parameter_list|)
throws|throws
name|IOException
block|{
name|streamBuffer
operator|.
name|cacheBuffers
operator|=
operator|new
name|ArrayList
argument_list|<
name|LlapMemoryBuffer
argument_list|>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ProcCacheChunk
argument_list|>
name|toDecompress
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|toRelease
init|=
literal|null
decl_stmt|;
comment|// 1. Find our bearings in the stream. Normally, iter will already point either to where we
comment|// want to be, or just before. However, RGs can overlap due to encoding, so we may have
comment|// to return to a previous block.
name|DiskRange
name|current
init|=
name|findCompressedPosition
argument_list|(
name|ranges
argument_list|,
name|cOffset
argument_list|)
decl_stmt|;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting uncompressStream for ["
operator|+
name|cOffset
operator|+
literal|","
operator|+
name|endCOffset
operator|+
literal|") at "
operator|+
name|current
argument_list|)
expr_stmt|;
block|}
comment|// 2. Go thru the blocks; add stuff to results and prepare the decompression work (see below).
if|if
condition|(
name|cOffset
operator|>=
literal|0
operator|&&
name|cOffset
operator|!=
name|current
operator|.
name|offset
condition|)
block|{
comment|// We adjust offsets as we decompress, we expect to decompress sequentially, and we cache and
comment|// decompress entire CBs (obviously). Therefore the offset in the next DiskRange should
comment|// always be the start offset of a CB. TODO: what about at start?
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected offset - for "
operator|+
name|cOffset
operator|+
literal|", got "
operator|+
name|current
operator|.
name|offset
argument_list|)
throw|;
block|}
name|long
name|currentCOffset
init|=
name|cOffset
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|current
operator|instanceof
name|CacheChunk
condition|)
block|{
comment|// 2a. This is a cached compression buffer, add as is.
name|CacheChunk
name|cc
init|=
operator|(
name|CacheChunk
operator|)
name|current
decl_stmt|;
name|cache
operator|.
name|notifyReused
argument_list|(
name|cc
operator|.
name|buffer
argument_list|)
expr_stmt|;
name|streamBuffer
operator|.
name|cacheBuffers
operator|.
name|add
argument_list|(
name|cc
operator|.
name|buffer
argument_list|)
expr_stmt|;
name|currentCOffset
operator|=
name|cc
operator|.
name|end
expr_stmt|;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding an already-uncompressed buffer "
operator|+
name|cc
operator|.
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// 2b. This is a compressed buffer. We need to uncompress it; the buffer can comprise
comment|// several disk ranges, so we might need to combine them.
name|BufferChunk
name|bc
init|=
operator|(
name|BufferChunk
operator|)
name|current
decl_stmt|;
if|if
condition|(
name|toDecompress
operator|==
literal|null
condition|)
block|{
name|toDecompress
operator|=
operator|new
name|ArrayList
argument_list|<
name|ProcCacheChunk
argument_list|>
argument_list|()
expr_stmt|;
name|toRelease
operator|=
operator|(
name|zcr
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|long
name|originalOffset
init|=
name|bc
operator|.
name|offset
decl_stmt|;
name|int
name|compressedBytesConsumed
init|=
name|addOneCompressionBuffer
argument_list|(
name|bc
argument_list|,
name|ranges
argument_list|,
name|zcr
argument_list|,
name|bufferSize
argument_list|,
name|cache
argument_list|,
name|streamBuffer
operator|.
name|cacheBuffers
argument_list|,
name|toDecompress
argument_list|,
name|toRelease
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressedBytesConsumed
operator|==
operator|-
literal|1
condition|)
block|{
comment|// endCOffset is an estimate; we have a partially-read compression block, ignore it
break|break;
block|}
name|currentCOffset
operator|=
name|originalOffset
operator|+
name|compressedBytesConsumed
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|endCOffset
operator|>=
literal|0
operator|&&
name|currentCOffset
operator|>=
name|endCOffset
operator|)
operator|||
operator|!
name|ranges
operator|.
name|hasNext
argument_list|()
condition|)
block|{
break|break;
block|}
name|current
operator|=
name|ranges
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
comment|// 3. Allocate the buffers, prepare cache keys.
comment|// At this point, we have read all the CBs we need to read. cacheBuffers contains some cache
comment|// data and some unallocated membufs for decompression. toDecompress contains all the work we
comment|// need to do, and each item points to one of the membufs in cacheBuffers as target. The iter
comment|// has also been adjusted to point to these buffers instead of compressed data for the ranges.
if|if
condition|(
name|toDecompress
operator|==
literal|null
condition|)
return|return;
comment|// Nothing to decompress.
name|LlapMemoryBuffer
index|[]
name|targetBuffers
init|=
operator|new
name|LlapMemoryBuffer
index|[
name|toDecompress
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|DiskRange
index|[]
name|cacheKeys
init|=
operator|new
name|DiskRange
index|[
name|toDecompress
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|ix
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ProcCacheChunk
name|chunk
range|:
name|toDecompress
control|)
block|{
name|cacheKeys
index|[
name|ix
index|]
operator|=
name|chunk
expr_stmt|;
comment|// Relies on the fact that cache does not actually store these.
name|targetBuffers
index|[
name|ix
index|]
operator|=
name|chunk
operator|.
name|buffer
expr_stmt|;
operator|++
name|ix
expr_stmt|;
block|}
name|cache
operator|.
name|allocateMultiple
argument_list|(
name|targetBuffers
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
comment|// 4. Now decompress (or copy) the data into cache buffers.
for|for
control|(
name|ProcCacheChunk
name|chunk
range|:
name|toDecompress
control|)
block|{
name|int
name|startPos
init|=
name|chunk
operator|.
name|buffer
operator|.
name|byteBuffer
operator|.
name|position
argument_list|()
decl_stmt|;
if|if
condition|(
name|chunk
operator|.
name|isCompressed
condition|)
block|{
name|codec
operator|.
name|decompress
argument_list|(
name|chunk
operator|.
name|originalData
argument_list|,
name|chunk
operator|.
name|buffer
operator|.
name|byteBuffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chunk
operator|.
name|buffer
operator|.
name|byteBuffer
operator|.
name|put
argument_list|(
name|chunk
operator|.
name|originalData
argument_list|)
expr_stmt|;
comment|// Copy uncompressed data to cache.
block|}
name|chunk
operator|.
name|buffer
operator|.
name|byteBuffer
operator|.
name|position
argument_list|(
name|startPos
argument_list|)
expr_stmt|;
name|chunk
operator|.
name|originalData
operator|=
literal|null
expr_stmt|;
name|cache
operator|.
name|notifyReused
argument_list|(
name|chunk
operator|.
name|buffer
argument_list|)
expr_stmt|;
block|}
comment|// 5. Release original compressed buffers to zero-copy reader if needed.
if|if
condition|(
name|toRelease
operator|!=
literal|null
condition|)
block|{
assert|assert
name|zcr
operator|!=
literal|null
assert|;
for|for
control|(
name|ByteBuffer
name|buf
range|:
name|toRelease
control|)
block|{
name|zcr
operator|.
name|releaseBuffer
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 6. Finally, put data to cache.
name|cache
operator|.
name|putFileData
argument_list|(
name|fileName
argument_list|,
name|cacheKeys
argument_list|,
name|targetBuffers
argument_list|,
name|baseOffset
argument_list|)
expr_stmt|;
block|}
comment|/** Finds compressed offset in a stream and makes sure iter points to its position.      This may be necessary for obscure combinations of compression and encoding boundaries. */
specifier|private
specifier|static
name|DiskRange
name|findCompressedPosition
parameter_list|(
name|ListIterator
argument_list|<
name|DiskRange
argument_list|>
name|ranges
parameter_list|,
name|long
name|cOffset
parameter_list|)
block|{
if|if
condition|(
name|cOffset
operator|<
literal|0
condition|)
return|return
name|ranges
operator|.
name|next
argument_list|()
return|;
name|DiskRange
name|current
init|=
literal|null
decl_stmt|;
name|boolean
name|doCallNext
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ranges
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|ranges
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ranges
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|current
operator|=
name|ranges
operator|.
name|previous
argument_list|()
expr_stmt|;
name|doCallNext
operator|=
literal|true
expr_stmt|;
block|}
comment|// We expect the offset to be valid TODO: rather, validate
while|while
condition|(
name|current
operator|.
name|end
operator|<=
name|cOffset
condition|)
block|{
name|current
operator|=
name|ranges
operator|.
name|next
argument_list|()
expr_stmt|;
name|doCallNext
operator|=
literal|false
expr_stmt|;
block|}
while|while
condition|(
name|current
operator|.
name|offset
operator|>
name|cOffset
condition|)
block|{
name|current
operator|=
name|ranges
operator|.
name|previous
argument_list|()
expr_stmt|;
name|doCallNext
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|doCallNext
condition|)
block|{
comment|// TODO: WTF?
name|ranges
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// We called previous, make sure next is the real next and not current.
block|}
return|return
name|current
return|;
block|}
comment|/**    * Reads one compression block from the source; handles compression blocks read from    * multiple ranges (usually, that would only happen with zcr).    * Adds stuff to cachedBuffers, toDecompress and toRelease (see below what each does).    * @param current BufferChunk where compression block starts.    * @param ranges Iterator of all chunks, pointing at current.    * @param cacheBuffers The result buffer array to add pre-allocated target cache buffer.    * @param toDecompress The list of work to decompress - pairs of compressed buffers and the     *                     target buffers (same as the ones added to cacheBuffers).    * @param toRelease The list of buffers to release to zcr because they are no longer in use.    * @return The total number of compressed bytes consumed.    */
specifier|private
specifier|static
name|int
name|addOneCompressionBuffer
parameter_list|(
name|BufferChunk
name|current
parameter_list|,
name|ListIterator
argument_list|<
name|DiskRange
argument_list|>
name|ranges
parameter_list|,
name|ZeroCopyReaderShim
name|zcr
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|LowLevelCache
name|cache
parameter_list|,
name|List
argument_list|<
name|LlapMemoryBuffer
argument_list|>
name|cacheBuffers
parameter_list|,
name|List
argument_list|<
name|ProcCacheChunk
argument_list|>
name|toDecompress
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|toRelease
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|slice
init|=
literal|null
decl_stmt|;
name|ByteBuffer
name|compressed
init|=
name|current
operator|.
name|chunk
decl_stmt|;
name|long
name|cbStartOffset
init|=
name|current
operator|.
name|offset
decl_stmt|;
name|int
name|b0
init|=
name|compressed
operator|.
name|get
argument_list|()
operator|&
literal|0xff
decl_stmt|;
name|int
name|b1
init|=
name|compressed
operator|.
name|get
argument_list|()
operator|&
literal|0xff
decl_stmt|;
name|int
name|b2
init|=
name|compressed
operator|.
name|get
argument_list|()
operator|&
literal|0xff
decl_stmt|;
name|int
name|chunkLength
init|=
operator|(
name|b2
operator|<<
literal|15
operator|)
operator||
operator|(
name|b1
operator|<<
literal|7
operator|)
operator||
operator|(
name|b0
operator|>>
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|chunkLength
operator|>
name|bufferSize
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Buffer size too small. size = "
operator|+
name|bufferSize
operator|+
literal|" needed = "
operator|+
name|chunkLength
argument_list|)
throw|;
block|}
name|int
name|consumedLength
init|=
name|chunkLength
operator|+
name|OutStream
operator|.
name|HEADER_SIZE
decl_stmt|;
name|long
name|cbEndOffset
init|=
name|cbStartOffset
operator|+
name|consumedLength
decl_stmt|;
name|boolean
name|isUncompressed
init|=
operator|(
operator|(
name|b0
operator|&
literal|0x01
operator|)
operator|==
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found CB at "
operator|+
name|cbStartOffset
operator|+
literal|", chunk length "
operator|+
name|chunkLength
operator|+
literal|", total "
operator|+
name|consumedLength
operator|+
literal|", "
operator|+
operator|(
name|isUncompressed
condition|?
literal|"not "
else|:
literal|""
operator|)
operator|+
literal|"compressed"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compressed
operator|.
name|remaining
argument_list|()
operator|>=
name|chunkLength
condition|)
block|{
comment|// Simple case - CB fits entirely in the disk range.
name|slice
operator|=
name|compressed
operator|.
name|slice
argument_list|()
expr_stmt|;
name|slice
operator|.
name|limit
argument_list|(
name|chunkLength
argument_list|)
expr_stmt|;
name|addOneCompressionBlockByteBuffer
argument_list|(
name|slice
argument_list|,
name|isUncompressed
argument_list|,
name|cbStartOffset
argument_list|,
name|cbEndOffset
argument_list|,
name|chunkLength
argument_list|,
name|ranges
argument_list|,
name|current
argument_list|,
name|cache
argument_list|,
name|toDecompress
argument_list|,
name|cacheBuffers
argument_list|)
expr_stmt|;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adjusting "
operator|+
name|current
operator|+
literal|" to consume "
operator|+
name|consumedLength
argument_list|)
expr_stmt|;
block|}
name|current
operator|.
name|offset
operator|+=
name|consumedLength
expr_stmt|;
if|if
condition|(
name|compressed
operator|.
name|remaining
argument_list|()
operator|<=
literal|0
operator|&&
name|zcr
operator|!=
literal|null
condition|)
block|{
name|toRelease
operator|.
name|add
argument_list|(
name|compressed
argument_list|)
expr_stmt|;
block|}
return|return
name|consumedLength
return|;
block|}
if|if
condition|(
name|current
operator|.
name|end
operator|<
name|cbEndOffset
operator|&&
operator|!
name|ranges
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
comment|// This is impossible to read from this chunk.
block|}
comment|// TODO: we could remove extra copy for isUncompressed case by copying directly to cache.
comment|// We need to consolidate 2 or more buffers into one to decompress.
name|ByteBuffer
name|copy
init|=
name|allocateBuffer
argument_list|(
name|chunkLength
argument_list|,
name|compressed
operator|.
name|isDirect
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|remaining
init|=
name|chunkLength
operator|-
name|compressed
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|int
name|originalPos
init|=
name|compressed
operator|.
name|position
argument_list|()
decl_stmt|;
name|copy
operator|.
name|put
argument_list|(
name|compressed
argument_list|)
expr_stmt|;
name|ranges
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing "
operator|+
name|current
operator|+
literal|" from ranges"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|zcr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|originalPos
operator|==
literal|0
condition|)
block|{
name|zcr
operator|.
name|releaseBuffer
argument_list|(
name|compressed
argument_list|)
expr_stmt|;
comment|// We copied the entire buffer.
block|}
else|else
block|{
name|toRelease
operator|.
name|add
argument_list|(
name|compressed
argument_list|)
expr_stmt|;
comment|// There might be slices depending on this buffer.
block|}
block|}
name|DiskRange
name|nextRange
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|ranges
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nextRange
operator|=
name|ranges
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|nextRange
operator|instanceof
name|BufferChunk
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Trying to extend compressed block into uncompressed block"
argument_list|)
throw|;
block|}
name|compressed
operator|=
name|nextRange
operator|.
name|getData
argument_list|()
expr_stmt|;
if|if
condition|(
name|compressed
operator|.
name|remaining
argument_list|()
operator|>=
name|remaining
condition|)
block|{
comment|// This is the last range for this compression block. Yay!
name|slice
operator|=
name|compressed
operator|.
name|slice
argument_list|()
expr_stmt|;
name|slice
operator|.
name|limit
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
name|copy
operator|.
name|put
argument_list|(
name|slice
argument_list|)
expr_stmt|;
name|addOneCompressionBlockByteBuffer
argument_list|(
name|copy
argument_list|,
name|isUncompressed
argument_list|,
name|cbStartOffset
argument_list|,
name|cbEndOffset
argument_list|,
name|remaining
argument_list|,
name|ranges
argument_list|,
name|current
argument_list|,
name|cache
argument_list|,
name|toDecompress
argument_list|,
name|cacheBuffers
argument_list|)
expr_stmt|;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adjusting "
operator|+
name|nextRange
operator|+
literal|" to consume "
operator|+
name|remaining
argument_list|)
expr_stmt|;
block|}
name|nextRange
operator|.
name|offset
operator|+=
name|remaining
expr_stmt|;
if|if
condition|(
name|compressed
operator|.
name|remaining
argument_list|()
operator|<=
literal|0
operator|&&
name|zcr
operator|!=
literal|null
condition|)
block|{
name|zcr
operator|.
name|releaseBuffer
argument_list|(
name|compressed
argument_list|)
expr_stmt|;
comment|// We copied the entire buffer.
block|}
return|return
name|consumedLength
return|;
block|}
name|remaining
operator|-=
name|compressed
operator|.
name|remaining
argument_list|()
expr_stmt|;
name|copy
operator|.
name|put
argument_list|(
name|compressed
argument_list|)
expr_stmt|;
if|if
condition|(
name|zcr
operator|!=
literal|null
condition|)
block|{
name|zcr
operator|.
name|releaseBuffer
argument_list|(
name|compressed
argument_list|)
expr_stmt|;
comment|// We copied the entire buffer.
block|}
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing "
operator|+
name|nextRange
operator|+
literal|" from ranges"
argument_list|)
expr_stmt|;
block|}
name|ranges
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
comment|// This is impossible to read from this chunk.
block|}
comment|/**    * Add one buffer with compressed data the results for addOneCompressionBuffer (see javadoc).    * @param fullCompressionBlock (fCB) Entire compression block, sliced or copied from disk data.    * @param isUncompressed Whether the data in the block is uncompressed.    * @param cbStartOffset Compressed start offset of the fCB.    * @param cbEndOffset Compressed end offset of the fCB.    * @param lastRange The buffer from which the last (or all) bytes of fCB come.    * @param lastPartLength The number of bytes consumed from lastRange into fCB.    * @param ranges The iterator of all compressed ranges for the stream, pointing at lastRange.    * @param lastChunk     * @param toDecompress See addOneCompressionBuffer.    * @param cacheBuffers See addOneCompressionBuffer.    */
specifier|private
specifier|static
name|void
name|addOneCompressionBlockByteBuffer
parameter_list|(
name|ByteBuffer
name|fullCompressionBlock
parameter_list|,
name|boolean
name|isUncompressed
parameter_list|,
name|long
name|cbStartOffset
parameter_list|,
name|long
name|cbEndOffset
parameter_list|,
name|int
name|lastPartLength
parameter_list|,
name|ListIterator
argument_list|<
name|DiskRange
argument_list|>
name|ranges
parameter_list|,
name|BufferChunk
name|lastChunk
parameter_list|,
name|LowLevelCache
name|cache
parameter_list|,
name|List
argument_list|<
name|ProcCacheChunk
argument_list|>
name|toDecompress
parameter_list|,
name|List
argument_list|<
name|LlapMemoryBuffer
argument_list|>
name|cacheBuffers
parameter_list|)
block|{
comment|// Prepare future cache buffer.
name|LlapMemoryBuffer
name|futureAlloc
init|=
name|cache
operator|.
name|createUnallocated
argument_list|()
decl_stmt|;
comment|// Add it to result in order we are processing.
name|cacheBuffers
operator|.
name|add
argument_list|(
name|futureAlloc
argument_list|)
expr_stmt|;
comment|// Add it to the list of work to decompress.
name|ProcCacheChunk
name|cc
init|=
operator|new
name|ProcCacheChunk
argument_list|(
name|cbStartOffset
argument_list|,
name|cbEndOffset
argument_list|,
operator|!
name|isUncompressed
argument_list|,
name|fullCompressionBlock
argument_list|,
name|futureAlloc
argument_list|)
decl_stmt|;
name|toDecompress
operator|.
name|add
argument_list|(
name|cc
argument_list|)
expr_stmt|;
comment|// Adjust the compression block position.
name|lastChunk
operator|.
name|chunk
operator|.
name|position
argument_list|(
name|lastChunk
operator|.
name|chunk
operator|.
name|position
argument_list|()
operator|+
name|lastPartLength
argument_list|)
expr_stmt|;
comment|// Finally, put it in the ranges list for future use (if shared between RGs).
comment|// Before anyone else accesses it, it would have been allocated and decompressed locally.
if|if
condition|(
name|lastChunk
operator|.
name|chunk
operator|.
name|remaining
argument_list|()
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Replacing "
operator|+
name|lastChunk
operator|+
literal|" with "
operator|+
name|cc
operator|+
literal|" in the buffers"
argument_list|)
expr_stmt|;
block|}
name|ranges
operator|.
name|set
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DiskRange
name|before
init|=
name|ranges
operator|.
name|previous
argument_list|()
decl_stmt|;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding "
operator|+
name|cc
operator|+
literal|" before "
operator|+
name|before
operator|+
literal|" in the buffers"
argument_list|)
expr_stmt|;
block|}
name|ranges
operator|.
name|add
argument_list|(
name|cc
argument_list|)
expr_stmt|;
comment|// At this point, next() should return before, which is the 2nd part of the split buffer.
block|}
block|}
block|}
end_class

end_unit

