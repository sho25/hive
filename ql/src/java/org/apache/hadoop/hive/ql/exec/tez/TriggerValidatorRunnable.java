begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|SessionTriggerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|Trigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|TriggerActionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|TriggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TriggerValidatorRunnable
implements|implements
name|Runnable
block|{
specifier|protected
specifier|static
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TriggerValidatorRunnable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SessionTriggerProvider
name|sessionTriggerProvider
decl_stmt|;
specifier|private
specifier|final
name|TriggerActionHandler
name|triggerActionHandler
decl_stmt|;
name|TriggerValidatorRunnable
parameter_list|(
specifier|final
name|SessionTriggerProvider
name|sessionTriggerProvider
parameter_list|,
specifier|final
name|TriggerActionHandler
name|triggerActionHandler
parameter_list|)
block|{
name|this
operator|.
name|sessionTriggerProvider
operator|=
name|sessionTriggerProvider
expr_stmt|;
name|this
operator|.
name|triggerActionHandler
operator|=
name|triggerActionHandler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Map
argument_list|<
name|TezSessionState
argument_list|,
name|Trigger
argument_list|>
name|violatedSessions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TezSessionState
argument_list|>
name|sessions
init|=
name|sessionTriggerProvider
operator|.
name|getSessions
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Trigger
argument_list|>
name|triggers
init|=
name|sessionTriggerProvider
operator|.
name|getTriggers
argument_list|()
decl_stmt|;
for|for
control|(
name|TezSessionState
name|sessionState
range|:
name|sessions
control|)
block|{
name|TriggerContext
name|triggerContext
init|=
name|sessionState
operator|.
name|getTriggerContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|triggerContext
operator|!=
literal|null
operator|&&
operator|!
name|triggerContext
operator|.
name|isQueryCompleted
argument_list|()
operator|&&
operator|!
name|triggerContext
operator|.
name|getCurrentCounters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|currentCounters
init|=
name|triggerContext
operator|.
name|getCurrentCounters
argument_list|()
decl_stmt|;
for|for
control|(
name|Trigger
name|currentTrigger
range|:
name|triggers
control|)
block|{
name|String
name|desiredCounter
init|=
name|currentTrigger
operator|.
name|getExpression
argument_list|()
operator|.
name|getCounterLimit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// there could be interval where desired counter value is not populated by the time we make this check
if|if
condition|(
name|currentCounters
operator|.
name|containsKey
argument_list|(
name|desiredCounter
argument_list|)
condition|)
block|{
name|long
name|currentCounterValue
init|=
name|currentCounters
operator|.
name|get
argument_list|(
name|desiredCounter
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentTrigger
operator|.
name|apply
argument_list|(
name|currentCounterValue
argument_list|)
condition|)
block|{
name|String
name|queryId
init|=
name|sessionState
operator|.
name|getTriggerContext
argument_list|()
operator|.
name|getQueryId
argument_list|()
decl_stmt|;
if|if
condition|(
name|violatedSessions
operator|.
name|containsKey
argument_list|(
name|sessionState
argument_list|)
condition|)
block|{
comment|// session already has a violation
name|Trigger
name|existingTrigger
init|=
name|violatedSessions
operator|.
name|get
argument_list|(
name|sessionState
argument_list|)
decl_stmt|;
comment|// KILL always takes priority over MOVE
if|if
condition|(
name|existingTrigger
operator|.
name|getAction
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|Action
operator|.
name|Type
operator|.
name|MOVE_TO_POOL
argument_list|)
operator|&&
name|currentTrigger
operator|.
name|getAction
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|Action
operator|.
name|Type
operator|.
name|KILL_QUERY
argument_list|)
condition|)
block|{
name|currentTrigger
operator|.
name|setViolationMsg
argument_list|(
literal|"Trigger "
operator|+
name|currentTrigger
operator|+
literal|" violated. Current value: "
operator|+
name|currentCounterValue
argument_list|)
expr_stmt|;
name|violatedSessions
operator|.
name|put
argument_list|(
name|sessionState
argument_list|,
name|currentTrigger
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"KILL trigger replacing MOVE for query {}"
argument_list|,
name|queryId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if multiple MOVE happens, only first move will be chosen
name|LOG
operator|.
name|warn
argument_list|(
literal|"Conflicting MOVE triggers ({} and {}). Choosing the first MOVE trigger: {}"
argument_list|,
name|existingTrigger
argument_list|,
name|currentTrigger
argument_list|,
name|existingTrigger
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// first violation for the session
name|currentTrigger
operator|.
name|setViolationMsg
argument_list|(
literal|"Trigger "
operator|+
name|currentTrigger
operator|+
literal|" violated. Current value: "
operator|+
name|currentCounterValue
argument_list|)
expr_stmt|;
name|violatedSessions
operator|.
name|put
argument_list|(
name|sessionState
argument_list|,
name|currentTrigger
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Trigger
name|chosenTrigger
init|=
name|violatedSessions
operator|.
name|get
argument_list|(
name|sessionState
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosenTrigger
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Query: {}. {}. Applying action."
argument_list|,
name|sessionState
operator|.
name|getTriggerContext
argument_list|()
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|chosenTrigger
operator|.
name|getViolationMsg
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|violatedSessions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|triggerActionHandler
operator|.
name|applyAction
argument_list|(
name|violatedSessions
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// if exception is thrown in scheduled tasks, no further tasks will be scheduled, hence this ugly catch
name|LOG
operator|.
name|warn
argument_list|(
name|TriggerValidatorRunnable
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" caught exception."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

