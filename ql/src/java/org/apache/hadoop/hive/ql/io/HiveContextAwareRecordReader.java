begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|HiveContextAwareRecordReader
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
name|boolean
name|initDone
init|=
literal|false
decl_stmt|;
comment|/**     * Reads the next key/value pair from the input for processing.    *    * @param key the key to read data into    * @param value the value to read data into    * @return true if a key/value was read, false if at EOF    */
specifier|public
specifier|abstract
name|boolean
name|doNext
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**     * Close this {@link InputSplit} to future operations.    *     * @throws IOException    */
specifier|public
specifier|abstract
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
function_decl|;
specifier|private
name|IOContext
name|ioCxtRef
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|doClose
argument_list|()
expr_stmt|;
name|initDone
operator|=
literal|false
expr_stmt|;
name|ioCxtRef
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initDone
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Hive IOContext is not inited."
argument_list|)
throw|;
block|}
name|updateIOContext
argument_list|()
expr_stmt|;
return|return
name|doNext
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|protected
name|void
name|updateIOContext
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|pointerPos
init|=
name|this
operator|.
name|getPos
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ioCxtRef
operator|.
name|isBlockPointer
condition|)
block|{
name|ioCxtRef
operator|.
name|currentBlockStart
operator|=
name|pointerPos
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|ioCxtRef
operator|.
name|nextBlockStart
operator|==
operator|-
literal|1
condition|)
block|{
name|ioCxtRef
operator|.
name|nextBlockStart
operator|=
name|pointerPos
expr_stmt|;
block|}
if|if
condition|(
name|pointerPos
operator|!=
name|ioCxtRef
operator|.
name|nextBlockStart
condition|)
block|{
comment|// the reader pointer has moved to the end of next block, or the end of
comment|// current record.
name|ioCxtRef
operator|.
name|currentBlockStart
operator|=
name|ioCxtRef
operator|.
name|nextBlockStart
expr_stmt|;
name|ioCxtRef
operator|.
name|nextBlockStart
operator|=
name|pointerPos
expr_stmt|;
block|}
block|}
specifier|public
name|IOContext
name|getIOContext
parameter_list|()
block|{
return|return
name|IOContext
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|initIOContext
parameter_list|(
name|long
name|startPos
parameter_list|,
name|boolean
name|isBlockPointer
parameter_list|,
name|String
name|inputFile
parameter_list|)
block|{
name|ioCxtRef
operator|=
name|this
operator|.
name|getIOContext
argument_list|()
expr_stmt|;
name|ioCxtRef
operator|.
name|currentBlockStart
operator|=
name|startPos
expr_stmt|;
name|ioCxtRef
operator|.
name|isBlockPointer
operator|=
name|isBlockPointer
expr_stmt|;
name|ioCxtRef
operator|.
name|inputFile
operator|=
name|inputFile
expr_stmt|;
name|initDone
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|initIOContext
parameter_list|(
name|FileSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Class
name|inputFormatClass
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|blockPointer
init|=
literal|false
decl_stmt|;
name|long
name|blockStart
init|=
operator|-
literal|1
decl_stmt|;
name|FileSplit
name|fileSplit
init|=
operator|(
name|FileSplit
operator|)
name|split
decl_stmt|;
name|Path
name|path
init|=
name|fileSplit
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputFormatClass
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"SequenceFile"
argument_list|)
condition|)
block|{
name|SequenceFile
operator|.
name|Reader
name|in
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|blockPointer
operator|=
name|in
operator|.
name|isBlockCompressed
argument_list|()
expr_stmt|;
name|in
operator|.
name|sync
argument_list|(
name|fileSplit
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|blockStart
operator|=
name|in
operator|.
name|getPosition
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputFormatClass
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"RCFile"
argument_list|)
condition|)
block|{
name|RCFile
operator|.
name|Reader
name|in
init|=
operator|new
name|RCFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|blockPointer
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|sync
argument_list|(
name|fileSplit
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|blockStart
operator|=
name|in
operator|.
name|getPosition
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|initIOContext
argument_list|(
name|blockStart
argument_list|,
name|blockPointer
argument_list|,
name|split
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

