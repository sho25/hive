begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
operator|.
name|DirectOperatorConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
operator|.
name|DruidExpressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
operator|.
name|DruidQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
operator|.
name|ExtractOperatorConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
operator|.
name|FloorOperatorConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveConcat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveExtractDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveFloorDate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Contains custom Druid SQL operator converter classes, contains either:  * Hive specific OperatorConversion logic that can not be part of Calcite  * Some temporary OperatorConversion that is not release by Calcite yet  */
end_comment

begin_class
specifier|public
class|class
name|DruidSqlOperatorConverter
block|{
specifier|private
name|DruidSqlOperatorConverter
parameter_list|()
block|{   }
specifier|private
specifier|static
name|Map
name|druidOperatorMap
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|SqlOperator
argument_list|,
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
operator|.
name|DruidSqlOperatorConverter
argument_list|>
name|getDefaultMap
parameter_list|()
block|{
if|if
condition|(
name|druidOperatorMap
operator|==
literal|null
condition|)
block|{
name|druidOperatorMap
operator|=
operator|new
name|HashMap
argument_list|<
name|SqlOperator
argument_list|,
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
operator|.
name|DruidSqlOperatorConverter
argument_list|>
argument_list|()
expr_stmt|;
name|DruidQuery
operator|.
name|DEFAULT_OPERATORS_LIST
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|op
lambda|->
name|druidOperatorMap
operator|.
name|put
argument_list|(
name|op
operator|.
name|calciteOperator
argument_list|()
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
comment|//Override Hive specific operators
name|druidOperatorMap
operator|.
name|putAll
argument_list|(
name|Maps
operator|.
name|asMap
argument_list|(
name|HiveFloorDate
operator|.
name|ALL_FUNCTIONS
argument_list|,
operator|(
name|Function
argument_list|<
name|SqlFunction
argument_list|,
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
operator|.
name|DruidSqlOperatorConverter
argument_list|>
operator|)
name|input
lambda|->
operator|new
name|FloorOperatorConversion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|druidOperatorMap
operator|.
name|putAll
argument_list|(
name|Maps
operator|.
name|asMap
argument_list|(
name|HiveExtractDate
operator|.
name|ALL_FUNCTIONS
argument_list|,
operator|(
name|Function
argument_list|<
name|SqlFunction
argument_list|,
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
operator|.
name|DruidSqlOperatorConverter
argument_list|>
operator|)
name|input
lambda|->
operator|new
name|ExtractOperatorConversion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|druidOperatorMap
operator|.
name|put
argument_list|(
name|HiveConcat
operator|.
name|INSTANCE
argument_list|,
operator|new
name|DirectOperatorConversion
argument_list|(
name|HiveConcat
operator|.
name|INSTANCE
argument_list|,
literal|"concat"
argument_list|)
argument_list|)
expr_stmt|;
name|druidOperatorMap
operator|.
name|put
argument_list|(
name|SqlStdOperatorTable
operator|.
name|SUBSTRING
argument_list|,
operator|new
name|DruidSqlOperatorConverter
operator|.
name|DruidSubstringOperatorConversion
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|druidOperatorMap
return|;
block|}
comment|//@TODO remove this when it is fixed in calcite https://issues.apache.org/jira/browse/HIVE-18996
specifier|public
specifier|static
class|class
name|DruidSubstringOperatorConversion
extends|extends
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
operator|.
name|SubstringOperatorConversion
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|toDruidExpression
parameter_list|(
name|RexNode
name|rexNode
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|DruidQuery
name|query
parameter_list|)
block|{
specifier|final
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|rexNode
decl_stmt|;
specifier|final
name|String
name|arg
init|=
name|DruidExpressions
operator|.
name|toDruidExpression
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rowType
argument_list|,
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|arg
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|indexStart
decl_stmt|;
specifier|final
name|String
name|length
decl_stmt|;
comment|// SQL is 1-indexed, Druid is 0-indexed.
if|if
condition|(
operator|!
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|LITERAL
argument_list|)
condition|)
block|{
specifier|final
name|String
name|indexExp
init|=
name|DruidExpressions
operator|.
name|toDruidExpression
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rowType
argument_list|,
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexExp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|indexStart
operator|=
name|DruidQuery
operator|.
name|format
argument_list|(
literal|"(%s - 1)"
argument_list|,
name|indexExp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|index
init|=
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|-
literal|1
decl_stmt|;
name|indexStart
operator|=
name|DruidExpressions
operator|.
name|numberLiteral
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
comment|//case substring from index with length
if|if
condition|(
operator|!
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|LITERAL
argument_list|)
condition|)
block|{
name|length
operator|=
name|DruidExpressions
operator|.
name|toDruidExpression
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|rowType
argument_list|,
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
name|length
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|length
operator|=
name|DruidExpressions
operator|.
name|numberLiteral
argument_list|(
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//case substring from index to the end
name|length
operator|=
name|DruidExpressions
operator|.
name|numberLiteral
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|DruidQuery
operator|.
name|format
argument_list|(
literal|"substring(%s, %s, %s)"
argument_list|,
name|arg
argument_list|,
name|indexStart
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

