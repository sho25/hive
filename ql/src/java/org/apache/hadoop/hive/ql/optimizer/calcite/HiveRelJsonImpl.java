begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|externalize
operator|.
name|RelJsonWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ColStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Writer implementation for rel nodes that produces an output in json that is easily  * parseable back into rel nodes.  */
end_comment

begin_class
specifier|public
class|class
name|HiveRelJsonImpl
extends|extends
name|RelJsonWriter
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveRelJsonImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//~ Constructors -------------------------------------------------------------
specifier|public
name|HiveRelJsonImpl
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|//~ Methods ------------------------------------------------------------------
annotation|@
name|Override
specifier|protected
name|void
name|explain_
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|values
parameter_list|)
block|{
name|super
operator|.
name|explain_
argument_list|(
name|rel
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|relList
operator|.
name|get
argument_list|(
name|relList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"rowCount"
argument_list|,
name|mq
operator|.
name|getRowCount
argument_list|(
name|rel
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rel
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// This is a leaf, we will print the average row size and schema
name|map
operator|.
name|put
argument_list|(
literal|"avgRowSize"
argument_list|,
name|mq
operator|.
name|getAverageRowSize
argument_list|(
name|rel
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"rowType"
argument_list|,
name|relJson
operator|.
name|toJson
argument_list|(
name|rel
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// We also include partition columns information
name|RelOptHiveTable
name|table
init|=
operator|(
name|RelOptHiveTable
operator|)
name|rel
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|jsonBuilder
operator|.
name|list
argument_list|()
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|table
operator|.
name|getHiveTableMD
argument_list|()
operator|.
name|getPartColNames
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"partitionColumns"
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
comment|// We also include column stats
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|colStats
init|=
name|table
operator|.
name|getColStat
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|table
operator|.
name|getNoOfNonVirtualCols
argument_list|()
argument_list|)
operator|.
name|asList
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|list
operator|=
name|jsonBuilder
operator|.
name|list
argument_list|()
expr_stmt|;
for|for
control|(
name|ColStatistics
name|cs
range|:
name|colStats
control|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|csMap
init|=
name|jsonBuilder
operator|.
name|map
argument_list|()
decl_stmt|;
name|csMap
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|cs
operator|.
name|getColumnName
argument_list|()
argument_list|)
expr_stmt|;
name|csMap
operator|.
name|put
argument_list|(
literal|"ndv"
argument_list|,
name|cs
operator|.
name|getCountDistint
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cs
operator|.
name|getRange
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|csMap
operator|.
name|put
argument_list|(
literal|"minValue"
argument_list|,
name|cs
operator|.
name|getRange
argument_list|()
operator|.
name|minValue
argument_list|)
expr_stmt|;
name|csMap
operator|.
name|put
argument_list|(
literal|"maxValue"
argument_list|,
name|cs
operator|.
name|getRange
argument_list|()
operator|.
name|maxValue
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|csMap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"colStats"
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

