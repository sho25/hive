begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|StripeInformation
import|;
end_import

begin_class
specifier|public
class|class
name|OrcFileStripeMergeRecordReader
implements|implements
name|RecordReader
argument_list|<
name|OrcFileKeyWrapper
argument_list|,
name|OrcFileValueWrapper
argument_list|>
block|{
specifier|private
specifier|final
name|Reader
name|reader
decl_stmt|;
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
specifier|protected
name|Iterator
argument_list|<
name|StripeInformation
argument_list|>
name|iter
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|OrcProto
operator|.
name|StripeStatistics
argument_list|>
name|stripeStatistics
decl_stmt|;
specifier|private
name|int
name|stripeIdx
decl_stmt|;
specifier|private
name|long
name|start
decl_stmt|;
specifier|private
name|long
name|end
decl_stmt|;
specifier|private
name|boolean
name|skipFile
decl_stmt|;
specifier|public
name|OrcFileStripeMergeRecordReader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSplit
name|split
parameter_list|)
throws|throws
name|IOException
block|{
name|path
operator|=
name|split
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|start
operator|=
name|split
operator|.
name|getStart
argument_list|()
expr_stmt|;
name|end
operator|=
name|start
operator|+
name|split
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|reader
operator|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|path
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|iter
operator|=
name|reader
operator|.
name|getStripes
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|this
operator|.
name|stripeIdx
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|stripeStatistics
operator|=
operator|(
operator|(
name|ReaderImpl
operator|)
name|reader
operator|)
operator|.
name|getOrcProtoStripeStatistics
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getKeyClass
parameter_list|()
block|{
return|return
name|OrcFileKeyWrapper
operator|.
name|class
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getValueClass
parameter_list|()
block|{
return|return
name|OrcFileValueWrapper
operator|.
name|class
return|;
block|}
specifier|public
name|OrcFileKeyWrapper
name|createKey
parameter_list|()
block|{
return|return
operator|new
name|OrcFileKeyWrapper
argument_list|()
return|;
block|}
specifier|public
name|OrcFileValueWrapper
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|OrcFileValueWrapper
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|OrcFileKeyWrapper
name|key
parameter_list|,
name|OrcFileValueWrapper
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|skipFile
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|nextStripe
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|nextStripe
parameter_list|(
name|OrcFileKeyWrapper
name|keyWrapper
parameter_list|,
name|OrcFileValueWrapper
name|valueWrapper
parameter_list|)
throws|throws
name|IOException
block|{
comment|// missing stripe stats (old format). If numRows is 0 then its an empty file and no statistics
comment|// is present. We have to differentiate no stats (empty file) vs missing stats (old format).
if|if
condition|(
operator|(
name|stripeStatistics
operator|==
literal|null
operator|||
name|stripeStatistics
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|reader
operator|.
name|getNumberOfRows
argument_list|()
operator|>
literal|0
condition|)
block|{
name|keyWrapper
operator|.
name|setInputPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|keyWrapper
operator|.
name|setIsIncompatFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|skipFile
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|StripeInformation
name|si
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// if stripe offset is outside the split boundary then ignore the current
comment|// stripe as it will be handled by some other mapper.
if|if
condition|(
name|si
operator|.
name|getOffset
argument_list|()
operator|>=
name|start
operator|&&
name|si
operator|.
name|getOffset
argument_list|()
operator|<
name|end
condition|)
block|{
name|valueWrapper
operator|.
name|setStripeStatistics
argument_list|(
name|stripeStatistics
operator|.
name|get
argument_list|(
name|stripeIdx
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|valueWrapper
operator|.
name|setStripeInformation
argument_list|(
name|si
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|valueWrapper
operator|.
name|setLastStripeInFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|valueWrapper
operator|.
name|setUserMetadata
argument_list|(
operator|(
operator|(
name|ReaderImpl
operator|)
name|reader
operator|)
operator|.
name|getOrcProtoUserMetadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|keyWrapper
operator|.
name|setInputPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|keyWrapper
operator|.
name|setCompression
argument_list|(
name|reader
operator|.
name|getCompressionKind
argument_list|()
argument_list|)
expr_stmt|;
name|keyWrapper
operator|.
name|setCompressBufferSize
argument_list|(
name|reader
operator|.
name|getCompressionSize
argument_list|()
argument_list|)
expr_stmt|;
name|keyWrapper
operator|.
name|setFileVersion
argument_list|(
name|reader
operator|.
name|getFileVersion
argument_list|()
argument_list|)
expr_stmt|;
name|keyWrapper
operator|.
name|setWriterVersion
argument_list|(
name|reader
operator|.
name|getWriterVersion
argument_list|()
argument_list|)
expr_stmt|;
name|keyWrapper
operator|.
name|setRowIndexStride
argument_list|(
name|reader
operator|.
name|getRowIndexStride
argument_list|()
argument_list|)
expr_stmt|;
name|keyWrapper
operator|.
name|setFileSchema
argument_list|(
name|reader
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stripeIdx
operator|++
expr_stmt|;
continue|continue;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Default progress will be based on number of files processed.    * @return 0.0 to 1.0 of the input byte range    */
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0.0f
return|;
block|}
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
specifier|protected
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{   }
specifier|public
name|long
name|getStart
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{   }
block|}
end_class

end_unit

