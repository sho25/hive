begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|profiler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_class
specifier|public
class|class
name|HiveProfilePublisher
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|connected
init|=
literal|false
decl_stmt|;
specifier|private
name|HiveProfilePublisherInfo
name|info
decl_stmt|;
specifier|public
name|boolean
name|closeConnection
parameter_list|()
block|{
if|if
condition|(
name|info
operator|.
name|getConnection
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
if|if
condition|(
name|info
operator|.
name|getInsertStatement
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|closeInsertStatement
argument_list|()
expr_stmt|;
block|}
name|info
operator|.
name|getConnection
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during JDBC termination. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
name|info
operator|=
operator|new
name|HiveProfilePublisherInfo
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|createTable
init|=
name|getCreate
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|createTable
argument_list|)
expr_stmt|;
name|HiveProfilerUtils
operator|.
name|createTableIfNonExistent
argument_list|(
name|info
argument_list|,
name|createTable
argument_list|)
expr_stmt|;
name|info
operator|.
name|prepareInsert
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during HiveProfilePublisher initialization"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|String
name|getCreate
parameter_list|()
block|{
return|return
literal|"CREATE TABLE "
operator|+
name|info
operator|.
name|getTableName
argument_list|()
operator|+
literal|" ( "
operator|+
name|HiveProfilerStats
operator|.
name|Columns
operator|.
name|QUERY_ID
operator|+
literal|" VARCHAR(512) NOT NULL, "
operator|+
name|HiveProfilerStats
operator|.
name|Columns
operator|.
name|TASK_ID
operator|+
literal|" VARCHAR(512) NOT NULL, "
operator|+
name|HiveProfilerStats
operator|.
name|Columns
operator|.
name|OPERATOR_ID
operator|+
literal|" INT, "
operator|+
name|HiveProfilerStats
operator|.
name|Columns
operator|.
name|OPERATOR_NAME
operator|+
literal|" VARCHAR(512) NOT NULL, "
operator|+
name|HiveProfilerStats
operator|.
name|Columns
operator|.
name|PARENT_OPERATOR_ID
operator|+
literal|" INT,"
operator|+
name|HiveProfilerStats
operator|.
name|Columns
operator|.
name|PARENT_OPERATOR_NAME
operator|+
literal|" VARCHAR(512), "
operator|+
name|HiveProfilerStats
operator|.
name|Columns
operator|.
name|LEVEL_ANNO_NAME
operator|+
literal|" VARCHAR(512), "
operator|+
name|HiveProfilerStats
operator|.
name|Columns
operator|.
name|CALL_COUNT
operator|+
literal|" BIGINT, "
operator|+
name|HiveProfilerStats
operator|.
name|Columns
operator|.
name|INCL_TIME
operator|+
literal|" BIGINT ) "
return|;
block|}
specifier|public
name|boolean
name|publishStat
parameter_list|(
name|String
name|queryId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stats
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|info
operator|.
name|getConnection
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|initialize
argument_list|(
name|conf
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
try|try
block|{
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Utilities
operator|.
name|SQLCommand
argument_list|<
name|Void
argument_list|>
name|execUpdate
init|=
operator|new
name|Utilities
operator|.
name|SQLCommand
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|(
name|PreparedStatement
name|stmt
parameter_list|)
throws|throws
name|SQLException
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|PreparedStatement
name|insStmt
init|=
name|info
operator|.
name|getInsert
argument_list|(
name|stats
argument_list|)
decl_stmt|;
name|Utilities
operator|.
name|executeWithRetry
argument_list|(
name|execUpdate
argument_list|,
name|insStmt
argument_list|,
name|info
operator|.
name|getWaitWindow
argument_list|()
argument_list|,
name|info
operator|.
name|getMaxRetries
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ERROR during publishing profiling data. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

