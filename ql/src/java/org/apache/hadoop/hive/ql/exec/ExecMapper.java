begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredLocalWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredLocalWork
operator|.
name|BucketMapJoinContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|InspectableObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapReduceBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * ExecMapper.  *  */
end_comment

begin_class
specifier|public
class|class
name|ExecMapper
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
block|{
specifier|private
name|MapOperator
name|mo
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|fetchOperators
decl_stmt|;
specifier|private
name|OutputCollector
name|oc
decl_stmt|;
specifier|private
name|JobConf
name|jc
decl_stmt|;
specifier|private
name|boolean
name|abort
init|=
literal|false
decl_stmt|;
specifier|private
name|Reporter
name|rp
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Log
name|l4j
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"ExecMapper"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|done
decl_stmt|;
comment|// used to log memory usage periodically
specifier|private
name|MemoryMXBean
name|memoryMXBean
decl_stmt|;
specifier|private
name|long
name|numRows
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|nextCntr
init|=
literal|1
decl_stmt|;
specifier|private
name|String
name|lastInputFile
init|=
literal|null
decl_stmt|;
specifier|private
name|MapredLocalWork
name|localWork
init|=
literal|null
decl_stmt|;
specifier|private
name|ExecMapperContext
name|execContext
init|=
operator|new
name|ExecMapperContext
argument_list|()
decl_stmt|;
specifier|public
specifier|static
class|class
name|ExecMapperContext
block|{
name|boolean
name|inputFileChanged
init|=
literal|false
decl_stmt|;
name|String
name|currentInputFile
decl_stmt|;
name|JobConf
name|jc
decl_stmt|;
specifier|public
name|boolean
name|isInputFileChanged
parameter_list|()
block|{
return|return
name|inputFileChanged
return|;
block|}
specifier|public
name|void
name|setInputFileChanged
parameter_list|(
name|boolean
name|inputFileChanged
parameter_list|)
block|{
name|this
operator|.
name|inputFileChanged
operator|=
name|inputFileChanged
expr_stmt|;
block|}
specifier|public
name|String
name|getCurrentInputFile
parameter_list|()
block|{
return|return
name|currentInputFile
return|;
block|}
specifier|public
name|void
name|setCurrentInputFile
parameter_list|(
name|String
name|currentInputFile
parameter_list|)
block|{
name|this
operator|.
name|currentInputFile
operator|=
name|currentInputFile
expr_stmt|;
block|}
specifier|public
name|JobConf
name|getJc
parameter_list|()
block|{
return|return
name|jc
return|;
block|}
specifier|public
name|void
name|setJc
parameter_list|(
name|JobConf
name|jc
parameter_list|)
block|{
name|this
operator|.
name|jc
operator|=
name|jc
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
comment|// Allocate the bean at the beginning -
name|memoryMXBean
operator|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
expr_stmt|;
name|l4j
operator|.
name|info
argument_list|(
literal|"maximum memory = "
operator|+
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|l4j
operator|.
name|info
argument_list|(
literal|"conf classpath = "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
operator|(
name|URLClassLoader
operator|)
name|job
operator|.
name|getClassLoader
argument_list|()
operator|)
operator|.
name|getURLs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|l4j
operator|.
name|info
argument_list|(
literal|"thread classpath = "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
operator|(
name|URLClassLoader
operator|)
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|)
operator|.
name|getURLs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|l4j
operator|.
name|info
argument_list|(
literal|"cannot get classpath: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|jc
operator|=
name|job
expr_stmt|;
name|execContext
operator|.
name|jc
operator|=
name|jc
expr_stmt|;
comment|// create map and fetch operators
name|MapredWork
name|mrwork
init|=
name|Utilities
operator|.
name|getMapRedWork
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|mo
operator|=
operator|new
name|MapOperator
argument_list|()
expr_stmt|;
name|mo
operator|.
name|setConf
argument_list|(
name|mrwork
argument_list|)
expr_stmt|;
comment|// initialize map operator
name|mo
operator|.
name|setChildren
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|l4j
operator|.
name|info
argument_list|(
name|mo
operator|.
name|dump
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mo
operator|.
name|setExecContext
argument_list|(
name|execContext
argument_list|)
expr_stmt|;
name|mo
operator|.
name|initializeLocalWork
argument_list|(
name|jc
argument_list|)
expr_stmt|;
name|mo
operator|.
name|initialize
argument_list|(
name|jc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// initialize map local work
name|localWork
operator|=
name|mrwork
operator|.
name|getMapLocalWork
argument_list|()
expr_stmt|;
if|if
condition|(
name|localWork
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|fetchOperators
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
argument_list|()
expr_stmt|;
comment|// create map local operators
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FetchWork
argument_list|>
name|entry
range|:
name|localWork
operator|.
name|getAliasToFetchWork
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|fetchOperators
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|FetchOperator
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|job
argument_list|)
argument_list|)
expr_stmt|;
name|l4j
operator|.
name|info
argument_list|(
literal|"fetchoperator for "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" created"
argument_list|)
expr_stmt|;
block|}
comment|// initialize map local operators
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|entry
range|:
name|fetchOperators
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|forwardOp
init|=
name|localWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|forwardOp
operator|.
name|setExecContext
argument_list|(
name|execContext
argument_list|)
expr_stmt|;
comment|// All the operators need to be initialized before process
name|forwardOp
operator|.
name|initialize
argument_list|(
name|jc
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getOutputObjectInspector
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|l4j
operator|.
name|info
argument_list|(
literal|"fetchoperator for "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" initialized"
argument_list|)
expr_stmt|;
block|}
comment|// defer processing of map local operators to first row if in case there
comment|// is no input (??)
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|abort
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|OutOfMemoryError
condition|)
block|{
comment|// will this be true here?
comment|// Don't create a new object if we are already out of memory
throw|throw
operator|(
name|OutOfMemoryError
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Map operator initialization failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|map
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|OutputCollector
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|oc
operator|==
literal|null
condition|)
block|{
name|oc
operator|=
name|output
expr_stmt|;
name|rp
operator|=
name|reporter
expr_stmt|;
name|mo
operator|.
name|setOutputCollector
argument_list|(
name|oc
argument_list|)
expr_stmt|;
name|mo
operator|.
name|setReporter
argument_list|(
name|rp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inputFileChanged
argument_list|()
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|localWork
operator|!=
literal|null
operator|&&
operator|(
name|localWork
operator|.
name|getInputFileChangeSensitive
argument_list|()
operator|||
name|this
operator|.
name|lastInputFile
operator|==
literal|null
operator|)
condition|)
block|{
name|processMapLocalWork
argument_list|(
name|localWork
operator|.
name|getInputFileChangeSensitive
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|lastInputFile
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|jc
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPMAPFILENAME
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|mo
operator|.
name|getDone
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Since there is no concept of a group, we don't invoke
comment|// startGroup/endGroup for a mapper
name|mo
operator|.
name|process
argument_list|(
operator|(
name|Writable
operator|)
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|l4j
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|numRows
operator|++
expr_stmt|;
if|if
condition|(
name|numRows
operator|==
name|nextCntr
condition|)
block|{
name|long
name|used_memory
init|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|l4j
operator|.
name|info
argument_list|(
literal|"ExecMapper: processing "
operator|+
name|numRows
operator|+
literal|" rows: used memory = "
operator|+
name|used_memory
argument_list|)
expr_stmt|;
name|nextCntr
operator|=
name|getNextCntr
argument_list|(
name|numRows
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|abort
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|OutOfMemoryError
condition|)
block|{
comment|// Don't create a new object if we are already out of memory
throw|throw
operator|(
name|OutOfMemoryError
operator|)
name|e
throw|;
block|}
else|else
block|{
name|l4j
operator|.
name|fatal
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * For CompbineFileInputFormat, the mapper's input file will be changed on the    * fly. If the map local work has any mapping depending on the current    * mapper's input file, the work need to clear context and re-initialization    * after the input file changed. This is first introduced to process bucket    * map join.    *     * @return    */
specifier|private
name|boolean
name|inputFileChanged
parameter_list|()
block|{
name|String
name|currentInputFile
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|jc
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPMAPFILENAME
argument_list|)
decl_stmt|;
name|execContext
operator|.
name|currentInputFile
operator|=
name|currentInputFile
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|lastInputFile
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|lastInputFile
operator|.
name|equals
argument_list|(
name|currentInputFile
argument_list|)
condition|)
block|{
name|execContext
operator|.
name|inputFileChanged
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
name|execContext
operator|.
name|inputFileChanged
operator|=
literal|false
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|processMapLocalWork
parameter_list|(
name|boolean
name|inputFileChangeSenstive
parameter_list|)
block|{
comment|// process map local operators
if|if
condition|(
name|fetchOperators
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|int
name|fetchOpNum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|entry
range|:
name|fetchOperators
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|fetchOpRows
init|=
literal|0
decl_stmt|;
name|String
name|alias
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|FetchOperator
name|fetchOp
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputFileChangeSenstive
condition|)
block|{
name|fetchOp
operator|.
name|clearFetchContext
argument_list|()
expr_stmt|;
name|setUpFetchOpContext
argument_list|(
name|fetchOp
argument_list|,
name|alias
argument_list|)
expr_stmt|;
block|}
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|forwardOp
init|=
name|localWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|InspectableObject
name|row
init|=
name|fetchOp
operator|.
name|getNextRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
name|forwardOp
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
name|fetchOpRows
operator|++
expr_stmt|;
name|forwardOp
operator|.
name|process
argument_list|(
name|row
operator|.
name|o
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// check if any operator had a fatal error or early exit during
comment|// execution
if|if
condition|(
name|forwardOp
operator|.
name|getDone
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|l4j
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|l4j
operator|.
name|info
argument_list|(
literal|"fetch "
operator|+
name|fetchOpNum
operator|++
operator|+
literal|" processed "
operator|+
name|fetchOpRows
operator|+
literal|" used mem: "
operator|+
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|abort
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|OutOfMemoryError
condition|)
block|{
comment|// Don't create a new object if we are already out of memory
throw|throw
operator|(
name|OutOfMemoryError
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hive Runtime Error: Map local work failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|setUpFetchOpContext
parameter_list|(
name|FetchOperator
name|fetchOp
parameter_list|,
name|String
name|alias
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|currentInputFile
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|jc
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPMAPFILENAME
argument_list|)
decl_stmt|;
name|BucketMapJoinContext
name|bucketMatcherCxt
init|=
name|this
operator|.
name|localWork
operator|.
name|getBucketMapjoinContext
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|BucketMatcher
argument_list|>
name|bucketMatcherCls
init|=
name|bucketMatcherCxt
operator|.
name|getBucketMatcherClass
argument_list|()
decl_stmt|;
name|BucketMatcher
name|bucketMatcher
init|=
operator|(
name|BucketMatcher
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|bucketMatcherCls
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|bucketMatcher
operator|.
name|setAliasBucketFileNameMapping
argument_list|(
name|bucketMatcherCxt
operator|.
name|getAliasBucketFileNameMapping
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|aliasFiles
init|=
name|bucketMatcher
operator|.
name|getAliasBucketFiles
argument_list|(
name|currentInputFile
argument_list|,
name|bucketMatcherCxt
operator|.
name|getMapJoinBigTableAlias
argument_list|()
argument_list|,
name|alias
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Path
argument_list|>
name|iter
init|=
name|aliasFiles
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|fetchOp
operator|.
name|setupContext
argument_list|(
name|iter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|getNextCntr
parameter_list|(
name|long
name|cntr
parameter_list|)
block|{
comment|// A very simple counter to keep track of number of rows processed by the
comment|// reducer. It dumps
comment|// every 1 million times, and quickly before that
if|if
condition|(
name|cntr
operator|>=
literal|1000000
condition|)
block|{
return|return
name|cntr
operator|+
literal|1000000
return|;
block|}
return|return
literal|10
operator|*
name|cntr
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// No row was processed
if|if
condition|(
name|oc
operator|==
literal|null
condition|)
block|{
name|l4j
operator|.
name|trace
argument_list|(
literal|"Close called. no row processed by map."
argument_list|)
expr_stmt|;
block|}
comment|// detecting failed executions by exceptions thrown by the operator tree
comment|// ideally hadoop should let us know whether map execution failed or not
try|try
block|{
name|inputFileChanged
argument_list|()
expr_stmt|;
name|mo
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchOperators
operator|!=
literal|null
condition|)
block|{
name|MapredLocalWork
name|localWork
init|=
name|mo
operator|.
name|getConf
argument_list|()
operator|.
name|getMapLocalWork
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|entry
range|:
name|fetchOperators
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|forwardOp
init|=
name|localWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|forwardOp
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|l4j
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|long
name|used_memory
init|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|l4j
operator|.
name|info
argument_list|(
literal|"ExecMapper: processed "
operator|+
name|numRows
operator|+
literal|" rows: used memory = "
operator|+
name|used_memory
argument_list|)
expr_stmt|;
block|}
name|reportStats
name|rps
init|=
operator|new
name|reportStats
argument_list|(
name|rp
argument_list|)
decl_stmt|;
name|mo
operator|.
name|preorderMap
argument_list|(
name|rps
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|abort
condition|)
block|{
comment|// signal new failure to map-reduce
name|l4j
operator|.
name|error
argument_list|(
literal|"Hit error while closing operators - failing tree"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hive Runtime Error while closing operators"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|boolean
name|getDone
parameter_list|()
block|{
return|return
name|done
return|;
block|}
comment|/**    * reportStats.    *    */
specifier|public
specifier|static
class|class
name|reportStats
implements|implements
name|Operator
operator|.
name|OperatorFunc
block|{
name|Reporter
name|rp
decl_stmt|;
specifier|public
name|reportStats
parameter_list|(
name|Reporter
name|rp
parameter_list|)
block|{
name|this
operator|.
name|rp
operator|=
name|rp
expr_stmt|;
block|}
specifier|public
name|void
name|func
parameter_list|(
name|Operator
name|op
parameter_list|)
block|{
name|Map
argument_list|<
name|Enum
argument_list|,
name|Long
argument_list|>
name|opStats
init|=
name|op
operator|.
name|getStats
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Enum
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|opStats
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|rp
operator|!=
literal|null
condition|)
block|{
name|rp
operator|.
name|incrCounter
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

