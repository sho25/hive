begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * A utility class for {@link TableName}.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|HiveTableName
extends|extends
name|TableName
block|{
specifier|public
name|HiveTableName
parameter_list|(
name|String
name|catName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|catName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a {@link TableName} object based on a {@link Table}. This is basically a wrapper of    * {@link TableName#fromString(String, String, String)} to throw a {@link SemanticException} in case of errors.    * @param table the table    * @return a {@link TableName}    * @throws SemanticException    */
specifier|public
specifier|static
name|TableName
name|of
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
name|ofNullable
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Set a @{@link Table} object's table and db names based on the provided string.    * @param dbTable the dbtable string    * @param table the table to update    * @return the table    * @throws SemanticException    */
specifier|public
specifier|static
name|Table
name|setFrom
parameter_list|(
name|String
name|dbTable
parameter_list|,
name|Table
name|table
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TableName
name|name
init|=
name|ofNullable
argument_list|(
name|dbTable
argument_list|)
decl_stmt|;
name|table
operator|.
name|setTableName
argument_list|(
name|name
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setDbName
argument_list|(
name|name
operator|.
name|getDb
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
comment|/**    * Accepts qualified name which is in the form of table, dbname.tablename or catalog.dbname.tablename and returns a    * {@link TableName}. All parts can be null.    *    * @param dbTableName    * @return a {@link TableName}    * @throws SemanticException    * @deprecated use {@link #of(String)} or {@link #fromString(String, String, String)}    */
comment|// to be @Deprecated
specifier|public
specifier|static
name|TableName
name|ofNullable
parameter_list|(
name|String
name|dbTableName
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
name|ofNullable
argument_list|(
name|dbTableName
argument_list|,
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Accepts qualified name which is in the form of table, dbname.tablename or catalog.dbname.tablename and returns a    * {@link TableName}. All parts can be null. This method won't try to find the default db based on the session state.    *    * @param dbTableName    * @return a {@link TableName}    * @throws SemanticException    * @deprecated use {@link #of(String)} or {@link #fromString(String, String, String)}    */
comment|// to be @Deprecated
specifier|public
specifier|static
name|TableName
name|ofNullableWithNoDefault
parameter_list|(
name|String
name|dbTableName
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
name|ofNullable
argument_list|(
name|dbTableName
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Accepts qualified name which is in the form of table, dbname.tablename or catalog.dbname.tablename and returns a    * {@link TableName}. All parts can be null.    *    * @param dbTableName    * @param defaultDb    * @return a {@link TableName}    * @throws SemanticException    * @deprecated use {@link #of(String)} or {@link #fromString(String, String, String)}    */
comment|// to be @Deprecated
specifier|public
specifier|static
name|TableName
name|ofNullable
parameter_list|(
name|String
name|dbTableName
parameter_list|,
name|String
name|defaultDb
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|dbTableName
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TableName
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|fromString
argument_list|(
name|dbTableName
argument_list|,
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentCatalog
argument_list|()
argument_list|,
name|defaultDb
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Accepts qualified name which is in the form of table, dbname.tablename or catalog.dbname.tablename and returns a    * {@link TableName}. This method won't try to find the default db/catalog based on the session state.    *    * @param dbTableName not null    * @return a {@link TableName}    * @throws SemanticException if dbTableName is null    * @deprecated use {@link #of(String)} instead and use the default db/catalog.    */
comment|// to be @Deprecated
specifier|public
specifier|static
name|TableName
name|withNoDefault
parameter_list|(
name|String
name|dbTableName
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
return|return
name|fromString
argument_list|(
name|dbTableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Accepts qualified name which is in the form of table, dbname.tablename or catalog.dbname.tablename and returns a    * {@link TableName}.    *    * @param dbTableName not null    * @return a {@link TableName}    * @throws SemanticException if dbTableName is null    */
specifier|public
specifier|static
name|TableName
name|of
parameter_list|(
name|String
name|dbTableName
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
return|return
name|fromString
argument_list|(
name|dbTableName
argument_list|,
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentCatalog
argument_list|()
argument_list|,
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

