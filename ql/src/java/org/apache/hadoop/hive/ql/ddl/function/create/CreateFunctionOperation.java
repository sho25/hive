begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|function
operator|.
name|create
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionInfo
operator|.
name|FunctionResource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FunctionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceUri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|ResourceDownloader
import|;
end_import

begin_comment
comment|/**  * Operation process of creating a function.  */
end_comment

begin_class
specifier|public
class|class
name|CreateFunctionOperation
extends|extends
name|DDLOperation
argument_list|<
name|CreateFunctionDesc
argument_list|>
block|{
specifier|public
name|CreateFunctionOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|CreateFunctionDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|desc
operator|.
name|isTemp
argument_list|()
condition|)
block|{
return|return
name|createTemporaryFunction
argument_list|()
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|createPermanentFunction
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|handlePermanentFunctionCreationException
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
name|int
name|createTemporaryFunction
parameter_list|()
block|{
try|try
block|{
comment|// Add any required resources
name|FunctionResource
index|[]
name|resources
init|=
name|FunctionUtils
operator|.
name|toFunctionResource
argument_list|(
name|desc
operator|.
name|getResources
argument_list|()
argument_list|)
decl_stmt|;
name|FunctionUtils
operator|.
name|addFunctionResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|udfClass
init|=
name|getUdfClass
argument_list|()
decl_stmt|;
name|FunctionInfo
name|registered
init|=
name|FunctionRegistry
operator|.
name|registerTemporaryUDF
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|,
name|udfClass
argument_list|,
name|resources
argument_list|)
decl_stmt|;
if|if
condition|(
name|registered
operator|!=
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
name|context
operator|.
name|getConsole
argument_list|()
operator|.
name|printError
argument_list|(
literal|"FAILED: Class "
operator|+
name|desc
operator|.
name|getClassName
argument_list|()
operator|+
literal|" does not implement UDF, GenericUDF, or UDAF"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|context
operator|.
name|getConsole
argument_list|()
operator|.
name|printError
argument_list|(
literal|"FAILED: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"create function: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|context
operator|.
name|getConsole
argument_list|()
operator|.
name|printError
argument_list|(
literal|"FAILED: Class "
operator|+
name|desc
operator|.
name|getClassName
argument_list|()
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"create function: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|getUdfClass
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
comment|// get the session specified class loader from SessionState
name|ClassLoader
name|classLoader
init|=
name|Utilities
operator|.
name|getSessionSpecifiedClassLoader
argument_list|()
decl_stmt|;
return|return
name|Class
operator|.
name|forName
argument_list|(
name|desc
operator|.
name|getClassName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
return|;
block|}
comment|// todo authorization
specifier|private
name|int
name|createPermanentFunction
parameter_list|()
throws|throws
name|HiveException
throws|,
name|IOException
block|{
name|String
index|[]
name|qualifiedNameParts
init|=
name|FunctionUtils
operator|.
name|getQualifiedFunctionNameParts
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
name|qualifiedNameParts
index|[
literal|0
index|]
decl_stmt|;
name|String
name|functionName
init|=
name|qualifiedNameParts
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|skipIfNewerThenUpdate
argument_list|(
name|dbName
argument_list|,
name|functionName
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// For permanent functions, check for any resources from local filesystem.
name|checkLocalFunctionResources
argument_list|()
expr_stmt|;
name|String
name|registeredName
init|=
name|FunctionUtils
operator|.
name|qualifyFunctionName
argument_list|(
name|functionName
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
name|boolean
name|registrationSuccess
init|=
name|registerFunction
argument_list|(
name|registeredName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|registrationSuccess
condition|)
block|{
name|context
operator|.
name|getConsole
argument_list|()
operator|.
name|printError
argument_list|(
literal|"Failed to register "
operator|+
name|registeredName
operator|+
literal|" using class "
operator|+
name|desc
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|boolean
name|addToMetastoreSuccess
init|=
name|addToMetastore
argument_list|(
name|dbName
argument_list|,
name|functionName
argument_list|,
name|registeredName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|addToMetastoreSuccess
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|boolean
name|skipIfNewerThenUpdate
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|functionName
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|desc
operator|.
name|getReplicationSpec
argument_list|()
operator|.
name|isInReplicationScope
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dbProps
init|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|desc
operator|.
name|getReplicationSpec
argument_list|()
operator|.
name|allowEventReplacementInto
argument_list|(
name|dbProps
argument_list|)
condition|)
block|{
comment|// If the database is newer than the create event, then noop it.
name|LOG
operator|.
name|debug
argument_list|(
literal|"FunctionTask: Create Function {} is skipped as database {} is newer than update"
argument_list|,
name|functionName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|checkLocalFunctionResources
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// If this is a non-local warehouse, then adding resources from the local filesystem
comment|// may mean that other clients will not be able to access the resources.
comment|// So disallow resources from local filesystem in this case.
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|desc
operator|.
name|getResources
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|localFsScheme
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|configuredFsScheme
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|configuredFsScheme
operator|.
name|equals
argument_list|(
name|localFsScheme
argument_list|)
condition|)
block|{
comment|// Configured warehouse FS is local, don't need to bother checking.
return|return;
block|}
for|for
control|(
name|ResourceUri
name|res
range|:
name|desc
operator|.
name|getResources
argument_list|()
control|)
block|{
name|String
name|resUri
init|=
name|res
operator|.
name|getUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|ResourceDownloader
operator|.
name|isFileUri
argument_list|(
name|resUri
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Hive warehouse is non-local, but "
operator|+
name|res
operator|.
name|getUri
argument_list|()
operator|+
literal|" specifies file on local "
operator|+
literal|"filesystem. Resources on non-local warehouse should specify a non-local scheme/path"
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception caught in checkLocalFunctionResources"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|boolean
name|registerFunction
parameter_list|(
name|String
name|registeredName
parameter_list|)
throws|throws
name|SemanticException
throws|,
name|HiveException
block|{
name|FunctionInfo
name|registered
init|=
literal|null
decl_stmt|;
name|HiveConf
name|oldConf
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
try|try
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setConf
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|registered
operator|=
name|FunctionRegistry
operator|.
name|registerPermanentFunction
argument_list|(
name|registeredName
argument_list|,
name|desc
operator|.
name|getClassName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|FunctionUtils
operator|.
name|toFunctionResource
argument_list|(
name|desc
operator|.
name|getResources
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|ex
decl_stmt|;
while|while
condition|(
name|t
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|getTask
argument_list|()
operator|.
name|setException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setConf
argument_list|(
name|oldConf
argument_list|)
expr_stmt|;
block|}
return|return
name|registered
operator|!=
literal|null
return|;
block|}
specifier|private
name|boolean
name|addToMetastore
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|functionName
parameter_list|,
name|String
name|registeredName
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
comment|// TODO: should this use getUserFromAuthenticator instead of SessionState.get().getUserName()?
name|Function
name|function
init|=
operator|new
name|Function
argument_list|(
name|functionName
argument_list|,
name|dbName
argument_list|,
name|desc
operator|.
name|getClassName
argument_list|()
argument_list|,
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|,
name|FunctionType
operator|.
name|JAVA
argument_list|,
name|desc
operator|.
name|getResources
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|createFunction
argument_list|(
name|function
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Addition to metastore failed, remove the function from the registry except if already exists.
if|if
condition|(
operator|!
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|AlreadyExistsException
operator|)
condition|)
block|{
name|FunctionRegistry
operator|.
name|unregisterPermanentFunction
argument_list|(
name|registeredName
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getTask
argument_list|()
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to add function "
operator|+
name|desc
operator|.
name|getName
argument_list|()
operator|+
literal|" to the metastore."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|int
name|handlePermanentFunctionCreationException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// For repl load flow, function may exist for first incremental phase. So, just return success.
if|if
condition|(
name|desc
operator|.
name|getReplicationSpec
argument_list|()
operator|.
name|isInReplicationScope
argument_list|()
operator|&&
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|AlreadyExistsException
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Create function is idempotent as function: "
operator|+
name|desc
operator|.
name|getName
argument_list|()
operator|+
literal|" already exists."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|context
operator|.
name|getTask
argument_list|()
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create function"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
end_class

end_unit

