begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleOperand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepRelVertex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Planner rule that creates a {@code SemiJoinRule} from a  * {@link org.apache.calcite.rel.core.Join} on top of a  * {@link org.apache.calcite.rel.logical.LogicalAggregate}.  *  * TODO Remove this rule and use Calcite's SemiJoinRule. Not possible currently  * since Calcite doesnt use RelBuilder for this rule and we want to generate HiveSemiJoin rel here.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|HiveSemiJoinRule
extends|extends
name|RelOptRule
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveSemiJoinRule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|HiveProjectToSemiJoinRule
name|INSTANCE_PROJECT
init|=
operator|new
name|HiveProjectToSemiJoinRule
argument_list|(
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|HiveProjectToSemiJoinRuleSwapInputs
name|INSTANCE_PROJECT_SWAPPED
init|=
operator|new
name|HiveProjectToSemiJoinRuleSwapInputs
argument_list|(
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|HiveAggregateToSemiJoinRule
name|INSTANCE_AGGREGATE
init|=
operator|new
name|HiveAggregateToSemiJoinRule
argument_list|(
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|)
decl_stmt|;
specifier|private
name|HiveSemiJoinRule
parameter_list|(
name|RelOptRuleOperand
name|operand
parameter_list|,
name|RelBuilderFactory
name|relBuilder
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|,
name|relBuilder
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|perform
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|,
name|ImmutableBitSet
name|topRefs
parameter_list|,
name|RelNode
name|topOperator
parameter_list|,
name|Join
name|join
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|Aggregate
name|aggregate
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Matched HiveSemiJoinRule"
argument_list|)
expr_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|join
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|rightBits
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|left
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|topRefs
operator|.
name|intersects
argument_list|(
name|rightBits
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|JoinInfo
name|joinInfo
init|=
name|join
operator|.
name|analyzeCondition
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|joinInfo
operator|.
name|rightSet
argument_list|()
operator|.
name|equals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|aggregate
operator|.
name|getGroupCount
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
comment|// Rule requires that aggregate key to be the same as the join key.
comment|// By the way, neither a super-set nor a sub-set would work.
return|return;
block|}
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|LEFT
condition|)
block|{
comment|// since for LEFT join we are only interested in rows from LEFT we can get rid of right side
name|call
operator|.
name|transformTo
argument_list|(
name|topOperator
operator|.
name|copy
argument_list|(
name|topOperator
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|left
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|!=
name|JoinRelType
operator|.
name|INNER
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|joinInfo
operator|.
name|isEqui
argument_list|()
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"All conditions matched for HiveSemiJoinRule. Going to apply transformation."
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|newRightKeyBuilder
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|aggregateKeys
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|key
range|:
name|joinInfo
operator|.
name|rightKeys
control|)
block|{
name|newRightKeyBuilder
operator|.
name|add
argument_list|(
name|aggregateKeys
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ImmutableIntList
name|newRightKeys
init|=
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|newRightKeyBuilder
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|newRight
init|=
name|aggregate
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|newCondition
init|=
name|RelOptUtil
operator|.
name|createEquiJoinCondition
argument_list|(
name|left
argument_list|,
name|joinInfo
operator|.
name|leftKeys
argument_list|,
name|newRight
argument_list|,
name|newRightKeys
argument_list|,
name|rexBuilder
argument_list|)
decl_stmt|;
name|RelNode
name|semi
init|=
literal|null
decl_stmt|;
comment|//HIVE-15458: we need to add a Project on top of Join since SemiJoin with Join as it's right input
comment|// is not expected further down the pipeline. see jira for more details
if|if
condition|(
name|aggregate
operator|.
name|getInput
argument_list|()
operator|instanceof
name|HepRelVertex
operator|&&
operator|(
operator|(
name|HepRelVertex
operator|)
name|aggregate
operator|.
name|getInput
argument_list|()
operator|)
operator|.
name|getCurrentRel
argument_list|()
operator|instanceof
name|Join
condition|)
block|{
name|Join
name|rightJoin
init|=
call|(
name|Join
call|)
argument_list|(
operator|(
operator|(
name|HepRelVertex
operator|)
name|aggregate
operator|.
name|getInput
argument_list|()
operator|)
operator|.
name|getCurrentRel
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rightJoin
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|projects
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|rightJoin
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RelNode
name|topProject
init|=
name|call
operator|.
name|builder
argument_list|()
operator|.
name|push
argument_list|(
name|rightJoin
argument_list|)
operator|.
name|project
argument_list|(
name|projects
argument_list|,
name|rightJoin
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|semi
operator|=
name|call
operator|.
name|builder
argument_list|()
operator|.
name|push
argument_list|(
name|left
argument_list|)
operator|.
name|push
argument_list|(
name|topProject
argument_list|)
operator|.
name|semiJoin
argument_list|(
name|newCondition
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|semi
operator|=
name|call
operator|.
name|builder
argument_list|()
operator|.
name|push
argument_list|(
name|left
argument_list|)
operator|.
name|push
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|)
operator|.
name|semiJoin
argument_list|(
name|newCondition
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|call
operator|.
name|transformTo
argument_list|(
name|topOperator
operator|.
name|copy
argument_list|(
name|topOperator
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|semi
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** SemiJoinRule that matches a Project on top of a Join with an Aggregate    * as its right child. */
specifier|public
specifier|static
class|class
name|HiveProjectToSemiJoinRule
extends|extends
name|HiveSemiJoinRule
block|{
comment|/** Creates a HiveProjectToSemiJoinRule. */
specifier|public
name|HiveProjectToSemiJoinRule
parameter_list|(
name|RelBuilderFactory
name|relBuilder
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|some
argument_list|(
name|operand
argument_list|(
name|Join
operator|.
name|class
argument_list|,
name|some
argument_list|(
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|relBuilder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|left
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|topRefs
init|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|project
operator|.
name|getChildExps
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|perform
argument_list|(
name|call
argument_list|,
name|topRefs
argument_list|,
name|project
argument_list|,
name|join
argument_list|,
name|left
argument_list|,
name|aggregate
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** SemiJoinRule that matches a Project on top of a Join with an Aggregate    * as its right child. */
specifier|public
specifier|static
class|class
name|HiveProjectToSemiJoinRuleSwapInputs
extends|extends
name|HiveSemiJoinRule
block|{
comment|/** Creates a HiveProjectToSemiJoinRule. */
specifier|public
name|HiveProjectToSemiJoinRuleSwapInputs
parameter_list|(
name|RelBuilderFactory
name|relBuilder
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|some
argument_list|(
name|operand
argument_list|(
name|Join
operator|.
name|class
argument_list|,
name|some
argument_list|(
name|operand
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|relBuilder
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Project
name|swapInputs
parameter_list|(
name|Join
name|join
parameter_list|,
name|Project
name|topProject
parameter_list|,
name|RelBuilder
name|builder
parameter_list|)
block|{
name|RexBuilder
name|rexBuilder
init|=
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|int
name|rightInputSize
init|=
name|join
operator|.
name|getRight
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
name|int
name|leftInputSize
init|=
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|joinFields
init|=
name|join
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
comment|//swap the join inputs
comment|//adjust join condition
name|int
index|[]
name|condAdjustments
init|=
operator|new
name|int
index|[
name|joinFields
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|joinFields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|leftInputSize
condition|)
block|{
comment|//left side refs need to be moved by right input size
name|condAdjustments
index|[
name|i
index|]
operator|=
name|rightInputSize
expr_stmt|;
block|}
else|else
block|{
comment|//right side refs need to move "down" by left input size
name|condAdjustments
index|[
name|i
index|]
operator|=
operator|-
name|leftInputSize
expr_stmt|;
block|}
block|}
name|RexNode
name|newJoinCond
init|=
name|join
operator|.
name|getCondition
argument_list|()
operator|.
name|accept
argument_list|(
operator|new
name|RelOptUtil
operator|.
name|RexInputConverter
argument_list|(
name|rexBuilder
argument_list|,
name|joinFields
argument_list|,
name|joinFields
argument_list|,
name|condAdjustments
argument_list|)
argument_list|)
decl_stmt|;
name|Join
name|swappedJoin
init|=
operator|(
name|Join
operator|)
name|builder
operator|.
name|push
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
operator|.
name|push
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
operator|.
name|join
argument_list|(
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|newJoinCond
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// need to adjust project rex refs
name|List
argument_list|<
name|RexNode
argument_list|>
name|newProjects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|swappedJoinFeilds
init|=
name|swappedJoin
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|project
range|:
name|topProject
operator|.
name|getProjects
argument_list|()
control|)
block|{
name|RexNode
name|newProject
init|=
name|project
operator|.
name|accept
argument_list|(
operator|new
name|RelOptUtil
operator|.
name|RexInputConverter
argument_list|(
name|rexBuilder
argument_list|,
name|swappedJoinFeilds
argument_list|,
name|swappedJoinFeilds
argument_list|,
name|condAdjustments
argument_list|)
argument_list|)
decl_stmt|;
name|newProjects
operator|.
name|add
argument_list|(
name|newProject
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Project
operator|)
name|builder
operator|.
name|push
argument_list|(
name|swappedJoin
argument_list|)
operator|.
name|project
argument_list|(
name|newProjects
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|right
init|=
name|call
operator|.
name|rel
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// make sure the following conditions are met
comment|//  Join is INNER
comment|// Join keys are same as gb keys
comment|//  project above is referring to inputs only from non-aggregate side
specifier|final
name|JoinInfo
name|joinInfo
init|=
name|join
operator|.
name|analyzeCondition
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|joinInfo
operator|.
name|isEqui
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|joinInfo
operator|.
name|leftSet
argument_list|()
operator|.
name|equals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|aggregate
operator|.
name|getGroupCount
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
comment|// Rule requires that aggregate key to be the same as the join key.
comment|// By the way, neither a super-set nor a sub-set would work.
return|return;
block|}
specifier|final
name|ImmutableBitSet
name|topRefs
init|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|project
operator|.
name|getChildExps
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|leftBits
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|topRefs
operator|.
name|intersects
argument_list|(
name|leftBits
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// it is safe to swap inputs
specifier|final
name|Project
name|swappedProject
init|=
name|swapInputs
argument_list|(
name|join
argument_list|,
name|project
argument_list|,
name|call
operator|.
name|builder
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|swappedJoin
init|=
name|swappedProject
operator|.
name|getInput
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|swappedJoin
operator|instanceof
name|Join
operator|)
assert|;
specifier|final
name|ImmutableBitSet
name|swappedTopRefs
init|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|swappedProject
operator|.
name|getChildExps
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|perform
argument_list|(
name|call
argument_list|,
name|swappedTopRefs
argument_list|,
name|swappedProject
argument_list|,
operator|(
name|Join
operator|)
name|swappedJoin
argument_list|,
name|right
argument_list|,
name|aggregate
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** SemiJoinRule that matches a Aggregate on top of a Join with an Aggregate    * as its right child. */
specifier|public
specifier|static
class|class
name|HiveAggregateToSemiJoinRule
extends|extends
name|HiveSemiJoinRule
block|{
comment|/** Creates a HiveAggregateToSemiJoinRule. */
specifier|public
name|HiveAggregateToSemiJoinRule
parameter_list|(
name|RelBuilderFactory
name|relBuilder
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|,
name|some
argument_list|(
name|operand
argument_list|(
name|Join
operator|.
name|class
argument_list|,
name|some
argument_list|(
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|relBuilder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Aggregate
name|topAggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|left
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// Gather columns used by aggregate operator
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|topRefs
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|topRefs
operator|.
name|addAll
argument_list|(
name|topAggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|topAggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
name|topRefs
operator|.
name|addAll
argument_list|(
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|aggCall
operator|.
name|filterArg
operator|!=
operator|-
literal|1
condition|)
block|{
name|topRefs
operator|.
name|set
argument_list|(
name|aggCall
operator|.
name|filterArg
argument_list|)
expr_stmt|;
block|}
block|}
name|perform
argument_list|(
name|call
argument_list|,
name|topRefs
operator|.
name|build
argument_list|()
argument_list|,
name|topAggregate
argument_list|,
name|join
argument_list|,
name|left
argument_list|,
name|aggregate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End SemiJoinRule.java
end_comment

end_unit

