begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|ExecMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SparkWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|HashPartitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|SparkConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|api
operator|.
name|java
operator|.
name|JavaPairRDD
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|api
operator|.
name|java
operator|.
name|JavaSparkContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|SparkClient
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|static
specifier|transient
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SparkClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|masterUrl
init|=
literal|"local"
decl_stmt|;
specifier|private
specifier|static
name|String
name|appName
init|=
literal|"Hive-Spark"
decl_stmt|;
specifier|private
specifier|static
name|String
name|sparkHome
init|=
literal|"/home/xzhang/apache/spark"
decl_stmt|;
specifier|private
specifier|static
name|int
name|reducerCount
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
name|String
name|execMem
init|=
literal|"1g"
decl_stmt|;
specifier|private
specifier|static
name|String
name|execJvmOpts
init|=
literal|""
decl_stmt|;
static|static
block|{
name|String
name|envSparkHome
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"SPARK_HOME"
argument_list|)
decl_stmt|;
if|if
condition|(
name|envSparkHome
operator|!=
literal|null
condition|)
block|{
name|sparkHome
operator|=
name|envSparkHome
expr_stmt|;
block|}
name|String
name|envMaster
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"MASTER"
argument_list|)
decl_stmt|;
if|if
condition|(
name|envMaster
operator|!=
literal|null
condition|)
block|{
name|masterUrl
operator|=
name|envMaster
expr_stmt|;
block|}
name|String
name|reducers
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"REDUCERS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|reducers
operator|!=
literal|null
condition|)
block|{
name|reducerCount
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|reducers
argument_list|)
expr_stmt|;
block|}
name|String
name|mem
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"spark_executor_memory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mem
operator|!=
literal|null
condition|)
block|{
name|execMem
operator|=
name|mem
expr_stmt|;
block|}
name|String
name|jopts
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"spark_executor_extraJavaOptions"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jopts
operator|!=
literal|null
condition|)
block|{
name|execJvmOpts
operator|=
name|jopts
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|SparkClient
name|client
init|=
operator|new
name|SparkClient
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|SparkClient
name|getInstance
parameter_list|()
block|{
return|return
name|client
return|;
block|}
specifier|private
name|JavaSparkContext
name|sc
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|localJars
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|localFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|SparkClient
parameter_list|()
block|{
name|SparkConf
name|sparkConf
init|=
operator|new
name|SparkConf
argument_list|()
operator|.
name|setAppName
argument_list|(
name|appName
argument_list|)
operator|.
name|setMaster
argument_list|(
name|masterUrl
argument_list|)
operator|.
name|setSparkHome
argument_list|(
name|sparkHome
argument_list|)
decl_stmt|;
name|sparkConf
operator|.
name|set
argument_list|(
literal|"spark.serializer"
argument_list|,
literal|"org.apache.spark.serializer.KryoSerializer"
argument_list|)
expr_stmt|;
name|sparkConf
operator|.
name|set
argument_list|(
literal|"spark.default.parallelism"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|sparkConf
operator|.
name|set
argument_list|(
literal|"spark.executor.memory"
argument_list|,
name|execMem
argument_list|)
expr_stmt|;
name|sparkConf
operator|.
name|set
argument_list|(
literal|"spark.executor.extraJavaOptions"
argument_list|,
name|execJvmOpts
argument_list|)
expr_stmt|;
name|sc
operator|=
operator|new
name|JavaSparkContext
argument_list|(
name|sparkConf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|execute
parameter_list|(
name|DriverContext
name|driverContext
parameter_list|,
name|SparkWork
name|sparkWork
parameter_list|)
block|{
name|int
name|rc
init|=
literal|1
decl_stmt|;
comment|//    System.out.println("classpath=\n"+System.getProperty("java.class.path") + "\n");
name|HiveConf
name|hiveConf
init|=
operator|(
name|HiveConf
operator|)
name|driverContext
operator|.
name|getCtx
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|refreshLocalResources
argument_list|(
name|sparkWork
argument_list|,
name|hiveConf
argument_list|)
expr_stmt|;
name|MapWork
name|mapWork
init|=
name|sparkWork
operator|.
name|getMapWork
argument_list|()
decl_stmt|;
name|ReduceWork
name|redWork
init|=
name|sparkWork
operator|.
name|getReduceWork
argument_list|()
decl_stmt|;
comment|// TODO: need to combine spark conf and hive conf
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|Context
name|ctx
init|=
name|driverContext
operator|.
name|getCtx
argument_list|()
decl_stmt|;
name|Path
name|emptyScratchDir
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ctx
operator|==
literal|null
condition|)
block|{
name|ctx
operator|=
operator|new
name|Context
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
block|}
name|emptyScratchDir
operator|=
name|ctx
operator|.
name|getMRTmpPath
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|emptyScratchDir
operator|.
name|getFileSystem
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|emptyScratchDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error launching map-reduce job"
operator|+
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|5
return|;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|inputPaths
decl_stmt|;
try|try
block|{
name|inputPaths
operator|=
name|Utilities
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|,
name|mapWork
argument_list|,
name|emptyScratchDir
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
name|e2
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|Utilities
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|inputPaths
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|setMapWork
argument_list|(
name|jobConf
argument_list|,
name|mapWork
argument_list|,
name|emptyScratchDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|redWork
operator|!=
literal|null
condition|)
name|Utilities
operator|.
name|setReduceWork
argument_list|(
name|jobConf
argument_list|,
name|redWork
argument_list|,
name|emptyScratchDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|Utilities
operator|.
name|createTmpDirs
argument_list|(
name|jobConf
argument_list|,
name|mapWork
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|createTmpDirs
argument_list|(
name|jobConf
argument_list|,
name|redWork
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Path
name|planPath
init|=
operator|new
name|Path
argument_list|(
name|jobConf
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|,
literal|"plan.xml"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Serializing plan to path: "
operator|+
name|planPath
argument_list|)
expr_stmt|;
name|OutputStream
name|os2
init|=
name|planPath
operator|.
name|getFileSystem
argument_list|(
name|jobConf
argument_list|)
operator|.
name|create
argument_list|(
name|planPath
argument_list|)
decl_stmt|;
name|Utilities
operator|.
name|serializePlan
argument_list|(
name|mapWork
argument_list|,
name|os2
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
name|JavaPairRDD
name|rdd
init|=
name|createRDD
argument_list|(
name|sc
argument_list|,
name|jobConf
argument_list|,
name|mapWork
argument_list|)
decl_stmt|;
name|byte
index|[]
name|confBytes
init|=
name|KryoSerializer
operator|.
name|serializeJobConf
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|HiveMapFunction
name|mf
init|=
operator|new
name|HiveMapFunction
argument_list|(
name|confBytes
argument_list|)
decl_stmt|;
name|JavaPairRDD
name|rdd2
init|=
name|rdd
operator|.
name|mapPartitionsToPair
argument_list|(
name|mf
argument_list|)
decl_stmt|;
if|if
condition|(
name|redWork
operator|==
literal|null
condition|)
block|{
name|rdd2
operator|.
name|foreach
argument_list|(
name|HiveVoidFunction
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapWork
operator|.
name|getAliasToWork
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|mapWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|op
operator|.
name|jobClose
argument_list|(
name|jobConf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Calling jobClose() failed: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|JavaPairRDD
name|rdd3
init|=
name|rdd2
operator|.
name|partitionBy
argument_list|(
operator|new
name|HashPartitioner
argument_list|(
name|reducerCount
comment|/*redWork.getNumReduceTasks()*/
argument_list|)
argument_list|)
decl_stmt|;
comment|// Two partitions.
name|HiveReduceFunction
name|rf
init|=
operator|new
name|HiveReduceFunction
argument_list|(
name|confBytes
argument_list|)
decl_stmt|;
name|JavaPairRDD
name|rdd4
init|=
name|rdd3
operator|.
name|mapPartitionsToPair
argument_list|(
name|rf
argument_list|)
decl_stmt|;
name|rdd4
operator|.
name|foreach
argument_list|(
name|HiveVoidFunction
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|redWork
operator|.
name|getReducer
argument_list|()
operator|.
name|jobClose
argument_list|(
name|jobConf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Calling jobClose() failed: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|JavaPairRDD
name|createRDD
parameter_list|(
name|JavaSparkContext
name|sc
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|MapWork
name|mapWork
parameter_list|)
block|{
name|Class
name|ifClass
init|=
name|HiveInputFormat
operator|.
name|class
decl_stmt|;
comment|// The mapper class is expected by the HiveInputFormat.
name|jobConf
operator|.
name|set
argument_list|(
literal|"mapred.mapper.class"
argument_list|,
name|ExecMapper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sc
operator|.
name|hadoopRDD
argument_list|(
name|jobConf
argument_list|,
name|ifClass
argument_list|,
name|WritableComparable
operator|.
name|class
argument_list|,
name|Writable
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|void
name|refreshLocalResources
parameter_list|(
name|SparkWork
name|sparkWork
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
comment|// add hive-exec jar
name|String
name|hiveJar
init|=
name|conf
operator|.
name|getJar
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|localJars
operator|.
name|contains
argument_list|(
name|hiveJar
argument_list|)
condition|)
block|{
name|localJars
operator|.
name|add
argument_list|(
name|hiveJar
argument_list|)
expr_stmt|;
name|sc
operator|.
name|addJar
argument_list|(
name|hiveJar
argument_list|)
expr_stmt|;
block|}
comment|// add aux jars
name|String
name|auxJars
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEAUXJARS
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|auxJars
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|auxJars
argument_list|)
condition|)
block|{
name|addResources
argument_list|(
name|auxJars
argument_list|,
name|localJars
argument_list|)
expr_stmt|;
block|}
comment|// add added jars
name|String
name|addedJars
init|=
name|Utilities
operator|.
name|getResourceFiles
argument_list|(
name|conf
argument_list|,
name|SessionState
operator|.
name|ResourceType
operator|.
name|JAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|addedJars
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|addedJars
argument_list|)
condition|)
block|{
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEADDEDJARS
argument_list|,
name|addedJars
argument_list|)
expr_stmt|;
name|addResources
argument_list|(
name|addedJars
argument_list|,
name|localJars
argument_list|)
expr_stmt|;
block|}
comment|// add plugin module jars on demand
specifier|final
name|String
name|MR_JAR_PROPERTY
init|=
literal|"tmpjars"
decl_stmt|;
comment|// jobConf will hold all the configuration for hadoop, tez, and hive
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setStrings
argument_list|(
name|MR_JAR_PROPERTY
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// TODO update after SparkCompiler finished.
comment|//    for (BaseWork work : sparkWork.getAllWork()) {
comment|//      work.configureJobConf(jobConf);
comment|//    }
name|sparkWork
operator|.
name|getMapWork
argument_list|()
operator|.
name|configureJobConf
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|ReduceWork
name|redWork
init|=
name|sparkWork
operator|.
name|getReduceWork
argument_list|()
decl_stmt|;
if|if
condition|(
name|redWork
operator|!=
literal|null
condition|)
block|{
name|redWork
operator|.
name|configureJobConf
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|newTmpJars
init|=
name|jobConf
operator|.
name|getStrings
argument_list|(
name|MR_JAR_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|newTmpJars
operator|!=
literal|null
operator|&&
name|newTmpJars
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|tmpJar
range|:
name|newTmpJars
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|tmpJar
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|tmpJar
argument_list|)
operator|&&
operator|!
name|localJars
operator|.
name|contains
argument_list|(
name|tmpJar
argument_list|)
condition|)
block|{
name|localJars
operator|.
name|add
argument_list|(
name|tmpJar
argument_list|)
expr_stmt|;
name|sc
operator|.
name|addJar
argument_list|(
name|tmpJar
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//add added files
name|String
name|addedFiles
init|=
name|Utilities
operator|.
name|getResourceFiles
argument_list|(
name|conf
argument_list|,
name|SessionState
operator|.
name|ResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|addedFiles
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|addedFiles
argument_list|)
condition|)
block|{
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEADDEDFILES
argument_list|,
name|addedFiles
argument_list|)
expr_stmt|;
name|addResources
argument_list|(
name|addedFiles
argument_list|,
name|localFiles
argument_list|)
expr_stmt|;
block|}
comment|// add added archives
name|String
name|addedArchives
init|=
name|Utilities
operator|.
name|getResourceFiles
argument_list|(
name|conf
argument_list|,
name|SessionState
operator|.
name|ResourceType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|addedArchives
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|addedArchives
argument_list|)
condition|)
block|{
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEADDEDARCHIVES
argument_list|,
name|addedArchives
argument_list|)
expr_stmt|;
name|addResources
argument_list|(
name|addedArchives
argument_list|,
name|localFiles
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addResources
parameter_list|(
name|String
name|addedFiles
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|localCache
parameter_list|)
block|{
for|for
control|(
name|String
name|addedFile
range|:
name|addedFiles
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|addedFile
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|addedFile
argument_list|)
operator|&&
operator|!
name|localCache
operator|.
name|contains
argument_list|(
name|addedFile
argument_list|)
condition|)
block|{
name|localCache
operator|.
name|add
argument_list|(
name|addedFile
argument_list|)
expr_stmt|;
name|sc
operator|.
name|addFile
argument_list|(
name|addedFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

