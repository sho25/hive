begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|EnumValueDescriptor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
operator|.
name|JavaType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * SerDe to convert ProtoWritable messages to Hive formats.  * The serde supports the following properties:  *<ul>  *<li>proto.class: This is required and specifies the class to be used to read the messages.</li>  *<li>proto.maptypes: This is optional it declares set of protobuf types that have to be  *       converted to map objects instead of struct type. It is applied only on a repeated struct  *       field. The message should have 2 fields, first is used as key and second is used as value.  *</li>  *</ul>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ProtobufSerDe
extends|extends
name|AbstractSerDe
block|{
specifier|static
specifier|final
name|String
name|PROTO_CLASS
init|=
literal|"proto.class"
decl_stmt|;
specifier|static
specifier|final
name|String
name|MAP_TYPES
init|=
literal|"proto.maptypes"
decl_stmt|;
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|protoMessageClass
decl_stmt|;
specifier|private
name|ProtoToHiveConvertor
name|convertor
decl_stmt|;
specifier|private
name|ObjectInspector
name|objectInspector
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|mapTypes
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
name|this
operator|.
name|mapTypes
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tbl
operator|.
name|getProperty
argument_list|(
name|MAP_TYPES
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\s*,\\s*"
argument_list|)
argument_list|)
expr_stmt|;
name|protoMessageClass
operator|=
name|loadClass
argument_list|(
name|tbl
operator|.
name|getProperty
argument_list|(
name|PROTO_CLASS
argument_list|)
argument_list|)
expr_stmt|;
name|Descriptor
name|descriptor
init|=
name|loadDescriptor
argument_list|(
name|protoMessageClass
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Descriptor
argument_list|,
name|ObjectInspector
argument_list|>
name|cache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|this
operator|.
name|objectInspector
operator|=
name|createStructObjectInspector
argument_list|(
name|descriptor
argument_list|,
name|cache
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Descriptor
argument_list|,
name|ProtoToHiveConvertor
argument_list|>
name|convertorCache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|this
operator|.
name|convertor
operator|=
name|createConvertor
argument_list|(
name|descriptor
argument_list|,
name|convertorCache
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|loadClass
parameter_list|(
name|String
name|protoClass
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|protoClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|PROTO_CLASS
operator|+
literal|" has to be set."
argument_list|)
throw|;
block|}
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|protoClass
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Message
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Invalid class: "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|" is not type of: "
operator|+
name|Message
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|serdeClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
operator|)
name|clazz
decl_stmt|;
return|return
name|serdeClass
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Cannot find/load class: "
operator|+
name|protoClass
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Descriptor
name|loadDescriptor
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|protoClass
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|Method
name|method
init|=
name|protoClass
operator|.
name|getMethod
argument_list|(
literal|"getDescriptor"
argument_list|,
operator|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
return|return
operator|(
name|Descriptor
operator|)
name|method
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
decl||
name|NoSuchMethodException
decl||
name|SecurityException
decl||
name|IllegalAccessException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Error trying to get descriptor for class: "
operator|+
name|protoClass
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented serialize"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getSerDeStats
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|blob
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|blob
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Message
name|message
init|=
name|toMessage
argument_list|(
name|blob
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|convertor
operator|.
name|convert
argument_list|(
name|message
argument_list|)
return|;
block|}
comment|/**    * Convert the given writable to a message.    * @param writable The writable object containing the message.    * @return The converted message object.    * @throws SerDeException    */
specifier|protected
specifier|abstract
name|Message
name|toMessage
parameter_list|(
name|Writable
name|writable
parameter_list|)
throws|throws
name|SerDeException
function_decl|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
block|{
return|return
name|objectInspector
return|;
block|}
specifier|private
name|ObjectInspector
name|createStructObjectInspector
parameter_list|(
name|Descriptor
name|descriptor
parameter_list|,
name|Map
argument_list|<
name|Descriptor
argument_list|,
name|ObjectInspector
argument_list|>
name|cache
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|cache
operator|.
name|containsKey
argument_list|(
name|descriptor
argument_list|)
condition|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|descriptor
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|columnOI
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldDescriptor
name|field
range|:
name|descriptor
operator|.
name|getFields
argument_list|()
control|)
block|{
name|columnNames
operator|.
name|add
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|columnOI
operator|.
name|add
argument_list|(
name|createObjectInspector
argument_list|(
name|field
argument_list|,
name|cache
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ObjectInspector
name|oi
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|columnOI
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|descriptor
argument_list|,
name|oi
argument_list|)
expr_stmt|;
return|return
name|oi
return|;
block|}
specifier|private
name|ObjectInspector
name|createObjectInspector
parameter_list|(
name|FieldDescriptor
name|descriptor
parameter_list|,
name|Map
argument_list|<
name|Descriptor
argument_list|,
name|ObjectInspector
argument_list|>
name|cache
parameter_list|)
throws|throws
name|SerDeException
block|{
name|ObjectInspector
name|oi
decl_stmt|;
switch|switch
condition|(
name|descriptor
operator|.
name|getJavaType
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|oi
operator|=
name|getPrimitive
argument_list|(
name|PrimitiveCategory
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE_STRING
case|:
name|oi
operator|=
name|getPrimitive
argument_list|(
name|PrimitiveCategory
operator|.
name|BINARY
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|oi
operator|=
name|getPrimitive
argument_list|(
name|PrimitiveCategory
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|ENUM
case|:
name|oi
operator|=
name|getPrimitive
argument_list|(
name|PrimitiveCategory
operator|.
name|STRING
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|oi
operator|=
name|getPrimitive
argument_list|(
name|PrimitiveCategory
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|oi
operator|=
name|getPrimitive
argument_list|(
name|PrimitiveCategory
operator|.
name|INT
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|oi
operator|=
name|getPrimitive
argument_list|(
name|PrimitiveCategory
operator|.
name|LONG
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|oi
operator|=
name|getPrimitive
argument_list|(
name|PrimitiveCategory
operator|.
name|STRING
argument_list|)
expr_stmt|;
break|break;
case|case
name|MESSAGE
case|:
name|Descriptor
name|msgType
init|=
name|descriptor
operator|.
name|getMessageType
argument_list|()
decl_stmt|;
if|if
condition|(
name|descriptor
operator|.
name|isRepeated
argument_list|()
operator|&&
name|mapTypes
operator|.
name|contains
argument_list|(
name|msgType
operator|.
name|getFullName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getMapObjectInspector
argument_list|(
name|msgType
argument_list|,
name|cache
argument_list|)
return|;
block|}
else|else
block|{
name|oi
operator|=
name|createStructObjectInspector
argument_list|(
name|msgType
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unexpected type: "
operator|+
name|descriptor
operator|.
name|getJavaType
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|descriptor
operator|.
name|isRepeated
argument_list|()
condition|?
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|oi
argument_list|)
else|:
name|oi
return|;
block|}
specifier|private
name|ObjectInspector
name|getMapObjectInspector
parameter_list|(
name|Descriptor
name|descriptor
parameter_list|,
name|Map
argument_list|<
name|Descriptor
argument_list|,
name|ObjectInspector
argument_list|>
name|cache
parameter_list|)
throws|throws
name|SerDeException
block|{
name|List
argument_list|<
name|FieldDescriptor
argument_list|>
name|fields
init|=
name|descriptor
operator|.
name|getFields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Map type "
operator|+
name|descriptor
operator|.
name|getFullName
argument_list|()
operator|+
literal|" should have only 2 fields, got: "
operator|+
name|fields
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|ObjectInspector
name|keyOI
init|=
name|createObjectInspector
argument_list|(
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cache
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueOI
init|=
name|createObjectInspector
argument_list|(
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|cache
argument_list|)
decl_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|keyOI
argument_list|,
name|valueOI
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ObjectInspector
name|getPrimitive
parameter_list|(
name|PrimitiveCategory
name|cat
parameter_list|)
block|{
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|cat
argument_list|)
return|;
block|}
specifier|private
name|ProtoToHiveConvertor
name|createConvertor
parameter_list|(
name|Descriptor
name|descriptor
parameter_list|,
name|Map
argument_list|<
name|Descriptor
argument_list|,
name|ProtoToHiveConvertor
argument_list|>
name|cache
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|cache
operator|.
name|containsKey
argument_list|(
name|descriptor
argument_list|)
condition|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|descriptor
argument_list|)
return|;
block|}
name|List
argument_list|<
name|FieldDescriptor
argument_list|>
name|fields
init|=
name|descriptor
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|StructConvertor
name|scConvertor
init|=
operator|new
name|StructConvertor
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FieldDescriptor
name|field
range|:
name|descriptor
operator|.
name|getFields
argument_list|()
control|)
block|{
name|ProtoToHiveConvertor
name|fc
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|getJavaType
argument_list|()
operator|==
name|JavaType
operator|.
name|MESSAGE
condition|)
block|{
name|fc
operator|=
name|createConvertor
argument_list|(
name|field
operator|.
name|getMessageType
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|getJavaType
argument_list|()
operator|==
name|JavaType
operator|.
name|BYTE_STRING
condition|)
block|{
name|fc
operator|=
name|ByteStringConvertor
operator|.
name|INSTANCE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|getJavaType
argument_list|()
operator|==
name|JavaType
operator|.
name|ENUM
condition|)
block|{
name|fc
operator|=
name|EnumConvertor
operator|.
name|INSTANCE
expr_stmt|;
block|}
else|else
block|{
name|fc
operator|=
name|IdentityConvertor
operator|.
name|INSTANCE
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|isRepeated
argument_list|()
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|getJavaType
argument_list|()
operator|==
name|JavaType
operator|.
name|MESSAGE
operator|&&
name|mapTypes
operator|.
name|contains
argument_list|(
name|field
operator|.
name|getMessageType
argument_list|()
operator|.
name|getFullName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|getMessageType
argument_list|()
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Expected exactly 2 fields for: "
operator|+
name|field
operator|.
name|getMessageType
argument_list|()
operator|.
name|getFullName
argument_list|()
argument_list|)
throw|;
block|}
name|fc
operator|=
operator|new
name|MapConvertor
argument_list|(
name|fc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fc
operator|=
operator|new
name|ListConvertor
argument_list|(
name|fc
argument_list|)
expr_stmt|;
block|}
block|}
name|scConvertor
operator|.
name|add
argument_list|(
name|i
operator|++
argument_list|,
name|field
argument_list|,
name|fc
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|put
argument_list|(
name|descriptor
argument_list|,
name|scConvertor
argument_list|)
expr_stmt|;
return|return
name|scConvertor
return|;
block|}
specifier|private
interface|interface
name|ProtoToHiveConvertor
block|{
specifier|default
name|Object
name|extractAndConvert
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|,
name|Message
name|msg
parameter_list|)
block|{
name|Object
name|val
init|=
name|msg
operator|.
name|hasField
argument_list|(
name|field
argument_list|)
condition|?
name|msg
operator|.
name|getField
argument_list|(
name|field
argument_list|)
else|:
literal|null
decl_stmt|;
return|return
name|val
operator|==
literal|null
condition|?
literal|null
else|:
name|convert
argument_list|(
name|val
argument_list|)
return|;
block|}
name|Object
name|convert
parameter_list|(
name|Object
name|obj
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|StructConvertor
implements|implements
name|ProtoToHiveConvertor
block|{
specifier|private
specifier|final
name|FieldDescriptor
index|[]
name|fields
decl_stmt|;
specifier|private
specifier|final
name|ProtoToHiveConvertor
index|[]
name|convertors
decl_stmt|;
name|StructConvertor
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
operator|new
name|FieldDescriptor
index|[
name|size
index|]
expr_stmt|;
name|this
operator|.
name|convertors
operator|=
operator|new
name|ProtoToHiveConvertor
index|[
name|size
index|]
expr_stmt|;
block|}
name|void
name|add
parameter_list|(
name|int
name|i
parameter_list|,
name|FieldDescriptor
name|field
parameter_list|,
name|ProtoToHiveConvertor
name|convertor
parameter_list|)
block|{
name|fields
index|[
name|i
index|]
operator|=
name|field
expr_stmt|;
name|convertors
index|[
name|i
index|]
operator|=
name|convertor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|Message
name|msg
init|=
operator|(
name|Message
operator|)
name|obj
decl_stmt|;
name|Object
index|[]
name|ret
init|=
operator|new
name|Object
index|[
name|fields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|convertors
index|[
name|i
index|]
operator|.
name|extractAndConvert
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ListConvertor
implements|implements
name|ProtoToHiveConvertor
block|{
specifier|private
specifier|final
name|ProtoToHiveConvertor
name|convertor
decl_stmt|;
name|ListConvertor
parameter_list|(
name|ProtoToHiveConvertor
name|convertor
parameter_list|)
block|{
name|this
operator|.
name|convertor
operator|=
name|convertor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|extractAndConvert
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|,
name|Message
name|msg
parameter_list|)
block|{
name|int
name|count
init|=
name|msg
operator|.
name|getRepeatedFieldCount
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
index|[]
name|val
init|=
operator|new
name|Object
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
operator|++
name|j
control|)
block|{
name|val
index|[
name|j
index|]
operator|=
name|convertor
operator|.
name|convert
argument_list|(
name|msg
operator|.
name|getRepeatedField
argument_list|(
name|field
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Use extractAndConvert for ListConvertor"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MapConvertor
implements|implements
name|ProtoToHiveConvertor
block|{
specifier|private
specifier|final
name|ProtoToHiveConvertor
name|convertor
decl_stmt|;
name|MapConvertor
parameter_list|(
name|ProtoToHiveConvertor
name|convertor
parameter_list|)
block|{
name|this
operator|.
name|convertor
operator|=
name|convertor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|extractAndConvert
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|,
name|Message
name|msg
parameter_list|)
block|{
name|int
name|count
init|=
name|msg
operator|.
name|getRepeatedFieldCount
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|val
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
operator|++
name|j
control|)
block|{
name|Object
index|[]
name|entry
init|=
operator|(
name|Object
index|[]
operator|)
name|convertor
operator|.
name|convert
argument_list|(
name|msg
operator|.
name|getRepeatedField
argument_list|(
name|field
argument_list|,
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|val
operator|.
name|put
argument_list|(
name|entry
index|[
literal|0
index|]
argument_list|,
name|entry
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Use extractAndConvert for MapConvertor"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ByteStringConvertor
implements|implements
name|ProtoToHiveConvertor
block|{
specifier|private
specifier|static
specifier|final
name|ProtoToHiveConvertor
name|INSTANCE
init|=
operator|new
name|ByteStringConvertor
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ByteString
operator|)
name|obj
operator|)
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|EnumConvertor
implements|implements
name|ProtoToHiveConvertor
block|{
specifier|private
specifier|static
specifier|final
name|ProtoToHiveConvertor
name|INSTANCE
init|=
operator|new
name|EnumConvertor
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
operator|(
operator|(
name|EnumValueDescriptor
operator|)
name|obj
operator|)
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|IdentityConvertor
implements|implements
name|ProtoToHiveConvertor
block|{
specifier|private
specifier|static
specifier|final
name|ProtoToHiveConvertor
name|INSTANCE
init|=
operator|new
name|IdentityConvertor
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
return|;
block|}
block|}
block|}
end_class

end_unit

