begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_comment
comment|/**  * TaskResult implementation.  * Note that different threads may be reading/writing this object  **/
end_comment

begin_class
specifier|public
class|class
name|TaskResult
block|{
specifier|protected
specifier|volatile
name|int
name|exitVal
decl_stmt|;
specifier|protected
specifier|volatile
name|boolean
name|runStatus
decl_stmt|;
specifier|private
specifier|volatile
name|Throwable
name|taskError
decl_stmt|;
specifier|public
name|TaskResult
parameter_list|()
block|{
name|exitVal
operator|=
operator|-
literal|1
expr_stmt|;
name|setRunning
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setExitVal
parameter_list|(
name|int
name|exitVal
parameter_list|)
block|{
name|this
operator|.
name|exitVal
operator|=
name|exitVal
expr_stmt|;
name|setRunning
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTaskError
parameter_list|(
name|Throwable
name|taskError
parameter_list|)
block|{
name|this
operator|.
name|taskError
operator|=
name|taskError
expr_stmt|;
block|}
specifier|public
name|void
name|setExitVal
parameter_list|(
name|int
name|exitVal
parameter_list|,
name|Throwable
name|taskError
parameter_list|)
block|{
name|setExitVal
argument_list|(
name|exitVal
argument_list|)
expr_stmt|;
name|setTaskError
argument_list|(
name|taskError
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getExitVal
parameter_list|()
block|{
return|return
name|exitVal
return|;
block|}
comment|/**    * @return may contain details of the error which caused the task to fail or null    */
specifier|public
name|Throwable
name|getTaskError
parameter_list|()
block|{
return|return
name|taskError
return|;
block|}
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|runStatus
return|;
block|}
specifier|public
name|void
name|setRunning
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|runStatus
operator|=
name|val
expr_stmt|;
block|}
block|}
end_class

end_unit

