begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_comment
comment|/**  * The class implements the method resolution for operators like (+, -, *, /, %, |,&, ^). The  * resolution logic is as follows:  * 1. The resolver first tries to find an exact parameter match.  * 2. If 1 fails then it returns the evaluate(Double, Double) method.  */
end_comment

begin_class
specifier|public
class|class
name|NumericOpMethodResolver
implements|implements
name|UDFMethodResolver
block|{
comment|/**    * The udfclass for which resolution is needed.    */
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|udfClass
decl_stmt|;
comment|/**    * Constuctor.    */
specifier|public
name|NumericOpMethodResolver
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|udfClass
parameter_list|)
block|{
name|this
operator|.
name|udfClass
operator|=
name|udfClass
expr_stmt|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.hive.ql.exec.UDFMethodResolver#getEvalMethod(java.util.List)    */
annotation|@
name|Override
specifier|public
name|Method
name|getEvalMethod
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|argClasses
parameter_list|)
throws|throws
name|AmbiguousMethodException
block|{
assert|assert
operator|(
name|argClasses
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|pClasses
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|argClasses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
name|Void
operator|.
name|class
operator|||
name|argClasses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|==
name|Void
operator|.
name|class
condition|)
block|{
name|pClasses
operator|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|pClasses
operator|.
name|add
argument_list|(
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|pClasses
operator|.
name|add
argument_list|(
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argClasses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
name|String
operator|.
name|class
operator|||
name|argClasses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|==
name|String
operator|.
name|class
condition|)
block|{
name|pClasses
operator|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|pClasses
operator|.
name|add
argument_list|(
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|pClasses
operator|.
name|add
argument_list|(
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argClasses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
name|argClasses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|pClasses
operator|=
name|argClasses
expr_stmt|;
block|}
else|else
block|{
name|pClasses
operator|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|pClasses
operator|.
name|add
argument_list|(
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|pClasses
operator|.
name|add
argument_list|(
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|Method
name|udfMethod
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|udfClass
operator|.
name|getMethods
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"evaluate"
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|argumentTypeInfos
init|=
name|m
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
operator|(
name|argumentTypeInfos
operator|.
name|length
operator|==
name|pClasses
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pClasses
operator|.
name|size
argument_list|()
operator|&&
name|match
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|accepted
init|=
name|ObjectInspectorUtils
operator|.
name|generalizePrimitive
argument_list|(
name|argumentTypeInfos
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|accepted
operator|!=
name|pClasses
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|match
condition|)
block|{
if|if
condition|(
name|udfMethod
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AmbiguousMethodException
argument_list|(
name|udfClass
argument_list|,
name|argClasses
argument_list|)
throw|;
block|}
else|else
block|{
name|udfMethod
operator|=
name|m
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|udfMethod
return|;
block|}
block|}
end_class

end_unit

