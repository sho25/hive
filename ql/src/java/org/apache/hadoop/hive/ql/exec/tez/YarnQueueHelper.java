begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
specifier|public
class|class
name|YarnQueueHelper
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|YarnQueueHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PERMISSION_PATH
init|=
literal|"/ws/v1/cluster/queues/%s/access?user=%s"
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|rmNodes
decl_stmt|;
specifier|private
name|int
name|lastKnownGoodUrl
decl_stmt|;
specifier|public
name|YarnQueueHelper
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|rmNodes
operator|=
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
literal|"yarn.resourcemanager.webapp.address"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|(
name|rmNodes
operator|!=
literal|null
operator|&&
name|rmNodes
operator|.
name|length
operator|>
literal|0
operator|)
argument_list|,
literal|"yarn.resourcemanager.webapp.address must be set to enable queue access checks"
argument_list|)
expr_stmt|;
name|lastKnownGoodUrl
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|checkQueueAccess
parameter_list|(
name|String
name|queueName
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|urlSuffix
init|=
name|String
operator|.
name|format
argument_list|(
name|PERMISSION_PATH
argument_list|,
name|queueName
argument_list|,
name|userName
argument_list|)
decl_stmt|;
comment|// TODO: if we ever use this endpoint for anything else, refactor cycling into a separate class.
name|int
name|urlIx
init|=
name|lastKnownGoodUrl
decl_stmt|,
name|lastUrlIx
init|=
operator|(
operator|(
name|urlIx
operator|==
literal|0
operator|)
condition|?
name|rmNodes
operator|.
name|length
else|:
name|urlIx
operator|)
operator|-
literal|1
decl_stmt|;
name|Exception
name|firstError
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|node
init|=
name|rmNodes
index|[
name|urlIx
index|]
decl_stmt|;
try|try
block|{
name|String
name|error
init|=
name|checkQueueAccessFromSingleRm
argument_list|(
literal|"http://"
operator|+
name|node
operator|+
name|urlSuffix
argument_list|)
decl_stmt|;
name|lastKnownGoodUrl
operator|=
name|urlIx
expr_stmt|;
if|if
condition|(
name|error
operator|==
literal|null
condition|)
return|return;
comment|// null error message here means the user has access.
throw|throw
operator|new
name|HiveException
argument_list|(
name|error
operator|.
name|isEmpty
argument_list|()
condition|?
operator|(
name|userName
operator|+
literal|" has no access to "
operator|+
name|queueName
operator|)
else|:
name|error
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot check queue access against RM "
operator|+
name|node
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstError
operator|==
literal|null
condition|)
block|{
name|firstError
operator|=
name|ex
expr_stmt|;
block|}
block|}
if|if
condition|(
name|urlIx
operator|==
name|lastUrlIx
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot access any RM service; first error"
argument_list|,
name|firstError
argument_list|)
throw|;
block|}
name|urlIx
operator|=
operator|(
name|urlIx
operator|+
literal|1
operator|)
operator|%
name|rmNodes
operator|.
name|length
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|checkQueueAccessFromSingleRm
parameter_list|(
name|String
name|urlString
parameter_list|)
throws|throws
name|IOException
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|urlString
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|?
name|getSecureConnection
argument_list|(
name|url
argument_list|)
else|:
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|int
name|statusCode
init|=
name|connection
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|statusCode
condition|)
block|{
case|case
name|HttpStatus
operator|.
name|SC_OK
case|:
return|return
name|processResponse
argument_list|(
name|connection
argument_list|)
return|;
case|case
name|HttpStatus
operator|.
name|SC_FORBIDDEN
case|:
block|{
comment|// Throw a special exception since it's usually a well-known misconfiguration.
throw|throw
operator|new
name|IOException
argument_list|(
name|handleUnexpectedStatusCode
argument_list|(
name|connection
argument_list|,
name|statusCode
argument_list|,
literal|"check that the "
operator|+
literal|"HiveServer2 principal is in the administrator list of the root YARN queue"
argument_list|)
argument_list|)
throw|;
block|}
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
name|handleUnexpectedStatusCode
argument_list|(
name|connection
argument_list|,
name|statusCode
argument_list|,
literal|null
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|processResponse
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|stream
init|=
name|connection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|handleUnexpectedStatusCode
argument_list|(
name|connection
argument_list|,
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
literal|"No input on successful API call"
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|jsonStr
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|stream
argument_list|)
decl_stmt|;
try|try
block|{
name|JSONObject
name|obj
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonStr
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|obj
operator|.
name|getBoolean
argument_list|(
literal|"allowed"
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
return|return
literal|null
return|;
name|String
name|diag
init|=
name|obj
operator|.
name|getString
argument_list|(
literal|"diagnostics"
argument_list|)
decl_stmt|;
return|return
name|diag
operator|==
literal|null
condition|?
literal|""
else|:
name|diag
return|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't parse "
operator|+
name|jsonStr
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/** Gets the Hadoop kerberos secure connection (not an SSL connection). */
specifier|private
name|HttpURLConnection
name|getSecureConnection
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
try|try
block|{
return|return
operator|new
name|AuthenticatedURL
argument_list|()
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|handleUnexpectedStatusCode
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|,
name|int
name|statusCode
parameter_list|,
name|String
name|errorStr
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We do no handle anything but OK for now. Again, we need a real client for this API.
comment|// TODO: handle 401 and return a new connection? nothing for now
name|InputStream
name|errorStream
init|=
name|connection
operator|.
name|getErrorStream
argument_list|()
decl_stmt|;
name|String
name|error
init|=
literal|"Received "
operator|+
name|statusCode
operator|+
operator|(
name|errorStr
operator|==
literal|null
condition|?
literal|""
else|:
operator|(
literal|" ("
operator|+
name|errorStr
operator|+
literal|")"
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|errorStream
operator|!=
literal|null
condition|)
block|{
name|error
operator|+=
literal|": "
operator|+
name|IOUtils
operator|.
name|toString
argument_list|(
name|errorStream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errorStream
operator|=
name|connection
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
if|if
condition|(
name|errorStream
operator|!=
literal|null
condition|)
block|{
name|error
operator|+=
literal|": "
operator|+
name|IOUtils
operator|.
name|toString
argument_list|(
name|errorStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|error
return|;
block|}
block|}
end_class

end_unit

