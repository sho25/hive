begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_class
specifier|public
class|class
name|UDFOPAnd
implements|implements
name|UDF
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.hive.ql.udf.UDFOPAnd"
argument_list|)
decl_stmt|;
specifier|public
name|UDFOPAnd
parameter_list|()
block|{   }
comment|// Three-value Boolean: NULL stands for unknown
specifier|public
name|Boolean
name|evaluate
parameter_list|(
name|Boolean
name|a
parameter_list|,
name|Boolean
name|b
parameter_list|)
block|{
name|Boolean
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|a
argument_list|)
operator|&&
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|b
argument_list|)
condition|)
block|{
name|r
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
if|if
condition|(
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|a
argument_list|)
operator|||
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|b
argument_list|)
condition|)
block|{
name|r
operator|=
name|Boolean
operator|.
name|FALSE
expr_stmt|;
block|}
comment|// LOG.info("evaluate(" + a + "," + b + ")=" + r);
return|return
name|r
return|;
block|}
block|}
end_class

end_unit

