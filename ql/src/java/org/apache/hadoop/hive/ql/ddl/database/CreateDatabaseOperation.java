begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|database
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * Operation process of creating a database.  */
end_comment

begin_class
specifier|public
class|class
name|CreateDatabaseOperation
extends|extends
name|DDLOperation
argument_list|<
name|CreateDatabaseDesc
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DATABASE_PATH_SUFFIX
init|=
literal|".db"
decl_stmt|;
specifier|public
name|CreateDatabaseOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|CreateDatabaseDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
name|Database
name|database
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|database
operator|.
name|setName
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|setDescription
argument_list|(
name|desc
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|setLocationUri
argument_list|(
name|desc
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|setParameters
argument_list|(
name|desc
operator|.
name|getDatabaseProperties
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|setOwnerName
argument_list|(
name|SessionState
operator|.
name|getUserFromAuthenticator
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
try|try
block|{
name|makeLocationQualified
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|,
name|desc
operator|.
name|getIfNotExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|ex
parameter_list|)
block|{
comment|//it would be better if AlreadyExistsException had an errorCode field....
throw|throw
operator|new
name|HiveException
argument_list|(
name|ex
argument_list|,
name|ErrorMsg
operator|.
name|DATABASE_ALREADY_EXISTS
argument_list|,
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|void
name|makeLocationQualified
parameter_list|(
name|Database
name|database
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|database
operator|.
name|isSetLocationUri
argument_list|()
condition|)
block|{
name|database
operator|.
name|setLocationUri
argument_list|(
name|Utilities
operator|.
name|getQualifiedPath
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Location is not set we utilize METASTOREWAREHOUSE together with database name
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|WAREHOUSE
argument_list|)
argument_list|,
name|database
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
name|DATABASE_PATH_SUFFIX
argument_list|)
decl_stmt|;
name|String
name|qualifiedPath
init|=
name|Utilities
operator|.
name|getQualifiedPath
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|database
operator|.
name|setLocationUri
argument_list|(
name|qualifiedPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

