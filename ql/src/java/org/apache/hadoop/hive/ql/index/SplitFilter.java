begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
operator|.
name|HiveInputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|SplitFilter
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SplitFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|IndexResult
name|indexResult
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxInputSize
decl_stmt|;
specifier|public
name|SplitFilter
parameter_list|(
name|IndexResult
name|indexResult
parameter_list|,
name|long
name|maxInputSize
parameter_list|)
block|{
name|this
operator|.
name|indexResult
operator|=
name|indexResult
expr_stmt|;
name|this
operator|.
name|maxInputSize
operator|=
name|maxInputSize
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|HiveInputSplit
argument_list|>
name|filter
parameter_list|(
name|HiveInputSplit
index|[]
name|splits
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|sumSplitLengths
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|HiveInputSplit
argument_list|>
name|newSplits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|splits
argument_list|,
operator|new
name|HiveInputSplitComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HiveInputSplit
name|split
range|:
name|splits
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"split start : "
operator|+
name|split
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"split end : "
operator|+
operator|(
name|split
operator|.
name|getStart
argument_list|()
operator|+
name|split
operator|.
name|getLength
argument_list|()
operator|)
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|indexResult
operator|.
name|contains
argument_list|(
name|split
argument_list|)
condition|)
block|{
name|HiveInputSplit
name|newSplit
init|=
name|split
decl_stmt|;
if|if
condition|(
name|isAdjustmentRequired
argument_list|(
name|newSplits
argument_list|,
name|split
argument_list|)
condition|)
block|{
name|newSplit
operator|=
name|adjustSplit
argument_list|(
name|split
argument_list|)
expr_stmt|;
block|}
name|sumSplitLengths
operator|+=
name|newSplit
operator|.
name|getLength
argument_list|()
expr_stmt|;
if|if
condition|(
name|sumSplitLengths
operator|>
name|maxInputSize
condition|)
block|{
name|String
name|messageTemplate
init|=
literal|"Size of data to read during a compact-index-based query "
operator|+
literal|"exceeded the maximum of %d set in %s"
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|messageTemplate
argument_list|,
name|maxInputSize
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_INDEX_COMPACT_QUERY_MAX_SIZE
operator|.
name|varname
argument_list|)
argument_list|)
throw|;
block|}
name|newSplits
operator|.
name|add
argument_list|(
name|newSplit
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to get metadata for input table split "
operator|+
name|split
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of input splits: {}, new input splits: {}, sum of split lengths: {}"
argument_list|,
name|splits
operator|.
name|length
argument_list|,
name|newSplits
operator|.
name|size
argument_list|()
argument_list|,
name|sumSplitLengths
argument_list|)
expr_stmt|;
return|return
name|newSplits
return|;
block|}
specifier|private
name|boolean
name|isAdjustmentRequired
parameter_list|(
name|List
argument_list|<
name|HiveInputSplit
argument_list|>
name|newSplits
parameter_list|,
name|HiveInputSplit
name|split
parameter_list|)
block|{
return|return
operator|(
name|split
operator|.
name|inputFormatClassName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"RCFile"
argument_list|)
operator|||
name|split
operator|.
name|inputFormatClassName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"SequenceFile"
argument_list|)
operator|)
operator|&&
name|split
operator|.
name|getStart
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|doesOverlap
argument_list|(
name|newSplits
argument_list|,
name|split
operator|.
name|getPath
argument_list|()
argument_list|,
name|adjustStart
argument_list|(
name|split
operator|.
name|getStart
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|doesOverlap
parameter_list|(
name|List
argument_list|<
name|HiveInputSplit
argument_list|>
name|newSplits
parameter_list|,
name|Path
name|path
parameter_list|,
name|long
name|start
parameter_list|)
block|{
if|if
condition|(
name|newSplits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|HiveInputSplit
name|lastSplit
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|newSplits
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastSplit
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|lastSplit
operator|.
name|getStart
argument_list|()
operator|+
name|lastSplit
operator|.
name|getLength
argument_list|()
operator|>
name|start
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|long
name|adjustStart
parameter_list|(
name|long
name|start
parameter_list|)
block|{
return|return
name|start
operator|>
name|SequenceFile
operator|.
name|SYNC_INTERVAL
condition|?
name|start
operator|-
name|SequenceFile
operator|.
name|SYNC_INTERVAL
else|:
literal|0
return|;
block|}
specifier|private
name|HiveInputSplit
name|adjustSplit
parameter_list|(
name|HiveInputSplit
name|split
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|adjustedStart
init|=
name|adjustStart
argument_list|(
name|split
operator|.
name|getStart
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|HiveInputSplit
argument_list|(
operator|new
name|FileSplit
argument_list|(
name|split
operator|.
name|getPath
argument_list|()
argument_list|,
name|adjustedStart
argument_list|,
name|split
operator|.
name|getStart
argument_list|()
operator|-
name|adjustedStart
operator|+
name|split
operator|.
name|getLength
argument_list|()
argument_list|,
name|split
operator|.
name|getLocations
argument_list|()
argument_list|)
argument_list|,
name|split
operator|.
name|inputFormatClassName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
class|class
name|HiveInputSplitComparator
implements|implements
name|Comparator
argument_list|<
name|HiveInputSplit
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|HiveInputSplit
name|o1
parameter_list|,
name|HiveInputSplit
name|o2
parameter_list|)
block|{
name|int
name|pathCompare
init|=
name|comparePath
argument_list|(
name|o1
operator|.
name|getPath
argument_list|()
argument_list|,
name|o2
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathCompare
operator|!=
literal|0
condition|)
block|{
return|return
name|pathCompare
return|;
block|}
return|return
name|Long
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getStart
argument_list|()
argument_list|,
name|o2
operator|.
name|getStart
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|int
name|comparePath
parameter_list|(
name|Path
name|p1
parameter_list|,
name|Path
name|p2
parameter_list|)
block|{
return|return
name|p1
operator|.
name|compareTo
argument_list|(
name|p2
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

