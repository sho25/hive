begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|sqlstd
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzPluginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_class
specifier|public
class|class
name|RevokePrivAuthUtils
block|{
specifier|public
specifier|static
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|authorizeAndGetRevokePrivileges
parameter_list|(
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|principals
parameter_list|,
name|List
argument_list|<
name|HivePrivilege
argument_list|>
name|hivePrivileges
parameter_list|,
name|HivePrivilegeObject
name|hivePrivObject
parameter_list|,
name|boolean
name|grantOption
parameter_list|,
name|IMetaStoreClient
name|mClient
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|matchingPrivs
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|errMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|HivePrincipal
name|principal
range|:
name|principals
control|)
block|{
comment|// get metastore/thrift privilege object for this principal and object, not looking at
comment|// privileges obtained indirectly via roles
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|msObjPrivs
decl_stmt|;
try|try
block|{
name|msObjPrivs
operator|=
name|mClient
operator|.
name|list_privileges
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|AuthorizationUtils
operator|.
name|getThriftPrincipalType
argument_list|(
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|SQLAuthorizationUtils
operator|.
name|getThriftHiveObjectRef
argument_list|(
name|hivePrivObject
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveAuthzPluginException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveAuthzPluginException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// the resulting privileges need to be filtered on privilege type and
comment|// username
comment|// create a Map to capture object privileges corresponding to privilege
comment|// type
name|Map
argument_list|<
name|String
argument_list|,
name|HiveObjectPrivilege
argument_list|>
name|priv2privObj
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HiveObjectPrivilege
name|msObjPriv
range|:
name|msObjPrivs
control|)
block|{
name|PrivilegeGrantInfo
name|grantInfo
init|=
name|msObjPriv
operator|.
name|getGrantInfo
argument_list|()
decl_stmt|;
comment|// check if the grantor matches current user
if|if
condition|(
name|grantInfo
operator|.
name|getGrantor
argument_list|()
operator|!=
literal|null
operator|&&
name|grantInfo
operator|.
name|getGrantor
argument_list|()
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
operator|&&
name|grantInfo
operator|.
name|getGrantorType
argument_list|()
operator|==
name|PrincipalType
operator|.
name|USER
condition|)
block|{
comment|// add to the map
name|priv2privObj
operator|.
name|put
argument_list|(
name|grantInfo
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|msObjPriv
argument_list|)
expr_stmt|;
block|}
comment|// else skip this one
block|}
comment|// find the privileges that we are looking for
for|for
control|(
name|HivePrivilege
name|hivePrivilege
range|:
name|hivePrivileges
control|)
block|{
name|HiveObjectPrivilege
name|matchedPriv
init|=
name|priv2privObj
operator|.
name|get
argument_list|(
name|hivePrivilege
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchedPriv
operator|!=
literal|null
condition|)
block|{
name|matchingPrivs
operator|.
name|add
argument_list|(
name|matchedPriv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errMsg
operator|.
name|append
argument_list|(
literal|"Cannot find privilege "
argument_list|)
operator|.
name|append
argument_list|(
name|hivePrivilege
argument_list|)
operator|.
name|append
argument_list|(
literal|" for "
argument_list|)
operator|.
name|append
argument_list|(
name|principal
argument_list|)
operator|.
name|append
argument_list|(
literal|" on "
argument_list|)
operator|.
name|append
argument_list|(
name|hivePrivObject
argument_list|)
operator|.
name|append
argument_list|(
literal|" granted by "
argument_list|)
operator|.
name|append
argument_list|(
name|userName
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|errMsg
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveAccessControlException
argument_list|(
name|errMsg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|matchingPrivs
return|;
block|}
block|}
end_class

end_unit

