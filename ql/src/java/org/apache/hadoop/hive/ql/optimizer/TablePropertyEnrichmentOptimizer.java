begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|PreOrderWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_comment
comment|/**  * Optimizer that updates TableScanOperators' Table-references with properties that might be  * updated/pre-fetched by initializing the table's SerDe.  * E.g. AvroSerDes can now prefetch schemas from schema-urls and update the table-properties directly.  */
end_comment

begin_class
class|class
name|TablePropertyEnrichmentOptimizer
extends|extends
name|Transform
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TablePropertyEnrichmentOptimizer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
class|class
name|WalkerCtx
implements|implements
name|NodeProcessorCtx
block|{
name|Configuration
name|conf
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|serdeClassesUnderConsideration
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|WalkerCtx
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|serdeClassesUnderConsideration
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_OPTIMIZE_TABLE_PROPERTIES_FROM_SERDE_LIST
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"TablePropertyEnrichmentOptimizer considers these SerDe classes:"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|className
range|:
name|serdeClassesUnderConsideration
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Retrieves the table properties as well as the properties from Serde.    */
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getTableParameters
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|originalTableParameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|Properties
name|tableMetadata
init|=
name|MetaStoreUtils
operator|.
name|getTableMetadata
argument_list|(
name|table
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|property
range|:
name|tableMetadata
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|originalTableParameters
operator|.
name|containsKey
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|originalTableParameters
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|tableMetadata
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|originalTableParameters
return|;
block|}
specifier|private
specifier|static
class|class
name|Processor
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TableScanOperator
name|tsOp
init|=
operator|(
name|TableScanOperator
operator|)
name|nd
decl_stmt|;
name|WalkerCtx
name|context
init|=
operator|(
name|WalkerCtx
operator|)
name|procCtx
decl_stmt|;
name|TableScanDesc
name|tableScanDesc
init|=
name|tsOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|tsOp
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
operator|.
name|getTTable
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|originalTableParameters
init|=
name|getTableParameters
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Original Table parameters: "
operator|+
name|originalTableParameters
argument_list|)
expr_stmt|;
block|}
name|Properties
name|clonedTableParameters
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|clonedTableParameters
operator|.
name|putAll
argument_list|(
name|originalTableParameters
argument_list|)
expr_stmt|;
name|String
name|deserializerClassName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|deserializerClassName
operator|=
name|tableScanDesc
operator|.
name|getTableMetadata
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
expr_stmt|;
name|Deserializer
name|deserializer
init|=
name|ReflectionUtil
operator|.
name|newInstance
argument_list|(
name|context
operator|.
name|conf
operator|.
name|getClassByName
argument_list|(
name|deserializerClassName
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Deserializer
operator|.
name|class
argument_list|)
argument_list|,
name|context
operator|.
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|serdeClassesUnderConsideration
operator|.
name|contains
argument_list|(
name|deserializerClassName
argument_list|)
condition|)
block|{
name|deserializer
operator|.
name|initialize
argument_list|(
name|context
operator|.
name|conf
argument_list|,
name|clonedTableParameters
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SerDe init succeeded for class: "
operator|+
name|deserializerClassName
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|property
range|:
name|clonedTableParameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|property
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|originalTableParameters
operator|.
name|get
argument_list|(
name|property
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resolving changed parameters! key="
operator|+
name|property
operator|.
name|getKey
argument_list|()
operator|+
literal|", value="
operator|+
name|property
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|property
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|property
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping prefetch for "
operator|+
name|deserializerClassName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"SerDe init failed for SerDe class=="
operator|+
name|deserializerClassName
operator|+
literal|". Didn't change table-properties"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|nd
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TablePropertyEnrichmentOptimizer::transform()."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|TableScanOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
operator|new
name|Processor
argument_list|()
argument_list|)
expr_stmt|;
name|WalkerCtx
name|context
init|=
operator|new
name|WalkerCtx
argument_list|(
name|pctx
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
literal|null
argument_list|,
name|opRules
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pctx
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|GraphWalker
name|walker
init|=
operator|new
name|PreOrderWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|walker
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TablePropertyEnrichmentOptimizer::transform() complete!"
argument_list|)
expr_stmt|;
return|return
name|pctx
return|;
block|}
block|}
end_class

end_unit

