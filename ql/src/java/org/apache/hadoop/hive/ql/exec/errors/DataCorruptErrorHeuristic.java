begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|errors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Detects the condition where there is a error with one of the input files in  * the query.  *  * Conditions to check:  * 1. EOFException in log  * 2. A line indicating the split file in the log. This is needed to  *    generate the proper error message.  *  */
end_comment

begin_class
specifier|public
class|class
name|DataCorruptErrorHeuristic
extends|extends
name|RegexErrorHeuristic
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SPLIT_REGEX
init|=
literal|"split:\\s*([^\\s]+)"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXCEPTION_REGEX
init|=
literal|"EOFException"
decl_stmt|;
specifier|public
name|DataCorruptErrorHeuristic
parameter_list|()
block|{
name|setQueryRegex
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
name|getLogRegexes
argument_list|()
operator|.
name|add
argument_list|(
name|SPLIT_REGEX
argument_list|)
expr_stmt|;
name|getLogRegexes
argument_list|()
operator|.
name|add
argument_list|(
name|EXCEPTION_REGEX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ErrorAndSolution
name|getErrorAndSolution
parameter_list|()
block|{
name|ErrorAndSolution
name|es
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getQueryMatches
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|rll
init|=
name|getRegexToLogLines
argument_list|()
decl_stmt|;
if|if
condition|(
name|rll
operator|.
name|get
argument_list|(
name|EXCEPTION_REGEX
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|rll
operator|.
name|get
argument_list|(
name|SPLIT_REGEX
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// There should only be a single split line...
name|String
name|splitLogLine
init|=
name|rll
operator|.
name|get
argument_list|(
name|SPLIT_REGEX
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Extract only 'split: hdfs://...'
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|SPLIT_REGEX
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|splitLogLine
argument_list|)
decl_stmt|;
name|m
operator|.
name|find
argument_list|()
expr_stmt|;
name|String
name|splitStr
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|es
operator|=
operator|new
name|ErrorAndSolution
argument_list|(
literal|"Data file "
operator|+
name|splitStr
operator|+
literal|" is corrupted."
argument_list|,
literal|"Replace file. i.e. by re-running the query that produced the "
operator|+
literal|"source table / partition."
argument_list|)
expr_stmt|;
block|}
block|}
name|reset
argument_list|()
expr_stmt|;
return|return
name|es
return|;
block|}
block|}
end_class

end_unit

