begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|monitoring
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|FileSystemCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|TezCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|DAGClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|StatusGetOpts
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|monitoring
operator|.
name|Constants
operator|.
name|SEPARATOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|monitoring
operator|.
name|TezJobMonitor
operator|.
name|getCounterValueByGroupName
import|;
end_import

begin_class
specifier|public
class|class
name|FSCountersSummary
implements|implements
name|PrintSummary
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FORMATTING_PATTERN
init|=
literal|"%10s %15s %13s %18s %18s %13s"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEADER
init|=
name|String
operator|.
name|format
argument_list|(
name|FORMATTING_PATTERN
argument_list|,
literal|"VERTICES"
argument_list|,
literal|"BYTES_READ"
argument_list|,
literal|"READ_OPS"
argument_list|,
literal|"LARGE_READ_OPS"
argument_list|,
literal|"BYTES_WRITTEN"
argument_list|,
literal|"WRITE_OPS"
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Progress
argument_list|>
name|progressMap
decl_stmt|;
specifier|private
name|DAGClient
name|dagClient
decl_stmt|;
name|FSCountersSummary
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Progress
argument_list|>
name|progressMap
parameter_list|,
name|DAGClient
name|dagClient
parameter_list|)
block|{
name|this
operator|.
name|progressMap
operator|=
name|progressMap
expr_stmt|;
name|this
operator|.
name|dagClient
operator|=
name|dagClient
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|print
parameter_list|(
name|SessionState
operator|.
name|LogHelper
name|console
parameter_list|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"FileSystem Counters Summary"
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|progressMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|StatusGetOpts
argument_list|>
name|statusOptions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|statusOptions
operator|.
name|add
argument_list|(
name|StatusGetOpts
operator|.
name|GET_COUNTERS
argument_list|)
expr_stmt|;
comment|// Assuming FileSystem.getAllStatistics() returns all schemes that are accessed on task side
comment|// as well. If not, we need a way to get all the schemes that are accessed by the tez task/llap.
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
specifier|final
name|String
name|scheme
init|=
name|statistics
operator|.
name|getScheme
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Scheme: "
operator|+
name|scheme
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|HEADER
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|vertexName
range|:
name|keys
control|)
block|{
name|TezCounters
name|vertexCounters
init|=
name|vertexCounters
argument_list|(
name|statusOptions
argument_list|,
name|vertexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|vertexCounters
operator|!=
literal|null
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
name|summary
argument_list|(
name|scheme
argument_list|,
name|vertexName
argument_list|,
name|vertexCounters
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|console
operator|.
name|printInfo
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|summary
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|vertexName
parameter_list|,
name|TezCounters
name|vertexCounters
parameter_list|)
block|{
specifier|final
name|String
name|counterGroup
init|=
name|FileSystemCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|long
name|bytesRead
init|=
name|getCounterValueByGroupName
argument_list|(
name|vertexCounters
argument_list|,
name|counterGroup
argument_list|,
name|scheme
operator|+
literal|"_"
operator|+
name|FileSystemCounter
operator|.
name|BYTES_READ
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|bytesWritten
init|=
name|getCounterValueByGroupName
argument_list|(
name|vertexCounters
argument_list|,
name|counterGroup
argument_list|,
name|scheme
operator|+
literal|"_"
operator|+
name|FileSystemCounter
operator|.
name|BYTES_WRITTEN
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|readOps
init|=
name|getCounterValueByGroupName
argument_list|(
name|vertexCounters
argument_list|,
name|counterGroup
argument_list|,
name|scheme
operator|+
literal|"_"
operator|+
name|FileSystemCounter
operator|.
name|READ_OPS
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|largeReadOps
init|=
name|getCounterValueByGroupName
argument_list|(
name|vertexCounters
argument_list|,
name|counterGroup
argument_list|,
name|scheme
operator|+
literal|"_"
operator|+
name|FileSystemCounter
operator|.
name|LARGE_READ_OPS
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|writeOps
init|=
name|getCounterValueByGroupName
argument_list|(
name|vertexCounters
argument_list|,
name|counterGroup
argument_list|,
name|scheme
operator|+
literal|"_"
operator|+
name|FileSystemCounter
operator|.
name|WRITE_OPS
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|FORMATTING_PATTERN
argument_list|,
name|vertexName
argument_list|,
name|Utilities
operator|.
name|humanReadableByteCount
argument_list|(
name|bytesRead
argument_list|)
argument_list|,
name|readOps
argument_list|,
name|largeReadOps
argument_list|,
name|Utilities
operator|.
name|humanReadableByteCount
argument_list|(
name|bytesWritten
argument_list|)
argument_list|,
name|writeOps
argument_list|)
return|;
block|}
specifier|private
name|TezCounters
name|vertexCounters
parameter_list|(
name|Set
argument_list|<
name|StatusGetOpts
argument_list|>
name|statusOptions
parameter_list|,
name|String
name|vertexName
parameter_list|)
block|{
try|try
block|{
return|return
name|dagClient
operator|.
name|getVertexStatus
argument_list|(
name|vertexName
argument_list|,
name|statusOptions
argument_list|)
operator|.
name|getVertexCounters
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|TezException
name|e
parameter_list|)
block|{
comment|// best attempt, shouldn't really kill DAG for this
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

