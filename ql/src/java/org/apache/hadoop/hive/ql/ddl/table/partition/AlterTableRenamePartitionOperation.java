begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AlterTableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|ReplUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ReplicationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
operator|.
name|Utils
import|;
end_import

begin_comment
comment|/**  * Operation process of renaming a partition of a table.  */
end_comment

begin_class
specifier|public
class|class
name|AlterTableRenamePartitionOperation
extends|extends
name|DDLOperation
block|{
specifier|private
specifier|final
name|AlterTableRenamePartitionDesc
name|desc
decl_stmt|;
specifier|public
name|AlterTableRenamePartitionOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|AlterTableRenamePartitionDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
name|String
name|tableName
init|=
name|desc
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|oldPartSpec
init|=
name|desc
operator|.
name|getOldPartSpec
argument_list|()
decl_stmt|;
name|ReplicationSpec
name|replicationSpec
init|=
name|desc
operator|.
name|getReplicationSpec
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|AlterTableUtils
operator|.
name|allowOperationInReplicationScope
argument_list|(
name|context
operator|.
name|getDb
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|oldPartSpec
argument_list|,
name|replicationSpec
argument_list|)
condition|)
block|{
comment|// no rename, the table is missing either due to drop/rename which follows the current rename.
comment|// or the existing table is newer than our update.
name|LOG
operator|.
name|debug
argument_list|(
literal|"DDLTask: Rename Partition is skipped as table {} / partition {} is newer than update"
argument_list|,
name|tableName
argument_list|,
name|FileUtils
operator|.
name|makePartName
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|oldPartSpec
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|oldPartSpec
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|String
index|[]
name|names
init|=
name|Utilities
operator|.
name|getDbTableName
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|Utils
operator|.
name|isBootstrapDumpInProgress
argument_list|(
name|context
operator|.
name|getDb
argument_list|()
argument_list|,
name|names
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"DDLTask: Rename Partition not allowed as bootstrap dump in progress"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Rename Partition: Not allowed as bootstrap dump in progress"
argument_list|)
throw|;
block|}
name|Table
name|tbl
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Partition
name|oldPart
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getPartition
argument_list|(
name|tbl
argument_list|,
name|oldPartSpec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldPart
operator|==
literal|null
condition|)
block|{
name|String
name|partName
init|=
name|FileUtils
operator|.
name|makePartName
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|oldPartSpec
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|oldPartSpec
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Rename partition: source partition ["
operator|+
name|partName
operator|+
literal|"] does not exist."
argument_list|)
throw|;
block|}
name|Partition
name|part
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getPartition
argument_list|(
name|tbl
argument_list|,
name|oldPartSpec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|part
operator|.
name|setValues
argument_list|(
name|desc
operator|.
name|getNewPartSpec
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|writeId
init|=
name|desc
operator|.
name|getWriteId
argument_list|()
decl_stmt|;
if|if
condition|(
name|replicationSpec
operator|!=
literal|null
operator|&&
name|replicationSpec
operator|.
name|isMigratingToTxnTable
argument_list|()
condition|)
block|{
name|Long
name|tmpWriteId
init|=
name|ReplUtils
operator|.
name|getMigrationCurrentTblWriteId
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpWriteId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"DDLTask : Write id is not set in the config by open txn task for migration"
argument_list|)
throw|;
block|}
name|writeId
operator|=
name|tmpWriteId
expr_stmt|;
block|}
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|renamePartition
argument_list|(
name|tbl
argument_list|,
name|oldPartSpec
argument_list|,
name|part
argument_list|,
name|writeId
argument_list|)
expr_stmt|;
name|Partition
name|newPart
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getPartition
argument_list|(
name|tbl
argument_list|,
name|desc
operator|.
name|getNewPartSpec
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|context
operator|.
name|getWork
argument_list|()
operator|.
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|oldPart
argument_list|)
argument_list|)
expr_stmt|;
comment|// We've already obtained a lock on the table, don't lock the partition too
name|DDLUtils
operator|.
name|addIfAbsentByName
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|newPart
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

