begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapredContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|SparkRecordHandler
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
name|SparkRecordHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|PerfLogger
name|perfLogger
init|=
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SparkRecordHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// used to log memory usage periodically
specifier|private
specifier|final
name|MemoryMXBean
name|memoryMXBean
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
decl_stmt|;
specifier|protected
name|JobConf
name|jc
decl_stmt|;
specifier|protected
name|OutputCollector
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|oc
decl_stmt|;
specifier|protected
name|Reporter
name|rp
decl_stmt|;
specifier|protected
name|boolean
name|abort
init|=
literal|false
decl_stmt|;
comment|/**    * Using volatile for rowNumber and logThresholdInterval instead of    *  Atomic even though they are used in non-atomic context. This is because    *  we know that they will be updated only by a single thread at a time and    *  there is no contention on these variables.    */
specifier|private
specifier|volatile
name|long
name|rowNumber
init|=
literal|0
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|logThresholdInterval
init|=
literal|15000
decl_stmt|;
name|boolean
name|anyRow
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxLogThresholdInterval
init|=
literal|900000
decl_stmt|;
comment|// We use this ScheduledFuture while closing to cancel any logger thread that is scheduled.
specifier|private
name|ScheduledFuture
name|memoryAndRowLogFuture
decl_stmt|;
specifier|private
specifier|final
name|ScheduledThreadPoolExecutor
name|memoryAndRowLogExecutor
init|=
name|getMemoryAndRowLogExecutor
argument_list|()
decl_stmt|;
specifier|private
name|ScheduledThreadPoolExecutor
name|getMemoryAndRowLogExecutor
parameter_list|()
block|{
name|ScheduledThreadPoolExecutor
name|executor
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"MemoryAndRowInfoLogger"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setUncaughtExceptionHandler
argument_list|(
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
lambda|->
name|LOG
operator|.
name|error
argument_list|(
name|t
operator|+
literal|" throws exception: "
operator|+
name|e
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ThreadPoolExecutor
operator|.
name|DiscardPolicy
argument_list|()
argument_list|)
decl_stmt|;
name|executor
operator|.
name|setExecuteExistingDelayedTasksAfterShutdownPolicy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
specifier|public
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|init
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|OutputCollector
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|Exception
block|{
name|jc
operator|=
name|job
expr_stmt|;
name|MapredContext
operator|.
name|init
argument_list|(
literal|false
argument_list|,
operator|new
name|JobConf
argument_list|(
name|jc
argument_list|)
argument_list|)
expr_stmt|;
name|MapredContext
operator|.
name|get
argument_list|()
operator|.
name|setReporter
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
name|oc
operator|=
name|output
expr_stmt|;
name|rp
operator|=
name|reporter
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"maximum memory = "
operator|+
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|MemoryInfoLogger
name|memoryInfoLogger
init|=
operator|new
name|MemoryInfoLogger
argument_list|()
decl_stmt|;
name|memoryInfoLogger
operator|.
name|run
argument_list|()
expr_stmt|;
name|Utilities
operator|.
name|tryLoggingClassPaths
argument_list|(
name|job
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
comment|/**    * Process row with key and single value.    */
specifier|public
specifier|abstract
name|void
name|processRow
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Process row with key and value collection.    */
specifier|public
specifier|abstract
parameter_list|<
name|E
parameter_list|>
name|void
name|processRow
parameter_list|(
name|Object
name|key
parameter_list|,
name|Iterator
argument_list|<
name|E
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Increments rowNumber to indicate # of rows processed.    */
name|void
name|incrementRowNumber
parameter_list|()
block|{
operator|++
name|rowNumber
expr_stmt|;
block|}
comment|/**    * Logs every 'logThresholdInterval' milliseconds and doubles the    * logThresholdInterval value after each time it logs until it    * reaches maxLogThresholdInterval.    * */
class|class
name|MemoryInfoLogger
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|anyRow
condition|)
block|{
name|logThresholdInterval
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxLogThresholdInterval
argument_list|,
literal|2
operator|*
name|logThresholdInterval
argument_list|)
expr_stmt|;
name|logMemoryInfo
argument_list|()
expr_stmt|;
block|}
name|memoryAndRowLogFuture
operator|=
name|memoryAndRowLogExecutor
operator|.
name|schedule
argument_list|(
operator|new
name|MemoryInfoLogger
argument_list|()
argument_list|,
name|logThresholdInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|memoryAndRowLogExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|memoryAndRowLogFuture
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|memoryAndRowLogExecutor
operator|.
name|awaitTermination
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|memoryAndRowLogExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|memoryAndRowLogExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logMemoryInfo
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|abstract
name|boolean
name|getDone
parameter_list|()
function_decl|;
comment|/**    * Logger information to be logged at the end.    */
specifier|private
name|void
name|logMemoryInfo
parameter_list|()
block|{
name|long
name|usedMemory
init|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed "
operator|+
name|rowNumber
operator|+
literal|" rows: used memory = "
operator|+
name|usedMemory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAbort
parameter_list|()
block|{
return|return
name|abort
return|;
block|}
specifier|public
name|void
name|setAbort
parameter_list|(
name|boolean
name|abort
parameter_list|)
block|{
name|this
operator|.
name|abort
operator|=
name|abort
expr_stmt|;
block|}
block|}
end_class

end_unit

