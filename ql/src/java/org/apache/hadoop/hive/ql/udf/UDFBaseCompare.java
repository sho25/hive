begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|UDFBaseCompare
implements|implements
name|UDF
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UDFBaseCompare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|UDFBaseCompare
parameter_list|()
block|{   }
specifier|public
specifier|abstract
name|Boolean
name|evaluate
parameter_list|(
name|Double
name|a
parameter_list|,
name|Double
name|b
parameter_list|)
function_decl|;
comment|/** If one of the argument is a String and the other is a Number, convert    *  String to double and the Number to double, and then compare.    */
specifier|public
name|Boolean
name|evaluate
parameter_list|(
name|String
name|a
parameter_list|,
name|Number
name|b
parameter_list|)
block|{
name|Double
name|aDouble
init|=
literal|null
decl_stmt|;
try|try
block|{
name|aDouble
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing: aDouble will be null.
block|}
return|return
name|evaluate
argument_list|(
name|aDouble
argument_list|,
operator|new
name|Double
argument_list|(
name|b
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** If one of the argument is a String and the other is a Number, convert    *  String to double and the Number to double, and then compare.    */
specifier|public
name|Boolean
name|evaluate
parameter_list|(
name|Number
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
name|Double
name|bDouble
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bDouble
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing: bDouble will be null.
block|}
return|return
name|evaluate
argument_list|(
operator|new
name|Double
argument_list|(
name|a
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|,
name|bDouble
argument_list|)
return|;
block|}
block|}
end_class

end_unit

