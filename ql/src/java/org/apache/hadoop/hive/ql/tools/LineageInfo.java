begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|CommonTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTEventProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|DefaultASTEventDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|DefaultASTProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_comment
comment|/**  *   * This class prints out the lineage info.   * It takes sql as input and prints lineage info.  * Currently this prints only input and output tables for a given sql.   *  Later we can expand to add join tables etc.  *  */
end_comment

begin_class
specifier|public
class|class
name|LineageInfo
implements|implements
name|ASTEventProcessor
block|{
comment|/** 	 * Stores input tables in sql 	 */
name|TreeSet
argument_list|<
name|String
argument_list|>
name|inputTableList
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** 	 * Stores output tables in sql 	 */
name|TreeSet
argument_list|<
name|String
argument_list|>
name|OutputTableList
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** 	 *  	 * @return java.util.TreeSet  	 */
specifier|public
name|TreeSet
argument_list|<
name|String
argument_list|>
name|getInputTableList
parameter_list|()
block|{
return|return
name|inputTableList
return|;
block|}
comment|/** 	 * @return java.util.TreeSet 	 */
specifier|public
name|TreeSet
argument_list|<
name|String
argument_list|>
name|getOutputTableList
parameter_list|()
block|{
return|return
name|OutputTableList
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.apache.hadoop.hive.ql.parse.ASTEventProcessor#process(org.antlr.runtime.tree.CommonTree) 	 */
specifier|public
name|void
name|process
parameter_list|(
name|CommonTree
name|pt
parameter_list|)
block|{
switch|switch
condition|(
name|pt
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_DESTINATION
case|:
block|{
if|if
condition|(
name|pt
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TAB
condition|)
block|{
name|OutputTableList
operator|.
name|add
argument_list|(
name|pt
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|HiveParser
operator|.
name|TOK_FROM
case|:
block|{
name|CommonTree
name|tabRef
init|=
operator|(
name|CommonTree
operator|)
name|pt
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|table_name
init|=
name|tabRef
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|inputTableList
operator|.
name|add
argument_list|(
name|table_name
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
comment|/** 	 *  parses given query and gets the lineage info. 	 * @param query 	 * @throws ParseException 	 */
specifier|public
name|void
name|getLineageInfo
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|ParseException
block|{
comment|/* 		 *  Get the AST tree 		 */
name|ParseDriver
name|pd
init|=
operator|new
name|ParseDriver
argument_list|()
decl_stmt|;
name|CommonTree
name|tree
init|=
name|pd
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|tree
operator|.
name|getToken
argument_list|()
operator|==
literal|null
operator|)
operator|&&
operator|(
name|tree
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|tree
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/* 		 * initialize Event Processor and dispatcher. 		 */
name|inputTableList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|OutputTableList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|DefaultASTEventDispatcher
name|dispatcher
init|=
operator|new
name|DefaultASTEventDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ASTEvent
operator|.
name|SRC_TABLE
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ASTEvent
operator|.
name|DESTINATION
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|DefaultASTProcessor
name|eventProcessor
init|=
operator|new
name|DefaultASTProcessor
argument_list|()
decl_stmt|;
name|eventProcessor
operator|.
name|setDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|eventProcessor
operator|.
name|process
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
throws|,
name|SemanticException
block|{
name|String
name|query
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|LineageInfo
name|lep
init|=
operator|new
name|LineageInfo
argument_list|()
decl_stmt|;
name|lep
operator|.
name|getLineageInfo
argument_list|(
name|query
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tab
range|:
name|lep
operator|.
name|getInputTableList
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"InputTable="
operator|+
name|tab
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|tab
range|:
name|lep
operator|.
name|getOutputTableList
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"OutputTable="
operator|+
name|tab
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

