begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_class
specifier|public
class|class
name|ProjectionPusher
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProjectionPusher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PartitionDesc
argument_list|>
name|pathToPartitionInfo
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|PartitionDesc
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * MapWork is the Hive object which describes input files,    * columns projections, and filters.    */
specifier|private
name|MapWork
name|mapWork
decl_stmt|;
comment|/**    * Sets the mapWork variable based on the current JobConf in order to get all partitions.    *    * @param job    */
specifier|private
name|void
name|updateMrWork
parameter_list|(
specifier|final
name|JobConf
name|job
parameter_list|)
block|{
specifier|final
name|String
name|plan
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|job
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PLAN
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapWork
operator|==
literal|null
operator|&&
name|plan
operator|!=
literal|null
operator|&&
name|plan
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mapWork
operator|=
name|Utilities
operator|.
name|getMapWork
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|pathToPartitionInfo
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PartitionDesc
argument_list|>
name|entry
range|:
name|mapWork
operator|.
name|getPathToPartitionInfo
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// key contains scheme (such as pfile://) and we want only the path portion fix in HIVE-6366
name|pathToPartitionInfo
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Deprecated
comment|// Uses deprecated methods on ColumnProjectionUtils
specifier|private
name|void
name|pushProjectionsAndFilters
parameter_list|(
specifier|final
name|JobConf
name|jobConf
parameter_list|,
specifier|final
name|String
name|splitPath
parameter_list|,
specifier|final
name|String
name|splitPathWithNoSchema
parameter_list|)
block|{
if|if
condition|(
name|mapWork
operator|==
literal|null
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|mapWork
operator|.
name|getPathToAliases
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|aliases
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|iterator
init|=
name|mapWork
operator|.
name|getPathToAliases
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Entry
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|String
name|key
init|=
operator|new
name|Path
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|splitPath
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|||
name|splitPathWithNoSchema
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|val
range|:
name|list
control|)
block|{
name|aliases
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
specifier|final
name|String
name|alias
range|:
name|aliases
control|)
block|{
specifier|final
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
init|=
name|mapWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|!=
literal|null
operator|&&
name|op
operator|instanceof
name|TableScanOperator
condition|)
block|{
specifier|final
name|TableScanOperator
name|tableScan
init|=
operator|(
name|TableScanOperator
operator|)
name|op
decl_stmt|;
comment|// push down projections
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|tableScan
operator|.
name|getNeededColumnIDs
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|ColumnProjectionUtils
operator|.
name|appendReadColumnIDs
argument_list|(
name|jobConf
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ColumnProjectionUtils
operator|.
name|setFullyReadColumns
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
block|}
name|pushFilters
argument_list|(
name|jobConf
argument_list|,
name|tableScan
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|pushFilters
parameter_list|(
specifier|final
name|JobConf
name|jobConf
parameter_list|,
specifier|final
name|TableScanOperator
name|tableScan
parameter_list|)
block|{
specifier|final
name|TableScanDesc
name|scanDesc
init|=
name|tableScan
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|scanDesc
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not pushing filters because TableScanDesc is null"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// construct column name list for reference by filter push down
name|Utilities
operator|.
name|setColumnNameList
argument_list|(
name|jobConf
argument_list|,
name|tableScan
argument_list|)
expr_stmt|;
comment|// push down filters
specifier|final
name|ExprNodeGenericFuncDesc
name|filterExpr
init|=
name|scanDesc
operator|.
name|getFilterExpr
argument_list|()
decl_stmt|;
if|if
condition|(
name|filterExpr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not pushing filters because FilterExpr is null"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|String
name|filterText
init|=
name|filterExpr
operator|.
name|getExprString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|filterExprSerialized
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|filterExpr
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_TEXT_CONF_STR
argument_list|,
name|filterText
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExprSerialized
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// Uses deprecated methods on ColumnProjectionUtils
specifier|public
name|JobConf
name|pushProjectionsAndFilters
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|updateMrWork
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
comment|// TODO: refactor this in HIVE-6366
specifier|final
name|JobConf
name|cloneJobConf
init|=
operator|new
name|JobConf
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
specifier|final
name|PartitionDesc
name|part
init|=
name|pathToPartitionInfo
operator|.
name|get
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|part
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|part
operator|.
name|getTableDesc
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|Utilities
operator|.
name|copyTableJobPropertiesToConf
argument_list|(
name|part
operator|.
name|getTableDesc
argument_list|()
argument_list|,
name|cloneJobConf
argument_list|)
expr_stmt|;
block|}
name|pushProjectionsAndFilters
argument_list|(
name|cloneJobConf
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cloneJobConf
return|;
block|}
block|}
end_class

end_unit

