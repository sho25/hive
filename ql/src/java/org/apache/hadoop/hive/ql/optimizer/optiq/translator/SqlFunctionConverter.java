begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
operator|.
name|translator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlFunctionCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|OperandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|ReturnTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlReturnTypeInference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_class
specifier|public
class|class
name|SqlFunctionConverter
block|{
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SqlOperator
argument_list|>
name|operatorMap
decl_stmt|;
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SqlOperator
argument_list|>
name|hiveToOptiq
decl_stmt|;
specifier|static
specifier|final
name|Map
argument_list|<
name|SqlOperator
argument_list|,
name|HiveToken
argument_list|>
name|optiqToHiveToken
decl_stmt|;
static|static
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|()
decl_stmt|;
name|operatorMap
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|builder
operator|.
name|operatorMap
argument_list|)
expr_stmt|;
name|hiveToOptiq
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|builder
operator|.
name|hiveToOptiq
argument_list|)
expr_stmt|;
name|optiqToHiveToken
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|builder
operator|.
name|optiqToHiveToken
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|SqlOperator
name|getOptiqOperator
parameter_list|(
name|GenericUDF
name|hiveUDF
parameter_list|)
block|{
return|return
name|hiveToOptiq
operator|.
name|get
argument_list|(
name|getName
argument_list|(
name|hiveUDF
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ASTNode
name|buildAST
parameter_list|(
name|SqlOperator
name|op
parameter_list|,
name|List
argument_list|<
name|ASTNode
argument_list|>
name|children
parameter_list|)
block|{
name|HiveToken
name|hToken
init|=
name|optiqToHiveToken
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|ASTNode
name|node
decl_stmt|;
if|if
condition|(
name|hToken
operator|!=
literal|null
condition|)
block|{
name|node
operator|=
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|hToken
operator|.
name|type
argument_list|,
name|hToken
operator|.
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|=
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|TOK_FUNCTION
argument_list|,
literal|"TOK_FUNCTION"
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|kind
operator|!=
name|SqlKind
operator|.
name|CAST
condition|)
name|node
operator|.
name|addChild
argument_list|(
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|op
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ASTNode
name|c
range|:
name|children
control|)
block|{
name|ParseDriver
operator|.
name|adaptor
operator|.
name|addChild
argument_list|(
name|node
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
comment|/**    * Build AST for flattened Associative expressions ('and', 'or'). Flattened    * expressions is of the form or[x,y,z] which is originally represented as    * "or[x, or[y, z]]".    */
specifier|public
specifier|static
name|ASTNode
name|buildAST
parameter_list|(
name|SqlOperator
name|op
parameter_list|,
name|List
argument_list|<
name|ASTNode
argument_list|>
name|children
parameter_list|,
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|children
operator|.
name|size
argument_list|()
condition|)
block|{
name|HiveToken
name|hToken
init|=
name|optiqToHiveToken
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|ASTNode
name|curNode
init|=
operator|(
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|hToken
operator|.
name|type
argument_list|,
name|hToken
operator|.
name|text
argument_list|)
operator|)
decl_stmt|;
name|ParseDriver
operator|.
name|adaptor
operator|.
name|addChild
argument_list|(
name|curNode
argument_list|,
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|ParseDriver
operator|.
name|adaptor
operator|.
name|addChild
argument_list|(
name|curNode
argument_list|,
name|buildAST
argument_list|(
name|op
argument_list|,
name|children
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|curNode
return|;
block|}
else|else
block|{
return|return
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getName
parameter_list|(
name|GenericUDF
name|hiveUDF
parameter_list|)
block|{
if|if
condition|(
name|hiveUDF
operator|instanceof
name|GenericUDFBridge
condition|)
block|{
return|return
operator|(
operator|(
name|GenericUDFBridge
operator|)
name|hiveUDF
operator|)
operator|.
name|getUdfName
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|hiveUDF
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Builder
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SqlOperator
argument_list|>
name|operatorMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SqlOperator
argument_list|>
name|hiveToOptiq
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|SqlOperator
argument_list|,
name|HiveToken
argument_list|>
name|optiqToHiveToken
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Builder
parameter_list|()
block|{
name|registerFunction
argument_list|(
literal|"concat"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|CONCAT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"substr"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|SUBSTRING
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"substring"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|SUBSTRING
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|stringFunction
argument_list|(
literal|"space"
argument_list|)
expr_stmt|;
name|stringFunction
argument_list|(
literal|"repeat"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"ascii"
argument_list|)
expr_stmt|;
name|stringFunction
argument_list|(
literal|"repeat"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"round"
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"floor"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|FLOOR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"sqrt"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|SQRT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"ceil"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|CEIL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"ceiling"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|CEIL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"rand"
argument_list|)
expr_stmt|;
name|operatorMap
operator|.
name|put
argument_list|(
literal|"abs"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|ABS
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"pmod"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"ln"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"log2"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"sin"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"asin"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"cos"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"acos"
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"log10"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|LOG10
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"log"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"exp"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"power"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"pow"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"sign"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"pi"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"degrees"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"atan"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"tan"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"upper"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|UPPER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"lower"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|LOWER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"ucase"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|UPPER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"lcase"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|LOWER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"trim"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|TRIM
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|stringFunction
argument_list|(
literal|"ltrim"
argument_list|)
expr_stmt|;
name|stringFunction
argument_list|(
literal|"rtrim"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"length"
argument_list|)
expr_stmt|;
name|stringFunction
argument_list|(
literal|"like"
argument_list|)
expr_stmt|;
name|stringFunction
argument_list|(
literal|"rlike"
argument_list|)
expr_stmt|;
name|stringFunction
argument_list|(
literal|"regexp"
argument_list|)
expr_stmt|;
name|stringFunction
argument_list|(
literal|"regexp_replace"
argument_list|)
expr_stmt|;
name|stringFunction
argument_list|(
literal|"regexp_extract"
argument_list|)
expr_stmt|;
name|stringFunction
argument_list|(
literal|"parse_url"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"day"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"dayofmonth"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"month"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"year"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"hour"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"minute"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"second"
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"+"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|hToken
argument_list|(
name|HiveParser
operator|.
name|PLUS
argument_list|,
literal|"+"
argument_list|)
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"-"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|MINUS
argument_list|,
name|hToken
argument_list|(
name|HiveParser
operator|.
name|MINUS
argument_list|,
literal|"-"
argument_list|)
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"*"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|MULTIPLY
argument_list|,
name|hToken
argument_list|(
name|HiveParser
operator|.
name|STAR
argument_list|,
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"/"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|DIVIDE
argument_list|,
name|hToken
argument_list|(
name|HiveParser
operator|.
name|STAR
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"%"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|MOD
argument_list|,
name|hToken
argument_list|(
name|HiveParser
operator|.
name|STAR
argument_list|,
literal|"%"
argument_list|)
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"isnull"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"isnotnull"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"if"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"and"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|hToken
argument_list|(
name|HiveParser
operator|.
name|KW_AND
argument_list|,
literal|"and"
argument_list|)
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"or"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|OR
argument_list|,
name|hToken
argument_list|(
name|HiveParser
operator|.
name|KW_OR
argument_list|,
literal|"or"
argument_list|)
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"="
argument_list|,
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|hToken
argument_list|(
name|HiveParser
operator|.
name|EQUAL
argument_list|,
literal|"="
argument_list|)
argument_list|)
expr_stmt|;
comment|//      numericFunction("==");
name|numericFunction
argument_list|(
literal|"<=>"
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"!="
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"<>"
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"<"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
argument_list|,
name|hToken
argument_list|(
name|HiveParser
operator|.
name|LESSTHAN
argument_list|,
literal|"<"
argument_list|)
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"<="
argument_list|,
name|SqlStdOperatorTable
operator|.
name|LESS_THAN_OR_EQUAL
argument_list|,
name|hToken
argument_list|(
name|HiveParser
operator|.
name|LESSTHANOREQUALTO
argument_list|,
literal|"<="
argument_list|)
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|">"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
argument_list|,
name|hToken
argument_list|(
name|HiveParser
operator|.
name|GREATERTHAN
argument_list|,
literal|">"
argument_list|)
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|">="
argument_list|,
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN_OR_EQUAL
argument_list|,
name|hToken
argument_list|(
name|HiveParser
operator|.
name|GREATERTHANOREQUALTO
argument_list|,
literal|">="
argument_list|)
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"not"
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"!"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|NOT
argument_list|,
name|hToken
argument_list|(
name|HiveParser
operator|.
name|KW_NOT
argument_list|,
literal|"not"
argument_list|)
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"between"
argument_list|)
expr_stmt|;
name|registerFunction
argument_list|(
literal|"case"
argument_list|,
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
literal|"when"
argument_list|)
expr_stmt|;
comment|// implicit convert methods
name|numericFunction
argument_list|(
name|serdeConstants
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
expr_stmt|;
name|numericFunction
argument_list|(
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
expr_stmt|;
name|stringFunction
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|stringFunction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|registerFunction
argument_list|(
name|name
argument_list|,
name|SqlFunctionCategory
operator|.
name|STRING
argument_list|,
name|ReturnTypes
operator|.
name|explicit
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|numericFunction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|registerFunction
argument_list|(
name|name
argument_list|,
name|SqlFunctionCategory
operator|.
name|NUMERIC
argument_list|,
name|ReturnTypes
operator|.
name|explicit
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerFunction
parameter_list|(
name|String
name|name
parameter_list|,
name|SqlFunctionCategory
name|cat
parameter_list|,
name|SqlReturnTypeInference
name|rti
parameter_list|)
block|{
name|SqlOperator
name|optiqFn
init|=
operator|new
name|SqlFunction
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|SqlKind
operator|.
name|OTHER_FUNCTION
argument_list|,
name|rti
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|cat
argument_list|)
decl_stmt|;
name|registerFunction
argument_list|(
name|name
argument_list|,
name|optiqFn
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerFunction
parameter_list|(
name|String
name|name
parameter_list|,
name|SqlOperator
name|optiqFn
parameter_list|,
name|HiveToken
name|hiveToken
parameter_list|)
block|{
name|operatorMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|optiqFn
argument_list|)
expr_stmt|;
name|FunctionInfo
name|hFn
init|=
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|hFn
operator|!=
literal|null
condition|)
block|{
name|String
name|hFnName
init|=
name|getName
argument_list|(
name|hFn
operator|.
name|getGenericUDF
argument_list|()
argument_list|)
decl_stmt|;
name|hiveToOptiq
operator|.
name|put
argument_list|(
name|hFnName
argument_list|,
name|optiqFn
argument_list|)
expr_stmt|;
if|if
condition|(
name|hiveToken
operator|!=
literal|null
condition|)
block|{
name|optiqToHiveToken
operator|.
name|put
argument_list|(
name|optiqFn
argument_list|,
name|hiveToken
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|HiveToken
name|hToken
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|text
parameter_list|)
block|{
return|return
operator|new
name|HiveToken
argument_list|(
name|type
argument_list|,
name|text
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SqlAggFunction
name|hiveAggFunction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|HiveAggFunction
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|static
class|class
name|HiveAggFunction
extends|extends
name|SqlAggFunction
block|{
specifier|public
name|HiveAggFunction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|SqlKind
operator|.
name|OTHER_FUNCTION
argument_list|,
name|ReturnTypes
operator|.
name|BIGINT
argument_list|,
literal|null
argument_list|,
name|OperandTypes
operator|.
name|ANY
argument_list|,
name|SqlFunctionCategory
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|RelDataType
argument_list|>
name|getParameterTypes
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|ANY
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RelDataType
name|getReturnType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
return|return
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|HiveToken
block|{
name|int
name|type
decl_stmt|;
name|String
name|text
decl_stmt|;
name|String
index|[]
name|args
decl_stmt|;
name|HiveToken
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|text
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

