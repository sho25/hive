begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFUtils
import|;
end_import

begin_class
specifier|public
class|class
name|PTFInvocationSpec
block|{
name|PartitionedTableFunctionSpec
name|function
decl_stmt|;
specifier|public
name|PartitionedTableFunctionSpec
name|getFunction
parameter_list|()
block|{
return|return
name|function
return|;
block|}
specifier|public
name|void
name|setFunction
parameter_list|(
name|PartitionedTableFunctionSpec
name|function
parameter_list|)
block|{
name|this
operator|.
name|function
operator|=
name|function
expr_stmt|;
block|}
specifier|public
name|PartitionedTableFunctionSpec
name|getStartOfChain
parameter_list|()
block|{
return|return
name|function
operator|==
literal|null
condition|?
literal|null
else|:
name|function
operator|.
name|getStartOfChain
argument_list|()
return|;
block|}
specifier|public
name|String
name|getQueryInputName
parameter_list|()
block|{
return|return
name|function
operator|==
literal|null
condition|?
literal|null
else|:
name|function
operator|.
name|getQueryInputName
argument_list|()
return|;
block|}
specifier|public
name|PTFQueryInputSpec
name|getQueryInput
parameter_list|()
block|{
return|return
name|function
operator|==
literal|null
condition|?
literal|null
else|:
name|function
operator|.
name|getQueryInput
argument_list|()
return|;
block|}
comment|/*    * A PTF Input represents the input to a PTF Function. An Input can be a Hive SubQuery or Table    * or another PTF Function. An Input instance captures the ASTNode that this instance was created from.    */
specifier|public
specifier|abstract
specifier|static
class|class
name|PTFInputSpec
block|{
name|ASTNode
name|astNode
decl_stmt|;
specifier|public
name|ASTNode
name|getAstNode
parameter_list|()
block|{
return|return
name|astNode
return|;
block|}
specifier|public
name|void
name|setAstNode
parameter_list|(
name|ASTNode
name|astNode
parameter_list|)
block|{
name|this
operator|.
name|astNode
operator|=
name|astNode
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|PTFInputSpec
name|getInput
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|String
name|getQueryInputName
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|PTFQueryInputSpec
name|getQueryInput
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
enum|enum
name|PTFQueryInputType
block|{
name|TABLE
block|,
name|SUBQUERY
block|,
name|PTFCOMPONENT
block|,
name|WINDOWING
block|;   }
comment|/*    * A PTF input that represents a source in the overall Query. This could be a Table or a SubQuery.    * If a PTF chain requires execution by multiple PTF Operators;    * then the original Invocation object is decomposed into a set of Component Invocations.    * Every component Invocation but the first one ends in a PTFQueryInputSpec instance.    * During the construction of the Operator plan a PTFQueryInputSpec object in the chain implies connect the PTF Operator to the    * 'input' i.e. has been generated so far.    */
specifier|public
specifier|static
class|class
name|PTFQueryInputSpec
extends|extends
name|PTFInputSpec
block|{
name|String
name|source
decl_stmt|;
name|PTFQueryInputType
name|type
decl_stmt|;
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
specifier|public
name|void
name|setSource
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
specifier|public
name|PTFQueryInputType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|PTFQueryInputType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PTFInputSpec
name|getInput
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getQueryInputName
parameter_list|()
block|{
return|return
name|getSource
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PTFQueryInputSpec
name|getQueryInput
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
comment|/*    * Represents a PTF Invocation. Captures:    * - function name and alias    * - the Partitioning details about its input    * - its arguments. The ASTNodes representing the arguments are captured here.    * - a reference to its Input    */
specifier|public
specifier|static
class|class
name|PartitionedTableFunctionSpec
extends|extends
name|PTFInputSpec
block|{
name|String
name|name
decl_stmt|;
name|String
name|alias
decl_stmt|;
name|List
argument_list|<
name|ASTNode
argument_list|>
name|args
decl_stmt|;
name|PartitioningSpec
name|partitioning
decl_stmt|;
name|PTFInputSpec
name|input
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getAlias
parameter_list|()
block|{
return|return
name|alias
return|;
block|}
specifier|public
name|void
name|setAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ASTNode
argument_list|>
name|getArgs
parameter_list|()
block|{
return|return
name|args
return|;
block|}
specifier|public
name|void
name|setArgs
parameter_list|(
name|List
argument_list|<
name|ASTNode
argument_list|>
name|args
parameter_list|)
block|{
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
specifier|public
name|PartitioningSpec
name|getPartitioning
parameter_list|()
block|{
return|return
name|partitioning
return|;
block|}
specifier|public
name|void
name|setPartitioning
parameter_list|(
name|PartitioningSpec
name|partitioning
parameter_list|)
block|{
name|this
operator|.
name|partitioning
operator|=
name|partitioning
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PTFInputSpec
name|getInput
parameter_list|()
block|{
return|return
name|input
return|;
block|}
specifier|public
name|void
name|setInput
parameter_list|(
name|PTFInputSpec
name|input
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
block|}
specifier|public
name|PartitionSpec
name|getPartition
parameter_list|()
block|{
return|return
name|getPartitioning
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getPartitioning
argument_list|()
operator|.
name|getPartSpec
argument_list|()
return|;
block|}
specifier|public
name|void
name|setPartition
parameter_list|(
name|PartitionSpec
name|partSpec
parameter_list|)
block|{
name|partitioning
operator|=
name|partitioning
operator|==
literal|null
condition|?
operator|new
name|PartitioningSpec
argument_list|()
else|:
name|partitioning
expr_stmt|;
name|partitioning
operator|.
name|setPartSpec
argument_list|(
name|partSpec
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OrderSpec
name|getOrder
parameter_list|()
block|{
return|return
name|getPartitioning
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getPartitioning
argument_list|()
operator|.
name|getOrderSpec
argument_list|()
return|;
block|}
specifier|public
name|void
name|setOrder
parameter_list|(
name|OrderSpec
name|orderSpec
parameter_list|)
block|{
name|partitioning
operator|=
name|partitioning
operator|==
literal|null
condition|?
operator|new
name|PartitioningSpec
argument_list|()
else|:
name|partitioning
expr_stmt|;
name|partitioning
operator|.
name|setOrderSpec
argument_list|(
name|orderSpec
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addArg
parameter_list|(
name|ASTNode
name|arg
parameter_list|)
block|{
name|args
operator|=
name|args
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
argument_list|()
else|:
name|args
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PartitionedTableFunctionSpec
name|getStartOfChain
parameter_list|()
block|{
if|if
condition|(
name|input
operator|instanceof
name|PartitionedTableFunctionSpec
condition|)
block|{
return|return
operator|(
operator|(
name|PartitionedTableFunctionSpec
operator|)
name|input
operator|)
operator|.
name|getStartOfChain
argument_list|()
return|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getQueryInputName
parameter_list|()
block|{
return|return
name|input
operator|.
name|getQueryInputName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PTFQueryInputSpec
name|getQueryInput
parameter_list|()
block|{
return|return
name|input
operator|.
name|getQueryInput
argument_list|()
return|;
block|}
block|}
comment|/*    * Captures how the Input to a PTF Function should be partitioned and    * ordered. Refers to a /Partition/ and /Order/ instance.    */
specifier|public
specifier|static
class|class
name|PartitioningSpec
block|{
name|PartitionSpec
name|partSpec
decl_stmt|;
name|OrderSpec
name|orderSpec
decl_stmt|;
specifier|public
name|PartitionSpec
name|getPartSpec
parameter_list|()
block|{
return|return
name|partSpec
return|;
block|}
specifier|public
name|void
name|setPartSpec
parameter_list|(
name|PartitionSpec
name|partSpec
parameter_list|)
block|{
name|this
operator|.
name|partSpec
operator|=
name|partSpec
expr_stmt|;
block|}
specifier|public
name|OrderSpec
name|getOrderSpec
parameter_list|()
block|{
return|return
name|orderSpec
return|;
block|}
specifier|public
name|void
name|setOrderSpec
parameter_list|(
name|OrderSpec
name|orderSpec
parameter_list|)
block|{
name|this
operator|.
name|orderSpec
operator|=
name|orderSpec
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|orderSpec
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|orderSpec
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|partSpec
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|partSpec
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PartitioningSpec
name|other
init|=
operator|(
name|PartitioningSpec
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|orderSpec
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|orderSpec
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|orderSpec
operator|.
name|equals
argument_list|(
name|other
operator|.
name|orderSpec
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|partSpec
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|partSpec
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|partSpec
operator|.
name|equals
argument_list|(
name|other
operator|.
name|partSpec
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"PartitioningSpec=[%s%s]"
argument_list|,
name|partSpec
operator|==
literal|null
condition|?
literal|""
else|:
name|partSpec
argument_list|,
name|orderSpec
operator|==
literal|null
condition|?
literal|""
else|:
name|orderSpec
argument_list|)
return|;
block|}
block|}
comment|/*    * Captures how an Input should be Partitioned. This is captured as a    * list of ASTNodes that are the expressions in the Distribute/Cluster    * by clause specifying the partitioning applied for a PTF invocation.    */
specifier|public
specifier|static
class|class
name|PartitionSpec
block|{
name|ArrayList
argument_list|<
name|PartitionExpression
argument_list|>
name|expressions
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|PartitionExpression
argument_list|>
name|getExpressions
parameter_list|()
block|{
return|return
name|expressions
return|;
block|}
specifier|public
name|void
name|setExpressions
parameter_list|(
name|ArrayList
argument_list|<
name|PartitionExpression
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|expressions
operator|=
name|columns
expr_stmt|;
block|}
specifier|public
name|void
name|addExpression
parameter_list|(
name|PartitionExpression
name|c
parameter_list|)
block|{
name|expressions
operator|=
name|expressions
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|PartitionExpression
argument_list|>
argument_list|()
else|:
name|expressions
expr_stmt|;
name|expressions
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|expressions
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|expressions
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PartitionSpec
name|other
init|=
operator|(
name|PartitionSpec
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|expressions
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|expressions
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|expressions
operator|.
name|equals
argument_list|(
name|other
operator|.
name|expressions
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"partitionColumns=%s"
argument_list|,
name|PTFUtils
operator|.
name|toString
argument_list|(
name|expressions
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PartitionExpression
block|{
name|ASTNode
name|expression
decl_stmt|;
specifier|public
name|PartitionExpression
parameter_list|()
block|{}
specifier|public
name|PartitionExpression
parameter_list|(
name|PartitionExpression
name|peSpec
parameter_list|)
block|{
name|expression
operator|=
name|peSpec
operator|.
name|getExpression
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ASTNode
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
specifier|public
name|void
name|setExpression
parameter_list|(
name|ASTNode
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|expression
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|expression
operator|.
name|toStringTree
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PartitionExpression
name|other
init|=
operator|(
name|PartitionExpression
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|expression
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|expression
operator|.
name|toStringTree
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|expression
operator|.
name|toStringTree
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|expression
operator|.
name|toStringTree
argument_list|()
return|;
block|}
block|}
comment|/*    * Captures how the Input should be Ordered. This is captured as a list    * of ASTNodes that are the expressions in the Sort By clause in a    * PTF invocation.    */
specifier|public
specifier|static
class|class
name|OrderSpec
block|{
name|ArrayList
argument_list|<
name|OrderExpression
argument_list|>
name|expressions
decl_stmt|;
specifier|public
name|OrderSpec
parameter_list|()
block|{}
specifier|public
name|OrderSpec
parameter_list|(
name|PartitionSpec
name|pSpec
parameter_list|)
block|{
for|for
control|(
name|PartitionExpression
name|peSpec
range|:
name|pSpec
operator|.
name|getExpressions
argument_list|()
control|)
block|{
name|addExpression
argument_list|(
operator|new
name|OrderExpression
argument_list|(
name|peSpec
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ArrayList
argument_list|<
name|OrderExpression
argument_list|>
name|getExpressions
parameter_list|()
block|{
return|return
name|expressions
return|;
block|}
specifier|public
name|void
name|setExpressions
parameter_list|(
name|ArrayList
argument_list|<
name|OrderExpression
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|expressions
operator|=
name|columns
expr_stmt|;
block|}
comment|/**      * Add order expressions from the list of expressions in the format of ASTNode      * @param args      */
specifier|public
name|void
name|addExpressions
parameter_list|(
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
name|nodes
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|OrderExpression
name|expr
init|=
operator|new
name|OrderExpression
argument_list|()
decl_stmt|;
name|expr
operator|.
name|setExpression
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|addExpression
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addExpression
parameter_list|(
name|OrderExpression
name|c
parameter_list|)
block|{
name|expressions
operator|=
name|expressions
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|OrderExpression
argument_list|>
argument_list|()
else|:
name|expressions
expr_stmt|;
name|expressions
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isPrefixedBy
parameter_list|(
name|PartitionSpec
name|pSpec
parameter_list|)
block|{
if|if
condition|(
name|pSpec
operator|==
literal|null
operator|||
name|pSpec
operator|.
name|getExpressions
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|int
name|pExprCnt
init|=
name|pSpec
operator|.
name|getExpressions
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|exprCnt
init|=
name|getExpressions
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|getExpressions
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|exprCnt
operator|<
name|pExprCnt
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pExprCnt
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|pSpec
operator|.
name|getExpressions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|getExpressions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|prefixBy
parameter_list|(
name|PartitionSpec
name|pSpec
parameter_list|)
block|{
if|if
condition|(
name|pSpec
operator|==
literal|null
operator|||
name|pSpec
operator|.
name|getExpressions
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|expressions
operator|==
literal|null
condition|)
block|{
name|expressions
operator|=
operator|new
name|ArrayList
argument_list|<
name|PTFInvocationSpec
operator|.
name|OrderExpression
argument_list|>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|pSpec
operator|.
name|getExpressions
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|expressions
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|OrderExpression
argument_list|(
name|pSpec
operator|.
name|getExpressions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|expressions
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|expressions
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|OrderSpec
name|other
init|=
operator|(
name|OrderSpec
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|expressions
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|expressions
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|expressions
operator|.
name|equals
argument_list|(
name|other
operator|.
name|expressions
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"orderColumns=%s"
argument_list|,
name|PTFUtils
operator|.
name|toString
argument_list|(
name|expressions
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|Order
block|{
name|ASC
block|,
name|DESC
block|;   }
specifier|public
specifier|static
class|class
name|OrderExpression
extends|extends
name|PartitionExpression
block|{
name|Order
name|order
decl_stmt|;
specifier|public
name|OrderExpression
parameter_list|()
block|{
name|order
operator|=
name|Order
operator|.
name|ASC
expr_stmt|;
block|}
specifier|public
name|OrderExpression
parameter_list|(
name|PartitionExpression
name|peSpec
parameter_list|)
block|{
name|super
argument_list|(
name|peSpec
argument_list|)
expr_stmt|;
name|order
operator|=
name|Order
operator|.
name|ASC
expr_stmt|;
block|}
specifier|public
name|Order
name|getOrder
parameter_list|()
block|{
return|return
name|order
return|;
block|}
specifier|public
name|void
name|setOrder
parameter_list|(
name|Order
name|order
parameter_list|)
block|{
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|order
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|order
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|OrderExpression
name|other
init|=
operator|(
name|OrderExpression
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|order
operator|!=
name|other
operator|.
name|order
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s %s"
argument_list|,
name|super
operator|.
name|toString
argument_list|()
argument_list|,
name|order
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

