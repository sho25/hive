begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|OperatorStats
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * This class makes it easier for jackson to comprehend the map type  *  * Instead of getting into convincing Jackson to store the map with serializers and typefactory tricks;  * this class is a simple "repacker" to and from list.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|RuntimeStatsMap
block|{
annotation|@
name|JsonProperty
specifier|private
name|List
argument_list|<
name|OpTreeSignature
argument_list|>
name|sigs
decl_stmt|;
annotation|@
name|JsonProperty
specifier|private
name|List
argument_list|<
name|OperatorStats
argument_list|>
name|ss
decl_stmt|;
name|RuntimeStatsMap
parameter_list|()
block|{   }
specifier|public
name|RuntimeStatsMap
parameter_list|(
name|Map
argument_list|<
name|OpTreeSignature
argument_list|,
name|OperatorStats
argument_list|>
name|input
parameter_list|)
block|{
name|sigs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|input
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ss
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|input
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|OpTreeSignature
argument_list|,
name|OperatorStats
argument_list|>
name|ent
range|:
name|input
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sigs
operator|.
name|add
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|ss
operator|.
name|add
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|OpTreeSignature
argument_list|,
name|OperatorStats
argument_list|>
name|toMap
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|sigs
operator|.
name|size
argument_list|()
operator|!=
name|ss
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"constraint validation"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|OpTreeSignature
argument_list|,
name|OperatorStats
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sigs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|sigs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|ss
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|sigs
argument_list|,
name|ss
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|RuntimeStatsMap
operator|.
name|class
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RuntimeStatsMap
name|o
init|=
operator|(
name|RuntimeStatsMap
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equal
argument_list|(
name|sigs
argument_list|,
name|o
operator|.
name|sigs
argument_list|)
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|ss
argument_list|,
name|o
operator|.
name|ss
argument_list|)
return|;
block|}
block|}
end_class

end_unit

