begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ptf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedBatchUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This class is encapsulates one or more VectorizedRowBatch of a PTF group.  */
end_comment

begin_class
specifier|public
class|class
name|VectorPTFGroupBatches
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
name|VectorPTFGroupBatches
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|private
name|VectorPTFEvaluatorBase
index|[]
name|evaluators
decl_stmt|;
specifier|private
name|int
index|[]
name|outputColumnMap
decl_stmt|;
specifier|private
name|int
index|[]
name|keyInputColumnMap
decl_stmt|;
specifier|private
name|int
index|[]
name|bufferedColumnMap
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|VectorizedRowBatch
argument_list|>
name|bufferedBatches
decl_stmt|;
specifier|private
name|VectorizedRowBatch
name|overflowBatch
decl_stmt|;
specifier|private
name|int
name|allocatedBufferedBatchCount
decl_stmt|;
specifier|private
name|int
name|currentBufferedBatchCount
decl_stmt|;
specifier|public
name|VectorPTFGroupBatches
parameter_list|()
block|{
name|allocatedBufferedBatchCount
operator|=
literal|0
expr_stmt|;
name|currentBufferedBatchCount
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|VectorPTFEvaluatorBase
index|[]
name|evaluators
parameter_list|,
name|int
index|[]
name|outputColumnMap
parameter_list|,
name|int
index|[]
name|keyInputColumnMap
parameter_list|,
name|int
index|[]
name|nonKeyInputColumnMap
parameter_list|,
name|int
index|[]
name|streamingColumnMap
parameter_list|,
name|VectorizedRowBatch
name|overflowBatch
parameter_list|)
block|{
name|this
operator|.
name|evaluators
operator|=
name|evaluators
expr_stmt|;
name|this
operator|.
name|outputColumnMap
operator|=
name|outputColumnMap
expr_stmt|;
name|this
operator|.
name|keyInputColumnMap
operator|=
name|keyInputColumnMap
expr_stmt|;
specifier|final
name|int
name|nonKeyInputColumnCount
init|=
name|nonKeyInputColumnMap
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|streamingColumnCount
init|=
name|streamingColumnMap
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|bufferedColumnCount
init|=
name|nonKeyInputColumnCount
operator|+
name|streamingColumnCount
decl_stmt|;
name|bufferedColumnMap
operator|=
operator|new
name|int
index|[
name|bufferedColumnCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nonKeyInputColumnCount
condition|;
name|i
operator|++
control|)
block|{
name|bufferedColumnMap
index|[
name|i
index|]
operator|=
name|nonKeyInputColumnMap
index|[
name|i
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|nonKeyInputColumnCount
init|;
name|i
operator|<
name|bufferedColumnCount
condition|;
name|i
operator|++
control|)
block|{
name|bufferedColumnMap
index|[
name|i
index|]
operator|=
name|streamingColumnMap
index|[
name|i
operator|-
name|nonKeyInputColumnCount
index|]
expr_stmt|;
block|}
name|this
operator|.
name|overflowBatch
operator|=
name|overflowBatch
expr_stmt|;
name|bufferedBatches
operator|=
operator|new
name|ArrayList
argument_list|<
name|VectorizedRowBatch
argument_list|>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|evaluateStreamingGroupBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|boolean
name|isLastGroupBatch
parameter_list|)
block|{
comment|// Streaming evaluators fill in their results during the evaluate call.
for|for
control|(
name|VectorPTFEvaluatorBase
name|evaluator
range|:
name|evaluators
control|)
block|{
name|evaluator
operator|.
name|evaluateGroupBatch
argument_list|(
name|batch
argument_list|,
name|isLastGroupBatch
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|evaluateGroupBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|boolean
name|isLastGroupBatch
parameter_list|)
block|{
for|for
control|(
name|VectorPTFEvaluatorBase
name|evaluator
range|:
name|evaluators
control|)
block|{
name|evaluator
operator|.
name|evaluateGroupBatch
argument_list|(
name|batch
argument_list|,
name|isLastGroupBatch
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|fillGroupResults
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
for|for
control|(
name|VectorPTFEvaluatorBase
name|evaluator
range|:
name|evaluators
control|)
block|{
specifier|final
name|int
name|outputColumnNum
init|=
name|evaluator
operator|.
name|getOutputColumnNum
argument_list|()
decl_stmt|;
if|if
condition|(
name|evaluator
operator|.
name|streamsResult
argument_list|()
condition|)
block|{
continue|continue;
block|}
specifier|final
name|ColumnVector
name|outputColVector
init|=
name|batch
operator|.
name|cols
index|[
name|outputColumnNum
index|]
decl_stmt|;
name|outputColVector
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
specifier|final
name|boolean
name|isGroupResultNull
init|=
name|evaluator
operator|.
name|isGroupResultNull
argument_list|()
decl_stmt|;
name|outputColVector
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
name|isGroupResultNull
expr_stmt|;
if|if
condition|(
name|isGroupResultNull
condition|)
block|{
name|outputColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outputColVector
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
switch|switch
condition|(
name|evaluator
operator|.
name|getResultColumnVectorType
argument_list|()
condition|)
block|{
case|case
name|LONG
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|outputColVector
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|evaluator
operator|.
name|getLongGroupResult
argument_list|()
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|outputColVector
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|evaluator
operator|.
name|getDoubleGroupResult
argument_list|()
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|outputColVector
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|evaluator
operator|.
name|getDecimalGroupResult
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected column vector type "
operator|+
name|evaluator
operator|.
name|getResultColumnVectorType
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|forwardBufferedBatches
parameter_list|(
name|VectorPTFOperator
name|vecPTFOperator
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|bufferedBatch
init|=
name|bufferedBatches
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|bufferedColumnMap
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
comment|// Swap ColumnVectors with overflowBatch.  We remember buffered columns compactly in the
comment|// buffered VRBs without other columns or scratch columns.
name|VectorizedBatchUtil
operator|.
name|swapColumnVector
argument_list|(
name|bufferedBatch
argument_list|,
name|i
argument_list|,
name|overflowBatch
argument_list|,
name|bufferedColumnMap
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|overflowBatch
operator|.
name|size
operator|=
name|bufferedBatch
operator|.
name|size
expr_stmt|;
name|fillGroupResults
argument_list|(
name|overflowBatch
argument_list|)
expr_stmt|;
name|vecPTFOperator
operator|.
name|forward
argument_list|(
name|overflowBatch
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|fillGroupResultsAndForward
parameter_list|(
name|VectorPTFOperator
name|vecPTFOperator
parameter_list|,
name|VectorizedRowBatch
name|lastBatch
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|currentBufferedBatchCount
operator|>
literal|0
condition|)
block|{
comment|// Set partition and order columns in overflowBatch.
comment|// We can set by ref since our last batch is held by us.
specifier|final
name|int
name|keyInputColumnCount
init|=
name|keyInputColumnMap
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyInputColumnCount
condition|;
name|i
operator|++
control|)
block|{
name|VectorizedBatchUtil
operator|.
name|copyRepeatingColumn
argument_list|(
name|lastBatch
argument_list|,
name|i
argument_list|,
name|overflowBatch
argument_list|,
name|i
argument_list|,
comment|/* setByValue */
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentBufferedBatchCount
condition|;
name|i
operator|++
control|)
block|{
name|forwardBufferedBatches
argument_list|(
name|vecPTFOperator
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|currentBufferedBatchCount
operator|=
literal|0
expr_stmt|;
block|}
name|fillGroupResults
argument_list|(
name|lastBatch
argument_list|)
expr_stmt|;
comment|// Save original projection.
name|int
index|[]
name|originalProjections
init|=
name|lastBatch
operator|.
name|projectedColumns
decl_stmt|;
name|int
name|originalProjectionSize
init|=
name|lastBatch
operator|.
name|projectionSize
decl_stmt|;
comment|// Project with the output of our operator.
name|lastBatch
operator|.
name|projectionSize
operator|=
name|outputColumnMap
operator|.
name|length
expr_stmt|;
name|lastBatch
operator|.
name|projectedColumns
operator|=
name|outputColumnMap
expr_stmt|;
name|vecPTFOperator
operator|.
name|forward
argument_list|(
name|lastBatch
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Revert the projected columns back, because batch can be re-used by our parent operators.
name|lastBatch
operator|.
name|projectionSize
operator|=
name|originalProjectionSize
expr_stmt|;
name|lastBatch
operator|.
name|projectedColumns
operator|=
name|originalProjections
expr_stmt|;
block|}
specifier|public
name|void
name|resetEvaluators
parameter_list|()
block|{
for|for
control|(
name|VectorPTFEvaluatorBase
name|evaluator
range|:
name|evaluators
control|)
block|{
name|evaluator
operator|.
name|resetEvaluator
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|VectorizedRowBatch
name|newBufferedBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|int
name|bufferedColumnCount
init|=
name|bufferedColumnMap
operator|.
name|length
decl_stmt|;
name|VectorizedRowBatch
name|newBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|bufferedColumnCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufferedColumnCount
condition|;
name|i
operator|++
control|)
block|{
name|newBatch
operator|.
name|cols
index|[
name|i
index|]
operator|=
name|VectorizedBatchUtil
operator|.
name|makeLikeColumnVector
argument_list|(
name|batch
operator|.
name|cols
index|[
name|bufferedColumnMap
index|[
name|i
index|]
index|]
argument_list|)
expr_stmt|;
name|newBatch
operator|.
name|cols
index|[
name|i
index|]
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
return|return
name|newBatch
return|;
block|}
specifier|public
name|void
name|bufferGroupBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|int
name|bufferedColumnCount
init|=
name|bufferedColumnMap
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|allocatedBufferedBatchCount
operator|<=
name|currentBufferedBatchCount
condition|)
block|{
name|VectorizedRowBatch
name|newBatch
init|=
name|newBufferedBatch
argument_list|(
name|batch
argument_list|)
decl_stmt|;
name|bufferedBatches
operator|.
name|add
argument_list|(
name|newBatch
argument_list|)
expr_stmt|;
name|allocatedBufferedBatchCount
operator|++
expr_stmt|;
block|}
name|VectorizedRowBatch
name|bufferedBatch
init|=
name|bufferedBatches
operator|.
name|get
argument_list|(
name|currentBufferedBatchCount
operator|++
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufferedColumnCount
condition|;
name|i
operator|++
control|)
block|{
name|VectorizedBatchUtil
operator|.
name|swapColumnVector
argument_list|(
name|batch
argument_list|,
name|bufferedColumnMap
index|[
name|i
index|]
argument_list|,
name|bufferedBatch
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|bufferedBatch
operator|.
name|size
operator|=
name|batch
operator|.
name|size
expr_stmt|;
block|}
block|}
end_class

end_unit

