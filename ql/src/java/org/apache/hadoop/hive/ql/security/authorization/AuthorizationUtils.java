begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|LimitedPrivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|privilege
operator|.
name|PrincipalDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|privilege
operator|.
name|PrivilegeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|privilege
operator|.
name|PrivilegeObjectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|Entity
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
operator|.
name|WriteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizationTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrincipal
operator|.
name|HivePrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
operator|.
name|HivePrivObjectActionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
operator|.
name|HivePrivilegeObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * Utility code shared by hive internal code and sql standard authorization plugin implementation  */
end_comment

begin_class
annotation|@
name|LimitedPrivate
argument_list|(
name|value
operator|=
block|{
literal|"Sql standard authorization plugin"
block|}
argument_list|)
specifier|public
class|class
name|AuthorizationUtils
block|{
comment|/**    * Convert thrift principal type to authorization plugin principal type    * @param type - thrift principal type    * @return    * @throws HiveException    */
specifier|public
specifier|static
name|HivePrincipalType
name|getHivePrincipalType
parameter_list|(
name|PrincipalType
name|type
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|USER
case|:
return|return
name|HivePrincipalType
operator|.
name|USER
return|;
case|case
name|ROLE
case|:
return|return
name|HivePrincipalType
operator|.
name|ROLE
return|;
case|case
name|GROUP
case|:
return|return
name|HivePrincipalType
operator|.
name|GROUP
return|;
default|default:
comment|//should not happen as we take care of all existing types
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unsupported authorization type specified"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert thrift object type to hive authorization plugin object type    * @param type - thrift object type    * @return    */
specifier|public
specifier|static
name|HivePrivilegeObjectType
name|getHivePrivilegeObjectType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DATABASE
case|:
return|return
name|HivePrivilegeObjectType
operator|.
name|DATABASE
return|;
case|case
name|TABLE
case|:
return|return
name|HivePrivilegeObjectType
operator|.
name|TABLE_OR_VIEW
return|;
case|case
name|LOCAL_DIR
case|:
return|return
name|HivePrivilegeObjectType
operator|.
name|LOCAL_URI
return|;
case|case
name|DFS_DIR
case|:
return|return
name|HivePrivilegeObjectType
operator|.
name|DFS_URI
return|;
case|case
name|PARTITION
case|:
case|case
name|DUMMYPARTITION
case|:
comment|//need to determine if a different type is needed for dummy partitions
return|return
name|HivePrivilegeObjectType
operator|.
name|PARTITION
return|;
case|case
name|FUNCTION
case|:
return|return
name|HivePrivilegeObjectType
operator|.
name|FUNCTION
return|;
case|case
name|SERVICE_NAME
case|:
return|return
name|HivePrivilegeObjectType
operator|.
name|SERVICE_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|HivePrivilegeObjectType
name|getPrivObjectType
parameter_list|(
name|PrivilegeObjectDesc
name|privSubjectDesc
parameter_list|)
block|{
if|if
condition|(
name|privSubjectDesc
operator|.
name|getObject
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|privSubjectDesc
operator|.
name|getTable
argument_list|()
condition|?
name|HivePrivilegeObjectType
operator|.
name|TABLE_OR_VIEW
else|:
name|HivePrivilegeObjectType
operator|.
name|DATABASE
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|HivePrivilege
argument_list|>
name|getHivePrivileges
parameter_list|(
name|List
argument_list|<
name|PrivilegeDesc
argument_list|>
name|privileges
parameter_list|,
name|HiveAuthorizationTranslator
name|trans
parameter_list|)
block|{
name|List
argument_list|<
name|HivePrivilege
argument_list|>
name|hivePrivileges
init|=
operator|new
name|ArrayList
argument_list|<
name|HivePrivilege
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PrivilegeDesc
name|privilege
range|:
name|privileges
control|)
block|{
name|hivePrivileges
operator|.
name|add
argument_list|(
name|trans
operator|.
name|getHivePrivilege
argument_list|(
name|privilege
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|hivePrivileges
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|getHivePrincipals
parameter_list|(
name|List
argument_list|<
name|PrincipalDesc
argument_list|>
name|principals
parameter_list|,
name|HiveAuthorizationTranslator
name|trans
parameter_list|)
throws|throws
name|HiveException
block|{
name|ArrayList
argument_list|<
name|HivePrincipal
argument_list|>
name|hivePrincipals
init|=
operator|new
name|ArrayList
argument_list|<
name|HivePrincipal
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PrincipalDesc
name|principal
range|:
name|principals
control|)
block|{
name|hivePrincipals
operator|.
name|add
argument_list|(
name|trans
operator|.
name|getHivePrincipal
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|hivePrincipals
return|;
block|}
specifier|public
specifier|static
name|HivePrincipal
name|getHivePrincipal
parameter_list|(
name|String
name|name
parameter_list|,
name|PrincipalType
name|type
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|HivePrincipal
argument_list|(
name|name
argument_list|,
name|AuthorizationUtils
operator|.
name|getHivePrincipalType
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|HivePrivilegeInfo
argument_list|>
name|getPrivilegeInfos
parameter_list|(
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privs
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|HivePrivilegeInfo
argument_list|>
name|hivePrivs
init|=
operator|new
name|ArrayList
argument_list|<
name|HivePrivilegeInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HiveObjectPrivilege
name|priv
range|:
name|privs
control|)
block|{
name|PrivilegeGrantInfo
name|grantorInfo
init|=
name|priv
operator|.
name|getGrantInfo
argument_list|()
decl_stmt|;
name|HiveObjectRef
name|privObject
init|=
name|priv
operator|.
name|getHiveObject
argument_list|()
decl_stmt|;
name|HivePrincipal
name|hivePrincipal
init|=
name|getHivePrincipal
argument_list|(
name|priv
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|priv
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
decl_stmt|;
name|HivePrincipal
name|grantor
init|=
name|getHivePrincipal
argument_list|(
name|grantorInfo
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|grantorInfo
operator|.
name|getGrantorType
argument_list|()
argument_list|)
decl_stmt|;
name|HivePrivilegeObject
name|object
init|=
name|getHiveObjectRef
argument_list|(
name|privObject
argument_list|)
decl_stmt|;
name|HivePrivilege
name|privilege
init|=
operator|new
name|HivePrivilege
argument_list|(
name|grantorInfo
operator|.
name|getPrivilege
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|hivePrivs
operator|.
name|add
argument_list|(
operator|new
name|HivePrivilegeInfo
argument_list|(
name|hivePrincipal
argument_list|,
name|privilege
argument_list|,
name|object
argument_list|,
name|grantor
argument_list|,
name|grantorInfo
operator|.
name|isGrantOption
argument_list|()
argument_list|,
name|grantorInfo
operator|.
name|getCreateTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|hivePrivs
return|;
block|}
specifier|public
specifier|static
name|HivePrivilegeObject
name|getHiveObjectRef
parameter_list|(
name|HiveObjectRef
name|privObj
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|privObj
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HivePrivilegeObjectType
name|objType
init|=
name|getHiveObjType
argument_list|(
name|privObj
operator|.
name|getObjectType
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|HivePrivilegeObject
argument_list|(
name|objType
argument_list|,
name|privObj
operator|.
name|getDbName
argument_list|()
argument_list|,
name|privObj
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|privObj
operator|.
name|getPartValues
argument_list|()
argument_list|,
name|privObj
operator|.
name|getColumnName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert authorization plugin principal type to thrift principal type    * @param type    * @return    */
specifier|public
specifier|static
name|PrincipalType
name|getThriftPrincipalType
parameter_list|(
name|HivePrincipalType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|USER
case|:
return|return
name|PrincipalType
operator|.
name|USER
return|;
case|case
name|GROUP
case|:
return|return
name|PrincipalType
operator|.
name|GROUP
return|;
case|case
name|ROLE
case|:
return|return
name|PrincipalType
operator|.
name|ROLE
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Invalid principal type "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get thrift privilege grant info    * @param privilege    * @param grantorPrincipal    * @param grantOption    * @param grantTime    * @return    * @throws HiveException    */
specifier|public
specifier|static
name|PrivilegeGrantInfo
name|getThriftPrivilegeGrantInfo
parameter_list|(
name|HivePrivilege
name|privilege
parameter_list|,
name|HivePrincipal
name|grantorPrincipal
parameter_list|,
name|boolean
name|grantOption
parameter_list|,
name|int
name|grantTime
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|privilege
operator|.
name|getName
argument_list|()
argument_list|,
name|grantTime
argument_list|,
name|grantorPrincipal
operator|.
name|getName
argument_list|()
argument_list|,
name|getThriftPrincipalType
argument_list|(
name|grantorPrincipal
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|grantOption
argument_list|)
return|;
block|}
comment|/**    * Convert plugin privilege object type to thrift type    * @param type    * @return    * @throws HiveException    */
specifier|public
specifier|static
name|HiveObjectType
name|getThriftHiveObjType
parameter_list|(
name|HivePrivilegeObjectType
name|type
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GLOBAL
case|:
return|return
name|HiveObjectType
operator|.
name|GLOBAL
return|;
case|case
name|DATABASE
case|:
return|return
name|HiveObjectType
operator|.
name|DATABASE
return|;
case|case
name|TABLE_OR_VIEW
case|:
return|return
name|HiveObjectType
operator|.
name|TABLE
return|;
case|case
name|PARTITION
case|:
return|return
name|HiveObjectType
operator|.
name|PARTITION
return|;
case|case
name|COLUMN
case|:
return|return
name|HiveObjectType
operator|.
name|COLUMN
return|;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unsupported type "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|// V1 to V2 conversion.
specifier|private
specifier|static
name|HivePrivilegeObjectType
name|getHiveObjType
parameter_list|(
name|HiveObjectType
name|type
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GLOBAL
case|:
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthorizationMode
argument_list|()
operator|==
name|SessionState
operator|.
name|AuthorizationMode
operator|.
name|V2
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|UNSUPPORTED_AUTHORIZATION_RESOURCE_TYPE_GLOBAL
argument_list|)
throw|;
block|}
return|return
name|HivePrivilegeObjectType
operator|.
name|GLOBAL
return|;
case|case
name|DATABASE
case|:
return|return
name|HivePrivilegeObjectType
operator|.
name|DATABASE
return|;
case|case
name|TABLE
case|:
return|return
name|HivePrivilegeObjectType
operator|.
name|TABLE_OR_VIEW
return|;
case|case
name|PARTITION
case|:
return|return
name|HivePrivilegeObjectType
operator|.
name|PARTITION
return|;
case|case
name|COLUMN
case|:
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthorizationMode
argument_list|()
operator|==
name|SessionState
operator|.
name|AuthorizationMode
operator|.
name|V2
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|UNSUPPORTED_AUTHORIZATION_RESOURCE_TYPE_COLUMN
argument_list|)
throw|;
block|}
return|return
name|HivePrivilegeObjectType
operator|.
name|COLUMN
return|;
default|default:
comment|//should not happen as we have accounted for all types
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unsupported type "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert thrift HiveObjectRef to plugin HivePrivilegeObject    * @param privObj    * @return    * @throws HiveException    */
specifier|public
specifier|static
name|HiveObjectRef
name|getThriftHiveObjectRef
parameter_list|(
name|HivePrivilegeObject
name|privObj
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|privObj
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HiveObjectType
name|objType
init|=
name|getThriftHiveObjType
argument_list|(
name|privObj
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|HiveObjectRef
argument_list|(
name|objType
argument_list|,
name|privObj
operator|.
name|getDbname
argument_list|()
argument_list|,
name|privObj
operator|.
name|getObjectName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HivePrivObjectActionType
name|getActionType
parameter_list|(
name|Entity
name|privObject
parameter_list|)
block|{
name|HivePrivObjectActionType
name|actionType
init|=
name|HivePrivObjectActionType
operator|.
name|OTHER
decl_stmt|;
if|if
condition|(
name|privObject
operator|instanceof
name|WriteEntity
condition|)
block|{
name|WriteType
name|writeType
init|=
operator|(
operator|(
name|WriteEntity
operator|)
name|privObject
operator|)
operator|.
name|getWriteType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|writeType
condition|)
block|{
case|case
name|INSERT
case|:
return|return
name|HivePrivObjectActionType
operator|.
name|INSERT
return|;
case|case
name|INSERT_OVERWRITE
case|:
return|return
name|HivePrivObjectActionType
operator|.
name|INSERT_OVERWRITE
return|;
case|case
name|UPDATE
case|:
return|return
name|HivePrivObjectActionType
operator|.
name|UPDATE
return|;
case|case
name|DELETE
case|:
return|return
name|HivePrivObjectActionType
operator|.
name|DELETE
return|;
default|default:
comment|// Ignore other types for purposes of authorization
break|break;
block|}
block|}
return|return
name|actionType
return|;
block|}
block|}
end_class

end_unit

