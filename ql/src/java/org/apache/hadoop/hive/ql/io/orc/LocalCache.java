begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
operator|.
name|FileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
operator|.
name|FooterCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|HdfsFileStatusWithId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|FileMetaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_comment
comment|/** Local footer cache using Guava. Stores convoluted Java objects. */
end_comment

begin_class
class|class
name|LocalCache
implements|implements
name|FooterCache
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LocalCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|isDebugEnabled
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|Path
argument_list|,
name|FileInfo
argument_list|>
name|cache
decl_stmt|;
specifier|public
name|LocalCache
parameter_list|(
name|int
name|numThreads
parameter_list|,
name|int
name|cacheStripeDetailsSize
parameter_list|)
block|{
name|cache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
name|numThreads
argument_list|)
operator|.
name|initialCapacity
argument_list|(
name|cacheStripeDetailsSize
argument_list|)
operator|.
name|maximumSize
argument_list|(
name|cacheStripeDetailsSize
argument_list|)
operator|.
name|softValues
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
name|cache
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getAndValidate
parameter_list|(
name|List
argument_list|<
name|HdfsFileStatusWithId
argument_list|>
name|files
parameter_list|,
name|boolean
name|isOriginal
parameter_list|,
name|FileInfo
index|[]
name|result
parameter_list|,
name|ByteBuffer
index|[]
name|ppdResult
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: should local cache also be by fileId? Preserve the original logic for now.
assert|assert
name|result
operator|.
name|length
operator|==
name|files
operator|.
name|size
argument_list|()
assert|;
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|HdfsFileStatusWithId
name|fileWithId
range|:
name|files
control|)
block|{
operator|++
name|i
expr_stmt|;
name|FileStatus
name|file
init|=
name|fileWithId
operator|.
name|getFileStatus
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|file
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Long
name|fileId
init|=
name|fileWithId
operator|.
name|getFileId
argument_list|()
decl_stmt|;
name|FileInfo
name|fileInfo
init|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Info "
operator|+
operator|(
name|fileInfo
operator|==
literal|null
condition|?
literal|"not "
else|:
literal|""
operator|)
operator|+
literal|"cached for path: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileInfo
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|(
name|fileId
operator|!=
literal|null
operator|&&
name|fileInfo
operator|.
name|fileId
operator|!=
literal|null
operator|&&
name|fileId
operator|==
name|fileInfo
operator|.
name|fileId
operator|)
operator|||
operator|(
name|fileInfo
operator|.
name|modificationTime
operator|==
name|file
operator|.
name|getModificationTime
argument_list|()
operator|&&
name|fileInfo
operator|.
name|size
operator|==
name|file
operator|.
name|getLen
argument_list|()
operator|)
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|fileInfo
expr_stmt|;
continue|continue;
block|}
comment|// Invalidate
name|cache
operator|.
name|invalidate
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Meta-Info for : "
operator|+
name|path
operator|+
literal|" changed. CachedModificationTime: "
operator|+
name|fileInfo
operator|.
name|modificationTime
operator|+
literal|", CurrentModificationTime: "
operator|+
name|file
operator|.
name|getModificationTime
argument_list|()
operator|+
literal|", CachedLength: "
operator|+
name|fileInfo
operator|.
name|size
operator|+
literal|", CurrentLength: "
operator|+
name|file
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|put
parameter_list|(
name|Path
name|path
parameter_list|,
name|FileInfo
name|fileInfo
parameter_list|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|fileInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|Long
name|fileId
parameter_list|,
name|FileStatus
name|file
parameter_list|,
name|FileMetaInfo
name|fileMetaInfo
parameter_list|,
name|Reader
name|orcReader
parameter_list|)
throws|throws
name|IOException
block|{
name|cache
operator|.
name|put
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|FileInfo
argument_list|(
name|file
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|file
operator|.
name|getLen
argument_list|()
argument_list|,
name|orcReader
operator|.
name|getStripes
argument_list|()
argument_list|,
name|orcReader
operator|.
name|getStripeStatistics
argument_list|()
argument_list|,
name|orcReader
operator|.
name|getTypes
argument_list|()
argument_list|,
name|orcReader
operator|.
name|getOrcProtoFileStatistics
argument_list|()
argument_list|,
name|fileMetaInfo
argument_list|,
name|orcReader
operator|.
name|getWriterVersion
argument_list|()
argument_list|,
name|fileId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isBlocking
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPpd
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

