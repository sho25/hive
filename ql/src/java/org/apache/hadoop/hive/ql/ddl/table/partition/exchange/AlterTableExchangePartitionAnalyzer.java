begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
operator|.
name|exchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLSemanticAnalyzerFactory
operator|.
name|DDLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AbstractAlterTableAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
operator|.
name|PartitionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
operator|.
name|WriteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_comment
comment|/**  * Analyzer for exchange partition commands.  */
end_comment

begin_class
annotation|@
name|DDLType
argument_list|(
name|types
operator|=
name|HiveParser
operator|.
name|TOK_ALTERTABLE_EXCHANGEPARTITION
argument_list|)
specifier|public
class|class
name|AlterTableExchangePartitionAnalyzer
extends|extends
name|AbstractAlterTableAnalyzer
block|{
specifier|public
name|AlterTableExchangePartitionAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|analyzeCommand
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|ASTNode
name|command
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Table
name|destTable
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Table
name|sourceTable
init|=
name|getTable
argument_list|(
name|getUnescapedName
argument_list|(
operator|(
name|ASTNode
operator|)
name|command
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Get the partition specs
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpecs
init|=
name|getValidatedPartSpec
argument_list|(
name|sourceTable
argument_list|,
operator|(
name|ASTNode
operator|)
name|command
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|PartitionUtils
operator|.
name|validatePartitions
argument_list|(
name|conf
argument_list|,
name|partitionSpecs
argument_list|)
expr_stmt|;
name|boolean
name|sameColumns
init|=
name|MetaStoreUtils
operator|.
name|compareFieldColumns
argument_list|(
name|destTable
operator|.
name|getAllCols
argument_list|()
argument_list|,
name|sourceTable
operator|.
name|getAllCols
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|samePartitions
init|=
name|MetaStoreUtils
operator|.
name|compareFieldColumns
argument_list|(
name|destTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|sourceTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sameColumns
operator|||
operator|!
name|samePartitions
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|TABLES_INCOMPATIBLE_SCHEMAS
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
comment|// Exchange partition is not allowed with transactional tables.
comment|// If only source is transactional table, then target will see deleted rows too as no snapshot
comment|// isolation applicable for non-acid tables.
comment|// If only target is transactional table, then data would be visible to all ongoing transactions
comment|// affecting the snapshot isolation.
comment|// If both source and targets are transactional tables, then target partition may have delta/base
comment|// files with write IDs may not be valid. It may affect snapshot isolation for on-going txns as well.
if|if
condition|(
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|sourceTable
argument_list|)
operator|||
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|destTable
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|EXCHANGE_PARTITION_NOT_ALLOWED_WITH_TRANSACTIONAL_TABLES
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
comment|// check if source partition exists
name|PartitionUtils
operator|.
name|getPartitions
argument_list|(
name|db
argument_list|,
name|sourceTable
argument_list|,
name|partitionSpecs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Verify that the partitions specified are continuous
comment|// If a subpartition value is specified without specifying a partition's value then we throw an exception
name|int
name|counter
init|=
name|isPartitionValueContinuous
argument_list|(
name|sourceTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partitionSpecs
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|PARTITION_VALUE_NOT_CONTINUOUS
operator|.
name|getMsg
argument_list|(
name|partitionSpecs
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|destPartitions
init|=
literal|null
decl_stmt|;
try|try
block|{
name|destPartitions
operator|=
name|PartitionUtils
operator|.
name|getPartitions
argument_list|(
name|db
argument_list|,
name|destTable
argument_list|,
name|partitionSpecs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|ex
parameter_list|)
block|{
comment|// We should expect a semantic exception being throw as this partition should not be present.
block|}
if|if
condition|(
name|destPartitions
operator|!=
literal|null
condition|)
block|{
comment|// If any destination partition is present then throw a Semantic Exception.
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|PARTITION_EXISTS
operator|.
name|getMsg
argument_list|(
name|destPartitions
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|AlterTableExchangePartitionsDesc
name|desc
init|=
operator|new
name|AlterTableExchangePartitionsDesc
argument_list|(
name|sourceTable
argument_list|,
name|destTable
argument_list|,
name|partitionSpecs
argument_list|)
decl_stmt|;
name|rootTasks
operator|.
name|add
argument_list|(
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|getInputs
argument_list|()
argument_list|,
name|getOutputs
argument_list|()
argument_list|,
name|desc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|inputs
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|sourceTable
argument_list|)
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|destTable
argument_list|,
name|WriteType
operator|.
name|DDL_SHARED
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return>=0 if no subpartition value is specified without a partition's value being specified else it returns -1    */
specifier|private
name|int
name|isPartitionValueContinuous
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionKeys
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpecs
parameter_list|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FieldSchema
name|partitionKey
range|:
name|partitionKeys
control|)
block|{
if|if
condition|(
name|partitionSpecs
operator|.
name|containsKey
argument_list|(
name|partitionKey
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|counter
operator|++
expr_stmt|;
continue|continue;
block|}
return|return
name|partitionSpecs
operator|.
name|size
argument_list|()
operator|==
name|counter
condition|?
name|counter
else|:
operator|-
literal|1
return|;
block|}
return|return
name|counter
return|;
block|}
block|}
end_class

end_unit

