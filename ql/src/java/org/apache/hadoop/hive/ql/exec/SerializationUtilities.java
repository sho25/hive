begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|TimestampTZ
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|CopyOnFirstWriteProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorFileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveIgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveSequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AbstractOperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BaseWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SparkEdgeProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SparkWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardConstantListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardConstantMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardConstantStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objenesis
operator|.
name|strategy
operator|.
name|StdInstantiatorStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Kryo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|pool
operator|.
name|KryoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|pool
operator|.
name|KryoPool
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|serializers
operator|.
name|FieldSerializer
import|;
end_import

begin_comment
comment|/**  * Utilities related to serialization and deserialization.  */
end_comment

begin_class
specifier|public
class|class
name|SerializationUtilities
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
name|SerializationUtilities
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
class|class
name|Hook
block|{
specifier|public
name|boolean
name|preRead
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|Object
name|postRead
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Hook
argument_list|>
name|kryoTypeHooks
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Hook
name|globalHook
init|=
literal|null
decl_stmt|;
comment|/**    * Must be called before any serialization takes place (e.g. in some static/service init)!    * Not thread safe.    *    * Will not work if different classes are added in different order on two sides of the    * communication, due to explicit class registration that we use causing class ID mismatch.    * Some processing might be added for this later (e.g. sorting the overrides here if the order    * is hard to enforce, and making sure they are added symmetrically everywhere, or just    * reverting back to hardcoding stuff if all else fails).    * For now, this seems to work, but Kryo seems pretty brittle. Seems to be ok to add class on    * read side but not write side, the other way doesn't work. Kryo needs a proper event system,    * otherwise this is all rather brittle.    */
specifier|public
specifier|static
name|void
name|addKryoTypeHook
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Hook
name|hook
parameter_list|)
block|{
name|kryoTypeHooks
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
name|hook
argument_list|)
expr_stmt|;
block|}
comment|/**    * Must be called before any serialization takes place (e.g. in some static/service init)!    * Not thread safe.    *    * This is somewhat brittle because there's no way to add proper superclass hook in Kryo.    * On the other hand, it doesn't suffer from the mismatch problems that register() causes!    */
specifier|public
specifier|static
name|void
name|setGlobalHook
parameter_list|(
name|Hook
name|hook
parameter_list|)
block|{
name|globalHook
operator|=
name|hook
expr_stmt|;
block|}
comment|/**    * Provides general-purpose hooks for specific types, as well as a global hook.    */
specifier|private
specifier|static
class|class
name|KryoWithHooks
extends|extends
name|Kryo
block|{
specifier|private
name|Hook
name|globalHook
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|private
specifier|static
specifier|final
class|class
name|SerializerWithHook
extends|extends
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Serializer
block|{
specifier|private
specifier|final
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Serializer
name|old
decl_stmt|;
specifier|private
specifier|final
name|Hook
name|hook
decl_stmt|;
specifier|private
name|SerializerWithHook
parameter_list|(
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Serializer
name|old
parameter_list|,
name|Hook
name|hook
parameter_list|)
block|{
name|this
operator|.
name|old
operator|=
name|old
expr_stmt|;
name|this
operator|.
name|hook
operator|=
name|hook
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|read
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Input
name|input
parameter_list|,
name|Class
name|type
parameter_list|)
block|{
return|return
name|hook
operator|.
name|preRead
argument_list|(
name|type
argument_list|)
condition|?
name|hook
operator|.
name|postRead
argument_list|(
name|old
operator|.
name|read
argument_list|(
name|kryo
argument_list|,
name|input
argument_list|,
name|type
argument_list|)
argument_list|)
else|:
name|old
operator|.
name|read
argument_list|(
name|kryo
argument_list|,
name|input
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Output
name|output
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
comment|// Add write hooks if needed.
name|old
operator|.
name|write
argument_list|(
name|kryo
argument_list|,
name|output
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Kryo
name|processHooks
parameter_list|(
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Hook
argument_list|>
name|hooks
parameter_list|,
name|Hook
name|globalHook
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Hook
argument_list|>
name|e
range|:
name|hooks
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|register
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|SerializerWithHook
argument_list|(
name|newDefaultSerializer
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|globalHook
operator|=
name|globalHook
expr_stmt|;
return|return
name|this
return|;
comment|// To make it more explicit below that processHooks needs to be called last.
block|}
comment|// The globalHook stuff. There's no proper way to insert this, so we add it everywhere.
specifier|private
name|Hook
name|ponderGlobalPreReadHook
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|Hook
name|globalHook
init|=
name|this
operator|.
name|globalHook
decl_stmt|;
return|return
operator|(
name|globalHook
operator|!=
literal|null
operator|&&
name|globalHook
operator|.
name|preRead
argument_list|(
name|clazz
argument_list|)
operator|)
condition|?
name|globalHook
else|:
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|ponderGlobalPostReadHook
parameter_list|(
name|Hook
name|hook
parameter_list|,
name|T
name|result
parameter_list|)
block|{
return|return
operator|(
name|hook
operator|==
literal|null
operator|)
condition|?
name|result
else|:
operator|(
name|T
operator|)
name|hook
operator|.
name|postRead
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|private
name|Object
name|ponderGlobalPostHook
parameter_list|(
name|Object
name|result
parameter_list|)
block|{
name|Hook
name|globalHook
init|=
name|this
operator|.
name|globalHook
decl_stmt|;
return|return
operator|(
name|globalHook
operator|!=
literal|null
operator|)
condition|?
name|globalHook
operator|.
name|postRead
argument_list|(
name|result
argument_list|)
else|:
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|readClassAndObject
parameter_list|(
name|Input
name|input
parameter_list|)
block|{
return|return
name|ponderGlobalPostHook
argument_list|(
name|super
operator|.
name|readClassAndObject
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Registration
name|readClass
parameter_list|(
name|Input
name|input
parameter_list|)
block|{
name|Registration
name|reg
init|=
name|super
operator|.
name|readClass
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|reg
operator|!=
literal|null
condition|)
block|{
name|ponderGlobalPreReadHook
argument_list|(
name|reg
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// Needed to intercept readClassAndObject.
block|}
return|return
name|reg
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|readObjectOrNull
parameter_list|(
name|Input
name|input
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Hook
name|hook
init|=
name|ponderGlobalPreReadHook
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|T
name|result
init|=
name|super
operator|.
name|readObjectOrNull
argument_list|(
name|input
argument_list|,
name|type
argument_list|)
decl_stmt|;
return|return
name|ponderGlobalPostReadHook
argument_list|(
name|hook
argument_list|,
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|readObjectOrNull
parameter_list|(
name|Input
name|input
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Serializer
name|serializer
parameter_list|)
block|{
name|Hook
name|hook
init|=
name|ponderGlobalPreReadHook
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|T
name|result
init|=
name|super
operator|.
name|readObjectOrNull
argument_list|(
name|input
argument_list|,
name|type
argument_list|,
name|serializer
argument_list|)
decl_stmt|;
return|return
name|ponderGlobalPostReadHook
argument_list|(
name|hook
argument_list|,
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|readObject
parameter_list|(
name|Input
name|input
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Hook
name|hook
init|=
name|ponderGlobalPreReadHook
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|T
name|result
init|=
name|super
operator|.
name|readObject
argument_list|(
name|input
argument_list|,
name|type
argument_list|)
decl_stmt|;
return|return
name|ponderGlobalPostReadHook
argument_list|(
name|hook
argument_list|,
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|readObject
parameter_list|(
name|Input
name|input
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Serializer
name|serializer
parameter_list|)
block|{
name|Hook
name|hook
init|=
name|ponderGlobalPreReadHook
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|T
name|result
init|=
name|super
operator|.
name|readObject
argument_list|(
name|input
argument_list|,
name|type
argument_list|,
name|serializer
argument_list|)
decl_stmt|;
return|return
name|ponderGlobalPostReadHook
argument_list|(
name|hook
argument_list|,
name|result
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|KryoFactory
name|factory
init|=
operator|new
name|KryoFactory
argument_list|()
block|{
specifier|public
name|Kryo
name|create
parameter_list|()
block|{
name|KryoWithHooks
name|kryo
init|=
operator|new
name|KryoWithHooks
argument_list|()
decl_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|,
operator|new
name|SqlDateSerializer
argument_list|()
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|.
name|class
argument_list|,
operator|new
name|TimestampSerializer
argument_list|()
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|TimestampTZ
operator|.
name|class
argument_list|,
operator|new
name|TimestampTZSerializer
argument_list|()
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|Path
operator|.
name|class
argument_list|,
operator|new
name|PathSerializer
argument_list|()
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
operator|new
name|ArraysAsListSerializer
argument_list|()
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|CopyOnFirstWriteProperties
operator|.
name|class
argument_list|,
operator|new
name|CopyOnFirstWritePropertiesSerializer
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Kryo
operator|.
name|DefaultInstantiatorStrategy
operator|)
name|kryo
operator|.
name|getInstantiatorStrategy
argument_list|()
operator|)
operator|.
name|setFallbackInstantiatorStrategy
argument_list|(
operator|new
name|StdInstantiatorStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|removeField
argument_list|(
name|kryo
argument_list|,
name|Operator
operator|.
name|class
argument_list|,
literal|"colExprMap"
argument_list|)
expr_stmt|;
name|removeField
argument_list|(
name|kryo
argument_list|,
name|AbstractOperatorDesc
operator|.
name|class
argument_list|,
literal|"statistics"
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|MapWork
operator|.
name|class
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|ReduceWork
operator|.
name|class
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|TableDesc
operator|.
name|class
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|UnionOperator
operator|.
name|class
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|FileSinkOperator
operator|.
name|class
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|VectorFileSinkOperator
operator|.
name|class
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|StandardConstantListObjectInspector
operator|.
name|class
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|StandardConstantMapObjectInspector
operator|.
name|class
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|StandardConstantStructObjectInspector
operator|.
name|class
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|RCFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|HiveSequenceFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|SparkEdgeProperty
operator|.
name|class
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|SparkWork
operator|.
name|class
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|Pair
operator|.
name|class
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|MemoryMonitorInfo
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// This must be called after all the explicit register calls.
return|return
name|kryo
operator|.
name|processHooks
argument_list|(
name|kryoTypeHooks
argument_list|,
name|globalHook
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// Bounded queue could be specified here but that will lead to blocking.
comment|// ConcurrentLinkedQueue is unbounded and will release soft referenced kryo instances under
comment|// memory pressure.
specifier|private
specifier|static
name|KryoPool
name|kryoPool
init|=
operator|new
name|KryoPool
operator|.
name|Builder
argument_list|(
name|factory
argument_list|)
operator|.
name|softReferences
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
comment|/**    * By default, kryo pool uses ConcurrentLinkedQueue which is unbounded. To facilitate reuse of    * kryo object call releaseKryo() after done using the kryo instance. The class loader for the    * kryo instance will be set to current thread's context class loader.    *    * @return kryo instance    */
specifier|public
specifier|static
name|Kryo
name|borrowKryo
parameter_list|()
block|{
name|Kryo
name|kryo
init|=
name|kryoPool
operator|.
name|borrow
argument_list|()
decl_stmt|;
name|kryo
operator|.
name|setClassLoader
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|kryo
return|;
block|}
comment|/**    * Release kryo instance back to the pool.    *    * @param kryo - kryo instance to be released    */
specifier|public
specifier|static
name|void
name|releaseKryo
parameter_list|(
name|Kryo
name|kryo
parameter_list|)
block|{
name|kryoPool
operator|.
name|release
argument_list|(
name|kryo
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|removeField
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Class
name|type
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|FieldSerializer
name|fld
init|=
operator|new
name|FieldSerializer
argument_list|(
name|kryo
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|fld
operator|.
name|removeField
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|register
argument_list|(
name|type
argument_list|,
name|fld
argument_list|)
expr_stmt|;
block|}
comment|/**    * Kryo serializer for timestamp.    */
specifier|private
specifier|static
class|class
name|TimestampSerializer
extends|extends
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Serializer
argument_list|<
name|Timestamp
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Timestamp
name|read
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Input
name|input
parameter_list|,
name|Class
argument_list|<
name|Timestamp
argument_list|>
name|clazz
parameter_list|)
block|{
name|Timestamp
name|ts
init|=
operator|new
name|Timestamp
argument_list|(
name|input
operator|.
name|readLong
argument_list|()
argument_list|)
decl_stmt|;
name|ts
operator|.
name|setNanos
argument_list|(
name|input
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ts
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Output
name|output
parameter_list|,
name|Timestamp
name|ts
parameter_list|)
block|{
name|output
operator|.
name|writeLong
argument_list|(
name|ts
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeInt
argument_list|(
name|ts
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TimestampTZSerializer
extends|extends
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Serializer
argument_list|<
name|TimestampTZ
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Output
name|output
parameter_list|,
name|TimestampTZ
name|object
parameter_list|)
block|{
name|output
operator|.
name|writeLong
argument_list|(
name|object
operator|.
name|getEpochSecond
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeInt
argument_list|(
name|object
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeString
argument_list|(
name|object
operator|.
name|getZonedDateTime
argument_list|()
operator|.
name|getZone
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TimestampTZ
name|read
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Input
name|input
parameter_list|,
name|Class
argument_list|<
name|TimestampTZ
argument_list|>
name|type
parameter_list|)
block|{
name|long
name|seconds
init|=
name|input
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|int
name|nanos
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|String
name|zoneId
init|=
name|input
operator|.
name|readString
argument_list|()
decl_stmt|;
return|return
operator|new
name|TimestampTZ
argument_list|(
name|seconds
argument_list|,
name|nanos
argument_list|,
name|ZoneId
operator|.
name|of
argument_list|(
name|zoneId
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Custom Kryo serializer for sql date, otherwise Kryo gets confused between    * java.sql.Date and java.util.Date while deserializing    */
specifier|private
specifier|static
class|class
name|SqlDateSerializer
extends|extends
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Serializer
argument_list|<
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|java
operator|.
name|sql
operator|.
name|Date
name|read
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Input
name|input
parameter_list|,
name|Class
argument_list|<
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
name|input
operator|.
name|readLong
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Output
name|output
parameter_list|,
name|java
operator|.
name|sql
operator|.
name|Date
name|sqlDate
parameter_list|)
block|{
name|output
operator|.
name|writeLong
argument_list|(
name|sqlDate
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PathSerializer
extends|extends
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Serializer
argument_list|<
name|Path
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Output
name|output
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
name|output
operator|.
name|writeString
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|read
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Input
name|input
parameter_list|,
name|Class
argument_list|<
name|Path
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|input
operator|.
name|readString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * A kryo {@link Serializer} for lists created via {@link Arrays#asList(Object...)}.    *<p>    * Note: This serializer does not support cyclic references, so if one of the objects    * gets set the list as attribute this might cause an error during deserialization.    *</p>    *<p/>    * This is from kryo-serializers package. Added explicitly to avoid classpath issues.    */
specifier|private
specifier|static
class|class
name|ArraysAsListSerializer
extends|extends
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Serializer
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
specifier|private
name|Field
name|_arrayField
decl_stmt|;
specifier|public
name|ArraysAsListSerializer
parameter_list|()
block|{
try|try
block|{
name|_arrayField
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"java.util.Arrays$ArrayList"
argument_list|)
operator|.
name|getDeclaredField
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|_arrayField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Immutable causes #copy(obj) to return the original object
name|setImmutable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
argument_list|>
name|read
parameter_list|(
specifier|final
name|Kryo
name|kryo
parameter_list|,
specifier|final
name|Input
name|input
parameter_list|,
specifier|final
name|Class
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|type
parameter_list|)
block|{
specifier|final
name|int
name|length
init|=
name|input
operator|.
name|readInt
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|componentType
init|=
name|kryo
operator|.
name|readClass
argument_list|(
name|input
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|componentType
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|componentType
operator|=
name|getPrimitiveWrapperClass
argument_list|(
name|componentType
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|Object
name|items
init|=
name|Array
operator|.
name|newInstance
argument_list|(
name|componentType
argument_list|,
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Array
operator|.
name|set
argument_list|(
name|items
argument_list|,
name|i
argument_list|,
name|kryo
operator|.
name|readClassAndObject
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|items
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|Kryo
name|kryo
parameter_list|,
specifier|final
name|Output
name|output
parameter_list|,
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|obj
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Object
index|[]
name|array
init|=
operator|(
name|Object
index|[]
operator|)
name|_arrayField
operator|.
name|get
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeInt
argument_list|(
name|array
operator|.
name|length
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|componentType
init|=
name|array
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
name|kryo
operator|.
name|writeClass
argument_list|(
name|output
argument_list|,
name|componentType
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Object
name|item
range|:
name|array
control|)
block|{
name|kryo
operator|.
name|writeClassAndObject
argument_list|(
name|output
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// Don't eat and wrap RuntimeExceptions because the ObjectBuffer.write...
comment|// handles SerializationException specifically (resizing the buffer)...
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|getPrimitiveWrapperClass
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|equals
argument_list|(
name|Long
operator|.
name|TYPE
argument_list|)
condition|)
block|{
return|return
name|Long
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|)
condition|)
block|{
return|return
name|Integer
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|equals
argument_list|(
name|Double
operator|.
name|TYPE
argument_list|)
condition|)
block|{
return|return
name|Double
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|equals
argument_list|(
name|Float
operator|.
name|TYPE
argument_list|)
condition|)
block|{
return|return
name|Float
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|equals
argument_list|(
name|Character
operator|.
name|TYPE
argument_list|)
condition|)
block|{
return|return
name|Character
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|equals
argument_list|(
name|Short
operator|.
name|TYPE
argument_list|)
condition|)
block|{
return|return
name|Short
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|equals
argument_list|(
name|Byte
operator|.
name|TYPE
argument_list|)
condition|)
block|{
return|return
name|Byte
operator|.
name|class
return|;
block|}
block|}
return|return
name|c
return|;
block|}
block|}
comment|/**    * CopyOnFirstWriteProperties needs a special serializer, since it extends Properties,    * which implements Map, so MapSerializer would be used for it by default. Yet it has    * the additional 'interned' field that the standard MapSerializer doesn't handle    * properly. But FieldSerializer doesn't work for it as well, because the Hashtable    * superclass declares most of its fields transient.    */
specifier|private
specifier|static
class|class
name|CopyOnFirstWritePropertiesSerializer
extends|extends
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|serializers
operator|.
name|MapSerializer
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Output
name|output
parameter_list|,
name|Map
name|map
parameter_list|)
block|{
name|super
operator|.
name|write
argument_list|(
name|kryo
argument_list|,
name|output
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|CopyOnFirstWriteProperties
name|p
init|=
operator|(
name|CopyOnFirstWriteProperties
operator|)
name|map
decl_stmt|;
name|Properties
name|ip
init|=
name|p
operator|.
name|getInterned
argument_list|()
decl_stmt|;
name|kryo
operator|.
name|writeObjectOrNull
argument_list|(
name|output
argument_list|,
name|ip
argument_list|,
name|Properties
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
name|read
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Input
name|input
parameter_list|,
name|Class
argument_list|<
name|Map
argument_list|>
name|type
parameter_list|)
block|{
name|Map
name|map
init|=
name|super
operator|.
name|read
argument_list|(
name|kryo
argument_list|,
name|input
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|Properties
name|ip
init|=
name|kryo
operator|.
name|readObjectOrNull
argument_list|(
name|input
argument_list|,
name|Properties
operator|.
name|class
argument_list|)
decl_stmt|;
operator|(
operator|(
name|CopyOnFirstWriteProperties
operator|)
name|map
operator|)
operator|.
name|setInterned
argument_list|(
name|ip
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
block|}
comment|/**    * Serializes the plan.    *    * @param plan The plan, such as QueryPlan, MapredWork, etc.    * @param out  The stream to write to.    */
specifier|public
specifier|static
name|void
name|serializePlan
parameter_list|(
name|Object
name|plan
parameter_list|,
name|OutputStream
name|out
parameter_list|)
block|{
name|serializePlan
argument_list|(
name|plan
argument_list|,
name|out
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|serializePlan
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Object
name|plan
parameter_list|,
name|OutputStream
name|out
parameter_list|)
block|{
name|serializePlan
argument_list|(
name|kryo
argument_list|,
name|plan
argument_list|,
name|out
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|serializePlan
parameter_list|(
name|Object
name|plan
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|boolean
name|cloningPlan
parameter_list|)
block|{
name|Kryo
name|kryo
init|=
name|borrowKryo
argument_list|()
decl_stmt|;
try|try
block|{
name|serializePlan
argument_list|(
name|kryo
argument_list|,
name|plan
argument_list|,
name|out
argument_list|,
name|cloningPlan
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|releaseKryo
argument_list|(
name|kryo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|serializePlan
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Object
name|plan
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|boolean
name|cloningPlan
parameter_list|)
block|{
name|PerfLogger
name|perfLogger
init|=
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
decl_stmt|;
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|SERIALIZE_PLAN
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Serializing "
operator|+
name|plan
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" using kryo"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cloningPlan
condition|)
block|{
name|serializeObjectByKryo
argument_list|(
name|kryo
argument_list|,
name|plan
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serializeObjectByKryo
argument_list|(
name|kryo
argument_list|,
name|plan
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|SERIALIZE_PLAN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deserializes the plan.    *    * @param in        The stream to read from.    * @param planClass class of plan    * @return The plan, such as QueryPlan, MapredWork, etc.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|deserializePlan
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|planClass
parameter_list|)
block|{
return|return
name|deserializePlan
argument_list|(
name|in
argument_list|,
name|planClass
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|deserializePlan
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|planClass
parameter_list|)
block|{
return|return
name|deserializePlan
argument_list|(
name|kryo
argument_list|,
name|in
argument_list|,
name|planClass
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|deserializePlan
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|planClass
parameter_list|,
name|boolean
name|cloningPlan
parameter_list|)
block|{
name|Kryo
name|kryo
init|=
name|borrowKryo
argument_list|()
decl_stmt|;
name|T
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|deserializePlan
argument_list|(
name|kryo
argument_list|,
name|in
argument_list|,
name|planClass
argument_list|,
name|cloningPlan
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|releaseKryo
argument_list|(
name|kryo
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|deserializePlan
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|planClass
parameter_list|,
name|boolean
name|cloningPlan
parameter_list|)
block|{
name|PerfLogger
name|perfLogger
init|=
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
decl_stmt|;
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|DESERIALIZE_PLAN
argument_list|)
expr_stmt|;
name|T
name|plan
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deserializing "
operator|+
name|planClass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" using kryo"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cloningPlan
condition|)
block|{
name|plan
operator|=
name|deserializeObjectByKryo
argument_list|(
name|kryo
argument_list|,
name|in
argument_list|,
name|planClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|plan
operator|=
name|deserializeObjectByKryo
argument_list|(
name|kryo
argument_list|,
name|in
argument_list|,
name|planClass
argument_list|)
expr_stmt|;
block|}
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|DESERIALIZE_PLAN
argument_list|)
expr_stmt|;
return|return
name|plan
return|;
block|}
comment|/**    * Clones using the powers of XML. Do not use unless necessary.    * @param plan The plan.    * @return The clone.    */
specifier|public
specifier|static
name|MapredWork
name|clonePlan
parameter_list|(
name|MapredWork
name|plan
parameter_list|)
block|{
comment|// TODO: need proper clone. Meanwhile, let's at least keep this horror in one place
name|PerfLogger
name|perfLogger
init|=
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
decl_stmt|;
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|CLONE_PLAN
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|op
init|=
name|plan
operator|.
name|getAnyOperator
argument_list|()
decl_stmt|;
name|CompilationOpContext
name|ctx
init|=
operator|(
name|op
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|op
operator|.
name|getCompilationOpContext
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|serializePlan
argument_list|(
name|plan
argument_list|,
name|baos
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MapredWork
name|newPlan
init|=
name|deserializePlan
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|MapredWork
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Restore the context.
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|newOp
range|:
name|newPlan
operator|.
name|getAllOperators
argument_list|()
control|)
block|{
name|newOp
operator|.
name|setCompilationOpContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|CLONE_PLAN
argument_list|)
expr_stmt|;
return|return
name|newPlan
return|;
block|}
comment|/**    * Clones using the powers of XML. Do not use unless necessary.    * @param roots The roots.    * @return The clone.    */
specifier|public
specifier|static
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|cloneOperatorTree
parameter_list|(
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|roots
parameter_list|)
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|CompilationOpContext
name|ctx
init|=
name|roots
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|roots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCompilationOpContext
argument_list|()
decl_stmt|;
name|serializePlan
argument_list|(
name|roots
argument_list|,
name|baos
argument_list|,
literal|true
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
name|deserializePlan
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|roots
operator|.
name|getClass
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Restore the context.
name|LinkedList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|newOps
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|result
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|newOps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|newOp
init|=
name|newOps
operator|.
name|poll
argument_list|()
decl_stmt|;
name|newOp
operator|.
name|setCompilationOpContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|children
init|=
name|newOp
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
name|newOps
operator|.
name|addAll
argument_list|(
name|children
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|cloneOperatorTree
parameter_list|(
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|roots
parameter_list|,
name|int
name|indexForTezUnion
parameter_list|)
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|CompilationOpContext
name|ctx
init|=
name|roots
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|roots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCompilationOpContext
argument_list|()
decl_stmt|;
name|serializePlan
argument_list|(
name|roots
argument_list|,
name|baos
argument_list|,
literal|true
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
name|deserializePlan
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|roots
operator|.
name|getClass
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Restore the context.
name|LinkedList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|newOps
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|result
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|newOps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|newOp
init|=
name|newOps
operator|.
name|poll
argument_list|()
decl_stmt|;
name|newOp
operator|.
name|setIndexForTezUnion
argument_list|(
name|indexForTezUnion
argument_list|)
expr_stmt|;
name|newOp
operator|.
name|setCompilationOpContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|children
init|=
name|newOp
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
name|newOps
operator|.
name|addAll
argument_list|(
name|children
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Clones using the powers of XML. Do not use unless necessary.    * @param plan The plan.    * @return The clone.    */
specifier|public
specifier|static
name|BaseWork
name|cloneBaseWork
parameter_list|(
name|BaseWork
name|plan
parameter_list|)
block|{
name|PerfLogger
name|perfLogger
init|=
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
decl_stmt|;
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|CLONE_PLAN
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|op
init|=
name|plan
operator|.
name|getAnyRootOperator
argument_list|()
decl_stmt|;
name|CompilationOpContext
name|ctx
init|=
operator|(
name|op
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|op
operator|.
name|getCompilationOpContext
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|serializePlan
argument_list|(
name|plan
argument_list|,
name|baos
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|BaseWork
name|newPlan
init|=
name|deserializePlan
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|plan
operator|.
name|getClass
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Restore the context.
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|newOp
range|:
name|newPlan
operator|.
name|getAllOperators
argument_list|()
control|)
block|{
name|newOp
operator|.
name|setCompilationOpContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|CLONE_PLAN
argument_list|)
expr_stmt|;
return|return
name|newPlan
return|;
block|}
comment|/**    * @param plan Usually of type MapredWork, MapredLocalWork etc.    * @param out stream in which serialized plan is written into    */
specifier|private
specifier|static
name|void
name|serializeObjectByKryo
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Object
name|plan
parameter_list|,
name|OutputStream
name|out
parameter_list|)
block|{
name|Output
name|output
init|=
operator|new
name|Output
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|kryo
operator|.
name|setClassLoader
argument_list|(
name|Utilities
operator|.
name|getSessionSpecifiedClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|writeObject
argument_list|(
name|output
argument_list|,
name|plan
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|deserializeObjectByKryo
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|Input
name|inp
init|=
operator|new
name|Input
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|kryo
operator|.
name|setClassLoader
argument_list|(
name|Utilities
operator|.
name|getSessionSpecifiedClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|T
name|t
init|=
name|kryo
operator|.
name|readObject
argument_list|(
name|inp
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
name|inp
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|t
return|;
block|}
comment|/**    * Serializes expression via Kryo.    * @param expr Expression.    * @return Bytes.    */
specifier|public
specifier|static
name|byte
index|[]
name|serializeExpressionToKryo
parameter_list|(
name|ExprNodeGenericFuncDesc
name|expr
parameter_list|)
block|{
return|return
name|serializeObjectToKryo
argument_list|(
name|expr
argument_list|)
return|;
block|}
comment|/**    * Deserializes expression from Kryo.    * @param bytes Bytes containing the expression.    * @return Expression; null if deserialization succeeded, but the result type is incorrect.    */
specifier|public
specifier|static
name|ExprNodeGenericFuncDesc
name|deserializeExpressionFromKryo
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|deserializeObjectFromKryo
argument_list|(
name|bytes
argument_list|,
name|ExprNodeGenericFuncDesc
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|serializeExpression
parameter_list|(
name|ExprNodeGenericFuncDesc
name|expr
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|serializeExpressionToKryo
argument_list|(
name|expr
argument_list|)
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"UTF-8 support required"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|ExprNodeGenericFuncDesc
name|deserializeExpression
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|byte
index|[]
name|bytes
decl_stmt|;
try|try
block|{
name|bytes
operator|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|s
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"UTF-8 support required"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
return|return
name|deserializeExpressionFromKryo
argument_list|(
name|bytes
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|serializeObjectToKryo
parameter_list|(
name|Serializable
name|object
parameter_list|)
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Output
name|output
init|=
operator|new
name|Output
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|Kryo
name|kryo
init|=
name|borrowKryo
argument_list|()
decl_stmt|;
try|try
block|{
name|kryo
operator|.
name|writeObject
argument_list|(
name|output
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|releaseKryo
argument_list|(
name|kryo
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Serializable
parameter_list|>
name|T
name|deserializeObjectFromKryo
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|Input
name|inp
init|=
operator|new
name|Input
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
name|Kryo
name|kryo
init|=
name|borrowKryo
argument_list|()
decl_stmt|;
name|T
name|func
init|=
literal|null
decl_stmt|;
try|try
block|{
name|func
operator|=
name|kryo
operator|.
name|readObject
argument_list|(
name|inp
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|releaseKryo
argument_list|(
name|kryo
argument_list|)
expr_stmt|;
block|}
name|inp
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|func
return|;
block|}
specifier|public
specifier|static
name|String
name|serializeObject
parameter_list|(
name|Serializable
name|expr
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|serializeObjectToKryo
argument_list|(
name|expr
argument_list|)
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"UTF-8 support required"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Serializable
parameter_list|>
name|T
name|deserializeObject
parameter_list|(
name|String
name|s
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
try|try
block|{
return|return
name|deserializeObjectFromKryo
argument_list|(
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|s
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|clazz
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"UTF-8 support required"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

