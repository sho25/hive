begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Action that gets invoked for trigger violations.  */
end_comment

begin_class
specifier|public
class|class
name|Action
block|{
specifier|public
enum|enum
name|Type
block|{
name|KILL_QUERY
argument_list|(
literal|"KILL"
argument_list|)
block|,
name|MOVE_TO_POOL
argument_list|(
literal|"MOVE TO"
argument_list|)
block|;
name|String
name|displayName
decl_stmt|;
name|Type
parameter_list|(
specifier|final
name|String
name|displayName
parameter_list|)
block|{
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
block|}
specifier|public
name|String
name|getDisplayName
parameter_list|()
block|{
return|return
name|displayName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|displayName
return|;
block|}
block|}
specifier|private
specifier|final
name|Type
name|type
decl_stmt|;
specifier|private
specifier|final
name|String
name|poolName
decl_stmt|;
specifier|public
specifier|static
name|Action
name|fromMetastoreExpression
parameter_list|(
name|String
name|metastoreActionExpression
parameter_list|)
block|{
if|if
condition|(
name|metastoreActionExpression
operator|.
name|equalsIgnoreCase
argument_list|(
name|Type
operator|.
name|KILL_QUERY
operator|.
name|getDisplayName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|Action
argument_list|(
name|Type
operator|.
name|KILL_QUERY
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|String
name|poolName
init|=
name|metastoreActionExpression
operator|.
name|substring
argument_list|(
name|Type
operator|.
name|MOVE_TO_POOL
operator|.
name|getDisplayName
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|poolName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid move action expression ("
operator|+
name|metastoreActionExpression
operator|+
literal|"). Pool "
operator|+
literal|"name is empty"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|new
name|Action
argument_list|(
name|Type
operator|.
name|MOVE_TO_POOL
argument_list|,
name|poolName
argument_list|)
return|;
block|}
block|}
block|}
specifier|public
name|Action
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Action
parameter_list|(
name|Type
name|type
parameter_list|,
name|String
name|poolName
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|MOVE_TO_POOL
operator|&&
operator|(
name|poolName
operator|==
literal|null
operator|||
name|poolName
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Pool name cannot be null or empty for action type "
operator|+
name|type
argument_list|)
throw|;
block|}
name|this
operator|.
name|poolName
operator|=
name|poolName
expr_stmt|;
block|}
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|String
name|getPoolName
parameter_list|()
block|{
return|return
name|poolName
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
operator|!
operator|(
name|other
operator|instanceof
name|Action
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Action
name|otherAction
init|=
operator|(
name|Action
operator|)
name|other
decl_stmt|;
return|return
name|type
operator|==
name|otherAction
operator|.
name|type
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|poolName
argument_list|,
name|otherAction
operator|.
name|poolName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
name|poolName
operator|==
literal|null
condition|?
literal|31
else|:
literal|31
operator|*
name|poolName
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|hash
operator|+=
name|type
operator|==
literal|null
condition|?
literal|31
operator|*
name|hash
else|:
literal|31
operator|*
name|hash
operator|*
name|type
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|hash
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|type
operator|.
name|getDisplayName
argument_list|()
operator|+
operator|(
name|poolName
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|poolName
operator|)
return|;
block|}
block|}
end_class

end_unit

