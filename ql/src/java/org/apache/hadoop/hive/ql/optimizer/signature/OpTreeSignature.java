begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_comment
comment|/**  * Operator tree signature.  */
end_comment

begin_class
specifier|public
class|class
name|OpTreeSignature
block|{
specifier|private
name|int
name|hashCode
decl_stmt|;
specifier|private
name|OpSignature
name|sig
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|OpTreeSignature
argument_list|>
name|parentSig
decl_stmt|;
name|OpTreeSignature
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
parameter_list|,
name|OpTreeSignatureFactory
name|osf
parameter_list|)
block|{
name|sig
operator|=
name|OpSignature
operator|.
name|of
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|parentSig
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|parentSig
operator|.
name|add
argument_list|(
name|osf
operator|.
name|getSignature
argument_list|(
name|parentOp
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hashCode
operator|=
name|Objects
operator|.
name|hash
argument_list|(
name|sig
argument_list|,
name|parentSig
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|OpTreeSignature
name|of
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|root
parameter_list|)
block|{
return|return
name|of
argument_list|(
name|root
argument_list|,
name|OpTreeSignatureFactory
operator|.
name|DIRECT
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OpTreeSignature
name|of
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|,
name|OpTreeSignatureFactory
name|osf
parameter_list|)
block|{
return|return
operator|new
name|OpTreeSignature
argument_list|(
name|op
argument_list|,
name|osf
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|OpTreeSignature
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
name|OpTreeSignature
name|o
init|=
operator|(
name|OpTreeSignature
operator|)
name|obj
decl_stmt|;
return|return
name|sig
operator|.
name|equals
argument_list|(
name|o
operator|.
name|sig
argument_list|)
operator|&&
name|parentSig
operator|.
name|equals
argument_list|(
name|o
operator|.
name|parentSig
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
literal|""
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|pad
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|pad
operator|+
literal|"hashcode:"
operator|+
name|hashCode
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sig
operator|.
name|toString
argument_list|(
name|pad
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|OpTreeSignature
name|p
range|:
name|parentSig
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|p
operator|.
name|toString
argument_list|(
name|pad
operator|+
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

