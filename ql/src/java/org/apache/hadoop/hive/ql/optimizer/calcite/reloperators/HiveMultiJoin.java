begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|AbstractRelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|CalciteSemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|TraitsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * A HiveMultiJoin represents a succession of binary joins.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|HiveMultiJoin
extends|extends
name|AbstractRelNode
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
decl_stmt|;
specifier|private
specifier|final
name|RexNode
name|condition
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|rowType
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|joinInputs
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|JoinRelType
argument_list|>
name|joinTypes
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|filters
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|outerJoin
decl_stmt|;
specifier|private
specifier|final
name|JoinPredicateInfo
name|joinPredInfo
decl_stmt|;
comment|/**    * Constructs a MultiJoin.    *    * @param cluster               cluster that join belongs to    * @param inputs                inputs into this multi-join    * @param condition             join filter applicable to this join node    * @param rowType               row type of the join result of this node    * @param joinInputs                * @param joinTypes             the join type corresponding to each input; if    *                              an input is null-generating in a left or right    *                              outer join, the entry indicates the type of    *                              outer join; otherwise, the entry is set to    *                              INNER    * @param filters               filters associated with each join    *                              input    */
specifier|public
name|HiveMultiJoin
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|joinInputs
parameter_list|,
name|List
argument_list|<
name|JoinRelType
argument_list|>
name|joinTypes
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|filters
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|TraitsUtil
operator|.
name|getDefaultTraitSet
argument_list|(
name|cluster
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputs
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|inputs
argument_list|)
expr_stmt|;
name|this
operator|.
name|condition
operator|=
name|condition
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|rowType
expr_stmt|;
assert|assert
name|joinInputs
operator|.
name|size
argument_list|()
operator|==
name|joinTypes
operator|.
name|size
argument_list|()
assert|;
name|this
operator|.
name|joinInputs
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|joinInputs
argument_list|)
expr_stmt|;
name|this
operator|.
name|joinTypes
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|joinTypes
argument_list|)
expr_stmt|;
name|this
operator|.
name|filters
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|this
operator|.
name|outerJoin
operator|=
name|containsOuter
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|joinPredInfo
operator|=
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
operator|.
name|constructJoinPredicateInfo
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteSemanticException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|replaceInput
parameter_list|(
name|int
name|ordinalInParent
parameter_list|,
name|RelNode
name|p
parameter_list|)
block|{
name|inputs
operator|.
name|set
argument_list|(
name|ordinalInParent
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|traitSet
operator|.
name|containsIfApplicable
argument_list|(
name|HiveRelNode
operator|.
name|CONVENTION
argument_list|)
assert|;
return|return
operator|new
name|HiveMultiJoin
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|inputs
argument_list|,
name|condition
argument_list|,
name|rowType
argument_list|,
name|joinInputs
argument_list|,
name|joinTypes
argument_list|,
name|filters
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|explainTerms
parameter_list|(
name|RelWriter
name|pw
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|joinsString
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|joinInputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|joinInputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|left
argument_list|)
operator|.
name|append
argument_list|(
literal|" - "
argument_list|)
operator|.
name|append
argument_list|(
name|joinInputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|right
argument_list|)
operator|.
name|append
argument_list|(
literal|" : "
argument_list|)
operator|.
name|append
argument_list|(
name|joinTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|joinsString
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|explainTerms
argument_list|(
name|pw
argument_list|)
expr_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RelNode
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|inputs
argument_list|)
control|)
block|{
name|pw
operator|.
name|input
argument_list|(
literal|"input#"
operator|+
name|ord
operator|.
name|i
argument_list|,
name|ord
operator|.
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|pw
operator|.
name|item
argument_list|(
literal|"condition"
argument_list|,
name|condition
argument_list|)
operator|.
name|item
argument_list|(
literal|"joinsDescription"
argument_list|,
name|joinsString
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
return|return
name|rowType
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RelNode
argument_list|>
name|getInputs
parameter_list|()
block|{
return|return
name|inputs
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RexNode
argument_list|>
name|getChildExps
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|condition
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|accept
parameter_list|(
name|RexShuttle
name|shuttle
parameter_list|)
block|{
name|RexNode
name|joinFilter
init|=
name|shuttle
operator|.
name|apply
argument_list|(
name|this
operator|.
name|condition
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinFilter
operator|==
name|this
operator|.
name|condition
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|HiveMultiJoin
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|inputs
argument_list|,
name|joinFilter
argument_list|,
name|rowType
argument_list|,
name|joinInputs
argument_list|,
name|joinTypes
argument_list|,
name|filters
argument_list|)
return|;
block|}
comment|/**    * @return join filters associated with this MultiJoin    */
specifier|public
name|RexNode
name|getCondition
parameter_list|()
block|{
return|return
name|condition
return|;
block|}
comment|/**    * @return true if the MultiJoin contains a (partial) outer join.    */
specifier|public
name|boolean
name|isOuterJoin
parameter_list|()
block|{
return|return
name|outerJoin
return|;
block|}
comment|/**    * @return join relationships between inputs    */
specifier|public
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|getJoinInputs
parameter_list|()
block|{
return|return
name|joinInputs
return|;
block|}
comment|/**    * @return join types of each input    */
specifier|public
name|List
argument_list|<
name|JoinRelType
argument_list|>
name|getJoinTypes
parameter_list|()
block|{
return|return
name|joinTypes
return|;
block|}
comment|/**    * @return join conditions filters    */
specifier|public
name|List
argument_list|<
name|RexNode
argument_list|>
name|getJoinFilters
parameter_list|()
block|{
return|return
name|filters
return|;
block|}
comment|/**    * @return the join predicate information    */
specifier|public
name|JoinPredicateInfo
name|getJoinPredicateInfo
parameter_list|()
block|{
return|return
name|joinPredInfo
return|;
block|}
specifier|private
name|boolean
name|containsOuter
parameter_list|()
block|{
for|for
control|(
name|JoinRelType
name|joinType
range|:
name|joinTypes
control|)
block|{
if|if
condition|(
name|joinType
operator|!=
name|JoinRelType
operator|.
name|INNER
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

begin_comment
comment|// End MultiJoin.java
end_comment

end_unit

