begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HdfsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|tools
operator|.
name|FileDump
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|FileFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Post exec hook to print orc file dump for files that will be read by fetch task. The file dump  * output will be printed before fetch task output. It also prints the row index for the 1st column  * in the file just to verify the impact of bloom filter fpp.  */
end_comment

begin_class
specifier|public
class|class
name|PostExecOrcFileDump
implements|implements
name|ExecuteWithHookContext
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PostExecOrcFileDump
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PathFilter
name|hiddenFileFilter
init|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|String
name|name
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookContext
operator|.
name|HookType
operator|.
name|POST_EXEC_HOOK
operator|)
assert|;
name|HiveConf
name|conf
init|=
name|hookContext
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing post execution hook to print orc file dump.."
argument_list|)
expr_stmt|;
name|QueryPlan
name|plan
init|=
name|hookContext
operator|.
name|getQueryPlan
argument_list|()
decl_stmt|;
if|if
condition|(
name|plan
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|FetchTask
name|fetchTask
init|=
name|plan
operator|.
name|getFetchTask
argument_list|()
decl_stmt|;
if|if
condition|(
name|fetchTask
operator|!=
literal|null
condition|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|SessionState
operator|.
name|LogHelper
name|console
init|=
name|ss
operator|.
name|getConsole
argument_list|()
decl_stmt|;
comment|// file dump should write to session state console's error stream
name|PrintStream
name|old
init|=
name|System
operator|.
name|out
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|console
operator|.
name|getErrStream
argument_list|()
argument_list|)
expr_stmt|;
name|FetchWork
name|fetchWork
init|=
name|fetchTask
operator|.
name|getWork
argument_list|()
decl_stmt|;
name|boolean
name|partitionedTable
init|=
name|fetchWork
operator|.
name|isPartitioned
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|directories
decl_stmt|;
if|if
condition|(
name|partitionedTable
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Printing orc file dump for files from partitioned directory.."
argument_list|)
expr_stmt|;
name|directories
operator|=
name|fetchWork
operator|.
name|getPartDir
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Printing orc file dump for files from table directory.."
argument_list|)
expr_stmt|;
name|directories
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|directories
operator|.
name|add
argument_list|(
name|fetchWork
operator|.
name|getTblDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Path
name|dir
range|:
name|directories
control|)
block|{
name|printFileStatus
argument_list|(
name|console
argument_list|,
name|dir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
comment|// restore the old out stream
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|old
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|printFileStatus
parameter_list|(
name|SessionState
operator|.
name|LogHelper
name|console
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|fileList
init|=
name|HdfsUtils
operator|.
name|listLocatedStatus
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|hiddenFileFilter
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|fileList
control|)
block|{
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// delta directory in case of ACID
name|printFileStatus
argument_list|(
name|console
argument_list|,
name|fs
argument_list|,
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Printing orc file dump for "
operator|+
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|getLen
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
comment|// just creating orc reader is going to do sanity checks to make sure its valid ORC file
name|OrcFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
literal|"-- BEGIN ORC FILE DUMP --"
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
block|,
literal|"--rowindex=*"
block|}
argument_list|)
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
literal|"-- END ORC FILE DUMP --"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File "
operator|+
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|+
literal|" is not ORC. Skip printing orc file dump"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skip printing orc file dump. Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Zero length file encountered. Skip printing orc file dump."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

