begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|WordUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|filecache
operator|.
name|DistributedCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|DefaultCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
operator|.
name|ExpressionTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
class|class
name|Utilities
block|{
comment|/**    * The object in the reducer are composed of these top level fields    */
specifier|public
specifier|static
enum|enum
name|ReduceField
block|{
name|KEY
block|,
name|VALUE
block|,
name|ALIAS
block|}
empty_stmt|;
specifier|private
specifier|static
specifier|volatile
name|mapredWork
name|gWork
init|=
literal|null
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"hive.ql.exec.Utilities"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|clearMapRedWork
parameter_list|(
name|Configuration
name|job
parameter_list|)
block|{
try|try
block|{
name|Path
name|planPath
init|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|job
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PLAN
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|planPath
argument_list|)
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|planPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
finally|finally
block|{
comment|// where a single process works with multiple plans - we must clear
comment|// the cache before working with the next plan.
name|gWork
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|mapredWork
name|getMapRedWork
parameter_list|(
name|Configuration
name|job
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|gWork
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|Utilities
operator|.
name|class
init|)
block|{
if|if
condition|(
name|gWork
operator|!=
literal|null
condition|)
return|return
operator|(
name|gWork
operator|)
return|;
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
literal|"HIVE_PLAN"
argument_list|)
decl_stmt|;
name|mapredWork
name|ret
init|=
name|deserializeMapRedWork
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|gWork
operator|=
name|ret
expr_stmt|;
block|}
name|gWork
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|gWork
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getFieldSchemaString
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fl
parameter_list|)
block|{
if|if
condition|(
name|fl
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|f
range|:
name|fl
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|f
operator|.
name|getType
argument_list|()
operator|+
operator|(
name|f
operator|.
name|getComment
argument_list|()
operator|!=
literal|null
condition|?
operator|(
literal|" "
operator|+
name|f
operator|.
name|getComment
argument_list|()
operator|)
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Java 1.5 workaround.     * From http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5015403    */
specifier|public
specifier|static
class|class
name|EnumDelegate
extends|extends
name|DefaultPersistenceDelegate
block|{
annotation|@
name|Override
specifier|protected
name|Expression
name|instantiate
parameter_list|(
name|Object
name|oldInstance
parameter_list|,
name|Encoder
name|out
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|(
name|Enum
operator|.
name|class
argument_list|,
literal|"valueOf"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|oldInstance
operator|.
name|getClass
argument_list|()
block|,
operator|(
operator|(
name|Enum
argument_list|<
name|?
argument_list|>
operator|)
name|oldInstance
operator|)
operator|.
name|name
argument_list|()
block|}
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|mutatesTo
parameter_list|(
name|Object
name|oldInstance
parameter_list|,
name|Object
name|newInstance
parameter_list|)
block|{
return|return
name|oldInstance
operator|==
name|newInstance
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setMapRedWork
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|mapredWork
name|w
parameter_list|)
block|{
try|try
block|{
comment|// use the default file system of the job
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Path
name|planPath
init|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|job
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SCRATCHDIR
argument_list|)
argument_list|,
literal|"plan."
operator|+
name|randGen
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|planPath
argument_list|)
decl_stmt|;
name|serializeMapRedWork
argument_list|(
name|w
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|job
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PLAN
argument_list|,
name|planPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set up distributed cache
name|DistributedCache
operator|.
name|createSymlink
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|String
name|uriWithLink
init|=
name|planPath
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"#HIVE_PLAN"
decl_stmt|;
name|DistributedCache
operator|.
name|addCacheFile
argument_list|(
operator|new
name|URI
argument_list|(
name|uriWithLink
argument_list|)
argument_list|,
name|job
argument_list|)
expr_stmt|;
comment|// Cache the object in this process too so lookups don't hit the file system
synchronized|synchronized
init|(
name|Utilities
operator|.
name|class
init|)
block|{
name|gWork
operator|=
name|w
expr_stmt|;
name|gWork
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|serializeTasks
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|t
parameter_list|,
name|OutputStream
name|out
parameter_list|)
block|{
name|XMLEncoder
name|e
init|=
operator|new
name|XMLEncoder
argument_list|(
name|out
argument_list|)
decl_stmt|;
comment|// workaround for java 1.5
name|e
operator|.
name|setPersistenceDelegate
argument_list|(
name|ExpressionTypes
operator|.
name|class
argument_list|,
operator|new
name|EnumDelegate
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setPersistenceDelegate
argument_list|(
name|groupByDesc
operator|.
name|Mode
operator|.
name|class
argument_list|,
operator|new
name|EnumDelegate
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|writeObject
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|e
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Serialize the plan object to an output stream.    * DO NOT use this to write to standard output since it closes the output stream    * DO USE mapredWork.toXML() instead    */
specifier|public
specifier|static
name|void
name|serializeMapRedWork
parameter_list|(
name|mapredWork
name|w
parameter_list|,
name|OutputStream
name|out
parameter_list|)
block|{
name|XMLEncoder
name|e
init|=
operator|new
name|XMLEncoder
argument_list|(
name|out
argument_list|)
decl_stmt|;
comment|// workaround for java 1.5
name|e
operator|.
name|setPersistenceDelegate
argument_list|(
name|ExpressionTypes
operator|.
name|class
argument_list|,
operator|new
name|EnumDelegate
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setPersistenceDelegate
argument_list|(
name|groupByDesc
operator|.
name|Mode
operator|.
name|class
argument_list|,
operator|new
name|EnumDelegate
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|writeObject
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|e
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|mapredWork
name|deserializeMapRedWork
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|XMLDecoder
name|d
init|=
operator|new
name|XMLDecoder
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|mapredWork
name|ret
init|=
operator|(
name|mapredWork
operator|)
name|d
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
specifier|public
specifier|static
class|class
name|Tuple
parameter_list|<
name|T
parameter_list|,
name|V
parameter_list|>
block|{
specifier|private
name|T
name|one
decl_stmt|;
specifier|private
name|V
name|two
decl_stmt|;
specifier|public
name|Tuple
parameter_list|(
name|T
name|one
parameter_list|,
name|V
name|two
parameter_list|)
block|{
name|this
operator|.
name|one
operator|=
name|one
expr_stmt|;
name|this
operator|.
name|two
operator|=
name|two
expr_stmt|;
block|}
specifier|public
name|T
name|getOne
parameter_list|()
block|{
return|return
name|this
operator|.
name|one
return|;
block|}
specifier|public
name|V
name|getTwo
parameter_list|()
block|{
return|return
name|this
operator|.
name|two
return|;
block|}
block|}
specifier|public
specifier|static
name|tableDesc
name|defaultTd
decl_stmt|;
static|static
block|{
comment|// by default we expect ^A separated strings
comment|// This tableDesc does not provide column names.  We should always use
comment|// PlanUtils.getDefaultTableDesc(String separatorCode, String columns)
comment|// or getBinarySortableTableDesc(List<FieldSchema> fieldSchemas) when
comment|// we know the column names.
name|defaultTd
operator|=
name|PlanUtils
operator|.
name|getDefaultTableDesc
argument_list|(
literal|""
operator|+
name|Utilities
operator|.
name|ctrlaCode
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|int
name|newLineCode
init|=
literal|10
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|tabCode
init|=
literal|9
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|ctrlaCode
init|=
literal|1
decl_stmt|;
comment|// Note: When DDL supports specifying what string to represent null,
comment|// we should specify "NULL" to represent null in the temp table, and then
comment|// we can make the following translation deprecated.
specifier|public
specifier|static
name|String
name|nullStringStorage
init|=
literal|"\\N"
decl_stmt|;
specifier|public
specifier|static
name|String
name|nullStringOutput
init|=
literal|"NULL"
decl_stmt|;
specifier|public
specifier|static
name|Random
name|randGen
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**    * Gets the task id if we are running as a Hadoop job.    * Gets a random number otherwise.    */
specifier|public
specifier|static
name|String
name|getTaskId
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
block|{
name|String
name|taskid
init|=
operator|(
name|hconf
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|hconf
operator|.
name|get
argument_list|(
literal|"mapred.task.id"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|taskid
operator|==
literal|null
operator|)
operator|||
name|taskid
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
operator|(
literal|""
operator|+
name|randGen
operator|.
name|nextInt
argument_list|()
operator|)
return|;
block|}
else|else
block|{
return|return
name|taskid
operator|.
name|replaceAll
argument_list|(
literal|"task_[0-9]+_"
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|HashMap
name|makeMap
parameter_list|(
name|Object
modifier|...
name|olist
parameter_list|)
block|{
name|HashMap
name|ret
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|olist
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|olist
index|[
name|i
index|]
argument_list|,
name|olist
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
specifier|public
specifier|static
name|Properties
name|makeProperties
parameter_list|(
name|String
modifier|...
name|olist
parameter_list|)
block|{
name|Properties
name|ret
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|olist
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|ret
operator|.
name|setProperty
argument_list|(
name|olist
index|[
name|i
index|]
argument_list|,
name|olist
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
specifier|public
specifier|static
name|ArrayList
name|makeList
parameter_list|(
name|Object
modifier|...
name|olist
parameter_list|)
block|{
name|ArrayList
name|ret
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|olist
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|olist
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
specifier|public
specifier|static
class|class
name|StreamPrinter
extends|extends
name|Thread
block|{
name|InputStream
name|is
decl_stmt|;
name|String
name|type
decl_stmt|;
name|PrintStream
name|os
decl_stmt|;
specifier|public
name|StreamPrinter
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|type
parameter_list|,
name|PrintStream
name|os
parameter_list|)
block|{
name|this
operator|.
name|is
operator|=
name|is
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|os
operator|=
name|os
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|InputStreamReader
name|isr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
name|isr
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
name|os
operator|.
name|println
argument_list|(
name|type
operator|+
literal|">"
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
name|os
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|tableDesc
name|getTableDesc
parameter_list|(
name|Table
name|tbl
parameter_list|)
block|{
return|return
operator|(
operator|new
name|tableDesc
argument_list|(
name|tbl
operator|.
name|getDeserializer
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|tbl
operator|.
name|getInputFormatClass
argument_list|()
argument_list|,
name|tbl
operator|.
name|getOutputFormatClass
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSchema
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|partitionDesc
name|getPartitionDesc
parameter_list|(
name|Partition
name|part
parameter_list|)
block|{
return|return
operator|(
operator|new
name|partitionDesc
argument_list|(
name|getTableDesc
argument_list|(
name|part
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|,
name|part
operator|.
name|getSpec
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|void
name|addMapWork
parameter_list|(
name|mapredWork
name|mr
parameter_list|,
name|Table
name|tbl
parameter_list|,
name|String
name|alias
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|work
parameter_list|)
block|{
name|mr
operator|.
name|addMapWork
argument_list|(
name|tbl
operator|.
name|getDataLocation
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|alias
argument_list|,
name|work
argument_list|,
operator|new
name|partitionDesc
argument_list|(
name|getTableDesc
argument_list|(
name|tbl
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getOpTreeSkel_helper
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
parameter_list|,
name|String
name|indent
parameter_list|)
block|{
if|if
condition|(
name|op
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|op
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Object
name|child
range|:
name|op
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getOpTreeSkel_helper
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
argument_list|>
operator|)
name|child
argument_list|,
name|indent
operator|+
literal|"  "
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getOpTreeSkel
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
parameter_list|)
block|{
return|return
name|getOpTreeSkel_helper
argument_list|(
name|op
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isWhitespace
parameter_list|(
name|int
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Character
operator|.
name|isWhitespace
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|contentsEqual
parameter_list|(
name|InputStream
name|is1
parameter_list|,
name|InputStream
name|is2
parameter_list|,
name|boolean
name|ignoreWhitespace
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|(
name|is1
operator|==
name|is2
operator|)
operator|||
operator|(
name|is1
operator|==
literal|null
operator|&&
name|is2
operator|==
literal|null
operator|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|is1
operator|==
literal|null
operator|||
name|is2
operator|==
literal|null
condition|)
return|return
literal|false
return|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|c1
init|=
name|is1
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|ignoreWhitespace
operator|&&
name|isWhitespace
argument_list|(
name|c1
argument_list|)
condition|)
name|c1
operator|=
name|is1
operator|.
name|read
argument_list|()
expr_stmt|;
name|int
name|c2
init|=
name|is2
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|ignoreWhitespace
operator|&&
name|isWhitespace
argument_list|(
name|c2
argument_list|)
condition|)
name|c2
operator|=
name|is2
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|c1
operator|==
operator|-
literal|1
operator|&&
name|c2
operator|==
operator|-
literal|1
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|c1
operator|!=
name|c2
condition|)
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * convert "From src insert blah blah" to "From src insert ... blah"    */
specifier|public
specifier|static
name|String
name|abbreviate
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|str
operator|=
name|str
operator|.
name|trim
argument_list|()
expr_stmt|;
name|int
name|len
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|suffixlength
init|=
literal|20
decl_stmt|;
if|if
condition|(
name|len
operator|<=
name|max
condition|)
return|return
name|str
return|;
name|suffixlength
operator|=
name|Math
operator|.
name|min
argument_list|(
name|suffixlength
argument_list|,
operator|(
name|max
operator|-
literal|3
operator|)
operator|/
literal|2
argument_list|)
expr_stmt|;
name|String
name|rev
init|=
name|StringUtils
operator|.
name|reverse
argument_list|(
name|str
argument_list|)
decl_stmt|;
comment|// get the last few words
name|String
name|suffix
init|=
name|WordUtils
operator|.
name|abbreviate
argument_list|(
name|rev
argument_list|,
literal|0
argument_list|,
name|suffixlength
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|suffix
operator|=
name|StringUtils
operator|.
name|reverse
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
comment|// first few ..
name|String
name|prefix
init|=
name|StringUtils
operator|.
name|abbreviate
argument_list|(
name|str
argument_list|,
name|max
operator|-
name|suffix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|prefix
operator|+
name|suffix
return|;
block|}
specifier|public
specifier|final
specifier|static
name|String
name|NSTR
init|=
literal|""
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|streamStatus
block|{
name|EOF
block|,
name|TERMINATED
block|}
specifier|public
specifier|static
name|streamStatus
name|readColumn
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|b
decl_stmt|;
try|try
block|{
name|b
operator|=
operator|(
name|int
operator|)
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
return|return
name|streamStatus
operator|.
name|EOF
return|;
block|}
if|if
condition|(
name|b
operator|==
name|Utilities
operator|.
name|newLineCode
condition|)
block|{
return|return
name|streamStatus
operator|.
name|TERMINATED
return|;
block|}
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
comment|// Unreachable
block|}
comment|/**    * Convert an output stream to a compressed output stream based on codecs     * and compression options specified in the Job Configuration.    * @param jc Job Configuration    * @param out Output Stream to be converted into compressed output stream    * @return compressed output stream    */
specifier|public
specifier|static
name|OutputStream
name|createCompressedStream
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isCompressed
init|=
name|FileOutputFormat
operator|.
name|getCompressOutput
argument_list|(
name|jc
argument_list|)
decl_stmt|;
return|return
name|createCompressedStream
argument_list|(
name|jc
argument_list|,
name|out
argument_list|,
name|isCompressed
argument_list|)
return|;
block|}
comment|/**    * Convert an output stream to a compressed output stream based on codecs    * codecs in the Job Configuration. Caller specifies directly whether file is     * compressed or not    * @param jc Job Configuration    * @param out Output Stream to be converted into compressed output stream    * @param isCompressed whether the output stream needs to be compressed or not    * @return compressed output stream    */
specifier|public
specifier|static
name|OutputStream
name|createCompressedStream
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|boolean
name|isCompressed
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isCompressed
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
name|codecClass
init|=
name|FileOutputFormat
operator|.
name|getOutputCompressorClass
argument_list|(
name|jc
argument_list|,
name|DefaultCodec
operator|.
name|class
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
operator|(
name|CompressionCodec
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|codecClass
argument_list|,
name|jc
argument_list|)
decl_stmt|;
return|return
name|codec
operator|.
name|createOutputStream
argument_list|(
name|out
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|out
operator|)
return|;
block|}
block|}
comment|/**    * Based on compression option and configured output codec - get extension    * for output file. This is only required for text files - not sequencefiles    * @param jc Job Configuration    * @param isCompressed Whether the output file is compressed or not    * @return the required file extension (example: .gz)    */
specifier|public
specifier|static
name|String
name|getFileExtension
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|boolean
name|isCompressed
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isCompressed
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
name|codecClass
init|=
name|FileOutputFormat
operator|.
name|getOutputCompressorClass
argument_list|(
name|jc
argument_list|,
name|DefaultCodec
operator|.
name|class
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
operator|(
name|CompressionCodec
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|codecClass
argument_list|,
name|jc
argument_list|)
decl_stmt|;
return|return
name|codec
operator|.
name|getDefaultExtension
argument_list|()
return|;
block|}
block|}
comment|/**    * Create a sequencefile output stream based on job configuration    * @param jc Job configuration    * @param fs File System to create file in    * @param file Path to be created    * @param keyClass Java Class for key    * @param valClass Java Class for value    * @return output stream over the created sequencefile    */
specifier|public
specifier|static
name|SequenceFile
operator|.
name|Writer
name|createSequenceWriter
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|valClass
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isCompressed
init|=
name|SequenceFileOutputFormat
operator|.
name|getCompressOutput
argument_list|(
name|jc
argument_list|)
decl_stmt|;
return|return
name|createSequenceWriter
argument_list|(
name|jc
argument_list|,
name|fs
argument_list|,
name|file
argument_list|,
name|keyClass
argument_list|,
name|valClass
argument_list|,
name|isCompressed
argument_list|)
return|;
block|}
comment|/**    * Create a sequencefile output stream based on job configuration    * Uses user supplied compression flag (rather than obtaining it from the Job Configuration)    * @param jc Job configuration    * @param fs File System to create file in    * @param file Path to be created    * @param keyClass Java Class for key    * @param valClass Java Class for value    * @return output stream over the created sequencefile    */
specifier|public
specifier|static
name|SequenceFile
operator|.
name|Writer
name|createSequenceWriter
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|valClass
parameter_list|,
name|boolean
name|isCompressed
parameter_list|)
throws|throws
name|IOException
block|{
name|CompressionCodec
name|codec
init|=
literal|null
decl_stmt|;
name|CompressionType
name|compressionType
init|=
name|CompressionType
operator|.
name|NONE
decl_stmt|;
name|Class
name|codecClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isCompressed
condition|)
block|{
name|compressionType
operator|=
name|SequenceFileOutputFormat
operator|.
name|getOutputCompressionType
argument_list|(
name|jc
argument_list|)
expr_stmt|;
name|codecClass
operator|=
name|SequenceFileOutputFormat
operator|.
name|getOutputCompressorClass
argument_list|(
name|jc
argument_list|,
name|DefaultCodec
operator|.
name|class
argument_list|)
expr_stmt|;
name|codec
operator|=
operator|(
name|CompressionCodec
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|codecClass
argument_list|,
name|jc
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|jc
argument_list|,
name|file
argument_list|,
name|keyClass
argument_list|,
name|valClass
argument_list|,
name|compressionType
argument_list|,
name|codec
argument_list|)
operator|)
return|;
block|}
comment|/**    * Create a RCFile output stream based on job configuration Uses user supplied    * compression flag (rather than obtaining it from the Job Configuration)    *     * @param jc    *          Job configuration    * @param fs    *          File System to create file in    * @param file    *          Path to be created    * @return output stream over the created rcfile    */
specifier|public
specifier|static
name|RCFile
operator|.
name|Writer
name|createRCFileWriter
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|boolean
name|isCompressed
parameter_list|)
throws|throws
name|IOException
block|{
name|CompressionCodec
name|codec
init|=
literal|null
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|codecClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isCompressed
condition|)
block|{
name|codecClass
operator|=
name|FileOutputFormat
operator|.
name|getOutputCompressorClass
argument_list|(
name|jc
argument_list|,
name|DefaultCodec
operator|.
name|class
argument_list|)
expr_stmt|;
name|codec
operator|=
operator|(
name|CompressionCodec
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|codecClass
argument_list|,
name|jc
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RCFile
operator|.
name|Writer
argument_list|(
name|fs
argument_list|,
name|jc
argument_list|,
name|file
argument_list|,
literal|null
argument_list|,
name|codec
argument_list|)
return|;
block|}
comment|/**    * Shamelessly cloned from GenericOptionsParser    */
specifier|public
specifier|static
name|String
name|realFile
parameter_list|(
name|String
name|newFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|newFile
argument_list|)
decl_stmt|;
name|URI
name|pathURI
init|=
name|path
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
if|if
condition|(
name|pathURI
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fs
operator|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{}
empty_stmt|;
return|return
operator|(
name|path
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|mergeUniqElems
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|src
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dest
parameter_list|)
block|{
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
return|return
name|src
return|;
if|if
condition|(
name|src
operator|==
literal|null
condition|)
return|return
name|dest
return|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|dest
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|src
operator|.
name|contains
argument_list|(
name|dest
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|)
condition|)
name|src
operator|.
name|add
argument_list|(
name|dest
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
return|return
name|src
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|tmpPrefix
init|=
literal|"_tmp."
decl_stmt|;
specifier|public
specifier|static
name|Path
name|toTempPath
parameter_list|(
name|Path
name|orig
parameter_list|)
block|{
if|if
condition|(
name|orig
operator|.
name|getName
argument_list|()
operator|.
name|indexOf
argument_list|(
name|tmpPrefix
argument_list|)
operator|==
literal|0
condition|)
return|return
name|orig
return|;
return|return
operator|new
name|Path
argument_list|(
name|orig
operator|.
name|getParent
argument_list|()
argument_list|,
name|tmpPrefix
operator|+
name|orig
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Given a path, convert to a temporary path    */
specifier|public
specifier|static
name|Path
name|toTempPath
parameter_list|(
name|String
name|orig
parameter_list|)
block|{
return|return
name|toTempPath
argument_list|(
operator|new
name|Path
argument_list|(
name|orig
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Detect if the supplied file is a temporary path    */
specifier|public
specifier|static
name|boolean
name|isTempPath
parameter_list|(
name|FileStatus
name|file
parameter_list|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// in addition to detecting hive temporary files, we also check hadoop
comment|// temporary folders that used to show up in older releases
return|return
operator|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"_task"
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
name|tmpPrefix
argument_list|)
operator|)
return|;
block|}
comment|/**    * Remove all temporary files from a given directory    */
specifier|public
specifier|static
name|void
name|removeTempFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
return|return;
name|FileStatus
name|items
index|[]
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|items
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|FileStatus
name|one
range|:
name|items
control|)
block|{
if|if
condition|(
name|isTempPath
argument_list|(
name|one
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|one
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to delete tmp file: "
operator|+
name|one
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|getNameMessage
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

