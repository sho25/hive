begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|registry
operator|.
name|impl
operator|.
name|TezAmInstance
import|;
end_import

begin_class
specifier|public
class|class
name|WmTezSession
extends|extends
name|TezSessionPoolSession
implements|implements
name|AmPluginNode
block|{
specifier|private
name|String
name|poolName
decl_stmt|;
specifier|private
name|double
name|clusterFraction
decl_stmt|;
specifier|private
specifier|final
name|Object
name|amPluginInfoLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|AmPluginInfo
name|amPluginInfo
init|=
literal|null
decl_stmt|;
comment|/** The actual state of the guaranteed task, and the update state, for the session. */
comment|// Note: hypothetically, a generic WM-aware-session should not know about guaranteed tasks.
comment|//       We should have another subclass for a WM-aware-session-implemented-using-ducks.
comment|//       However, since this is the only type of WM for now, this can live here.
specifier|private
specifier|final
specifier|static
class|class
name|ActualWmState
block|{
comment|// All accesses synchronized on the object itself. Could be replaced with CAS.
name|int
name|sending
init|=
operator|-
literal|1
decl_stmt|,
name|sent
init|=
operator|-
literal|1
decl_stmt|,
name|target
init|=
literal|0
decl_stmt|;
block|}
specifier|private
specifier|final
name|ActualWmState
name|actualState
init|=
operator|new
name|ActualWmState
argument_list|()
decl_stmt|;
specifier|public
name|WmTezSession
parameter_list|(
name|String
name|sessionId
parameter_list|,
name|Manager
name|parent
parameter_list|,
name|SessionExpirationTracker
name|expiration
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|sessionId
argument_list|,
name|parent
argument_list|,
name|expiration
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AmPluginInfo
name|waitForAmPluginInfo
parameter_list|(
name|int
name|timeoutMs
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
block|{
synchronized|synchronized
init|(
name|amPluginInfoLock
init|)
block|{
if|if
condition|(
name|amPluginInfo
operator|==
literal|null
condition|)
block|{
name|amPluginInfoLock
operator|.
name|wait
argument_list|(
name|timeoutMs
argument_list|)
expr_stmt|;
if|if
condition|(
name|amPluginInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"No plugin information for "
operator|+
name|getSessionId
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|amPluginInfo
return|;
block|}
block|}
annotation|@
name|Override
name|void
name|updateFromRegistry
parameter_list|(
name|TezAmInstance
name|si
parameter_list|)
block|{
synchronized|synchronized
init|(
name|amPluginInfoLock
init|)
block|{
name|this
operator|.
name|amPluginInfo
operator|=
operator|new
name|AmPluginInfo
argument_list|(
name|si
operator|.
name|getHost
argument_list|()
argument_list|,
name|si
operator|.
name|getPluginPort
argument_list|()
argument_list|,
name|si
operator|.
name|getPluginToken
argument_list|()
argument_list|,
name|si
operator|.
name|getPluginTokenJobId
argument_list|()
argument_list|)
expr_stmt|;
name|amPluginInfoLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|AmPluginInfo
name|getAmPluginInfo
parameter_list|()
block|{
return|return
name|amPluginInfo
return|;
comment|// Only has final fields, no artifacts from the absence of sync.
block|}
name|void
name|setPoolName
parameter_list|(
name|String
name|poolName
parameter_list|)
block|{
name|this
operator|.
name|poolName
operator|=
name|poolName
expr_stmt|;
block|}
name|String
name|getPoolName
parameter_list|()
block|{
return|return
name|poolName
return|;
block|}
name|void
name|setClusterFraction
parameter_list|(
name|double
name|fraction
parameter_list|)
block|{
name|this
operator|.
name|clusterFraction
operator|=
name|fraction
expr_stmt|;
block|}
name|double
name|getClusterFraction
parameter_list|()
block|{
return|return
name|this
operator|.
name|clusterFraction
return|;
block|}
name|boolean
name|setSendingGuaranteed
parameter_list|(
name|int
name|intAlloc
parameter_list|)
block|{
assert|assert
name|intAlloc
operator|>=
literal|0
assert|;
synchronized|synchronized
init|(
name|actualState
init|)
block|{
name|actualState
operator|.
name|target
operator|=
name|intAlloc
expr_stmt|;
if|if
condition|(
name|actualState
operator|.
name|sending
operator|!=
operator|-
literal|1
condition|)
return|return
literal|false
return|;
comment|// The sender will take care of this.
if|if
condition|(
name|actualState
operator|.
name|sent
operator|==
name|intAlloc
condition|)
return|return
literal|false
return|;
comment|// The value didn't change.
name|actualState
operator|.
name|sending
operator|=
name|intAlloc
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|int
name|setSentGuaranteed
parameter_list|()
block|{
comment|// Only one send can be active at the same time.
synchronized|synchronized
init|(
name|actualState
init|)
block|{
assert|assert
name|actualState
operator|.
name|sending
operator|!=
operator|-
literal|1
assert|;
name|actualState
operator|.
name|sent
operator|=
name|actualState
operator|.
name|sending
expr_stmt|;
name|actualState
operator|.
name|sending
operator|=
operator|-
literal|1
expr_stmt|;
return|return
operator|(
name|actualState
operator|.
name|sent
operator|==
name|actualState
operator|.
name|target
operator|)
condition|?
operator|-
literal|1
else|:
name|actualState
operator|.
name|target
return|;
block|}
block|}
name|boolean
name|setFailedToSendGuaranteed
parameter_list|()
block|{
synchronized|synchronized
init|(
name|actualState
init|)
block|{
assert|assert
name|actualState
operator|.
name|sending
operator|!=
operator|-
literal|1
assert|;
name|actualState
operator|.
name|sending
operator|=
operator|-
literal|1
expr_stmt|;
comment|// It's ok to skip a failed message if the target has changed back to the old value.
return|return
operator|(
name|actualState
operator|.
name|sent
operator|==
name|actualState
operator|.
name|target
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

