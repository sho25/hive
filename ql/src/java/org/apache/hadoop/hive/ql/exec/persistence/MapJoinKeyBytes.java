begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|hash
operator|.
name|MurmurHash
import|;
end_import

begin_comment
comment|/**  * Size-optimized implementation of MapJoinKeyBase. MJK only needs to support equality and  * hashCode, so for simple cases we can write the requisite writables that are part of the  * key into byte array and retain the functionality without storing the writables themselves.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|MapJoinKeyBytes
extends|extends
name|MapJoinKey
block|{
specifier|private
specifier|static
specifier|final
name|MurmurHash
name|hash
init|=
operator|(
name|MurmurHash
operator|)
name|MurmurHash
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|/**    * First byte is field count. The rest is written using BinarySortableSerDe.    */
specifier|private
name|byte
index|[]
name|array
decl_stmt|;
specifier|private
name|void
name|setBytes
parameter_list|(
name|byte
index|[]
name|array
parameter_list|)
block|{
name|this
operator|.
name|array
operator|=
name|array
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|MapJoinObjectSerDeContext
name|context
parameter_list|,
name|ObjectOutputStream
name|out
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" cannot be serialized"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|MapJoinKeyBytes
operator|)
condition|)
return|return
literal|false
return|;
name|MapJoinKeyBytes
name|other
init|=
operator|(
name|MapJoinKeyBytes
operator|)
name|obj
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|this
operator|.
name|array
argument_list|,
name|other
operator|.
name|array
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hash
operator|.
name|hash
argument_list|(
name|array
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAnyNulls
parameter_list|(
name|int
name|fieldCount
parameter_list|,
name|boolean
index|[]
name|nullsafes
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|array
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|false
return|;
comment|// null key
name|byte
name|nulls
init|=
call|(
name|byte
call|)
argument_list|(
name|this
operator|.
name|array
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|nulls
operator|&
literal|1
operator|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|nullsafes
operator|==
literal|null
operator|||
operator|!
name|nullsafes
index|[
name|i
index|]
operator|)
condition|)
return|return
literal|true
return|;
name|nulls
operator|>>>=
literal|1
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|MapJoinKey
name|fromBytes
parameter_list|(
name|MapJoinKey
name|key
parameter_list|,
name|boolean
name|mayReuseKey
parameter_list|,
name|byte
index|[]
name|structBytes
parameter_list|)
block|{
name|MapJoinKeyBytes
name|result
init|=
operator|(
name|mayReuseKey
operator|&&
name|key
operator|!=
literal|null
operator|)
condition|?
operator|(
name|MapJoinKeyBytes
operator|)
name|key
else|:
operator|new
name|MapJoinKeyBytes
argument_list|()
decl_stmt|;
name|result
operator|.
name|setBytes
argument_list|(
name|structBytes
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

