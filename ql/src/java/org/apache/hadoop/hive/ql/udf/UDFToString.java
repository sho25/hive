begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * UDFToString.  *  */
end_comment

begin_class
specifier|public
class|class
name|UDFToString
extends|extends
name|UDF
block|{
specifier|private
name|Text
name|t
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|private
name|ByteStream
operator|.
name|Output
name|out
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
specifier|public
name|UDFToString
parameter_list|()
block|{   }
specifier|public
name|Text
name|evaluate
parameter_list|(
name|NullWritable
name|i
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|private
name|byte
index|[]
name|trueBytes
init|=
block|{
literal|'T'
block|,
literal|'R'
block|,
literal|'U'
block|,
literal|'E'
block|}
decl_stmt|;
specifier|private
name|byte
index|[]
name|falseBytes
init|=
block|{
literal|'F'
block|,
literal|'A'
block|,
literal|'L'
block|,
literal|'S'
block|,
literal|'E'
block|}
decl_stmt|;
specifier|public
name|Text
name|evaluate
parameter_list|(
name|BooleanWritable
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|t
operator|.
name|clear
argument_list|()
expr_stmt|;
name|t
operator|.
name|set
argument_list|(
name|i
operator|.
name|get
argument_list|()
condition|?
name|trueBytes
else|:
name|falseBytes
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
specifier|public
name|Text
name|evaluate
parameter_list|(
name|ByteWritable
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|LazyInteger
operator|.
name|writeUTF8NoException
argument_list|(
name|out
argument_list|,
name|i
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|set
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|out
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
specifier|public
name|Text
name|evaluate
parameter_list|(
name|ShortWritable
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|LazyInteger
operator|.
name|writeUTF8NoException
argument_list|(
name|out
argument_list|,
name|i
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|set
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|out
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
specifier|public
name|Text
name|evaluate
parameter_list|(
name|IntWritable
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|LazyInteger
operator|.
name|writeUTF8NoException
argument_list|(
name|out
argument_list|,
name|i
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|set
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|out
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
specifier|public
name|Text
name|evaluate
parameter_list|(
name|LongWritable
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|LazyLong
operator|.
name|writeUTF8NoException
argument_list|(
name|out
argument_list|,
name|i
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|set
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|out
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
specifier|public
name|Text
name|evaluate
parameter_list|(
name|FloatWritable
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|t
operator|.
name|set
argument_list|(
name|i
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
specifier|public
name|Text
name|evaluate
parameter_list|(
name|DoubleWritable
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|t
operator|.
name|set
argument_list|(
name|i
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
block|}
end_class

end_unit

