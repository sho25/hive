begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  *  * Licensed to the Apache Software Foundation (ASF) under one  *  * or more contributor license agreements.  See the NOTICE file  *  * distributed with this work for additional information  *  * regarding copyright ownership.  The ASF licenses this file  *  * to you under the Apache License, Version 2.0 (the  *  * "License"); you may not use this file except in compliance  *  * with the License.  You may obtain a copy of the License at  *  *  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  *  * Unless required by applicable law or agreed to in writing, software  *  * distributed under the License is distributed on an "AS IS" BASIS,  *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  *  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|SSLFactory
operator|.
name|SSL_CLIENT_CONF_KEY
import|;
end_import

begin_class
specifier|public
class|class
name|TezConfigurationFactory
block|{
specifier|private
specifier|static
name|TezConfiguration
name|defaultConf
init|=
operator|new
name|TezConfiguration
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TezConfigurationFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
static|static
block|{
comment|//SSL configs are added as needed
name|String
name|sslConf
init|=
name|defaultConf
operator|.
name|get
argument_list|(
name|SSL_CLIENT_CONF_KEY
argument_list|,
literal|"ssl-client.xml"
argument_list|)
decl_stmt|;
name|defaultConf
operator|.
name|addResource
argument_list|(
name|sslConf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SSL conf : "
operator|+
name|sslConf
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Configuration
name|copyInto
parameter_list|(
name|Configuration
name|target
parameter_list|,
name|Configuration
name|src
parameter_list|,
name|Predicate
argument_list|<
name|String
argument_list|>
name|sourceFilter
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iter
init|=
name|src
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
index|[]
name|sources
init|=
name|src
operator|.
name|getPropertySources
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|String
name|source
decl_stmt|;
if|if
condition|(
name|sources
operator|==
literal|null
operator|||
name|sources
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|source
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|/*          * If the property or its source wasn't found. Otherwise, returns a list of the sources of          * the resource. The older sources are the first ones in the list.          */
name|source
operator|=
name|sources
index|[
name|sources
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
block|}
if|if
condition|(
name|sourceFilter
operator|==
literal|null
operator|||
name|sourceFilter
operator|.
name|test
argument_list|(
name|source
argument_list|)
condition|)
block|{
name|target
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{       }
block|}
return|return
name|target
return|;
block|}
specifier|public
specifier|static
name|JobConf
name|wrapWithJobConf
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Predicate
argument_list|<
name|String
argument_list|>
name|sourceFilter
parameter_list|)
block|{
name|JobConf
name|jc
init|=
operator|new
name|JobConf
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|copyInto
argument_list|(
name|jc
argument_list|,
name|defaultConf
argument_list|,
name|sourceFilter
argument_list|)
expr_stmt|;
name|copyInto
argument_list|(
name|jc
argument_list|,
name|conf
argument_list|,
name|sourceFilter
argument_list|)
expr_stmt|;
return|return
name|jc
return|;
block|}
block|}
end_class

end_unit

