begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|TaskTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|CopyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|StageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|ExternalTableCopyTaskBuilder
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExternalTableCopyTaskBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ReplLoadWork
name|work
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
name|ExternalTableCopyTaskBuilder
parameter_list|(
name|ReplLoadWork
name|work
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|work
operator|=
name|work
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|tasks
parameter_list|(
name|TaskTracker
name|tracker
parameter_list|)
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|DirCopyWork
argument_list|>
name|itr
init|=
name|work
operator|.
name|getPathsToCopyIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|tracker
operator|.
name|canAddMoreTasks
argument_list|()
operator|&&
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DirCopyWork
name|dirCopyWork
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|Task
argument_list|<
name|DirCopyWork
argument_list|>
name|task
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
name|dirCopyWork
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"added task for {}"
argument_list|,
name|dirCopyWork
argument_list|)
expr_stmt|;
block|}
return|return
name|tasks
return|;
block|}
specifier|public
specifier|static
class|class
name|DirCopyTask
extends|extends
name|Task
argument_list|<
name|DirCopyWork
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DirCopyTask
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_COPY_RETRY
init|=
literal|5
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|int
name|execute
parameter_list|(
name|DriverContext
name|driverContext
parameter_list|)
block|{
name|String
name|distCpDoAsUser
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DISTCP_DOAS_USER
argument_list|)
decl_stmt|;
name|Path
name|sourcePath
init|=
name|work
operator|.
name|fullyQualifiedSourcePath
decl_stmt|;
name|Path
name|targetPath
init|=
name|work
operator|.
name|fullyQualifiedTargetPath
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_ADD_RAW_RESERVED_NAMESPACE
argument_list|)
condition|)
block|{
name|sourcePath
operator|=
name|reservedRawPath
argument_list|(
name|work
operator|.
name|fullyQualifiedSourcePath
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|targetPath
operator|=
name|reservedRawPath
argument_list|(
name|work
operator|.
name|fullyQualifiedTargetPath
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|currentRetry
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|currentRetry
operator|<
name|MAX_COPY_RETRY
condition|)
block|{
try|try
block|{
name|UserGroupInformation
name|ugi
init|=
name|Utils
operator|.
name|getUGI
argument_list|()
decl_stmt|;
name|String
name|currentUser
init|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|boolean
name|usePrivilegedUser
init|=
name|distCpDoAsUser
operator|!=
literal|null
operator|&&
operator|!
name|currentUser
operator|.
name|equals
argument_list|(
name|distCpDoAsUser
argument_list|)
decl_stmt|;
comment|// do we create a new conf and only here provide this additional option so that we get away from
comment|// differences of data in two location for the same directories ?
comment|// basically add distcp.options.delete to hiveconf new object ?
name|FileUtils
operator|.
name|distCp
argument_list|(
name|sourcePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
comment|// source file system
name|Collections
operator|.
name|singletonList
argument_list|(
name|sourcePath
argument_list|)
argument_list|,
comment|// list of source paths
name|targetPath
argument_list|,
literal|false
argument_list|,
name|usePrivilegedUser
condition|?
name|distCpDoAsUser
else|:
literal|null
argument_list|,
name|conf
argument_list|,
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|++
name|currentRetry
operator|<
name|MAX_COPY_RETRY
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"unable to copy"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"unable to copy {} to {}"
argument_list|,
name|sourcePath
argument_list|,
name|targetPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|ErrorMsg
operator|.
name|getErrorMsg
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|getErrorCode
argument_list|()
return|;
block|}
block|}
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"should never come here "
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
specifier|private
specifier|static
name|Path
name|reservedRawPath
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|CopyUtils
operator|.
name|RAW_RESERVED_VIRTUAL_PATH
operator|+
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StageType
name|getType
parameter_list|()
block|{
return|return
name|StageType
operator|.
name|REPL_INCREMENTAL_LOAD
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"DIR_COPY_TASK"
return|;
block|}
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"HDFS Copy Operator"
argument_list|,
name|explainLevels
operator|=
block|{
name|Explain
operator|.
name|Level
operator|.
name|USER
block|,
name|Explain
operator|.
name|Level
operator|.
name|DEFAULT
block|,
name|Explain
operator|.
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
specifier|static
class|class
name|DirCopyWork
implements|implements
name|Serializable
block|{
specifier|private
specifier|final
name|Path
name|fullyQualifiedSourcePath
decl_stmt|,
name|fullyQualifiedTargetPath
decl_stmt|;
specifier|public
name|DirCopyWork
parameter_list|(
name|Path
name|fullyQualifiedSourcePath
parameter_list|,
name|Path
name|fullyQualifiedTargetPath
parameter_list|)
block|{
name|this
operator|.
name|fullyQualifiedSourcePath
operator|=
name|fullyQualifiedSourcePath
expr_stmt|;
name|this
operator|.
name|fullyQualifiedTargetPath
operator|=
name|fullyQualifiedTargetPath
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DirCopyWork{"
operator|+
literal|"fullyQualifiedSourcePath="
operator|+
name|fullyQualifiedSourcePath
operator|+
literal|", fullyQualifiedTargetPath="
operator|+
name|fullyQualifiedTargetPath
operator|+
literal|'}'
return|;
block|}
block|}
block|}
end_class

end_unit

