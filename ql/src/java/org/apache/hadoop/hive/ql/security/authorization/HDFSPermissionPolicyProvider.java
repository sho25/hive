begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePolicyChangeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveResourceACLs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveResourceACLsImpl
import|;
end_import

begin_comment
comment|/**  * PolicyProvider for storage based authorizer based on hdfs permission string  */
end_comment

begin_class
specifier|public
class|class
name|HDFSPermissionPolicyProvider
implements|implements
name|HivePolicyProvider
block|{
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|HDFSPermissionPolicyProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HiveResourceACLs
name|getResourceACLs
parameter_list|(
name|HivePrivilegeObject
name|hiveObject
parameter_list|)
block|{
name|HiveResourceACLs
name|acls
init|=
literal|null
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|hiveObject
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|DATABASE
case|:
name|Database
name|db
init|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|hiveObject
operator|.
name|getDbname
argument_list|()
argument_list|)
decl_stmt|;
name|acls
operator|=
name|getResourceACLs
argument_list|(
operator|new
name|Path
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE_OR_VIEW
case|:
case|case
name|COLUMN
case|:
name|Table
name|table
init|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getTable
argument_list|(
name|hiveObject
operator|.
name|getDbname
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
name|acls
operator|=
name|getResourceACLs
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// Shall never happen
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown request type:"
operator|+
name|hiveObject
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
return|return
name|acls
return|;
block|}
specifier|private
name|HiveResourceACLs
name|getResourceACLs
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"path is null"
argument_list|)
throw|;
block|}
specifier|final
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|pathStatus
init|=
name|FileUtils
operator|.
name|getFileStatusOrNull
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathStatus
operator|!=
literal|null
condition|)
block|{
return|return
name|getResourceACLs
argument_list|(
name|fs
argument_list|,
name|pathStatus
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|path
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// find the ancestor which exists to check its permissions
name|Path
name|par
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|FileStatus
name|parStatus
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|par
operator|!=
literal|null
condition|)
block|{
name|parStatus
operator|=
name|FileUtils
operator|.
name|getFileStatusOrNull
argument_list|(
name|fs
argument_list|,
name|par
argument_list|)
expr_stmt|;
if|if
condition|(
name|parStatus
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
name|par
operator|=
name|par
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
name|getResourceACLs
argument_list|(
name|fs
argument_list|,
name|parStatus
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|HiveResourceACLs
name|getResourceACLs
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|FileStatus
name|stat
parameter_list|)
block|{
name|String
name|owner
init|=
name|stat
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|String
name|group
init|=
name|stat
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|HiveResourceACLsImpl
name|acls
init|=
operator|new
name|HiveResourceACLsImpl
argument_list|()
decl_stmt|;
name|FsPermission
name|permission
init|=
name|stat
operator|.
name|getPermission
argument_list|()
decl_stmt|;
if|if
condition|(
name|permission
operator|.
name|getUserAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
condition|)
block|{
name|acls
operator|.
name|addUserEntry
argument_list|(
name|owner
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|permission
operator|.
name|getGroupAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
condition|)
block|{
name|acls
operator|.
name|addGroupEntry
argument_list|(
name|group
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|permission
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
condition|)
block|{
name|acls
operator|.
name|addGroupEntry
argument_list|(
literal|"public"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
block|}
return|return
name|acls
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerHivePolicyChangeListener
parameter_list|(
name|HivePolicyChangeListener
name|listener
parameter_list|)
block|{
comment|// Not implemented
block|}
block|}
end_class

end_unit

