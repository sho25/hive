begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|FileAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|helpers
operator|.
name|CountingQuietWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|helpers
operator|.
name|LogLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|helpers
operator|.
name|OptionConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_class
specifier|public
class|class
name|NoDeleteRollingFileAppender
extends|extends
name|FileAppender
block|{
comment|/**    * The default maximum file size is 10MB.    */
specifier|protected
name|long
name|maxFileSize
init|=
literal|10
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
name|long
name|nextRollover
init|=
literal|0
decl_stmt|;
comment|/**    * The default constructor simply calls its {@link FileAppender#FileAppender    * parents constructor}.    */
specifier|public
name|NoDeleteRollingFileAppender
parameter_list|()
block|{   }
comment|/**    * Instantiate a RollingFileAppender and open the file designated by    *<code>filename</code>. The opened filename will become the output    * destination for this appender.    *<p>    * If the<code>append</code> parameter is true, the file will be appended to.    * Otherwise, the file designated by<code>filename</code> will be truncated    * before being opened.    */
specifier|public
name|NoDeleteRollingFileAppender
parameter_list|(
name|Layout
name|layout
parameter_list|,
name|String
name|filename
parameter_list|,
name|boolean
name|append
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|layout
argument_list|,
name|filename
argument_list|,
name|append
argument_list|)
expr_stmt|;
block|}
comment|/**    * Instantiate a FileAppender and open the file designated by    *<code>filename</code>. The opened filename will become the output    * destination for this appender.    *<p>    * The file will be appended to.    */
specifier|public
name|NoDeleteRollingFileAppender
parameter_list|(
name|Layout
name|layout
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|layout
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the maximum size that the output file is allowed to reach before being    * rolled over to backup files.    */
specifier|public
name|long
name|getMaximumFileSize
parameter_list|()
block|{
return|return
name|maxFileSize
return|;
block|}
comment|/**    * Implements the usual roll over behavior.    *<p>    *<code>File</code> is renamed<code>File.yyyyMMddHHmmss</code> and closed. A    * new<code>File</code> is created to receive further log output.    */
comment|// synchronization not necessary since doAppend is already synced
specifier|public
name|void
name|rollOver
parameter_list|()
block|{
if|if
condition|(
name|qw
operator|!=
literal|null
condition|)
block|{
name|long
name|size
init|=
operator|(
operator|(
name|CountingQuietWriter
operator|)
name|qw
operator|)
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|LogLog
operator|.
name|debug
argument_list|(
literal|"rolling over count="
operator|+
name|size
argument_list|)
expr_stmt|;
comment|// if operation fails, do not roll again until
comment|// maxFileSize more bytes are written
name|nextRollover
operator|=
name|size
operator|+
name|maxFileSize
expr_stmt|;
block|}
name|this
operator|.
name|closeFile
argument_list|()
expr_stmt|;
comment|// keep windows happy.
name|int
name|p
init|=
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|file
init|=
name|p
operator|>
literal|0
condition|?
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
else|:
name|fileName
decl_stmt|;
try|try
block|{
comment|// This will also close the file. This is OK since multiple
comment|// close operations are safe.
name|this
operator|.
name|setFile
argument_list|(
name|file
argument_list|,
literal|false
argument_list|,
name|bufferedIO
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|nextRollover
operator|=
literal|0
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedIOException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|LogLog
operator|.
name|error
argument_list|(
literal|"setFile("
operator|+
name|file
operator|+
literal|", false) call failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|setFile
parameter_list|(
name|String
name|fileName
parameter_list|,
name|boolean
name|append
parameter_list|,
name|boolean
name|bufferedIO
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|newFileName
init|=
name|getLogFileName
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|super
operator|.
name|setFile
argument_list|(
name|newFileName
argument_list|,
name|append
argument_list|,
name|this
operator|.
name|bufferedIO
argument_list|,
name|this
operator|.
name|bufferSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|append
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|newFileName
argument_list|)
decl_stmt|;
operator|(
operator|(
name|CountingQuietWriter
operator|)
name|qw
operator|)
operator|.
name|setCount
argument_list|(
name|f
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the maximum size that the output file is allowed to reach before being    * rolled over to backup files.    *<p>    * This method is equivalent to {@link #setMaxFileSize} except that it is    * required for differentiating the setter taking a<code>long</code> argument    * from the setter taking a<code>String</code> argument by the JavaBeans    * {@link java.beans.Introspector Introspector}.    *    * @see #setMaxFileSize(String)    */
specifier|public
name|void
name|setMaximumFileSize
parameter_list|(
name|long
name|maxFileSize
parameter_list|)
block|{
name|this
operator|.
name|maxFileSize
operator|=
name|maxFileSize
expr_stmt|;
block|}
comment|/**    * Set the maximum size that the output file is allowed to reach before being    * rolled over to backup files.    *<p>    * In configuration files, the<b>MaxFileSize</b> option takes an long integer    * in the range 0 - 2^63. You can specify the value with the suffixes "KB",    * "MB" or "GB" so that the integer is interpreted being expressed    * respectively in kilobytes, megabytes or gigabytes. For example, the value    * "10KB" will be interpreted as 10240.    */
specifier|public
name|void
name|setMaxFileSize
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|maxFileSize
operator|=
name|OptionConverter
operator|.
name|toFileSize
argument_list|(
name|value
argument_list|,
name|maxFileSize
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setQWForFiles
parameter_list|(
name|Writer
name|writer
parameter_list|)
block|{
name|this
operator|.
name|qw
operator|=
operator|new
name|CountingQuietWriter
argument_list|(
name|writer
argument_list|,
name|errorHandler
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method differentiates RollingFileAppender from its super class.    */
specifier|protected
name|void
name|subAppend
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
name|super
operator|.
name|subAppend
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileName
operator|!=
literal|null
operator|&&
name|qw
operator|!=
literal|null
condition|)
block|{
name|long
name|size
init|=
operator|(
operator|(
name|CountingQuietWriter
operator|)
name|qw
operator|)
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>=
name|maxFileSize
operator|&&
name|size
operator|>=
name|nextRollover
condition|)
block|{
name|rollOver
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Mangled file name. Append the current timestamp
specifier|private
specifier|static
name|String
name|getLogFileName
parameter_list|(
name|String
name|oldFileName
parameter_list|)
block|{
return|return
name|oldFileName
operator|+
literal|"."
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

