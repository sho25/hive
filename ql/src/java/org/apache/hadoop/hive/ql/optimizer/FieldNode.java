begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|FieldNode
block|{
specifier|private
name|String
name|fieldName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FieldNode
argument_list|>
name|nodes
decl_stmt|;
specifier|public
name|FieldNode
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|nodes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
specifier|public
name|void
name|setFieldName
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|void
name|addFieldNodes
parameter_list|(
name|FieldNode
modifier|...
name|nodes
parameter_list|)
block|{
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
name|addFieldNodes
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|nodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addFieldNodes
parameter_list|(
name|List
argument_list|<
name|FieldNode
argument_list|>
name|nodes
parameter_list|)
block|{
for|for
control|(
name|FieldNode
name|fn
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|fn
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|nodes
operator|.
name|add
argument_list|(
name|fn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|List
argument_list|<
name|FieldNode
argument_list|>
name|getNodes
parameter_list|()
block|{
return|return
name|nodes
return|;
block|}
specifier|public
name|void
name|setNodes
parameter_list|(
name|List
argument_list|<
name|FieldNode
argument_list|>
name|nodes
parameter_list|)
block|{
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|toPaths
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|FieldNode
name|child
range|:
name|nodes
control|)
block|{
for|for
control|(
name|String
name|rest
range|:
name|child
operator|.
name|toPaths
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|fieldName
operator|+
literal|"."
operator|+
name|rest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|FieldNode
name|fromPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|path
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
return|return
name|fromPath
argument_list|(
name|parts
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|FieldNode
name|fromPath
parameter_list|(
name|String
index|[]
name|parts
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|==
name|parts
operator|.
name|length
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FieldNode
name|fn
init|=
operator|new
name|FieldNode
argument_list|(
name|parts
index|[
name|index
index|]
argument_list|)
decl_stmt|;
name|fn
operator|.
name|addFieldNodes
argument_list|(
name|fromPath
argument_list|(
name|parts
argument_list|,
name|index
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fn
return|;
block|}
comment|/**    * Merge the field node 'fn' into list 'nodes', and return the result list.    */
specifier|public
specifier|static
name|List
argument_list|<
name|FieldNode
argument_list|>
name|mergeFieldNodes
parameter_list|(
name|List
argument_list|<
name|FieldNode
argument_list|>
name|nodes
parameter_list|,
name|FieldNode
name|fn
parameter_list|)
block|{
name|List
argument_list|<
name|FieldNode
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|FieldNode
name|mfn
init|=
name|mergeFieldNode
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|fn
argument_list|)
decl_stmt|;
if|if
condition|(
name|mfn
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|mfn
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
name|result
operator|.
name|add
argument_list|(
name|fn
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|FieldNode
argument_list|>
name|mergeFieldNodes
parameter_list|(
name|List
argument_list|<
name|FieldNode
argument_list|>
name|left
parameter_list|,
name|List
argument_list|<
name|FieldNode
argument_list|>
name|right
parameter_list|)
block|{
name|List
argument_list|<
name|FieldNode
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|left
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldNode
name|fn
range|:
name|right
control|)
block|{
name|result
operator|=
name|mergeFieldNodes
argument_list|(
name|result
argument_list|,
name|fn
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Merge the field nodes 'left' and 'right' and return the merged node.    * Return null if the two nodes cannot be merged.    *    * There are basically 3 cases here:    * 1. 'left' and 'right' have the same depth, e.g., 'left' is s[b[c]] and    *   'right' is s[b[d]]. In this case, the merged node is s[b[c,d]]    * 2. 'left' has larger depth than 'right', e.g., 'left' is s[b] while    *   'right' is s[b[d]]. In this case, the merged node is s[b]    * 3. 'left' has smaller depth than 'right', e.g., 'left' is s[b[c]] while    *   'right' is s[b]. This is the opposite case of 2), and similarly,    *   the merged node is s[b].    *    * A example where the two inputs cannot be merged is, 'left' is s[b] while    *   'right' is p[c].    */
specifier|public
specifier|static
name|FieldNode
name|mergeFieldNode
parameter_list|(
name|FieldNode
name|left
parameter_list|,
name|FieldNode
name|right
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|left
operator|.
name|getFieldName
argument_list|()
operator|!=
literal|null
operator|&&
name|right
operator|.
name|getFieldName
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|left
operator|.
name|getFieldName
argument_list|()
operator|.
name|equals
argument_list|(
name|right
operator|.
name|getFieldName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|left
operator|.
name|getNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|left
return|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|getNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|right
return|;
block|}
else|else
block|{
comment|// Both are not empty. Merge two lists.
name|FieldNode
name|result
init|=
operator|new
name|FieldNode
argument_list|(
name|left
operator|.
name|getFieldName
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|setNodes
argument_list|(
name|mergeFieldNodes
argument_list|(
name|left
operator|.
name|getNodes
argument_list|()
argument_list|,
name|right
operator|.
name|getNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|res
init|=
name|fieldName
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|res
operator|+=
literal|"["
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|nodes
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|res
operator|+=
name|nodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|res
operator|+=
name|nodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|","
expr_stmt|;
block|}
block|}
name|res
operator|+=
literal|"]"
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FieldNode
name|fieldNode
init|=
operator|(
name|FieldNode
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|fieldName
operator|!=
literal|null
condition|?
operator|!
name|fieldName
operator|.
name|equals
argument_list|(
name|fieldNode
operator|.
name|fieldName
argument_list|)
else|:
name|fieldNode
operator|.
name|fieldName
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|nodes
operator|!=
literal|null
condition|?
name|nodes
operator|.
name|equals
argument_list|(
name|fieldNode
operator|.
name|nodes
argument_list|)
else|:
name|fieldNode
operator|.
name|nodes
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|fieldName
operator|!=
literal|null
condition|?
name|fieldName
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|nodes
operator|!=
literal|null
condition|?
name|nodes
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

