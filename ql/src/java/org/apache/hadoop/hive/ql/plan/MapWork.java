begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
operator|.
name|BucketingSortingCtx
operator|.
name|BucketCol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
operator|.
name|BucketingSortingCtx
operator|.
name|SortCol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SplitSample
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Interner
import|;
end_import

begin_comment
comment|/**  * MapWork represents all the information used to run a map task on the cluster.  * It is first used when the query planner breaks the logical plan into tasks and  * used throughout physical optimization to track map-side operator plans, input  * paths, aliases, etc.  *  * ExecDriver will serialize the contents of this class and make sure it is  * distributed on the cluster. The ExecMapper will ultimately deserialize this  * class on the data nodes and setup it's operator pipeline accordingly.  *  * This class is also used in the explain command any property with the  * appropriate annotation will be displayed in the explain output.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"serial"
block|}
argument_list|)
specifier|public
class|class
name|MapWork
extends|extends
name|BaseWork
block|{
comment|// use LinkedHashMap to make sure the iteration order is
comment|// deterministic, to ease testing
specifier|private
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliases
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
name|pathToPartitionInfo
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|aliasToWork
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|PartitionDesc
argument_list|>
name|aliasToPartnInfo
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|PartitionDesc
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|SplitSample
argument_list|>
name|nameToSplitSample
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|SplitSample
argument_list|>
argument_list|()
decl_stmt|;
comment|// If this map task has a FileSinkOperator, and bucketing/sorting metadata can be
comment|// inferred about the data being written by that operator, these are mappings from the directory
comment|// that operator writes into to the bucket/sort columns for that data.
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|BucketCol
argument_list|>
argument_list|>
name|bucketedColsByDirectory
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|BucketCol
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SortCol
argument_list|>
argument_list|>
name|sortedColsByDirectory
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SortCol
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Path
name|tmpHDFSPath
decl_stmt|;
specifier|private
name|Path
name|tmpPathForPartitionPruning
decl_stmt|;
specifier|private
name|String
name|inputformat
decl_stmt|;
specifier|private
name|String
name|indexIntermediateFile
decl_stmt|;
specifier|private
name|Integer
name|numMapTasks
decl_stmt|;
specifier|private
name|Long
name|maxSplitSize
decl_stmt|;
specifier|private
name|Long
name|minSplitSize
decl_stmt|;
specifier|private
name|Long
name|minSplitSizePerNode
decl_stmt|;
specifier|private
name|Long
name|minSplitSizePerRack
decl_stmt|;
comment|//use sampled partitioning
specifier|private
name|int
name|samplingType
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|SAMPLING_ON_PREV_MR
init|=
literal|1
decl_stmt|;
comment|// todo HIVE-3841
specifier|public
specifier|static
specifier|final
name|int
name|SAMPLING_ON_START
init|=
literal|2
decl_stmt|;
comment|// sampling on task running
comment|// the following two are used for join processing
specifier|private
name|boolean
name|leftInputJoin
decl_stmt|;
specifier|private
name|String
index|[]
name|baseSrc
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|mapAliases
decl_stmt|;
specifier|private
name|boolean
name|mapperCannotSpanPartns
decl_stmt|;
comment|// used to indicate the input is sorted, and so a BinarySearchRecordReader shoudl be used
specifier|private
name|boolean
name|inputFormatSorted
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|useBucketizedHiveInputFormat
decl_stmt|;
specifier|private
name|boolean
name|dummyTableScan
init|=
literal|false
decl_stmt|;
comment|// used for dynamic partitioning
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TableDesc
argument_list|>
argument_list|>
name|eventSourceTableDescMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TableDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|eventSourceColumnNameMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|eventSourceColumnTypeMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|eventSourcePartKeyExprMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|doSplitsGrouping
init|=
literal|true
decl_stmt|;
specifier|private
name|VectorizedRowBatch
name|vectorizedRowBatch
decl_stmt|;
comment|// bitsets can't be correctly serialized by Kryo's default serializer
comment|// BitSet::wordsInUse is transient, so force dumping into a lower form
specifier|private
name|byte
index|[]
name|includedBuckets
decl_stmt|;
comment|/** Whether LLAP IO will be used for inputs. */
specifier|private
name|String
name|llapIoDesc
decl_stmt|;
specifier|public
name|MapWork
parameter_list|()
block|{}
specifier|public
name|MapWork
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// HIVE-12244: this @Explain should be on the new method; but it changes the explain result
comment|// HIVE-12244: example test which can be used to validate change: -Dtest=TestMiniLlapCliDriver -Dqfile=dynamic_partition_pruning.q
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Path -> Alias"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
annotation|@
name|Deprecated
specifier|public
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|getPathToAliasesOld
parameter_list|()
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|ret
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|p2a
range|:
name|pathToAliases
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|p2a
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|p2a
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|// @Explain(displayName = "Path -> Alias", explainLevels = { Level.EXTENDED })
specifier|public
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|getPathToAliases
parameter_list|()
block|{
comment|//
return|return
name|pathToAliases
return|;
block|}
specifier|public
name|void
name|setPathToAliases
parameter_list|(
specifier|final
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliases
parameter_list|)
block|{
name|this
operator|.
name|pathToAliases
operator|=
name|pathToAliases
expr_stmt|;
block|}
specifier|public
name|void
name|addPathToAlias
parameter_list|(
name|Path
name|path
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|aliases
parameter_list|)
block|{
name|pathToAliases
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addPathToAlias
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|newAlias
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|pathToAliases
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|aliases
operator|==
literal|null
condition|)
block|{
name|aliases
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|pathToAliases
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
block|}
name|aliases
operator|.
name|add
argument_list|(
name|newAlias
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removePathToAlias
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|pathToAliases
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is used to display and verify output of "Path -> Alias" in test framework.    *    * QTestUtil masks "Path -> Alias" and makes verification impossible.    * By keeping "Path -> Alias" intact and adding a new display name which is not    * masked by QTestUtil by removing prefix.    *    * Notes: we would still be masking for intermediate directories.    *    * @return    */
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Truncated Path -> Alias"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|getTruncatedPathToAliases
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|trunPathToAliases
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|itr
init|=
name|this
operator|.
name|pathToAliases
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Entry
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|Path
name|origiKey
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|newKey
init|=
name|PlanUtils
operator|.
name|removePrefixFromWarehouseConfig
argument_list|(
name|origiKey
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|trunPathToAliases
operator|.
name|put
argument_list|(
name|newKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|trunPathToAliases
return|;
block|}
comment|// HIVE-12244: this @Explain should be on the new method; but it changes the explain result
comment|// HIVE-12244: example test which can be used to validate change: combine2.q
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Path -> Partition"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
annotation|@
name|Deprecated
specifier|public
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|PartitionDesc
argument_list|>
name|getPathToPartitionInfoOld
parameter_list|()
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|PartitionDesc
argument_list|>
name|ret
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
name|p2a
range|:
name|pathToPartitionInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|p2a
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|p2a
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|//@Explain(displayName = "Path -> Partition", explainLevels = { Level.EXTENDED })
specifier|public
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
name|getPathToPartitionInfo
parameter_list|()
block|{
return|return
name|pathToPartitionInfo
return|;
block|}
specifier|public
name|void
name|setPathToPartitionInfo
parameter_list|(
specifier|final
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
name|pathToPartitionInfo
parameter_list|)
block|{
name|this
operator|.
name|pathToPartitionInfo
operator|=
name|pathToPartitionInfo
expr_stmt|;
block|}
specifier|public
name|void
name|addPathToPartitionInfo
parameter_list|(
name|Path
name|path
parameter_list|,
name|PartitionDesc
name|partitionInfo
parameter_list|)
block|{
if|if
condition|(
name|pathToPartitionInfo
operator|==
literal|null
condition|)
block|{
name|pathToPartitionInfo
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|pathToPartitionInfo
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|partitionInfo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removePathToPartitionInfo
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|pathToPartitionInfo
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**    * Derive additional attributes to be rendered by EXPLAIN.    * TODO: this method is relied upon by custom input formats to set jobconf properties.    *       This is madness? - This is Hive Storage Handlers!    */
specifier|public
name|void
name|deriveExplainAttributes
parameter_list|()
block|{
if|if
condition|(
name|pathToPartitionInfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
name|entry
range|:
name|pathToPartitionInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|deriveBaseFileName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|MapredLocalWork
name|mapLocalWork
init|=
name|getMapRedLocalWork
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapLocalWork
operator|!=
literal|null
condition|)
block|{
name|mapLocalWork
operator|.
name|deriveExplainAttributes
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deriveLlap
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|isExecDriver
parameter_list|)
block|{
name|boolean
name|hasLlap
init|=
literal|false
decl_stmt|,
name|hasNonLlap
init|=
literal|false
decl_stmt|,
name|hasAcid
init|=
literal|false
decl_stmt|;
comment|// Assume the IO is enabled on the daemon by default. We cannot reasonably check it here.
name|boolean
name|isLlapOn
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_IO_ENABLED
argument_list|,
name|llapMode
argument_list|)
decl_stmt|;
name|boolean
name|canWrapAny
init|=
literal|false
decl_stmt|,
name|doCheckIfs
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isLlapOn
condition|)
block|{
comment|// We can wrap inputs if the execution is vectorized, or if we use a wrapper.
name|canWrapAny
operator|=
name|Utilities
operator|.
name|getUseVectorizedInputFileFormat
argument_list|(
name|conf
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// ExecDriver has no plan path, so we cannot derive VRB stuff for the wrapper.
if|if
condition|(
operator|!
name|canWrapAny
operator|&&
operator|!
name|isExecDriver
condition|)
block|{
name|canWrapAny
operator|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_IO_NONVECTOR_WRAPPER_ENABLED
argument_list|)
expr_stmt|;
name|doCheckIfs
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|boolean
name|hasPathToPartInfo
init|=
operator|(
name|pathToPartitionInfo
operator|!=
literal|null
operator|&&
operator|!
name|pathToPartitionInfo
operator|.
name|isEmpty
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|canWrapAny
operator|&&
name|hasPathToPartInfo
condition|)
block|{
assert|assert
name|isLlapOn
assert|;
for|for
control|(
name|PartitionDesc
name|part
range|:
name|pathToPartitionInfo
operator|.
name|values
argument_list|()
control|)
block|{
name|boolean
name|isUsingLlapIo
init|=
name|HiveInputFormat
operator|.
name|canWrapForLlap
argument_list|(
name|part
operator|.
name|getInputFileFormatClass
argument_list|()
argument_list|,
name|doCheckIfs
argument_list|)
decl_stmt|;
if|if
condition|(
name|isUsingLlapIo
condition|)
block|{
if|if
condition|(
name|part
operator|.
name|getTableDesc
argument_list|()
operator|!=
literal|null
operator|&&
name|AcidUtils
operator|.
name|isTablePropertyTransactional
argument_list|(
name|part
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
condition|)
block|{
name|hasAcid
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|hasLlap
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|hasNonLlap
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|// check if the column types that are read are supported by LLAP IO
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|entry
range|:
name|aliasToWork
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|hasLlap
condition|)
block|{
specifier|final
name|String
name|alias
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|PartitionDesc
name|partitionDesc
init|=
name|aliasToPartnInfo
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|instanceof
name|TableScanOperator
operator|&&
name|partitionDesc
operator|!=
literal|null
operator|&&
name|partitionDesc
operator|.
name|getTableDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|TableScanOperator
name|tsOp
init|=
operator|(
name|TableScanOperator
operator|)
name|op
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|readColumnNames
init|=
name|tsOp
operator|.
name|getNeededColumns
argument_list|()
decl_stmt|;
specifier|final
name|Properties
name|props
init|=
name|partitionDesc
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getProperties
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfos
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|allColumnTypes
init|=
name|TypeInfoUtils
operator|.
name|getTypeStringsFromTypeInfo
argument_list|(
name|typeInfos
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|allColumnNames
init|=
name|Utilities
operator|.
name|getColumnNames
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|hasLlap
operator|=
name|Utilities
operator|.
name|checkLlapIOSupportedTypes
argument_list|(
name|readColumnNames
argument_list|,
name|allColumnNames
argument_list|,
name|allColumnTypes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|llapIoDesc
operator|=
name|deriveLlapIoDescString
argument_list|(
name|isLlapOn
argument_list|,
name|canWrapAny
argument_list|,
name|hasPathToPartInfo
argument_list|,
name|hasLlap
argument_list|,
name|hasNonLlap
argument_list|,
name|hasAcid
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|deriveLlapIoDescString
parameter_list|(
name|boolean
name|isLlapOn
parameter_list|,
name|boolean
name|canWrapAny
parameter_list|,
name|boolean
name|hasPathToPartInfo
parameter_list|,
name|boolean
name|hasLlap
parameter_list|,
name|boolean
name|hasNonLlap
parameter_list|,
name|boolean
name|hasAcid
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isLlapOn
condition|)
return|return
literal|null
return|;
comment|// LLAP IO is off, don't output.
if|if
condition|(
operator|!
name|canWrapAny
condition|)
return|return
literal|"no inputs"
return|;
comment|// Cannot use with input formats.
if|if
condition|(
operator|!
name|hasPathToPartInfo
condition|)
return|return
literal|"unknown"
return|;
comment|// No information to judge.
if|if
condition|(
name|hasAcid
condition|)
return|return
literal|"may be used (ACID table)"
return|;
return|return
operator|(
name|hasLlap
condition|?
operator|(
name|hasNonLlap
condition|?
literal|"some inputs"
else|:
literal|"all inputs"
operator|)
else|:
literal|"no inputs"
operator|)
return|;
block|}
specifier|public
name|void
name|internTable
parameter_list|(
name|Interner
argument_list|<
name|TableDesc
argument_list|>
name|interner
parameter_list|)
block|{
if|if
condition|(
name|aliasToPartnInfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PartitionDesc
name|part
range|:
name|aliasToPartnInfo
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|part
operator|.
name|intern
argument_list|(
name|interner
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pathToPartitionInfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PartitionDesc
name|part
range|:
name|pathToPartitionInfo
operator|.
name|values
argument_list|()
control|)
block|{
name|part
operator|.
name|intern
argument_list|(
name|interner
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return the aliasToPartnInfo    */
specifier|public
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|PartitionDesc
argument_list|>
name|getAliasToPartnInfo
parameter_list|()
block|{
return|return
name|aliasToPartnInfo
return|;
block|}
comment|/**    * @param aliasToPartnInfo    *          the aliasToPartnInfo to set    */
specifier|public
name|void
name|setAliasToPartnInfo
parameter_list|(
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|PartitionDesc
argument_list|>
name|aliasToPartnInfo
parameter_list|)
block|{
name|this
operator|.
name|aliasToPartnInfo
operator|=
name|aliasToPartnInfo
expr_stmt|;
block|}
specifier|public
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|getAliasToWork
parameter_list|()
block|{
return|return
name|aliasToWork
return|;
block|}
specifier|public
name|void
name|setAliasToWork
parameter_list|(
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|aliasToWork
parameter_list|)
block|{
name|this
operator|.
name|aliasToWork
operator|=
name|aliasToWork
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Split Sample"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|SplitSample
argument_list|>
name|getNameToSplitSample
parameter_list|()
block|{
return|return
name|nameToSplitSample
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"LLAP IO"
argument_list|)
specifier|public
name|String
name|getLlapIoDesc
parameter_list|()
block|{
return|return
name|llapIoDesc
return|;
block|}
specifier|public
name|void
name|setNameToSplitSample
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|SplitSample
argument_list|>
name|nameToSplitSample
parameter_list|)
block|{
name|this
operator|.
name|nameToSplitSample
operator|=
name|nameToSplitSample
expr_stmt|;
block|}
specifier|public
name|Integer
name|getNumMapTasks
parameter_list|()
block|{
return|return
name|numMapTasks
return|;
block|}
specifier|public
name|void
name|setNumMapTasks
parameter_list|(
name|Integer
name|numMapTasks
parameter_list|)
block|{
name|this
operator|.
name|numMapTasks
operator|=
name|numMapTasks
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
name|void
name|addMapWork
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|alias
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|work
parameter_list|,
name|PartitionDesc
name|pd
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|curAliases
init|=
name|pathToAliases
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|curAliases
operator|==
literal|null
condition|)
block|{
assert|assert
operator|(
name|pathToPartitionInfo
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|==
literal|null
operator|)
assert|;
name|curAliases
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|pathToAliases
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|curAliases
argument_list|)
expr_stmt|;
name|pathToPartitionInfo
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|pd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
operator|(
name|pathToPartitionInfo
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|!=
literal|null
operator|)
assert|;
block|}
for|for
control|(
name|String
name|oneAlias
range|:
name|curAliases
control|)
block|{
if|if
condition|(
name|oneAlias
operator|.
name|equals
argument_list|(
name|alias
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Multiple aliases named: "
operator|+
name|alias
operator|+
literal|" for path: "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
name|curAliases
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
if|if
condition|(
name|aliasToWork
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Existing work for alias: "
operator|+
name|alias
argument_list|)
throw|;
block|}
name|aliasToWork
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|work
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInputFormatSorted
parameter_list|()
block|{
return|return
name|inputFormatSorted
return|;
block|}
specifier|public
name|void
name|setInputFormatSorted
parameter_list|(
name|boolean
name|inputFormatSorted
parameter_list|)
block|{
name|this
operator|.
name|inputFormatSorted
operator|=
name|inputFormatSorted
expr_stmt|;
block|}
specifier|public
name|void
name|resolveDynamicPartitionStoredAsSubDirsMerge
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Path
name|path
parameter_list|,
name|TableDesc
name|tblDesc
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|aliases
parameter_list|,
name|PartitionDesc
name|partDesc
parameter_list|)
block|{
name|pathToAliases
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
name|pathToPartitionInfo
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|partDesc
argument_list|)
expr_stmt|;
block|}
comment|/**    * For each map side operator - stores the alias the operator is working on    * behalf of in the operator runtime state. This is used by reduce sink    * operator - but could be useful for debugging as well.    */
specifier|private
name|void
name|setAliases
parameter_list|()
block|{
if|if
condition|(
name|aliasToWork
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|oneAlias
range|:
name|aliasToWork
operator|.
name|keySet
argument_list|()
control|)
block|{
name|aliasToWork
operator|.
name|get
argument_list|(
name|oneAlias
argument_list|)
operator|.
name|setAlias
argument_list|(
name|oneAlias
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Execution mode"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getExecutionMode
parameter_list|()
block|{
if|if
condition|(
name|vectorMode
condition|)
block|{
if|if
condition|(
name|llapMode
condition|)
block|{
if|if
condition|(
name|uberMode
condition|)
block|{
return|return
literal|"vectorized, uber"
return|;
block|}
else|else
block|{
return|return
literal|"vectorized, llap"
return|;
block|}
block|}
else|else
block|{
return|return
literal|"vectorized"
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|llapMode
condition|)
block|{
return|return
name|uberMode
condition|?
literal|"uber"
else|:
literal|"llap"
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|replaceRoots
parameter_list|(
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|,
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|replacementMap
parameter_list|)
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|newAliasToWork
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|aliasToWork
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|newAliasToWork
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|replacementMap
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setAliasToWork
argument_list|(
name|newAliasToWork
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Map Operator Tree"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|getAllRootOperators
parameter_list|()
block|{
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|opSet
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
range|:
name|getAliasToWork
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|opSet
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
return|return
name|opSet
return|;
block|}
annotation|@
name|Override
specifier|public
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|getAnyRootOperator
parameter_list|()
block|{
return|return
name|aliasToWork
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|aliasToWork
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
specifier|public
name|void
name|mergeAliasedInput
parameter_list|(
name|String
name|alias
parameter_list|,
name|Path
name|pathDir
parameter_list|,
name|PartitionDesc
name|partitionInfo
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|pathToAliases
operator|.
name|get
argument_list|(
name|pathDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|aliases
operator|==
literal|null
condition|)
block|{
name|aliases
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|alias
argument_list|)
argument_list|)
expr_stmt|;
name|pathToAliases
operator|.
name|put
argument_list|(
name|pathDir
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
name|pathToPartitionInfo
operator|.
name|put
argument_list|(
name|pathDir
argument_list|,
name|partitionInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aliases
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initialize
parameter_list|()
block|{
name|setAliases
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Long
name|getMaxSplitSize
parameter_list|()
block|{
return|return
name|maxSplitSize
return|;
block|}
specifier|public
name|void
name|setMaxSplitSize
parameter_list|(
name|Long
name|maxSplitSize
parameter_list|)
block|{
name|this
operator|.
name|maxSplitSize
operator|=
name|maxSplitSize
expr_stmt|;
block|}
specifier|public
name|Long
name|getMinSplitSize
parameter_list|()
block|{
return|return
name|minSplitSize
return|;
block|}
specifier|public
name|void
name|setMinSplitSize
parameter_list|(
name|Long
name|minSplitSize
parameter_list|)
block|{
name|this
operator|.
name|minSplitSize
operator|=
name|minSplitSize
expr_stmt|;
block|}
specifier|public
name|Long
name|getMinSplitSizePerNode
parameter_list|()
block|{
return|return
name|minSplitSizePerNode
return|;
block|}
specifier|public
name|void
name|setMinSplitSizePerNode
parameter_list|(
name|Long
name|minSplitSizePerNode
parameter_list|)
block|{
name|this
operator|.
name|minSplitSizePerNode
operator|=
name|minSplitSizePerNode
expr_stmt|;
block|}
specifier|public
name|Long
name|getMinSplitSizePerRack
parameter_list|()
block|{
return|return
name|minSplitSizePerRack
return|;
block|}
specifier|public
name|void
name|setMinSplitSizePerRack
parameter_list|(
name|Long
name|minSplitSizePerRack
parameter_list|)
block|{
name|this
operator|.
name|minSplitSizePerRack
operator|=
name|minSplitSizePerRack
expr_stmt|;
block|}
specifier|public
name|String
name|getInputformat
parameter_list|()
block|{
return|return
name|inputformat
return|;
block|}
specifier|public
name|void
name|setInputformat
parameter_list|(
name|String
name|inputformat
parameter_list|)
block|{
name|this
operator|.
name|inputformat
operator|=
name|inputformat
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseBucketizedHiveInputFormat
parameter_list|()
block|{
return|return
name|useBucketizedHiveInputFormat
return|;
block|}
specifier|public
name|void
name|setUseBucketizedHiveInputFormat
parameter_list|(
name|boolean
name|useBucketizedHiveInputFormat
parameter_list|)
block|{
name|this
operator|.
name|useBucketizedHiveInputFormat
operator|=
name|useBucketizedHiveInputFormat
expr_stmt|;
block|}
specifier|public
name|void
name|setMapperCannotSpanPartns
parameter_list|(
name|boolean
name|mapperCannotSpanPartns
parameter_list|)
block|{
name|this
operator|.
name|mapperCannotSpanPartns
operator|=
name|mapperCannotSpanPartns
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMapperCannotSpanPartns
parameter_list|()
block|{
return|return
name|this
operator|.
name|mapperCannotSpanPartns
return|;
block|}
specifier|public
name|String
name|getIndexIntermediateFile
parameter_list|()
block|{
return|return
name|indexIntermediateFile
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getAliases
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|aliasToWork
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|getWorks
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|aliasToWork
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|getPaths
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|pathToAliases
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|PartitionDesc
argument_list|>
name|getPartitionDescs
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|PartitionDesc
argument_list|>
argument_list|(
name|aliasToPartnInfo
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Path
name|getTmpHDFSPath
parameter_list|()
block|{
return|return
name|tmpHDFSPath
return|;
block|}
specifier|public
name|void
name|setTmpHDFSPath
parameter_list|(
name|Path
name|tmpHDFSPath
parameter_list|)
block|{
name|this
operator|.
name|tmpHDFSPath
operator|=
name|tmpHDFSPath
expr_stmt|;
block|}
specifier|public
name|Path
name|getTmpPathForPartitionPruning
parameter_list|()
block|{
return|return
name|this
operator|.
name|tmpPathForPartitionPruning
return|;
block|}
specifier|public
name|void
name|setTmpPathForPartitionPruning
parameter_list|(
name|Path
name|tmpPathForPartitionPruning
parameter_list|)
block|{
name|this
operator|.
name|tmpPathForPartitionPruning
operator|=
name|tmpPathForPartitionPruning
expr_stmt|;
block|}
specifier|public
name|void
name|mergingInto
parameter_list|(
name|MapWork
name|mapWork
parameter_list|)
block|{
comment|// currently, this is sole field affecting mergee task
name|mapWork
operator|.
name|useBucketizedHiveInputFormat
operator||=
name|useBucketizedHiveInputFormat
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Path -> Bucketed Columns"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|BucketCol
argument_list|>
argument_list|>
name|getBucketedColsByDirectory
parameter_list|()
block|{
return|return
name|bucketedColsByDirectory
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Path -> Sorted Columns"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SortCol
argument_list|>
argument_list|>
name|getSortedColsByDirectory
parameter_list|()
block|{
return|return
name|sortedColsByDirectory
return|;
block|}
specifier|public
name|void
name|addIndexIntermediateFile
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|indexIntermediateFile
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|indexIntermediateFile
operator|=
name|fileName
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|indexIntermediateFile
operator|+=
literal|","
operator|+
name|fileName
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getSamplingType
parameter_list|()
block|{
return|return
name|samplingType
return|;
block|}
specifier|public
name|void
name|setSamplingType
parameter_list|(
name|int
name|samplingType
parameter_list|)
block|{
name|this
operator|.
name|samplingType
operator|=
name|samplingType
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Sampling"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getSamplingTypeString
parameter_list|()
block|{
return|return
name|samplingType
operator|==
literal|1
condition|?
literal|"SAMPLING_ON_PREV_MR"
else|:
name|samplingType
operator|==
literal|2
condition|?
literal|"SAMPLING_ON_START"
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configureJobConf
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
for|for
control|(
name|PartitionDesc
name|partition
range|:
name|aliasToPartnInfo
operator|.
name|values
argument_list|()
control|)
block|{
name|PlanUtils
operator|.
name|configureJobConf
argument_list|(
name|partition
operator|.
name|getTableDesc
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|mappers
init|=
name|aliasToWork
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|FileSinkOperator
name|fs
range|:
name|OperatorUtils
operator|.
name|findOperators
argument_list|(
name|mappers
argument_list|,
name|FileSinkOperator
operator|.
name|class
argument_list|)
control|)
block|{
name|PlanUtils
operator|.
name|configureJobConf
argument_list|(
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getTableInfo
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setDummyTableScan
parameter_list|(
name|boolean
name|dummyTableScan
parameter_list|)
block|{
name|this
operator|.
name|dummyTableScan
operator|=
name|dummyTableScan
expr_stmt|;
block|}
specifier|public
name|boolean
name|getDummyTableScan
parameter_list|()
block|{
return|return
name|dummyTableScan
return|;
block|}
specifier|public
name|void
name|setEventSourceTableDescMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TableDesc
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|eventSourceTableDescMap
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TableDesc
argument_list|>
argument_list|>
name|getEventSourceTableDescMap
parameter_list|()
block|{
return|return
name|eventSourceTableDescMap
return|;
block|}
specifier|public
name|void
name|setEventSourceColumnNameMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|eventSourceColumnNameMap
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getEventSourceColumnNameMap
parameter_list|()
block|{
return|return
name|eventSourceColumnNameMap
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getEventSourceColumnTypeMap
parameter_list|()
block|{
return|return
name|eventSourceColumnTypeMap
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|getEventSourcePartKeyExprMap
parameter_list|()
block|{
return|return
name|eventSourcePartKeyExprMap
return|;
block|}
specifier|public
name|void
name|setEventSourcePartKeyExprMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|eventSourcePartKeyExprMap
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|void
name|setDoSplitsGrouping
parameter_list|(
name|boolean
name|doSplitsGrouping
parameter_list|)
block|{
name|this
operator|.
name|doSplitsGrouping
operator|=
name|doSplitsGrouping
expr_stmt|;
block|}
specifier|public
name|boolean
name|getDoSplitsGrouping
parameter_list|()
block|{
return|return
name|this
operator|.
name|doSplitsGrouping
return|;
block|}
specifier|public
name|boolean
name|isLeftInputJoin
parameter_list|()
block|{
return|return
name|leftInputJoin
return|;
block|}
specifier|public
name|void
name|setLeftInputJoin
parameter_list|(
name|boolean
name|leftInputJoin
parameter_list|)
block|{
name|this
operator|.
name|leftInputJoin
operator|=
name|leftInputJoin
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getBaseSrc
parameter_list|()
block|{
return|return
name|baseSrc
return|;
block|}
specifier|public
name|void
name|setBaseSrc
parameter_list|(
name|String
index|[]
name|baseSrc
parameter_list|)
block|{
name|this
operator|.
name|baseSrc
operator|=
name|baseSrc
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMapAliases
parameter_list|()
block|{
return|return
name|mapAliases
return|;
block|}
specifier|public
name|void
name|setMapAliases
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|mapAliases
parameter_list|)
block|{
name|this
operator|.
name|mapAliases
operator|=
name|mapAliases
expr_stmt|;
block|}
specifier|public
name|BitSet
name|getIncludedBuckets
parameter_list|()
block|{
return|return
name|includedBuckets
operator|!=
literal|null
condition|?
name|BitSet
operator|.
name|valueOf
argument_list|(
name|includedBuckets
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|void
name|setIncludedBuckets
parameter_list|(
name|BitSet
name|includedBuckets
parameter_list|)
block|{
comment|// see comment next to the field
name|this
operator|.
name|includedBuckets
operator|=
name|includedBuckets
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setVectorizedRowBatch
parameter_list|(
name|VectorizedRowBatch
name|vectorizedRowBatch
parameter_list|)
block|{
name|this
operator|.
name|vectorizedRowBatch
operator|=
name|vectorizedRowBatch
expr_stmt|;
block|}
specifier|public
name|VectorizedRowBatch
name|getVectorizedRowBatch
parameter_list|()
block|{
return|return
name|vectorizedRowBatch
return|;
block|}
block|}
end_class

end_unit

