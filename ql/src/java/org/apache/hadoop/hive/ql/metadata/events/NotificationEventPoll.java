begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|NotificationEventPoll
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NotificationEventPoll
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicBoolean
name|inited
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|NotificationEventPoll
name|instance
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
name|ScheduledExecutorService
name|executorService
decl_stmt|;
name|List
argument_list|<
name|EventConsumer
argument_list|>
name|eventConsumers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|pollFuture
decl_stmt|;
name|long
name|lastCheckedEventId
decl_stmt|;
specifier|public
specifier|static
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|inited
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
try|try
block|{
name|instance
operator|=
operator|new
name|NotificationEventPoll
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|inited
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
throw|throw
name|err
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
comment|// Should only be called for testing.
if|if
condition|(
name|inited
operator|.
name|get
argument_list|()
condition|)
block|{
name|instance
operator|.
name|stop
argument_list|()
expr_stmt|;
name|instance
operator|=
literal|null
expr_stmt|;
name|inited
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|NotificationEventPoll
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|long
name|pollInterval
init|=
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_NOTFICATION_EVENT_POLL_INTERVAL
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|pollInterval
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Non-positive poll interval configured, notification event polling disabled"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Initialize the list of event handlers
name|String
index|[]
name|consumerClassNames
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_NOTFICATION_EVENT_CONSUMERS
operator|.
name|varname
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumerClassNames
operator|!=
literal|null
operator|&&
name|consumerClassNames
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|consumerClassName
range|:
name|consumerClassNames
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|consumerClass
init|=
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|consumerClassName
argument_list|)
decl_stmt|;
name|EventConsumer
name|consumer
init|=
operator|(
name|EventConsumer
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|consumerClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|eventConsumers
operator|.
name|add
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No event consumers configured, notification event polling disabled"
argument_list|)
expr_stmt|;
return|return;
block|}
name|EventUtils
operator|.
name|MSClientNotificationFetcher
name|evFetcher
init|=
operator|new
name|EventUtils
operator|.
name|MSClientNotificationFetcher
argument_list|(
name|Hive
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|lastCheckedEventId
operator|=
name|evFetcher
operator|.
name|getCurrentNotificationEventId
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing lastCheckedEventId to {}"
argument_list|,
name|lastCheckedEventId
argument_list|)
expr_stmt|;
comment|// Start the scheduled poll task
name|ThreadFactory
name|threadFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"NotificationEventPoll %d"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|executorService
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
name|threadFactory
argument_list|)
expr_stmt|;
name|pollFuture
operator|=
name|executorService
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|Poller
argument_list|()
argument_list|,
name|pollInterval
argument_list|,
name|pollInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|pollFuture
operator|!=
literal|null
condition|)
block|{
name|pollFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pollFuture
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|executorService
operator|!=
literal|null
condition|)
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executorService
operator|=
literal|null
expr_stmt|;
block|}
block|}
class|class
name|Poller
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Polling for notification events"
argument_list|)
expr_stmt|;
name|int
name|eventsProcessed
init|=
literal|0
decl_stmt|;
try|try
block|{
comment|// Get any new notification events that have been since the last time we checked,
comment|// And pass them on to the event handlers.
name|EventUtils
operator|.
name|MSClientNotificationFetcher
name|evFetcher
init|=
operator|new
name|EventUtils
operator|.
name|MSClientNotificationFetcher
argument_list|(
name|Hive
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|EventUtils
operator|.
name|NotificationEventIterator
name|evIter
init|=
operator|new
name|EventUtils
operator|.
name|NotificationEventIterator
argument_list|(
name|evFetcher
argument_list|,
name|lastCheckedEventId
argument_list|,
literal|0
argument_list|,
literal|"*"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|evIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NotificationEvent
name|event
init|=
name|evIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Event: "
operator|+
name|event
argument_list|)
expr_stmt|;
for|for
control|(
name|EventConsumer
name|eventConsumer
range|:
name|eventConsumers
control|)
block|{
try|try
block|{
name|eventConsumer
operator|.
name|accept
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error processing notification event "
operator|+
name|event
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
name|eventsProcessed
operator|++
expr_stmt|;
name|lastCheckedEventId
operator|=
name|event
operator|.
name|getEventId
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error polling for notification events"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processed {} notification events"
argument_list|,
name|eventsProcessed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

