begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFAverage
operator|.
name|GenericUDAFAverageEvaluatorDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFAverage
operator|.
name|GenericUDAFAverageEvaluatorDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFCorrelation
operator|.
name|GenericUDAFCorrelationEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFCount
operator|.
name|GenericUDAFCountEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFVariance
operator|.
name|GenericUDAFVarianceEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_class
specifier|public
class|class
name|GenericUDAFBinarySetFunctions
extends|extends
name|AbstractGenericUDAFResolver
block|{
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"regr_count"
argument_list|,
name|value
operator|=
literal|"_FUNC_(y,x) - returns the number of non-null pairs"
argument_list|,
name|extended
operator|=
literal|"The function takes as arguments any pair of numeric types and returns a long.\n"
operator|+
literal|"Any pair with a NULL is ignored."
argument_list|)
specifier|public
specifier|static
class|class
name|RegrCount
extends|extends
name|AbstractGenericUDAFResolver
block|{
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
name|checkArgumentTypes
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
return|return
operator|new
name|Evaluator
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|Evaluator
extends|extends
name|GenericUDAFCountEvaluator
block|{
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
switch|switch
condition|(
name|m
condition|)
block|{
case|case
name|COMPLETE
case|:
case|case
name|PARTIAL1
case|:
return|return
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|parameters
index|[
literal|0
index|]
block|}
argument_list|)
return|;
default|default:
return|return
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|parameters
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|parameters
index|[
literal|1
index|]
operator|==
literal|null
condition|)
return|return;
name|super
operator|.
name|iterate
argument_list|(
name|agg
argument_list|,
operator|new
name|Object
index|[]
block|{
name|parameters
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"regr_sxx"
argument_list|,
name|value
operator|=
literal|"_FUNC_(y,x) - auxiliary analytic function"
argument_list|,
name|extended
operator|=
literal|"The function takes as arguments any pair of numeric types and returns a double.\n"
operator|+
literal|"Any pair with a NULL is ignored.\n"
operator|+
literal|"If applied to an empty set: NULL is returned.\n"
operator|+
literal|"Otherwise, it computes the following:\n"
operator|+
literal|"   SUM(x*x)-SUM(x)*SUM(x)/N\n"
argument_list|)
specifier|public
specifier|static
class|class
name|RegrSXX
extends|extends
name|AbstractGenericUDAFResolver
block|{
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
name|checkArgumentTypes
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
return|return
operator|new
name|Evaluator
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|Evaluator
extends|extends
name|GenericUDAFVarianceEvaluator
block|{
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
switch|switch
condition|(
name|m
condition|)
block|{
case|case
name|COMPLETE
case|:
case|case
name|PARTIAL1
case|:
return|return
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|parameters
index|[
literal|1
index|]
block|}
argument_list|)
return|;
default|default:
return|return
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|parameters
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|parameters
index|[
literal|1
index|]
operator|==
literal|null
condition|)
return|return;
name|super
operator|.
name|iterate
argument_list|(
name|agg
argument_list|,
operator|new
name|Object
index|[]
block|{
name|parameters
index|[
literal|1
index|]
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|StdAgg
name|myagg
init|=
operator|(
name|StdAgg
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|count
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|DoubleWritable
name|result
init|=
name|getResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|variance
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
block|}
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"regr_syy"
argument_list|,
name|value
operator|=
literal|"_FUNC_(y,x) - auxiliary analytic function"
argument_list|,
name|extended
operator|=
literal|"The function takes as arguments any pair of numeric types and returns a double.\n"
operator|+
literal|"Any pair with a NULL is ignored.\n"
operator|+
literal|"If applied to an empty set: NULL is returned.\n"
operator|+
literal|"Otherwise, it computes the following:\n"
operator|+
literal|"   SUM(y*y)-SUM(y)*SUM(y)/N\n"
argument_list|)
specifier|public
specifier|static
class|class
name|RegrSYY
extends|extends
name|AbstractGenericUDAFResolver
block|{
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
name|checkArgumentTypes
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
return|return
operator|new
name|Evaluator
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|Evaluator
extends|extends
name|GenericUDAFVarianceEvaluator
block|{
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
switch|switch
condition|(
name|m
condition|)
block|{
case|case
name|COMPLETE
case|:
case|case
name|PARTIAL1
case|:
return|return
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|parameters
index|[
literal|0
index|]
block|}
argument_list|)
return|;
default|default:
return|return
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|parameters
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|parameters
index|[
literal|1
index|]
operator|==
literal|null
condition|)
return|return;
name|super
operator|.
name|iterate
argument_list|(
name|agg
argument_list|,
operator|new
name|Object
index|[]
block|{
name|parameters
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|StdAgg
name|myagg
init|=
operator|(
name|StdAgg
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|count
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|DoubleWritable
name|result
init|=
name|getResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|variance
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
block|}
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"regr_avgx"
argument_list|,
name|value
operator|=
literal|"_FUNC_(y,x) - evaluates the average of the independent variable"
argument_list|,
name|extended
operator|=
literal|"The function takes as arguments any pair of numeric types and returns a double.\n"
operator|+
literal|"Any pair with a NULL is ignored.\n"
operator|+
literal|"If applied to an empty set: NULL is returned.\n"
operator|+
literal|"Otherwise, it computes the following:\n"
operator|+
literal|"   AVG(X)"
argument_list|)
specifier|public
specifier|static
class|class
name|RegrAvgX
extends|extends
name|AbstractGenericUDAFResolver
block|{
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
name|checkArgumentTypes
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|parameters
index|[
literal|1
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
operator|==
name|PrimitiveCategory
operator|.
name|DECIMAL
condition|)
block|{
return|return
operator|new
name|EvaluatorDecimal
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|EvaluatorDouble
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|EvaluatorDouble
extends|extends
name|GenericUDAFAverageEvaluatorDouble
block|{
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
switch|switch
condition|(
name|m
condition|)
block|{
case|case
name|COMPLETE
case|:
case|case
name|PARTIAL1
case|:
return|return
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|parameters
index|[
literal|1
index|]
block|}
argument_list|)
return|;
default|default:
return|return
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|parameters
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|parameters
index|[
literal|1
index|]
operator|==
literal|null
condition|)
return|return;
name|super
operator|.
name|iterate
argument_list|(
name|agg
argument_list|,
operator|new
name|Object
index|[]
block|{
name|parameters
index|[
literal|1
index|]
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|EvaluatorDecimal
extends|extends
name|GenericUDAFAverageEvaluatorDecimal
block|{
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
switch|switch
condition|(
name|m
condition|)
block|{
case|case
name|COMPLETE
case|:
case|case
name|PARTIAL1
case|:
return|return
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|parameters
index|[
literal|1
index|]
block|}
argument_list|)
return|;
default|default:
return|return
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|parameters
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|parameters
index|[
literal|1
index|]
operator|==
literal|null
condition|)
return|return;
name|super
operator|.
name|iterate
argument_list|(
name|agg
argument_list|,
operator|new
name|Object
index|[]
block|{
name|parameters
index|[
literal|1
index|]
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"regr_avgy"
argument_list|,
name|value
operator|=
literal|"_FUNC_(y,x) - evaluates the average of the dependent variable"
argument_list|,
name|extended
operator|=
literal|"The function takes as arguments any pair of numeric types and returns a double.\n"
operator|+
literal|"Any pair with a NULL is ignored.\n"
operator|+
literal|"If applied to an empty set: NULL is returned.\n"
operator|+
literal|"Otherwise, it computes the following:\n"
operator|+
literal|"   AVG(Y)"
argument_list|)
specifier|public
specifier|static
class|class
name|RegrAvgY
extends|extends
name|AbstractGenericUDAFResolver
block|{
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
name|checkArgumentTypes
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|parameters
index|[
literal|0
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
operator|==
name|PrimitiveCategory
operator|.
name|DECIMAL
condition|)
block|{
return|return
operator|new
name|EvaluatorDecimal
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|EvaluatorDouble
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|EvaluatorDouble
extends|extends
name|GenericUDAFAverageEvaluatorDouble
block|{
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
switch|switch
condition|(
name|m
condition|)
block|{
case|case
name|COMPLETE
case|:
case|case
name|PARTIAL1
case|:
return|return
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|parameters
index|[
literal|0
index|]
block|}
argument_list|)
return|;
default|default:
return|return
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|parameters
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|parameters
index|[
literal|1
index|]
operator|==
literal|null
condition|)
return|return;
name|super
operator|.
name|iterate
argument_list|(
name|agg
argument_list|,
operator|new
name|Object
index|[]
block|{
name|parameters
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|EvaluatorDecimal
extends|extends
name|GenericUDAFAverageEvaluatorDecimal
block|{
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
switch|switch
condition|(
name|m
condition|)
block|{
case|case
name|COMPLETE
case|:
case|case
name|PARTIAL1
case|:
return|return
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|parameters
index|[
literal|0
index|]
block|}
argument_list|)
return|;
default|default:
return|return
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|parameters
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|parameters
index|[
literal|1
index|]
operator|==
literal|null
condition|)
return|return;
name|super
operator|.
name|iterate
argument_list|(
name|agg
argument_list|,
operator|new
name|Object
index|[]
block|{
name|parameters
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"regr_slope"
argument_list|,
name|value
operator|=
literal|"_FUNC_(y,x) - returns the slope of the linear regression line"
argument_list|,
name|extended
operator|=
literal|"The function takes as arguments any pair of numeric types and returns a double.\n"
operator|+
literal|"Any pair with a NULL is ignored.\n"
operator|+
literal|"If applied to an empty set: NULL is returned.\n"
operator|+
literal|"If N*SUM(x*x) = SUM(x)*SUM(x): NULL is returned (the fit would be a vertical).\n"
operator|+
literal|"Otherwise, it computes the following:\n"
operator|+
literal|"   (N*SUM(x*y)-SUM(x)*SUM(y)) / (N*SUM(x*x)-SUM(x)*SUM(x))"
argument_list|)
specifier|public
specifier|static
class|class
name|RegrSlope
extends|extends
name|AbstractGenericUDAFResolver
block|{
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
name|checkArgumentTypes
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
return|return
operator|new
name|Evaluator
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|Evaluator
extends|extends
name|GenericUDAFCorrelationEvaluator
block|{
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|StdAgg
name|myagg
init|=
operator|(
name|StdAgg
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|count
operator|<
literal|2
operator|||
name|myagg
operator|.
name|xvar
operator|==
literal|0.0d
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|getResult
argument_list|()
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|covar
operator|/
name|myagg
operator|.
name|xvar
argument_list|)
expr_stmt|;
return|return
name|getResult
argument_list|()
return|;
block|}
block|}
block|}
block|}
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"regr_r2"
argument_list|,
name|value
operator|=
literal|"_FUNC_(y,x) - returns the coefficient of determination (also called R-squared or goodness of fit) for the regression line."
argument_list|,
name|extended
operator|=
literal|"The function takes as arguments any pair of numeric types and returns a double.\n"
operator|+
literal|"Any pair with a NULL is ignored.\n"
operator|+
literal|"If applied to an empty set: NULL is returned.\n"
operator|+
literal|"If N*SUM(x*x) = SUM(x)*SUM(x): NULL is returned.\n"
operator|+
literal|"If N*SUM(y*y) = SUM(y)*SUM(y): 1 is returned.\n"
operator|+
literal|"Otherwise, it computes the following:\n"
operator|+
literal|"   POWER( N*SUM(x*y)-SUM(x)*SUM(y) ,2)  /  ( (N*SUM(x*x)-SUM(x)*SUM(x)) * (N*SUM(y*y)-SUM(y)*SUM(y)) )"
argument_list|)
specifier|public
specifier|static
class|class
name|RegrR2
extends|extends
name|AbstractGenericUDAFResolver
block|{
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
name|checkArgumentTypes
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
return|return
operator|new
name|Evaluator
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|Evaluator
extends|extends
name|GenericUDAFCorrelationEvaluator
block|{
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|StdAgg
name|myagg
init|=
operator|(
name|StdAgg
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|count
operator|<
literal|2
operator|||
name|myagg
operator|.
name|xvar
operator|==
literal|0.0d
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DoubleWritable
name|result
init|=
name|getResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|yvar
operator|==
literal|0.0d
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
literal|1.0d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|covar
operator|*
name|myagg
operator|.
name|covar
operator|/
name|myagg
operator|.
name|xvar
operator|/
name|myagg
operator|.
name|yvar
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
block|}
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"regr_sxy"
argument_list|,
name|value
operator|=
literal|"_FUNC_(y,x) - return a value that can be used to evaluate the statistical validity of a regression model."
argument_list|,
name|extended
operator|=
literal|"The function takes as arguments any pair of numeric types and returns a double.\n"
operator|+
literal|"Any pair with a NULL is ignored.\n"
operator|+
literal|"If applied to an empty set: NULL is returned.\n"
operator|+
literal|"If N*SUM(x*x) = SUM(x)*SUM(x): NULL is returned.\n"
operator|+
literal|"Otherwise, it computes the following:\n"
operator|+
literal|"   SUM(x*y)-SUM(x)*SUM(y)/N"
argument_list|)
specifier|public
specifier|static
class|class
name|RegrSXY
extends|extends
name|AbstractGenericUDAFResolver
block|{
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
name|checkArgumentTypes
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
return|return
operator|new
name|Evaluator
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|Evaluator
extends|extends
name|GenericUDAFCorrelationEvaluator
block|{
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|StdAgg
name|myagg
init|=
operator|(
name|StdAgg
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|count
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DoubleWritable
name|result
init|=
name|getResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|covar
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"regr_intercept"
argument_list|,
name|value
operator|=
literal|"_FUNC_(y,x) - returns the y-intercept of the regression line."
argument_list|,
name|extended
operator|=
literal|"The function takes as arguments any pair of numeric types and returns a double.\n"
operator|+
literal|"Any pair with a NULL is ignored.\n"
operator|+
literal|"If applied to an empty set: NULL is returned.\n"
operator|+
literal|"If N*SUM(x*x) = SUM(x)*SUM(x): NULL is returned.\n"
operator|+
literal|"Otherwise, it computes the following:\n"
operator|+
literal|"   ( SUM(y)*SUM(x*x)-SUM(X)*SUM(x*y) )  /  ( N*SUM(x*x)-SUM(x)*SUM(x) )"
argument_list|)
specifier|public
specifier|static
class|class
name|RegrIntercept
extends|extends
name|AbstractGenericUDAFResolver
block|{
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
name|checkArgumentTypes
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
return|return
operator|new
name|Evaluator
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|Evaluator
extends|extends
name|GenericUDAFCorrelationEvaluator
block|{
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|StdAgg
name|myagg
init|=
operator|(
name|StdAgg
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|count
operator|==
literal|0
operator|||
name|myagg
operator|.
name|xvar
operator|==
literal|0.0d
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DoubleWritable
name|result
init|=
name|getResult
argument_list|()
decl_stmt|;
name|double
name|slope
init|=
name|myagg
operator|.
name|covar
operator|/
name|myagg
operator|.
name|xvar
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|yavg
operator|-
name|slope
operator|*
name|myagg
operator|.
name|xavg
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|checkArgumentTypes
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|UDFArgumentTypeException
block|{
if|if
condition|(
name|parameters
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|parameters
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|"Exactly two arguments are expected."
argument_list|)
throw|;
block|}
if|if
condition|(
name|parameters
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Only primitive type arguments are accepted but "
operator|+
name|parameters
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" is passed."
argument_list|)
throw|;
block|}
if|if
condition|(
name|parameters
index|[
literal|1
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"Only primitive type arguments are accepted but "
operator|+
name|parameters
index|[
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" is passed."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|acceptedPrimitiveCategory
argument_list|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|parameters
index|[
literal|0
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Only numeric type arguments are accepted but "
operator|+
name|parameters
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" is passed."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|acceptedPrimitiveCategory
argument_list|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|parameters
index|[
literal|1
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"Only numeric type arguments are accepted but "
operator|+
name|parameters
index|[
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" is passed."
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|acceptedPrimitiveCategory
parameter_list|(
name|PrimitiveCategory
name|primitiveCategory
parameter_list|)
block|{
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|DECIMAL
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

