begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|BINARY_GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|NoSuchPaddingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ConstantObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * GenericUDFAesBase.  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|GenericUDFAesBase
extends|extends
name|GenericUDF
block|{
specifier|protected
specifier|transient
name|Converter
index|[]
name|converters
init|=
operator|new
name|Converter
index|[
literal|2
index|]
decl_stmt|;
specifier|protected
specifier|transient
name|PrimitiveCategory
index|[]
name|inputTypes
init|=
operator|new
name|PrimitiveCategory
index|[
literal|2
index|]
decl_stmt|;
specifier|protected
specifier|final
name|BytesWritable
name|output
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
name|isStr0
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
name|isStr1
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
name|isKeyConstant
decl_stmt|;
specifier|protected
specifier|transient
name|Cipher
name|cipher
decl_stmt|;
specifier|protected
specifier|transient
name|SecretKey
name|secretKey
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|checkArgsSize
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkArgPrimitive
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkArgPrimitive
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// the function should support both string and binary input types
if|if
condition|(
name|canParam0BeStr
argument_list|()
condition|)
block|{
name|checkArgGroups
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|inputTypes
argument_list|,
name|STRING_GROUP
argument_list|,
name|BINARY_GROUP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkArgGroups
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|inputTypes
argument_list|,
name|BINARY_GROUP
argument_list|)
expr_stmt|;
block|}
name|checkArgGroups
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
name|inputTypes
argument_list|,
name|STRING_GROUP
argument_list|,
name|BINARY_GROUP
argument_list|)
expr_stmt|;
if|if
condition|(
name|isStr0
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|inputTypes
index|[
literal|0
index|]
argument_list|)
operator|==
name|STRING_GROUP
condition|)
block|{
name|obtainStringConverter
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|inputTypes
argument_list|,
name|converters
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|GenericUDFParamUtils
operator|.
name|obtainBinaryConverter
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|inputTypes
argument_list|,
name|converters
argument_list|)
expr_stmt|;
block|}
name|isKeyConstant
operator|=
name|arguments
index|[
literal|1
index|]
operator|instanceof
name|ConstantObjectInspector
expr_stmt|;
name|byte
index|[]
name|key
init|=
literal|null
decl_stmt|;
name|int
name|keyLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|isStr1
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|inputTypes
index|[
literal|1
index|]
argument_list|)
operator|==
name|STRING_GROUP
condition|)
block|{
if|if
condition|(
name|isKeyConstant
condition|)
block|{
name|String
name|keyStr
init|=
name|getConstantStringValue
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyStr
operator|!=
literal|null
condition|)
block|{
name|key
operator|=
name|keyStr
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|keyLength
operator|=
name|key
operator|.
name|length
expr_stmt|;
block|}
block|}
else|else
block|{
name|obtainStringConverter
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
name|inputTypes
argument_list|,
name|converters
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isKeyConstant
condition|)
block|{
name|BytesWritable
name|keyWr
init|=
name|GenericUDFParamUtils
operator|.
name|getConstantBytesValue
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyWr
operator|!=
literal|null
condition|)
block|{
name|key
operator|=
name|keyWr
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|keyLength
operator|=
name|keyWr
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|GenericUDFParamUtils
operator|.
name|obtainBinaryConverter
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
name|inputTypes
argument_list|,
name|converters
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|secretKey
operator|=
name|getSecretKey
argument_list|(
name|key
argument_list|,
name|keyLength
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|cipher
operator|=
name|Cipher
operator|.
name|getInstance
argument_list|(
literal|"AES"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchPaddingException
decl||
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|ObjectInspector
name|outputOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
decl_stmt|;
return|return
name|outputOI
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|byte
index|[]
name|input
decl_stmt|;
name|int
name|inputLength
decl_stmt|;
if|if
condition|(
name|isStr0
condition|)
block|{
name|Text
name|n
init|=
name|GenericUDFParamUtils
operator|.
name|getTextValue
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|converters
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|input
operator|=
name|n
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|inputLength
operator|=
name|n
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|BytesWritable
name|bWr
init|=
name|GenericUDFParamUtils
operator|.
name|getBinaryValue
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|converters
argument_list|)
decl_stmt|;
if|if
condition|(
name|bWr
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|input
operator|=
name|bWr
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|inputLength
operator|=
name|bWr
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SecretKey
name|secretKey
decl_stmt|;
if|if
condition|(
name|isKeyConstant
condition|)
block|{
name|secretKey
operator|=
name|this
operator|.
name|secretKey
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|key
decl_stmt|;
name|int
name|keyLength
decl_stmt|;
if|if
condition|(
name|isStr1
condition|)
block|{
name|Text
name|n
init|=
name|GenericUDFParamUtils
operator|.
name|getTextValue
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
name|converters
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|key
operator|=
name|n
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|keyLength
operator|=
name|n
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|BytesWritable
name|bWr
init|=
name|GenericUDFParamUtils
operator|.
name|getBinaryValue
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
name|converters
argument_list|)
decl_stmt|;
if|if
condition|(
name|bWr
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|key
operator|=
name|bWr
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|keyLength
operator|=
name|bWr
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
name|secretKey
operator|=
name|getSecretKey
argument_list|(
name|key
argument_list|,
name|keyLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|secretKey
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|res
init|=
name|aesFunction
argument_list|(
name|input
argument_list|,
name|inputLength
argument_list|,
name|secretKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|output
operator|.
name|set
argument_list|(
name|res
argument_list|,
literal|0
argument_list|,
name|res
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
specifier|protected
name|SecretKey
name|getSecretKey
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|int
name|keyLength
parameter_list|)
block|{
if|if
condition|(
name|keyLength
operator|==
literal|16
operator|||
name|keyLength
operator|==
literal|32
operator|||
name|keyLength
operator|==
literal|24
condition|)
block|{
return|return
operator|new
name|SecretKeySpec
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|keyLength
argument_list|,
literal|"AES"
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|byte
index|[]
name|aesFunction
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|int
name|inputLength
parameter_list|,
name|SecretKey
name|secretKey
parameter_list|)
block|{
try|try
block|{
name|cipher
operator|.
name|init
argument_list|(
name|getCipherMode
argument_list|()
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
name|byte
index|[]
name|res
init|=
name|cipher
operator|.
name|doFinal
argument_list|(
name|input
argument_list|,
literal|0
argument_list|,
name|inputLength
argument_list|)
decl_stmt|;
return|return
name|res
return|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|abstract
specifier|protected
name|int
name|getCipherMode
parameter_list|()
function_decl|;
specifier|abstract
specifier|protected
name|boolean
name|canParam0BeStr
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
return|return
name|getStandardDisplayString
argument_list|(
name|getFuncName
argument_list|()
argument_list|,
name|children
argument_list|)
return|;
block|}
block|}
end_class

end_unit

