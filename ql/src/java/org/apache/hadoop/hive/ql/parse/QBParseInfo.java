begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of the parse information related to a query block  *  **/
end_comment

begin_class
specifier|public
class|class
name|QBParseInfo
block|{
specifier|private
name|boolean
name|isSubQ
decl_stmt|;
specifier|private
name|boolean
name|canOptTopQ
decl_stmt|;
specifier|private
name|String
name|alias
decl_stmt|;
specifier|private
name|CommonTree
name|joinExpr
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
name|aliasToSrc
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
name|nameToDest
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|TableSample
argument_list|>
name|nameToSample
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
name|destToSelExpr
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
name|destToWhereExpr
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
name|destToGroupby
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
name|destToClusterby
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|destToLimit
decl_stmt|;
specifier|private
name|int
name|outerQueryLimit
decl_stmt|;
comment|// used by GroupBy
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
argument_list|>
name|destToAggregationExprs
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
name|destToDistinctFuncExpr
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|QBParseInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|QBParseInfo
parameter_list|(
name|String
name|alias
parameter_list|,
name|boolean
name|isSubQ
parameter_list|)
block|{
name|this
operator|.
name|aliasToSrc
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|nameToDest
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|nameToSample
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TableSample
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|destToSelExpr
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|destToWhereExpr
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|destToGroupby
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|destToClusterby
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|destToLimit
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|destToAggregationExprs
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|destToDistinctFuncExpr
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
name|this
operator|.
name|isSubQ
operator|=
name|isSubQ
expr_stmt|;
name|this
operator|.
name|canOptTopQ
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|outerQueryLimit
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|setAggregationExprsForClause
parameter_list|(
name|String
name|clause
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
name|aggregationTrees
parameter_list|)
block|{
name|this
operator|.
name|destToAggregationExprs
operator|.
name|put
argument_list|(
name|clause
argument_list|,
name|aggregationTrees
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
name|getAggregationExprsForClause
parameter_list|(
name|String
name|clause
parameter_list|)
block|{
return|return
name|this
operator|.
name|destToAggregationExprs
operator|.
name|get
argument_list|(
name|clause
argument_list|)
return|;
block|}
specifier|public
name|void
name|setDistinctFuncExprForClause
parameter_list|(
name|String
name|clause
parameter_list|,
name|CommonTree
name|ast
parameter_list|)
block|{
name|this
operator|.
name|destToDistinctFuncExpr
operator|.
name|put
argument_list|(
name|clause
argument_list|,
name|ast
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CommonTree
name|getDistinctFuncExprForClause
parameter_list|(
name|String
name|clause
parameter_list|)
block|{
return|return
name|this
operator|.
name|destToDistinctFuncExpr
operator|.
name|get
argument_list|(
name|clause
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSelExprForClause
parameter_list|(
name|String
name|clause
parameter_list|,
name|CommonTree
name|ast
parameter_list|)
block|{
name|this
operator|.
name|destToSelExpr
operator|.
name|put
argument_list|(
name|clause
argument_list|,
name|ast
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setWhrExprForClause
parameter_list|(
name|String
name|clause
parameter_list|,
name|CommonTree
name|ast
parameter_list|)
block|{
name|this
operator|.
name|destToWhereExpr
operator|.
name|put
argument_list|(
name|clause
argument_list|,
name|ast
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setGroupByExprForClause
parameter_list|(
name|String
name|clause
parameter_list|,
name|CommonTree
name|ast
parameter_list|)
block|{
name|this
operator|.
name|destToGroupby
operator|.
name|put
argument_list|(
name|clause
argument_list|,
name|ast
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDestForClause
parameter_list|(
name|String
name|clause
parameter_list|,
name|CommonTree
name|ast
parameter_list|)
block|{
name|this
operator|.
name|nameToDest
operator|.
name|put
argument_list|(
name|clause
argument_list|,
name|ast
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setClusterByExprForClause
parameter_list|(
name|String
name|clause
parameter_list|,
name|CommonTree
name|ast
parameter_list|)
block|{
name|this
operator|.
name|destToClusterby
operator|.
name|put
argument_list|(
name|clause
argument_list|,
name|ast
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSrcForAlias
parameter_list|(
name|String
name|alias
parameter_list|,
name|CommonTree
name|ast
parameter_list|)
block|{
name|this
operator|.
name|aliasToSrc
operator|.
name|put
argument_list|(
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|ast
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getClauseNames
parameter_list|()
block|{
return|return
name|this
operator|.
name|destToSelExpr
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getClauseNamesForDest
parameter_list|()
block|{
return|return
name|this
operator|.
name|nameToDest
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|CommonTree
name|getDestForClause
parameter_list|(
name|String
name|clause
parameter_list|)
block|{
return|return
name|this
operator|.
name|nameToDest
operator|.
name|get
argument_list|(
name|clause
argument_list|)
return|;
block|}
specifier|public
name|CommonTree
name|getWhrForClause
parameter_list|(
name|String
name|clause
parameter_list|)
block|{
return|return
name|this
operator|.
name|destToWhereExpr
operator|.
name|get
argument_list|(
name|clause
argument_list|)
return|;
block|}
specifier|public
name|CommonTree
name|getGroupByForClause
parameter_list|(
name|String
name|clause
parameter_list|)
block|{
return|return
name|this
operator|.
name|destToGroupby
operator|.
name|get
argument_list|(
name|clause
argument_list|)
return|;
block|}
specifier|public
name|CommonTree
name|getSelForClause
parameter_list|(
name|String
name|clause
parameter_list|)
block|{
return|return
name|this
operator|.
name|destToSelExpr
operator|.
name|get
argument_list|(
name|clause
argument_list|)
return|;
block|}
specifier|public
name|CommonTree
name|getClusterByForClause
parameter_list|(
name|String
name|clause
parameter_list|)
block|{
return|return
name|this
operator|.
name|destToClusterby
operator|.
name|get
argument_list|(
name|clause
argument_list|)
return|;
block|}
specifier|public
name|CommonTree
name|getSrcForAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
return|return
name|this
operator|.
name|aliasToSrc
operator|.
name|get
argument_list|(
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAlias
parameter_list|()
block|{
return|return
name|this
operator|.
name|alias
return|;
block|}
specifier|public
name|boolean
name|getIsSubQ
parameter_list|()
block|{
return|return
name|this
operator|.
name|isSubQ
return|;
block|}
specifier|public
name|boolean
name|getCanOptTopQ
parameter_list|()
block|{
return|return
name|this
operator|.
name|canOptTopQ
return|;
block|}
specifier|public
name|void
name|setCanOptTopQ
parameter_list|(
name|boolean
name|canOptTopQ
parameter_list|)
block|{
name|this
operator|.
name|canOptTopQ
operator|=
name|canOptTopQ
expr_stmt|;
block|}
specifier|public
name|CommonTree
name|getJoinExpr
parameter_list|()
block|{
return|return
name|this
operator|.
name|joinExpr
return|;
block|}
specifier|public
name|void
name|setJoinExpr
parameter_list|(
name|CommonTree
name|joinExpr
parameter_list|)
block|{
name|this
operator|.
name|joinExpr
operator|=
name|joinExpr
expr_stmt|;
block|}
specifier|public
name|TableSample
name|getTabSample
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
return|return
name|this
operator|.
name|nameToSample
operator|.
name|get
argument_list|(
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTabSample
parameter_list|(
name|String
name|alias
parameter_list|,
name|TableSample
name|tableSample
parameter_list|)
block|{
name|this
operator|.
name|nameToSample
operator|.
name|put
argument_list|(
name|alias
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|tableSample
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDestLimit
parameter_list|(
name|String
name|dest
parameter_list|,
name|Integer
name|limit
parameter_list|)
block|{
name|this
operator|.
name|destToLimit
operator|.
name|put
argument_list|(
name|dest
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Integer
name|getDestLimit
parameter_list|(
name|String
name|dest
parameter_list|)
block|{
return|return
name|this
operator|.
name|destToLimit
operator|.
name|get
argument_list|(
name|dest
argument_list|)
return|;
block|}
comment|/** 	 * @return the outerQueryLimit 	 */
specifier|public
name|int
name|getOuterQueryLimit
parameter_list|()
block|{
return|return
name|outerQueryLimit
return|;
block|}
comment|/** 	 * @param outerQueryLimit the outerQueryLimit to set 	 */
specifier|public
name|void
name|setOuterQueryLimit
parameter_list|(
name|int
name|outerQueryLimit
parameter_list|)
block|{
name|this
operator|.
name|outerQueryLimit
operator|=
name|outerQueryLimit
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSelectStarQuery
parameter_list|()
block|{
if|if
condition|(
name|isSubQ
operator|||
operator|(
name|joinExpr
operator|!=
literal|null
operator|)
operator|||
operator|(
operator|!
name|nameToSample
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|destToWhereExpr
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|destToGroupby
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|destToClusterby
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
return|return
literal|false
return|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
argument_list|>
argument_list|>
name|aggrIter
init|=
name|destToAggregationExprs
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|aggrIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
name|h
init|=
name|aggrIter
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|h
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|h
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|destToDistinctFuncExpr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
argument_list|>
name|distn
init|=
name|destToDistinctFuncExpr
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|distn
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CommonTree
name|ct
init|=
name|distn
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|ct
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
block|}
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
argument_list|>
name|iter
init|=
name|nameToDest
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|CommonTree
name|v
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
operator|(
name|CommonTree
operator|)
name|v
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TMP_FILE
operator|)
condition|)
return|return
literal|false
return|;
block|}
name|iter
operator|=
name|destToSelExpr
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CommonTree
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|CommonTree
name|selExprList
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Iterate over the selects
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selExprList
operator|.
name|getChildCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// list of the columns
name|CommonTree
name|selExpr
init|=
operator|(
name|CommonTree
operator|)
name|selExprList
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|CommonTree
name|sel
init|=
operator|(
name|CommonTree
operator|)
name|selExpr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sel
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|HiveParser
operator|.
name|TOK_ALLCOLREF
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

