begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|api
operator|.
name|java
operator|.
name|JavaPairRDD
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|api
operator|.
name|java
operator|.
name|function
operator|.
name|PairFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|storage
operator|.
name|StorageLevel
import|;
end_import

begin_import
import|import
name|scala
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
specifier|public
class|class
name|MapInput
implements|implements
name|SparkTran
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|,
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
block|{
specifier|private
name|JavaPairRDD
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|hadoopRDD
decl_stmt|;
specifier|private
name|boolean
name|toCache
decl_stmt|;
specifier|private
specifier|final
name|SparkPlan
name|sparkPlan
decl_stmt|;
specifier|public
name|MapInput
parameter_list|(
name|SparkPlan
name|sparkPlan
parameter_list|,
name|JavaPairRDD
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|hadoopRDD
parameter_list|)
block|{
name|this
argument_list|(
name|sparkPlan
argument_list|,
name|hadoopRDD
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MapInput
parameter_list|(
name|SparkPlan
name|sparkPlan
parameter_list|,
name|JavaPairRDD
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|hadoopRDD
parameter_list|,
name|boolean
name|toCache
parameter_list|)
block|{
name|this
operator|.
name|hadoopRDD
operator|=
name|hadoopRDD
expr_stmt|;
name|this
operator|.
name|toCache
operator|=
name|toCache
expr_stmt|;
name|this
operator|.
name|sparkPlan
operator|=
name|sparkPlan
expr_stmt|;
block|}
specifier|public
name|void
name|setToCache
parameter_list|(
name|boolean
name|toCache
parameter_list|)
block|{
name|this
operator|.
name|toCache
operator|=
name|toCache
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|JavaPairRDD
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|transform
parameter_list|(
name|JavaPairRDD
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|input
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|input
operator|==
literal|null
argument_list|,
literal|"AssertionError: MapInput doesn't take any input"
argument_list|)
expr_stmt|;
name|JavaPairRDD
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
name|toCache
condition|)
block|{
name|result
operator|=
name|hadoopRDD
operator|.
name|mapToPair
argument_list|(
operator|new
name|CopyFunction
argument_list|()
argument_list|)
expr_stmt|;
name|sparkPlan
operator|.
name|addCachedRDDId
argument_list|(
name|result
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|persist
argument_list|(
name|StorageLevel
operator|.
name|MEMORY_AND_DISK
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|hadoopRDD
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
class|class
name|CopyFunction
implements|implements
name|PairFunction
argument_list|<
name|Tuple2
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
argument_list|,
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
block|{
specifier|private
specifier|transient
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Tuple2
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|call
parameter_list|(
name|Tuple2
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|tuple
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Tuple2
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
argument_list|(
name|tuple
operator|.
name|_1
argument_list|()
argument_list|,
name|WritableUtils
operator|.
name|clone
argument_list|(
name|tuple
operator|.
name|_2
argument_list|()
argument_list|,
name|conf
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

