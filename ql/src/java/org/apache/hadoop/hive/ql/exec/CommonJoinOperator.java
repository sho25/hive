begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|AbstractRowContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|RowContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinCondDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinarySerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_comment
comment|/**  * Join operator implementation.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CommonJoinOperator
parameter_list|<
name|T
extends|extends
name|JoinDesc
parameter_list|>
extends|extends
name|Operator
argument_list|<
name|T
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CommonJoinOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * IntermediateObject.    *    */
specifier|public
specifier|static
class|class
name|IntermediateObject
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
index|[]
name|objs
decl_stmt|;
name|int
name|curSize
decl_stmt|;
specifier|public
name|IntermediateObject
parameter_list|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
index|[]
name|objs
parameter_list|,
name|int
name|curSize
parameter_list|)
block|{
name|this
operator|.
name|objs
operator|=
name|objs
expr_stmt|;
name|this
operator|.
name|curSize
operator|=
name|curSize
expr_stmt|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Object
argument_list|>
index|[]
name|getObjs
parameter_list|()
block|{
return|return
name|objs
return|;
block|}
specifier|public
name|int
name|getCurSize
parameter_list|()
block|{
return|return
name|curSize
return|;
block|}
specifier|public
name|void
name|pushObj
parameter_list|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|newObj
parameter_list|)
block|{
name|objs
index|[
name|curSize
operator|++
index|]
operator|=
name|newObj
expr_stmt|;
block|}
specifier|public
name|void
name|popObj
parameter_list|()
block|{
name|curSize
operator|--
expr_stmt|;
block|}
specifier|public
name|Object
name|topObj
parameter_list|()
block|{
return|return
name|objs
index|[
name|curSize
operator|-
literal|1
index|]
return|;
block|}
block|}
specifier|protected
specifier|transient
name|int
name|numAliases
decl_stmt|;
comment|// number of aliases
comment|/**    * The expressions for join inputs.    */
specifier|protected
specifier|transient
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
argument_list|>
name|joinValues
decl_stmt|;
comment|/**    * The filters for join    */
specifier|protected
specifier|transient
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
argument_list|>
name|joinFilters
decl_stmt|;
comment|/**    * The ObjectInspectors for the join inputs.    */
specifier|protected
specifier|transient
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
name|joinValuesObjectInspectors
decl_stmt|;
comment|/**    * The ObjectInspectors for join filters.    */
specifier|protected
specifier|transient
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
name|joinFilterObjectInspectors
decl_stmt|;
comment|/**    * The standard ObjectInspectors for the join inputs.    */
specifier|protected
specifier|transient
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
name|joinValuesStandardObjectInspectors
decl_stmt|;
comment|/**    * The standard ObjectInspectors for the row container.    */
specifier|protected
specifier|transient
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
name|rowContainerStandardObjectInspectors
decl_stmt|;
specifier|protected
specifier|transient
name|Byte
index|[]
name|order
decl_stmt|;
comment|// order in which the results should
comment|// be output
specifier|protected
specifier|transient
name|JoinCondDesc
index|[]
name|condn
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
index|[]
name|nullsafes
decl_stmt|;
specifier|public
specifier|transient
name|boolean
name|noOuterJoin
decl_stmt|;
specifier|protected
specifier|transient
name|Object
index|[]
name|dummyObj
decl_stmt|;
comment|// for outer joins, contains the
comment|// potential nulls for the concerned
comment|// aliases
specifier|protected
specifier|transient
name|RowContainer
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
index|[]
name|dummyObjVectors
decl_stmt|;
comment|// empty
comment|// rows
comment|// for
comment|// each
comment|// table
specifier|protected
specifier|transient
name|int
name|totalSz
decl_stmt|;
comment|// total size of the composite object
comment|// keys are the column names. basically this maps the position of the column
comment|// in
comment|// the output of the CommonJoinOperator to the input columnInfo.
specifier|private
specifier|transient
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|posToAliasMap
decl_stmt|;
specifier|transient
name|LazyBinarySerDe
index|[]
name|spillTableSerDe
decl_stmt|;
specifier|protected
specifier|transient
name|Map
argument_list|<
name|Byte
argument_list|,
name|TableDesc
argument_list|>
name|spillTableDesc
decl_stmt|;
comment|// spill tables are
comment|// used if the join
comment|// input is too large
comment|// to fit in memory
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|AbstractRowContainer
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|storage
decl_stmt|;
comment|// map b/w table alias
comment|// to RowContainer
name|int
name|joinEmitInterval
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|joinCacheSize
init|=
literal|0
decl_stmt|;
name|int
name|nextSz
init|=
literal|0
decl_stmt|;
specifier|transient
name|Byte
name|lastAlias
init|=
literal|null
decl_stmt|;
specifier|transient
name|boolean
name|handleSkewJoin
init|=
literal|false
decl_stmt|;
specifier|transient
name|boolean
name|hasLeftSemiJoin
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|countAfterReport
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|heartbeatInterval
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|NOTSKIPBIGTABLE
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|CommonJoinOperator
parameter_list|()
block|{   }
specifier|public
name|CommonJoinOperator
parameter_list|(
name|CommonJoinOperator
argument_list|<
name|T
argument_list|>
name|clone
parameter_list|)
block|{
name|this
operator|.
name|joinEmitInterval
operator|=
name|clone
operator|.
name|joinEmitInterval
expr_stmt|;
name|this
operator|.
name|joinCacheSize
operator|=
name|clone
operator|.
name|joinCacheSize
expr_stmt|;
name|this
operator|.
name|nextSz
operator|=
name|clone
operator|.
name|nextSz
expr_stmt|;
name|this
operator|.
name|childOperators
operator|=
name|clone
operator|.
name|childOperators
expr_stmt|;
name|this
operator|.
name|parentOperators
operator|=
name|clone
operator|.
name|parentOperators
expr_stmt|;
name|this
operator|.
name|counterNames
operator|=
name|clone
operator|.
name|counterNames
expr_stmt|;
name|this
operator|.
name|counterNameToEnum
operator|=
name|clone
operator|.
name|counterNameToEnum
expr_stmt|;
name|this
operator|.
name|done
operator|=
name|clone
operator|.
name|done
expr_stmt|;
name|this
operator|.
name|operatorId
operator|=
name|clone
operator|.
name|operatorId
expr_stmt|;
name|this
operator|.
name|storage
operator|=
name|clone
operator|.
name|storage
expr_stmt|;
name|this
operator|.
name|condn
operator|=
name|clone
operator|.
name|condn
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|clone
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|this
operator|.
name|setSchema
argument_list|(
name|clone
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|alias
operator|=
name|clone
operator|.
name|alias
expr_stmt|;
name|this
operator|.
name|beginTime
operator|=
name|clone
operator|.
name|beginTime
expr_stmt|;
name|this
operator|.
name|inputRows
operator|=
name|clone
operator|.
name|inputRows
expr_stmt|;
name|this
operator|.
name|childOperatorsArray
operator|=
name|clone
operator|.
name|childOperatorsArray
expr_stmt|;
name|this
operator|.
name|childOperatorsTag
operator|=
name|clone
operator|.
name|childOperatorsTag
expr_stmt|;
name|this
operator|.
name|colExprMap
operator|=
name|clone
operator|.
name|colExprMap
expr_stmt|;
name|this
operator|.
name|counters
operator|=
name|clone
operator|.
name|counters
expr_stmt|;
name|this
operator|.
name|dummyObj
operator|=
name|clone
operator|.
name|dummyObj
expr_stmt|;
name|this
operator|.
name|dummyObjVectors
operator|=
name|clone
operator|.
name|dummyObjVectors
expr_stmt|;
name|this
operator|.
name|forwardCache
operator|=
name|clone
operator|.
name|forwardCache
expr_stmt|;
name|this
operator|.
name|groupKeyObject
operator|=
name|clone
operator|.
name|groupKeyObject
expr_stmt|;
name|this
operator|.
name|handleSkewJoin
operator|=
name|clone
operator|.
name|handleSkewJoin
expr_stmt|;
name|this
operator|.
name|hconf
operator|=
name|clone
operator|.
name|hconf
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|clone
operator|.
name|id
expr_stmt|;
name|this
operator|.
name|inputObjInspectors
operator|=
name|clone
operator|.
name|inputObjInspectors
expr_stmt|;
name|this
operator|.
name|inputRows
operator|=
name|clone
operator|.
name|inputRows
expr_stmt|;
name|this
operator|.
name|noOuterJoin
operator|=
name|clone
operator|.
name|noOuterJoin
expr_stmt|;
name|this
operator|.
name|numAliases
operator|=
name|clone
operator|.
name|numAliases
expr_stmt|;
name|this
operator|.
name|operatorId
operator|=
name|clone
operator|.
name|operatorId
expr_stmt|;
name|this
operator|.
name|posToAliasMap
operator|=
name|clone
operator|.
name|posToAliasMap
expr_stmt|;
name|this
operator|.
name|spillTableDesc
operator|=
name|clone
operator|.
name|spillTableDesc
expr_stmt|;
name|this
operator|.
name|statsMap
operator|=
name|clone
operator|.
name|statsMap
expr_stmt|;
name|this
operator|.
name|joinFilters
operator|=
name|clone
operator|.
name|joinFilters
expr_stmt|;
name|this
operator|.
name|joinFilterObjectInspectors
operator|=
name|clone
operator|.
name|joinFilterObjectInspectors
expr_stmt|;
block|}
specifier|protected
specifier|static
parameter_list|<
name|T
extends|extends
name|JoinDesc
parameter_list|>
name|ObjectInspector
name|getJoinOutputObjectInspector
parameter_list|(
name|Byte
index|[]
name|order
parameter_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
name|aliasToObjectInspectors
parameter_list|,
name|T
name|conf
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|structFieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Byte
name|alias
range|:
name|order
control|)
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|oiList
init|=
name|aliasToObjectInspectors
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
name|structFieldObjectInspectors
operator|.
name|addAll
argument_list|(
name|oiList
argument_list|)
expr_stmt|;
block|}
name|StructObjectInspector
name|joinOutputObjectInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|,
name|structFieldObjectInspectors
argument_list|)
decl_stmt|;
return|return
name|joinOutputObjectInspector
return|;
block|}
name|Configuration
name|hconf
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|handleSkewJoin
operator|=
name|conf
operator|.
name|getHandleSkewJoin
argument_list|()
expr_stmt|;
name|this
operator|.
name|hconf
operator|=
name|hconf
expr_stmt|;
name|heartbeatInterval
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESENDHEARTBEAT
argument_list|)
expr_stmt|;
name|countAfterReport
operator|=
literal|0
expr_stmt|;
name|totalSz
operator|=
literal|0
expr_stmt|;
comment|// Map that contains the rows for each alias
name|storage
operator|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|AbstractRowContainer
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|numAliases
operator|=
name|conf
operator|.
name|getExprs
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|joinValues
operator|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|joinFilters
operator|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|order
operator|=
name|conf
operator|.
name|getTagOrder
argument_list|()
expr_stmt|;
name|condn
operator|=
name|conf
operator|.
name|getConds
argument_list|()
expr_stmt|;
name|nullsafes
operator|=
name|conf
operator|.
name|getNullSafes
argument_list|()
expr_stmt|;
name|noOuterJoin
operator|=
name|conf
operator|.
name|isNoOuterJoin
argument_list|()
expr_stmt|;
name|totalSz
operator|=
name|JoinUtil
operator|.
name|populateJoinKeyValue
argument_list|(
name|joinValues
argument_list|,
name|conf
operator|.
name|getExprs
argument_list|()
argument_list|,
name|order
argument_list|,
name|NOTSKIPBIGTABLE
argument_list|)
expr_stmt|;
comment|//process join filters
name|joinFilters
operator|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|JoinUtil
operator|.
name|populateJoinKeyValue
argument_list|(
name|joinFilters
argument_list|,
name|conf
operator|.
name|getFilters
argument_list|()
argument_list|,
name|order
argument_list|,
name|NOTSKIPBIGTABLE
argument_list|)
expr_stmt|;
name|joinValuesObjectInspectors
operator|=
name|JoinUtil
operator|.
name|getObjectInspectorsFromEvaluators
argument_list|(
name|joinValues
argument_list|,
name|inputObjInspectors
argument_list|,
name|NOTSKIPBIGTABLE
argument_list|)
expr_stmt|;
name|joinFilterObjectInspectors
operator|=
name|JoinUtil
operator|.
name|getObjectInspectorsFromEvaluators
argument_list|(
name|joinFilters
argument_list|,
name|inputObjInspectors
argument_list|,
name|NOTSKIPBIGTABLE
argument_list|)
expr_stmt|;
name|joinValuesStandardObjectInspectors
operator|=
name|JoinUtil
operator|.
name|getStandardObjectInspectors
argument_list|(
name|joinValuesObjectInspectors
argument_list|,
name|NOTSKIPBIGTABLE
argument_list|)
expr_stmt|;
if|if
condition|(
name|noOuterJoin
condition|)
block|{
name|rowContainerStandardObjectInspectors
operator|=
name|joinValuesStandardObjectInspectors
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
name|rowContainerObjectInspectors
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Byte
name|alias
range|:
name|order
control|)
block|{
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|rcOIs
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|rcOIs
operator|.
name|addAll
argument_list|(
name|joinValuesObjectInspectors
operator|.
name|get
argument_list|(
name|alias
argument_list|)
argument_list|)
expr_stmt|;
comment|// for each alias, add object inspector for boolean as the last element
name|rcOIs
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBooleanObjectInspector
argument_list|)
expr_stmt|;
name|rowContainerObjectInspectors
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|rcOIs
argument_list|)
expr_stmt|;
block|}
name|rowContainerStandardObjectInspectors
operator|=
name|JoinUtil
operator|.
name|getStandardObjectInspectors
argument_list|(
name|rowContainerObjectInspectors
argument_list|,
name|NOTSKIPBIGTABLE
argument_list|)
expr_stmt|;
block|}
name|dummyObj
operator|=
operator|new
name|Object
index|[
name|numAliases
index|]
expr_stmt|;
name|dummyObjVectors
operator|=
operator|new
name|RowContainer
index|[
name|numAliases
index|]
expr_stmt|;
name|joinEmitInterval
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEJOINEMITINTERVAL
argument_list|)
expr_stmt|;
name|joinCacheSize
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEJOINCACHESIZE
argument_list|)
expr_stmt|;
comment|// construct dummy null row (indicating empty table) and
comment|// construct spill table serde which is used if input is too
comment|// large to fit into main memory.
name|byte
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Byte
name|alias
range|:
name|order
control|)
block|{
name|int
name|sz
init|=
name|conf
operator|.
name|getExprs
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|nr
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|sz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sz
condition|;
name|j
operator|++
control|)
block|{
name|nr
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|noOuterJoin
condition|)
block|{
comment|// add whether the row is filtered or not
comment|// this value does not matter for the dummyObj
comment|// because the join values are already null
name|nr
operator|.
name|add
argument_list|(
operator|new
name|BooleanWritable
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dummyObj
index|[
name|pos
index|]
operator|=
name|nr
expr_stmt|;
comment|// there should be only 1 dummy object in the RowContainer
name|RowContainer
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|values
init|=
name|JoinUtil
operator|.
name|getRowContainer
argument_list|(
name|hconf
argument_list|,
name|rowContainerStandardObjectInspectors
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|pos
argument_list|)
argument_list|,
name|alias
argument_list|,
literal|1
argument_list|,
name|spillTableDesc
argument_list|,
name|conf
argument_list|,
name|noOuterJoin
argument_list|)
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|dummyObj
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
name|dummyObjVectors
index|[
name|pos
index|]
operator|=
name|values
expr_stmt|;
comment|// if serde is null, the input doesn't need to be spilled out
comment|// e.g., the output columns does not contains the input table
name|RowContainer
name|rc
init|=
name|JoinUtil
operator|.
name|getRowContainer
argument_list|(
name|hconf
argument_list|,
name|rowContainerStandardObjectInspectors
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|pos
argument_list|)
argument_list|,
name|alias
argument_list|,
name|joinCacheSize
argument_list|,
name|spillTableDesc
argument_list|,
name|conf
argument_list|,
name|noOuterJoin
argument_list|)
decl_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|pos
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
name|forwardCache
operator|=
operator|new
name|Object
index|[
name|totalSz
index|]
expr_stmt|;
name|outputObjInspector
operator|=
name|getJoinOutputObjectInspector
argument_list|(
name|order
argument_list|,
name|joinValuesStandardObjectInspectors
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|condn
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|condn
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
operator|==
name|JoinDesc
operator|.
name|LEFT_SEMI_JOIN
condition|)
block|{
name|hasLeftSemiJoin
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"JOIN "
operator|+
operator|(
operator|(
name|StructObjectInspector
operator|)
name|outputObjInspector
operator|)
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" totalsz = "
operator|+
name|totalSz
argument_list|)
expr_stmt|;
block|}
specifier|transient
name|boolean
name|newGroupStarted
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|startGroup
parameter_list|()
throws|throws
name|HiveException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Join: Starting new group"
argument_list|)
expr_stmt|;
name|newGroupStarted
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|AbstractRowContainer
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|alw
range|:
name|storage
operator|.
name|values
argument_list|()
control|)
block|{
name|alw
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|int
name|getNextSize
parameter_list|(
name|int
name|sz
parameter_list|)
block|{
comment|// A very simple counter to keep track of join entries for a key
if|if
condition|(
name|sz
operator|>=
literal|100000
condition|)
block|{
return|return
name|sz
operator|+
literal|100000
return|;
block|}
return|return
literal|2
operator|*
name|sz
return|;
block|}
specifier|protected
specifier|transient
name|Byte
name|alias
decl_stmt|;
specifier|transient
name|Object
index|[]
name|forwardCache
decl_stmt|;
specifier|private
name|void
name|createForwardJoinObject
parameter_list|(
name|IntermediateObject
name|intObj
parameter_list|,
name|boolean
index|[]
name|nullsArr
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|p
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAliases
condition|;
name|i
operator|++
control|)
block|{
name|Byte
name|alias
init|=
name|order
index|[
name|i
index|]
decl_stmt|;
name|int
name|sz
init|=
name|joinValues
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|nullsArr
index|[
name|i
index|]
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sz
condition|;
name|j
operator|++
control|)
block|{
name|forwardCache
index|[
name|p
operator|++
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|obj
init|=
name|intObj
operator|.
name|getObjs
argument_list|()
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sz
condition|;
name|j
operator|++
control|)
block|{
name|forwardCache
index|[
name|p
operator|++
index|]
operator|=
name|obj
operator|.
name|get
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|forward
argument_list|(
name|forwardCache
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
name|countAfterReport
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
name|void
name|copyOldArray
parameter_list|(
name|boolean
index|[]
name|src
parameter_list|,
name|boolean
index|[]
name|dest
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
name|src
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
specifier|private
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|joinObjectsInnerJoin
parameter_list|(
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|resNulls
parameter_list|,
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|inputNulls
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|newObj
parameter_list|,
name|IntermediateObject
name|intObj
parameter_list|,
name|int
name|left
parameter_list|,
name|boolean
name|newObjNull
parameter_list|)
block|{
if|if
condition|(
name|newObjNull
condition|)
block|{
return|return
name|resNulls
return|;
block|}
name|Iterator
argument_list|<
name|boolean
index|[]
argument_list|>
name|nullsIter
init|=
name|inputNulls
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|oldNulls
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|oldObjNull
init|=
name|oldNulls
index|[
name|left
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|oldObjNull
condition|)
block|{
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
name|copyOldArray
argument_list|(
name|oldNulls
argument_list|,
name|newNulls
argument_list|)
expr_stmt|;
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
literal|false
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resNulls
return|;
block|}
comment|/**    * Implement semi join operator.    */
specifier|private
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|joinObjectsLeftSemiJoin
parameter_list|(
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|resNulls
parameter_list|,
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|inputNulls
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|newObj
parameter_list|,
name|IntermediateObject
name|intObj
parameter_list|,
name|int
name|left
parameter_list|,
name|boolean
name|newObjNull
parameter_list|)
block|{
if|if
condition|(
name|newObjNull
condition|)
block|{
return|return
name|resNulls
return|;
block|}
name|Iterator
argument_list|<
name|boolean
index|[]
argument_list|>
name|nullsIter
init|=
name|inputNulls
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|oldNulls
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|oldObjNull
init|=
name|oldNulls
index|[
name|left
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|oldObjNull
condition|)
block|{
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
name|copyOldArray
argument_list|(
name|oldNulls
argument_list|,
name|newNulls
argument_list|)
expr_stmt|;
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
literal|false
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resNulls
return|;
block|}
specifier|private
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|joinObjectsLeftOuterJoin
parameter_list|(
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|resNulls
parameter_list|,
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|inputNulls
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|newObj
parameter_list|,
name|IntermediateObject
name|intObj
parameter_list|,
name|int
name|left
parameter_list|,
name|boolean
name|newObjNull
parameter_list|)
block|{
comment|// newObj is null if is already null or
comment|// if the row corresponding to the left alias does not pass through filter
name|int
name|filterIndex
init|=
name|joinValues
operator|.
name|get
argument_list|(
name|order
index|[
name|left
index|]
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|filterIndex
operator|<
name|intObj
operator|.
name|getObjs
argument_list|()
index|[
name|left
index|]
operator|.
name|size
argument_list|()
condition|)
block|{
name|newObjNull
operator|=
name|newObjNull
operator|||
operator|(
call|(
name|BooleanWritable
call|)
argument_list|(
name|intObj
operator|.
name|getObjs
argument_list|()
index|[
name|left
index|]
operator|.
name|get
argument_list|(
name|filterIndex
argument_list|)
argument_list|)
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|boolean
index|[]
argument_list|>
name|nullsIter
init|=
name|inputNulls
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|oldNulls
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|oldObjNull
init|=
name|oldNulls
index|[
name|left
index|]
decl_stmt|;
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
name|copyOldArray
argument_list|(
name|oldNulls
argument_list|,
name|newNulls
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldObjNull
condition|)
block|{
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
name|newObjNull
expr_stmt|;
block|}
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
block|}
return|return
name|resNulls
return|;
block|}
specifier|private
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|joinObjectsRightOuterJoin
parameter_list|(
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|resNulls
parameter_list|,
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|inputNulls
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|newObj
parameter_list|,
name|IntermediateObject
name|intObj
parameter_list|,
name|int
name|left
parameter_list|,
name|boolean
name|newObjNull
parameter_list|,
name|boolean
name|firstRow
parameter_list|)
block|{
if|if
condition|(
name|newObjNull
condition|)
block|{
return|return
name|resNulls
return|;
block|}
if|if
condition|(
name|inputNulls
operator|.
name|isEmpty
argument_list|()
operator|&&
name|firstRow
condition|)
block|{
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|intObj
operator|.
name|getCurSize
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|newNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|newNulls
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
operator|-
literal|1
index|]
operator|=
name|newObjNull
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
return|return
name|resNulls
return|;
block|}
name|boolean
name|allOldObjsNull
init|=
name|firstRow
decl_stmt|;
name|Iterator
argument_list|<
name|boolean
index|[]
argument_list|>
name|nullsIter
init|=
name|inputNulls
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|oldNulls
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oldNulls
index|[
name|left
index|]
condition|)
block|{
name|allOldObjsNull
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
comment|// if the row does not pass through filter, all old Objects are null
if|if
condition|(
operator|(
operator|(
name|BooleanWritable
operator|)
name|newObj
operator|.
name|get
argument_list|(
name|newObj
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|()
condition|)
block|{
name|allOldObjsNull
operator|=
literal|true
expr_stmt|;
block|}
name|nullsIter
operator|=
name|inputNulls
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|oldNulls
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|oldObjNull
init|=
name|oldNulls
index|[
name|left
index|]
operator|||
name|allOldObjsNull
decl_stmt|;
if|if
condition|(
operator|!
name|oldObjNull
condition|)
block|{
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
name|copyOldArray
argument_list|(
name|oldNulls
argument_list|,
name|newNulls
argument_list|)
expr_stmt|;
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
name|newObjNull
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allOldObjsNull
condition|)
block|{
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|intObj
operator|.
name|getCurSize
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|newNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
name|newObjNull
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
return|return
name|resNulls
return|;
block|}
block|}
return|return
name|resNulls
return|;
block|}
specifier|private
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|joinObjectsFullOuterJoin
parameter_list|(
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|resNulls
parameter_list|,
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|inputNulls
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|newObj
parameter_list|,
name|IntermediateObject
name|intObj
parameter_list|,
name|int
name|left
parameter_list|,
name|boolean
name|newObjNull
parameter_list|,
name|boolean
name|firstRow
parameter_list|)
block|{
if|if
condition|(
name|newObjNull
condition|)
block|{
name|Iterator
argument_list|<
name|boolean
index|[]
argument_list|>
name|nullsIter
init|=
name|inputNulls
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|oldNulls
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
name|copyOldArray
argument_list|(
name|oldNulls
argument_list|,
name|newNulls
argument_list|)
expr_stmt|;
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
name|newObjNull
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
block|}
return|return
name|resNulls
return|;
block|}
if|if
condition|(
name|inputNulls
operator|.
name|isEmpty
argument_list|()
operator|&&
name|firstRow
condition|)
block|{
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|intObj
operator|.
name|getCurSize
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|newNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|newNulls
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
operator|-
literal|1
index|]
operator|=
name|newObjNull
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
return|return
name|resNulls
return|;
block|}
name|boolean
name|allOldObjsNull
init|=
name|firstRow
decl_stmt|;
name|Iterator
argument_list|<
name|boolean
index|[]
argument_list|>
name|nullsIter
init|=
name|inputNulls
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|oldNulls
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oldNulls
index|[
name|left
index|]
condition|)
block|{
name|allOldObjsNull
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
comment|// if the row does not pass through filter, all old Objects are null
if|if
condition|(
operator|(
operator|(
name|BooleanWritable
operator|)
name|newObj
operator|.
name|get
argument_list|(
name|newObj
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|()
condition|)
block|{
name|allOldObjsNull
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|rhsPreserved
init|=
literal|false
decl_stmt|;
name|nullsIter
operator|=
name|inputNulls
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|oldNulls
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// old obj is null even if the row corresponding to the left alias
comment|// does not pass through filter
name|boolean
name|oldObjNull
init|=
name|oldNulls
index|[
name|left
index|]
operator|||
operator|(
call|(
name|BooleanWritable
call|)
argument_list|(
name|intObj
operator|.
name|getObjs
argument_list|()
index|[
name|left
index|]
operator|.
name|get
argument_list|(
name|joinValues
operator|.
name|get
argument_list|(
name|order
index|[
name|left
index|]
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
operator|)
operator|.
name|get
argument_list|()
operator|||
name|allOldObjsNull
decl_stmt|;
if|if
condition|(
operator|!
name|oldObjNull
condition|)
block|{
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
name|copyOldArray
argument_list|(
name|oldNulls
argument_list|,
name|newNulls
argument_list|)
expr_stmt|;
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
name|newObjNull
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oldObjNull
condition|)
block|{
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
name|copyOldArray
argument_list|(
name|oldNulls
argument_list|,
name|newNulls
argument_list|)
expr_stmt|;
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
literal|true
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
if|if
condition|(
name|allOldObjsNull
operator|&&
operator|!
name|rhsPreserved
condition|)
block|{
name|newNulls
operator|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldNulls
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
literal|false
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
name|rhsPreserved
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|resNulls
return|;
block|}
comment|/*    * The new input is added to the list of existing inputs. Each entry in the    * array of inputNulls denotes the entries in the intermediate object to be    * used. The intermediate object is augmented with the new object, and list of    * nulls is changed appropriately. The list will contain all non-nulls for a    * inner join. The outer joins are processed appropriately.    */
specifier|private
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|joinObjects
parameter_list|(
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|inputNulls
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|newObj
parameter_list|,
name|IntermediateObject
name|intObj
parameter_list|,
name|int
name|joinPos
parameter_list|,
name|boolean
name|firstRow
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|resNulls
init|=
operator|new
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|newObjNull
init|=
name|newObj
operator|==
name|dummyObj
index|[
name|joinPos
index|]
condition|?
literal|true
else|:
literal|false
decl_stmt|;
if|if
condition|(
name|joinPos
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|newObjNull
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
index|[]
name|nulls
init|=
operator|new
name|boolean
index|[
literal|1
index|]
decl_stmt|;
name|nulls
index|[
literal|0
index|]
operator|=
name|newObjNull
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|nulls
argument_list|)
expr_stmt|;
return|return
name|resNulls
return|;
block|}
name|int
name|left
init|=
name|condn
index|[
name|joinPos
operator|-
literal|1
index|]
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|int
name|type
init|=
name|condn
index|[
name|joinPos
operator|-
literal|1
index|]
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// process all nulls for RIGHT and FULL OUTER JOINS
if|if
condition|(
operator|(
operator|(
name|type
operator|==
name|JoinDesc
operator|.
name|RIGHT_OUTER_JOIN
operator|)
operator|||
operator|(
name|type
operator|==
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
operator|)
operator|)
operator|&&
operator|!
name|newObjNull
operator|&&
operator|(
name|inputNulls
operator|==
literal|null
operator|)
operator|&&
name|firstRow
condition|)
block|{
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newNulls
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|newNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|newNulls
index|[
name|newNulls
operator|.
name|length
operator|-
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
return|return
name|resNulls
return|;
block|}
if|if
condition|(
name|inputNulls
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|type
operator|==
name|JoinDesc
operator|.
name|INNER_JOIN
condition|)
block|{
return|return
name|joinObjectsInnerJoin
argument_list|(
name|resNulls
argument_list|,
name|inputNulls
argument_list|,
name|newObj
argument_list|,
name|intObj
argument_list|,
name|left
argument_list|,
name|newObjNull
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|JoinDesc
operator|.
name|LEFT_OUTER_JOIN
condition|)
block|{
return|return
name|joinObjectsLeftOuterJoin
argument_list|(
name|resNulls
argument_list|,
name|inputNulls
argument_list|,
name|newObj
argument_list|,
name|intObj
argument_list|,
name|left
argument_list|,
name|newObjNull
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|JoinDesc
operator|.
name|RIGHT_OUTER_JOIN
condition|)
block|{
return|return
name|joinObjectsRightOuterJoin
argument_list|(
name|resNulls
argument_list|,
name|inputNulls
argument_list|,
name|newObj
argument_list|,
name|intObj
argument_list|,
name|left
argument_list|,
name|newObjNull
argument_list|,
name|firstRow
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|JoinDesc
operator|.
name|LEFT_SEMI_JOIN
condition|)
block|{
return|return
name|joinObjectsLeftSemiJoin
argument_list|(
name|resNulls
argument_list|,
name|inputNulls
argument_list|,
name|newObj
argument_list|,
name|intObj
argument_list|,
name|left
argument_list|,
name|newObjNull
argument_list|)
return|;
block|}
assert|assert
operator|(
name|type
operator|==
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
operator|)
assert|;
return|return
name|joinObjectsFullOuterJoin
argument_list|(
name|resNulls
argument_list|,
name|inputNulls
argument_list|,
name|newObj
argument_list|,
name|intObj
argument_list|,
name|left
argument_list|,
name|newObjNull
argument_list|,
name|firstRow
argument_list|)
return|;
block|}
comment|/*    * genObject is a recursive function. For the inputs, a array of bitvectors is    * maintained (inputNulls) where each entry denotes whether the element is to    * be used or not (whether it is null or not). The size of the bitvector is    * same as the number of inputs under consideration currently. When all inputs    * are accounted for, the output is forwarded appropriately.    */
specifier|private
name|void
name|genObject
parameter_list|(
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|inputNulls
parameter_list|,
name|int
name|aliasNum
parameter_list|,
name|IntermediateObject
name|intObj
parameter_list|,
name|boolean
name|firstRow
parameter_list|)
throws|throws
name|HiveException
block|{
name|boolean
name|childFirstRow
init|=
name|firstRow
decl_stmt|;
name|boolean
name|skipping
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|aliasNum
operator|<
name|numAliases
condition|)
block|{
comment|// search for match in the rhs table
name|AbstractRowContainer
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|aliasRes
init|=
name|storage
operator|.
name|get
argument_list|(
name|order
index|[
name|aliasNum
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|newObj
init|=
name|aliasRes
operator|.
name|first
argument_list|()
init|;
name|newObj
operator|!=
literal|null
condition|;
name|newObj
operator|=
name|aliasRes
operator|.
name|next
argument_list|()
control|)
block|{
comment|// check for skipping in case of left semi join
if|if
condition|(
name|aliasNum
operator|>
literal|0
operator|&&
name|condn
index|[
name|aliasNum
operator|-
literal|1
index|]
operator|.
name|getType
argument_list|()
operator|==
name|JoinDesc
operator|.
name|LEFT_SEMI_JOIN
operator|&&
name|newObj
operator|!=
name|dummyObj
index|[
name|aliasNum
index|]
condition|)
block|{
comment|// successful match
name|skipping
operator|=
literal|true
expr_stmt|;
block|}
name|intObj
operator|.
name|pushObj
argument_list|(
name|newObj
argument_list|)
expr_stmt|;
comment|// execute the actual join algorithm
name|ArrayList
argument_list|<
name|boolean
index|[]
argument_list|>
name|newNulls
init|=
name|joinObjects
argument_list|(
name|inputNulls
argument_list|,
name|newObj
argument_list|,
name|intObj
argument_list|,
name|aliasNum
argument_list|,
name|childFirstRow
argument_list|)
decl_stmt|;
comment|// recursively call the join the other rhs tables
name|genObject
argument_list|(
name|newNulls
argument_list|,
name|aliasNum
operator|+
literal|1
argument_list|,
name|intObj
argument_list|,
name|firstRow
argument_list|)
expr_stmt|;
name|intObj
operator|.
name|popObj
argument_list|()
expr_stmt|;
name|firstRow
operator|=
literal|false
expr_stmt|;
comment|// if left-semi-join found a match, skipping the rest of the rows in the
comment|// rhs table of the semijoin
if|if
condition|(
name|skipping
condition|)
block|{
break|break;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|inputNulls
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Iterator
argument_list|<
name|boolean
index|[]
argument_list|>
name|nullsIter
init|=
name|inputNulls
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|nullsVec
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|createForwardJoinObject
argument_list|(
name|intObj
argument_list|,
name|nullsVec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Forward a record of join results.    *    * @throws HiveException    */
annotation|@
name|Override
specifier|public
name|void
name|endGroup
parameter_list|()
throws|throws
name|HiveException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Join Op: endGroup called: numValues="
operator|+
name|numAliases
argument_list|)
expr_stmt|;
name|checkAndGenObject
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|genUniqueJoinObject
parameter_list|(
name|int
name|aliasNum
parameter_list|,
name|int
name|forwardCachePos
parameter_list|)
throws|throws
name|HiveException
block|{
name|AbstractRowContainer
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|alias
init|=
name|storage
operator|.
name|get
argument_list|(
name|order
index|[
name|aliasNum
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
init|=
name|alias
operator|.
name|first
argument_list|()
init|;
name|row
operator|!=
literal|null
condition|;
name|row
operator|=
name|alias
operator|.
name|next
argument_list|()
control|)
block|{
name|int
name|sz
init|=
name|joinValues
operator|.
name|get
argument_list|(
name|order
index|[
name|aliasNum
index|]
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|p
init|=
name|forwardCachePos
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sz
condition|;
name|j
operator|++
control|)
block|{
name|forwardCache
index|[
name|p
operator|++
index|]
operator|=
name|row
operator|.
name|get
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aliasNum
operator|==
name|numAliases
operator|-
literal|1
condition|)
block|{
name|forward
argument_list|(
name|forwardCache
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
name|countAfterReport
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|genUniqueJoinObject
argument_list|(
name|aliasNum
operator|+
literal|1
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|genAllOneUniqueJoinObject
parameter_list|()
throws|throws
name|HiveException
block|{
name|int
name|p
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAliases
condition|;
name|i
operator|++
control|)
block|{
name|int
name|sz
init|=
name|joinValues
operator|.
name|get
argument_list|(
name|order
index|[
name|i
index|]
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|obj
init|=
name|storage
operator|.
name|get
argument_list|(
name|order
index|[
name|i
index|]
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sz
condition|;
name|j
operator|++
control|)
block|{
name|forwardCache
index|[
name|p
operator|++
index|]
operator|=
name|obj
operator|.
name|get
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
name|forward
argument_list|(
name|forwardCache
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
name|countAfterReport
operator|=
literal|0
expr_stmt|;
block|}
specifier|protected
name|void
name|checkAndGenObject
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|condn
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
operator|==
name|JoinDesc
operator|.
name|UNIQUE_JOIN
condition|)
block|{
comment|// Check if results need to be emitted.
comment|// Results only need to be emitted if there is a non-null entry in a table
comment|// that is preserved or if there are no non-null entries
name|boolean
name|preserve
init|=
literal|false
decl_stmt|;
comment|// Will be true if there is a non-null entry
comment|// in a preserved table
name|boolean
name|hasNulls
init|=
literal|false
decl_stmt|;
comment|// Will be true if there are null entries
name|boolean
name|allOne
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAliases
condition|;
name|i
operator|++
control|)
block|{
name|Byte
name|alias
init|=
name|order
index|[
name|i
index|]
decl_stmt|;
name|AbstractRowContainer
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|alw
init|=
name|storage
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|alw
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|allOne
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|alw
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|alw
operator|.
name|add
argument_list|(
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|dummyObj
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|hasNulls
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|condn
index|[
name|i
index|]
operator|.
name|getPreserved
argument_list|()
condition|)
block|{
name|preserve
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasNulls
operator|&&
operator|!
name|preserve
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|allOne
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"calling genAllOneUniqueJoinObject"
argument_list|)
expr_stmt|;
name|genAllOneUniqueJoinObject
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"called genAllOneUniqueJoinObject"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"calling genUniqueJoinObject"
argument_list|)
expr_stmt|;
name|genUniqueJoinObject
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"called genUniqueJoinObject"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// does any result need to be emitted
name|boolean
name|mayHasMoreThanOne
init|=
literal|false
decl_stmt|;
name|boolean
name|hasEmpty
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAliases
condition|;
name|i
operator|++
control|)
block|{
name|Byte
name|alias
init|=
name|order
index|[
name|i
index|]
decl_stmt|;
name|AbstractRowContainer
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|alw
init|=
name|storage
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|noOuterJoin
condition|)
block|{
if|if
condition|(
name|alw
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"No data for alias="
operator|+
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|alw
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|mayHasMoreThanOne
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|alw
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|hasEmpty
operator|=
literal|true
expr_stmt|;
name|alw
operator|.
name|add
argument_list|(
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|dummyObj
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|hasEmpty
operator|&&
name|alw
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
init|=
name|alw
operator|.
name|first
argument_list|()
decl_stmt|;
name|int
name|numValues
init|=
name|joinValues
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|==
name|dummyObj
index|[
name|alias
index|]
operator|||
operator|(
name|row
operator|.
name|size
argument_list|()
operator|>
name|numValues
operator|&&
operator|(
call|(
name|BooleanWritable
call|)
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|numValues
argument_list|)
argument_list|)
operator|)
operator|.
name|get
argument_list|()
operator|)
condition|)
block|{
name|hasEmpty
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|mayHasMoreThanOne
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|hasEmpty
condition|)
block|{
name|int
name|numValues
init|=
name|joinValues
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
init|=
name|alw
operator|.
name|first
argument_list|()
init|;
name|row
operator|!=
literal|null
condition|;
name|row
operator|=
name|alw
operator|.
name|next
argument_list|()
control|)
block|{
if|if
condition|(
name|row
operator|==
name|dummyObj
index|[
name|alias
index|]
operator|||
operator|(
name|row
operator|.
name|size
argument_list|()
operator|>
name|numValues
operator|&&
operator|(
call|(
name|BooleanWritable
call|)
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|numValues
argument_list|)
argument_list|)
operator|)
operator|.
name|get
argument_list|()
operator|)
condition|)
block|{
name|hasEmpty
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasEmpty
operator|&&
operator|!
name|mayHasMoreThanOne
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"calling genAllOneUniqueJoinObject"
argument_list|)
expr_stmt|;
name|genAllOneUniqueJoinObject
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"called genAllOneUniqueJoinObject"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|hasEmpty
operator|&&
operator|!
name|hasLeftSemiJoin
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"calling genUniqueJoinObject"
argument_list|)
expr_stmt|;
name|genUniqueJoinObject
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"called genUniqueJoinObject"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"calling genObject"
argument_list|)
expr_stmt|;
name|genObject
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
operator|new
name|IntermediateObject
argument_list|(
operator|new
name|ArrayList
index|[
name|numAliases
index|]
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"called genObject"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|reportProgress
parameter_list|()
block|{
comment|// Send some status periodically
name|countAfterReport
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|countAfterReport
operator|%
name|heartbeatInterval
operator|)
operator|==
literal|0
operator|&&
operator|(
name|reporter
operator|!=
literal|null
operator|)
condition|)
block|{
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
name|countAfterReport
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/**    * Returns true if the row does not pass through filters.    */
specifier|protected
specifier|static
name|Boolean
name|isFiltered
parameter_list|(
name|Object
name|row
parameter_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
name|filters
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// apply join filters on the row.
name|Boolean
name|ret
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|filters
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|condition
init|=
name|filters
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|ret
operator|=
call|(
name|Boolean
call|)
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|ois
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|condition
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
operator|||
operator|!
name|ret
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * All done.    *    */
annotation|@
name|Override
specifier|public
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Join Op close"
argument_list|)
expr_stmt|;
for|for
control|(
name|AbstractRowContainer
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|alw
range|:
name|storage
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|alw
operator|!=
literal|null
condition|)
block|{
name|alw
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// clean up the temp files
block|}
block|}
name|storage
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"JOIN"
return|;
block|}
comment|/**    * @return the posToAliasMap    */
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getPosToAliasMap
parameter_list|()
block|{
return|return
name|posToAliasMap
return|;
block|}
comment|/**    * @param posToAliasMap    *          the posToAliasMap to set    */
specifier|public
name|void
name|setPosToAliasMap
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|posToAliasMap
parameter_list|)
block|{
name|this
operator|.
name|posToAliasMap
operator|=
name|posToAliasMap
expr_stmt|;
block|}
block|}
end_class

end_unit

