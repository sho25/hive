begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|AbstractRowContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|RowContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinCondDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinarySerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_comment
comment|/**  * Join operator implementation.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CommonJoinOperator
parameter_list|<
name|T
extends|extends
name|JoinDesc
parameter_list|>
extends|extends
name|Operator
argument_list|<
name|T
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CommonJoinOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|numAliases
decl_stmt|;
comment|// number of aliases
comment|/**    * The expressions for join inputs.    */
specifier|protected
specifier|transient
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
index|[]
name|joinValues
decl_stmt|;
comment|/**    * The filters for join    */
specifier|protected
specifier|transient
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
index|[]
name|joinFilters
decl_stmt|;
specifier|protected
specifier|transient
name|int
index|[]
index|[]
name|filterMaps
decl_stmt|;
comment|/**    * The ObjectInspectors for the join inputs.    */
specifier|protected
specifier|transient
name|List
argument_list|<
name|ObjectInspector
argument_list|>
index|[]
name|joinValuesObjectInspectors
decl_stmt|;
comment|/**    * The ObjectInspectors for join filters.    */
specifier|protected
specifier|transient
name|List
argument_list|<
name|ObjectInspector
argument_list|>
index|[]
name|joinFilterObjectInspectors
decl_stmt|;
comment|/**    * The standard ObjectInspectors for the join inputs.    */
specifier|protected
specifier|transient
name|List
argument_list|<
name|ObjectInspector
argument_list|>
index|[]
name|joinValuesStandardObjectInspectors
decl_stmt|;
comment|/**    * The standard ObjectInspectors for the row container.    */
specifier|protected
specifier|transient
name|List
argument_list|<
name|ObjectInspector
argument_list|>
index|[]
name|rowContainerStandardObjectInspectors
decl_stmt|;
specifier|protected
specifier|transient
name|Byte
index|[]
name|order
decl_stmt|;
comment|// order in which the results should
comment|// be output
specifier|protected
specifier|transient
name|JoinCondDesc
index|[]
name|condn
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
index|[]
name|nullsafes
decl_stmt|;
specifier|public
specifier|transient
name|boolean
name|noOuterJoin
decl_stmt|;
comment|// for outer joins, contains the potential nulls for the concerned aliases
specifier|protected
specifier|transient
name|ArrayList
argument_list|<
name|Object
argument_list|>
index|[]
name|dummyObj
decl_stmt|;
comment|// empty rows for each table
specifier|protected
specifier|transient
name|RowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
index|[]
name|dummyObjVectors
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|totalSz
decl_stmt|;
comment|// total size of the composite object
comment|// keys are the column names. basically this maps the position of the column
comment|// in
comment|// the output of the CommonJoinOperator to the input columnInfo.
specifier|private
specifier|transient
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|posToAliasMap
decl_stmt|;
specifier|transient
name|LazyBinarySerDe
index|[]
name|spillTableSerDe
decl_stmt|;
specifier|protected
specifier|transient
name|TableDesc
index|[]
name|spillTableDesc
decl_stmt|;
comment|// spill tables are
comment|// used if the join
comment|// input is too large
comment|// to fit in memory
name|AbstractRowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
index|[]
name|storage
decl_stmt|;
comment|// map b/w table alias
comment|// to RowContainer
name|int
name|joinEmitInterval
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|joinCacheSize
init|=
literal|0
decl_stmt|;
name|long
name|nextSz
init|=
literal|0
decl_stmt|;
specifier|transient
name|Byte
name|lastAlias
init|=
literal|null
decl_stmt|;
specifier|transient
name|boolean
name|handleSkewJoin
init|=
literal|false
decl_stmt|;
specifier|transient
name|boolean
name|hasLeftSemiJoin
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|countAfterReport
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|heartbeatInterval
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|NOTSKIPBIGTABLE
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|CommonJoinOperator
parameter_list|()
block|{   }
specifier|public
name|CommonJoinOperator
parameter_list|(
name|CommonJoinOperator
argument_list|<
name|T
argument_list|>
name|clone
parameter_list|)
block|{
name|this
operator|.
name|joinEmitInterval
operator|=
name|clone
operator|.
name|joinEmitInterval
expr_stmt|;
name|this
operator|.
name|joinCacheSize
operator|=
name|clone
operator|.
name|joinCacheSize
expr_stmt|;
name|this
operator|.
name|nextSz
operator|=
name|clone
operator|.
name|nextSz
expr_stmt|;
name|this
operator|.
name|childOperators
operator|=
name|clone
operator|.
name|childOperators
expr_stmt|;
name|this
operator|.
name|parentOperators
operator|=
name|clone
operator|.
name|parentOperators
expr_stmt|;
name|this
operator|.
name|done
operator|=
name|clone
operator|.
name|done
expr_stmt|;
name|this
operator|.
name|operatorId
operator|=
name|clone
operator|.
name|operatorId
expr_stmt|;
name|this
operator|.
name|storage
operator|=
name|clone
operator|.
name|storage
expr_stmt|;
name|this
operator|.
name|condn
operator|=
name|clone
operator|.
name|condn
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|clone
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|this
operator|.
name|setSchema
argument_list|(
name|clone
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|alias
operator|=
name|clone
operator|.
name|alias
expr_stmt|;
name|this
operator|.
name|childOperatorsArray
operator|=
name|clone
operator|.
name|childOperatorsArray
expr_stmt|;
name|this
operator|.
name|childOperatorsTag
operator|=
name|clone
operator|.
name|childOperatorsTag
expr_stmt|;
name|this
operator|.
name|colExprMap
operator|=
name|clone
operator|.
name|colExprMap
expr_stmt|;
name|this
operator|.
name|dummyObj
operator|=
name|clone
operator|.
name|dummyObj
expr_stmt|;
name|this
operator|.
name|dummyObjVectors
operator|=
name|clone
operator|.
name|dummyObjVectors
expr_stmt|;
name|this
operator|.
name|forwardCache
operator|=
name|clone
operator|.
name|forwardCache
expr_stmt|;
name|this
operator|.
name|groupKeyObject
operator|=
name|clone
operator|.
name|groupKeyObject
expr_stmt|;
name|this
operator|.
name|handleSkewJoin
operator|=
name|clone
operator|.
name|handleSkewJoin
expr_stmt|;
name|this
operator|.
name|hconf
operator|=
name|clone
operator|.
name|hconf
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|clone
operator|.
name|id
expr_stmt|;
name|this
operator|.
name|inputObjInspectors
operator|=
name|clone
operator|.
name|inputObjInspectors
expr_stmt|;
name|this
operator|.
name|noOuterJoin
operator|=
name|clone
operator|.
name|noOuterJoin
expr_stmt|;
name|this
operator|.
name|numAliases
operator|=
name|clone
operator|.
name|numAliases
expr_stmt|;
name|this
operator|.
name|operatorId
operator|=
name|clone
operator|.
name|operatorId
expr_stmt|;
name|this
operator|.
name|posToAliasMap
operator|=
name|clone
operator|.
name|posToAliasMap
expr_stmt|;
name|this
operator|.
name|spillTableDesc
operator|=
name|clone
operator|.
name|spillTableDesc
expr_stmt|;
name|this
operator|.
name|statsMap
operator|=
name|clone
operator|.
name|statsMap
expr_stmt|;
name|this
operator|.
name|joinFilters
operator|=
name|clone
operator|.
name|joinFilters
expr_stmt|;
name|this
operator|.
name|joinFilterObjectInspectors
operator|=
name|clone
operator|.
name|joinFilterObjectInspectors
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|JoinDesc
parameter_list|>
name|ObjectInspector
name|getJoinOutputObjectInspector
parameter_list|(
name|Byte
index|[]
name|order
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
index|[]
name|aliasToObjectInspectors
parameter_list|,
name|T
name|conf
parameter_list|)
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|structFieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Byte
name|alias
range|:
name|order
control|)
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|oiList
init|=
name|getValueObjectInspectors
argument_list|(
name|alias
argument_list|,
name|aliasToObjectInspectors
argument_list|)
decl_stmt|;
if|if
condition|(
name|oiList
operator|!=
literal|null
operator|&&
operator|!
name|oiList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|structFieldObjectInspectors
operator|.
name|addAll
argument_list|(
name|oiList
argument_list|)
expr_stmt|;
block|}
block|}
name|StructObjectInspector
name|joinOutputObjectInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|,
name|structFieldObjectInspectors
argument_list|)
decl_stmt|;
return|return
name|joinOutputObjectInspector
return|;
block|}
specifier|protected
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|getValueObjectInspectors
parameter_list|(
name|byte
name|alias
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
index|[]
name|aliasToObjectInspectors
parameter_list|)
block|{
return|return
name|aliasToObjectInspectors
index|[
name|alias
index|]
return|;
block|}
specifier|protected
name|Configuration
name|hconf
decl_stmt|;
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|handleSkewJoin
operator|=
name|conf
operator|.
name|getHandleSkewJoin
argument_list|()
expr_stmt|;
name|this
operator|.
name|hconf
operator|=
name|hconf
expr_stmt|;
name|heartbeatInterval
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESENDHEARTBEAT
argument_list|)
expr_stmt|;
name|countAfterReport
operator|=
literal|0
expr_stmt|;
name|totalSz
operator|=
literal|0
expr_stmt|;
name|int
name|tagLen
init|=
name|conf
operator|.
name|getTagLength
argument_list|()
decl_stmt|;
comment|// Map that contains the rows for each alias
name|storage
operator|=
operator|new
name|AbstractRowContainer
index|[
name|tagLen
index|]
expr_stmt|;
name|numAliases
operator|=
name|conf
operator|.
name|getExprs
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|joinValues
operator|=
operator|new
name|List
index|[
name|tagLen
index|]
expr_stmt|;
name|joinFilters
operator|=
operator|new
name|List
index|[
name|tagLen
index|]
expr_stmt|;
name|order
operator|=
name|conf
operator|.
name|getTagOrder
argument_list|()
expr_stmt|;
name|condn
operator|=
name|conf
operator|.
name|getConds
argument_list|()
expr_stmt|;
name|nullsafes
operator|=
name|conf
operator|.
name|getNullSafes
argument_list|()
expr_stmt|;
name|noOuterJoin
operator|=
name|conf
operator|.
name|isNoOuterJoin
argument_list|()
expr_stmt|;
name|totalSz
operator|=
name|JoinUtil
operator|.
name|populateJoinKeyValue
argument_list|(
name|joinValues
argument_list|,
name|conf
operator|.
name|getExprs
argument_list|()
argument_list|,
name|order
argument_list|,
name|NOTSKIPBIGTABLE
argument_list|)
expr_stmt|;
comment|//process join filters
name|joinFilters
operator|=
operator|new
name|List
index|[
name|tagLen
index|]
expr_stmt|;
name|JoinUtil
operator|.
name|populateJoinKeyValue
argument_list|(
name|joinFilters
argument_list|,
name|conf
operator|.
name|getFilters
argument_list|()
argument_list|,
name|order
argument_list|,
name|NOTSKIPBIGTABLE
argument_list|)
expr_stmt|;
name|joinValuesObjectInspectors
operator|=
name|JoinUtil
operator|.
name|getObjectInspectorsFromEvaluators
argument_list|(
name|joinValues
argument_list|,
name|inputObjInspectors
argument_list|,
name|NOTSKIPBIGTABLE
argument_list|,
name|tagLen
argument_list|)
expr_stmt|;
name|joinFilterObjectInspectors
operator|=
name|JoinUtil
operator|.
name|getObjectInspectorsFromEvaluators
argument_list|(
name|joinFilters
argument_list|,
name|inputObjInspectors
argument_list|,
name|NOTSKIPBIGTABLE
argument_list|,
name|tagLen
argument_list|)
expr_stmt|;
name|joinValuesStandardObjectInspectors
operator|=
name|JoinUtil
operator|.
name|getStandardObjectInspectors
argument_list|(
name|joinValuesObjectInspectors
argument_list|,
name|NOTSKIPBIGTABLE
argument_list|,
name|tagLen
argument_list|)
expr_stmt|;
name|filterMaps
operator|=
name|conf
operator|.
name|getFilterMap
argument_list|()
expr_stmt|;
if|if
condition|(
name|noOuterJoin
condition|)
block|{
name|rowContainerStandardObjectInspectors
operator|=
name|joinValuesStandardObjectInspectors
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
index|[]
name|rowContainerObjectInspectors
init|=
operator|new
name|List
index|[
name|tagLen
index|]
decl_stmt|;
for|for
control|(
name|Byte
name|alias
range|:
name|order
control|)
block|{
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|rcOIs
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|rcOIs
operator|.
name|addAll
argument_list|(
name|joinValuesObjectInspectors
index|[
name|alias
index|]
argument_list|)
expr_stmt|;
comment|// for each alias, add object inspector for short as the last element
name|rcOIs
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableShortObjectInspector
argument_list|)
expr_stmt|;
name|rowContainerObjectInspectors
index|[
name|alias
index|]
operator|=
name|rcOIs
expr_stmt|;
block|}
name|rowContainerStandardObjectInspectors
operator|=
name|JoinUtil
operator|.
name|getStandardObjectInspectors
argument_list|(
name|rowContainerObjectInspectors
argument_list|,
name|NOTSKIPBIGTABLE
argument_list|,
name|tagLen
argument_list|)
expr_stmt|;
block|}
name|dummyObj
operator|=
operator|new
name|ArrayList
index|[
name|numAliases
index|]
expr_stmt|;
name|dummyObjVectors
operator|=
operator|new
name|RowContainer
index|[
name|numAliases
index|]
expr_stmt|;
name|joinEmitInterval
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEJOINEMITINTERVAL
argument_list|)
expr_stmt|;
name|joinCacheSize
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEJOINCACHESIZE
argument_list|)
expr_stmt|;
comment|// construct dummy null row (indicating empty table) and
comment|// construct spill table serde which is used if input is too
comment|// large to fit into main memory.
name|byte
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Byte
name|alias
range|:
name|order
control|)
block|{
name|int
name|sz
init|=
name|conf
operator|.
name|getExprs
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|nr
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|sz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sz
condition|;
name|j
operator|++
control|)
block|{
name|nr
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|noOuterJoin
condition|)
block|{
comment|// add whether the row is filtered or not
comment|// this value does not matter for the dummyObj
comment|// because the join values are already null
name|nr
operator|.
name|add
argument_list|(
operator|new
name|ShortWritable
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dummyObj
index|[
name|pos
index|]
operator|=
name|nr
expr_stmt|;
comment|// there should be only 1 dummy object in the RowContainer
name|RowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|values
init|=
name|JoinUtil
operator|.
name|getRowContainer
argument_list|(
name|hconf
argument_list|,
name|rowContainerStandardObjectInspectors
index|[
name|pos
index|]
argument_list|,
name|alias
argument_list|,
literal|1
argument_list|,
name|spillTableDesc
argument_list|,
name|conf
argument_list|,
operator|!
name|hasFilter
argument_list|(
name|pos
argument_list|)
argument_list|,
name|reporter
argument_list|)
decl_stmt|;
name|values
operator|.
name|addRow
argument_list|(
name|dummyObj
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
name|dummyObjVectors
index|[
name|pos
index|]
operator|=
name|values
expr_stmt|;
comment|// if serde is null, the input doesn't need to be spilled out
comment|// e.g., the output columns does not contains the input table
name|RowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|rc
init|=
name|JoinUtil
operator|.
name|getRowContainer
argument_list|(
name|hconf
argument_list|,
name|rowContainerStandardObjectInspectors
index|[
name|pos
index|]
argument_list|,
name|alias
argument_list|,
name|joinCacheSize
argument_list|,
name|spillTableDesc
argument_list|,
name|conf
argument_list|,
operator|!
name|hasFilter
argument_list|(
name|pos
argument_list|)
argument_list|,
name|reporter
argument_list|)
decl_stmt|;
name|storage
index|[
name|pos
index|]
operator|=
name|rc
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
name|forwardCache
operator|=
operator|new
name|Object
index|[
name|totalSz
index|]
expr_stmt|;
name|aliasFilterTags
operator|=
operator|new
name|short
index|[
name|numAliases
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|aliasFilterTags
argument_list|,
operator|(
name|byte
operator|)
literal|0xff
argument_list|)
expr_stmt|;
name|filterTags
operator|=
operator|new
name|short
index|[
name|numAliases
index|]
expr_stmt|;
name|skipVectors
operator|=
operator|new
name|boolean
index|[
name|numAliases
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|skipVectors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|skipVectors
index|[
name|i
index|]
operator|=
operator|new
name|boolean
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
block|}
name|intermediate
operator|=
operator|new
name|List
index|[
name|numAliases
index|]
expr_stmt|;
name|offsets
operator|=
operator|new
name|int
index|[
name|numAliases
operator|+
literal|1
index|]
expr_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAliases
condition|;
name|i
operator|++
control|)
block|{
name|offsets
index|[
name|i
index|]
operator|=
name|sum
expr_stmt|;
name|sum
operator|+=
name|joinValues
index|[
name|order
index|[
name|i
index|]
index|]
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|offsets
index|[
name|numAliases
index|]
operator|=
name|sum
expr_stmt|;
name|outputObjInspector
operator|=
name|getJoinOutputObjectInspector
argument_list|(
name|order
argument_list|,
name|joinValuesStandardObjectInspectors
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|condn
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|condn
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
operator|==
name|JoinDesc
operator|.
name|LEFT_SEMI_JOIN
condition|)
block|{
name|hasLeftSemiJoin
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"JOIN "
operator|+
name|outputObjInspector
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" totalsz = "
operator|+
name|totalSz
argument_list|)
expr_stmt|;
block|}
specifier|transient
name|boolean
name|newGroupStarted
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|startGroup
parameter_list|()
throws|throws
name|HiveException
block|{
name|newGroupStarted
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|AbstractRowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|alw
range|:
name|storage
control|)
block|{
name|alw
operator|.
name|clearRows
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|startGroup
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|long
name|getNextSize
parameter_list|(
name|long
name|sz
parameter_list|)
block|{
comment|// A very simple counter to keep track of join entries for a key
if|if
condition|(
name|sz
operator|>=
literal|100000
condition|)
block|{
return|return
name|sz
operator|+
literal|100000
return|;
block|}
return|return
literal|2
operator|*
name|sz
return|;
block|}
specifier|protected
specifier|transient
name|Byte
name|alias
decl_stmt|;
specifier|protected
specifier|transient
name|Object
index|[]
name|forwardCache
decl_stmt|;
comment|// pre-calculated offset values for each alias
specifier|protected
specifier|transient
name|int
index|[]
name|offsets
decl_stmt|;
comment|// a array of bitvectors where each entry denotes whether the element is to
comment|// be used or not (whether it is null or not). The size of the bitvector is
comment|// same as the number of inputs(aliases) under consideration currently.
comment|// When all inputs are accounted for, the output is forwarded appropriately.
specifier|protected
specifier|transient
name|boolean
index|[]
index|[]
name|skipVectors
decl_stmt|;
comment|// caches objects before constructing forward cache
specifier|protected
specifier|transient
name|List
index|[]
name|intermediate
decl_stmt|;
comment|// filter tags for objects
specifier|protected
specifier|transient
name|short
index|[]
name|filterTags
decl_stmt|;
comment|/**    * On filterTags    *    * ANDed value of all filter tags in current join group    * if any of values passes on outer join alias (which makes zero for the tag alias),    * it means there exists a pair for it and safely regarded as a inner join    *    * for example, with table a, b something like,    *   a = 100, 10 | 100, 20 | 100, 30    *   b = 100, 10 | 100, 20 | 100, 30    *    * the query "a FO b ON a.k=b.k AND a.v>10 AND b.v>30" makes filter map    *   0(a) = [1(b),1] : a.v>10    *   1(b) = [0(a),1] : b.v>30    *    * for filtered rows in a (100,10) create a-NULL    * for filtered rows in b (100,10) (100,20) (100,30) create NULL-b    *    * with 0(a) = [1(b),1] : a.v>10    *   100, 10 = 00000010 (filtered)    *   100, 20 = 00000000 (valid)    *   100, 30 = 00000000 (valid)    * -------------------------    *       sum = 00000000 : for valid rows in b, there is at least one pair in a    *    * with 1(b) = [0(a),1] : b.v>30    *   100, 10 = 00000001 (filtered)    *   100, 20 = 00000001 (filtered)    *   100, 30 = 00000001 (filtered)    * -------------------------    *       sum = 00000001 : for valid rows in a (100,20) (100,30), there is no pair in b    *    * result :    *   100, 10 :   N,  N    *     N,  N : 100, 10    *     N,  N : 100, 20    *     N,  N : 100, 30    *   100, 20 :   N,  N    *   100, 30 :   N,  N    */
specifier|protected
specifier|transient
name|short
index|[]
name|aliasFilterTags
decl_stmt|;
comment|// all evaluation should be processed here for valid aliasFilterTags
comment|//
comment|// for MapJoin, filter tag is pre-calculated in MapredLocalTask and stored with value.
comment|// when reading the hashtable, MapJoinObjectValue calculates alias filter and provide it to join
specifier|protected
name|List
argument_list|<
name|Object
argument_list|>
name|getFilteredValue
parameter_list|(
name|byte
name|alias
parameter_list|,
name|Object
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|boolean
name|hasFilter
init|=
name|hasFilter
argument_list|(
name|alias
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|nr
init|=
name|JoinUtil
operator|.
name|computeValues
argument_list|(
name|row
argument_list|,
name|joinValues
index|[
name|alias
index|]
argument_list|,
name|joinValuesObjectInspectors
index|[
name|alias
index|]
argument_list|,
name|hasFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasFilter
condition|)
block|{
name|short
name|filterTag
init|=
name|JoinUtil
operator|.
name|isFiltered
argument_list|(
name|row
argument_list|,
name|joinFilters
index|[
name|alias
index|]
argument_list|,
name|joinFilterObjectInspectors
index|[
name|alias
index|]
argument_list|,
name|filterMaps
index|[
name|alias
index|]
argument_list|)
decl_stmt|;
name|nr
operator|.
name|add
argument_list|(
operator|new
name|ShortWritable
argument_list|(
name|filterTag
argument_list|)
argument_list|)
expr_stmt|;
name|aliasFilterTags
index|[
name|alias
index|]
operator|&=
name|filterTag
expr_stmt|;
block|}
return|return
name|nr
return|;
block|}
comment|// fill forwardCache with skipvector
specifier|private
name|void
name|createForwardJoinObject
parameter_list|(
name|boolean
index|[]
name|skip
parameter_list|)
throws|throws
name|HiveException
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|forwardCache
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|boolean
name|forward
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAliases
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|skip
index|[
name|i
index|]
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
name|offsets
index|[
name|i
index|]
init|;
name|j
operator|<
name|offsets
index|[
name|i
operator|+
literal|1
index|]
condition|;
name|j
operator|++
control|)
block|{
name|forwardCache
index|[
name|j
index|]
operator|=
name|intermediate
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|j
operator|-
name|offsets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|forward
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|forward
condition|)
block|{
name|internalForward
argument_list|(
name|forwardCache
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
name|countAfterReport
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|// entry point (aliasNum = 0)
specifier|private
name|void
name|genJoinObject
parameter_list|()
throws|throws
name|HiveException
block|{
name|boolean
name|rightFirst
init|=
literal|true
decl_stmt|;
name|boolean
name|hasFilter
init|=
name|hasFilter
argument_list|(
name|order
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|AbstractRowContainer
operator|.
name|RowIterator
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|iter
init|=
name|storage
index|[
name|order
index|[
literal|0
index|]
index|]
operator|.
name|rowIter
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Object
argument_list|>
name|rightObj
init|=
name|iter
operator|.
name|first
argument_list|()
init|;
name|rightObj
operator|!=
literal|null
condition|;
name|rightObj
operator|=
name|iter
operator|.
name|next
argument_list|()
control|)
block|{
name|boolean
name|rightNull
init|=
name|rightObj
operator|==
name|dummyObj
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|hasFilter
condition|)
block|{
name|filterTags
index|[
literal|0
index|]
operator|=
name|getFilterTag
argument_list|(
name|rightObj
argument_list|)
expr_stmt|;
block|}
name|skipVectors
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
name|rightNull
expr_stmt|;
name|intermediate
index|[
literal|0
index|]
operator|=
name|rightObj
expr_stmt|;
name|genObject
argument_list|(
literal|1
argument_list|,
name|rightFirst
argument_list|,
name|rightNull
argument_list|)
expr_stmt|;
name|rightFirst
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// creates objects in recursive manner
specifier|private
name|void
name|genObject
parameter_list|(
name|int
name|aliasNum
parameter_list|,
name|boolean
name|allLeftFirst
parameter_list|,
name|boolean
name|allLeftNull
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|aliasNum
operator|<
name|numAliases
condition|)
block|{
name|boolean
index|[]
name|skip
init|=
name|skipVectors
index|[
name|aliasNum
index|]
decl_stmt|;
name|boolean
index|[]
name|prevSkip
init|=
name|skipVectors
index|[
name|aliasNum
operator|-
literal|1
index|]
decl_stmt|;
name|JoinCondDesc
name|joinCond
init|=
name|condn
index|[
name|aliasNum
operator|-
literal|1
index|]
decl_stmt|;
name|int
name|type
init|=
name|joinCond
operator|.
name|getType
argument_list|()
decl_stmt|;
name|int
name|left
init|=
name|joinCond
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|int
name|right
init|=
name|joinCond
operator|.
name|getRight
argument_list|()
decl_stmt|;
comment|// search for match in the rhs table
name|AbstractRowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|aliasRes
init|=
name|storage
index|[
name|order
index|[
name|aliasNum
index|]
index|]
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|boolean
name|loopAgain
init|=
literal|false
decl_stmt|;
name|boolean
name|tryLOForFO
init|=
name|type
operator|==
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
decl_stmt|;
name|boolean
name|rightFirst
init|=
literal|true
decl_stmt|;
name|AbstractRowContainer
operator|.
name|RowIterator
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|iter
init|=
name|aliasRes
operator|.
name|rowIter
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Object
argument_list|>
name|rightObj
init|=
name|iter
operator|.
name|first
argument_list|()
init|;
operator|!
name|done
operator|&&
name|rightObj
operator|!=
literal|null
condition|;
name|rightObj
operator|=
name|loopAgain
condition|?
name|rightObj
else|:
name|iter
operator|.
name|next
argument_list|()
operator|,
name|rightFirst
operator|=
name|loopAgain
operator|=
literal|false
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|prevSkip
argument_list|,
literal|0
argument_list|,
name|skip
argument_list|,
literal|0
argument_list|,
name|prevSkip
operator|.
name|length
argument_list|)
expr_stmt|;
name|boolean
name|rightNull
init|=
name|rightObj
operator|==
name|dummyObj
index|[
name|aliasNum
index|]
decl_stmt|;
if|if
condition|(
name|hasFilter
argument_list|(
name|order
index|[
name|aliasNum
index|]
argument_list|)
condition|)
block|{
name|filterTags
index|[
name|aliasNum
index|]
operator|=
name|getFilterTag
argument_list|(
name|rightObj
argument_list|)
expr_stmt|;
block|}
name|skip
index|[
name|right
index|]
operator|=
name|rightNull
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|JoinDesc
operator|.
name|INNER_JOIN
condition|)
block|{
name|innerJoin
argument_list|(
name|skip
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|JoinDesc
operator|.
name|LEFT_SEMI_JOIN
condition|)
block|{
if|if
condition|(
name|innerJoin
argument_list|(
name|skip
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
condition|)
block|{
comment|// if left-semi-join found a match, skipping the rest of the rows in the
comment|// rhs table of the semijoin
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|JoinDesc
operator|.
name|LEFT_OUTER_JOIN
operator|||
operator|(
name|type
operator|==
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
operator|&&
name|rightNull
operator|)
condition|)
block|{
name|int
name|result
init|=
name|leftOuterJoin
argument_list|(
name|skip
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
continue|continue;
block|}
name|done
operator|=
name|result
operator|>
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|JoinDesc
operator|.
name|RIGHT_OUTER_JOIN
operator|||
operator|(
name|type
operator|==
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
operator|&&
name|allLeftNull
operator|)
condition|)
block|{
if|if
condition|(
name|allLeftFirst
operator|&&
operator|!
name|rightOuterJoin
argument_list|(
name|skip
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
operator|||
operator|!
name|allLeftFirst
operator|&&
operator|!
name|innerJoin
argument_list|(
name|skip
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
condition|)
block|{
if|if
condition|(
name|tryLOForFO
operator|&&
name|leftOuterJoin
argument_list|(
name|skip
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
operator|>
literal|0
condition|)
block|{
name|loopAgain
operator|=
name|allLeftFirst
expr_stmt|;
name|done
operator|=
operator|!
name|loopAgain
expr_stmt|;
name|tryLOForFO
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allLeftFirst
operator|&&
operator|!
name|rightOuterJoin
argument_list|(
name|skip
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
operator|||
operator|!
name|allLeftFirst
operator|&&
operator|!
name|innerJoin
argument_list|(
name|skip
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|intermediate
index|[
name|aliasNum
index|]
operator|=
name|rightObj
expr_stmt|;
comment|// recursively call the join the other rhs tables
name|genObject
argument_list|(
name|aliasNum
operator|+
literal|1
argument_list|,
name|allLeftFirst
operator|&&
name|rightFirst
argument_list|,
name|allLeftNull
operator|&&
name|rightNull
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|allLeftNull
condition|)
block|{
name|createForwardJoinObject
argument_list|(
name|skipVectors
index|[
name|numAliases
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// inner join
specifier|private
name|boolean
name|innerJoin
parameter_list|(
name|boolean
index|[]
name|skip
parameter_list|,
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isInnerJoin
argument_list|(
name|skip
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|skip
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|// LO
comment|//
comment|// LEFT\RIGHT   skip  filtered   valid
comment|// skip        --(1)     --(1)    --(1)
comment|// filtered    +-(1)     +-(1)    +-(1)
comment|// valid       +-(1)     +-(4*)   ++(2)
comment|//
comment|// * If right alias has any pair for left alias, continue (3)
comment|// -1 for continue : has pair but not in this turn
comment|//  0 for inner join (++) : join and continue LO
comment|//  1 for left outer join (+-) : join and skip further LO
specifier|private
name|int
name|leftOuterJoin
parameter_list|(
name|boolean
index|[]
name|skip
parameter_list|,
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|)
block|{
if|if
condition|(
name|skip
index|[
name|left
index|]
operator|||
name|skip
index|[
name|right
index|]
operator|||
operator|!
name|isLeftValid
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
condition|)
block|{
name|skip
index|[
name|right
index|]
operator|=
literal|true
expr_stmt|;
return|return
literal|1
return|;
comment|// case 1
block|}
if|if
condition|(
name|isRightValid
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
comment|// case 2
block|}
if|if
condition|(
name|hasRightPairForLeft
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
comment|// case 3
block|}
name|skip
index|[
name|right
index|]
operator|=
literal|true
expr_stmt|;
return|return
literal|1
return|;
comment|// case 4
block|}
comment|// RO
comment|//
comment|// LEFT\RIGHT   skip  filtered   valid
comment|// skip        --(1)     -+(1)   -+(1)
comment|// filtered    --(1)     -+(1)   -+(4*)
comment|// valid       --(1)     -+(1)   ++(2)
comment|//
comment|// * If left alias has any pair for right alias, continue (3)
comment|// false for continue : has pair but not in this turn
specifier|private
name|boolean
name|rightOuterJoin
parameter_list|(
name|boolean
index|[]
name|skip
parameter_list|,
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|)
block|{
if|if
condition|(
name|skip
index|[
name|left
index|]
operator|||
name|skip
index|[
name|right
index|]
operator|||
operator|!
name|isRightValid
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|skip
argument_list|,
literal|0
argument_list|,
name|right
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
comment|// case 1
block|}
if|if
condition|(
name|isLeftValid
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
comment|// case 2
block|}
if|if
condition|(
name|hasLeftPairForRight
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// case 3
block|}
name|Arrays
operator|.
name|fill
argument_list|(
name|skip
argument_list|,
literal|0
argument_list|,
name|right
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
comment|// case 4
block|}
comment|// If left and right aliases are all valid, two values will be inner joined,
specifier|private
name|boolean
name|isInnerJoin
parameter_list|(
name|boolean
index|[]
name|skip
parameter_list|,
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|)
block|{
return|return
operator|!
name|skip
index|[
name|left
index|]
operator|&&
operator|!
name|skip
index|[
name|right
index|]
operator|&&
name|isLeftValid
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
operator|&&
name|isRightValid
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
comment|// check if left is valid
specifier|private
name|boolean
name|isLeftValid
parameter_list|(
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|)
block|{
return|return
operator|!
name|hasFilter
argument_list|(
name|left
argument_list|)
operator|||
operator|!
name|JoinUtil
operator|.
name|isFiltered
argument_list|(
name|filterTags
index|[
name|left
index|]
argument_list|,
name|right
argument_list|)
return|;
block|}
comment|// check if right is valid
specifier|private
name|boolean
name|isRightValid
parameter_list|(
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|)
block|{
return|return
operator|!
name|hasFilter
argument_list|(
name|right
argument_list|)
operator|||
operator|!
name|JoinUtil
operator|.
name|isFiltered
argument_list|(
name|filterTags
index|[
name|right
index|]
argument_list|,
name|left
argument_list|)
return|;
block|}
comment|// check if any left pair exists for right objects
specifier|private
name|boolean
name|hasLeftPairForRight
parameter_list|(
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|)
block|{
return|return
operator|!
name|JoinUtil
operator|.
name|isFiltered
argument_list|(
name|aliasFilterTags
index|[
name|left
index|]
argument_list|,
name|right
argument_list|)
return|;
block|}
comment|// check if any right pair exists for left objects
specifier|private
name|boolean
name|hasRightPairForLeft
parameter_list|(
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|)
block|{
return|return
operator|!
name|JoinUtil
operator|.
name|isFiltered
argument_list|(
name|aliasFilterTags
index|[
name|right
index|]
argument_list|,
name|left
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|hasAnyFiltered
parameter_list|(
name|int
name|alias
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|row
parameter_list|)
block|{
return|return
name|row
operator|==
name|dummyObj
index|[
name|alias
index|]
operator|||
name|hasFilter
argument_list|(
name|alias
argument_list|)
operator|&&
name|JoinUtil
operator|.
name|hasAnyFiltered
argument_list|(
name|getFilterTag
argument_list|(
name|row
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|final
name|boolean
name|hasFilter
parameter_list|(
name|int
name|alias
parameter_list|)
block|{
return|return
name|filterMaps
operator|!=
literal|null
operator|&&
name|filterMaps
index|[
name|alias
index|]
operator|!=
literal|null
return|;
block|}
comment|// get tag value from object (last of list)
specifier|protected
specifier|final
name|short
name|getFilterTag
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|row
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ShortWritable
operator|)
name|row
operator|.
name|get
argument_list|(
name|row
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Forward a record of join results.    *    * @throws HiveException    */
annotation|@
name|Override
specifier|public
name|void
name|endGroup
parameter_list|()
throws|throws
name|HiveException
block|{
name|checkAndGenObject
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|internalForward
parameter_list|(
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|outputOI
parameter_list|)
throws|throws
name|HiveException
block|{
name|forward
argument_list|(
name|row
argument_list|,
name|outputOI
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|genUniqueJoinObject
parameter_list|(
name|int
name|aliasNum
parameter_list|,
name|int
name|forwardCachePos
parameter_list|)
throws|throws
name|HiveException
block|{
name|AbstractRowContainer
operator|.
name|RowIterator
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|iter
init|=
name|storage
index|[
name|order
index|[
name|aliasNum
index|]
index|]
operator|.
name|rowIter
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Object
argument_list|>
name|row
init|=
name|iter
operator|.
name|first
argument_list|()
init|;
name|row
operator|!=
literal|null
condition|;
name|row
operator|=
name|iter
operator|.
name|next
argument_list|()
control|)
block|{
name|int
name|sz
init|=
name|joinValues
index|[
name|order
index|[
name|aliasNum
index|]
index|]
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|p
init|=
name|forwardCachePos
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sz
condition|;
name|j
operator|++
control|)
block|{
name|forwardCache
index|[
name|p
operator|++
index|]
operator|=
name|row
operator|.
name|get
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aliasNum
operator|==
name|numAliases
operator|-
literal|1
condition|)
block|{
name|internalForward
argument_list|(
name|forwardCache
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
name|countAfterReport
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|genUniqueJoinObject
argument_list|(
name|aliasNum
operator|+
literal|1
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|genAllOneUniqueJoinObject
parameter_list|()
throws|throws
name|HiveException
block|{
name|int
name|p
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAliases
condition|;
name|i
operator|++
control|)
block|{
name|int
name|sz
init|=
name|joinValues
index|[
name|order
index|[
name|i
index|]
index|]
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|obj
init|=
name|storage
index|[
name|order
index|[
name|i
index|]
index|]
operator|.
name|rowIter
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sz
condition|;
name|j
operator|++
control|)
block|{
name|forwardCache
index|[
name|p
operator|++
index|]
operator|=
name|obj
operator|.
name|get
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
name|internalForward
argument_list|(
name|forwardCache
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
name|countAfterReport
operator|=
literal|0
expr_stmt|;
block|}
specifier|protected
name|void
name|checkAndGenObject
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|condn
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
operator|==
name|JoinDesc
operator|.
name|UNIQUE_JOIN
condition|)
block|{
comment|// Check if results need to be emitted.
comment|// Results only need to be emitted if there is a non-null entry in a table
comment|// that is preserved or if there are no non-null entries
name|boolean
name|preserve
init|=
literal|false
decl_stmt|;
comment|// Will be true if there is a non-null entry
comment|// in a preserved table
name|boolean
name|hasNulls
init|=
literal|false
decl_stmt|;
comment|// Will be true if there are null entries
name|boolean
name|allOne
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAliases
condition|;
name|i
operator|++
control|)
block|{
name|Byte
name|alias
init|=
name|order
index|[
name|i
index|]
decl_stmt|;
name|AbstractRowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|alw
init|=
name|storage
index|[
name|alias
index|]
decl_stmt|;
if|if
condition|(
name|alw
operator|.
name|rowCount
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|allOne
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|alw
operator|.
name|rowCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|alw
operator|.
name|addRow
argument_list|(
name|dummyObj
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|hasNulls
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|condn
index|[
name|i
index|]
operator|.
name|getPreserved
argument_list|()
condition|)
block|{
name|preserve
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasNulls
operator|&&
operator|!
name|preserve
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|allOne
condition|)
block|{
name|genAllOneUniqueJoinObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|genUniqueJoinObject
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// does any result need to be emitted
name|boolean
name|mayHasMoreThanOne
init|=
literal|false
decl_stmt|;
name|boolean
name|hasEmpty
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAliases
condition|;
name|i
operator|++
control|)
block|{
name|Byte
name|alias
init|=
name|order
index|[
name|i
index|]
decl_stmt|;
name|AbstractRowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|alw
init|=
name|storage
index|[
name|alias
index|]
decl_stmt|;
if|if
condition|(
name|noOuterJoin
condition|)
block|{
if|if
condition|(
name|alw
operator|.
name|rowCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|alw
operator|.
name|rowCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|mayHasMoreThanOne
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|alw
operator|.
name|rowCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|hasEmpty
operator|=
literal|true
expr_stmt|;
name|alw
operator|.
name|addRow
argument_list|(
name|dummyObj
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|hasEmpty
operator|&&
name|alw
operator|.
name|rowCount
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|hasAnyFiltered
argument_list|(
name|alias
argument_list|,
name|alw
operator|.
name|rowIter
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
condition|)
block|{
name|hasEmpty
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|mayHasMoreThanOne
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|hasEmpty
condition|)
block|{
name|AbstractRowContainer
operator|.
name|RowIterator
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|iter
init|=
name|alw
operator|.
name|rowIter
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Object
argument_list|>
name|row
init|=
name|iter
operator|.
name|first
argument_list|()
init|;
name|row
operator|!=
literal|null
condition|;
name|row
operator|=
name|iter
operator|.
name|next
argument_list|()
control|)
block|{
name|reportProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasAnyFiltered
argument_list|(
name|alias
argument_list|,
name|row
argument_list|)
condition|)
block|{
name|hasEmpty
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasEmpty
operator|&&
operator|!
name|mayHasMoreThanOne
condition|)
block|{
name|genAllOneUniqueJoinObject
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|hasEmpty
operator|&&
operator|!
name|hasLeftSemiJoin
condition|)
block|{
name|genUniqueJoinObject
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|genJoinObject
argument_list|()
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|fill
argument_list|(
name|aliasFilterTags
argument_list|,
operator|(
name|byte
operator|)
literal|0xff
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|reportProgress
parameter_list|()
block|{
comment|// Send some status periodically
name|countAfterReport
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|countAfterReport
operator|%
name|heartbeatInterval
operator|)
operator|==
literal|0
operator|&&
operator|(
name|reporter
operator|!=
literal|null
operator|)
condition|)
block|{
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
name|countAfterReport
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/**    * All done.    *    */
annotation|@
name|Override
specifier|public
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|AbstractRowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|alw
range|:
name|storage
control|)
block|{
if|if
condition|(
name|alw
operator|!=
literal|null
condition|)
block|{
name|alw
operator|.
name|clearRows
argument_list|()
expr_stmt|;
comment|// clean up the temp files
block|}
block|}
name|Arrays
operator|.
name|fill
argument_list|(
name|storage
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"JOIN"
return|;
block|}
comment|/**    * @return the posToAliasMap    */
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getPosToAliasMap
parameter_list|()
block|{
return|return
name|posToAliasMap
return|;
block|}
comment|/**    * @param posToAliasMap    *          the posToAliasMap to set    */
specifier|public
name|void
name|setPosToAliasMap
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|posToAliasMap
parameter_list|)
block|{
name|this
operator|.
name|posToAliasMap
operator|=
name|posToAliasMap
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|opAllowedBeforeMapJoin
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|opAllowedAfterMapJoin
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

