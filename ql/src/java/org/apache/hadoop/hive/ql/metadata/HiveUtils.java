begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * General collection of helper functions  *  */
end_comment

begin_class
specifier|public
class|class
name|HiveUtils
block|{
specifier|public
specifier|static
specifier|final
name|char
name|QUOTE
init|=
literal|'"'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|COLON
init|=
literal|':'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LBRACKET
init|=
literal|"["
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RBRACKET
init|=
literal|"]"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LBRACE
init|=
literal|"{"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RBRACE
init|=
literal|"}"
decl_stmt|;
comment|/**    * Common functionality for all SerDe libraries to handle list and primitive    * string serialization to json strings (who uses this?)    */
specifier|public
specifier|static
name|String
name|toJSONString
parameter_list|(
name|Object
name|obj
parameter_list|,
name|SerDeField
name|hf
parameter_list|,
name|SerDe
name|sd
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|hf
operator|.
name|isList
argument_list|()
condition|)
block|{
name|Class
name|type
init|=
name|hf
operator|.
name|getListElementType
argument_list|()
decl_stmt|;
name|boolean
name|is_string
init|=
operator|(
name|type
operator|==
name|String
operator|.
name|class
operator|)
decl_stmt|;
name|boolean
name|is_boolean
init|=
operator|(
name|type
operator|==
name|Boolean
operator|.
name|class
operator|)
decl_stmt|;
name|boolean
name|is_primitive
init|=
name|ReflectionSerDeField
operator|.
name|isClassPrimitive
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|Iterator
name|iter
init|=
operator|(
operator|(
name|List
operator|)
name|obj
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|LBRACKET
argument_list|)
decl_stmt|;
name|String
name|toPrefix
init|=
literal|""
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|lobj
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|is_primitive
condition|)
block|{
if|if
condition|(
name|is_string
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|toPrefix
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|QUOTE
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|escapeString
argument_list|(
operator|(
name|String
operator|)
name|lobj
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|QUOTE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|is_boolean
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|toPrefix
operator|+
operator|(
operator|(
operator|(
name|Boolean
operator|)
name|lobj
operator|)
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"True"
else|:
literal|"False"
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// it's a number - so doesn't need to be escaped.
name|sb
operator|.
name|append
argument_list|(
name|toPrefix
operator|+
name|lobj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|sb
operator|.
name|append
argument_list|(
name|toPrefix
operator|+
name|sd
operator|.
name|toJSONString
argument_list|(
name|lobj
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|first
condition|)
block|{
name|toPrefix
operator|=
literal|","
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|RBRACKET
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|hf
operator|.
name|isMap
argument_list|()
condition|)
block|{
name|Class
name|keyType
init|=
name|hf
operator|.
name|getMapKeyType
argument_list|()
decl_stmt|;
name|Class
name|valType
init|=
name|hf
operator|.
name|getMapValueType
argument_list|()
decl_stmt|;
name|boolean
name|key_is_string
init|=
operator|(
name|keyType
operator|==
name|String
operator|.
name|class
operator|)
decl_stmt|;
name|boolean
name|key_is_boolean
init|=
operator|(
name|keyType
operator|==
name|Boolean
operator|.
name|class
operator|)
decl_stmt|;
name|boolean
name|key_is_primitive
init|=
name|ReflectionSerDeField
operator|.
name|isClassPrimitive
argument_list|(
name|keyType
argument_list|)
decl_stmt|;
name|boolean
name|val_is_string
init|=
operator|(
name|valType
operator|==
name|String
operator|.
name|class
operator|)
decl_stmt|;
name|boolean
name|val_is_boolean
init|=
operator|(
name|valType
operator|==
name|Boolean
operator|.
name|class
operator|)
decl_stmt|;
name|boolean
name|val_is_primitive
init|=
name|ReflectionSerDeField
operator|.
name|isClassPrimitive
argument_list|(
name|valType
argument_list|)
decl_stmt|;
name|Iterator
name|iter
init|=
operator|(
operator|(
name|Map
operator|)
name|obj
operator|)
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|LBRACE
argument_list|)
decl_stmt|;
name|String
name|toPrefix
init|=
literal|""
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|lobj
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|robj
init|=
operator|(
operator|(
name|Map
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|(
name|lobj
argument_list|)
decl_stmt|;
comment|// Emit key
if|if
condition|(
name|key_is_primitive
condition|)
block|{
if|if
condition|(
name|key_is_string
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|toPrefix
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|QUOTE
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|escapeString
argument_list|(
operator|(
name|String
operator|)
name|lobj
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|QUOTE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key_is_boolean
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|toPrefix
operator|+
operator|(
operator|(
operator|(
name|Boolean
operator|)
name|lobj
operator|)
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"True"
else|:
literal|"False"
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// it's a number - so doesn't need to be escaped.
name|sb
operator|.
name|append
argument_list|(
name|toPrefix
operator|+
name|lobj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|sb
operator|.
name|append
argument_list|(
name|toPrefix
operator|+
name|sd
operator|.
name|toJSONString
argument_list|(
name|lobj
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
comment|// Emit val
if|if
condition|(
name|val_is_primitive
condition|)
block|{
if|if
condition|(
name|val_is_string
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|toPrefix
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|QUOTE
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|escapeString
argument_list|(
operator|(
name|String
operator|)
name|robj
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|QUOTE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val_is_boolean
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|toPrefix
operator|+
operator|(
operator|(
operator|(
name|Boolean
operator|)
name|robj
operator|)
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"True"
else|:
literal|"False"
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// it's a number - so doesn't need to be escaped.
name|sb
operator|.
name|append
argument_list|(
name|toPrefix
operator|+
name|robj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|sb
operator|.
name|append
argument_list|(
name|toPrefix
operator|+
name|sd
operator|.
name|toJSONString
argument_list|(
name|robj
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|first
condition|)
block|{
name|toPrefix
operator|=
literal|","
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|RBRACE
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"HiveUtils.toJSONString only does lists"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|escapeString
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|int
name|length
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|escape
init|=
operator|new
name|StringBuilder
argument_list|(
name|length
operator|+
literal|16
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|char
name|c
init|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'"'
case|:
case|case
literal|'\\'
case|:
name|escape
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|escape
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\b'
case|:
name|escape
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|escape
operator|.
name|append
argument_list|(
literal|'b'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\f'
case|:
name|escape
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|escape
operator|.
name|append
argument_list|(
literal|'f'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\n'
case|:
name|escape
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|escape
operator|.
name|append
argument_list|(
literal|'n'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
name|escape
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|escape
operator|.
name|append
argument_list|(
literal|'r'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\t'
case|:
name|escape
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|escape
operator|.
name|append
argument_list|(
literal|'t'
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// Control characeters! According to JSON RFC u0020
if|if
condition|(
name|c
operator|<
literal|' '
condition|)
block|{
name|String
name|hex
init|=
name|Integer
operator|.
name|toHexString
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|escape
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|escape
operator|.
name|append
argument_list|(
literal|'u'
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|4
init|;
name|j
operator|>
name|hex
operator|.
name|length
argument_list|()
condition|;
operator|--
name|j
control|)
block|{
name|escape
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
name|escape
operator|.
name|append
argument_list|(
name|hex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|escape
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
return|return
operator|(
name|escape
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
specifier|static
name|String
name|lightEscapeString
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|int
name|length
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|escape
init|=
operator|new
name|StringBuilder
argument_list|(
name|length
operator|+
literal|16
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|char
name|c
init|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\n'
case|:
name|escape
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|escape
operator|.
name|append
argument_list|(
literal|'n'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
name|escape
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|escape
operator|.
name|append
argument_list|(
literal|'r'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\t'
case|:
name|escape
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|escape
operator|.
name|append
argument_list|(
literal|'t'
argument_list|)
expr_stmt|;
break|break;
default|default:
name|escape
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
operator|(
name|escape
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

