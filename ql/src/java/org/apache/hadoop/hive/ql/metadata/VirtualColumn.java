begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_enum
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
enum|enum
name|VirtualColumn
block|{
name|FILENAME
argument_list|(
literal|"INPUT__FILE__NAME"
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
block|,
name|BLOCKOFFSET
argument_list|(
literal|"BLOCK__OFFSET__INSIDE__FILE"
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
block|,
name|ROWOFFSET
argument_list|(
literal|"ROW__OFFSET__INSIDE__BLOCK"
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
block|,
name|RAWDATASIZE
argument_list|(
literal|"RAW__DATA__SIZE"
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
block|,
comment|/**    * {@link org.apache.hadoop.hive.ql.io.RecordIdentifier}     */
name|ROWID
argument_list|(
literal|"ROW__ID"
argument_list|,
name|RecordIdentifier
operator|.
name|StructInfo
operator|.
name|typeInfo
argument_list|,
literal|true
argument_list|,
name|RecordIdentifier
operator|.
name|StructInfo
operator|.
name|oi
argument_list|)
block|,
comment|/**    * GROUPINGID is used with GROUP BY GROUPINGS SETS, ROLLUP and CUBE.    * It composes a bit vector with the "0" and "1" values for every    * column which is GROUP BY section. "1" is for a row in the result    * set if that column has been aggregated in that row. Otherwise the    * value is "0".  Returns the decimal representation of the bit vector.    */
name|GROUPINGID
argument_list|(
literal|"GROUPING__ID"
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
block|;
specifier|public
specifier|static
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|VIRTUAL_COLUMN_NAMES
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|FILENAME
operator|.
name|getName
argument_list|()
argument_list|,
name|BLOCKOFFSET
operator|.
name|getName
argument_list|()
argument_list|,
name|ROWOFFSET
operator|.
name|getName
argument_list|()
argument_list|,
name|RAWDATASIZE
operator|.
name|getName
argument_list|()
argument_list|,
name|GROUPINGID
operator|.
name|getName
argument_list|()
argument_list|,
name|ROWID
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|TypeInfo
name|typeInfo
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isHidden
decl_stmt|;
specifier|private
specifier|final
name|ObjectInspector
name|oi
decl_stmt|;
name|VirtualColumn
parameter_list|(
name|String
name|name
parameter_list|,
name|PrimitiveTypeInfo
name|typeInfo
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|typeInfo
argument_list|,
literal|true
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|typeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|VirtualColumn
parameter_list|(
name|String
name|name
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|,
name|boolean
name|isHidden
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|typeInfo
operator|=
name|typeInfo
expr_stmt|;
name|this
operator|.
name|isHidden
operator|=
name|isHidden
expr_stmt|;
name|this
operator|.
name|oi
operator|=
name|oi
expr_stmt|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|getStatsRegistry
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|VirtualColumn
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|RAWDATASIZE
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|getRegistry
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|VirtualColumn
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|VirtualColumn
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|BLOCKOFFSET
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|FILENAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEROWOFFSET
argument_list|)
condition|)
block|{
name|l
operator|.
name|add
argument_list|(
name|ROWOFFSET
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|add
argument_list|(
name|ROWID
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
specifier|public
name|TypeInfo
name|getTypeInfo
parameter_list|()
block|{
return|return
name|typeInfo
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|boolean
name|isHidden
parameter_list|()
block|{
return|return
name|isHidden
return|;
block|}
specifier|public
name|boolean
name|getIsHidden
parameter_list|()
block|{
return|return
name|isHidden
return|;
block|}
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
block|{
return|return
name|oi
return|;
block|}
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|removeVirtualColumns
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|)
block|{
name|Iterables
operator|.
name|removeAll
argument_list|(
name|columns
argument_list|,
name|VIRTUAL_COLUMN_NAMES
argument_list|)
expr_stmt|;
return|return
name|columns
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|removeVirtualColumnTypes
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
parameter_list|,
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
parameter_list|)
block|{
if|if
condition|(
name|columnNames
operator|.
name|size
argument_list|()
operator|!=
name|columnTypes
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Number of column names in configuration "
operator|+
name|columnNames
operator|.
name|size
argument_list|()
operator|+
literal|" differs from column types "
operator|+
name|columnTypes
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
name|ListIterator
argument_list|<
name|TypeInfo
argument_list|>
name|it
init|=
name|columnTypes
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|VIRTUAL_COLUMN_NAMES
operator|.
name|contains
argument_list|(
name|columnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
name|columnTypes
return|;
block|}
specifier|public
specifier|static
name|StructObjectInspector
name|getVCSObjectInspector
parameter_list|(
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|vcs
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|vcs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|inspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|vcs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|VirtualColumn
name|vc
range|:
name|vcs
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|vc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|inspectors
operator|.
name|add
argument_list|(
name|vc
operator|.
name|oi
argument_list|)
expr_stmt|;
block|}
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|names
argument_list|,
name|inspectors
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isVirtualColumnBasedOnAlias
parameter_list|(
name|ColumnInfo
name|column
parameter_list|)
block|{
comment|// Not using method column.getIsVirtualCol() because partitioning columns
comment|// are also treated as virtual columns in ColumnInfo.
if|if
condition|(
name|column
operator|.
name|getAlias
argument_list|()
operator|!=
literal|null
operator|&&
name|VirtualColumn
operator|.
name|VIRTUAL_COLUMN_NAMES
operator|.
name|contains
argument_list|(
name|column
operator|.
name|getAlias
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_enum

end_unit

