begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  *   * This class stores the mapping from table alias to the parse tree information of the table  * sample clause(stored in the TableSample class).  *  */
end_comment

begin_class
specifier|public
class|class
name|SamplePruner
block|{
comment|/**    * Table alias for the table e.g. in case of FROM t TABLESAMPLE(1 OUT OF 2 ON rand()) a    * "a" is the table alias    */
specifier|private
name|String
name|tabAlias
decl_stmt|;
comment|/**    * The parse tree corresponding to the TABLESAMPLE clause. e.g. in case of     * FROM t TABLESAMPLE(1 OUT OF 2 ON rand()) a the parse tree of     * "TABLESAMPLE(1 OUT OF 2 ON rand())" is parsed out and stored in tableSample    */
specifier|private
name|TableSample
name|tableSample
decl_stmt|;
comment|/**    * The log handle for this class    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"hive.ql.parse.SamplePruner"
argument_list|)
decl_stmt|;
comment|/**    * Constructs the SamplePruner given the table alias and the table sample    * 	    * @param alias The alias of the table specified in the query    * @param tableSample The parse infromation of the TABLESAMPLE clause    */
specifier|public
name|SamplePruner
parameter_list|(
name|String
name|alias
parameter_list|,
name|TableSample
name|tableSample
parameter_list|)
block|{
name|this
operator|.
name|tabAlias
operator|=
name|alias
expr_stmt|;
name|this
operator|.
name|tableSample
operator|=
name|tableSample
expr_stmt|;
block|}
comment|/**    * Gets the table alias    *     * @return String    */
specifier|public
name|String
name|getTabAlias
parameter_list|()
block|{
return|return
name|this
operator|.
name|tabAlias
return|;
block|}
comment|/**    * Sets the table alias    *     * @param tabAlias The table alias as specified in the query    */
specifier|public
name|void
name|setTabAlias
parameter_list|(
name|String
name|tabAlias
parameter_list|)
block|{
name|this
operator|.
name|tabAlias
operator|=
name|tabAlias
expr_stmt|;
block|}
comment|/**    * Gets the parse information of the associated table sample clause    *     * @return TableSample    */
specifier|public
name|TableSample
name|getTableSample
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableSample
return|;
block|}
comment|/**    * Sets the parse information of the associated table sample clause    *     * @param tableSample Information related to the table sample clause    */
specifier|public
name|void
name|setTableSample
parameter_list|(
name|TableSample
name|tableSample
parameter_list|)
block|{
name|this
operator|.
name|tableSample
operator|=
name|tableSample
expr_stmt|;
block|}
comment|/**    * Prunes to get all the files in the partition that satisfy the TABLESAMPLE clause    *     * @param part The partition to prune    * @return Path[]    * @throws SemanticException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
name|Path
index|[]
name|prune
parameter_list|(
name|Partition
name|part
parameter_list|)
throws|throws
name|SemanticException
block|{
name|int
name|num
init|=
name|this
operator|.
name|tableSample
operator|.
name|getNumerator
argument_list|()
decl_stmt|;
name|int
name|den
init|=
name|this
operator|.
name|tableSample
operator|.
name|getDenominator
argument_list|()
decl_stmt|;
name|int
name|bucketCount
init|=
name|part
operator|.
name|getBucketCount
argument_list|()
decl_stmt|;
name|String
name|fullScanMsg
init|=
literal|""
decl_stmt|;
comment|// check if input pruning is possible
if|if
condition|(
name|this
operator|.
name|tableSample
operator|.
name|getInputPruning
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"numerator = "
operator|+
name|num
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"denominator = "
operator|+
name|den
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"bucket count = "
operator|+
name|bucketCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|bucketCount
operator|==
name|den
condition|)
block|{
name|Path
index|[]
name|ret
init|=
operator|new
name|Path
index|[
literal|1
index|]
decl_stmt|;
name|ret
index|[
literal|0
index|]
operator|=
name|part
operator|.
name|getBucketPath
argument_list|(
name|num
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|bucketCount
operator|>
name|den
operator|&&
name|bucketCount
operator|%
name|den
operator|==
literal|0
condition|)
block|{
name|int
name|numPathsInSample
init|=
name|bucketCount
operator|/
name|den
decl_stmt|;
name|Path
index|[]
name|ret
init|=
operator|new
name|Path
index|[
name|numPathsInSample
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPathsInSample
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|part
operator|.
name|getBucketPath
argument_list|(
name|i
operator|*
name|den
operator|+
name|num
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
elseif|else
if|if
condition|(
name|bucketCount
operator|<
name|den
operator|&&
name|den
operator|%
name|bucketCount
operator|==
literal|0
condition|)
block|{
name|Path
index|[]
name|ret
init|=
operator|new
name|Path
index|[
literal|1
index|]
decl_stmt|;
name|ret
index|[
literal|0
index|]
operator|=
name|part
operator|.
name|getBucketPath
argument_list|(
operator|(
name|num
operator|-
literal|1
operator|)
operator|%
name|bucketCount
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
else|else
block|{
comment|// need to do full scan
name|fullScanMsg
operator|=
literal|"Tablesample denominator "
operator|+
name|den
operator|+
literal|" is not multiple/divisor of bucket count "
operator|+
name|bucketCount
operator|+
literal|" of table "
operator|+
name|this
operator|.
name|tabAlias
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// need to do full scan
name|fullScanMsg
operator|=
literal|"Tablesample not on clustered columns"
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
name|fullScanMsg
operator|+
literal|", using full table scan"
argument_list|)
expr_stmt|;
name|Path
index|[]
name|ret
init|=
name|part
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

