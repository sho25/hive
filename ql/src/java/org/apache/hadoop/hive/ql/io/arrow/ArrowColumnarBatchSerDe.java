begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ArrowBuf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|memory
operator|.
name|BufferAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|FieldVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|VectorSchemaRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|impl
operator|.
name|UnionListWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|impl
operator|.
name|UnionReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|impl
operator|.
name|UnionWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|reader
operator|.
name|FieldReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|writer
operator|.
name|BaseWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|writer
operator|.
name|BigIntWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|writer
operator|.
name|BitWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|writer
operator|.
name|DateDayWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|writer
operator|.
name|DecimalWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|writer
operator|.
name|FieldWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|writer
operator|.
name|Float4Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|writer
operator|.
name|Float8Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|writer
operator|.
name|IntWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|writer
operator|.
name|IntervalDayWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|writer
operator|.
name|IntervalYearWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|writer
operator|.
name|SmallIntWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|writer
operator|.
name|TimeStampMilliWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|writer
operator|.
name|TinyIntWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|writer
operator|.
name|VarBinaryWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|writer
operator|.
name|VarCharWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|holders
operator|.
name|NullableBigIntHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|holders
operator|.
name|NullableBitHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|holders
operator|.
name|NullableDateDayHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|holders
operator|.
name|NullableFloat4Holder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|holders
operator|.
name|NullableFloat8Holder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|holders
operator|.
name|NullableIntHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|holders
operator|.
name|NullableIntervalDayHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|holders
operator|.
name|NullableIntervalYearHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|holders
operator|.
name|NullableSmallIntHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|holders
operator|.
name|NullableTimeStampMilliHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|holders
operator|.
name|NullableTinyIntHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|holders
operator|.
name|NullableVarBinaryHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|holders
operator|.
name|NullableVarCharHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|types
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|types
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|types
operator|.
name|pojo
operator|.
name|ArrowType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|types
operator|.
name|pojo
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|types
operator|.
name|pojo
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|types
operator|.
name|pojo
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|IntervalDayTimeColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ListColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|MapColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|StructColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|UnionColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorAssignRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExtractRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedBatchUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TimestampLocalTZTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|IntConsumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ARROW_BATCH_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedBatchUtil
operator|.
name|createColumnVector
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
import|;
end_import

begin_comment
comment|/**  * ArrowColumnarBatchSerDe converts Apache Hive rows to Apache Arrow columns. Its serialized  * class is {@link ArrowWrapperWritable}, which doesn't support {@link  * Writable#readFields(DataInput)} and {@link Writable#write(DataOutput)}.  *  * Followings are known issues of current implementation.  *  * A list column cannot have a decimal column. {@link UnionListWriter} doesn't have an  * implementation for {@link BaseWriter.ListWriter#decimal()}.  *  * A union column can have only one of string, char, varchar fields at a same time. Apache Arrow  * doesn't have string and char, so {@link ArrowColumnarBatchSerDe} uses varchar to simulate  * string and char. They will be considered as a same data type in  * {@link org.apache.arrow.vector.complex.UnionVector}.  *  * Timestamp with local timezone is not supported. {@link VectorAssignRow} doesn't support it.  */
end_comment

begin_class
specifier|public
class|class
name|ArrowColumnarBatchSerDe
extends|extends
name|AbstractSerDe
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ArrowColumnarBatchSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_ARROW_FIELD_NAME
init|=
literal|"[DEFAULT]"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MS_PER_SECOND
init|=
literal|1_000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MS_PER_MINUTE
init|=
name|MS_PER_SECOND
operator|*
literal|60
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MS_PER_HOUR
init|=
name|MS_PER_MINUTE
operator|*
literal|60
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MS_PER_DAY
init|=
name|MS_PER_HOUR
operator|*
literal|24
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NS_PER_MS
init|=
literal|1_000_000
decl_stmt|;
specifier|private
name|BufferAllocator
name|rootAllocator
decl_stmt|;
specifier|private
name|StructTypeInfo
name|rowTypeInfo
decl_stmt|;
specifier|private
name|StructObjectInspector
name|rowObjectInspector
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|Serializer
name|serializer
decl_stmt|;
specifier|private
name|Deserializer
name|deserializer
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|rootAllocator
operator|=
name|RootAllocatorFactory
operator|.
name|INSTANCE
operator|.
name|getRootAllocator
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|String
name|columnNameProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
decl_stmt|;
specifier|final
name|String
name|columnTypeProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
decl_stmt|;
specifier|final
name|String
name|columnNameDelimiter
init|=
name|tbl
operator|.
name|containsKey
argument_list|(
name|serdeConstants
operator|.
name|COLUMN_NAME_DELIMITER
argument_list|)
condition|?
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|COLUMN_NAME_DELIMITER
argument_list|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|SerDeUtils
operator|.
name|COMMA
argument_list|)
decl_stmt|;
comment|// Create an object inspector
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
decl_stmt|;
if|if
condition|(
name|columnNameProperty
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|columnNames
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|columnNames
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|columnNameProperty
operator|.
name|split
argument_list|(
name|columnNameDelimiter
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
decl_stmt|;
if|if
condition|(
name|columnTypeProperty
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|columnTypes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|columnTypes
operator|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
name|columnTypeProperty
argument_list|)
expr_stmt|;
block|}
name|rowTypeInfo
operator|=
operator|(
name|StructTypeInfo
operator|)
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
expr_stmt|;
name|rowObjectInspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|rowTypeInfo
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|columnNames
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|toField
argument_list|(
name|columnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|columnTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serializer
operator|=
operator|new
name|Serializer
argument_list|(
operator|new
name|Schema
argument_list|(
name|fields
argument_list|)
argument_list|)
expr_stmt|;
name|deserializer
operator|=
operator|new
name|Deserializer
argument_list|()
expr_stmt|;
block|}
specifier|private
class|class
name|Serializer
block|{
specifier|private
specifier|final
name|int
name|MAX_BUFFERED_ROWS
decl_stmt|;
comment|// Schema
specifier|private
specifier|final
name|StructTypeInfo
name|structTypeInfo
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
decl_stmt|;
specifier|private
specifier|final
name|int
name|fieldSize
decl_stmt|;
comment|// Hive columns
specifier|private
specifier|final
name|VectorizedRowBatch
name|vectorizedRowBatch
decl_stmt|;
specifier|private
specifier|final
name|VectorAssignRow
name|vectorAssignRow
decl_stmt|;
specifier|private
name|int
name|batchSize
decl_stmt|;
comment|// Arrow columns
specifier|private
specifier|final
name|VectorSchemaRoot
name|vectorSchemaRoot
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|FieldVector
argument_list|>
name|arrowVectors
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|FieldWriter
argument_list|>
name|fieldWriters
decl_stmt|;
specifier|private
name|Serializer
parameter_list|(
name|Schema
name|schema
parameter_list|)
throws|throws
name|SerDeException
block|{
name|MAX_BUFFERED_ROWS
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HIVE_ARROW_BATCH_SIZE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ArrowColumnarBatchSerDe max number of buffered columns: "
operator|+
name|MAX_BUFFERED_ROWS
argument_list|)
expr_stmt|;
comment|// Schema
name|structTypeInfo
operator|=
operator|(
name|StructTypeInfo
operator|)
name|getTypeInfoFromObjectInspector
argument_list|(
name|rowObjectInspector
argument_list|)
expr_stmt|;
name|fieldTypeInfos
operator|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
expr_stmt|;
name|fieldSize
operator|=
name|fieldTypeInfos
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// Init Arrow stuffs
name|vectorSchemaRoot
operator|=
name|VectorSchemaRoot
operator|.
name|create
argument_list|(
name|schema
argument_list|,
name|rootAllocator
argument_list|)
expr_stmt|;
name|arrowVectors
operator|=
name|vectorSchemaRoot
operator|.
name|getFieldVectors
argument_list|()
expr_stmt|;
name|fieldWriters
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|FieldVector
name|fieldVector
range|:
name|arrowVectors
control|)
block|{
specifier|final
name|FieldWriter
name|fieldWriter
init|=
name|Types
operator|.
name|getMinorTypeForArrowType
argument_list|(
name|fieldVector
operator|.
name|getField
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|getNewFieldWriter
argument_list|(
name|fieldVector
argument_list|)
decl_stmt|;
name|fieldWriters
operator|.
name|add
argument_list|(
name|fieldWriter
argument_list|)
expr_stmt|;
block|}
comment|// Init Hive stuffs
name|vectorizedRowBatch
operator|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|fieldSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldSize
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ColumnVector
name|columnVector
init|=
name|createColumnVector
argument_list|(
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|vectorizedRowBatch
operator|.
name|cols
index|[
name|i
index|]
operator|=
name|columnVector
expr_stmt|;
name|columnVector
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
name|vectorizedRowBatch
operator|.
name|ensureSize
argument_list|(
name|MAX_BUFFERED_ROWS
argument_list|)
expr_stmt|;
name|vectorAssignRow
operator|=
operator|new
name|VectorAssignRow
argument_list|()
expr_stmt|;
try|try
block|{
name|vectorAssignRow
operator|.
name|init
argument_list|(
name|rowObjectInspector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ArrowWrapperWritable
name|serializeBatch
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vectorizedRowBatch
operator|.
name|projectionSize
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|projectedColumn
init|=
name|vectorizedRowBatch
operator|.
name|projectedColumns
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|ColumnVector
name|hiveVector
init|=
name|vectorizedRowBatch
operator|.
name|cols
index|[
name|projectedColumn
index|]
decl_stmt|;
specifier|final
name|TypeInfo
name|fieldTypeInfo
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|FieldWriter
name|fieldWriter
init|=
name|fieldWriters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|FieldVector
name|arrowVector
init|=
name|arrowVectors
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|arrowVector
operator|.
name|setValueCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fieldWriter
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|fieldWriter
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|fieldTypeInfo
argument_list|,
literal|0
argument_list|,
name|batchSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|vectorizedRowBatch
operator|.
name|reset
argument_list|()
expr_stmt|;
name|vectorSchemaRoot
operator|.
name|setRowCount
argument_list|(
name|batchSize
argument_list|)
expr_stmt|;
name|batchSize
operator|=
literal|0
expr_stmt|;
return|return
operator|new
name|ArrowWrapperWritable
argument_list|(
name|vectorSchemaRoot
argument_list|)
return|;
block|}
specifier|private
name|BaseWriter
name|getWriter
parameter_list|(
name|FieldWriter
name|writer
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|,
name|String
name|name
parameter_list|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|writer
operator|.
name|bit
argument_list|(
name|name
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
name|writer
operator|.
name|tinyInt
argument_list|(
name|name
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
name|writer
operator|.
name|smallInt
argument_list|(
name|name
argument_list|)
return|;
case|case
name|INT
case|:
return|return
name|writer
operator|.
name|integer
argument_list|(
name|name
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|writer
operator|.
name|bigInt
argument_list|(
name|name
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|writer
operator|.
name|float4
argument_list|(
name|name
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|writer
operator|.
name|float8
argument_list|(
name|name
argument_list|)
return|;
case|case
name|STRING
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
return|return
name|writer
operator|.
name|varChar
argument_list|(
name|name
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
name|writer
operator|.
name|dateDay
argument_list|(
name|name
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|writer
operator|.
name|timeStampMilli
argument_list|(
name|name
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
name|writer
operator|.
name|varBinary
argument_list|(
name|name
argument_list|)
return|;
case|case
name|DECIMAL
case|:
specifier|final
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|int
name|scale
init|=
name|decimalTypeInfo
operator|.
name|scale
argument_list|()
decl_stmt|;
specifier|final
name|int
name|precision
init|=
name|decimalTypeInfo
operator|.
name|precision
argument_list|()
decl_stmt|;
return|return
name|writer
operator|.
name|decimal
argument_list|(
name|name
argument_list|,
name|scale
argument_list|,
name|precision
argument_list|)
return|;
case|case
name|INTERVAL_YEAR_MONTH
case|:
return|return
name|writer
operator|.
name|intervalYear
argument_list|(
name|name
argument_list|)
return|;
case|case
name|INTERVAL_DAY_TIME
case|:
return|return
name|writer
operator|.
name|intervalDay
argument_list|(
name|name
argument_list|)
return|;
case|case
name|TIMESTAMPLOCALTZ
case|:
comment|// VectorAssignRow doesn't support it
case|case
name|VOID
case|:
case|case
name|UNKNOWN
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
case|case
name|LIST
case|:
case|case
name|UNION
case|:
return|return
name|writer
operator|.
name|list
argument_list|(
name|name
argument_list|)
return|;
case|case
name|STRUCT
case|:
return|return
name|writer
operator|.
name|map
argument_list|(
name|name
argument_list|)
return|;
case|case
name|MAP
case|:
comment|// The caller will convert map to array<struct>
return|return
name|writer
operator|.
name|list
argument_list|(
name|name
argument_list|)
operator|.
name|map
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|BaseWriter
name|getWriter
parameter_list|(
name|FieldWriter
name|writer
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|writer
operator|.
name|bit
argument_list|()
return|;
case|case
name|BYTE
case|:
return|return
name|writer
operator|.
name|tinyInt
argument_list|()
return|;
case|case
name|SHORT
case|:
return|return
name|writer
operator|.
name|smallInt
argument_list|()
return|;
case|case
name|INT
case|:
return|return
name|writer
operator|.
name|integer
argument_list|()
return|;
case|case
name|LONG
case|:
return|return
name|writer
operator|.
name|bigInt
argument_list|()
return|;
case|case
name|FLOAT
case|:
return|return
name|writer
operator|.
name|float4
argument_list|()
return|;
case|case
name|DOUBLE
case|:
return|return
name|writer
operator|.
name|float8
argument_list|()
return|;
case|case
name|STRING
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
return|return
name|writer
operator|.
name|varChar
argument_list|()
return|;
case|case
name|DATE
case|:
return|return
name|writer
operator|.
name|dateDay
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|writer
operator|.
name|timeStampMilli
argument_list|()
return|;
case|case
name|BINARY
case|:
return|return
name|writer
operator|.
name|varBinary
argument_list|()
return|;
case|case
name|INTERVAL_YEAR_MONTH
case|:
return|return
name|writer
operator|.
name|intervalDay
argument_list|()
return|;
case|case
name|INTERVAL_DAY_TIME
case|:
return|return
name|writer
operator|.
name|intervalYear
argument_list|()
return|;
case|case
name|TIMESTAMPLOCALTZ
case|:
comment|// VectorAssignRow doesn't support it
case|case
name|DECIMAL
case|:
comment|// ListVector doesn't support it
case|case
name|VOID
case|:
case|case
name|UNKNOWN
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
case|case
name|LIST
case|:
case|case
name|UNION
case|:
return|return
name|writer
operator|.
name|list
argument_list|()
return|;
case|case
name|STRUCT
case|:
return|return
name|writer
operator|.
name|map
argument_list|()
return|;
case|case
name|MAP
case|:
comment|// The caller will convert map to array<struct>
return|return
name|writer
operator|.
name|list
argument_list|()
operator|.
name|map
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|void
name|write
parameter_list|(
name|BaseWriter
name|baseWriter
parameter_list|,
name|FieldVector
name|arrowVector
parameter_list|,
name|ColumnVector
name|hiveVector
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|boolean
name|incrementIndex
parameter_list|)
block|{
specifier|final
name|IntConsumer
name|writer
decl_stmt|;
switch|switch
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
specifier|final
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
name|primitiveCategory
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|writer
operator|=
name|index
lambda|->
operator|(
operator|(
name|BitWriter
operator|)
name|baseWriter
operator|)
operator|.
name|writeBit
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
argument_list|)
operator|.
name|vector
index|[
name|index
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|writer
operator|=
name|index
lambda|->
operator|(
operator|(
name|TinyIntWriter
operator|)
name|baseWriter
operator|)
operator|.
name|writeTinyInt
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
argument_list|)
operator|.
name|vector
index|[
name|index
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|writer
operator|=
name|index
lambda|->
operator|(
operator|(
name|SmallIntWriter
operator|)
name|baseWriter
operator|)
operator|.
name|writeSmallInt
argument_list|(
call|(
name|short
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
argument_list|)
operator|.
name|vector
index|[
name|index
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|writer
operator|=
name|index
lambda|->
operator|(
operator|(
name|IntWriter
operator|)
name|baseWriter
operator|)
operator|.
name|writeInt
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
argument_list|)
operator|.
name|vector
index|[
name|index
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|writer
operator|=
name|index
lambda|->
operator|(
operator|(
name|BigIntWriter
operator|)
name|baseWriter
operator|)
operator|.
name|writeBigInt
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|vector
index|[
name|index
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|writer
operator|=
name|index
lambda|->
operator|(
operator|(
name|Float4Writer
operator|)
name|baseWriter
operator|)
operator|.
name|writeFloat4
argument_list|(
call|(
name|float
call|)
argument_list|(
operator|(
name|DoubleColumnVector
operator|)
name|hiveVector
argument_list|)
operator|.
name|vector
index|[
name|index
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|writer
operator|=
name|index
lambda|->
operator|(
operator|(
name|Float8Writer
operator|)
name|baseWriter
operator|)
operator|.
name|writeFloat8
argument_list|(
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|vector
index|[
name|index
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
name|writer
operator|=
name|index
lambda|->
block|{
name|BytesColumnVector
name|stringVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|hiveVector
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|stringVector
operator|.
name|vector
index|[
name|index
index|]
decl_stmt|;
name|int
name|start
init|=
name|stringVector
operator|.
name|start
index|[
name|index
index|]
decl_stmt|;
name|int
name|bytesLength
init|=
name|stringVector
operator|.
name|length
index|[
name|index
index|]
decl_stmt|;
try|try
init|(
name|ArrowBuf
name|arrowBuf
init|=
name|rootAllocator
operator|.
name|buffer
argument_list|(
name|bytesLength
argument_list|)
init|)
block|{
name|arrowBuf
operator|.
name|setBytes
argument_list|(
literal|0
argument_list|,
name|bytes
argument_list|,
name|start
argument_list|,
name|bytesLength
argument_list|)
expr_stmt|;
operator|(
operator|(
name|VarCharWriter
operator|)
name|baseWriter
operator|)
operator|.
name|writeVarChar
argument_list|(
literal|0
argument_list|,
name|bytesLength
argument_list|,
name|arrowBuf
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|writer
operator|=
name|index
lambda|->
operator|(
operator|(
name|DateDayWriter
operator|)
name|baseWriter
operator|)
operator|.
name|writeDateDay
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
argument_list|)
operator|.
name|vector
index|[
name|index
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|writer
operator|=
name|index
lambda|->
operator|(
operator|(
name|TimeStampMilliWriter
operator|)
name|baseWriter
operator|)
operator|.
name|writeTimeStampMilli
argument_list|(
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|getTime
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
name|writer
operator|=
name|index
lambda|->
block|{
name|BytesColumnVector
name|binaryVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|hiveVector
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|binaryVector
operator|.
name|vector
index|[
name|index
index|]
decl_stmt|;
specifier|final
name|int
name|start
init|=
name|binaryVector
operator|.
name|start
index|[
name|index
index|]
decl_stmt|;
specifier|final
name|int
name|byteLength
init|=
name|binaryVector
operator|.
name|length
index|[
name|index
index|]
decl_stmt|;
try|try
init|(
name|ArrowBuf
name|arrowBuf
init|=
name|rootAllocator
operator|.
name|buffer
argument_list|(
name|byteLength
argument_list|)
init|)
block|{
name|arrowBuf
operator|.
name|setBytes
argument_list|(
literal|0
argument_list|,
name|bytes
argument_list|,
name|start
argument_list|,
name|byteLength
argument_list|)
expr_stmt|;
operator|(
operator|(
name|VarBinaryWriter
operator|)
name|baseWriter
operator|)
operator|.
name|writeVarBinary
argument_list|(
literal|0
argument_list|,
name|byteLength
argument_list|,
name|arrowBuf
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|writer
operator|=
name|index
lambda|->
block|{
name|DecimalColumnVector
name|hiveDecimalVector
init|=
operator|(
name|DecimalColumnVector
operator|)
name|hiveVector
decl_stmt|;
operator|(
operator|(
name|DecimalWriter
operator|)
name|baseWriter
operator|)
operator|.
name|writeDecimal
argument_list|(
name|hiveDecimalVector
operator|.
name|vector
index|[
name|index
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|bigDecimalValue
argument_list|()
operator|.
name|setScale
argument_list|(
name|hiveDecimalVector
operator|.
name|scale
argument_list|)
argument_list|)
expr_stmt|;
block|}
expr_stmt|;
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
name|writer
operator|=
name|index
lambda|->
operator|(
operator|(
name|IntervalYearWriter
operator|)
name|baseWriter
operator|)
operator|.
name|writeIntervalYear
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
argument_list|)
operator|.
name|vector
index|[
name|index
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
name|writer
operator|=
name|index
lambda|->
block|{
name|IntervalDayTimeColumnVector
name|intervalDayTimeVector
init|=
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|hiveVector
decl_stmt|;
specifier|final
name|long
name|millis
init|=
operator|(
name|intervalDayTimeVector
operator|.
name|getTotalSeconds
argument_list|(
name|index
argument_list|)
operator|*
literal|1_000
operator|)
operator|+
operator|(
name|intervalDayTimeVector
operator|.
name|getNanos
argument_list|(
name|index
argument_list|)
operator|/
literal|1_000_000
operator|)
decl_stmt|;
specifier|final
name|int
name|days
init|=
call|(
name|int
call|)
argument_list|(
name|millis
operator|/
name|MS_PER_DAY
argument_list|)
decl_stmt|;
operator|(
operator|(
name|IntervalDayWriter
operator|)
name|baseWriter
operator|)
operator|.
name|writeIntervalDay
argument_list|(
name|days
argument_list|,
call|(
name|int
call|)
argument_list|(
name|millis
operator|%
name|MS_PER_DAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
expr_stmt|;
break|break;
case|case
name|VOID
case|:
case|case
name|UNKNOWN
case|:
case|case
name|TIMESTAMPLOCALTZ
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
break|break;
case|case
name|LIST
case|:
specifier|final
name|ListTypeInfo
name|listTypeInfo
init|=
operator|(
name|ListTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|TypeInfo
name|elementTypeInfo
init|=
name|listTypeInfo
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
specifier|final
name|ListColumnVector
name|hiveListVector
init|=
operator|(
name|ListColumnVector
operator|)
name|hiveVector
decl_stmt|;
specifier|final
name|ColumnVector
name|hiveElementVector
init|=
name|hiveListVector
operator|.
name|child
decl_stmt|;
specifier|final
name|FieldVector
name|arrowElementVector
init|=
name|arrowVector
operator|.
name|getChildrenFromFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|BaseWriter
operator|.
name|ListWriter
name|listWriter
init|=
operator|(
name|BaseWriter
operator|.
name|ListWriter
operator|)
name|baseWriter
decl_stmt|;
specifier|final
name|BaseWriter
name|elementWriter
init|=
name|getWriter
argument_list|(
operator|(
name|FieldWriter
operator|)
name|baseWriter
argument_list|,
name|elementTypeInfo
argument_list|)
decl_stmt|;
name|writer
operator|=
name|index
lambda|->
block|{
specifier|final
name|int
name|listOffset
init|=
operator|(
name|int
operator|)
name|hiveListVector
operator|.
name|offsets
index|[
name|index
index|]
decl_stmt|;
specifier|final
name|int
name|listLength
init|=
operator|(
name|int
operator|)
name|hiveListVector
operator|.
name|lengths
index|[
name|index
index|]
decl_stmt|;
name|listWriter
operator|.
name|startList
argument_list|()
expr_stmt|;
name|write
argument_list|(
name|elementWriter
argument_list|,
name|arrowElementVector
argument_list|,
name|hiveElementVector
argument_list|,
name|elementTypeInfo
argument_list|,
name|listOffset
argument_list|,
name|listLength
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|listWriter
operator|.
name|endList
argument_list|()
expr_stmt|;
block|}
expr_stmt|;
name|incrementIndex
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
specifier|final
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|StructColumnVector
name|hiveStructVector
init|=
operator|(
name|StructColumnVector
operator|)
name|hiveVector
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FieldVector
argument_list|>
name|arrowFieldVectors
init|=
name|arrowVector
operator|.
name|getChildrenFromFields
argument_list|()
decl_stmt|;
specifier|final
name|ColumnVector
index|[]
name|hiveFieldVectors
init|=
name|hiveStructVector
operator|.
name|fields
decl_stmt|;
specifier|final
name|BaseWriter
operator|.
name|MapWriter
name|structWriter
init|=
operator|(
name|BaseWriter
operator|.
name|MapWriter
operator|)
name|baseWriter
decl_stmt|;
specifier|final
name|int
name|fieldSize
init|=
name|fieldTypeInfos
operator|.
name|size
argument_list|()
decl_stmt|;
name|writer
operator|=
name|index
lambda|->
block|{
name|structWriter
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|fieldIndex
init|=
literal|0
init|;
name|fieldIndex
operator|<
name|fieldSize
condition|;
name|fieldIndex
operator|++
control|)
block|{
specifier|final
name|TypeInfo
name|fieldTypeInfo
init|=
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldNames
argument_list|()
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
decl_stmt|;
specifier|final
name|ColumnVector
name|hiveFieldVector
init|=
name|hiveFieldVectors
index|[
name|fieldIndex
index|]
decl_stmt|;
specifier|final
name|BaseWriter
name|fieldWriter
init|=
name|getWriter
argument_list|(
operator|(
name|FieldWriter
operator|)
name|structWriter
argument_list|,
name|fieldTypeInfo
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
specifier|final
name|FieldVector
name|arrowFieldVector
init|=
name|arrowFieldVectors
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|fieldWriter
argument_list|,
name|arrowFieldVector
argument_list|,
name|hiveFieldVector
argument_list|,
name|fieldTypeInfo
argument_list|,
name|index
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|structWriter
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
expr_stmt|;
name|incrementIndex
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|UNION
case|:
specifier|final
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|(
name|UnionTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|objectTypeInfos
init|=
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|UnionColumnVector
name|hiveUnionVector
init|=
operator|(
name|UnionColumnVector
operator|)
name|hiveVector
decl_stmt|;
specifier|final
name|ColumnVector
index|[]
name|hiveObjectVectors
init|=
name|hiveUnionVector
operator|.
name|fields
decl_stmt|;
specifier|final
name|UnionWriter
name|unionWriter
init|=
operator|(
name|UnionWriter
operator|)
name|baseWriter
decl_stmt|;
name|writer
operator|=
name|index
lambda|->
block|{
specifier|final
name|int
name|tag
init|=
name|hiveUnionVector
operator|.
name|tags
index|[
name|index
index|]
decl_stmt|;
specifier|final
name|ColumnVector
name|hiveObjectVector
init|=
name|hiveObjectVectors
index|[
name|tag
index|]
decl_stmt|;
specifier|final
name|TypeInfo
name|objectTypeInfo
init|=
name|objectTypeInfos
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|unionWriter
argument_list|,
name|arrowVector
argument_list|,
name|hiveObjectVector
argument_list|,
name|objectTypeInfo
argument_list|,
name|index
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
expr_stmt|;
break|break;
case|case
name|MAP
case|:
specifier|final
name|ListTypeInfo
name|structListTypeInfo
init|=
name|toStructListTypeInfo
argument_list|(
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
argument_list|)
decl_stmt|;
specifier|final
name|ListColumnVector
name|structListVector
init|=
name|toStructListVector
argument_list|(
operator|(
name|MapColumnVector
operator|)
name|hiveVector
argument_list|)
decl_stmt|;
name|writer
operator|=
name|index
lambda|->
name|write
argument_list|(
name|baseWriter
argument_list|,
name|arrowVector
argument_list|,
name|structListVector
argument_list|,
name|structListTypeInfo
argument_list|,
name|index
argument_list|,
name|length
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|incrementIndex
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
if|if
condition|(
name|hiveVector
operator|.
name|noNulls
condition|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|accept
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|incrementIndex
condition|)
block|{
name|baseWriter
operator|.
name|setPosition
argument_list|(
name|baseWriter
operator|.
name|getPosition
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|vectorizedRowBatch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|length
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|i
init|=
name|vectorizedRowBatch
operator|.
name|selected
index|[
name|j
index|]
decl_stmt|;
name|writer
operator|.
name|accept
argument_list|(
name|offset
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|incrementIndex
condition|)
block|{
name|baseWriter
operator|.
name|setPosition
argument_list|(
name|baseWriter
operator|.
name|getPosition
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|accept
argument_list|(
name|offset
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|incrementIndex
condition|)
block|{
name|baseWriter
operator|.
name|setPosition
argument_list|(
name|baseWriter
operator|.
name|getPosition
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|writeNull
argument_list|(
name|baseWriter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|accept
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incrementIndex
condition|)
block|{
name|baseWriter
operator|.
name|setPosition
argument_list|(
name|baseWriter
operator|.
name|getPosition
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|vectorizedRowBatch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|length
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|i
init|=
name|vectorizedRowBatch
operator|.
name|selected
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|offset
operator|+
name|i
index|]
condition|)
block|{
name|writeNull
argument_list|(
name|baseWriter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|accept
argument_list|(
name|offset
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incrementIndex
condition|)
block|{
name|baseWriter
operator|.
name|setPosition
argument_list|(
name|baseWriter
operator|.
name|getPosition
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|offset
operator|+
name|i
index|]
condition|)
block|{
name|writeNull
argument_list|(
name|baseWriter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|accept
argument_list|(
name|offset
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incrementIndex
condition|)
block|{
name|baseWriter
operator|.
name|setPosition
argument_list|(
name|baseWriter
operator|.
name|getPosition
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|public
name|ArrowWrapperWritable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
block|{
comment|// if row is null, it means there are no more rows (closeOp()).
comment|// another case can be that the buffer is full.
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
name|serializeBatch
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|standardObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|standardObjects
argument_list|,
name|obj
argument_list|,
operator|(
operator|(
name|StructObjectInspector
operator|)
name|objInspector
operator|)
argument_list|,
name|WRITABLE
argument_list|)
expr_stmt|;
name|vectorAssignRow
operator|.
name|assignRow
argument_list|(
name|vectorizedRowBatch
argument_list|,
name|batchSize
argument_list|,
name|standardObjects
argument_list|,
name|fieldSize
argument_list|)
expr_stmt|;
name|batchSize
operator|++
expr_stmt|;
if|if
condition|(
name|batchSize
operator|==
name|MAX_BUFFERED_ROWS
condition|)
block|{
return|return
name|serializeBatch
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeNull
parameter_list|(
name|BaseWriter
name|baseWriter
parameter_list|)
block|{
if|if
condition|(
name|baseWriter
operator|instanceof
name|UnionListWriter
condition|)
block|{
comment|// UnionListWriter should implement AbstractFieldWriter#writeNull
name|BaseWriter
operator|.
name|ListWriter
name|listWriter
init|=
operator|(
operator|(
name|UnionListWriter
operator|)
name|baseWriter
operator|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|listWriter
operator|.
name|setPosition
argument_list|(
name|listWriter
operator|.
name|getPosition
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// FieldWriter should have a super method of AbstractFieldWriter#writeNull
try|try
block|{
name|Method
name|method
init|=
name|baseWriter
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"writeNull"
argument_list|)
decl_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|baseWriter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|abstract
class|class
name|PrimitiveReader
block|{
specifier|final
name|void
name|read
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|rowIndex
init|=
name|offset
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|isSet
argument_list|()
condition|)
block|{
name|doRead
argument_list|(
name|reader
argument_list|,
name|columnVector
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|columnVector
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|setPosition
argument_list|(
name|reader
operator|.
name|getPosition
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|abstract
name|void
name|doRead
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|rowIndex
parameter_list|)
function_decl|;
block|}
specifier|private
class|class
name|Deserializer
block|{
specifier|private
specifier|final
name|VectorExtractRow
name|vectorExtractRow
decl_stmt|;
specifier|private
specifier|final
name|VectorizedRowBatch
name|vectorizedRowBatch
decl_stmt|;
specifier|private
name|Object
index|[]
index|[]
name|rows
decl_stmt|;
specifier|public
name|Deserializer
parameter_list|()
throws|throws
name|SerDeException
block|{
name|vectorExtractRow
operator|=
operator|new
name|VectorExtractRow
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfoList
init|=
name|rowTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|fieldTypeInfoList
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|TypeInfo
index|[]
name|typeInfos
init|=
name|fieldTypeInfoList
operator|.
name|toArray
argument_list|(
operator|new
name|TypeInfo
index|[
name|fieldCount
index|]
argument_list|)
decl_stmt|;
try|try
block|{
name|vectorExtractRow
operator|.
name|init
argument_list|(
name|typeInfos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|vectorizedRowBatch
operator|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ColumnVector
name|columnVector
init|=
name|createColumnVector
argument_list|(
name|typeInfos
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|columnVector
operator|.
name|init
argument_list|()
expr_stmt|;
name|vectorizedRowBatch
operator|.
name|cols
index|[
name|i
index|]
operator|=
name|columnVector
expr_stmt|;
block|}
block|}
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|writable
parameter_list|)
block|{
specifier|final
name|ArrowWrapperWritable
name|arrowWrapperWritable
init|=
operator|(
name|ArrowWrapperWritable
operator|)
name|writable
decl_stmt|;
specifier|final
name|VectorSchemaRoot
name|vectorSchemaRoot
init|=
name|arrowWrapperWritable
operator|.
name|getVectorSchemaRoot
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FieldVector
argument_list|>
name|fieldVectors
init|=
name|vectorSchemaRoot
operator|.
name|getFieldVectors
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|fieldVectors
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|int
name|rowCount
init|=
name|vectorSchemaRoot
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
name|vectorizedRowBatch
operator|.
name|ensureSize
argument_list|(
name|rowCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|rows
operator|==
literal|null
operator|||
name|rows
operator|.
name|length
operator|<
name|rowCount
condition|)
block|{
name|rows
operator|=
operator|new
name|Object
index|[
name|rowCount
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|rowIndex
init|=
literal|0
init|;
name|rowIndex
operator|<
name|rowCount
condition|;
name|rowIndex
operator|++
control|)
block|{
name|rows
index|[
name|rowIndex
index|]
operator|=
operator|new
name|Object
index|[
name|fieldCount
index|]
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|FieldVector
name|fieldVector
init|=
name|fieldVectors
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|FieldReader
name|fieldReader
init|=
name|fieldVector
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|fieldReader
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|int
name|projectedCol
init|=
name|vectorizedRowBatch
operator|.
name|projectedColumns
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|ColumnVector
name|columnVector
init|=
name|vectorizedRowBatch
operator|.
name|cols
index|[
name|projectedCol
index|]
decl_stmt|;
specifier|final
name|TypeInfo
name|typeInfo
init|=
name|rowTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|read
argument_list|(
name|fieldReader
argument_list|,
name|columnVector
argument_list|,
name|typeInfo
argument_list|,
literal|0
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|rowIndex
init|=
literal|0
init|;
name|rowIndex
operator|<
name|rowCount
condition|;
name|rowIndex
operator|++
control|)
block|{
name|vectorExtractRow
operator|.
name|extractRow
argument_list|(
name|vectorizedRowBatch
argument_list|,
name|rowIndex
argument_list|,
name|rows
index|[
name|rowIndex
index|]
argument_list|)
expr_stmt|;
block|}
name|vectorizedRowBatch
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|rows
return|;
block|}
specifier|private
name|void
name|read
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|,
name|int
name|rowOffset
parameter_list|,
name|int
name|rowLength
parameter_list|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
specifier|final
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
name|primitiveCategory
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
specifier|final
name|PrimitiveReader
name|primitiveReader
decl_stmt|;
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|primitiveReader
operator|=
operator|new
name|PrimitiveReader
argument_list|()
block|{
name|NullableBitHolder
name|holder
init|=
operator|new
name|NullableBitHolder
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|void
name|doRead
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
name|reader
operator|.
name|read
argument_list|(
name|holder
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|holder
operator|.
name|value
expr_stmt|;
block|}
block|}
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|primitiveReader
operator|=
operator|new
name|PrimitiveReader
argument_list|()
block|{
name|NullableTinyIntHolder
name|holder
init|=
operator|new
name|NullableTinyIntHolder
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|void
name|doRead
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
name|reader
operator|.
name|read
argument_list|(
name|holder
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|holder
operator|.
name|value
expr_stmt|;
block|}
block|}
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|primitiveReader
operator|=
operator|new
name|PrimitiveReader
argument_list|()
block|{
name|NullableSmallIntHolder
name|holder
init|=
operator|new
name|NullableSmallIntHolder
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|void
name|doRead
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
name|reader
operator|.
name|read
argument_list|(
name|holder
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|holder
operator|.
name|value
expr_stmt|;
block|}
block|}
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|primitiveReader
operator|=
operator|new
name|PrimitiveReader
argument_list|()
block|{
name|NullableIntHolder
name|holder
init|=
operator|new
name|NullableIntHolder
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|void
name|doRead
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
name|reader
operator|.
name|read
argument_list|(
name|holder
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|holder
operator|.
name|value
expr_stmt|;
block|}
block|}
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|primitiveReader
operator|=
operator|new
name|PrimitiveReader
argument_list|()
block|{
name|NullableBigIntHolder
name|holder
init|=
operator|new
name|NullableBigIntHolder
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|void
name|doRead
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
name|reader
operator|.
name|read
argument_list|(
name|holder
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|holder
operator|.
name|value
expr_stmt|;
block|}
block|}
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|primitiveReader
operator|=
operator|new
name|PrimitiveReader
argument_list|()
block|{
name|NullableFloat4Holder
name|holder
init|=
operator|new
name|NullableFloat4Holder
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|void
name|doRead
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
name|reader
operator|.
name|read
argument_list|(
name|holder
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|holder
operator|.
name|value
expr_stmt|;
block|}
block|}
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|primitiveReader
operator|=
operator|new
name|PrimitiveReader
argument_list|()
block|{
name|NullableFloat8Holder
name|holder
init|=
operator|new
name|NullableFloat8Holder
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|void
name|doRead
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
name|reader
operator|.
name|read
argument_list|(
name|holder
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|holder
operator|.
name|value
expr_stmt|;
block|}
block|}
expr_stmt|;
break|break;
case|case
name|STRING
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
name|primitiveReader
operator|=
operator|new
name|PrimitiveReader
argument_list|()
block|{
name|NullableVarCharHolder
name|holder
init|=
operator|new
name|NullableVarCharHolder
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|void
name|doRead
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
name|reader
operator|.
name|read
argument_list|(
name|holder
argument_list|)
expr_stmt|;
name|int
name|varCharSize
init|=
name|holder
operator|.
name|end
operator|-
name|holder
operator|.
name|start
decl_stmt|;
name|byte
index|[]
name|varCharBytes
init|=
operator|new
name|byte
index|[
name|varCharSize
index|]
decl_stmt|;
name|holder
operator|.
name|buffer
operator|.
name|getBytes
argument_list|(
name|holder
operator|.
name|start
argument_list|,
name|varCharBytes
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|setVal
argument_list|(
name|rowIndex
argument_list|,
name|varCharBytes
argument_list|,
literal|0
argument_list|,
name|varCharSize
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|primitiveReader
operator|=
operator|new
name|PrimitiveReader
argument_list|()
block|{
name|NullableDateDayHolder
name|holder
init|=
operator|new
name|NullableDateDayHolder
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|void
name|doRead
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
name|reader
operator|.
name|read
argument_list|(
name|holder
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|holder
operator|.
name|value
expr_stmt|;
block|}
block|}
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|primitiveReader
operator|=
operator|new
name|PrimitiveReader
argument_list|()
block|{
name|NullableTimeStampMilliHolder
name|timeStampMilliHolder
init|=
operator|new
name|NullableTimeStampMilliHolder
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|void
name|doRead
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
name|reader
operator|.
name|read
argument_list|(
name|timeStampMilliHolder
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|set
argument_list|(
name|rowIndex
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|timeStampMilliHolder
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
name|primitiveReader
operator|=
operator|new
name|PrimitiveReader
argument_list|()
block|{
name|NullableVarBinaryHolder
name|holder
init|=
operator|new
name|NullableVarBinaryHolder
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|void
name|doRead
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
name|reader
operator|.
name|read
argument_list|(
name|holder
argument_list|)
expr_stmt|;
specifier|final
name|int
name|binarySize
init|=
name|holder
operator|.
name|end
operator|-
name|holder
operator|.
name|start
decl_stmt|;
specifier|final
name|byte
index|[]
name|binaryBytes
init|=
operator|new
name|byte
index|[
name|binarySize
index|]
decl_stmt|;
name|holder
operator|.
name|buffer
operator|.
name|getBytes
argument_list|(
name|holder
operator|.
name|start
argument_list|,
name|binaryBytes
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|setVal
argument_list|(
name|rowIndex
argument_list|,
name|binaryBytes
argument_list|,
literal|0
argument_list|,
name|binarySize
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|primitiveReader
operator|=
operator|new
name|PrimitiveReader
argument_list|()
block|{
annotation|@
name|Override
name|void
name|doRead
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|set
argument_list|(
name|rowIndex
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
name|reader
operator|.
name|readBigDecimal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
name|primitiveReader
operator|=
operator|new
name|PrimitiveReader
argument_list|()
block|{
name|NullableIntervalYearHolder
name|holder
init|=
operator|new
name|NullableIntervalYearHolder
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|void
name|doRead
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
name|reader
operator|.
name|read
argument_list|(
name|holder
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|holder
operator|.
name|value
expr_stmt|;
block|}
block|}
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
name|primitiveReader
operator|=
operator|new
name|PrimitiveReader
argument_list|()
block|{
name|NullableIntervalDayHolder
name|holder
init|=
operator|new
name|NullableIntervalDayHolder
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|void
name|doRead
parameter_list|(
name|FieldReader
name|reader
parameter_list|,
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
name|IntervalDayTimeColumnVector
name|intervalDayTimeVector
init|=
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|columnVector
decl_stmt|;
name|reader
operator|.
name|read
argument_list|(
name|holder
argument_list|)
expr_stmt|;
name|HiveIntervalDayTime
name|intervalDayTime
init|=
operator|new
name|HiveIntervalDayTime
argument_list|(
name|holder
operator|.
name|days
argument_list|,
comment|// days
name|holder
operator|.
name|milliseconds
operator|/
name|MS_PER_HOUR
argument_list|,
comment|// hour
operator|(
name|holder
operator|.
name|milliseconds
operator|%
name|MS_PER_HOUR
operator|)
operator|/
name|MS_PER_MINUTE
argument_list|,
comment|// minute
operator|(
name|holder
operator|.
name|milliseconds
operator|%
name|MS_PER_MINUTE
operator|)
operator|/
name|MS_PER_SECOND
argument_list|,
comment|// second
operator|(
name|holder
operator|.
name|milliseconds
operator|%
name|MS_PER_SECOND
operator|)
operator|*
name|NS_PER_MS
argument_list|)
decl_stmt|;
comment|// nanosecond
name|intervalDayTimeVector
operator|.
name|set
argument_list|(
name|rowIndex
argument_list|,
name|intervalDayTime
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|primitiveReader
operator|.
name|read
argument_list|(
name|reader
argument_list|,
name|columnVector
argument_list|,
name|rowOffset
argument_list|,
name|rowLength
argument_list|)
expr_stmt|;
break|break;
case|case
name|LIST
case|:
specifier|final
name|ListTypeInfo
name|listTypeInfo
init|=
operator|(
name|ListTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|TypeInfo
name|elementTypeInfo
init|=
name|listTypeInfo
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
specifier|final
name|ListColumnVector
name|listVector
init|=
operator|(
name|ListColumnVector
operator|)
name|columnVector
decl_stmt|;
specifier|final
name|ColumnVector
name|elementVector
init|=
name|listVector
operator|.
name|child
decl_stmt|;
specifier|final
name|FieldReader
name|elementReader
init|=
name|reader
operator|.
name|reader
argument_list|()
decl_stmt|;
name|int
name|listOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|rowIndex
init|=
literal|0
init|;
name|rowIndex
operator|<
name|rowLength
condition|;
name|rowIndex
operator|++
control|)
block|{
specifier|final
name|int
name|adjustedRowIndex
init|=
name|rowOffset
operator|+
name|rowIndex
decl_stmt|;
name|reader
operator|.
name|setPosition
argument_list|(
name|adjustedRowIndex
argument_list|)
expr_stmt|;
specifier|final
name|int
name|listLength
init|=
name|reader
operator|.
name|size
argument_list|()
decl_stmt|;
name|listVector
operator|.
name|offsets
index|[
name|adjustedRowIndex
index|]
operator|=
name|listOffset
expr_stmt|;
name|listVector
operator|.
name|lengths
index|[
name|adjustedRowIndex
index|]
operator|=
name|listLength
expr_stmt|;
name|read
argument_list|(
name|elementReader
argument_list|,
name|elementVector
argument_list|,
name|elementTypeInfo
argument_list|,
name|listOffset
argument_list|,
name|listLength
argument_list|)
expr_stmt|;
name|listOffset
operator|+=
name|listLength
expr_stmt|;
block|}
break|break;
case|case
name|STRUCT
case|:
specifier|final
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldNames
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldSize
init|=
name|fieldNames
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|StructColumnVector
name|structVector
init|=
operator|(
name|StructColumnVector
operator|)
name|columnVector
decl_stmt|;
specifier|final
name|ColumnVector
index|[]
name|fieldVectors
init|=
name|structVector
operator|.
name|fields
decl_stmt|;
for|for
control|(
name|int
name|fieldIndex
init|=
literal|0
init|;
name|fieldIndex
operator|<
name|fieldSize
condition|;
name|fieldIndex
operator|++
control|)
block|{
specifier|final
name|TypeInfo
name|fieldTypeInfo
init|=
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
decl_stmt|;
specifier|final
name|FieldReader
name|fieldReader
init|=
name|reader
operator|.
name|reader
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ColumnVector
name|fieldVector
init|=
name|fieldVectors
index|[
name|fieldIndex
index|]
decl_stmt|;
name|read
argument_list|(
name|fieldReader
argument_list|,
name|fieldVector
argument_list|,
name|fieldTypeInfo
argument_list|,
name|rowOffset
argument_list|,
name|rowLength
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|UNION
case|:
specifier|final
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|(
name|UnionTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|objectTypeInfos
init|=
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|UnionColumnVector
name|unionVector
init|=
operator|(
name|UnionColumnVector
operator|)
name|columnVector
decl_stmt|;
specifier|final
name|ColumnVector
index|[]
name|objectVectors
init|=
name|unionVector
operator|.
name|fields
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Types
operator|.
name|MinorType
argument_list|,
name|Integer
argument_list|>
name|minorTypeToTagMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|tag
init|=
literal|0
init|;
name|tag
operator|<
name|objectTypeInfos
operator|.
name|size
argument_list|()
condition|;
name|tag
operator|++
control|)
block|{
name|minorTypeToTagMap
operator|.
name|put
argument_list|(
name|toMinorType
argument_list|(
name|objectTypeInfos
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|)
argument_list|,
name|tag
argument_list|)
expr_stmt|;
block|}
specifier|final
name|UnionReader
name|unionReader
init|=
operator|(
name|UnionReader
operator|)
name|reader
decl_stmt|;
for|for
control|(
name|int
name|rowIndex
init|=
literal|0
init|;
name|rowIndex
operator|<
name|rowLength
condition|;
name|rowIndex
operator|++
control|)
block|{
specifier|final
name|int
name|adjustedRowIndex
init|=
name|rowIndex
operator|+
name|rowOffset
decl_stmt|;
name|unionReader
operator|.
name|setPosition
argument_list|(
name|adjustedRowIndex
argument_list|)
expr_stmt|;
specifier|final
name|Types
operator|.
name|MinorType
name|minorType
init|=
name|unionReader
operator|.
name|getMinorType
argument_list|()
decl_stmt|;
specifier|final
name|int
name|tag
init|=
name|minorTypeToTagMap
operator|.
name|get
argument_list|(
name|minorType
argument_list|)
decl_stmt|;
name|unionVector
operator|.
name|tags
index|[
name|adjustedRowIndex
index|]
operator|=
name|tag
expr_stmt|;
name|read
argument_list|(
name|unionReader
argument_list|,
name|objectVectors
index|[
name|tag
index|]
argument_list|,
name|objectTypeInfos
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|,
name|adjustedRowIndex
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAP
case|:
specifier|final
name|MapTypeInfo
name|mapTypeInfo
init|=
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|ListTypeInfo
name|mapStructListTypeInfo
init|=
name|toStructListTypeInfo
argument_list|(
name|mapTypeInfo
argument_list|)
decl_stmt|;
specifier|final
name|MapColumnVector
name|hiveMapVector
init|=
operator|(
name|MapColumnVector
operator|)
name|columnVector
decl_stmt|;
specifier|final
name|ListColumnVector
name|mapStructListVector
init|=
name|toStructListVector
argument_list|(
name|hiveMapVector
argument_list|)
decl_stmt|;
specifier|final
name|StructColumnVector
name|mapStructVector
init|=
operator|(
name|StructColumnVector
operator|)
name|mapStructListVector
operator|.
name|child
decl_stmt|;
name|read
argument_list|(
name|reader
argument_list|,
name|mapStructListVector
argument_list|,
name|mapStructListTypeInfo
argument_list|,
name|rowOffset
argument_list|,
name|rowLength
argument_list|)
expr_stmt|;
name|hiveMapVector
operator|.
name|isRepeating
operator|=
name|mapStructListVector
operator|.
name|isRepeating
expr_stmt|;
name|hiveMapVector
operator|.
name|childCount
operator|=
name|mapStructListVector
operator|.
name|childCount
expr_stmt|;
name|hiveMapVector
operator|.
name|noNulls
operator|=
name|mapStructListVector
operator|.
name|noNulls
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|mapStructListVector
operator|.
name|offsets
argument_list|,
literal|0
argument_list|,
name|hiveMapVector
operator|.
name|offsets
argument_list|,
literal|0
argument_list|,
name|rowLength
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|mapStructListVector
operator|.
name|lengths
argument_list|,
literal|0
argument_list|,
name|hiveMapVector
operator|.
name|lengths
argument_list|,
literal|0
argument_list|,
name|rowLength
argument_list|)
expr_stmt|;
name|hiveMapVector
operator|.
name|keys
operator|=
name|mapStructVector
operator|.
name|fields
index|[
literal|0
index|]
expr_stmt|;
name|hiveMapVector
operator|.
name|values
operator|=
name|mapStructVector
operator|.
name|fields
index|[
literal|1
index|]
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Types
operator|.
name|MinorType
name|toMinorType
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|BIT
return|;
case|case
name|BYTE
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|TINYINT
return|;
case|case
name|SHORT
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|SMALLINT
return|;
case|case
name|INT
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|INT
return|;
case|case
name|LONG
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|BIGINT
return|;
case|case
name|FLOAT
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|FLOAT4
return|;
case|case
name|DOUBLE
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|FLOAT8
return|;
case|case
name|STRING
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|VARCHAR
return|;
case|case
name|DATE
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|DATEDAY
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|TIMESTAMPMILLI
return|;
case|case
name|BINARY
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|VARBINARY
return|;
case|case
name|DECIMAL
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|DECIMAL
return|;
case|case
name|INTERVAL_YEAR_MONTH
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|INTERVALYEAR
return|;
case|case
name|INTERVAL_DAY_TIME
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|INTERVALDAY
return|;
case|case
name|VOID
case|:
case|case
name|TIMESTAMPLOCALTZ
case|:
case|case
name|UNKNOWN
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
case|case
name|LIST
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|LIST
return|;
case|case
name|STRUCT
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|MAP
return|;
case|case
name|UNION
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|UNION
return|;
case|case
name|MAP
case|:
comment|// Apache Arrow doesn't have a map vector, so it's converted to a list vector of a struct
comment|// vector.
return|return
name|Types
operator|.
name|MinorType
operator|.
name|LIST
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
name|ListTypeInfo
name|toStructListTypeInfo
parameter_list|(
name|MapTypeInfo
name|mapTypeInfo
parameter_list|)
block|{
specifier|final
name|StructTypeInfo
name|structTypeInfo
init|=
operator|new
name|StructTypeInfo
argument_list|()
decl_stmt|;
name|structTypeInfo
operator|.
name|setAllStructFieldNames
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"keys"
argument_list|,
literal|"values"
argument_list|)
argument_list|)
expr_stmt|;
name|structTypeInfo
operator|.
name|setAllStructFieldTypeInfos
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mapTypeInfo
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|,
name|mapTypeInfo
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ListTypeInfo
name|structListTypeInfo
init|=
operator|new
name|ListTypeInfo
argument_list|()
decl_stmt|;
name|structListTypeInfo
operator|.
name|setListElementTypeInfo
argument_list|(
name|structTypeInfo
argument_list|)
expr_stmt|;
return|return
name|structListTypeInfo
return|;
block|}
specifier|private
specifier|static
name|Field
name|toField
parameter_list|(
name|String
name|name
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
specifier|final
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
decl_stmt|;
switch|switch
condition|(
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
name|Types
operator|.
name|MinorType
operator|.
name|BIT
operator|.
name|getType
argument_list|()
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
name|Types
operator|.
name|MinorType
operator|.
name|TINYINT
operator|.
name|getType
argument_list|()
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
name|Types
operator|.
name|MinorType
operator|.
name|SMALLINT
operator|.
name|getType
argument_list|()
argument_list|)
return|;
case|case
name|INT
case|:
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
name|Types
operator|.
name|MinorType
operator|.
name|INT
operator|.
name|getType
argument_list|()
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
name|Types
operator|.
name|MinorType
operator|.
name|BIGINT
operator|.
name|getType
argument_list|()
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
name|Types
operator|.
name|MinorType
operator|.
name|FLOAT4
operator|.
name|getType
argument_list|()
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
name|Types
operator|.
name|MinorType
operator|.
name|FLOAT8
operator|.
name|getType
argument_list|()
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
name|Types
operator|.
name|MinorType
operator|.
name|VARCHAR
operator|.
name|getType
argument_list|()
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
name|Types
operator|.
name|MinorType
operator|.
name|DATEDAY
operator|.
name|getType
argument_list|()
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
name|Types
operator|.
name|MinorType
operator|.
name|TIMESTAMPMILLI
operator|.
name|getType
argument_list|()
argument_list|)
return|;
case|case
name|TIMESTAMPLOCALTZ
case|:
specifier|final
name|TimestampLocalTZTypeInfo
name|timestampLocalTZTypeInfo
init|=
operator|(
name|TimestampLocalTZTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|String
name|timeZone
init|=
name|timestampLocalTZTypeInfo
operator|.
name|getTimeZone
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
operator|new
name|ArrowType
operator|.
name|Timestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECOND
argument_list|,
name|timeZone
argument_list|)
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
name|Types
operator|.
name|MinorType
operator|.
name|VARBINARY
operator|.
name|getType
argument_list|()
argument_list|)
return|;
case|case
name|DECIMAL
case|:
specifier|final
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|int
name|precision
init|=
name|decimalTypeInfo
operator|.
name|precision
argument_list|()
decl_stmt|;
specifier|final
name|int
name|scale
init|=
name|decimalTypeInfo
operator|.
name|scale
argument_list|()
decl_stmt|;
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
operator|new
name|ArrowType
operator|.
name|Decimal
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
name|Types
operator|.
name|MinorType
operator|.
name|VARCHAR
operator|.
name|getType
argument_list|()
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
name|Types
operator|.
name|MinorType
operator|.
name|VARCHAR
operator|.
name|getType
argument_list|()
argument_list|)
return|;
case|case
name|INTERVAL_YEAR_MONTH
case|:
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
name|Types
operator|.
name|MinorType
operator|.
name|INTERVALYEAR
operator|.
name|getType
argument_list|()
argument_list|)
return|;
case|case
name|INTERVAL_DAY_TIME
case|:
return|return
name|Field
operator|.
name|nullable
argument_list|(
name|name
argument_list|,
name|Types
operator|.
name|MinorType
operator|.
name|INTERVALDAY
operator|.
name|getType
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
case|case
name|LIST
case|:
specifier|final
name|ListTypeInfo
name|listTypeInfo
init|=
operator|(
name|ListTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|TypeInfo
name|elementTypeInfo
init|=
name|listTypeInfo
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
return|return
operator|new
name|Field
argument_list|(
name|name
argument_list|,
name|FieldType
operator|.
name|nullable
argument_list|(
name|Types
operator|.
name|MinorType
operator|.
name|LIST
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|toField
argument_list|(
name|DEFAULT_ARROW_FIELD_NAME
argument_list|,
name|elementTypeInfo
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|STRUCT
case|:
specifier|final
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldNames
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Field
argument_list|>
name|structFields
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|structSize
init|=
name|fieldNames
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|structSize
condition|;
name|i
operator|++
control|)
block|{
name|structFields
operator|.
name|add
argument_list|(
name|toField
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Field
argument_list|(
name|name
argument_list|,
name|FieldType
operator|.
name|nullable
argument_list|(
name|Types
operator|.
name|MinorType
operator|.
name|MAP
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|structFields
argument_list|)
return|;
case|case
name|UNION
case|:
specifier|final
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|(
name|UnionTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|objectTypeInfos
init|=
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Field
argument_list|>
name|unionFields
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|unionSize
init|=
name|unionFields
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|unionSize
condition|;
name|i
operator|++
control|)
block|{
name|unionFields
operator|.
name|add
argument_list|(
name|toField
argument_list|(
name|DEFAULT_ARROW_FIELD_NAME
argument_list|,
name|objectTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Field
argument_list|(
name|name
argument_list|,
name|FieldType
operator|.
name|nullable
argument_list|(
name|Types
operator|.
name|MinorType
operator|.
name|UNION
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|unionFields
argument_list|)
return|;
case|case
name|MAP
case|:
specifier|final
name|MapTypeInfo
name|mapTypeInfo
init|=
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|TypeInfo
name|keyTypeInfo
init|=
name|mapTypeInfo
operator|.
name|getMapKeyTypeInfo
argument_list|()
decl_stmt|;
specifier|final
name|TypeInfo
name|valueTypeInfo
init|=
name|mapTypeInfo
operator|.
name|getMapValueTypeInfo
argument_list|()
decl_stmt|;
specifier|final
name|StructTypeInfo
name|mapStructTypeInfo
init|=
operator|new
name|StructTypeInfo
argument_list|()
decl_stmt|;
name|mapStructTypeInfo
operator|.
name|setAllStructFieldNames
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"keys"
argument_list|,
literal|"values"
argument_list|)
argument_list|)
expr_stmt|;
name|mapStructTypeInfo
operator|.
name|setAllStructFieldTypeInfos
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|keyTypeInfo
argument_list|,
name|valueTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ListTypeInfo
name|mapListStructTypeInfo
init|=
operator|new
name|ListTypeInfo
argument_list|()
decl_stmt|;
name|mapListStructTypeInfo
operator|.
name|setListElementTypeInfo
argument_list|(
name|mapStructTypeInfo
argument_list|)
expr_stmt|;
return|return
name|toField
argument_list|(
name|name
argument_list|,
name|mapListStructTypeInfo
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
name|ListColumnVector
name|toStructListVector
parameter_list|(
name|MapColumnVector
name|mapVector
parameter_list|)
block|{
specifier|final
name|StructColumnVector
name|structVector
decl_stmt|;
specifier|final
name|ListColumnVector
name|structListVector
decl_stmt|;
name|structVector
operator|=
operator|new
name|StructColumnVector
argument_list|()
expr_stmt|;
name|structVector
operator|.
name|fields
operator|=
operator|new
name|ColumnVector
index|[]
block|{
name|mapVector
operator|.
name|keys
block|,
name|mapVector
operator|.
name|values
block|}
expr_stmt|;
name|structListVector
operator|=
operator|new
name|ListColumnVector
argument_list|()
expr_stmt|;
name|structListVector
operator|.
name|child
operator|=
name|structVector
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|mapVector
operator|.
name|offsets
argument_list|,
literal|0
argument_list|,
name|structListVector
operator|.
name|offsets
argument_list|,
literal|0
argument_list|,
name|mapVector
operator|.
name|childCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|mapVector
operator|.
name|lengths
argument_list|,
literal|0
argument_list|,
name|structListVector
operator|.
name|lengths
argument_list|,
literal|0
argument_list|,
name|mapVector
operator|.
name|childCount
argument_list|)
expr_stmt|;
name|structListVector
operator|.
name|childCount
operator|=
name|mapVector
operator|.
name|childCount
expr_stmt|;
name|structListVector
operator|.
name|isRepeating
operator|=
name|mapVector
operator|.
name|isRepeating
expr_stmt|;
name|structListVector
operator|.
name|noNulls
operator|=
name|mapVector
operator|.
name|noNulls
expr_stmt|;
return|return
name|structListVector
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|ArrowWrapperWritable
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|ArrowWrapperWritable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
block|{
return|return
name|serializer
operator|.
name|serialize
argument_list|(
name|obj
argument_list|,
name|objInspector
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getSerDeStats
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|writable
parameter_list|)
block|{
return|return
name|deserializer
operator|.
name|deserialize
argument_list|(
name|writable
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
block|{
return|return
name|rowObjectInspector
return|;
block|}
block|}
end_class

end_unit

