begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|DirectionUtils
operator|.
name|DESCENDING_CODE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|WindowFunctionDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableConstantIntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_comment
comment|/**  * GenericUDAFPercentileCont.  */
end_comment

begin_class
annotation|@
name|WindowFunctionDescription
argument_list|(
name|description
operator|=
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"dense_rank"
argument_list|,
name|value
operator|=
literal|"_FUNC_(input, pc) "
operator|+
literal|"- Returns the percentile of expr at pc (range: [0,1])."
argument_list|)
argument_list|,
name|supportsWindow
operator|=
literal|false
argument_list|,
name|pivotResult
operator|=
literal|true
argument_list|,
name|supportsWithinGroup
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|GenericUDAFPercentileCont
extends|extends
name|AbstractGenericUDAFResolver
block|{
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|LongWritable
argument_list|>
name|LONG_COMPARATOR
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|DoubleWritable
argument_list|>
name|DOUBLE_COMPARATOR
decl_stmt|;
static|static
block|{
name|LONG_COMPARATOR
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getLongComparator
argument_list|()
expr_stmt|;
name|DOUBLE_COMPARATOR
operator|=
operator|new
name|Comparator
argument_list|<
name|DoubleWritable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|DoubleWritable
name|o1
parameter_list|,
name|DoubleWritable
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
name|validateParameterTypes
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|parameters
index|[
literal|0
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|VOID
case|:
return|return
operator|new
name|PercentileContLongEvaluator
argument_list|()
return|;
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|DECIMAL
case|:
return|return
operator|new
name|PercentileContDoubleEvaluator
argument_list|()
return|;
case|case
name|STRING
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
case|case
name|BOOLEAN
case|:
case|case
name|DATE
case|:
default|default:
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Only numeric arguments are accepted but "
operator|+
name|parameters
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" is passed."
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|validateParameterTypes
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|UDFArgumentTypeException
block|{
if|if
condition|(
name|parameters
operator|.
name|length
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|parameters
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|"Not enough arguments."
argument_list|)
throw|;
block|}
if|if
condition|(
name|parameters
operator|.
name|length
operator|>
literal|3
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|parameters
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|"Too many arguments."
argument_list|)
throw|;
block|}
if|if
condition|(
name|parameters
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Only primitive type arguments are accepted but "
operator|+
name|parameters
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" is passed."
argument_list|)
throw|;
block|}
block|}
comment|/**    * A comparator to sort the entries in order - Long.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
specifier|static
class|class
name|LongComparator
implements|implements
name|Comparator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|LongWritable
argument_list|,
name|LongWritable
argument_list|>
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|LongWritable
argument_list|,
name|LongWritable
argument_list|>
name|o1
parameter_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|LongWritable
argument_list|,
name|LongWritable
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|LONG_COMPARATOR
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getKey
argument_list|()
argument_list|,
name|o2
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * A comparator to sort the entries in order - Double.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
specifier|static
class|class
name|DoubleComparator
implements|implements
name|Comparator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|DoubleWritable
argument_list|,
name|LongWritable
argument_list|>
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|DoubleWritable
argument_list|,
name|LongWritable
argument_list|>
name|o1
parameter_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|DoubleWritable
argument_list|,
name|LongWritable
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|DOUBLE_COMPARATOR
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getKey
argument_list|()
argument_list|,
name|o2
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|protected
interface|interface
name|PercentileCalculator
parameter_list|<
name|U
parameter_list|>
block|{
name|double
name|getPercentile
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|U
argument_list|,
name|LongWritable
argument_list|>
argument_list|>
name|entriesList
parameter_list|,
name|double
name|position
parameter_list|)
function_decl|;
block|}
comment|/**    * An abstract class to hold the generic udf functions for calculating percentile.    */
specifier|public
specifier|abstract
specifier|static
class|class
name|PercentileContEvaluator
parameter_list|<
name|T
parameter_list|,
name|U
parameter_list|>
extends|extends
name|GenericUDAFEvaluator
block|{
name|PercentileCalculator
argument_list|<
name|U
argument_list|>
name|calc
init|=
name|getCalculator
argument_list|()
decl_stmt|;
specifier|protected
name|PercentileContEvaluator
parameter_list|(
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|U
argument_list|,
name|LongWritable
argument_list|>
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
comment|/**      * A state class to store intermediate aggregation results.      */
specifier|public
class|class
name|PercentileAgg
extends|extends
name|AbstractAggregationBuffer
block|{
name|Map
argument_list|<
name|U
argument_list|,
name|LongWritable
argument_list|>
name|counts
decl_stmt|;
name|List
argument_list|<
name|DoubleWritable
argument_list|>
name|percentiles
decl_stmt|;
name|boolean
name|isAscending
decl_stmt|;
block|}
comment|// For PARTIAL1 and COMPLETE
specifier|protected
name|PrimitiveObjectInspector
name|inputOI
decl_stmt|;
name|MapObjectInspector
name|countsOI
decl_stmt|;
name|ListObjectInspector
name|percentilesOI
decl_stmt|;
comment|// For PARTIAL1 and PARTIAL2
specifier|protected
specifier|transient
name|Object
index|[]
name|partialResult
decl_stmt|;
comment|// FINAL and COMPLETE output
specifier|protected
name|DoubleWritable
name|result
decl_stmt|;
comment|// PARTIAL2 and FINAL inputs
specifier|protected
specifier|transient
name|StructObjectInspector
name|soi
decl_stmt|;
specifier|protected
specifier|transient
name|StructField
name|countsField
decl_stmt|;
specifier|protected
specifier|transient
name|StructField
name|percentilesField
decl_stmt|;
specifier|protected
specifier|transient
name|StructField
name|isAscendingField
decl_stmt|;
specifier|private
specifier|final
specifier|transient
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|U
argument_list|,
name|LongWritable
argument_list|>
argument_list|>
name|comparator
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
name|isAscending
decl_stmt|;
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|initInspectors
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|PARTIAL1
operator|||
name|mode
operator|==
name|Mode
operator|.
name|PARTIAL2
condition|)
block|{
comment|// ...for partial result
name|partialResult
operator|=
operator|new
name|Object
index|[
literal|3
index|]
expr_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|foi
init|=
name|getPartialInspectors
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fname
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"counts"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"percentiles"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"isAscending"
argument_list|)
expr_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fname
argument_list|,
name|foi
argument_list|)
return|;
block|}
else|else
block|{
comment|// ...for final result
name|result
operator|=
operator|new
name|DoubleWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
return|;
block|}
block|}
specifier|protected
specifier|abstract
name|PercentileCalculator
argument_list|<
name|U
argument_list|>
name|getCalculator
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|getPartialInspectors
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|T
name|getInput
parameter_list|(
name|Object
name|object
parameter_list|,
name|PrimitiveObjectInspector
name|inputOI
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|U
name|wrapInput
parameter_list|(
name|T
name|input
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|U
name|copyInput
parameter_list|(
name|U
name|input
parameter_list|)
function_decl|;
specifier|private
name|void
name|sortEntries
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|U
argument_list|,
name|LongWritable
argument_list|>
argument_list|>
name|entriesList
parameter_list|,
name|boolean
name|isAscending
parameter_list|)
block|{
name|entriesList
operator|.
name|sort
argument_list|(
name|isAscending
condition|?
name|comparator
else|:
name|comparator
operator|.
name|reversed
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initInspectors
parameter_list|(
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|PARTIAL1
operator|||
name|mode
operator|==
name|Mode
operator|.
name|COMPLETE
condition|)
block|{
comment|// ...for real input data
name|inputOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|parameters
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// Order direction was not given, default to asc
name|isAscending
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|isAscending
operator|=
operator|(
operator|(
name|WritableConstantIntObjectInspector
operator|)
name|parameters
index|[
literal|2
index|]
operator|)
operator|.
name|getWritableConstantValue
argument_list|()
operator|.
name|get
argument_list|()
operator|!=
name|DESCENDING_CODE
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// ...for partial result as input
name|soi
operator|=
operator|(
name|StructObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
name|countsField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"counts"
argument_list|)
expr_stmt|;
name|percentilesField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"percentiles"
argument_list|)
expr_stmt|;
name|isAscendingField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"isAscending"
argument_list|)
expr_stmt|;
name|countsOI
operator|=
operator|(
name|MapObjectInspector
operator|)
name|countsField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|percentilesOI
operator|=
operator|(
name|ListObjectInspector
operator|)
name|percentilesField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
name|PercentileAgg
name|agg
init|=
operator|new
name|PercentileAgg
argument_list|()
decl_stmt|;
name|agg
operator|.
name|isAscending
operator|=
name|isAscending
expr_stmt|;
return|return
name|agg
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|PercentileAgg
name|percAgg
init|=
operator|(
name|PercentileAgg
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|percAgg
operator|.
name|counts
operator|!=
literal|null
condition|)
block|{
name|percAgg
operator|.
name|counts
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|PercentileAgg
name|percAgg
init|=
operator|(
name|PercentileAgg
operator|)
name|agg
decl_stmt|;
name|Double
name|percentile
init|=
operator|(
operator|(
name|HiveDecimalWritable
operator|)
name|parameters
index|[
literal|1
index|]
operator|)
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|percAgg
operator|.
name|percentiles
operator|==
literal|null
condition|)
block|{
name|validatePercentile
argument_list|(
name|percentile
argument_list|)
expr_stmt|;
name|percAgg
operator|.
name|percentiles
operator|=
operator|new
name|ArrayList
argument_list|<
name|DoubleWritable
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|percAgg
operator|.
name|percentiles
operator|.
name|add
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
name|percentile
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameters
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|T
name|input
init|=
name|getInput
argument_list|(
name|parameters
index|[
literal|0
index|]
argument_list|,
name|inputOI
argument_list|)
decl_stmt|;
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|increment
argument_list|(
name|percAgg
argument_list|,
name|wrapInput
argument_list|(
name|input
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|increment
parameter_list|(
name|PercentileAgg
name|s
parameter_list|,
name|U
name|input
parameter_list|,
name|long
name|i
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|counts
operator|==
literal|null
condition|)
block|{
name|s
operator|.
name|counts
operator|=
operator|new
name|HashMap
argument_list|<
name|U
argument_list|,
name|LongWritable
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|LongWritable
name|count
init|=
name|s
operator|.
name|counts
operator|.
name|get
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|s
operator|.
name|counts
operator|.
name|put
argument_list|(
name|copyInput
argument_list|(
name|input
argument_list|)
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|count
operator|.
name|set
argument_list|(
name|count
operator|.
name|get
argument_list|()
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|merge
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
name|partial
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|partial
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Object
name|objCounts
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|countsField
argument_list|)
decl_stmt|;
name|Object
name|objPercentiles
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|percentilesField
argument_list|)
decl_stmt|;
name|Object
name|objIsAscending
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|isAscendingField
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|U
argument_list|,
name|LongWritable
argument_list|>
name|counts
init|=
operator|(
name|Map
argument_list|<
name|U
argument_list|,
name|LongWritable
argument_list|>
operator|)
name|countsOI
operator|.
name|getMap
argument_list|(
name|objCounts
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DoubleWritable
argument_list|>
name|percentiles
init|=
operator|(
name|List
argument_list|<
name|DoubleWritable
argument_list|>
operator|)
name|percentilesOI
operator|.
name|getList
argument_list|(
name|objPercentiles
argument_list|)
decl_stmt|;
if|if
condition|(
name|counts
operator|==
literal|null
operator|||
name|percentiles
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|PercentileAgg
name|percAgg
init|=
operator|(
name|PercentileAgg
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|percAgg
operator|.
name|percentiles
operator|==
literal|null
condition|)
block|{
name|percAgg
operator|.
name|percentiles
operator|=
operator|new
name|ArrayList
argument_list|<
name|DoubleWritable
argument_list|>
argument_list|(
name|percentiles
argument_list|)
expr_stmt|;
block|}
name|percAgg
operator|.
name|isAscending
operator|=
operator|(
operator|(
name|BooleanWritable
operator|)
name|objIsAscending
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|U
argument_list|,
name|LongWritable
argument_list|>
name|e
range|:
name|counts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|increment
argument_list|(
name|percAgg
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|PercentileAgg
name|percAgg
init|=
operator|(
name|PercentileAgg
operator|)
name|agg
decl_stmt|;
comment|// No input data.
if|if
condition|(
name|percAgg
operator|.
name|counts
operator|==
literal|null
operator|||
name|percAgg
operator|.
name|counts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Get all items into an array and sort them.
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|U
argument_list|,
name|LongWritable
argument_list|>
argument_list|>
name|entries
init|=
name|percAgg
operator|.
name|counts
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|U
argument_list|,
name|LongWritable
argument_list|>
argument_list|>
name|entriesList
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|U
argument_list|,
name|LongWritable
argument_list|>
argument_list|>
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|sortEntries
argument_list|(
name|entriesList
argument_list|,
name|percAgg
operator|.
name|isAscending
argument_list|)
expr_stmt|;
comment|// Accumulate the counts.
name|long
name|total
init|=
name|getTotal
argument_list|(
name|entriesList
argument_list|)
decl_stmt|;
comment|// Initialize the result.
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|DoubleWritable
argument_list|()
expr_stmt|;
block|}
name|calculatePercentile
argument_list|(
name|percAgg
argument_list|,
name|entriesList
argument_list|,
name|total
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminatePartial
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|PercentileAgg
name|percAgg
init|=
operator|(
name|PercentileAgg
operator|)
name|agg
decl_stmt|;
name|partialResult
index|[
literal|0
index|]
operator|=
name|percAgg
operator|.
name|counts
expr_stmt|;
name|partialResult
index|[
literal|1
index|]
operator|=
name|percAgg
operator|.
name|percentiles
expr_stmt|;
name|partialResult
index|[
literal|2
index|]
operator|=
operator|new
name|BooleanWritable
argument_list|(
name|percAgg
operator|.
name|isAscending
argument_list|)
expr_stmt|;
return|return
name|partialResult
return|;
block|}
specifier|protected
name|long
name|getTotal
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|U
argument_list|,
name|LongWritable
argument_list|>
argument_list|>
name|entriesList
parameter_list|)
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entriesList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|LongWritable
name|count
init|=
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|total
operator|+=
name|count
operator|.
name|get
argument_list|()
expr_stmt|;
name|count
operator|.
name|set
argument_list|(
name|total
argument_list|)
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
specifier|protected
name|void
name|validatePercentile
parameter_list|(
name|Double
name|percentile
parameter_list|)
block|{
if|if
condition|(
name|percentile
argument_list|<
literal|0.0
operator|||
name|percentile
argument_list|>
literal|1.0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Percentile value must be within the range of 0 to 1."
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|calculatePercentile
parameter_list|(
name|PercentileAgg
name|percAgg
parameter_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|U
argument_list|,
name|LongWritable
argument_list|>
argument_list|>
name|entriesList
parameter_list|,
name|long
name|total
parameter_list|)
block|{
comment|// maxPosition is the 1.0 percentile
name|long
name|maxPosition
init|=
name|total
operator|-
literal|1
decl_stmt|;
name|double
name|position
init|=
name|maxPosition
operator|*
name|percAgg
operator|.
name|percentiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|calc
operator|.
name|getPercentile
argument_list|(
name|entriesList
argument_list|,
name|position
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The evaluator for percentile computation based on long.    */
specifier|public
specifier|static
class|class
name|PercentileContLongEvaluator
extends|extends
name|PercentileContEvaluator
argument_list|<
name|Long
argument_list|,
name|LongWritable
argument_list|>
block|{
specifier|public
name|PercentileContLongEvaluator
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|LongComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|getPartialInspectors
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|foi
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBooleanObjectInspector
argument_list|)
expr_stmt|;
return|return
name|foi
return|;
block|}
specifier|protected
name|Long
name|getInput
parameter_list|(
name|Object
name|parameter
parameter_list|,
name|PrimitiveObjectInspector
name|inputOI
parameter_list|)
block|{
return|return
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|parameter
argument_list|,
name|inputOI
argument_list|)
return|;
block|}
specifier|protected
name|LongWritable
name|wrapInput
parameter_list|(
name|Long
name|input
parameter_list|)
block|{
return|return
operator|new
name|LongWritable
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|protected
name|LongWritable
name|copyInput
parameter_list|(
name|LongWritable
name|input
parameter_list|)
block|{
return|return
operator|new
name|LongWritable
argument_list|(
name|input
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|PercentileCalculator
argument_list|<
name|LongWritable
argument_list|>
name|getCalculator
parameter_list|()
block|{
return|return
operator|new
name|PercentileContLongCalculator
argument_list|()
return|;
block|}
block|}
comment|/**    * The evaluator for percentile computation based on double.    */
specifier|public
specifier|static
class|class
name|PercentileContDoubleEvaluator
extends|extends
name|PercentileContEvaluator
argument_list|<
name|Double
argument_list|,
name|DoubleWritable
argument_list|>
block|{
specifier|public
name|PercentileContDoubleEvaluator
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|DoubleComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|getPartialInspectors
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|foi
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBooleanObjectInspector
argument_list|)
expr_stmt|;
return|return
name|foi
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Double
name|getInput
parameter_list|(
name|Object
name|parameter
parameter_list|,
name|PrimitiveObjectInspector
name|inputOI
parameter_list|)
block|{
return|return
name|PrimitiveObjectInspectorUtils
operator|.
name|getDouble
argument_list|(
name|parameter
argument_list|,
name|inputOI
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|DoubleWritable
name|wrapInput
parameter_list|(
name|Double
name|input
parameter_list|)
block|{
return|return
operator|new
name|DoubleWritable
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|protected
name|DoubleWritable
name|copyInput
parameter_list|(
name|DoubleWritable
name|input
parameter_list|)
block|{
return|return
operator|new
name|DoubleWritable
argument_list|(
name|input
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|PercentileCalculator
argument_list|<
name|DoubleWritable
argument_list|>
name|getCalculator
parameter_list|()
block|{
return|return
operator|new
name|PercentileContDoubleCalculator
argument_list|()
return|;
block|}
block|}
comment|/**    * continuous percentile calculators    */
specifier|public
specifier|static
class|class
name|PercentileContLongCalculator
implements|implements
name|PercentileCalculator
argument_list|<
name|LongWritable
argument_list|>
block|{
comment|/**      * Get the percentile value.      */
specifier|public
name|double
name|getPercentile
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|LongWritable
argument_list|,
name|LongWritable
argument_list|>
argument_list|>
name|entriesList
parameter_list|,
name|double
name|position
parameter_list|)
block|{
comment|// We may need to do linear interpolation to get the exact percentile
name|long
name|lower
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|position
argument_list|)
decl_stmt|;
name|long
name|higher
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|position
argument_list|)
decl_stmt|;
comment|// Linear search since this won't take much time from the total execution anyway
comment|// lower has the range of [0 .. total-1]
comment|// The first entry with accumulated count (lower+1) corresponds to the lower position.
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
operator|<
name|lower
operator|+
literal|1
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|long
name|lowerKey
init|=
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|higher
operator|==
name|lower
condition|)
block|{
comment|// no interpolation needed because position does not have a fraction
return|return
name|lowerKey
return|;
block|}
if|if
condition|(
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
operator|<
name|higher
operator|+
literal|1
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|long
name|higherKey
init|=
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|higherKey
operator|==
name|lowerKey
condition|)
block|{
comment|// no interpolation needed because lower position and higher position has the same key
return|return
name|lowerKey
return|;
block|}
comment|// Linear interpolation to get the exact percentile
return|return
operator|(
name|higher
operator|-
name|position
operator|)
operator|*
name|lowerKey
operator|+
operator|(
name|position
operator|-
name|lower
operator|)
operator|*
name|higherKey
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PercentileContDoubleCalculator
implements|implements
name|PercentileCalculator
argument_list|<
name|DoubleWritable
argument_list|>
block|{
specifier|public
name|double
name|getPercentile
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|DoubleWritable
argument_list|,
name|LongWritable
argument_list|>
argument_list|>
name|entriesList
parameter_list|,
name|double
name|position
parameter_list|)
block|{
name|long
name|lower
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|position
argument_list|)
decl_stmt|;
name|long
name|higher
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|position
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
operator|<
name|lower
operator|+
literal|1
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|double
name|lowerKey
init|=
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|higher
operator|==
name|lower
condition|)
block|{
return|return
name|lowerKey
return|;
block|}
if|if
condition|(
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
operator|<
name|higher
operator|+
literal|1
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|double
name|higherKey
init|=
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|higherKey
operator|==
name|lowerKey
condition|)
block|{
return|return
name|lowerKey
return|;
block|}
return|return
operator|(
name|higher
operator|-
name|position
operator|)
operator|*
name|lowerKey
operator|+
operator|(
name|position
operator|-
name|lower
operator|)
operator|*
name|higherKey
return|;
block|}
block|}
block|}
end_class

end_unit

