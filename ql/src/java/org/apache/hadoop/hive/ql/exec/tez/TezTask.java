begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsConstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|monitoring
operator|.
name|TezJobMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BaseWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MergeJoinWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TezEdgeProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TezEdgeProperty
operator|.
name|EdgeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TezWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|UnionWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|StageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|TriggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|client
operator|.
name|CallerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|client
operator|.
name|TezClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|CounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|TezCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|TezCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|DAGAccessControls
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|DAG
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|Edge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|GroupInputEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|SessionNotRunning
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|Vertex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|VertexGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|DAGClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|DAGStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|StatusGetOpts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|VertexStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  *  * TezTask handles the execution of TezWork. Currently it executes a graph of map and reduce work  * using the Tez APIs directly.  *  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"serial"
block|}
argument_list|)
specifier|public
class|class
name|TezTask
extends|extends
name|Task
argument_list|<
name|TezWork
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
name|TezTask
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|PerfLogger
name|perfLogger
init|=
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEZ_MEMORY_RESERVE_FRACTION
init|=
literal|"tez.task.scale.memory.reserve-fraction"
decl_stmt|;
specifier|private
name|TezCounters
name|counters
decl_stmt|;
specifier|private
specifier|final
name|DagUtils
name|utils
decl_stmt|;
specifier|private
specifier|final
name|Object
name|dagClientLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|isShutdown
init|=
literal|false
decl_stmt|;
specifier|private
name|DAGClient
name|dagClient
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|BaseWork
argument_list|,
name|Vertex
argument_list|>
name|workToVertex
init|=
operator|new
name|HashMap
argument_list|<
name|BaseWork
argument_list|,
name|Vertex
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|BaseWork
argument_list|,
name|JobConf
argument_list|>
name|workToConf
init|=
operator|new
name|HashMap
argument_list|<
name|BaseWork
argument_list|,
name|JobConf
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TezTask
parameter_list|()
block|{
name|this
argument_list|(
name|DagUtils
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TezTask
parameter_list|(
name|DagUtils
name|utils
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|utils
operator|=
name|utils
expr_stmt|;
block|}
specifier|public
name|TezCounters
name|getTezCounters
parameter_list|()
block|{
return|return
name|counters
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|(
name|DriverContext
name|driverContext
parameter_list|)
block|{
name|int
name|rc
init|=
literal|1
decl_stmt|;
name|boolean
name|cleanContext
init|=
literal|false
decl_stmt|;
name|Context
name|ctx
init|=
literal|null
decl_stmt|;
name|TezSessionState
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Get or create Context object. If we create it we have to clean it later as well.
name|ctx
operator|=
name|driverContext
operator|.
name|getCtx
argument_list|()
expr_stmt|;
if|if
condition|(
name|ctx
operator|==
literal|null
condition|)
block|{
name|ctx
operator|=
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cleanContext
operator|=
literal|true
expr_stmt|;
comment|// some DDL task that directly executes a TezTask does not setup Context and hence TriggerContext.
comment|// Setting queryId is messed up. Some DDL tasks have executionId instead of proper queryId.
name|String
name|queryId
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
decl_stmt|;
name|TriggerContext
name|triggerContext
init|=
operator|new
name|TriggerContext
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|queryId
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setTriggerContext
argument_list|(
name|triggerContext
argument_list|)
expr_stmt|;
block|}
comment|// Need to remove this static hack. But this is the way currently to get a session.
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Note: given that we return pool sessions to the pool in the finally block below, and that
comment|//       we need to set the global to null to do that, this "reuse" may be pointless.
name|session
operator|=
name|ss
operator|.
name|getTezSession
argument_list|()
expr_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
operator|!
name|session
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The session: "
operator|+
name|session
operator|+
literal|" has not been opened"
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|desiredCounters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|WorkloadManager
operator|.
name|isInUse
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
name|WorkloadManager
name|wm
init|=
name|WorkloadManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// TODO: in future, we may also pass getUserIpAddress.
comment|// Note: for now this will just block to wait for a session based on parallelism.
name|session
operator|=
name|wm
operator|.
name|getSession
argument_list|(
name|session
argument_list|,
name|ss
operator|.
name|getUserName
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|desiredCounters
operator|.
name|addAll
argument_list|(
name|wm
operator|.
name|getTriggerCounterNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TezSessionPoolManager
name|pm
init|=
name|TezSessionPoolManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|session
operator|=
name|pm
operator|.
name|getSession
argument_list|(
name|session
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|,
name|getWork
argument_list|()
operator|.
name|getLlapMode
argument_list|()
argument_list|)
expr_stmt|;
name|desiredCounters
operator|.
name|addAll
argument_list|(
name|pm
operator|.
name|getTriggerCounterNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TriggerContext
name|triggerContext
init|=
name|ctx
operator|.
name|getTriggerContext
argument_list|()
decl_stmt|;
name|triggerContext
operator|.
name|setDesiredCounters
argument_list|(
name|desiredCounters
argument_list|)
expr_stmt|;
name|session
operator|.
name|setTriggerContext
argument_list|(
name|triggerContext
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Subscribed to counters: {} for queryId: {}"
argument_list|,
name|desiredCounters
argument_list|,
name|triggerContext
operator|.
name|getQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setTezSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
try|try
block|{
comment|// jobConf will hold all the configuration for hadoop, tez, and hive
name|JobConf
name|jobConf
init|=
name|utils
operator|.
name|createConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Get all user jars from work (e.g. input format stuff).
name|String
index|[]
name|inputOutputJars
init|=
name|work
operator|.
name|configureJobConfAndExtractJars
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
comment|// we will localize all the files (jars, plans, hashtables) to the
comment|// scratch dir. let's create this and tmp first.
name|Path
name|scratchDir
init|=
name|ctx
operator|.
name|getMRScratchDir
argument_list|()
decl_stmt|;
comment|// create the tez tmp dir
name|scratchDir
operator|=
name|utils
operator|.
name|createTezDir
argument_list|(
name|scratchDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// This is used to compare global and vertex resources. Global resources are originally
comment|// derived from session conf via localizeTempFilesFromConf. So, use that here.
name|Configuration
name|sessionConf
init|=
operator|(
name|session
operator|!=
literal|null
operator|&&
name|session
operator|.
name|getConf
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|session
operator|.
name|getConf
argument_list|()
else|:
name|conf
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|inputOutputLocalResources
init|=
name|getExtraLocalResources
argument_list|(
name|jobConf
argument_list|,
name|scratchDir
argument_list|,
name|inputOutputJars
argument_list|,
name|sessionConf
argument_list|)
decl_stmt|;
comment|// Ensure the session is open and has the necessary local resources
name|updateSession
argument_list|(
name|session
argument_list|,
name|jobConf
argument_list|,
name|scratchDir
argument_list|,
name|inputOutputJars
argument_list|,
name|inputOutputLocalResources
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LocalResource
argument_list|>
name|additionalLr
init|=
name|session
operator|.
name|getLocalizedResources
argument_list|()
decl_stmt|;
name|logResources
argument_list|(
name|additionalLr
argument_list|)
expr_stmt|;
comment|// unless already installed on all the cluster nodes, we'll have to
comment|// localize hive-exec.jar as well.
name|LocalResource
name|appJarLr
init|=
name|session
operator|.
name|getAppJarLr
argument_list|()
decl_stmt|;
comment|// next we translate the TezWork to a Tez DAG
name|DAG
name|dag
init|=
name|build
argument_list|(
name|jobConf
argument_list|,
name|work
argument_list|,
name|scratchDir
argument_list|,
name|appJarLr
argument_list|,
name|additionalLr
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|CallerContext
name|callerContext
init|=
name|CallerContext
operator|.
name|create
argument_list|(
literal|"HIVE"
argument_list|,
name|queryPlan
operator|.
name|getQueryId
argument_list|()
argument_list|,
literal|"HIVE_QUERY_ID"
argument_list|,
name|queryPlan
operator|.
name|getQueryStr
argument_list|()
argument_list|)
decl_stmt|;
name|dag
operator|.
name|setCallerContext
argument_list|(
name|callerContext
argument_list|)
expr_stmt|;
comment|// Add the extra resources to the dag
name|addExtraResourcesToDag
argument_list|(
name|session
argument_list|,
name|dag
argument_list|,
name|inputOutputJars
argument_list|,
name|inputOutputLocalResources
argument_list|)
expr_stmt|;
comment|// Check isShutdown opportunistically; it's never unset.
if|if
condition|(
name|this
operator|.
name|isShutdown
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Operation cancelled"
argument_list|)
throw|;
block|}
name|DAGClient
name|dagClient
init|=
name|submit
argument_list|(
name|jobConf
argument_list|,
name|dag
argument_list|,
name|scratchDir
argument_list|,
name|appJarLr
argument_list|,
name|session
argument_list|,
name|additionalLr
argument_list|,
name|inputOutputJars
argument_list|,
name|inputOutputLocalResources
argument_list|)
decl_stmt|;
name|boolean
name|wasShutdown
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|dagClientLock
init|)
block|{
assert|assert
name|this
operator|.
name|dagClient
operator|==
literal|null
assert|;
name|wasShutdown
operator|=
name|this
operator|.
name|isShutdown
expr_stmt|;
if|if
condition|(
operator|!
name|wasShutdown
condition|)
block|{
name|this
operator|.
name|dagClient
operator|=
name|dagClient
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wasShutdown
condition|)
block|{
name|closeDagClientOnCancellation
argument_list|(
name|dagClient
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Operation cancelled"
argument_list|)
throw|;
block|}
comment|// finally monitor will print progress until the job is done
name|TezJobMonitor
name|monitor
init|=
operator|new
name|TezJobMonitor
argument_list|(
name|work
operator|.
name|getAllWork
argument_list|()
argument_list|,
name|dagClient
argument_list|,
name|conf
argument_list|,
name|dag
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|rc
operator|=
name|monitor
operator|.
name|monitorExecution
argument_list|()
expr_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
name|this
operator|.
name|setException
argument_list|(
operator|new
name|HiveException
argument_list|(
name|monitor
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// fetch the counters
try|try
block|{
name|Set
argument_list|<
name|StatusGetOpts
argument_list|>
name|statusGetOpts
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|StatusGetOpts
operator|.
name|GET_COUNTERS
argument_list|)
decl_stmt|;
name|counters
operator|=
name|dagClient
operator|.
name|getDAGStatus
argument_list|(
name|statusGetOpts
argument_list|)
operator|.
name|getDAGCounters
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
comment|// Don't fail execution due to counters - just don't print summary info
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get counters. Ignoring, summary info will be incomplete. "
operator|+
name|err
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|counters
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// Note: due to TEZ-3846, the session may actually be invalid in case of some errors.
comment|//       Currently, reopen on an attempted reuse will take care of that; we cannot tell
comment|//       if the session is usable until we try.
comment|// We return this to the pool even if it's unusable; reopen is supposed to handle this.
try|try
block|{
name|session
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to return session: {} to pool"
argument_list|,
name|session
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
operator|&&
name|counters
operator|!=
literal|null
operator|&&
operator|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|TEZ_EXEC_SUMMARY
argument_list|)
operator|||
name|Utilities
operator|.
name|isPerfOrAboveLogging
argument_list|(
name|conf
argument_list|)
operator|)
condition|)
block|{
for|for
control|(
name|CounterGroup
name|group
range|:
name|counters
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|group
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|":"
argument_list|)
expr_stmt|;
for|for
control|(
name|TezCounter
name|counter
range|:
name|group
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"   "
operator|+
name|counter
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|": "
operator|+
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to execute tez graph."
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// rc will be 1 at this point indicating failure.
block|}
finally|finally
block|{
name|Utilities
operator|.
name|clearWork
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Clear gWorkMap
for|for
control|(
name|BaseWork
name|w
range|:
name|work
operator|.
name|getAllWork
argument_list|()
control|)
block|{
name|JobConf
name|workCfg
init|=
name|workToConf
operator|.
name|get
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|workCfg
operator|!=
literal|null
condition|)
block|{
name|Utilities
operator|.
name|clearWorkMapForConf
argument_list|(
name|workCfg
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cleanContext
condition|)
block|{
try|try
block|{
name|ctx
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/*best effort*/
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to clean up after tez job"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// need to either move tmp files or remove them
name|DAGClient
name|dagClient
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|dagClientLock
init|)
block|{
name|dagClient
operator|=
name|this
operator|.
name|dagClient
expr_stmt|;
name|this
operator|.
name|dagClient
operator|=
literal|null
expr_stmt|;
block|}
comment|// TODO: not clear why we don't do the rest of the cleanup if dagClient is not created.
comment|//       E.g. jobClose will be called if we fail after dagClient creation but no before...
comment|//       DagClient as such should have no bearing on jobClose.
if|if
condition|(
name|dagClient
operator|!=
literal|null
condition|)
block|{
comment|// rc will only be overwritten if close errors out
name|rc
operator|=
name|close
argument_list|(
name|work
argument_list|,
name|rc
argument_list|,
name|dagClient
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
specifier|private
name|void
name|closeDagClientOnCancellation
parameter_list|(
name|DAGClient
name|dagClient
parameter_list|)
block|{
try|try
block|{
name|dagClient
operator|.
name|tryKillDAG
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for Tez task to shut down: "
operator|+
name|this
argument_list|)
expr_stmt|;
name|dagClient
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to shut down TezTask"
operator|+
name|this
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|closeDagClientWithoutEx
argument_list|(
name|dagClient
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|logResources
parameter_list|(
name|List
argument_list|<
name|LocalResource
argument_list|>
name|additionalLr
parameter_list|)
block|{
comment|// log which resources we're adding (apart from the hive exec)
if|if
condition|(
operator|!
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
return|return;
if|if
condition|(
name|additionalLr
operator|==
literal|null
operator|||
name|additionalLr
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No local resources to process (other than hive-exec)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|LocalResource
name|lr
range|:
name|additionalLr
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding local resource: "
operator|+
name|lr
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Converted the list of jars into local resources    */
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|getExtraLocalResources
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Path
name|scratchDir
parameter_list|,
name|String
index|[]
name|inputOutputJars
parameter_list|,
name|Configuration
name|sessionConf
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|resources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
comment|// Skip the files already in session local resources...
specifier|final
name|List
argument_list|<
name|LocalResource
argument_list|>
name|localResources
init|=
name|utils
operator|.
name|localizeTempFiles
argument_list|(
name|scratchDir
operator|.
name|toString
argument_list|()
argument_list|,
name|jobConf
argument_list|,
name|inputOutputJars
argument_list|,
name|DagUtils
operator|.
name|getTempFilesFromConf
argument_list|(
name|sessionConf
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|localResources
condition|)
block|{
for|for
control|(
name|LocalResource
name|lr
range|:
name|localResources
control|)
block|{
name|resources
operator|.
name|put
argument_list|(
name|utils
operator|.
name|getBaseName
argument_list|(
name|lr
argument_list|)
argument_list|,
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resources
return|;
block|}
comment|/**    * Ensures that the Tez Session is open and the AM has all necessary jars configured.    */
name|void
name|updateSession
parameter_list|(
name|TezSessionState
name|session
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|Path
name|scratchDir
parameter_list|,
name|String
index|[]
name|inputOutputJars
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|extraResources
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|boolean
name|missingLocalResources
init|=
operator|!
name|session
operator|.
name|hasResources
argument_list|(
name|inputOutputJars
argument_list|)
decl_stmt|;
name|TezClient
name|client
init|=
name|session
operator|.
name|getSession
argument_list|()
decl_stmt|;
comment|// TODO null can also mean that this operation was interrupted. Should we really try to re-create the session in that case ?
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
comment|// Can happen if the user sets the tez flag after the session was established.
name|LOG
operator|.
name|info
argument_list|(
literal|"Tez session hasn't been created yet. Opening session"
argument_list|)
expr_stmt|;
name|session
operator|.
name|open
argument_list|(
name|inputOutputJars
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Session is already open"
argument_list|)
expr_stmt|;
comment|// Ensure the open session has the necessary resources (StorageHandler)
if|if
condition|(
name|missingLocalResources
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Tez session missing resources,"
operator|+
literal|" adding additional necessary resources"
argument_list|)
expr_stmt|;
name|client
operator|.
name|addAppMasterLocalFiles
argument_list|(
name|extraResources
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|refreshLocalResourcesFromConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Adds any necessary resources that must be localized in each vertex to the DAG.    */
name|void
name|addExtraResourcesToDag
parameter_list|(
name|TezSessionState
name|session
parameter_list|,
name|DAG
name|dag
parameter_list|,
name|String
index|[]
name|inputOutputJars
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|inputOutputLocalResources
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|session
operator|.
name|hasResources
argument_list|(
name|inputOutputJars
argument_list|)
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|inputOutputLocalResources
condition|)
block|{
name|dag
operator|.
name|addTaskLocalFiles
argument_list|(
name|inputOutputLocalResources
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|checkOutputSpec
parameter_list|(
name|BaseWork
name|work
parameter_list|,
name|JobConf
name|jc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
range|:
name|work
operator|.
name|getAllOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|op
operator|instanceof
name|FileSinkOperator
condition|)
block|{
operator|(
operator|(
name|FileSinkOperator
operator|)
name|op
operator|)
operator|.
name|checkOutputSpecs
argument_list|(
literal|null
argument_list|,
name|jc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|DAG
name|build
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|TezWork
name|work
parameter_list|,
name|Path
name|scratchDir
parameter_list|,
name|LocalResource
name|appJarLr
parameter_list|,
name|List
argument_list|<
name|LocalResource
argument_list|>
name|additionalLr
parameter_list|,
name|Context
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_BUILD_DAG
argument_list|)
expr_stmt|;
comment|// getAllWork returns a topologically sorted list, which we use to make
comment|// sure that vertices are created before they are used in edges.
name|List
argument_list|<
name|BaseWork
argument_list|>
name|ws
init|=
name|work
operator|.
name|getAllWork
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|scratchDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// the name of the dag is what is displayed in the AM/Job UI
name|String
name|dagName
init|=
name|utils
operator|.
name|createDagName
argument_list|(
name|conf
argument_list|,
name|queryPlan
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dag name: "
operator|+
name|dagName
argument_list|)
expr_stmt|;
name|DAG
name|dag
init|=
name|DAG
operator|.
name|create
argument_list|(
name|dagName
argument_list|)
decl_stmt|;
comment|// set some info for the query
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|(
operator|new
name|LinkedHashMap
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"context"
argument_list|,
literal|"Hive"
argument_list|)
operator|.
name|put
argument_list|(
literal|"description"
argument_list|,
name|ctx
operator|.
name|getCmd
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dagInfo
init|=
name|json
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DagInfo: "
operator|+
name|dagInfo
argument_list|)
expr_stmt|;
block|}
name|dag
operator|.
name|setDAGInfo
argument_list|(
name|dagInfo
argument_list|)
expr_stmt|;
name|dag
operator|.
name|setCredentials
argument_list|(
name|conf
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|setAccessControlsForCurrentUser
argument_list|(
name|dag
argument_list|,
name|queryPlan
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|BaseWork
name|w
range|:
name|ws
control|)
block|{
name|boolean
name|isFinal
init|=
name|work
operator|.
name|getLeaves
argument_list|()
operator|.
name|contains
argument_list|(
name|w
argument_list|)
decl_stmt|;
comment|// translate work to vertex
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_CREATE_VERTEX
operator|+
name|w
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|UnionWork
condition|)
block|{
comment|// Special case for unions. These items translate to VertexGroups
name|List
argument_list|<
name|BaseWork
argument_list|>
name|unionWorkItems
init|=
operator|new
name|LinkedList
argument_list|<
name|BaseWork
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BaseWork
argument_list|>
name|children
init|=
operator|new
name|LinkedList
argument_list|<
name|BaseWork
argument_list|>
argument_list|()
decl_stmt|;
comment|// split the children into vertices that make up the union and vertices that are
comment|// proper children of the union
for|for
control|(
name|BaseWork
name|v
range|:
name|work
operator|.
name|getChildren
argument_list|(
name|w
argument_list|)
control|)
block|{
name|EdgeType
name|type
init|=
name|work
operator|.
name|getEdgeProperty
argument_list|(
name|w
argument_list|,
name|v
argument_list|)
operator|.
name|getEdgeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|EdgeType
operator|.
name|CONTAINS
condition|)
block|{
name|unionWorkItems
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|children
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
name|JobConf
name|parentConf
init|=
name|workToConf
operator|.
name|get
argument_list|(
name|unionWorkItems
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|checkOutputSpec
argument_list|(
name|w
argument_list|,
name|parentConf
argument_list|)
expr_stmt|;
comment|// create VertexGroup
name|Vertex
index|[]
name|vertexArray
init|=
operator|new
name|Vertex
index|[
name|unionWorkItems
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BaseWork
name|v
range|:
name|unionWorkItems
control|)
block|{
name|vertexArray
index|[
name|i
operator|++
index|]
operator|=
name|workToVertex
operator|.
name|get
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|VertexGroup
name|group
init|=
name|dag
operator|.
name|createVertexGroup
argument_list|(
name|w
operator|.
name|getName
argument_list|()
argument_list|,
name|vertexArray
argument_list|)
decl_stmt|;
comment|// For a vertex group, all Outputs use the same Key-class, Val-class and partitioner.
comment|// Pick any one source vertex to figure out the Edge configuration.
comment|// now hook up the children
for|for
control|(
name|BaseWork
name|v
range|:
name|children
control|)
block|{
comment|// finally we can create the grouped edge
name|GroupInputEdge
name|e
init|=
name|utils
operator|.
name|createEdge
argument_list|(
name|group
argument_list|,
name|parentConf
argument_list|,
name|workToVertex
operator|.
name|get
argument_list|(
name|v
argument_list|)
argument_list|,
name|work
operator|.
name|getEdgeProperty
argument_list|(
name|w
argument_list|,
name|v
argument_list|)
argument_list|,
name|v
argument_list|,
name|work
argument_list|)
decl_stmt|;
name|dag
operator|.
name|addEdge
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Regular vertices
name|JobConf
name|wxConf
init|=
name|utils
operator|.
name|initializeVertexConf
argument_list|(
name|conf
argument_list|,
name|ctx
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|checkOutputSpec
argument_list|(
name|w
argument_list|,
name|wxConf
argument_list|)
expr_stmt|;
name|Vertex
name|wx
init|=
name|utils
operator|.
name|createVertex
argument_list|(
name|wxConf
argument_list|,
name|w
argument_list|,
name|scratchDir
argument_list|,
name|appJarLr
argument_list|,
name|additionalLr
argument_list|,
name|fs
argument_list|,
name|ctx
argument_list|,
operator|!
name|isFinal
argument_list|,
name|work
argument_list|,
name|work
operator|.
name|getVertexType
argument_list|(
name|w
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|.
name|getReservedMemoryMB
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// If reversedMemoryMB is set, make memory allocation fraction adjustment as needed
name|double
name|frac
init|=
name|DagUtils
operator|.
name|adjustMemoryReserveFraction
argument_list|(
name|w
operator|.
name|getReservedMemoryMB
argument_list|()
argument_list|,
name|super
operator|.
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting "
operator|+
name|TEZ_MEMORY_RESERVE_FRACTION
operator|+
literal|" to "
operator|+
name|frac
argument_list|)
expr_stmt|;
name|wx
operator|.
name|setConf
argument_list|(
name|TEZ_MEMORY_RESERVE_FRACTION
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|frac
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Otherwise just leave it up to Tez to decide how much memory to allocate
name|dag
operator|.
name|addVertex
argument_list|(
name|wx
argument_list|)
expr_stmt|;
name|utils
operator|.
name|addCredentials
argument_list|(
name|w
argument_list|,
name|dag
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_CREATE_VERTEX
operator|+
name|w
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|workToVertex
operator|.
name|put
argument_list|(
name|w
argument_list|,
name|wx
argument_list|)
expr_stmt|;
name|workToConf
operator|.
name|put
argument_list|(
name|w
argument_list|,
name|wxConf
argument_list|)
expr_stmt|;
comment|// add all dependencies (i.e.: edges) to the graph
for|for
control|(
name|BaseWork
name|v
range|:
name|work
operator|.
name|getChildren
argument_list|(
name|w
argument_list|)
control|)
block|{
assert|assert
name|workToVertex
operator|.
name|containsKey
argument_list|(
name|v
argument_list|)
assert|;
name|Edge
name|e
init|=
literal|null
decl_stmt|;
name|TezEdgeProperty
name|edgeProp
init|=
name|work
operator|.
name|getEdgeProperty
argument_list|(
name|w
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|e
operator|=
name|utils
operator|.
name|createEdge
argument_list|(
name|wxConf
argument_list|,
name|wx
argument_list|,
name|workToVertex
operator|.
name|get
argument_list|(
name|v
argument_list|)
argument_list|,
name|edgeProp
argument_list|,
name|v
argument_list|,
name|work
argument_list|)
expr_stmt|;
name|dag
operator|.
name|addEdge
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Clear the work map after build. TODO: remove caching instead?
name|Utilities
operator|.
name|clearWorkMap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_BUILD_DAG
argument_list|)
expr_stmt|;
return|return
name|dag
return|;
block|}
specifier|private
specifier|static
name|void
name|setAccessControlsForCurrentUser
parameter_list|(
name|DAG
name|dag
parameter_list|,
name|String
name|queryId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|user
init|=
name|SessionState
operator|.
name|getUserFromAuthenticator
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|loginUserUgi
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|String
name|loginUser
init|=
name|loginUserUgi
operator|==
literal|null
condition|?
literal|null
else|:
name|loginUserUgi
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|boolean
name|addHs2User
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETEZHS2USERACCESS
argument_list|)
decl_stmt|;
comment|// Temporarily re-using the TEZ AM View ACLs property for individual dag access control.
comment|// Hive may want to setup it's own parameters if it wants to control per dag access.
comment|// Setting the tez-property per dag should work for now.
name|String
name|viewStr
init|=
name|Utilities
operator|.
name|getAclStringWithHiveModification
argument_list|(
name|conf
argument_list|,
name|TezConfiguration
operator|.
name|TEZ_AM_VIEW_ACLS
argument_list|,
name|addHs2User
argument_list|,
name|user
argument_list|,
name|loginUser
argument_list|)
decl_stmt|;
name|String
name|modifyStr
init|=
name|Utilities
operator|.
name|getAclStringWithHiveModification
argument_list|(
name|conf
argument_list|,
name|TezConfiguration
operator|.
name|TEZ_AM_MODIFY_ACLS
argument_list|,
name|addHs2User
argument_list|,
name|user
argument_list|,
name|loginUser
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting Tez DAG access for queryId={} with viewAclString={}, modifyStr={}"
argument_list|,
name|queryId
argument_list|,
name|viewStr
argument_list|,
name|modifyStr
argument_list|)
expr_stmt|;
block|}
comment|// set permissions for current user on DAG
name|DAGAccessControls
name|ac
init|=
operator|new
name|DAGAccessControls
argument_list|(
name|viewStr
argument_list|,
name|modifyStr
argument_list|)
decl_stmt|;
name|dag
operator|.
name|setAccessControls
argument_list|(
name|ac
argument_list|)
expr_stmt|;
block|}
name|DAGClient
name|submit
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|DAG
name|dag
parameter_list|,
name|Path
name|scratchDir
parameter_list|,
name|LocalResource
name|appJarLr
parameter_list|,
name|TezSessionState
name|sessionState
parameter_list|,
name|List
argument_list|<
name|LocalResource
argument_list|>
name|additionalLr
parameter_list|,
name|String
index|[]
name|inputOutputJars
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|inputOutputLocalResources
parameter_list|)
throws|throws
name|Exception
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_SUBMIT_DAG
argument_list|)
expr_stmt|;
name|DAGClient
name|dagClient
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|resourceMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|additionalLr
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LocalResource
name|lr
range|:
name|additionalLr
control|)
block|{
if|if
condition|(
name|lr
operator|.
name|getType
argument_list|()
operator|==
name|LocalResourceType
operator|.
name|FILE
condition|)
block|{
comment|// TEZ AM will only localize FILE (no script operators in the AM)
name|resourceMap
operator|.
name|put
argument_list|(
name|utils
operator|.
name|getBaseName
argument_list|(
name|lr
argument_list|)
argument_list|,
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
try|try
block|{
comment|// ready to start execution on the cluster
name|sessionState
operator|.
name|getSession
argument_list|()
operator|.
name|addAppMasterLocalFiles
argument_list|(
name|resourceMap
argument_list|)
expr_stmt|;
name|dagClient
operator|=
name|sessionState
operator|.
name|getSession
argument_list|()
operator|.
name|submitDAG
argument_list|(
name|dag
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SessionNotRunning
name|nr
parameter_list|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Tez session was closed. Reopening..."
argument_list|)
expr_stmt|;
comment|// close the old one, but keep the tmp files around
comment|// conf is passed in only for the case when session conf is null (tests and legacy paths?)
name|sessionState
operator|=
name|sessionState
operator|.
name|reopen
argument_list|(
name|conf
argument_list|,
name|inputOutputJars
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Session re-established."
argument_list|)
expr_stmt|;
name|dagClient
operator|=
name|sessionState
operator|.
name|getSession
argument_list|()
operator|.
name|submitDAG
argument_list|(
name|dag
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// In case of any other exception, retry. If this also fails, report original error and exit.
try|try
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Dag submit failed due to "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" stack trace: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
operator|+
literal|" retrying..."
argument_list|)
expr_stmt|;
name|sessionState
operator|=
name|sessionState
operator|.
name|reopen
argument_list|(
name|conf
argument_list|,
name|inputOutputJars
argument_list|)
expr_stmt|;
name|dagClient
operator|=
name|sessionState
operator|.
name|getSession
argument_list|()
operator|.
name|submitDAG
argument_list|(
name|dag
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|retryException
parameter_list|)
block|{
comment|// we failed to submit after retrying. Destroy session and bail.
name|sessionState
operator|.
name|destroy
argument_list|()
expr_stmt|;
throw|throw
name|retryException
throw|;
block|}
block|}
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_SUBMIT_DAG
argument_list|)
expr_stmt|;
return|return
operator|new
name|SyncDagClient
argument_list|(
name|dagClient
argument_list|)
return|;
block|}
comment|/*    * close will move the temp files into the right place for the fetch    * task. If the job has failed it will clean up the files.    */
annotation|@
name|VisibleForTesting
name|int
name|close
parameter_list|(
name|TezWork
name|work
parameter_list|,
name|int
name|rc
parameter_list|,
name|DAGClient
name|dagClient
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|BaseWork
argument_list|>
name|ws
init|=
name|work
operator|.
name|getAllWork
argument_list|()
decl_stmt|;
for|for
control|(
name|BaseWork
name|w
range|:
name|ws
control|)
block|{
if|if
condition|(
name|w
operator|instanceof
name|MergeJoinWork
condition|)
block|{
name|w
operator|=
operator|(
operator|(
name|MergeJoinWork
operator|)
name|w
operator|)
operator|.
name|getMainWork
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
range|:
name|w
operator|.
name|getAllOperators
argument_list|()
control|)
block|{
name|op
operator|.
name|jobClose
argument_list|(
name|conf
argument_list|,
name|rc
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// jobClose needs to execute successfully otherwise fail task
if|if
condition|(
name|rc
operator|==
literal|0
condition|)
block|{
name|rc
operator|=
literal|3
expr_stmt|;
name|String
name|mesg
init|=
literal|"Job Commit failed with exception '"
operator|+
name|Utilities
operator|.
name|getNameMessage
argument_list|(
name|e
argument_list|)
operator|+
literal|"'"
decl_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|mesg
argument_list|,
literal|"\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dagClient
operator|!=
literal|null
condition|)
block|{
comment|// null in tests
name|closeDagClientWithoutEx
argument_list|(
name|dagClient
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
comment|/**    * Close DagClient, log warning if it throws any exception.    * We don't want to fail query if that function fails.    */
specifier|private
specifier|static
name|void
name|closeDagClientWithoutEx
parameter_list|(
name|DAGClient
name|dagClient
parameter_list|)
block|{
try|try
block|{
name|dagClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close DagClient"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateTaskMetrics
parameter_list|(
name|Metrics
name|metrics
parameter_list|)
block|{
name|metrics
operator|.
name|incrementCounter
argument_list|(
name|MetricsConstant
operator|.
name|HIVE_TEZ_TASKS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMapRedTask
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|StageType
name|getType
parameter_list|()
block|{
return|return
name|StageType
operator|.
name|MAPRED
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"TEZ"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|MapWork
argument_list|>
name|getMapWork
parameter_list|()
block|{
name|List
argument_list|<
name|MapWork
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<
name|MapWork
argument_list|>
argument_list|()
decl_stmt|;
name|TezWork
name|work
init|=
name|getWork
argument_list|()
decl_stmt|;
comment|// framework expects MapWork instances that have no physical parents (i.e.: union parent is
comment|// fine, broadcast parent isn't)
for|for
control|(
name|BaseWork
name|w
range|:
name|work
operator|.
name|getAllWorkUnsorted
argument_list|()
control|)
block|{
if|if
condition|(
name|w
operator|instanceof
name|MapWork
condition|)
block|{
name|List
argument_list|<
name|BaseWork
argument_list|>
name|parents
init|=
name|work
operator|.
name|getParents
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|boolean
name|candidate
init|=
literal|true
decl_stmt|;
for|for
control|(
name|BaseWork
name|parent
range|:
name|parents
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|parent
operator|instanceof
name|UnionWork
operator|)
condition|)
block|{
name|candidate
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|candidate
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
name|MapWork
operator|)
name|w
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|getReducer
parameter_list|(
name|MapWork
name|mapWork
parameter_list|)
block|{
name|List
argument_list|<
name|BaseWork
argument_list|>
name|children
init|=
name|getWork
argument_list|()
operator|.
name|getChildren
argument_list|(
name|mapWork
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ReduceWork
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
operator|(
name|ReduceWork
operator|)
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getReducer
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|DAGClient
name|dagClient
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|dagClientLock
init|)
block|{
name|isShutdown
operator|=
literal|true
expr_stmt|;
name|dagClient
operator|=
name|this
operator|.
name|dagClient
expr_stmt|;
comment|// Don't set dagClient to null here - execute will only clean up operators if it's set.
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down Tez task "
operator|+
name|this
operator|+
literal|" "
operator|+
operator|(
operator|(
name|dagClient
operator|==
literal|null
operator|)
condition|?
literal|" before submit"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dagClient
operator|==
literal|null
condition|)
return|return;
name|closeDagClientOnCancellation
argument_list|(
name|dagClient
argument_list|)
expr_stmt|;
block|}
comment|/** DAG client that does dumb global sync on all the method calls;    * Tez DAG client is not thread safe and getting the 2nd one is not recommended. */
specifier|public
class|class
name|SyncDagClient
extends|extends
name|DAGClient
block|{
specifier|private
specifier|final
name|DAGClient
name|dagClient
decl_stmt|;
specifier|public
name|SyncDagClient
parameter_list|(
name|DAGClient
name|dagClient
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|dagClient
operator|=
name|dagClient
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|dagClient
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Don't sync.
block|}
specifier|public
name|String
name|getDagIdentifierString
parameter_list|()
block|{
comment|// TODO: Implement this when tez is upgraded. TEZ-3550
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getSessionIdentifierString
parameter_list|()
block|{
comment|// TODO: Implement this when tez is upgraded. TEZ-3550
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getExecutionContext
parameter_list|()
block|{
return|return
name|dagClient
operator|.
name|getExecutionContext
argument_list|()
return|;
comment|// Don't sync.
block|}
annotation|@
name|Override
annotation|@
name|Private
specifier|protected
name|ApplicationReport
name|getApplicationReportInternal
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// The method is not exposed, and we don't use it.
block|}
annotation|@
name|Override
specifier|public
name|DAGStatus
name|getDAGStatus
parameter_list|(
annotation|@
name|Nullable
name|Set
argument_list|<
name|StatusGetOpts
argument_list|>
name|statusOptions
parameter_list|)
throws|throws
name|IOException
throws|,
name|TezException
block|{
synchronized|synchronized
init|(
name|dagClient
init|)
block|{
return|return
name|dagClient
operator|.
name|getDAGStatus
argument_list|(
name|statusOptions
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DAGStatus
name|getDAGStatus
parameter_list|(
annotation|@
name|Nullable
name|Set
argument_list|<
name|StatusGetOpts
argument_list|>
name|statusOptions
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|TezException
block|{
synchronized|synchronized
init|(
name|dagClient
init|)
block|{
return|return
name|dagClient
operator|.
name|getDAGStatus
argument_list|(
name|statusOptions
argument_list|,
name|timeout
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|VertexStatus
name|getVertexStatus
parameter_list|(
name|String
name|vertexName
parameter_list|,
name|Set
argument_list|<
name|StatusGetOpts
argument_list|>
name|statusOptions
parameter_list|)
throws|throws
name|IOException
throws|,
name|TezException
block|{
synchronized|synchronized
init|(
name|dagClient
init|)
block|{
return|return
name|dagClient
operator|.
name|getVertexStatus
argument_list|(
name|vertexName
argument_list|,
name|statusOptions
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|tryKillDAG
parameter_list|()
throws|throws
name|IOException
throws|,
name|TezException
block|{
synchronized|synchronized
init|(
name|dagClient
init|)
block|{
name|dagClient
operator|.
name|tryKillDAG
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DAGStatus
name|waitForCompletion
parameter_list|()
throws|throws
name|IOException
throws|,
name|TezException
throws|,
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|dagClient
init|)
block|{
return|return
name|dagClient
operator|.
name|waitForCompletion
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DAGStatus
name|waitForCompletionWithStatusUpdates
parameter_list|(
annotation|@
name|Nullable
name|Set
argument_list|<
name|StatusGetOpts
argument_list|>
name|statusGetOpts
parameter_list|)
throws|throws
name|IOException
throws|,
name|TezException
throws|,
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|dagClient
init|)
block|{
return|return
name|dagClient
operator|.
name|waitForCompletionWithStatusUpdates
argument_list|(
name|statusGetOpts
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

