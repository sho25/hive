begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_comment
comment|/**  * Dynamic int array that uses primitive types and chunks to avoid copying  * large number of integers when it resizes.  *  * The motivation for this class is memory optimization, i.e. space efficient  * storage of potentially huge arrays without good a-priori size guesses.  *  * The API of this class is between a primitive array and a AbstractList. It's  * not a Collection implementation because it handles primitive types, but the  * API could be extended to support iterators and the like.  *  * NOTE: Like standard Collection implementations/arrays, this class is not  * synchronized.  */
end_comment

begin_class
specifier|final
class|class
name|DynamicIntArray
block|{
specifier|static
specifier|final
name|int
name|DEFAULT_CHUNKSIZE
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
specifier|static
specifier|final
name|int
name|INIT_CHUNKS
init|=
literal|128
decl_stmt|;
specifier|private
specifier|final
name|int
name|chunkSize
decl_stmt|;
comment|// our allocation size
specifier|private
name|int
index|[]
index|[]
name|data
decl_stmt|;
comment|// the real data
specifier|private
name|int
name|length
decl_stmt|;
comment|// max set element index +1
specifier|private
name|int
name|initializedChunks
init|=
literal|0
decl_stmt|;
comment|// the number of created chunks
specifier|public
name|DynamicIntArray
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_CHUNKSIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DynamicIntArray
parameter_list|(
name|int
name|chunkSize
parameter_list|)
block|{
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
name|data
operator|=
operator|new
name|int
index|[
name|INIT_CHUNKS
index|]
index|[]
expr_stmt|;
block|}
comment|/**    * Ensure that the given index is valid.    */
specifier|private
name|void
name|grow
parameter_list|(
name|int
name|chunkIndex
parameter_list|)
block|{
if|if
condition|(
name|chunkIndex
operator|>=
name|initializedChunks
condition|)
block|{
if|if
condition|(
name|chunkIndex
operator|>=
name|data
operator|.
name|length
condition|)
block|{
name|int
name|newSize
init|=
name|Math
operator|.
name|max
argument_list|(
name|chunkIndex
operator|+
literal|1
argument_list|,
literal|2
operator|*
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
index|[]
index|[]
name|newChunk
init|=
operator|new
name|int
index|[
name|newSize
index|]
index|[]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|newChunk
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|data
operator|=
name|newChunk
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|initializedChunks
init|;
name|i
operator|<=
name|chunkIndex
condition|;
operator|++
name|i
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|new
name|int
index|[
name|chunkSize
index|]
expr_stmt|;
block|}
name|initializedChunks
operator|=
name|chunkIndex
operator|+
literal|1
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Index "
operator|+
name|index
operator|+
literal|" is outside of 0.."
operator|+
operator|(
name|length
operator|-
literal|1
operator|)
argument_list|)
throw|;
block|}
name|int
name|i
init|=
name|index
operator|/
name|chunkSize
decl_stmt|;
name|int
name|j
init|=
name|index
operator|%
name|chunkSize
decl_stmt|;
return|return
name|data
index|[
name|i
index|]
index|[
name|j
index|]
return|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|int
name|i
init|=
name|index
operator|/
name|chunkSize
decl_stmt|;
name|int
name|j
init|=
name|index
operator|%
name|chunkSize
decl_stmt|;
name|grow
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
name|length
condition|)
block|{
name|length
operator|=
name|index
operator|+
literal|1
expr_stmt|;
block|}
name|data
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|void
name|increment
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|int
name|i
init|=
name|index
operator|/
name|chunkSize
decl_stmt|;
name|int
name|j
init|=
name|index
operator|%
name|chunkSize
decl_stmt|;
name|grow
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
name|length
condition|)
block|{
name|length
operator|=
name|index
operator|+
literal|1
expr_stmt|;
block|}
name|data
index|[
name|i
index|]
index|[
name|j
index|]
operator|+=
name|value
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|int
name|i
init|=
name|length
operator|/
name|chunkSize
decl_stmt|;
name|int
name|j
init|=
name|length
operator|%
name|chunkSize
decl_stmt|;
name|grow
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|data
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|value
expr_stmt|;
name|length
operator|+=
literal|1
expr_stmt|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|length
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|length
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|initializedChunks
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|int
name|i
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|length
operator|*
literal|4
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|int
name|l
init|=
name|length
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

