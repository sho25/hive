begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * JDBM LICENSE v1.00  *  * Redistribution and use of this software and associated documentation  * ("Software"), with or without modification, are permitted provided  * that the following conditions are met:  *  * 1. Redistributions of source code must retain copyright  *    statements and notices.  Redistributions must also contain a  *    copy of this document.  *  * 2. Redistributions in binary form must reproduce the  *    above copyright notice, this list of conditions and the  *    following disclaimer in the documentation and/or other  *    materials provided with the distribution.  *  * 3. The name "JDBM" must not be used to endorse or promote  *    products derived from this Software without prior written  *    permission of Cees de Groot.  For written permission,  *    please contact cg@cdegroot.com.  *  * 4. Products derived from this Software may not be called "JDBM"  *    nor may "JDBM" appear in their names without prior written  *    permission of Cees de Groot.  *  * 5. Due credit should be given to the JDBM Project  *    (http://jdbm.sourceforge.net/).  *  * THIS SOFTWARE IS PROVIDED BY THE JDBM PROJECT AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL  * CEES DE GROOT OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  *  * Copyright 2000 (C) Cees de Groot. All Rights Reserved.  * Copyright 2000-2001 (C) Alex Boisvert. All Rights Reserved.  * Contributions are Copyright (C) 2000 by their associated contributors.  *  * $Id: BaseRecordManager.java,v 1.8 2005/06/25 23:12:32 doomdark Exp $  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|recman
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|RecordManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|helper
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|helper
operator|.
name|DefaultSerializer
import|;
end_import

begin_comment
comment|/**  *  This class manages records, which are uninterpreted blobs of data. The  *  set of operations is simple and straightforward: you communicate with  *  the class using long "rowids" and byte[] data blocks. Rowids are returned  *  on inserts and you can stash them away someplace safe to be able to get  *  back to them. Data blocks can be as long as you wish, and may have  *  lengths different from the original when updating.  *<p>  *  Operations are synchronized, so that only one of them will happen  *  concurrently even if you hammer away from multiple threads. Operations  *  are made atomic by keeping a transaction log which is recovered after  *  a crash, so the operations specified by this interface all have ACID  *  properties.  *<p>  *  You identify a file by just the name. The package attaches<tt>.db</tt>  *  for the database file, and<tt>.lg</tt> for the transaction log. The  *  transaction log is synchronized regularly and then restarted, so don't  *  worry if you see the size going up and down.  *  * @author<a href="mailto:boisvert@intalio.com">Alex Boisvert</a>  * @author<a href="cg@cdegroot.com">Cees de Groot</a>  * @version $Id: BaseRecordManager.java,v 1.8 2005/06/25 23:12:32 doomdark Exp $  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|BaseRecordManager
implements|implements
name|RecordManager
block|{
comment|/**      * Underlying record file.      */
specifier|private
name|RecordFile
name|_file
decl_stmt|;
comment|/**      * Physical row identifier manager.      */
specifier|private
name|PhysicalRowIdManager
name|_physMgr
decl_stmt|;
comment|/**      * Logigal to Physical row identifier manager.      */
specifier|private
name|LogicalRowIdManager
name|_logMgr
decl_stmt|;
comment|/**      * Page manager.      */
specifier|private
name|PageManager
name|_pageman
decl_stmt|;
comment|/**      * Reserved slot for name directory.      */
specifier|public
specifier|static
specifier|final
name|int
name|NAME_DIRECTORY_ROOT
init|=
literal|0
decl_stmt|;
comment|/**      * Static debugging flag      */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
comment|/**      * Directory of named JDBMHashtables.  This directory is a persistent      * directory, stored as a Hashtable.  It can be retrived by using      * the NAME_DIRECTORY_ROOT.      */
specifier|private
name|Map
name|_nameDirectory
decl_stmt|;
comment|/**      *  Creates a record manager for the indicated file      *      *  @throws IOException when the file cannot be opened or is not      *          a valid file content-wise.      */
specifier|public
name|BaseRecordManager
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|_file
operator|=
operator|new
name|RecordFile
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|_pageman
operator|=
operator|new
name|PageManager
argument_list|(
name|_file
argument_list|)
expr_stmt|;
name|_physMgr
operator|=
operator|new
name|PhysicalRowIdManager
argument_list|(
name|_file
argument_list|,
name|_pageman
argument_list|)
expr_stmt|;
name|_logMgr
operator|=
operator|new
name|LogicalRowIdManager
argument_list|(
name|_file
argument_list|,
name|_pageman
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Get the underlying Transaction Manager      */
specifier|public
specifier|synchronized
name|TransactionManager
name|getTransactionManager
parameter_list|()
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
return|return
name|_file
operator|.
name|txnMgr
return|;
block|}
comment|/**      *  Switches off transactioning for the record manager. This means      *  that a) a transaction log is not kept, and b) writes aren't      *  synch'ed after every update. This is useful when batch inserting      *  into a new database.      *<p>      *  Only call this method directly after opening the file, otherwise      *  the results will be undefined.      */
specifier|public
specifier|synchronized
name|void
name|disableTransactions
parameter_list|()
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
name|_file
operator|.
name|disableTransactions
argument_list|()
expr_stmt|;
block|}
comment|/**      *  Closes the record manager.      *      *  @throws IOException when one of the underlying I/O operations fails.      */
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
name|_pageman
operator|.
name|close
argument_list|()
expr_stmt|;
name|_pageman
operator|=
literal|null
expr_stmt|;
name|_file
operator|.
name|close
argument_list|()
expr_stmt|;
name|_file
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      *  Inserts a new record using standard java object serialization.      *      *  @param obj the object for the new record.      *  @return the rowid for the new record.      *  @throws IOException when one of the underlying I/O operations fails.      */
specifier|public
name|long
name|insert
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|insert
argument_list|(
name|obj
argument_list|,
name|DefaultSerializer
operator|.
name|INSTANCE
argument_list|)
return|;
block|}
comment|/**      *  Inserts a new record using a custom serializer.      *      *  @param obj the object for the new record.      *  @param serializer a custom serializer      *  @return the rowid for the new record.      *  @throws IOException when one of the underlying I/O operations fails.      */
specifier|public
specifier|synchronized
name|long
name|insert
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Serializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
decl_stmt|;
name|long
name|recid
decl_stmt|;
name|Location
name|physRowId
decl_stmt|;
name|checkIfClosed
argument_list|()
expr_stmt|;
name|data
operator|=
name|serializer
operator|.
name|serialize
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|physRowId
operator|=
name|_physMgr
operator|.
name|insert
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|recid
operator|=
name|_logMgr
operator|.
name|insert
argument_list|(
name|physRowId
argument_list|)
operator|.
name|toLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BaseRecordManager.insert() recid "
operator|+
name|recid
operator|+
literal|" length "
operator|+
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|recid
return|;
block|}
comment|/**      *  Deletes a record.      *      *  @param recid the rowid for the record that should be deleted.      *  @throws IOException when one of the underlying I/O operations fails.      */
specifier|public
specifier|synchronized
name|void
name|delete
parameter_list|(
name|long
name|recid
parameter_list|)
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|recid
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument 'recid' is invalid: "
operator|+
name|recid
argument_list|)
throw|;
block|}
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BaseRecordManager.delete() recid "
operator|+
name|recid
argument_list|)
expr_stmt|;
block|}
name|Location
name|logRowId
init|=
operator|new
name|Location
argument_list|(
name|recid
argument_list|)
decl_stmt|;
name|Location
name|physRowId
init|=
name|_logMgr
operator|.
name|fetch
argument_list|(
name|logRowId
argument_list|)
decl_stmt|;
name|_physMgr
operator|.
name|delete
argument_list|(
name|physRowId
argument_list|)
expr_stmt|;
name|_logMgr
operator|.
name|delete
argument_list|(
name|logRowId
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Updates a record using standard java object serialization.      *      *  @param recid the recid for the record that is to be updated.      *  @param obj the new object for the record.      *  @throws IOException when one of the underlying I/O operations fails.      */
specifier|public
name|void
name|update
parameter_list|(
name|long
name|recid
parameter_list|,
name|Object
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
name|update
argument_list|(
name|recid
argument_list|,
name|obj
argument_list|,
name|DefaultSerializer
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Updates a record using a custom serializer.      *      *  @param recid the recid for the record that is to be updated.      *  @param obj the new object for the record.      *  @param serializer a custom serializer      *  @throws IOException when one of the underlying I/O operations fails.      */
specifier|public
specifier|synchronized
name|void
name|update
parameter_list|(
name|long
name|recid
parameter_list|,
name|Object
name|obj
parameter_list|,
name|Serializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|recid
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument 'recid' is invalid: "
operator|+
name|recid
argument_list|)
throw|;
block|}
name|Location
name|logRecid
init|=
operator|new
name|Location
argument_list|(
name|recid
argument_list|)
decl_stmt|;
name|Location
name|physRecid
init|=
name|_logMgr
operator|.
name|fetch
argument_list|(
name|logRecid
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|serializer
operator|.
name|serialize
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BaseRecordManager.update() recid "
operator|+
name|recid
operator|+
literal|" length "
operator|+
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|Location
name|newRecid
init|=
name|_physMgr
operator|.
name|update
argument_list|(
name|physRecid
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newRecid
operator|.
name|equals
argument_list|(
name|physRecid
argument_list|)
condition|)
block|{
name|_logMgr
operator|.
name|update
argument_list|(
name|logRecid
argument_list|,
name|newRecid
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Fetches a record using standard java object serialization.      *      *  @param recid the recid for the record that must be fetched.      *  @return the object contained in the record.      *  @throws IOException when one of the underlying I/O operations fails.      */
specifier|public
name|Object
name|fetch
parameter_list|(
name|long
name|recid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fetch
argument_list|(
name|recid
argument_list|,
name|DefaultSerializer
operator|.
name|INSTANCE
argument_list|)
return|;
block|}
comment|/**      *  Fetches a record using a custom serializer.      *      *  @param recid the recid for the record that must be fetched.      *  @param serializer a custom serializer      *  @return the object contained in the record.      *  @throws IOException when one of the underlying I/O operations fails.      */
specifier|public
specifier|synchronized
name|Object
name|fetch
parameter_list|(
name|long
name|recid
parameter_list|,
name|Serializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
decl_stmt|;
name|checkIfClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|recid
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument 'recid' is invalid: "
operator|+
name|recid
argument_list|)
throw|;
block|}
name|data
operator|=
name|_physMgr
operator|.
name|fetch
argument_list|(
name|_logMgr
operator|.
name|fetch
argument_list|(
operator|new
name|Location
argument_list|(
name|recid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BaseRecordManager.fetch() recid "
operator|+
name|recid
operator|+
literal|" length "
operator|+
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|serializer
operator|.
name|deserialize
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**      *  Returns the number of slots available for "root" rowids. These slots      *  can be used to store special rowids, like rowids that point to      *  other rowids. Root rowids are useful for bootstrapping access to      *  a set of data.      */
specifier|public
name|int
name|getRootCount
parameter_list|()
block|{
return|return
name|FileHeader
operator|.
name|NROOTS
return|;
block|}
comment|/**      *  Returns the indicated root rowid.      *      *  @see #getRootCount      */
specifier|public
specifier|synchronized
name|long
name|getRoot
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
return|return
name|_pageman
operator|.
name|getFileHeader
argument_list|()
operator|.
name|getRoot
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      *  Sets the indicated root rowid.      *      *  @see #getRootCount      */
specifier|public
specifier|synchronized
name|void
name|setRoot
parameter_list|(
name|int
name|id
parameter_list|,
name|long
name|rowid
parameter_list|)
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
name|_pageman
operator|.
name|getFileHeader
argument_list|()
operator|.
name|setRoot
argument_list|(
name|id
argument_list|,
name|rowid
argument_list|)
expr_stmt|;
block|}
comment|/**      * Obtain the record id of a named object. Returns 0 if named object      * doesn't exist.      */
specifier|public
name|long
name|getNamedObject
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
name|Map
name|nameDirectory
init|=
name|getNameDirectory
argument_list|()
decl_stmt|;
name|Long
name|recid
init|=
operator|(
name|Long
operator|)
name|nameDirectory
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|recid
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|recid
operator|.
name|longValue
argument_list|()
return|;
block|}
comment|/**      * Set the record id of a named object.      */
specifier|public
name|void
name|setNamedObject
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|recid
parameter_list|)
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
name|Map
name|nameDirectory
init|=
name|getNameDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|recid
operator|==
literal|0
condition|)
block|{
comment|// remove from hashtable
name|nameDirectory
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nameDirectory
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|Long
argument_list|(
name|recid
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|saveNameDirectory
argument_list|(
name|nameDirectory
argument_list|)
expr_stmt|;
block|}
comment|/**      * Commit (make persistent) all changes since beginning of transaction.      */
specifier|public
specifier|synchronized
name|void
name|commit
parameter_list|()
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
name|_pageman
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|/**      * Rollback (cancel) all changes since beginning of transaction.      */
specifier|public
specifier|synchronized
name|void
name|rollback
parameter_list|()
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
name|_pageman
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
comment|/**      * Load name directory      */
specifier|private
name|Map
name|getNameDirectory
parameter_list|()
throws|throws
name|IOException
block|{
comment|// retrieve directory of named hashtable
name|long
name|nameDirectory_recid
init|=
name|getRoot
argument_list|(
name|NAME_DIRECTORY_ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameDirectory_recid
operator|==
literal|0
condition|)
block|{
name|_nameDirectory
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|nameDirectory_recid
operator|=
name|insert
argument_list|(
name|_nameDirectory
argument_list|)
expr_stmt|;
name|setRoot
argument_list|(
name|NAME_DIRECTORY_ROOT
argument_list|,
name|nameDirectory_recid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|_nameDirectory
operator|=
operator|(
name|Map
operator|)
name|fetch
argument_list|(
name|nameDirectory_recid
argument_list|)
expr_stmt|;
block|}
return|return
name|_nameDirectory
return|;
block|}
specifier|private
name|void
name|saveNameDirectory
parameter_list|(
name|Map
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|recid
init|=
name|getRoot
argument_list|(
name|NAME_DIRECTORY_ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|recid
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Name directory must exist"
argument_list|)
throw|;
block|}
name|update
argument_list|(
name|recid
argument_list|,
name|_nameDirectory
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check if RecordManager has been closed.  If so, throw an      * IllegalStateException.      */
specifier|private
name|void
name|checkIfClosed
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
name|_file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"RecordManager has been closed"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

