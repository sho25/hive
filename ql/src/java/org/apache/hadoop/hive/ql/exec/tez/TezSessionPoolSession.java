begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|registry
operator|.
name|impl
operator|.
name|TezAmInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|SessionTriggerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|TriggerActionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|registry
operator|.
name|impl
operator|.
name|TezAmInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * TezSession that is aware of the session pool, and also keeps track of expiration and use.  * It has 3 states - not in use, in use, and expired. When in the pool, it is not in use;  * use and expiration may compete to take the session out of the pool and change it to the  * corresponding states. When someone tries to get a session, they check for expiration time;  * if it's time, the expiration is triggered; in that case, or if it was already triggered, the  * caller gets a different session. When the session is in use when it expires, the expiration  * thread ignores it and lets the return to the pool take care of the expiration.  */
end_comment

begin_class
annotation|@
name|VisibleForTesting
class|class
name|TezSessionPoolSession
extends|extends
name|TezSessionState
block|{
specifier|private
specifier|static
specifier|final
name|int
name|STATE_NONE
init|=
literal|0
decl_stmt|,
name|STATE_IN_USE
init|=
literal|1
decl_stmt|,
name|STATE_EXPIRED
init|=
literal|2
decl_stmt|;
specifier|public
interface|interface
name|Manager
block|{
name|void
name|registerOpenSession
parameter_list|(
name|TezSessionPoolSession
name|session
parameter_list|)
function_decl|;
name|void
name|unregisterOpenSession
parameter_list|(
name|TezSessionPoolSession
name|session
parameter_list|)
function_decl|;
name|void
name|returnAfterUse
parameter_list|(
name|TezSessionPoolSession
name|session
parameter_list|)
throws|throws
name|Exception
function_decl|;
name|TezSessionState
name|reopen
parameter_list|(
name|TezSessionState
name|session
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|inputOutputJars
parameter_list|)
throws|throws
name|Exception
function_decl|;
name|void
name|destroy
parameter_list|(
name|TezSessionState
name|session
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
specifier|public
specifier|static
specifier|abstract
class|class
name|AbstractTriggerValidator
block|{
specifier|abstract
name|SessionTriggerProvider
name|getSessionTriggerProvider
parameter_list|()
function_decl|;
specifier|abstract
name|TriggerActionHandler
name|getTriggerActionHandler
parameter_list|()
function_decl|;
specifier|abstract
name|TriggerValidatorRunnable
name|getTriggerValidatorRunnable
parameter_list|()
function_decl|;
specifier|public
name|void
name|startTriggerValidator
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|triggerValidationIntervalMs
init|=
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TRIGGER_VALIDATION_INTERVAL_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
specifier|final
name|ScheduledExecutorService
name|scheduledExecutorService
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"TriggerValidator"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|TriggerValidatorRunnable
name|triggerValidatorRunnable
init|=
name|getTriggerValidatorRunnable
argument_list|()
decl_stmt|;
name|scheduledExecutorService
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|triggerValidatorRunnable
argument_list|,
name|triggerValidationIntervalMs
argument_list|,
name|triggerValidationIntervalMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|AtomicInteger
name|sessionState
init|=
operator|new
name|AtomicInteger
argument_list|(
name|STATE_NONE
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|expirationNs
decl_stmt|;
specifier|private
specifier|final
name|Manager
name|parent
decl_stmt|;
specifier|private
specifier|final
name|SessionExpirationTracker
name|expirationTracker
decl_stmt|;
specifier|public
name|TezSessionPoolSession
parameter_list|(
name|String
name|sessionId
parameter_list|,
name|Manager
name|parent
parameter_list|,
name|SessionExpirationTracker
name|tracker
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|sessionId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|expirationTracker
operator|=
name|tracker
expr_stmt|;
block|}
name|void
name|setExpirationNs
parameter_list|(
name|long
name|expirationNs
parameter_list|)
block|{
name|this
operator|.
name|expirationNs
operator|=
name|expirationNs
expr_stmt|;
block|}
name|Long
name|getExpirationNs
parameter_list|()
block|{
return|return
name|expirationNs
return|;
block|}
annotation|@
name|Override
name|void
name|close
parameter_list|(
name|boolean
name|keepTmpDir
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|super
operator|.
name|close
argument_list|(
name|keepTmpDir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|parent
operator|.
name|unregisterOpenSession
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|expirationTracker
operator|!=
literal|null
condition|)
block|{
name|expirationTracker
operator|.
name|removeFromExpirationQueue
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|openInternal
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|additionalFiles
parameter_list|,
name|boolean
name|isAsync
parameter_list|,
name|LogHelper
name|console
parameter_list|,
name|Path
name|scratchDir
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|URISyntaxException
throws|,
name|TezException
block|{
name|super
operator|.
name|openInternal
argument_list|(
name|additionalFiles
argument_list|,
name|isAsync
argument_list|,
name|console
argument_list|,
name|scratchDir
argument_list|)
expr_stmt|;
name|parent
operator|.
name|registerOpenSession
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|expirationTracker
operator|!=
literal|null
condition|)
block|{
name|expirationTracker
operator|.
name|addToExpirationQueue
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|expirationNs
operator|==
literal|null
condition|)
return|return
name|super
operator|.
name|toString
argument_list|()
return|;
name|long
name|expiresInMs
init|=
operator|(
name|expirationNs
operator|-
name|System
operator|.
name|nanoTime
argument_list|()
operator|)
operator|/
literal|1000000L
decl_stmt|;
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|", expires in "
operator|+
name|expiresInMs
operator|+
literal|"ms"
return|;
block|}
comment|/**    * Tries to use this session. When the session is in use, it will not expire.    * @return true if the session can be used; false if it has already expired.    */
specifier|public
name|boolean
name|tryUse
parameter_list|(
name|boolean
name|ignoreExpiration
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|oldValue
init|=
name|sessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
name|STATE_IN_USE
condition|)
throw|throw
operator|new
name|AssertionError
argument_list|(
name|this
operator|+
literal|" is already in use"
argument_list|)
throw|;
if|if
condition|(
name|oldValue
operator|==
name|STATE_EXPIRED
condition|)
return|return
literal|false
return|;
name|int
name|finalState
init|=
operator|(
operator|!
name|ignoreExpiration
operator|&&
name|shouldExpire
argument_list|()
operator|)
condition|?
name|STATE_EXPIRED
else|:
name|STATE_IN_USE
decl_stmt|;
if|if
condition|(
name|sessionState
operator|.
name|compareAndSet
argument_list|(
name|STATE_NONE
argument_list|,
name|finalState
argument_list|)
condition|)
block|{
if|if
condition|(
name|finalState
operator|==
name|STATE_IN_USE
condition|)
return|return
literal|true
return|;
comment|// Restart asynchronously, don't block the caller.
name|expirationTracker
operator|.
name|closeAndRestartExpiredSessionAsync
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
name|boolean
name|stopUsing
parameter_list|()
block|{
name|int
name|finalState
init|=
name|shouldExpire
argument_list|()
condition|?
name|STATE_EXPIRED
else|:
name|STATE_NONE
decl_stmt|;
if|if
condition|(
operator|!
name|sessionState
operator|.
name|compareAndSet
argument_list|(
name|STATE_IN_USE
argument_list|,
name|finalState
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected state change; currently "
operator|+
name|sessionState
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|finalState
operator|==
name|STATE_NONE
condition|)
return|return
literal|true
return|;
name|expirationTracker
operator|.
name|closeAndRestartExpiredSessionAsync
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**    * Tries to expire and restart the session.    * @param isAsync Whether the restart should happen asynchronously.    * @return True if the session was, or will be restarted.    */
specifier|public
name|boolean
name|tryExpire
parameter_list|(
name|boolean
name|isAsync
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|expirationNs
operator|==
literal|null
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|shouldExpire
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Try to expire the session if it's not in use; if in use, bail.
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|sessionState
operator|.
name|get
argument_list|()
operator|!=
name|STATE_NONE
condition|)
return|return
literal|true
return|;
comment|// returnAfterUse will take care of this
if|if
condition|(
name|sessionState
operator|.
name|compareAndSet
argument_list|(
name|STATE_NONE
argument_list|,
name|STATE_EXPIRED
argument_list|)
condition|)
block|{
if|if
condition|(
name|isAsync
condition|)
block|{
name|expirationTracker
operator|.
name|closeAndRestartExpiredSessionAsync
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expirationTracker
operator|.
name|closeAndRestartExpiredSession
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
specifier|private
specifier|final
name|boolean
name|shouldExpire
parameter_list|()
block|{
return|return
name|expirationNs
operator|!=
literal|null
operator|&&
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|expirationNs
operator|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|returnToSessionManager
parameter_list|()
throws|throws
name|Exception
block|{
name|parent
operator|.
name|returnAfterUse
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TezSessionState
name|reopen
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|inputOutputJars
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|parent
operator|.
name|reopen
argument_list|(
name|this
argument_list|,
name|conf
argument_list|,
name|inputOutputJars
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
name|parent
operator|.
name|destroy
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isOwnedBy
parameter_list|(
name|Manager
name|parent
parameter_list|)
block|{
return|return
name|this
operator|.
name|parent
operator|==
name|parent
return|;
block|}
name|void
name|updateFromRegistry
parameter_list|(
name|TezAmInstance
name|si
parameter_list|)
block|{
comment|// Nothing to do.
block|}
block|}
end_class

end_unit

