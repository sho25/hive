begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ConditionalTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|HashTableDummyOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SerializationUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SparkHashTableSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|SparkTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMapRedUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|spark
operator|.
name|GenSparkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BaseWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ConditionalResolverSkewJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ConditionalWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HashTableDummyDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SparkEdgeProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SparkHashTableSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SparkWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Copied from GenMRSkewJoinProcessor. It's used for spark task  *  */
end_comment

begin_class
specifier|public
class|class
name|GenSparkSkewJoinProcessor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GenSparkSkewJoinProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|GenSparkSkewJoinProcessor
parameter_list|()
block|{
comment|// prevent instantiation
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|void
name|processSkewJoin
parameter_list|(
name|JoinOperator
name|joinOp
parameter_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|currTask
parameter_list|,
name|ReduceWork
name|reduceWork
parameter_list|,
name|ParseContext
name|parseCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|SparkWork
name|currentWork
init|=
operator|(
operator|(
name|SparkTask
operator|)
name|currTask
operator|)
operator|.
name|getWork
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentWork
operator|.
name|getChildren
argument_list|(
name|reduceWork
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skip runtime skew join as the ReduceWork has child work and hasn't been split."
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|children
init|=
name|currTask
operator|.
name|getChildTasks
argument_list|()
decl_stmt|;
name|Path
name|baseTmpDir
init|=
name|parseCtx
operator|.
name|getContext
argument_list|()
operator|.
name|getMRTmpPath
argument_list|()
decl_stmt|;
name|JoinDesc
name|joinDescriptor
init|=
name|joinOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|joinValues
init|=
name|joinDescriptor
operator|.
name|getExprs
argument_list|()
decl_stmt|;
name|int
name|numAliases
init|=
name|joinValues
operator|.
name|size
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|Path
argument_list|>
name|bigKeysDirMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|Path
argument_list|>
argument_list|>
name|smallKeysDirMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|Path
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|Path
argument_list|>
name|skewJoinJobResultsDir
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|Byte
index|[]
name|tags
init|=
name|joinDescriptor
operator|.
name|getTagOrder
argument_list|()
decl_stmt|;
comment|// for each joining table, set dir for big key and small keys properly
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAliases
condition|;
name|i
operator|++
control|)
block|{
name|Byte
name|alias
init|=
name|tags
index|[
name|i
index|]
decl_stmt|;
name|bigKeysDirMap
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|GenMRSkewJoinProcessor
operator|.
name|getBigKeysDir
argument_list|(
name|baseTmpDir
argument_list|,
name|alias
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|Path
argument_list|>
name|smallKeysMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|smallKeysDirMap
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|smallKeysMap
argument_list|)
expr_stmt|;
for|for
control|(
name|Byte
name|src2
range|:
name|tags
control|)
block|{
if|if
condition|(
operator|!
name|src2
operator|.
name|equals
argument_list|(
name|alias
argument_list|)
condition|)
block|{
name|smallKeysMap
operator|.
name|put
argument_list|(
name|src2
argument_list|,
name|GenMRSkewJoinProcessor
operator|.
name|getSmallKeysDir
argument_list|(
name|baseTmpDir
argument_list|,
name|alias
argument_list|,
name|src2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|skewJoinJobResultsDir
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|GenMRSkewJoinProcessor
operator|.
name|getBigKeysSkewJoinResultDir
argument_list|(
name|baseTmpDir
argument_list|,
name|alias
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|joinDescriptor
operator|.
name|setHandleSkewJoin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|joinDescriptor
operator|.
name|setBigKeysDirMap
argument_list|(
name|bigKeysDirMap
argument_list|)
expr_stmt|;
name|joinDescriptor
operator|.
name|setSmallKeysDirMap
argument_list|(
name|smallKeysDirMap
argument_list|)
expr_stmt|;
name|joinDescriptor
operator|.
name|setSkewKeyDefinition
argument_list|(
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|parseCtx
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESKEWJOINKEY
argument_list|)
argument_list|)
expr_stmt|;
comment|// create proper table/column desc for spilled tables
name|TableDesc
name|keyTblDesc
init|=
operator|(
name|TableDesc
operator|)
name|reduceWork
operator|.
name|getKeyDesc
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|joinKeys
init|=
name|Utilities
operator|.
name|getColumnNames
argument_list|(
name|keyTblDesc
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|joinKeyTypes
init|=
name|Utilities
operator|.
name|getColumnTypes
argument_list|(
name|keyTblDesc
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|TableDesc
argument_list|>
name|tableDescList
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|TableDesc
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|RowSchema
argument_list|>
name|rowSchemaList
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|RowSchema
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|newJoinValues
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|newJoinKeys
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// used for create mapJoinDesc, should be in order
name|List
argument_list|<
name|TableDesc
argument_list|>
name|newJoinValueTblDesc
init|=
operator|new
name|ArrayList
argument_list|<
name|TableDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tags
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newJoinValueTblDesc
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAliases
condition|;
name|i
operator|++
control|)
block|{
name|Byte
name|alias
init|=
name|tags
index|[
name|i
index|]
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueCols
init|=
name|joinValues
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
name|String
name|colNames
init|=
literal|""
decl_stmt|;
name|String
name|colTypes
init|=
literal|""
decl_stmt|;
name|int
name|columnSize
init|=
name|valueCols
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|newValueExpr
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|newKeyExpr
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|columnInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|columnSize
condition|;
name|k
operator|++
control|)
block|{
name|TypeInfo
name|type
init|=
name|valueCols
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
name|String
name|newColName
init|=
name|i
operator|+
literal|"_VALUE_"
operator|+
name|k
decl_stmt|;
comment|// any name, it does not matter.
name|ColumnInfo
name|columnInfo
init|=
operator|new
name|ColumnInfo
argument_list|(
name|newColName
argument_list|,
name|type
argument_list|,
name|alias
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|columnInfos
operator|.
name|add
argument_list|(
name|columnInfo
argument_list|)
expr_stmt|;
name|newValueExpr
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|columnInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|columnInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|columnInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|colNames
operator|=
name|colNames
operator|+
literal|","
expr_stmt|;
name|colTypes
operator|=
name|colTypes
operator|+
literal|","
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|colNames
operator|=
name|colNames
operator|+
name|newColName
expr_stmt|;
name|colTypes
operator|=
name|colTypes
operator|+
name|valueCols
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|getTypeString
argument_list|()
expr_stmt|;
block|}
comment|// we are putting join keys at last part of the spilled table
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|joinKeys
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|colNames
operator|=
name|colNames
operator|+
literal|","
expr_stmt|;
name|colTypes
operator|=
name|colTypes
operator|+
literal|","
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|colNames
operator|=
name|colNames
operator|+
name|joinKeys
operator|.
name|get
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|colTypes
operator|=
name|colTypes
operator|+
name|joinKeyTypes
operator|.
name|get
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|ColumnInfo
name|columnInfo
init|=
operator|new
name|ColumnInfo
argument_list|(
name|joinKeys
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|,
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|joinKeyTypes
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
argument_list|,
name|alias
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|columnInfos
operator|.
name|add
argument_list|(
name|columnInfo
argument_list|)
expr_stmt|;
name|newKeyExpr
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|columnInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|columnInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|columnInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newJoinValues
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|newValueExpr
argument_list|)
expr_stmt|;
name|newJoinKeys
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|newKeyExpr
argument_list|)
expr_stmt|;
name|tableDescList
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|colNames
argument_list|,
name|colTypes
argument_list|)
argument_list|)
expr_stmt|;
name|rowSchemaList
operator|.
name|put
argument_list|(
name|alias
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|columnInfos
argument_list|)
argument_list|)
expr_stmt|;
comment|// construct value table Desc
name|String
name|valueColNames
init|=
literal|""
decl_stmt|;
name|String
name|valueColTypes
init|=
literal|""
decl_stmt|;
name|first
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|columnSize
condition|;
name|k
operator|++
control|)
block|{
name|String
name|newColName
init|=
name|i
operator|+
literal|"_VALUE_"
operator|+
name|k
decl_stmt|;
comment|// any name, it does not matter.
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|valueColNames
operator|=
name|valueColNames
operator|+
literal|","
expr_stmt|;
name|valueColTypes
operator|=
name|valueColTypes
operator|+
literal|","
expr_stmt|;
block|}
name|valueColNames
operator|=
name|valueColNames
operator|+
name|newColName
expr_stmt|;
name|valueColTypes
operator|=
name|valueColTypes
operator|+
name|valueCols
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|getTypeString
argument_list|()
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|newJoinValueTblDesc
operator|.
name|set
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|,
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|valueColNames
argument_list|,
name|valueColTypes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|joinDescriptor
operator|.
name|setSkewKeysValuesTables
argument_list|(
name|tableDescList
argument_list|)
expr_stmt|;
name|joinDescriptor
operator|.
name|setKeyTableDesc
argument_list|(
name|keyTblDesc
argument_list|)
expr_stmt|;
comment|// create N-1 map join tasks
name|HashMap
argument_list|<
name|Path
argument_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|bigKeysDirToTaskMap
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Serializable
argument_list|>
name|listWorks
init|=
operator|new
name|ArrayList
argument_list|<
name|Serializable
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|listTasks
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAliases
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Byte
name|src
init|=
name|tags
index|[
name|i
index|]
decl_stmt|;
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|parseCtx
operator|.
name|getConf
argument_list|()
argument_list|,
name|GenSparkSkewJoinProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
name|SparkWork
name|sparkWork
init|=
operator|new
name|SparkWork
argument_list|(
name|parseCtx
operator|.
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|skewJoinMapJoinTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
name|sparkWork
argument_list|,
name|hiveConf
argument_list|)
decl_stmt|;
name|skewJoinMapJoinTask
operator|.
name|setFetchSource
argument_list|(
name|currTask
operator|.
name|isFetchSource
argument_list|()
argument_list|)
expr_stmt|;
comment|// create N TableScans
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
index|[]
name|parentOps
init|=
operator|new
name|TableScanOperator
index|[
name|tags
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|tags
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|ts
init|=
name|GenMapRedUtils
operator|.
name|createTemporaryTableScanOperator
argument_list|(
name|joinOp
operator|.
name|getCompilationOpContext
argument_list|()
argument_list|,
name|rowSchemaList
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|k
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|TableScanOperator
operator|)
name|ts
operator|)
operator|.
name|setTableDescSkewJoin
argument_list|(
name|tableDescList
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|k
argument_list|)
argument_list|)
expr_stmt|;
name|parentOps
index|[
name|k
index|]
operator|=
name|ts
expr_stmt|;
block|}
comment|// create the MapJoinOperator
name|String
name|dumpFilePrefix
init|=
literal|"mapfile"
operator|+
name|PlanUtils
operator|.
name|getCountForMapJoinDumpFilePrefix
argument_list|()
decl_stmt|;
name|MapJoinDesc
name|mapJoinDescriptor
init|=
operator|new
name|MapJoinDesc
argument_list|(
name|newJoinKeys
argument_list|,
name|keyTblDesc
argument_list|,
name|newJoinValues
argument_list|,
name|newJoinValueTblDesc
argument_list|,
name|newJoinValueTblDesc
argument_list|,
name|joinDescriptor
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|,
name|i
argument_list|,
name|joinDescriptor
operator|.
name|getConds
argument_list|()
argument_list|,
name|joinDescriptor
operator|.
name|getFilters
argument_list|()
argument_list|,
name|joinDescriptor
operator|.
name|getNoOuterJoin
argument_list|()
argument_list|,
name|dumpFilePrefix
argument_list|,
name|joinDescriptor
operator|.
name|getNoConditionalTaskSize
argument_list|()
argument_list|,
name|joinDescriptor
operator|.
name|getInMemoryDataSize
argument_list|()
argument_list|)
decl_stmt|;
name|mapJoinDescriptor
operator|.
name|setTagOrder
argument_list|(
name|tags
argument_list|)
expr_stmt|;
name|mapJoinDescriptor
operator|.
name|setHandleSkewJoin
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mapJoinDescriptor
operator|.
name|setNullSafes
argument_list|(
name|joinDescriptor
operator|.
name|getNullSafes
argument_list|()
argument_list|)
expr_stmt|;
comment|// temporarily, mark it as child of all the TS
name|MapJoinOperator
name|mapJoinOp
init|=
operator|(
name|MapJoinOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|joinOp
operator|.
name|getCompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDescriptor
argument_list|,
literal|null
argument_list|,
name|parentOps
argument_list|)
decl_stmt|;
comment|// clone the original join operator, and replace it with the MJ
comment|// this makes sure MJ has the same downstream operator plan as the original join
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|reducerList
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|reducerList
operator|.
name|add
argument_list|(
name|reduceWork
operator|.
name|getReducer
argument_list|()
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|reducer
init|=
name|SerializationUtilities
operator|.
name|cloneOperatorTree
argument_list|(
name|reducerList
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|reducer
operator|instanceof
name|JoinOperator
argument_list|,
literal|"Reducer should be join operator, but actually is "
operator|+
name|reducer
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|JoinOperator
name|cloneJoinOp
init|=
operator|(
name|JoinOperator
operator|)
name|reducer
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|childOps
init|=
name|cloneJoinOp
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
range|:
name|childOps
control|)
block|{
name|childOp
operator|.
name|replaceParent
argument_list|(
name|cloneJoinOp
argument_list|,
name|mapJoinOp
argument_list|)
expr_stmt|;
block|}
name|mapJoinOp
operator|.
name|setChildOperators
argument_list|(
name|childOps
argument_list|)
expr_stmt|;
comment|// set memory usage for the MJ operator
name|setMemUsage
argument_list|(
name|mapJoinOp
argument_list|,
name|skewJoinMapJoinTask
argument_list|,
name|parseCtx
argument_list|)
expr_stmt|;
comment|// create N MapWorks and add them to the SparkWork
name|MapWork
name|bigMapWork
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|Path
argument_list|>
name|smallTblDirs
init|=
name|smallKeysDirMap
operator|.
name|get
argument_list|(
name|src
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tags
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|MapWork
name|mapWork
init|=
name|PlanUtils
operator|.
name|getMapRedWork
argument_list|()
operator|.
name|getMapWork
argument_list|()
decl_stmt|;
name|sparkWork
operator|.
name|add
argument_list|(
name|mapWork
argument_list|)
expr_stmt|;
comment|// This code has been only added for testing
name|boolean
name|mapperCannotSpanPartns
init|=
name|parseCtx
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_MAPPER_CANNOT_SPAN_MULTIPLE_PARTITIONS
argument_list|)
decl_stmt|;
name|mapWork
operator|.
name|setMapperCannotSpanPartns
argument_list|(
name|mapperCannotSpanPartns
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|tableScan
init|=
name|parentOps
index|[
name|j
index|]
decl_stmt|;
name|String
name|alias
init|=
name|tags
index|[
name|j
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|aliases
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|aliases
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
name|Path
name|path
decl_stmt|;
if|if
condition|(
name|j
operator|==
name|i
condition|)
block|{
name|path
operator|=
name|bigKeysDirMap
operator|.
name|get
argument_list|(
name|tags
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|bigKeysDirToTaskMap
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|skewJoinMapJoinTask
argument_list|)
expr_stmt|;
name|bigMapWork
operator|=
name|mapWork
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|smallTblDirs
operator|.
name|get
argument_list|(
name|tags
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|mapWork
operator|.
name|addPathToAlias
argument_list|(
name|path
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|tableScan
argument_list|)
expr_stmt|;
name|PartitionDesc
name|partitionDesc
init|=
operator|new
name|PartitionDesc
argument_list|(
name|tableDescList
operator|.
name|get
argument_list|(
name|tags
index|[
name|j
index|]
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mapWork
operator|.
name|addPathToPartitionInfo
argument_list|(
name|path
argument_list|,
name|partitionDesc
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|getAliasToPartnInfo
argument_list|()
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|partitionDesc
argument_list|)
expr_stmt|;
name|mapWork
operator|.
name|setName
argument_list|(
literal|"Map "
operator|+
name|GenSparkUtils
operator|.
name|getUtils
argument_list|()
operator|.
name|getNextSeqNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// connect all small dir map work to the big dir map work
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|bigMapWork
operator|!=
literal|null
argument_list|,
literal|"Haven't identified big dir MapWork"
argument_list|)
expr_stmt|;
comment|// these 2 flags are intended only for the big-key map work
name|bigMapWork
operator|.
name|setNumMapTasks
argument_list|(
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESKEWJOINMAPJOINNUMMAPTASK
argument_list|)
argument_list|)
expr_stmt|;
name|bigMapWork
operator|.
name|setMinSplitSize
argument_list|(
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESKEWJOINMAPJOINMINSPLIT
argument_list|)
argument_list|)
expr_stmt|;
comment|// use HiveInputFormat so that we can control the number of map tasks
name|bigMapWork
operator|.
name|setInputformat
argument_list|(
name|HiveInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BaseWork
name|work
range|:
name|sparkWork
operator|.
name|getRoots
argument_list|()
control|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|work
operator|instanceof
name|MapWork
argument_list|,
literal|"All root work should be MapWork, but got "
operator|+
name|work
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|work
operator|!=
name|bigMapWork
condition|)
block|{
name|sparkWork
operator|.
name|connect
argument_list|(
name|work
argument_list|,
name|bigMapWork
argument_list|,
operator|new
name|SparkEdgeProperty
argument_list|(
name|SparkEdgeProperty
operator|.
name|SHUFFLE_NONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// insert SparkHashTableSink and Dummy operators
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tags
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|!=
name|i
condition|)
block|{
name|insertSHTS
argument_list|(
name|tags
index|[
name|j
index|]
argument_list|,
operator|(
name|TableScanOperator
operator|)
name|parentOps
index|[
name|j
index|]
argument_list|,
name|bigMapWork
argument_list|)
expr_stmt|;
block|}
block|}
name|listWorks
operator|.
name|add
argument_list|(
name|skewJoinMapJoinTask
operator|.
name|getWork
argument_list|()
argument_list|)
expr_stmt|;
name|listTasks
operator|.
name|add
argument_list|(
name|skewJoinMapJoinTask
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|listTasks
control|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|oldChild
range|:
name|children
control|)
block|{
name|tsk
operator|.
name|addDependentTask
argument_list|(
name|oldChild
argument_list|)
expr_stmt|;
block|}
block|}
name|currTask
operator|.
name|setChildTasks
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|oldChild
range|:
name|children
control|)
block|{
name|oldChild
operator|.
name|getParentTasks
argument_list|()
operator|.
name|remove
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
block|}
name|listTasks
operator|.
name|addAll
argument_list|(
name|children
argument_list|)
expr_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|oldChild
range|:
name|children
control|)
block|{
name|listWorks
operator|.
name|add
argument_list|(
name|oldChild
operator|.
name|getWork
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ConditionalResolverSkewJoin
operator|.
name|ConditionalResolverSkewJoinCtx
name|context
init|=
operator|new
name|ConditionalResolverSkewJoin
operator|.
name|ConditionalResolverSkewJoinCtx
argument_list|(
name|bigKeysDirToTaskMap
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|ConditionalWork
name|cndWork
init|=
operator|new
name|ConditionalWork
argument_list|(
name|listWorks
argument_list|)
decl_stmt|;
name|ConditionalTask
name|cndTsk
init|=
operator|(
name|ConditionalTask
operator|)
name|TaskFactory
operator|.
name|get
argument_list|(
name|cndWork
argument_list|,
name|parseCtx
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|cndTsk
operator|.
name|setListTasks
argument_list|(
name|listTasks
argument_list|)
expr_stmt|;
name|cndTsk
operator|.
name|setResolver
argument_list|(
operator|new
name|ConditionalResolverSkewJoin
argument_list|()
argument_list|)
expr_stmt|;
name|cndTsk
operator|.
name|setResolverCtx
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|currTask
operator|.
name|setChildTasks
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|currTask
operator|.
name|addDependentTask
argument_list|(
name|cndTsk
argument_list|)
expr_stmt|;
block|}
comment|/**    * Insert SparkHashTableSink and HashTableDummy between small dir TS and MJ.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|void
name|insertSHTS
parameter_list|(
name|byte
name|tag
parameter_list|,
name|TableScanOperator
name|tableScan
parameter_list|,
name|MapWork
name|bigMapWork
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|tableScan
operator|.
name|getChildOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|tableScan
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|MapJoinOperator
argument_list|)
expr_stmt|;
name|HashTableDummyDesc
name|desc
init|=
operator|new
name|HashTableDummyDesc
argument_list|()
decl_stmt|;
name|HashTableDummyOperator
name|dummyOp
init|=
operator|(
name|HashTableDummyOperator
operator|)
name|OperatorFactory
operator|.
name|get
argument_list|(
name|tableScan
operator|.
name|getCompilationOpContext
argument_list|()
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|dummyOp
operator|.
name|getConf
argument_list|()
operator|.
name|setTbl
argument_list|(
name|tableScan
operator|.
name|getTableDescSkewJoin
argument_list|()
argument_list|)
expr_stmt|;
name|MapJoinOperator
name|mapJoinOp
init|=
operator|(
name|MapJoinOperator
operator|)
name|tableScan
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|mapJoinOp
operator|.
name|replaceParent
argument_list|(
name|tableScan
argument_list|,
name|dummyOp
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|mapJoinChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|mapJoinChildren
operator|.
name|add
argument_list|(
name|mapJoinOp
argument_list|)
expr_stmt|;
name|dummyOp
operator|.
name|setChildOperators
argument_list|(
name|mapJoinChildren
argument_list|)
expr_stmt|;
name|bigMapWork
operator|.
name|addDummyOp
argument_list|(
name|dummyOp
argument_list|)
expr_stmt|;
name|MapJoinDesc
name|mjDesc
init|=
name|mapJoinOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// mapjoin should not be affected by join reordering
name|mjDesc
operator|.
name|resetOrder
argument_list|()
expr_stmt|;
name|SparkHashTableSinkDesc
name|hashTableSinkDesc
init|=
operator|new
name|SparkHashTableSinkDesc
argument_list|(
name|mjDesc
argument_list|)
decl_stmt|;
name|SparkHashTableSinkOperator
name|hashTableSinkOp
init|=
operator|(
name|SparkHashTableSinkOperator
operator|)
name|OperatorFactory
operator|.
name|get
argument_list|(
name|tableScan
operator|.
name|getCompilationOpContext
argument_list|()
argument_list|,
name|hashTableSinkDesc
argument_list|)
decl_stmt|;
name|int
index|[]
name|valueIndex
init|=
name|mjDesc
operator|.
name|getValueIndex
argument_list|(
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueIndex
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|newValues
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|values
init|=
name|hashTableSinkDesc
operator|.
name|getExprs
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|valueIndex
index|[
name|index
index|]
operator|<
literal|0
condition|)
block|{
name|newValues
operator|.
name|add
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|hashTableSinkDesc
operator|.
name|getExprs
argument_list|()
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|newValues
argument_list|)
expr_stmt|;
block|}
name|tableScan
operator|.
name|replaceChild
argument_list|(
name|mapJoinOp
argument_list|,
name|hashTableSinkOp
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|tableScanParents
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|tableScanParents
operator|.
name|add
argument_list|(
name|tableScan
argument_list|)
expr_stmt|;
name|hashTableSinkOp
operator|.
name|setParentOperators
argument_list|(
name|tableScanParents
argument_list|)
expr_stmt|;
name|hashTableSinkOp
operator|.
name|getConf
argument_list|()
operator|.
name|setTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setMemUsage
parameter_list|(
name|MapJoinOperator
name|mapJoinOp
parameter_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|)
block|{
name|MapJoinResolver
operator|.
name|LocalMapJoinProcCtx
name|context
init|=
operator|new
name|MapJoinResolver
operator|.
name|LocalMapJoinProcCtx
argument_list|(
name|task
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|LocalMapJoinProcFactory
operator|.
name|LocalMapJoinProcessor
argument_list|()
operator|.
name|hasGroupBy
argument_list|(
name|mapJoinOp
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error setting memory usage."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|MapJoinDesc
name|mapJoinDesc
init|=
name|mapJoinOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|HiveConf
name|conf
init|=
name|context
operator|.
name|getParseCtx
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|float
name|hashtableMemoryUsage
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isFollowedByGroupBy
argument_list|()
condition|)
block|{
name|hashtableMemoryUsage
operator|=
name|conf
operator|.
name|getFloatVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEHASHTABLEFOLLOWBYGBYMAXMEMORYUSAGE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hashtableMemoryUsage
operator|=
name|conf
operator|.
name|getFloatVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEHASHTABLEMAXMEMORYUSAGE
argument_list|)
expr_stmt|;
block|}
name|mapJoinDesc
operator|.
name|setHashTableMemoryUsage
argument_list|(
name|hashtableMemoryUsage
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

