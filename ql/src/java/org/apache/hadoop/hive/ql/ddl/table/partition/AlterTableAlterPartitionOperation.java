begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_comment
comment|/**  * Operation process of altering a partition to a table.  */
end_comment

begin_class
specifier|public
class|class
name|AlterTableAlterPartitionOperation
extends|extends
name|DDLOperation
argument_list|<
name|AlterTableAlterPartitionDesc
argument_list|>
block|{
specifier|public
name|AlterTableAlterPartitionOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|AlterTableAlterPartitionDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
name|Table
name|tbl
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|setNewPartitionKeys
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|alterTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|private
name|void
name|check
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|HiveException
block|{
assert|assert
operator|(
name|tbl
operator|.
name|isPartitioned
argument_list|()
operator|)
assert|;
try|try
block|{
name|int
name|colIndex
init|=
name|getColumnIndex
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|checkPartitionValues
argument_list|(
name|tbl
argument_list|,
name|colIndex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Exception while checking type conversion of existing partition values to "
operator|+
name|desc
operator|.
name|getPartKeySpec
argument_list|()
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|int
name|getColumnIndex
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|colIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|colIndex
operator|++
expr_stmt|;
if|if
condition|(
name|col
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|desc
operator|.
name|getPartKeyName
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|colIndex
return|;
block|}
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Cannot find partition column "
operator|+
name|desc
operator|.
name|getPartKeyName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Check if the existing partition values can be type casted to the new column type    * with a non null value before trying to alter the partition column type.    */
specifier|private
name|void
name|checkPartitionValues
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|int
name|colIndex
parameter_list|)
throws|throws
name|HiveException
block|{
name|TypeInfo
name|expectedType
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|desc
operator|.
name|getPartKeyType
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectInspector
name|outputOI
init|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|expectedType
argument_list|)
decl_stmt|;
name|Converter
name|converter
init|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|,
name|outputOI
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getAllPartitionsOf
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|partitions
control|)
block|{
if|if
condition|(
name|part
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|String
name|value
init|=
name|part
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|colIndex
argument_list|)
decl_stmt|;
name|Object
name|convertedValue
init|=
name|converter
operator|.
name|convert
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|convertedValue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|" Converting from "
operator|+
name|TypeInfoFactory
operator|.
name|stringTypeInfo
operator|+
literal|" to "
operator|+
name|expectedType
operator|+
literal|" for value : "
operator|+
name|value
operator|+
literal|" resulted in NULL object"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Exception while converting "
operator|+
name|TypeInfoFactory
operator|.
name|stringTypeInfo
operator|+
literal|" to "
operator|+
name|expectedType
operator|+
literal|" for value : "
operator|+
name|part
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|colIndex
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|setNewPartitionKeys
parameter_list|(
name|Table
name|tbl
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newPartitionKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
if|if
condition|(
name|col
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|desc
operator|.
name|getPartKeyName
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
name|newPartitionKeys
operator|.
name|add
argument_list|(
name|desc
operator|.
name|getPartKeySpec
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newPartitionKeys
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
block|}
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|setPartitionKeys
argument_list|(
name|newPartitionKeys
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|alterTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|HiveException
block|{
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|alterTable
argument_list|(
name|tbl
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|getWork
argument_list|()
operator|.
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|tbl
argument_list|)
argument_list|)
expr_stmt|;
comment|// We've already locked the table as the input, don't relock it as the output.
name|DDLUtils
operator|.
name|addIfAbsentByName
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|tbl
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

