begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|VectorAggregateExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorAggregationBufferRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|JavaDataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_comment
comment|/**  * Generated from template VectorUDAFAvg.txt.  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"avg"
argument_list|,
name|value
operator|=
literal|"_FUNC_(expr) - Returns the average value of expr (vectorized, type: timestamp)"
argument_list|)
specifier|public
class|class
name|VectorUDAFAvgTimestamp
extends|extends
name|VectorAggregateExpression
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/** class for storing the current aggregate value. */
specifier|static
class|class
name|Aggregation
implements|implements
name|AggregationBuffer
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|transient
specifier|private
name|double
name|sum
decl_stmt|;
specifier|transient
specifier|private
name|long
name|count
decl_stmt|;
comment|/**       * Value is explicitly (re)initialized in reset()       */
specifier|transient
specifier|private
name|boolean
name|isNull
init|=
literal|true
decl_stmt|;
specifier|public
name|void
name|sumValue
parameter_list|(
name|double
name|value
parameter_list|)
block|{
if|if
condition|(
name|isNull
condition|)
block|{
name|sum
operator|=
name|value
expr_stmt|;
name|count
operator|=
literal|1
expr_stmt|;
name|isNull
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sum
operator|+=
name|value
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getVariableSize
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|isNull
operator|=
literal|true
expr_stmt|;
name|sum
operator|=
literal|0
expr_stmt|;
name|count
operator|=
literal|0L
expr_stmt|;
block|}
block|}
specifier|private
name|VectorExpression
name|inputExpression
decl_stmt|;
annotation|@
name|Override
specifier|public
name|VectorExpression
name|inputExpression
parameter_list|()
block|{
return|return
name|inputExpression
return|;
block|}
specifier|transient
specifier|private
name|Object
index|[]
name|partialResult
decl_stmt|;
specifier|transient
specifier|private
name|LongWritable
name|resultCount
decl_stmt|;
specifier|transient
specifier|private
name|DoubleWritable
name|resultSum
decl_stmt|;
specifier|transient
specifier|private
name|StructObjectInspector
name|soi
decl_stmt|;
specifier|public
name|VectorUDAFAvgTimestamp
parameter_list|(
name|VectorExpression
name|inputExpression
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|inputExpression
operator|=
name|inputExpression
expr_stmt|;
block|}
specifier|public
name|VectorUDAFAvgTimestamp
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|partialResult
operator|=
operator|new
name|Object
index|[
literal|2
index|]
expr_stmt|;
name|resultCount
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
name|resultSum
operator|=
operator|new
name|DoubleWritable
argument_list|()
expr_stmt|;
name|partialResult
index|[
literal|0
index|]
operator|=
name|resultCount
expr_stmt|;
name|partialResult
index|[
literal|1
index|]
operator|=
name|resultSum
expr_stmt|;
name|initPartialResultInspector
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initPartialResultInspector
parameter_list|()
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|foi
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fname
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"sum"
argument_list|)
expr_stmt|;
name|soi
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fname
argument_list|,
name|foi
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Aggregation
name|getCurrentAggregationBuffer
parameter_list|(
name|VectorAggregationBufferRow
index|[]
name|aggregationBufferSets
parameter_list|,
name|int
name|bufferIndex
parameter_list|,
name|int
name|row
parameter_list|)
block|{
name|VectorAggregationBufferRow
name|mySet
init|=
name|aggregationBufferSets
index|[
name|row
index|]
decl_stmt|;
name|Aggregation
name|myagg
init|=
operator|(
name|Aggregation
operator|)
name|mySet
operator|.
name|getAggregationBuffer
argument_list|(
name|bufferIndex
argument_list|)
decl_stmt|;
return|return
name|myagg
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|aggregateInputSelection
parameter_list|(
name|VectorAggregationBufferRow
index|[]
name|aggregationBufferSets
parameter_list|,
name|int
name|bufferIndex
parameter_list|,
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|batchSize
init|=
name|batch
operator|.
name|size
decl_stmt|;
if|if
condition|(
name|batchSize
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|inputExpression
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TimestampColumnVector
name|inputColVector
init|=
operator|(
name|TimestampColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|this
operator|.
name|inputExpression
operator|.
name|getOutputColumn
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|inputColVector
operator|.
name|noNulls
condition|)
block|{
if|if
condition|(
name|inputColVector
operator|.
name|isRepeating
condition|)
block|{
name|iterateNoNullsRepeatingWithAggregationSelection
argument_list|(
name|aggregationBufferSets
argument_list|,
name|bufferIndex
argument_list|,
name|inputColVector
operator|.
name|getDouble
argument_list|(
literal|0
argument_list|)
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|iterateNoNullsSelectionWithAggregationSelection
argument_list|(
name|aggregationBufferSets
argument_list|,
name|bufferIndex
argument_list|,
name|inputColVector
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iterateNoNullsWithAggregationSelection
argument_list|(
name|aggregationBufferSets
argument_list|,
name|bufferIndex
argument_list|,
name|inputColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|inputColVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|iterateHasNullsRepeatingSelectionWithAggregationSelection
argument_list|(
name|aggregationBufferSets
argument_list|,
name|bufferIndex
argument_list|,
name|inputColVector
operator|.
name|getDouble
argument_list|(
literal|0
argument_list|)
argument_list|,
name|batchSize
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
name|inputColVector
operator|.
name|isNull
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iterateHasNullsRepeatingWithAggregationSelection
argument_list|(
name|aggregationBufferSets
argument_list|,
name|bufferIndex
argument_list|,
name|inputColVector
operator|.
name|getDouble
argument_list|(
literal|0
argument_list|)
argument_list|,
name|batchSize
argument_list|,
name|inputColVector
operator|.
name|isNull
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|iterateHasNullsSelectionWithAggregationSelection
argument_list|(
name|aggregationBufferSets
argument_list|,
name|bufferIndex
argument_list|,
name|inputColVector
argument_list|,
name|batchSize
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
name|inputColVector
operator|.
name|isNull
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iterateHasNullsWithAggregationSelection
argument_list|(
name|aggregationBufferSets
argument_list|,
name|bufferIndex
argument_list|,
name|inputColVector
argument_list|,
name|batchSize
argument_list|,
name|inputColVector
operator|.
name|isNull
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|iterateNoNullsRepeatingWithAggregationSelection
parameter_list|(
name|VectorAggregationBufferRow
index|[]
name|aggregationBufferSets
parameter_list|,
name|int
name|bufferIndex
parameter_list|,
name|double
name|value
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
operator|++
name|i
control|)
block|{
name|Aggregation
name|myagg
init|=
name|getCurrentAggregationBuffer
argument_list|(
name|aggregationBufferSets
argument_list|,
name|bufferIndex
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|myagg
operator|.
name|sumValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|iterateNoNullsSelectionWithAggregationSelection
parameter_list|(
name|VectorAggregationBufferRow
index|[]
name|aggregationBufferSets
parameter_list|,
name|int
name|bufferIndex
parameter_list|,
name|TimestampColumnVector
name|inputColVector
parameter_list|,
name|int
index|[]
name|selection
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
operator|++
name|i
control|)
block|{
name|Aggregation
name|myagg
init|=
name|getCurrentAggregationBuffer
argument_list|(
name|aggregationBufferSets
argument_list|,
name|bufferIndex
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|myagg
operator|.
name|sumValue
argument_list|(
name|inputColVector
operator|.
name|getDouble
argument_list|(
name|selection
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|iterateNoNullsWithAggregationSelection
parameter_list|(
name|VectorAggregationBufferRow
index|[]
name|aggregationBufferSets
parameter_list|,
name|int
name|bufferIndex
parameter_list|,
name|TimestampColumnVector
name|inputColVector
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
operator|++
name|i
control|)
block|{
name|Aggregation
name|myagg
init|=
name|getCurrentAggregationBuffer
argument_list|(
name|aggregationBufferSets
argument_list|,
name|bufferIndex
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|myagg
operator|.
name|sumValue
argument_list|(
name|inputColVector
operator|.
name|getDouble
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|iterateHasNullsRepeatingSelectionWithAggregationSelection
parameter_list|(
name|VectorAggregationBufferRow
index|[]
name|aggregationBufferSets
parameter_list|,
name|int
name|bufferIndex
parameter_list|,
name|double
name|value
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|int
index|[]
name|selection
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|isNull
index|[
name|selection
index|[
name|i
index|]
index|]
condition|)
block|{
name|Aggregation
name|myagg
init|=
name|getCurrentAggregationBuffer
argument_list|(
name|aggregationBufferSets
argument_list|,
name|bufferIndex
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|myagg
operator|.
name|sumValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|iterateHasNullsRepeatingWithAggregationSelection
parameter_list|(
name|VectorAggregationBufferRow
index|[]
name|aggregationBufferSets
parameter_list|,
name|int
name|bufferIndex
parameter_list|,
name|double
name|value
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|Aggregation
name|myagg
init|=
name|getCurrentAggregationBuffer
argument_list|(
name|aggregationBufferSets
argument_list|,
name|bufferIndex
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|myagg
operator|.
name|sumValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|iterateHasNullsSelectionWithAggregationSelection
parameter_list|(
name|VectorAggregationBufferRow
index|[]
name|aggregationBufferSets
parameter_list|,
name|int
name|bufferIndex
parameter_list|,
name|TimestampColumnVector
name|inputColVector
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|int
index|[]
name|selection
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|batchSize
condition|;
operator|++
name|j
control|)
block|{
name|int
name|i
init|=
name|selection
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|Aggregation
name|myagg
init|=
name|getCurrentAggregationBuffer
argument_list|(
name|aggregationBufferSets
argument_list|,
name|bufferIndex
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|myagg
operator|.
name|sumValue
argument_list|(
name|inputColVector
operator|.
name|getDouble
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|iterateHasNullsWithAggregationSelection
parameter_list|(
name|VectorAggregationBufferRow
index|[]
name|aggregationBufferSets
parameter_list|,
name|int
name|bufferIndex
parameter_list|,
name|TimestampColumnVector
name|inputColVector
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|Aggregation
name|myagg
init|=
name|getCurrentAggregationBuffer
argument_list|(
name|aggregationBufferSets
argument_list|,
name|bufferIndex
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|myagg
operator|.
name|sumValue
argument_list|(
name|inputColVector
operator|.
name|getDouble
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|aggregateInput
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
name|inputExpression
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|TimestampColumnVector
name|inputColVector
init|=
operator|(
name|TimestampColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|this
operator|.
name|inputExpression
operator|.
name|getOutputColumn
argument_list|()
index|]
decl_stmt|;
name|int
name|batchSize
init|=
name|batch
operator|.
name|size
decl_stmt|;
if|if
condition|(
name|batchSize
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Aggregation
name|myagg
init|=
operator|(
name|Aggregation
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|inputColVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|inputColVector
operator|.
name|noNulls
condition|)
block|{
if|if
condition|(
name|myagg
operator|.
name|isNull
condition|)
block|{
name|myagg
operator|.
name|isNull
operator|=
literal|false
expr_stmt|;
name|myagg
operator|.
name|sum
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|count
operator|=
literal|0
expr_stmt|;
block|}
name|myagg
operator|.
name|sum
operator|+=
name|inputColVector
operator|.
name|getDouble
argument_list|(
literal|0
argument_list|)
operator|*
name|batchSize
expr_stmt|;
name|myagg
operator|.
name|count
operator|+=
name|batchSize
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|batch
operator|.
name|selectedInUse
operator|&&
name|inputColVector
operator|.
name|noNulls
condition|)
block|{
name|iterateNoSelectionNoNulls
argument_list|(
name|myagg
argument_list|,
name|inputColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|iterateNoSelectionHasNulls
argument_list|(
name|myagg
argument_list|,
name|inputColVector
argument_list|,
name|batchSize
argument_list|,
name|inputColVector
operator|.
name|isNull
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputColVector
operator|.
name|noNulls
condition|)
block|{
name|iterateSelectionNoNulls
argument_list|(
name|myagg
argument_list|,
name|inputColVector
argument_list|,
name|batchSize
argument_list|,
name|batch
operator|.
name|selected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iterateSelectionHasNulls
argument_list|(
name|myagg
argument_list|,
name|inputColVector
argument_list|,
name|batchSize
argument_list|,
name|inputColVector
operator|.
name|isNull
argument_list|,
name|batch
operator|.
name|selected
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|iterateSelectionHasNulls
parameter_list|(
name|Aggregation
name|myagg
parameter_list|,
name|TimestampColumnVector
name|inputColVector
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
name|int
index|[]
name|selected
parameter_list|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|batchSize
condition|;
operator|++
name|j
control|)
block|{
name|int
name|i
init|=
name|selected
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|double
name|value
init|=
name|inputColVector
operator|.
name|getDouble
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|isNull
condition|)
block|{
name|myagg
operator|.
name|isNull
operator|=
literal|false
expr_stmt|;
name|myagg
operator|.
name|sum
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|count
operator|=
literal|0
expr_stmt|;
block|}
name|myagg
operator|.
name|sum
operator|+=
name|value
expr_stmt|;
name|myagg
operator|.
name|count
operator|+=
literal|1
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|iterateSelectionNoNulls
parameter_list|(
name|Aggregation
name|myagg
parameter_list|,
name|TimestampColumnVector
name|inputColVector
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|int
index|[]
name|selected
parameter_list|)
block|{
if|if
condition|(
name|myagg
operator|.
name|isNull
condition|)
block|{
name|myagg
operator|.
name|isNull
operator|=
literal|false
expr_stmt|;
name|myagg
operator|.
name|sum
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|count
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
operator|++
name|i
control|)
block|{
name|double
name|value
init|=
name|inputColVector
operator|.
name|getDouble
argument_list|(
name|selected
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|myagg
operator|.
name|sum
operator|+=
name|value
expr_stmt|;
name|myagg
operator|.
name|count
operator|+=
literal|1
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|iterateNoSelectionHasNulls
parameter_list|(
name|Aggregation
name|myagg
parameter_list|,
name|TimestampColumnVector
name|inputColVector
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|double
name|value
init|=
name|inputColVector
operator|.
name|getDouble
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|isNull
condition|)
block|{
name|myagg
operator|.
name|isNull
operator|=
literal|false
expr_stmt|;
name|myagg
operator|.
name|sum
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|count
operator|=
literal|0
expr_stmt|;
block|}
name|myagg
operator|.
name|sum
operator|+=
name|value
expr_stmt|;
name|myagg
operator|.
name|count
operator|+=
literal|1
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|iterateNoSelectionNoNulls
parameter_list|(
name|Aggregation
name|myagg
parameter_list|,
name|TimestampColumnVector
name|inputColVector
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
if|if
condition|(
name|myagg
operator|.
name|isNull
condition|)
block|{
name|myagg
operator|.
name|isNull
operator|=
literal|false
expr_stmt|;
name|myagg
operator|.
name|sum
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|count
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
operator|++
name|i
control|)
block|{
name|double
name|value
init|=
name|inputColVector
operator|.
name|getDouble
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|myagg
operator|.
name|sum
operator|+=
name|value
expr_stmt|;
name|myagg
operator|.
name|count
operator|+=
literal|1
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
operator|new
name|Aggregation
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|Aggregation
name|myAgg
init|=
operator|(
name|Aggregation
operator|)
name|agg
decl_stmt|;
name|myAgg
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluateOutput
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|Aggregation
name|myagg
init|=
operator|(
name|Aggregation
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|isNull
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
assert|assert
operator|(
literal|0
operator|<
name|myagg
operator|.
name|count
operator|)
assert|;
name|resultCount
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|count
argument_list|)
expr_stmt|;
name|resultSum
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|sum
argument_list|)
expr_stmt|;
return|return
name|partialResult
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getOutputObjectInspector
parameter_list|()
block|{
return|return
name|soi
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getAggregationBufferFixedSize
parameter_list|()
block|{
name|JavaDataModel
name|model
init|=
name|JavaDataModel
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|JavaDataModel
operator|.
name|alignUp
argument_list|(
name|model
operator|.
name|object
argument_list|()
operator|+
name|model
operator|.
name|primitive2
argument_list|()
operator|*
literal|2
argument_list|,
name|model
operator|.
name|memoryAlign
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|AggregationDesc
name|desc
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// No-op
block|}
specifier|public
name|VectorExpression
name|getInputExpression
parameter_list|()
block|{
return|return
name|inputExpression
return|;
block|}
specifier|public
name|void
name|setInputExpression
parameter_list|(
name|VectorExpression
name|inputExpression
parameter_list|)
block|{
name|this
operator|.
name|inputExpression
operator|=
name|inputExpression
expr_stmt|;
block|}
block|}
end_class

end_unit

