begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|ExecMapperContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OpTraits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_comment
comment|/**  * Base operator implementation.  **/
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Operator
parameter_list|<
name|T
extends|extends
name|OperatorDesc
parameter_list|>
implements|implements
name|Serializable
implements|,
name|Cloneable
implements|,
name|Node
block|{
comment|// Bean methods
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HIVECOUNTERCREATEDFILES
init|=
literal|"CREATED_FILES"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HIVECOUNTERFATAL
init|=
literal|"FATAL_ERROR"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT_NAME_KEY
init|=
literal|"__hive.context.name"
decl_stmt|;
specifier|private
specifier|transient
name|Configuration
name|configuration
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|childOperators
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentOperators
decl_stmt|;
specifier|protected
name|String
name|operatorId
decl_stmt|;
specifier|private
specifier|transient
name|ExecMapperContext
name|execContext
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|rootInitializeCalled
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|AtomicInteger
name|seqId
decl_stmt|;
comment|// It can be optimized later so that an operator operator (init/close) is performed
comment|// only after that operation has been performed on all the parents. This will require
comment|// initializing the whole tree in all the mappers (which might be required for mappers
comment|// spanning multiple files anyway, in future)
comment|/**    * State.    *    */
specifier|public
specifier|static
enum|enum
name|State
block|{
name|UNINIT
block|,
comment|// initialize() has not been called
name|INIT
block|,
comment|// initialize() has been called and close() has not been called,
comment|// or close() has been called but one of its parent is not closed.
name|CLOSE
comment|// all its parents operators are in state CLOSE and called close()
comment|// to children. Note: close() being called and its state being CLOSE is
comment|// difference since close() could be called but state is not CLOSE if
comment|// one of its parent is not in state CLOSE..
block|}
specifier|protected
specifier|transient
name|State
name|state
init|=
name|State
operator|.
name|UNINIT
decl_stmt|;
static|static
block|{
name|seqId
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|useBucketizedHiveInputFormat
decl_stmt|;
comment|// dummy operator (for not increasing seqId)
specifier|private
name|Operator
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|id
operator|=
name|name
expr_stmt|;
name|initOperatorId
argument_list|()
expr_stmt|;
name|childOperators
operator|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|parentOperators
operator|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Operator
parameter_list|()
block|{
name|this
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|seqId
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|resetId
parameter_list|()
block|{
name|seqId
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an operator with a reporter.    *    * @param reporter    *          Used to report progress of certain operators.    */
specifier|public
name|Operator
parameter_list|(
name|Reporter
name|reporter
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
block|}
specifier|public
name|void
name|setChildOperators
parameter_list|(
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|childOperators
parameter_list|)
block|{
if|if
condition|(
name|childOperators
operator|==
literal|null
condition|)
block|{
name|childOperators
operator|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|childOperators
operator|=
name|childOperators
expr_stmt|;
block|}
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
specifier|public
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|getChildOperators
parameter_list|()
block|{
return|return
name|childOperators
return|;
block|}
specifier|public
name|int
name|getNumChild
parameter_list|()
block|{
return|return
name|childOperators
operator|==
literal|null
condition|?
literal|0
else|:
name|childOperators
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Implements the getChildren function for the Node Interface.    */
annotation|@
name|Override
specifier|public
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|getChildren
parameter_list|()
block|{
if|if
condition|(
name|getChildOperators
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|ret_vec
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|getChildOperators
argument_list|()
control|)
block|{
name|ret_vec
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
return|return
name|ret_vec
return|;
block|}
specifier|public
name|void
name|setParentOperators
parameter_list|(
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentOperators
parameter_list|)
block|{
if|if
condition|(
name|parentOperators
operator|==
literal|null
condition|)
block|{
name|parentOperators
operator|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|parentOperators
operator|=
name|parentOperators
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|getParentOperators
parameter_list|()
block|{
return|return
name|parentOperators
return|;
block|}
specifier|public
name|int
name|getNumParent
parameter_list|()
block|{
return|return
name|parentOperators
operator|==
literal|null
condition|?
literal|0
else|:
name|parentOperators
operator|.
name|size
argument_list|()
return|;
block|}
specifier|protected
name|T
name|conf
decl_stmt|;
specifier|protected
name|boolean
name|done
decl_stmt|;
specifier|public
name|void
name|setConf
parameter_list|(
name|T
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Explain
specifier|public
name|T
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|boolean
name|getDone
parameter_list|()
block|{
return|return
name|done
return|;
block|}
specifier|protected
specifier|final
name|void
name|setDone
parameter_list|(
name|boolean
name|done
parameter_list|)
block|{
name|this
operator|.
name|done
operator|=
name|done
expr_stmt|;
block|}
comment|// non-bean fields needed during compilation
specifier|private
name|RowSchema
name|rowSchema
decl_stmt|;
specifier|public
name|void
name|setSchema
parameter_list|(
name|RowSchema
name|rowSchema
parameter_list|)
block|{
name|this
operator|.
name|rowSchema
operator|=
name|rowSchema
expr_stmt|;
block|}
specifier|public
name|RowSchema
name|getSchema
parameter_list|()
block|{
return|return
name|rowSchema
return|;
block|}
comment|// non-bean ..
specifier|protected
specifier|transient
name|Map
argument_list|<
name|String
argument_list|,
name|LongWritable
argument_list|>
name|statsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LongWritable
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
specifier|transient
name|OutputCollector
name|out
decl_stmt|;
specifier|protected
specifier|transient
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|transient
specifier|final
name|Log
name|PLOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Operator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// for simple disabling logs from all operators
specifier|protected
specifier|transient
specifier|final
name|boolean
name|isLogInfoEnabled
init|=
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
operator|&&
name|PLOG
operator|.
name|isInfoEnabled
argument_list|()
decl_stmt|;
specifier|protected
specifier|transient
specifier|final
name|boolean
name|isLogDebugEnabled
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
name|PLOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
specifier|protected
specifier|transient
specifier|final
name|boolean
name|isLogTraceEnabled
init|=
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
operator|&&
name|PLOG
operator|.
name|isTraceEnabled
argument_list|()
decl_stmt|;
specifier|protected
specifier|transient
name|String
name|alias
decl_stmt|;
specifier|protected
specifier|transient
name|Reporter
name|reporter
decl_stmt|;
specifier|protected
specifier|transient
name|String
name|id
decl_stmt|;
comment|// object inspectors for input rows
comment|// We will increase the size of the array on demand
specifier|protected
specifier|transient
name|ObjectInspector
index|[]
name|inputObjInspectors
init|=
operator|new
name|ObjectInspector
index|[
literal|1
index|]
decl_stmt|;
comment|// for output rows of this operator
specifier|protected
specifier|transient
name|ObjectInspector
name|outputObjInspector
decl_stmt|;
comment|/**    * A map of output column name to input expression map. This is used by    * optimizer and built during semantic analysis contains only key elements for    * reduce sink and group by op    */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
decl_stmt|;
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**    * This function is not named getId(), to make sure java serialization does    * NOT serialize it. Some TestParse tests will fail if we serialize this    * field, since the Operator ID will change based on the number of query    * tests.    */
specifier|public
name|String
name|getIdentifier
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|void
name|setReporter
parameter_list|(
name|Reporter
name|rep
parameter_list|)
block|{
name|reporter
operator|=
name|rep
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|childOperators
control|)
block|{
name|op
operator|.
name|setReporter
argument_list|(
name|rep
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
name|void
name|setOutputCollector
parameter_list|(
name|OutputCollector
name|out
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|childOperators
control|)
block|{
name|op
operator|.
name|setOutputCollector
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Store the alias this operator is working on behalf of.    */
specifier|public
name|void
name|setAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|childOperators
control|)
block|{
name|op
operator|.
name|setAlias
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getStats
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|one
range|:
name|statsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|one
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|statsMap
operator|.
name|get
argument_list|(
name|one
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
comment|/**    * checks whether all parent operators are initialized or not.    *    * @return true if there are no parents or all parents are initialized. false    *         otherwise    */
specifier|protected
name|boolean
name|areAllParentsInitialized
parameter_list|()
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|parentOperators
control|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
comment|//return true;
continue|continue;
block|}
if|if
condition|(
name|parent
operator|.
name|state
operator|!=
name|State
operator|.
name|INIT
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Initializes operators only if all parents have been initialized. Calls    * operator specific initializer which then initializes child ops.    *    * @param hconf    * @param inputOIs    *          input object inspector array indexes by tag id. null value is    *          ignored.    * @throws HiveException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|final
name|void
name|initialize
parameter_list|(
name|Configuration
name|hconf
parameter_list|,
name|ObjectInspector
index|[]
name|inputOIs
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|INIT
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|configuration
operator|=
name|hconf
expr_stmt|;
if|if
condition|(
operator|!
name|areAllParentsInitialized
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing operator "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inputOIs
operator|!=
literal|null
condition|)
block|{
name|inputObjInspectors
operator|=
name|inputOIs
expr_stmt|;
block|}
comment|// initialize structure to maintain child op info. operator tree changes
comment|// while initializing so this need to be done here instead of constructor
name|childOperatorsArray
operator|=
operator|new
name|Operator
index|[
name|childOperators
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperatorsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|childOperatorsArray
index|[
name|i
index|]
operator|=
name|childOperators
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|childOperatorsTag
operator|=
operator|new
name|int
index|[
name|childOperatorsArray
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperatorsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentOperators
init|=
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|childOperatorsTag
index|[
name|i
index|]
operator|=
name|parentOperators
operator|.
name|indexOf
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|childOperatorsTag
index|[
name|i
index|]
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Hive internal error: cannot find parent in the child operator!"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|inputObjInspectors
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal Error during operator initialization."
argument_list|)
throw|;
block|}
comment|// derived classes can set this to different object if needed
name|outputObjInspector
operator|=
name|inputObjInspectors
index|[
literal|0
index|]
expr_stmt|;
name|Collection
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|asyncInitOperations
init|=
name|initializeOp
argument_list|(
name|hconf
argument_list|)
decl_stmt|;
comment|// sanity checks
if|if
condition|(
operator|!
name|rootInitializeCalled
operator|||
name|asyncInitOperations
operator|==
literal|null
operator|||
name|childOperatorsArray
operator|.
name|length
operator|!=
name|childOperators
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Internal error during operator initialization"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialization Done "
operator|+
name|id
operator|+
literal|" "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|initializeChildren
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
comment|// let's wait on the async ops before continuing
name|completeInitialization
argument_list|(
name|asyncInitOperations
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|completeInitialization
parameter_list|(
name|Collection
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|fs
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
index|[]
name|os
init|=
operator|new
name|Object
index|[
name|fs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|?
argument_list|>
name|f
range|:
name|fs
control|)
block|{
try|try
block|{
name|os
index|[
name|i
operator|++
index|]
operator|=
name|f
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|completeInitializationOp
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
comment|/**    * This metod can be used to retrieve the results from async operations    * started at init time - before the operator pipeline is started.    *    * @param os    * @throws HiveException    */
specifier|protected
name|void
name|completeInitializationOp
parameter_list|(
name|Object
index|[]
name|os
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// no-op default
block|}
specifier|public
name|void
name|initializeLocalWork
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|childOperators
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperators
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
init|=
name|this
operator|.
name|childOperators
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|childOp
operator|.
name|initializeLocalWork
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Operator specific initialization.    */
specifier|protected
name|Collection
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|rootInitializeCalled
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
comment|/**    * Calls initialize on each of the children with outputObjetInspector as the    * output row format.    */
specifier|protected
name|void
name|initializeChildren
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|state
operator|=
name|State
operator|.
name|INIT
expr_stmt|;
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Operator "
operator|+
name|id
operator|+
literal|" "
operator|+
name|getName
argument_list|()
operator|+
literal|" initialized"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childOperators
operator|==
literal|null
operator|||
name|childOperators
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing children of "
operator|+
name|id
operator|+
literal|" "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperatorsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|initialize
argument_list|(
name|hconf
argument_list|,
name|outputObjInspector
argument_list|,
name|childOperatorsTag
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|reporter
operator|!=
literal|null
condition|)
block|{
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|setReporter
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Pass the execContext reference to every child operator    */
specifier|public
name|void
name|passExecContext
parameter_list|(
name|ExecMapperContext
name|execContext
parameter_list|)
block|{
name|this
operator|.
name|setExecContext
argument_list|(
name|execContext
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperators
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|childOperators
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|passExecContext
argument_list|(
name|execContext
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Collects all the parent's output object inspectors and calls actual    * initialization method.    *    * @param hconf    * @param inputOI    *          OI of the row that this parent will pass to this op    * @param parentId    *          parent operator id    * @throws HiveException    */
specifier|protected
name|void
name|initialize
parameter_list|(
name|Configuration
name|hconf
parameter_list|,
name|ObjectInspector
name|inputOI
parameter_list|,
name|int
name|parentId
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing child "
operator|+
name|id
operator|+
literal|" "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Double the size of the array if needed
if|if
condition|(
name|parentId
operator|>=
name|inputObjInspectors
operator|.
name|length
condition|)
block|{
name|int
name|newLength
init|=
name|inputObjInspectors
operator|.
name|length
operator|*
literal|2
decl_stmt|;
while|while
condition|(
name|parentId
operator|>=
name|newLength
condition|)
block|{
name|newLength
operator|*=
literal|2
expr_stmt|;
block|}
name|inputObjInspectors
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|inputObjInspectors
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
block|}
name|inputObjInspectors
index|[
name|parentId
index|]
operator|=
name|inputOI
expr_stmt|;
comment|// call the actual operator initialization function
name|initialize
argument_list|(
name|hconf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ObjectInspector
index|[]
name|getInputObjInspectors
parameter_list|()
block|{
return|return
name|inputObjInspectors
return|;
block|}
specifier|public
name|void
name|setInputObjInspectors
parameter_list|(
name|ObjectInspector
index|[]
name|inputObjInspectors
parameter_list|)
block|{
name|this
operator|.
name|inputObjInspectors
operator|=
name|inputObjInspectors
expr_stmt|;
block|}
specifier|public
name|ObjectInspector
name|getOutputObjInspector
parameter_list|()
block|{
return|return
name|outputObjInspector
return|;
block|}
comment|/**    * Process the row.    *    * @param row    *          The object representing the row.    * @param tag    *          The tag of the row usually means which parent this row comes from.    *          Rows with the same tag should have exactly the same rowInspector    *          all the time.    */
specifier|public
specifier|abstract
name|void
name|process
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
function_decl|;
specifier|protected
specifier|final
name|void
name|defaultStartGroup
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|isLogDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting group"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childOperators
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isLogDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting group for children:"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|childOperators
control|)
block|{
name|op
operator|.
name|startGroup
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isLogDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Start group Done"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|final
name|void
name|defaultEndGroup
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|isLogDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ending group"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childOperators
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isLogDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ending group for children:"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|childOperators
control|)
block|{
name|op
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isLogDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"End group Done"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If a operator wants to do some work at the beginning of a group
specifier|public
name|void
name|startGroup
parameter_list|()
throws|throws
name|HiveException
block|{
name|defaultStartGroup
argument_list|()
expr_stmt|;
block|}
comment|// If an operator wants to do some work at the end of a group
specifier|public
name|void
name|endGroup
parameter_list|()
throws|throws
name|HiveException
block|{
name|defaultEndGroup
argument_list|()
expr_stmt|;
block|}
comment|// an blocking operator (e.g. GroupByOperator and JoinOperator) can
comment|// override this method to forward its outputs
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|HiveException
block|{   }
specifier|public
name|void
name|processGroup
parameter_list|(
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|childOperators
operator|==
literal|null
operator|||
name|childOperators
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperatorsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|processGroup
argument_list|(
name|childOperatorsTag
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|allInitializedParentsAreClosed
parameter_list|()
block|{
if|if
condition|(
name|parentOperators
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|parentOperators
control|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isLogDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allInitializedParentsAreClosed? parent.state = "
operator|+
name|parent
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|parent
operator|.
name|state
operator|==
name|State
operator|.
name|CLOSE
operator|||
name|parent
operator|.
name|state
operator|==
name|State
operator|.
name|UNINIT
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// This close() function does not need to be synchronized
comment|// since it is called by its parents' main thread, so no
comment|// more than 1 thread should call this close() function.
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|CLOSE
condition|)
block|{
return|return;
block|}
comment|// check if all parents are finished
if|if
condition|(
operator|!
name|allInitializedParentsAreClosed
argument_list|()
condition|)
block|{
if|if
condition|(
name|isLogDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not all parent operators are closed. Not closing."
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// set state as CLOSE as long as all parents are closed
comment|// state == CLOSE doesn't mean all children are also in state CLOSE
name|state
operator|=
name|State
operator|.
name|CLOSE
expr_stmt|;
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|id
operator|+
literal|" finished. closing... "
argument_list|)
expr_stmt|;
block|}
comment|// call the operator specific close routine
name|closeOp
argument_list|(
name|abort
argument_list|)
expr_stmt|;
name|reporter
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|logStats
argument_list|()
expr_stmt|;
if|if
condition|(
name|childOperators
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|childOperators
control|)
block|{
if|if
condition|(
name|isLogDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing child = "
operator|+
name|op
argument_list|)
expr_stmt|;
block|}
name|op
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|id
operator|+
literal|" Close done"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Operator specific close routine. Operators which inherents this class    * should overwrite this funtion for their specific cleanup routine.    */
specifier|protected
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{   }
specifier|private
name|boolean
name|jobCloseDone
init|=
literal|false
decl_stmt|;
comment|// Operator specific logic goes here
specifier|public
name|void
name|jobCloseOp
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|success
parameter_list|)
throws|throws
name|HiveException
block|{   }
comment|/**    * Unlike other operator interfaces which are called from map or reduce task,    * jobClose is called from the jobclient side once the job has completed.    *    * @param conf    *          Configuration with with which job was submitted    * @param success    *          whether the job was completed successfully or not    */
specifier|public
name|void
name|jobClose
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|success
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// JobClose has already been performed on this operator
if|if
condition|(
name|jobCloseDone
condition|)
block|{
return|return;
block|}
name|jobCloseOp
argument_list|(
name|conf
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|jobCloseDone
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|childOperators
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|childOperators
control|)
block|{
name|op
operator|.
name|jobClose
argument_list|(
name|conf
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Cache childOperators in an array for faster access. childOperatorsArray is    * accessed per row, so it's important to make the access efficient.    */
specifier|protected
specifier|transient
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
index|[]
name|childOperatorsArray
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|transient
name|int
index|[]
name|childOperatorsTag
decl_stmt|;
comment|/**    * Replace one child with another at the same position. The parent of the    * child is not changed    *    * @param child    *          the old child    * @param newChild    *          the new child    */
specifier|public
name|void
name|replaceChild
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|newChild
parameter_list|)
block|{
name|int
name|childIndex
init|=
name|childOperators
operator|.
name|indexOf
argument_list|(
name|child
argument_list|)
decl_stmt|;
assert|assert
name|childIndex
operator|!=
operator|-
literal|1
assert|;
name|childOperators
operator|.
name|set
argument_list|(
name|childIndex
argument_list|,
name|newChild
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeChild
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
parameter_list|)
block|{
name|int
name|childIndex
init|=
name|childOperators
operator|.
name|indexOf
argument_list|(
name|child
argument_list|)
decl_stmt|;
assert|assert
name|childIndex
operator|!=
operator|-
literal|1
assert|;
if|if
condition|(
name|childOperators
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|childOperators
operator|.
name|remove
argument_list|(
name|childIndex
argument_list|)
expr_stmt|;
block|}
name|int
name|parentIndex
init|=
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|this
argument_list|)
decl_stmt|;
assert|assert
name|parentIndex
operator|!=
operator|-
literal|1
assert|;
if|if
condition|(
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|child
operator|.
name|setParentOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|remove
argument_list|(
name|parentIndex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Remove a child and add all of the child's children to the location of the child    *    * @param child   If this operator is not the only parent of the child. There can be unpredictable result.    * @throws SemanticException    */
specifier|public
name|void
name|removeChildAndAdoptItsChildren
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
parameter_list|)
throws|throws
name|SemanticException
block|{
name|int
name|childIndex
init|=
name|childOperators
operator|.
name|indexOf
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|childIndex
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Exception when trying to remove partition predicates: fail to find child from parent"
argument_list|)
throw|;
block|}
name|childOperators
operator|.
name|remove
argument_list|(
name|childIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|getChildOperators
argument_list|()
operator|!=
literal|null
operator|&&
name|child
operator|.
name|getChildOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|childOperators
operator|.
name|addAll
argument_list|(
name|childIndex
argument_list|,
name|child
operator|.
name|getChildOperators
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|gc
range|:
name|child
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parents
init|=
name|gc
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|parents
operator|.
name|indexOf
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Exception when trying to remove partition predicates: fail to find parent from child"
argument_list|)
throw|;
block|}
name|parents
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeParent
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
parameter_list|)
block|{
name|int
name|parentIndex
init|=
name|parentOperators
operator|.
name|indexOf
argument_list|(
name|parent
argument_list|)
decl_stmt|;
assert|assert
name|parentIndex
operator|!=
operator|-
literal|1
assert|;
if|if
condition|(
name|parentOperators
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|setParentOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parentOperators
operator|.
name|remove
argument_list|(
name|parentIndex
argument_list|)
expr_stmt|;
block|}
name|int
name|childIndex
init|=
name|parent
operator|.
name|getChildOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|this
argument_list|)
decl_stmt|;
assert|assert
name|childIndex
operator|!=
operator|-
literal|1
assert|;
if|if
condition|(
name|parent
operator|.
name|getChildOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|parent
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|getChildOperators
argument_list|()
operator|.
name|remove
argument_list|(
name|childIndex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Replace one parent with another at the same position. Chilren of the new    * parent are not updated    *    * @param parent    *          the old parent    * @param newParent    *          the new parent    */
specifier|public
name|void
name|replaceParent
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|newParent
parameter_list|)
block|{
name|int
name|parentIndex
init|=
name|parentOperators
operator|.
name|indexOf
argument_list|(
name|parent
argument_list|)
decl_stmt|;
assert|assert
name|parentIndex
operator|!=
operator|-
literal|1
assert|;
name|parentOperators
operator|.
name|set
argument_list|(
name|parentIndex
argument_list|,
name|newParent
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|long
name|getNextCntr
parameter_list|(
name|long
name|cntr
parameter_list|)
block|{
comment|// A very simple counter to keep track of number of rows processed by an
comment|// operator. It dumps
comment|// every 1 million times, and quickly before that
if|if
condition|(
name|cntr
operator|>=
literal|1000000
condition|)
block|{
return|return
name|cntr
operator|+
literal|1000000
return|;
block|}
return|return
literal|10
operator|*
name|cntr
return|;
block|}
specifier|protected
name|void
name|forward
parameter_list|(
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|getDone
argument_list|()
condition|)
block|{
return|return;
block|}
name|int
name|childrenDone
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperatorsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|o
init|=
name|childOperatorsArray
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|o
operator|.
name|getDone
argument_list|()
condition|)
block|{
name|childrenDone
operator|++
expr_stmt|;
block|}
else|else
block|{
name|o
operator|.
name|process
argument_list|(
name|row
argument_list|,
name|childOperatorsTag
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if all children are done, this operator is also done
if|if
condition|(
name|childrenDone
operator|!=
literal|0
operator|&&
name|childrenDone
operator|==
name|childOperatorsArray
operator|.
name|length
condition|)
block|{
name|setDone
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|resetStats
parameter_list|()
block|{
for|for
control|(
name|String
name|e
range|:
name|statsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|statsMap
operator|.
name|get
argument_list|(
name|e
argument_list|)
operator|.
name|set
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|state
operator|=
name|State
operator|.
name|INIT
expr_stmt|;
if|if
condition|(
name|childOperators
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|o
range|:
name|childOperators
control|)
block|{
name|o
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * OperatorFunc.    *    */
specifier|public
specifier|static
interface|interface
name|OperatorFunc
block|{
name|void
name|func
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|preorderMap
parameter_list|(
name|OperatorFunc
name|opFunc
parameter_list|)
block|{
name|opFunc
operator|.
name|func
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|childOperators
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|o
range|:
name|childOperators
control|)
block|{
name|o
operator|.
name|preorderMap
argument_list|(
name|opFunc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|logStats
parameter_list|()
block|{
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
for|for
control|(
name|String
name|e
range|:
name|statsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|toString
argument_list|()
operator|+
literal|":"
operator|+
name|statsMap
operator|.
name|get
argument_list|(
name|e
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Implements the getName function for the Node Interface.    *    * @return the name of the operator    */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"OP"
return|;
block|}
comment|/**    * Returns a map of output column name to input expression map Note that    * currently it returns only key columns for ReduceSink and GroupBy operators.    *    * @return null if the operator doesn't change columns    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|getColumnExprMap
parameter_list|()
block|{
return|return
name|colExprMap
return|;
block|}
specifier|public
name|void
name|setColumnExprMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
parameter_list|)
block|{
name|this
operator|.
name|colExprMap
operator|=
name|colExprMap
expr_stmt|;
block|}
specifier|private
name|String
name|getLevelString
parameter_list|(
name|int
name|level
parameter_list|)
block|{
if|if
condition|(
name|level
operator|==
literal|0
condition|)
block|{
return|return
literal|"\n"
return|;
block|}
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
while|while
condition|(
name|level
operator|>
literal|0
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|level
operator|--
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|dump
parameter_list|(
name|int
name|level
parameter_list|)
block|{
return|return
name|dump
argument_list|(
name|level
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|dump
parameter_list|(
name|int
name|level
parameter_list|,
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|seenOpts
parameter_list|)
block|{
if|if
condition|(
name|seenOpts
operator|.
name|contains
argument_list|(
operator|new
name|Integer
argument_list|(
name|id
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|seenOpts
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|ls
init|=
name|getLevelString
argument_list|(
name|level
argument_list|)
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|ls
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"<"
operator|+
name|getName
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"Id ="
operator|+
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|childOperators
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|ls
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"<Children>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|o
range|:
name|childOperators
control|)
block|{
name|s
operator|.
name|append
argument_list|(
name|o
operator|.
name|dump
argument_list|(
name|level
operator|+
literal|2
argument_list|,
name|seenOpts
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
name|ls
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"<\\Children>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentOperators
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|ls
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"<Parent>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|o
range|:
name|parentOperators
control|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"Id = "
operator|+
name|o
operator|.
name|id
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|o
operator|.
name|dump
argument_list|(
name|level
argument_list|,
name|seenOpts
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
literal|"<\\Parent>"
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
name|ls
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"<\\"
operator|+
name|getName
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Initialize an array of ExprNodeEvaluator and return the result    * ObjectInspectors.    */
specifier|protected
specifier|static
name|ObjectInspector
index|[]
name|initEvaluators
parameter_list|(
name|ExprNodeEvaluator
argument_list|<
name|?
argument_list|>
index|[]
name|evals
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|ObjectInspector
index|[]
name|result
init|=
operator|new
name|ObjectInspector
index|[
name|evals
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|evals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|evals
index|[
name|i
index|]
operator|.
name|initialize
argument_list|(
name|rowInspector
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Initialize an array of ExprNodeEvaluator from start, for specified length    * and return the result ObjectInspectors.    */
specifier|protected
specifier|static
name|ObjectInspector
index|[]
name|initEvaluators
parameter_list|(
name|ExprNodeEvaluator
argument_list|<
name|?
argument_list|>
index|[]
name|evals
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|ObjectInspector
index|[]
name|result
init|=
operator|new
name|ObjectInspector
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|evals
index|[
name|start
operator|+
name|i
index|]
operator|.
name|initialize
argument_list|(
name|rowInspector
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Initialize an array of ExprNodeEvaluator and put the return values into a    * StructObjectInspector with integer field names.    */
specifier|protected
specifier|static
name|StructObjectInspector
name|initEvaluatorsAndReturnStruct
parameter_list|(
name|ExprNodeEvaluator
argument_list|<
name|?
argument_list|>
index|[]
name|evals
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputColName
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|ObjectInspector
index|[]
name|fieldObjectInspectors
init|=
name|initEvaluators
argument_list|(
name|evals
argument_list|,
name|rowInspector
argument_list|)
decl_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|outputColName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldObjectInspectors
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|transient
name|Object
name|groupKeyObject
decl_stmt|;
specifier|public
name|String
name|getOperatorId
parameter_list|()
block|{
return|return
name|operatorId
return|;
block|}
specifier|public
name|void
name|initOperatorId
parameter_list|()
block|{
name|setOperatorId
argument_list|(
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setOperatorId
parameter_list|(
name|String
name|operatorId
parameter_list|)
block|{
name|this
operator|.
name|operatorId
operator|=
name|operatorId
expr_stmt|;
block|}
comment|/*    * By default, the list is empty - if an operator wants to add more counters,    * it should override this method and provide the new list. Counter names returned    * by this method should be wrapped counter names (i.e the strings should be passed    * through getWrappedCounterName).    */
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getAdditionalCounters
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Return the type of the specific operator among the    * types in OperatorType.    *    * @return OperatorType.*    */
specifier|abstract
specifier|public
name|OperatorType
name|getType
parameter_list|()
function_decl|;
specifier|public
name|void
name|setGroupKeyObject
parameter_list|(
name|Object
name|keyObject
parameter_list|)
block|{
name|this
operator|.
name|groupKeyObject
operator|=
name|keyObject
expr_stmt|;
block|}
specifier|public
name|Object
name|getGroupKeyObject
parameter_list|()
block|{
return|return
name|groupKeyObject
return|;
block|}
comment|/**    * Called during semantic analysis as operators are being added    * in order to give them a chance to compute any additional plan information    * needed.  Does nothing by default.    */
specifier|public
name|void
name|augmentPlan
parameter_list|()
block|{   }
specifier|public
name|ExecMapperContext
name|getExecContext
parameter_list|()
block|{
return|return
name|execContext
return|;
block|}
specifier|public
name|void
name|setExecContext
parameter_list|(
name|ExecMapperContext
name|execContext
parameter_list|)
block|{
name|this
operator|.
name|execContext
operator|=
name|execContext
expr_stmt|;
block|}
comment|// The input file has changed - every operator can invoke specific action
comment|// for each input file
specifier|public
name|void
name|cleanUpInputFileChanged
parameter_list|()
throws|throws
name|HiveException
block|{
name|this
operator|.
name|cleanUpInputFileChangedOp
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|childOperators
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|childOperators
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
name|this
operator|.
name|childOperators
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|op
operator|.
name|cleanUpInputFileChanged
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// If a operator needs to invoke specific cleanup, that operator can override
comment|// this method
specifier|public
name|void
name|cleanUpInputFileChangedOp
parameter_list|()
throws|throws
name|HiveException
block|{   }
comment|// called by map operator. propagated recursively to single parented descendants
specifier|public
name|void
name|setInputContext
parameter_list|(
name|String
name|inputPath
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|)
block|{
if|if
condition|(
name|childOperators
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
range|:
name|childOperators
control|)
block|{
if|if
condition|(
name|child
operator|.
name|getNumParent
argument_list|()
operator|==
literal|1
condition|)
block|{
name|child
operator|.
name|setInputContext
argument_list|(
name|inputPath
argument_list|,
name|tableName
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|supportSkewJoinOptimization
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|clone
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parents
init|=
name|getParentOperators
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentClones
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parents
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|parents
control|)
block|{
name|parentClones
operator|.
name|add
argument_list|(
operator|(
name|parent
operator|.
name|clone
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|descClone
init|=
operator|(
name|T
operator|)
name|conf
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// also clone the colExprMap by default
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|ret
init|=
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|descClone
argument_list|,
name|getSchema
argument_list|()
argument_list|,
name|getColumnExprMap
argument_list|()
argument_list|,
name|parentClones
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Clones only the operator. The children and parent are set    * to null.    * @return Cloned operator    * @throws CloneNotSupportedException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|cloneOp
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
name|T
name|descClone
init|=
operator|(
name|T
operator|)
name|conf
operator|.
name|clone
argument_list|()
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|ret
init|=
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|descClone
argument_list|,
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Recursively clones all the children of the tree,    * Fixes the pointers to children, parents and the pointers to itself coming from the children.    * It does not fix the pointers to itself coming from parents, parents continue to point to    * the original child.    * @return Cloned operator    * @throws CloneNotSupportedException    */
specifier|public
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|cloneRecursiveChildren
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|newOp
init|=
name|this
operator|.
name|cloneOp
argument_list|()
decl_stmt|;
name|newOp
operator|.
name|setParentOperators
argument_list|(
name|this
operator|.
name|parentOperators
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|newChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
range|:
name|this
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentList
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|childOp
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|parent
operator|.
name|equals
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|parentList
operator|.
name|add
argument_list|(
name|newOp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parentList
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Recursively clone the children
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|clonedChildOp
init|=
name|childOp
operator|.
name|cloneRecursiveChildren
argument_list|()
decl_stmt|;
name|clonedChildOp
operator|.
name|setParentOperators
argument_list|(
name|parentList
argument_list|)
expr_stmt|;
block|}
name|newOp
operator|.
name|setChildOperators
argument_list|(
name|newChildren
argument_list|)
expr_stmt|;
return|return
name|newOp
return|;
block|}
comment|/*    * True only for operators which produce atmost 1 output row per input    * row to it. This will allow the output column names to be directly    * translated to input column names.    */
specifier|public
name|boolean
name|columnNamesRowResolvedCanBeObtained
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isUseBucketizedHiveInputFormat
parameter_list|()
block|{
return|return
name|useBucketizedHiveInputFormat
return|;
block|}
comment|/**    * Before setting this to {@code true} make sure it's not reading ACID tables    * @param useBucketizedHiveInputFormat    */
specifier|public
name|void
name|setUseBucketizedHiveInputFormat
parameter_list|(
name|boolean
name|useBucketizedHiveInputFormat
parameter_list|)
block|{
name|this
operator|.
name|useBucketizedHiveInputFormat
operator|=
name|useBucketizedHiveInputFormat
expr_stmt|;
block|}
comment|/**    * Whether this operator supports automatic sort merge join.    * The stack is traversed, and this method is invoked for all the operators.    * @return TRUE if yes, FALSE otherwise.    */
specifier|public
name|boolean
name|supportAutomaticSortMergeJoin
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportUnionRemoveOptimization
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/*    * This operator is allowed before mapjoin. Eventually, mapjoin hint should be done away with.    * But, since bucketized mapjoin and sortmerge join depend on it completely. it is needed.    * Check the operators which are allowed before mapjoin.    */
specifier|public
name|boolean
name|opAllowedBeforeMapJoin
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/*    * This operator is allowed after mapjoin. Eventually, mapjoin hint should be done away with.    * But, since bucketized mapjoin and sortmerge join depend on it completely. it is needed.    * Check the operators which are allowed after mapjoin.    */
specifier|public
name|boolean
name|opAllowedAfterMapJoin
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/*    * If this task contains a join, it can be converted to a map-join task if this operator is    * present in the mapper. For eg. if a sort-merge join operator is present followed by a regular    * join, it cannot be converted to a auto map-join.    */
specifier|public
name|boolean
name|opAllowedConvertMapJoin
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/*    * If this task contains a sortmergejoin, it can be converted to a map-join task if this operator    * is present in the mapper. For eg. if a sort-merge join operator is present followed by a    * regular join, it cannot be converted to a auto map-join.    */
specifier|public
name|boolean
name|opAllowedBeforeSortMergeJoin
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**    * used for LimitPushdownOptimizer    *    * if all of the operators between limit and reduce-sink does not remove any input rows    * in the range of limit count, limit can be pushed down to reduce-sink operator.    * forward, select, etc.    */
specifier|public
name|boolean
name|acceptLimitPushdown
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|+
literal|"["
operator|+
name|getIdentifier
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Collection
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|top
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|visited
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
range|:
name|top
control|)
block|{
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|toString
argument_list|(
name|builder
argument_list|,
name|visited
argument_list|,
name|op
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|boolean
name|toString
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|visited
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|op
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|String
name|name
init|=
name|op
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|added
init|=
name|visited
operator|.
name|add
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|start
operator|++
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|start
operator|+=
name|name
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|added
condition|)
block|{
if|if
condition|(
name|op
operator|.
name|getNumChild
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|children
init|=
name|op
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|start
condition|;
name|j
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
name|toString
argument_list|(
name|builder
argument_list|,
name|visited
argument_list|,
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|Statistics
name|getStatistics
parameter_list|()
block|{
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
return|return
name|conf
operator|.
name|getStatistics
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|OpTraits
name|getOpTraits
parameter_list|()
block|{
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
return|return
name|conf
operator|.
name|getTraits
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setOpTraits
parameter_list|(
name|OpTraits
name|metaInfo
parameter_list|)
block|{
if|if
condition|(
name|isLogDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting traits ("
operator|+
name|metaInfo
operator|+
literal|") on "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|setTraits
argument_list|(
name|metaInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot set traits when there's no descriptor: "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setStatistics
parameter_list|(
name|Statistics
name|stats
parameter_list|)
block|{
if|if
condition|(
name|isLogDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting stats ("
operator|+
name|stats
operator|+
literal|") on "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|setStatistics
argument_list|(
name|stats
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot set stats when there's no descriptor: "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
specifier|static
name|Operator
name|createDummy
parameter_list|()
block|{
return|return
operator|new
name|DummyOperator
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"serial"
block|,
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|private
specifier|static
class|class
name|DummyOperator
extends|extends
name|Operator
block|{
specifier|public
name|DummyOperator
parameter_list|()
block|{
name|super
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Collection
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|initializeOp
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|childOperators
return|;
block|}
block|}
specifier|public
name|void
name|removeParents
parameter_list|()
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
range|:
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|getParentOperators
argument_list|()
argument_list|)
control|)
block|{
name|removeParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

