begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|explain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|exprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_comment
comment|/**  * Base operator implementation  **/
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Operator
parameter_list|<
name|T
extends|extends
name|Serializable
parameter_list|>
implements|implements
name|Serializable
implements|,
name|Node
block|{
comment|// Bean methods
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|childOperators
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|parentOperators
decl_stmt|;
specifier|private
specifier|static
name|int
name|seqId
decl_stmt|;
comment|// It can be optimized later so that an operator operator (init/close) is performed
comment|// only after that operation has been performed on all the parents. This will require
comment|// initializing the whole tree in all the mappers (which might be required for mappers
comment|// spanning multiple files anyway, in future)
specifier|public
specifier|static
enum|enum
name|State
block|{
name|UNINIT
block|,
name|INIT
block|,
name|CLOSE
block|}
empty_stmt|;
specifier|transient
specifier|protected
name|State
name|state
init|=
name|State
operator|.
name|UNINIT
decl_stmt|;
static|static
block|{
name|seqId
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|Operator
parameter_list|()
block|{
name|id
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|seqId
operator|++
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an operator with a reporter.    * @param reporter Used to report progress of certain operators.    */
specifier|public
name|Operator
parameter_list|(
name|Reporter
name|reporter
parameter_list|)
block|{
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
name|id
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|seqId
operator|++
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setChildOperators
parameter_list|(
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|childOperators
parameter_list|)
block|{
name|this
operator|.
name|childOperators
operator|=
name|childOperators
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|getChildOperators
parameter_list|()
block|{
return|return
name|childOperators
return|;
block|}
comment|/**    * Implements the getChildren function for the Node Interface.    */
specifier|public
name|Vector
argument_list|<
name|Node
argument_list|>
name|getChildren
parameter_list|()
block|{
if|if
condition|(
name|getChildOperators
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Vector
argument_list|<
name|Node
argument_list|>
name|ret_vec
init|=
operator|new
name|Vector
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
range|:
name|getChildOperators
argument_list|()
control|)
block|{
name|ret_vec
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
return|return
name|ret_vec
return|;
block|}
specifier|public
name|void
name|setParentOperators
parameter_list|(
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|parentOperators
parameter_list|)
block|{
name|this
operator|.
name|parentOperators
operator|=
name|parentOperators
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|getParentOperators
parameter_list|()
block|{
return|return
name|parentOperators
return|;
block|}
specifier|protected
name|T
name|conf
decl_stmt|;
specifier|protected
name|boolean
name|done
decl_stmt|;
specifier|public
name|void
name|setConf
parameter_list|(
name|T
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|explain
specifier|public
name|T
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|boolean
name|getDone
parameter_list|()
block|{
return|return
name|done
return|;
block|}
specifier|public
name|void
name|setDone
parameter_list|(
name|boolean
name|done
parameter_list|)
block|{
name|this
operator|.
name|done
operator|=
name|done
expr_stmt|;
block|}
comment|// non-bean fields needed during compilation
specifier|transient
specifier|private
name|RowSchema
name|rowSchema
decl_stmt|;
specifier|public
name|void
name|setSchema
parameter_list|(
name|RowSchema
name|rowSchema
parameter_list|)
block|{
name|this
operator|.
name|rowSchema
operator|=
name|rowSchema
expr_stmt|;
block|}
specifier|public
name|RowSchema
name|getSchema
parameter_list|()
block|{
return|return
name|rowSchema
return|;
block|}
comment|// non-bean ..
specifier|transient
specifier|protected
name|HashMap
argument_list|<
name|Enum
argument_list|<
name|?
argument_list|>
argument_list|,
name|LongWritable
argument_list|>
name|statsMap
init|=
operator|new
name|HashMap
argument_list|<
name|Enum
argument_list|<
name|?
argument_list|>
argument_list|,
name|LongWritable
argument_list|>
argument_list|()
decl_stmt|;
specifier|transient
specifier|protected
name|OutputCollector
name|out
decl_stmt|;
specifier|transient
specifier|protected
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|transient
specifier|protected
name|String
name|alias
decl_stmt|;
specifier|transient
specifier|protected
name|Reporter
name|reporter
decl_stmt|;
specifier|transient
specifier|protected
name|String
name|id
decl_stmt|;
comment|// object inspectors for input rows
specifier|transient
specifier|protected
name|ObjectInspector
index|[]
name|inputObjInspectors
init|=
operator|new
name|ObjectInspector
index|[
name|Byte
operator|.
name|MAX_VALUE
index|]
decl_stmt|;
comment|// for output rows of this operator
specifier|transient
specifier|protected
name|ObjectInspector
name|outputObjInspector
decl_stmt|;
comment|/**    * A map of output column name to input expression map. This is used by optimizer    * and built during semantic analysis    * contains only key elements for reduce sink and group by op    */
specifier|protected
specifier|transient
name|Map
argument_list|<
name|String
argument_list|,
name|exprNodeDesc
argument_list|>
name|colExprMap
decl_stmt|;
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**    * This function is not named getId(), to make sure java serialization    * does NOT serialize it.  Some TestParse tests will fail if we serialize    * this field, since the Operator ID will change based on the number of    * query tests.    */
specifier|public
name|String
name|getIdentifier
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|void
name|setReporter
parameter_list|(
name|Reporter
name|rep
parameter_list|)
block|{
name|reporter
operator|=
name|rep
expr_stmt|;
comment|// the collector is same across all operators
if|if
condition|(
name|childOperators
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
range|:
name|childOperators
control|)
block|{
name|op
operator|.
name|setReporter
argument_list|(
name|rep
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setOutputCollector
parameter_list|(
name|OutputCollector
name|out
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
comment|// the collector is same across all operators
if|if
condition|(
name|childOperators
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
range|:
name|childOperators
control|)
block|{
name|op
operator|.
name|setOutputCollector
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Store the alias this operator is working on behalf of    */
specifier|public
name|void
name|setAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
if|if
condition|(
name|childOperators
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
range|:
name|childOperators
control|)
block|{
name|op
operator|.
name|setAlias
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|Enum
argument_list|<
name|?
argument_list|>
argument_list|,
name|Long
argument_list|>
name|getStats
parameter_list|()
block|{
name|HashMap
argument_list|<
name|Enum
argument_list|<
name|?
argument_list|>
argument_list|,
name|Long
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|Enum
argument_list|<
name|?
argument_list|>
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enum
argument_list|<
name|?
argument_list|>
name|one
range|:
name|statsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|one
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|statsMap
operator|.
name|get
argument_list|(
name|one
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
comment|/**    * checks whether all parent operators are initialized or not    * @return true if there are no parents or all parents are initialized. false otherwise    */
specifier|protected
name|boolean
name|areAllParentsInitialized
parameter_list|()
block|{
if|if
condition|(
name|parentOperators
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parent
range|:
name|parentOperators
control|)
block|{
if|if
condition|(
name|parent
operator|.
name|state
operator|!=
name|State
operator|.
name|INIT
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Initializes operators only if all parents have been initialized.    * Calls operator specific initializer which then initializes child ops.    *     * @param hconf    * @param inputOIs input object inspector array indexes by tag id. null value is ignored.    * @throws HiveException    */
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|hconf
parameter_list|,
name|ObjectInspector
index|[]
name|inputOIs
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|INIT
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|areAllParentsInitialized
argument_list|()
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing Self "
operator|+
name|id
operator|+
literal|" "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputOIs
operator|!=
literal|null
condition|)
block|{
name|inputObjInspectors
operator|=
name|inputOIs
expr_stmt|;
block|}
comment|// initialize structure to maintain child op info. operator tree changes while
comment|// initializing so this need to be done here instead of initialize() method
if|if
condition|(
name|childOperators
operator|!=
literal|null
condition|)
block|{
name|childOperatorsArray
operator|=
operator|new
name|Operator
index|[
name|childOperators
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperatorsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|childOperatorsArray
index|[
name|i
index|]
operator|=
name|childOperators
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|childOperatorsTag
operator|=
operator|new
name|int
index|[
name|childOperatorsArray
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperatorsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|parentOperators
init|=
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentOperators
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Hive internal error: parent is null in "
operator|+
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
operator|+
literal|"!"
argument_list|)
throw|;
block|}
name|childOperatorsTag
index|[
name|i
index|]
operator|=
name|parentOperators
operator|.
name|indexOf
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|childOperatorsTag
index|[
name|i
index|]
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Hive internal error: cannot find parent in the child operator!"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputObjInspectors
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal Error during operator initialization."
argument_list|)
throw|;
block|}
comment|// derived classes can set this to different object if needed
name|outputObjInspector
operator|=
name|inputObjInspectors
index|[
literal|0
index|]
expr_stmt|;
name|initializeOp
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialization Done "
operator|+
name|id
operator|+
literal|" "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Operator specific initialization.    */
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|initializeChildren
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calls initialize on each of the children with outputObjetInspector as the output row format    */
specifier|protected
name|void
name|initializeChildren
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|state
operator|=
name|State
operator|.
name|INIT
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Operator "
operator|+
name|id
operator|+
literal|" "
operator|+
name|getName
argument_list|()
operator|+
literal|" initialized"
argument_list|)
expr_stmt|;
if|if
condition|(
name|childOperators
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing children of "
operator|+
name|id
operator|+
literal|" "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperatorsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|initialize
argument_list|(
name|hconf
argument_list|,
name|outputObjInspector
argument_list|,
name|childOperatorsTag
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Collects all the parent's output object inspectors and calls actual initialization method    * @param hconf    * @param inputOI OI of the row that this parent will pass to this op    * @param parentId parent operator id    * @throws HiveException    */
specifier|private
name|void
name|initialize
parameter_list|(
name|Configuration
name|hconf
parameter_list|,
name|ObjectInspector
name|inputOI
parameter_list|,
name|int
name|parentId
parameter_list|)
throws|throws
name|HiveException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing child "
operator|+
name|id
operator|+
literal|" "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|inputObjInspectors
index|[
name|parentId
index|]
operator|=
name|inputOI
expr_stmt|;
comment|// call the actual operator initialization function
name|initialize
argument_list|(
name|hconf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Process the row.    * @param row  The object representing the row.    * @param tag  The tag of the row usually means which parent this row comes from.    *             Rows with the same tag should have exactly the same rowInspector all the time.    */
specifier|public
specifier|abstract
name|void
name|process
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
function_decl|;
comment|// If a operator wants to do some work at the beginning of a group
specifier|public
name|void
name|startGroup
parameter_list|()
throws|throws
name|HiveException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting group"
argument_list|)
expr_stmt|;
if|if
condition|(
name|childOperators
operator|==
literal|null
condition|)
return|return;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting group for children:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
range|:
name|childOperators
control|)
name|op
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Start group Done"
argument_list|)
expr_stmt|;
block|}
comment|// If a operator wants to do some work at the beginning of a group
specifier|public
name|void
name|endGroup
parameter_list|()
throws|throws
name|HiveException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ending group"
argument_list|)
expr_stmt|;
if|if
condition|(
name|childOperators
operator|==
literal|null
condition|)
return|return;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ending group for children:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
range|:
name|childOperators
control|)
name|op
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"End group Done"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|CLOSE
condition|)
return|return;
try|try
block|{
name|logStats
argument_list|()
expr_stmt|;
if|if
condition|(
name|childOperators
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
range|:
name|childOperators
control|)
block|{
name|op
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
name|state
operator|=
name|State
operator|.
name|CLOSE
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Close done"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Unlike other operator interfaces which are called from map or reduce task,    * jobClose is called from the jobclient side once the job has completed    *    * @param conf Configuration with with which job was submitted    * @param success whether the job was completed successfully or not    */
specifier|public
name|void
name|jobClose
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|success
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|childOperators
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
range|:
name|childOperators
control|)
block|{
name|op
operator|.
name|jobClose
argument_list|(
name|conf
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *  Cache childOperators in an array for faster access. childOperatorsArray is accessed    *  per row, so it's important to make the access efficient.    */
specifier|transient
specifier|protected
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
index|[]
name|childOperatorsArray
init|=
literal|null
decl_stmt|;
specifier|transient
specifier|protected
name|int
index|[]
name|childOperatorsTag
decl_stmt|;
comment|/**    * Replace one child with another at the same position. The parent of the child is not changed    * @param child     the old child    * @param newChild  the new child    */
specifier|public
name|void
name|replaceChild
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|child
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|newChild
parameter_list|)
block|{
name|int
name|childIndex
init|=
name|childOperators
operator|.
name|indexOf
argument_list|(
name|child
argument_list|)
decl_stmt|;
assert|assert
name|childIndex
operator|!=
operator|-
literal|1
assert|;
name|childOperators
operator|.
name|set
argument_list|(
name|childIndex
argument_list|,
name|newChild
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeChild
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|child
parameter_list|)
block|{
name|int
name|childIndex
init|=
name|childOperators
operator|.
name|indexOf
argument_list|(
name|child
argument_list|)
decl_stmt|;
assert|assert
name|childIndex
operator|!=
operator|-
literal|1
assert|;
if|if
condition|(
name|childOperators
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|childOperators
operator|=
literal|null
expr_stmt|;
else|else
name|childOperators
operator|.
name|remove
argument_list|(
name|childIndex
argument_list|)
expr_stmt|;
name|int
name|parentIndex
init|=
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|this
argument_list|)
decl_stmt|;
assert|assert
name|parentIndex
operator|!=
operator|-
literal|1
assert|;
if|if
condition|(
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|child
operator|.
name|setParentOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
else|else
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|remove
argument_list|(
name|parentIndex
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replace one parent with another at the same position. Chilren of the new parent are not updated    * @param parent     the old parent    * @param newParent  the new parent    */
specifier|public
name|void
name|replaceParent
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parent
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|newParent
parameter_list|)
block|{
name|int
name|parentIndex
init|=
name|parentOperators
operator|.
name|indexOf
argument_list|(
name|parent
argument_list|)
decl_stmt|;
assert|assert
name|parentIndex
operator|!=
operator|-
literal|1
assert|;
name|parentOperators
operator|.
name|set
argument_list|(
name|parentIndex
argument_list|,
name|newParent
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|forward
parameter_list|(
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// For debugging purposes:
comment|// System.out.println("" + this.getClass() + ": " + SerDeUtils.getJSONString(row, rowInspector));
comment|// System.out.println("" + this.getClass() + ">> " + ObjectInspectorUtils.getObjectInspectorName(rowInspector));
if|if
condition|(
name|childOperatorsArray
operator|==
literal|null
operator|&&
name|childOperators
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal Hive error during operator initialization."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|childOperatorsArray
operator|==
literal|null
operator|)
operator|||
operator|(
name|getDone
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
name|int
name|childrenDone
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperatorsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|o
init|=
name|childOperatorsArray
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|o
operator|.
name|getDone
argument_list|()
condition|)
block|{
name|childrenDone
operator|++
expr_stmt|;
block|}
else|else
block|{
name|o
operator|.
name|process
argument_list|(
name|row
argument_list|,
name|childOperatorsTag
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if all children are done, this operator is also done
if|if
condition|(
name|childrenDone
operator|==
name|childOperatorsArray
operator|.
name|length
condition|)
block|{
name|setDone
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|resetStats
parameter_list|()
block|{
for|for
control|(
name|Enum
argument_list|<
name|?
argument_list|>
name|e
range|:
name|statsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|statsMap
operator|.
name|get
argument_list|(
name|e
argument_list|)
operator|.
name|set
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|OperatorFunc
block|{
specifier|public
name|void
name|func
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|preorderMap
parameter_list|(
name|OperatorFunc
name|opFunc
parameter_list|)
block|{
name|opFunc
operator|.
name|func
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|childOperators
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|o
range|:
name|childOperators
control|)
block|{
name|o
operator|.
name|preorderMap
argument_list|(
name|opFunc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|logStats
parameter_list|()
block|{
for|for
control|(
name|Enum
argument_list|<
name|?
argument_list|>
name|e
range|:
name|statsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|toString
argument_list|()
operator|+
literal|":"
operator|+
name|statsMap
operator|.
name|get
argument_list|(
name|e
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Implements the getName function for the Node Interface.    * @return the name of the operator    */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
literal|"OP"
argument_list|)
return|;
block|}
comment|/**    * Returns a map of output column name to input expression map    * Note that currently it returns only key columns for ReduceSink and GroupBy operators    * @return null if the operator doesn't change columns    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|exprNodeDesc
argument_list|>
name|getColumnExprMap
parameter_list|()
block|{
return|return
name|colExprMap
return|;
block|}
specifier|public
name|void
name|setColumnExprMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|exprNodeDesc
argument_list|>
name|colExprMap
parameter_list|)
block|{
name|this
operator|.
name|colExprMap
operator|=
name|colExprMap
expr_stmt|;
block|}
specifier|private
name|String
name|getLevelString
parameter_list|(
name|int
name|level
parameter_list|)
block|{
if|if
condition|(
name|level
operator|==
literal|0
condition|)
block|{
return|return
literal|"\n"
return|;
block|}
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
while|while
condition|(
name|level
operator|>
literal|0
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|level
operator|--
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|dump
parameter_list|(
name|int
name|level
parameter_list|)
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|ls
init|=
name|getLevelString
argument_list|(
name|level
argument_list|)
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|ls
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"<"
operator|+
name|getName
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"Id ="
operator|+
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|childOperators
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|ls
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"<Children>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|o
range|:
name|childOperators
control|)
block|{
name|s
operator|.
name|append
argument_list|(
name|o
operator|.
name|dump
argument_list|(
name|level
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
name|ls
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"<\\Children>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentOperators
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|ls
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"<Parent>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|o
range|:
name|parentOperators
control|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"Id = "
operator|+
name|o
operator|.
name|id
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
literal|"<\\Parent>"
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
name|ls
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"<\\"
operator|+
name|getName
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Initialize an array of ExprNodeEvaluator and return the result    * ObjectInspectors.    */
specifier|protected
specifier|static
name|ObjectInspector
index|[]
name|initEvaluators
parameter_list|(
name|ExprNodeEvaluator
index|[]
name|evals
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|ObjectInspector
index|[]
name|result
init|=
operator|new
name|ObjectInspector
index|[
name|evals
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|evals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|evals
index|[
name|i
index|]
operator|.
name|initialize
argument_list|(
name|rowInspector
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Initialize an array of ExprNodeEvaluator and put the return values into a     * StructObjectInspector with integer field names.    */
specifier|protected
specifier|static
name|StructObjectInspector
name|initEvaluatorsAndReturnStruct
parameter_list|(
name|ExprNodeEvaluator
index|[]
name|evals
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputColName
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|ObjectInspector
index|[]
name|fieldObjectInspectors
init|=
name|initEvaluators
argument_list|(
name|evals
argument_list|,
name|rowInspector
argument_list|)
decl_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|outputColName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldObjectInspectors
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

