begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|BoundarySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|BoundaryDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFrameDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
operator|.
name|AggregationBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|JavaDataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"max"
argument_list|,
name|value
operator|=
literal|"_FUNC_(expr) - Returns the maximum value of expr"
argument_list|)
specifier|public
class|class
name|GenericUDAFMax
extends|extends
name|AbstractGenericUDAFResolver
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GenericUDAFMax
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|parameters
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|parameters
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|"Exactly one argument is expected."
argument_list|)
throw|;
block|}
name|ObjectInspector
name|oi
init|=
name|TypeInfoUtils
operator|.
name|getStandardJavaObjectInspectorFromTypeInfo
argument_list|(
name|parameters
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ObjectInspectorUtils
operator|.
name|compareSupported
argument_list|(
name|oi
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|parameters
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|"Cannot support comparison of map<> type or complex type containing map<>."
argument_list|)
throw|;
block|}
return|return
operator|new
name|GenericUDAFMaxEvaluator
argument_list|()
return|;
block|}
annotation|@
name|UDFType
argument_list|(
name|distinctLike
operator|=
literal|true
argument_list|)
specifier|public
specifier|static
class|class
name|GenericUDAFMaxEvaluator
extends|extends
name|GenericUDAFEvaluator
block|{
specifier|private
specifier|transient
name|ObjectInspector
name|inputOI
decl_stmt|;
specifier|private
specifier|transient
name|ObjectInspector
name|outputOI
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
assert|assert
operator|(
name|parameters
operator|.
name|length
operator|==
literal|1
operator|)
assert|;
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|inputOI
operator|=
name|parameters
index|[
literal|0
index|]
expr_stmt|;
comment|// Copy to Java object because that saves object creation time.
comment|// Note that on average the number of copies is log(N) so that's not
comment|// very important.
name|outputOI
operator|=
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|inputOI
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|JAVA
argument_list|)
expr_stmt|;
return|return
name|outputOI
return|;
block|}
comment|/** class for storing the current max value */
specifier|static
class|class
name|MaxAgg
extends|extends
name|AbstractAggregationBuffer
block|{
name|Object
name|o
decl_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
name|MaxAgg
name|result
init|=
operator|new
name|MaxAgg
argument_list|()
decl_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|MaxAgg
name|myagg
init|=
operator|(
name|MaxAgg
operator|)
name|agg
decl_stmt|;
name|myagg
operator|.
name|o
operator|=
literal|null
expr_stmt|;
block|}
name|boolean
name|warned
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
assert|assert
operator|(
name|parameters
operator|.
name|length
operator|==
literal|1
operator|)
assert|;
name|merge
argument_list|(
name|agg
argument_list|,
name|parameters
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminatePartial
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
name|terminate
argument_list|(
name|agg
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|merge
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
name|partial
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|partial
operator|!=
literal|null
condition|)
block|{
name|MaxAgg
name|myagg
init|=
operator|(
name|MaxAgg
operator|)
name|agg
decl_stmt|;
name|int
name|r
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|myagg
operator|.
name|o
argument_list|,
name|outputOI
argument_list|,
name|partial
argument_list|,
name|inputOI
argument_list|)
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|o
operator|==
literal|null
operator|||
name|r
operator|<
literal|0
condition|)
block|{
name|myagg
operator|.
name|o
operator|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|partial
argument_list|,
name|inputOI
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|MaxAgg
name|myagg
init|=
operator|(
name|MaxAgg
operator|)
name|agg
decl_stmt|;
return|return
name|myagg
operator|.
name|o
return|;
block|}
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getWindowingEvaluator
parameter_list|(
name|WindowFrameDef
name|wFrmDef
parameter_list|)
block|{
return|return
operator|new
name|MaxStreamingFixedWindow
argument_list|(
name|this
argument_list|,
name|wFrmDef
argument_list|)
return|;
block|}
block|}
comment|/*    * Based on the Paper by Daniel Lemire: Streaming Max-Min filter using no more    * than 3 comparisons per elem.    *     * 1. His algorithm works on fixed size windows up to the current row. For row    * 'i' and window 'w' it computes the min/max for window (i-w, i). 2. The core    * idea is to keep a queue of (max, idx) tuples. A tuple in the queue    * represents the max value in the range (prev tuple.idx, idx). Using the    * queue data structure and following 2 operations it is easy to see that    * maxes can be computed: - on receiving the ith row; drain the queue from the    * back of any entries whose value is less than the ith entry; add the ith    * value as a tuple in the queue (i-val, i) - on the ith step, check if the    * element at the front of the queue has reached its max range of influence;    * i.e. frontTuple.idx + w> i. If yes we can remove it from the queue. - on    * the ith step o/p the front of the queue as the max for the ith entry.    *     * Here we modify the algorithm: 1. to handle window's that are of the form    * (i-p, i+f), where p is numPreceding,f = numFollowing - we start outputing    * rows only after receiving f rows. - the formula for 'influence range' of an    * idx accounts for the following rows. 2. optimize for the case when    * numPreceding is Unbounded. In this case only 1 max needs to be tarcked at    * any given time.    */
specifier|static
class|class
name|MaxStreamingFixedWindow
extends|extends
name|GenericUDAFStreamingEvaluator
argument_list|<
name|Object
argument_list|>
block|{
class|class
name|State
extends|extends
name|GenericUDAFStreamingEvaluator
argument_list|<
name|Object
argument_list|>
operator|.
name|StreamingState
block|{
specifier|private
specifier|final
name|Deque
argument_list|<
name|Object
index|[]
argument_list|>
name|maxChain
decl_stmt|;
specifier|public
name|State
parameter_list|(
name|AggregationBuffer
name|buf
parameter_list|)
block|{
name|super
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|maxChain
operator|=
operator|new
name|ArrayDeque
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|(
name|wFrameDef
operator|.
name|isStartUnbounded
argument_list|()
condition|?
literal|1
else|:
name|wFrameDef
operator|.
name|getWindowSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|estimate
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|wrappedBuf
operator|instanceof
name|AbstractAggregationBuffer
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|underlying
init|=
operator|(
operator|(
name|AbstractAggregationBuffer
operator|)
name|wrappedBuf
operator|)
operator|.
name|estimate
argument_list|()
decl_stmt|;
if|if
condition|(
name|underlying
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|wFrameDef
operator|.
name|isStartUnbounded
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|/*          * sz Estimate = sz needed by underlying AggBuffer + sz for results + sz          * for maxChain + 3 * JavaDataModel.PRIMITIVES1 sz of results = sz of          * underlying * wdwSz sz of maxChain = sz of underlying * wdwSz          */
name|int
name|wdwSz
init|=
name|wFrameDef
operator|.
name|getWindowSize
argument_list|()
decl_stmt|;
return|return
name|underlying
operator|+
operator|(
name|underlying
operator|*
name|wdwSz
operator|)
operator|+
operator|(
name|underlying
operator|*
name|wdwSz
operator|)
operator|+
operator|(
literal|3
operator|*
name|JavaDataModel
operator|.
name|PRIMITIVES1
operator|)
return|;
block|}
specifier|protected
name|void
name|reset
parameter_list|()
block|{
name|maxChain
operator|.
name|clear
argument_list|()
expr_stmt|;
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|MaxStreamingFixedWindow
parameter_list|(
name|GenericUDAFEvaluator
name|wrappedEval
parameter_list|,
name|WindowFrameDef
name|wFrmDef
parameter_list|)
block|{
name|super
argument_list|(
name|wrappedEval
argument_list|,
name|wFrmDef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
name|AggregationBuffer
name|underlying
init|=
name|wrappedEval
operator|.
name|getNewAggregationBuffer
argument_list|()
decl_stmt|;
return|return
operator|new
name|State
argument_list|(
name|underlying
argument_list|)
return|;
block|}
specifier|protected
name|ObjectInspector
name|inputOI
parameter_list|()
block|{
return|return
operator|(
operator|(
name|GenericUDAFMaxEvaluator
operator|)
name|wrappedEval
operator|)
operator|.
name|inputOI
return|;
block|}
specifier|protected
name|ObjectInspector
name|outputOI
parameter_list|()
block|{
return|return
operator|(
operator|(
name|GenericUDAFMaxEvaluator
operator|)
name|wrappedEval
operator|)
operator|.
name|outputOI
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|State
name|s
init|=
operator|(
name|State
operator|)
name|agg
decl_stmt|;
name|Object
name|o
init|=
name|parameters
index|[
literal|0
index|]
decl_stmt|;
while|while
condition|(
operator|!
name|s
operator|.
name|maxChain
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|removeLast
argument_list|(
name|o
argument_list|,
name|s
operator|.
name|maxChain
operator|.
name|getLast
argument_list|()
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
break|break;
block|}
else|else
block|{
name|s
operator|.
name|maxChain
operator|.
name|removeLast
argument_list|()
expr_stmt|;
block|}
block|}
comment|// We need to insert 'null' before processing first row for the case: X preceding and y preceding
if|if
condition|(
name|s
operator|.
name|numRows
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|wFrameDef
operator|.
name|getEnd
argument_list|()
operator|.
name|getRelativeOffset
argument_list|()
init|;
name|i
operator|<
literal|0
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|.
name|results
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*        * add row to chain. except in case of UNB preceding: - only 1 max needs        * to be tracked. - current max will never become out of range. It can        * only be replaced by a larger max.        */
if|if
condition|(
operator|!
name|wFrameDef
operator|.
name|isStartUnbounded
argument_list|()
operator|||
name|s
operator|.
name|maxChain
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|o
operator|=
name|o
operator|==
literal|null
condition|?
literal|null
else|:
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|o
argument_list|,
name|inputOI
argument_list|()
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|JAVA
argument_list|)
expr_stmt|;
name|s
operator|.
name|maxChain
operator|.
name|addLast
argument_list|(
operator|new
name|Object
index|[]
block|{
name|o
block|,
name|s
operator|.
name|numRows
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|numRows
operator|>=
name|wFrameDef
operator|.
name|getEnd
argument_list|()
operator|.
name|getRelativeOffset
argument_list|()
condition|)
block|{
name|s
operator|.
name|results
operator|.
name|add
argument_list|(
name|s
operator|.
name|maxChain
operator|.
name|getFirst
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|numRows
operator|++
expr_stmt|;
name|int
name|fIdx
init|=
operator|(
name|Integer
operator|)
name|s
operator|.
name|maxChain
operator|.
name|getFirst
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|wFrameDef
operator|.
name|isStartUnbounded
argument_list|()
operator|&&
name|s
operator|.
name|numRows
operator|>=
name|fIdx
operator|+
name|wFrameDef
operator|.
name|getWindowSize
argument_list|()
condition|)
block|{
name|s
operator|.
name|maxChain
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|removeLast
parameter_list|(
name|Object
name|in
parameter_list|,
name|Object
name|last
parameter_list|)
block|{
return|return
name|isGreater
argument_list|(
name|in
argument_list|,
name|last
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isGreater
parameter_list|(
name|Object
name|in
parameter_list|,
name|Object
name|last
parameter_list|)
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|in
argument_list|,
name|inputOI
argument_list|()
argument_list|,
name|last
argument_list|,
name|outputOI
argument_list|()
argument_list|)
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|State
name|s
init|=
operator|(
name|State
operator|)
name|agg
decl_stmt|;
name|Object
index|[]
name|r
init|=
name|s
operator|.
name|maxChain
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|s
operator|.
name|maxChain
operator|.
name|getFirst
argument_list|()
decl_stmt|;
comment|// After all the rows are processed, continue to generate results for the rows that results haven't generated.
comment|// For the case: X following and Y following, process first Y-X results and then insert X nulls.
comment|// For the case X preceding and Y following, process Y results.
for|for
control|(
name|int
name|i
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|wFrameDef
operator|.
name|getStart
argument_list|()
operator|.
name|getRelativeOffset
argument_list|()
argument_list|)
init|;
name|i
operator|<
name|wFrameDef
operator|.
name|getEnd
argument_list|()
operator|.
name|getRelativeOffset
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|.
name|results
operator|.
name|add
argument_list|(
name|r
operator|==
literal|null
condition|?
literal|null
else|:
name|r
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|numRows
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|int
name|fIdx
init|=
operator|(
name|Integer
operator|)
name|r
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|wFrameDef
operator|.
name|isStartUnbounded
argument_list|()
operator|&&
name|s
operator|.
name|numRows
operator|+
name|i
operator|>=
name|fIdx
operator|+
name|wFrameDef
operator|.
name|getWindowSize
argument_list|()
operator|&&
operator|!
name|s
operator|.
name|maxChain
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|s
operator|.
name|maxChain
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|r
operator|=
operator|!
name|s
operator|.
name|maxChain
operator|.
name|isEmpty
argument_list|()
condition|?
name|s
operator|.
name|maxChain
operator|.
name|getFirst
argument_list|()
else|:
name|r
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|wFrameDef
operator|.
name|getStart
argument_list|()
operator|.
name|getRelativeOffset
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|.
name|results
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|s
operator|.
name|numRows
operator|++
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowsRemainingAfterTerminate
parameter_list|()
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

