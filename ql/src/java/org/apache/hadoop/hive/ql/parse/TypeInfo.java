begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|SerDeField
import|;
end_import

begin_comment
comment|/**  * Stores information about a type.  *   * This class fixes an important problem in SerDe: SerDeField.getListElementType(),   * SerDeField.getMapKeyType(), and SerDeField.getMapValueType() should return a type   * description object, instead of the Class object, so we can support types that are   * not represented by a java class.   *   * The current implementation is just a simple wrapper around SerDe and SerDeField.  * Later it might be possible to merge this class into SerDe etc.  *   * Note: It may not be possible to store the Type information as a Java Class object,  * because we support all SerDe's including those that are not using Java Reflection.   *   *   * We support 4 categories of types:  * 1. Primitive objects (String, Number, etc)  * 2. List objects (a list of objects of a single type)  * 3. Map objects (a map from objects of one type to objects of another type)  * 4. Struct objects  *   */
end_comment

begin_class
specifier|public
class|class
name|TypeInfo
block|{
specifier|static
enum|enum
name|Category
block|{
name|UNINITIALIZED
block|,
name|PRIMITIVE
block|,
name|LIST
block|,
name|MAP
block|,
name|STRUCT
block|}
empty_stmt|;
name|Category
name|category
decl_stmt|;
comment|// Only for primitive objects.
name|Class
argument_list|<
name|?
argument_list|>
name|primitiveClass
decl_stmt|;
comment|// For all other 3 categories.
name|SerDeField
name|currentField
decl_stmt|;
name|SerDe
name|currentSerDe
decl_stmt|;
comment|/**    * Default constructor.    */
specifier|public
name|TypeInfo
parameter_list|()
block|{
name|this
operator|.
name|category
operator|=
name|Category
operator|.
name|UNINITIALIZED
expr_stmt|;
name|this
operator|.
name|primitiveClass
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentField
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentSerDe
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Default constructor.    */
specifier|public
name|TypeInfo
parameter_list|(
name|Category
name|category
parameter_list|)
block|{
name|this
operator|.
name|category
operator|=
name|category
expr_stmt|;
name|this
operator|.
name|primitiveClass
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentField
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentSerDe
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Constructor for primitive TypeInfo.    * @param primitiveType    */
specifier|public
name|TypeInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|primitiveType
parameter_list|)
block|{
name|this
operator|.
name|category
operator|=
name|Category
operator|.
name|PRIMITIVE
expr_stmt|;
name|this
operator|.
name|primitiveClass
operator|=
name|primitiveType
expr_stmt|;
block|}
comment|/**    * Constructor for SerDe-based TypeInfo.     * currentField can be null, which means the top-level field.    *     * @param currentField       * @param currentSerDe    */
specifier|public
name|TypeInfo
parameter_list|(
name|SerDe
name|currentSerDe
parameter_list|,
name|SerDeField
name|currentField
parameter_list|)
block|{
name|this
operator|.
name|currentSerDe
operator|=
name|currentSerDe
expr_stmt|;
name|this
operator|.
name|currentField
operator|=
name|currentField
expr_stmt|;
if|if
condition|(
name|currentField
operator|==
literal|null
condition|)
block|{
comment|// Top level field
name|this
operator|.
name|category
operator|=
name|Category
operator|.
name|STRUCT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentField
operator|.
name|isList
argument_list|()
condition|)
block|{
name|this
operator|.
name|category
operator|=
name|Category
operator|.
name|LIST
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentField
operator|.
name|isMap
argument_list|()
condition|)
block|{
name|this
operator|.
name|category
operator|=
name|Category
operator|.
name|MAP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentField
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|this
operator|.
name|category
operator|=
name|Category
operator|.
name|PRIMITIVE
expr_stmt|;
name|this
operator|.
name|primitiveClass
operator|=
name|generalizePrimitive
argument_list|(
name|currentField
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentSerDe
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentField
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|category
operator|=
name|Category
operator|.
name|STRUCT
expr_stmt|;
block|}
block|}
comment|/** Only for primitive type.     */
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getPrimitiveClass
parameter_list|()
block|{
assert|assert
operator|(
name|this
operator|.
name|category
operator|==
name|Category
operator|.
name|PRIMITIVE
operator|)
assert|;
return|return
name|this
operator|.
name|primitiveClass
return|;
block|}
comment|/** Only for list type.     */
specifier|public
name|TypeInfo
name|getListElementType
parameter_list|()
block|{
assert|assert
operator|(
name|this
operator|.
name|category
operator|==
name|Category
operator|.
name|LIST
operator|)
assert|;
try|try
block|{
return|return
operator|new
name|TypeInfo
argument_list|(
name|this
operator|.
name|currentSerDe
argument_list|,
name|this
operator|.
name|currentSerDe
operator|.
name|getFieldFromExpression
argument_list|(
name|this
operator|.
name|currentField
argument_list|,
literal|"[0]"
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Only for map type.    */
specifier|public
name|TypeInfo
name|getMapKeyType
parameter_list|()
block|{
assert|assert
operator|(
name|this
operator|.
name|category
operator|==
name|Category
operator|.
name|MAP
operator|)
assert|;
return|return
operator|new
name|TypeInfo
argument_list|(
name|this
operator|.
name|currentField
operator|.
name|getMapKeyType
argument_list|()
argument_list|)
return|;
block|}
comment|/** Only for map type.    */
specifier|public
name|TypeInfo
name|getMapValueType
parameter_list|()
block|{
assert|assert
operator|(
name|this
operator|.
name|category
operator|==
name|Category
operator|.
name|MAP
operator|)
assert|;
return|return
operator|new
name|TypeInfo
argument_list|(
name|this
operator|.
name|currentField
operator|.
name|getMapValueType
argument_list|()
argument_list|)
return|;
block|}
comment|/** Only for Struct type.    */
specifier|public
name|TypeInfo
name|getFieldType
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
assert|assert
operator|(
name|this
operator|.
name|category
operator|==
name|Category
operator|.
name|STRUCT
operator|)
assert|;
try|try
block|{
return|return
operator|new
name|TypeInfo
argument_list|(
name|this
operator|.
name|currentSerDe
argument_list|,
name|this
operator|.
name|currentSerDe
operator|.
name|getFieldFromExpression
argument_list|(
name|this
operator|.
name|currentField
argument_list|,
name|fieldName
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Only for Struct type.    */
specifier|public
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|getAllFieldsTypes
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|SerDeField
name|field
range|:
name|this
operator|.
name|currentSerDe
operator|.
name|getFields
argument_list|(
name|this
operator|.
name|currentField
argument_list|)
control|)
block|{
name|typeInfos
operator|.
name|add
argument_list|(
operator|new
name|TypeInfo
argument_list|(
name|this
operator|.
name|currentSerDe
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|typeInfos
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|getClass
argument_list|()
operator|!=
name|TypeInfo
operator|.
name|class
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TypeInfo
name|another
init|=
operator|(
name|TypeInfo
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|another
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|category
operator|!=
name|another
operator|.
name|category
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|this
operator|.
name|category
condition|)
block|{
case|case
name|PRIMITIVE
case|:
return|return
name|this
operator|.
name|getPrimitiveClass
argument_list|()
operator|.
name|equals
argument_list|(
name|another
operator|.
name|getPrimitiveClass
argument_list|()
argument_list|)
return|;
case|case
name|LIST
case|:
return|return
name|this
operator|.
name|getListElementType
argument_list|()
operator|.
name|equals
argument_list|(
name|another
operator|.
name|getListElementType
argument_list|()
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
name|this
operator|.
name|getMapKeyType
argument_list|()
operator|.
name|equals
argument_list|(
name|another
operator|.
name|getMapKeyType
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|getMapValueType
argument_list|()
operator|.
name|equals
argument_list|(
name|another
operator|.
name|getMapValueType
argument_list|()
argument_list|)
return|;
case|case
name|STRUCT
case|:
return|return
name|this
operator|.
name|getAllFieldsTypes
argument_list|()
operator|.
name|equals
argument_list|(
name|another
operator|.
name|getAllFieldsTypes
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
switch|switch
condition|(
name|this
operator|.
name|category
condition|)
block|{
case|case
name|PRIMITIVE
case|:
return|return
name|this
operator|.
name|getPrimitiveClass
argument_list|()
operator|.
name|toString
argument_list|()
return|;
case|case
name|LIST
case|:
return|return
literal|"List<"
operator|+
name|this
operator|.
name|getListElementType
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|">"
return|;
case|case
name|MAP
case|:
return|return
literal|"Map<"
operator|+
name|this
operator|.
name|getMapKeyType
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|","
operator|+
name|this
operator|.
name|getMapValueType
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|">"
return|;
case|case
name|STRUCT
case|:
return|return
literal|"Struct("
operator|+
name|this
operator|.
name|getAllFieldsTypes
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
return|return
literal|"(Unknown TypeInfo)"
return|;
block|}
specifier|private
specifier|static
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|TypeInfo
argument_list|>
name|cache
decl_stmt|;
static|static
block|{
name|cache
operator|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|TypeInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|TypeInfo
name|getPrimitiveTypeInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|primitiveClass
parameter_list|)
block|{
name|primitiveClass
operator|=
name|generalizePrimitive
argument_list|(
name|primitiveClass
argument_list|)
expr_stmt|;
name|TypeInfo
name|result
init|=
name|cache
operator|.
name|get
argument_list|(
name|primitiveClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|TypeInfo
argument_list|(
name|primitiveClass
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|primitiveClass
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|generalizePrimitive
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|primitiveClass
parameter_list|)
block|{
if|if
condition|(
name|primitiveClass
operator|==
name|Boolean
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Boolean
operator|.
name|class
expr_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
name|Byte
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Byte
operator|.
name|class
expr_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
name|Character
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Character
operator|.
name|class
expr_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
name|Short
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Short
operator|.
name|class
expr_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
name|Integer
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Integer
operator|.
name|class
expr_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
name|Long
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Long
operator|.
name|class
expr_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
name|Float
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Float
operator|.
name|class
expr_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
name|Double
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Double
operator|.
name|class
expr_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
name|Void
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Void
operator|.
name|class
expr_stmt|;
return|return
name|primitiveClass
return|;
block|}
block|}
end_class

end_unit

