begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|encoded
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRangeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
operator|.
name|MemoryBuffer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * DiskRange containing encoded, uncompressed data from cache.  * It should be hidden inside EncodedReaderImpl, but we need to expose it for tests.  */
end_comment

begin_class
annotation|@
name|VisibleForTesting
specifier|public
class|class
name|CacheChunk
extends|extends
name|DiskRangeList
block|{
specifier|protected
name|MemoryBuffer
name|buffer
decl_stmt|;
specifier|public
name|CacheChunk
parameter_list|()
block|{
name|super
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|end
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasData
parameter_list|()
block|{
return|return
name|buffer
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getData
parameter_list|()
block|{
comment|// Callers duplicate the buffer, they have to for BufferChunk
return|return
name|buffer
operator|.
name|getByteBufferRaw
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"start: "
operator|+
name|offset
operator|+
literal|" end: "
operator|+
name|end
operator|+
literal|" cache buffer: "
operator|+
name|getBuffer
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DiskRange
name|sliceAndShift
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|end
parameter_list|,
name|long
name|shiftBy
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cache chunk cannot be sliced - attempted ["
operator|+
name|this
operator|.
name|offset
operator|+
literal|", "
operator|+
name|this
operator|.
name|end
operator|+
literal|") to ["
operator|+
name|offset
operator|+
literal|", "
operator|+
name|end
operator|+
literal|") "
argument_list|)
throw|;
block|}
specifier|public
name|MemoryBuffer
name|getBuffer
parameter_list|()
block|{
return|return
name|buffer
return|;
block|}
specifier|public
name|void
name|setBuffer
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
block|}
specifier|public
name|void
name|handleCacheCollision
parameter_list|(
name|DataCache
name|cache
parameter_list|,
name|MemoryBuffer
name|replacementBuffer
parameter_list|,
name|List
argument_list|<
name|MemoryBuffer
argument_list|>
name|cacheBuffers
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|init
argument_list|(
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

