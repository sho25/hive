begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|bootstrap
operator|.
name|load
operator|.
name|table
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLWork2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
operator|.
name|AlterTableAddPartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
operator|.
name|AlterTableDropPartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReplCopyTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|ReplExternalTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|ReplUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|ReplUtils
operator|.
name|ReplLoadOpType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|bootstrap
operator|.
name|events
operator|.
name|TableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|bootstrap
operator|.
name|load
operator|.
name|ReplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|TaskTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|bootstrap
operator|.
name|load
operator|.
name|util
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|bootstrap
operator|.
name|load
operator|.
name|util
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ImportSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|ReplLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ImportTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadMultiFilesDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadTableDesc
operator|.
name|LoadFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MoveWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_ENABLE_MOVE_OPTIMIZATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|bootstrap
operator|.
name|load
operator|.
name|ReplicationState
operator|.
name|PartitionState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ImportSemanticAnalyzer
operator|.
name|isPartitioned
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ImportSemanticAnalyzer
operator|.
name|partSpecToString
import|;
end_import

begin_class
specifier|public
class|class
name|LoadPartitions
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LoadPartitions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Context
name|context
decl_stmt|;
specifier|private
specifier|final
name|ReplLogger
name|replLogger
decl_stmt|;
specifier|private
specifier|final
name|TableContext
name|tableContext
decl_stmt|;
specifier|private
specifier|final
name|TableEvent
name|event
decl_stmt|;
specifier|private
specifier|final
name|TaskTracker
name|tracker
decl_stmt|;
specifier|private
specifier|final
name|AlterTableAddPartitionDesc
name|lastReplicatedPartition
decl_stmt|;
specifier|private
specifier|final
name|ImportTableDesc
name|tableDesc
decl_stmt|;
specifier|private
name|Table
name|table
decl_stmt|;
specifier|public
name|LoadPartitions
parameter_list|(
name|Context
name|context
parameter_list|,
name|ReplLogger
name|replLogger
parameter_list|,
name|TaskTracker
name|tableTracker
parameter_list|,
name|TableEvent
name|event
parameter_list|,
name|String
name|dbNameToLoadIn
parameter_list|,
name|TableContext
name|tableContext
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
argument_list|(
name|context
argument_list|,
name|replLogger
argument_list|,
name|tableContext
argument_list|,
name|tableTracker
argument_list|,
name|event
argument_list|,
name|dbNameToLoadIn
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LoadPartitions
parameter_list|(
name|Context
name|context
parameter_list|,
name|ReplLogger
name|replLogger
parameter_list|,
name|TableContext
name|tableContext
parameter_list|,
name|TaskTracker
name|limiter
parameter_list|,
name|TableEvent
name|event
parameter_list|,
name|String
name|dbNameToLoadIn
parameter_list|,
name|AlterTableAddPartitionDesc
name|lastReplicatedPartition
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|tracker
operator|=
operator|new
name|TaskTracker
argument_list|(
name|limiter
argument_list|)
expr_stmt|;
name|this
operator|.
name|event
operator|=
name|event
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|replLogger
operator|=
name|replLogger
expr_stmt|;
name|this
operator|.
name|lastReplicatedPartition
operator|=
name|lastReplicatedPartition
expr_stmt|;
name|this
operator|.
name|tableContext
operator|=
name|tableContext
expr_stmt|;
name|this
operator|.
name|tableDesc
operator|=
name|event
operator|.
name|tableDesc
argument_list|(
name|dbNameToLoadIn
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|ImportSemanticAnalyzer
operator|.
name|tableIfExists
argument_list|(
name|tableDesc
argument_list|,
name|context
operator|.
name|hiveDb
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TaskTracker
name|tasks
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*     We are doing this both in load table and load partitions      */
name|Database
name|parentDb
init|=
name|context
operator|.
name|hiveDb
operator|.
name|getDatabase
argument_list|(
name|tableDesc
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
decl_stmt|;
name|LoadTable
operator|.
name|TableLocationTuple
name|tableLocationTuple
init|=
name|LoadTable
operator|.
name|tableLocation
argument_list|(
name|tableDesc
argument_list|,
name|parentDb
argument_list|,
name|tableContext
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|tableDesc
operator|.
name|setLocation
argument_list|(
name|tableLocationTuple
operator|.
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
comment|//new table
name|table
operator|=
name|tableDesc
operator|.
name|toTable
argument_list|(
name|context
operator|.
name|hiveConf
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPartitioned
argument_list|(
name|tableDesc
argument_list|)
condition|)
block|{
name|updateReplicationState
argument_list|(
name|initialReplicationState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|forNewTable
argument_list|()
operator|.
name|hasReplicationState
argument_list|()
condition|)
block|{
comment|// Add ReplStateLogTask only if no pending table load tasks left for next cycle
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|replLogTask
init|=
name|ReplUtils
operator|.
name|getTableReplLogTask
argument_list|(
name|tableDesc
argument_list|,
name|replLogger
argument_list|,
name|context
operator|.
name|hiveConf
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|addDependentTask
argument_list|(
name|replLogTask
argument_list|)
expr_stmt|;
block|}
return|return
name|tracker
return|;
block|}
block|}
else|else
block|{
comment|// existing
if|if
condition|(
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|AlterTableAddPartitionDesc
argument_list|>
name|partitionDescs
init|=
name|event
operator|.
name|partitionDescriptions
argument_list|(
name|tableDesc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|event
operator|.
name|replicationSpec
argument_list|()
operator|.
name|isMetadataOnly
argument_list|()
operator|&&
operator|!
name|partitionDescs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updateReplicationState
argument_list|(
name|initialReplicationState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|forExistingTable
argument_list|(
name|lastReplicatedPartition
argument_list|)
operator|.
name|hasReplicationState
argument_list|()
condition|)
block|{
comment|// Add ReplStateLogTask only if no pending table load tasks left for next cycle
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|replLogTask
init|=
name|ReplUtils
operator|.
name|getTableReplLogTask
argument_list|(
name|tableDesc
argument_list|,
name|replLogger
argument_list|,
name|context
operator|.
name|hiveConf
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|addDependentTask
argument_list|(
name|replLogTask
argument_list|)
expr_stmt|;
block|}
return|return
name|tracker
return|;
block|}
block|}
block|}
return|return
name|tracker
return|;
block|}
specifier|private
name|void
name|updateReplicationState
parameter_list|(
name|ReplicationState
name|replicationState
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tracker
operator|.
name|canAddMoreTasks
argument_list|()
condition|)
block|{
name|tracker
operator|.
name|setReplicationState
argument_list|(
name|replicationState
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ReplicationState
name|initialReplicationState
parameter_list|()
throws|throws
name|SemanticException
block|{
return|return
operator|new
name|ReplicationState
argument_list|(
operator|new
name|PartitionState
argument_list|(
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|lastReplicatedPartition
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|TaskTracker
name|forNewTable
parameter_list|()
throws|throws
name|Exception
block|{
name|Iterator
argument_list|<
name|AlterTableAddPartitionDesc
argument_list|>
name|iterator
init|=
name|event
operator|.
name|partitionDescriptions
argument_list|(
name|tableDesc
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
operator|&&
name|tracker
operator|.
name|canAddMoreTasks
argument_list|()
condition|)
block|{
name|AlterTableAddPartitionDesc
name|currentPartitionDesc
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|/*        the currentPartitionDesc cannot be inlined as we need the hasNext() to be evaluated post the        current retrieved lastReplicatedPartition       */
name|addPartition
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|,
name|currentPartitionDesc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|tracker
return|;
block|}
specifier|private
name|void
name|addPartition
parameter_list|(
name|boolean
name|hasMorePartitions
parameter_list|,
name|AlterTableAddPartitionDesc
name|addPartitionDesc
parameter_list|,
name|Task
argument_list|<
name|?
argument_list|>
name|ptnRootTask
parameter_list|)
throws|throws
name|Exception
block|{
name|tracker
operator|.
name|addTask
argument_list|(
name|tasksForAddPartition
argument_list|(
name|table
argument_list|,
name|addPartitionDesc
argument_list|,
name|ptnRootTask
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasMorePartitions
operator|&&
operator|!
name|tracker
operator|.
name|canAddMoreTasks
argument_list|()
condition|)
block|{
name|ReplicationState
name|currentReplicationState
init|=
operator|new
name|ReplicationState
argument_list|(
operator|new
name|PartitionState
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|addPartitionDesc
argument_list|)
argument_list|)
decl_stmt|;
name|updateReplicationState
argument_list|(
name|currentReplicationState
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * returns the root task for adding a partition    */
specifier|private
name|Task
argument_list|<
name|?
argument_list|>
name|tasksForAddPartition
parameter_list|(
name|Table
name|table
parameter_list|,
name|AlterTableAddPartitionDesc
name|addPartitionDesc
parameter_list|,
name|Task
argument_list|<
name|?
argument_list|>
name|ptnRootTask
parameter_list|)
throws|throws
name|MetaException
throws|,
name|HiveException
block|{
name|AlterTableAddPartitionDesc
operator|.
name|PartitionDesc
name|partSpec
init|=
name|addPartitionDesc
operator|.
name|getPartition
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Path
name|sourceWarehousePartitionLocation
init|=
operator|new
name|Path
argument_list|(
name|partSpec
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|replicaWarehousePartitionLocation
init|=
name|locationOnReplicaWarehouse
argument_list|(
name|table
argument_list|,
name|partSpec
argument_list|)
decl_stmt|;
name|partSpec
operator|.
name|setLocation
argument_list|(
name|replicaWarehousePartitionLocation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"adding dependent CopyWork/AddPart/MoveWork for partition "
operator|+
name|partSpecToString
argument_list|(
name|partSpec
operator|.
name|getPartSpec
argument_list|()
argument_list|)
operator|+
literal|" with source location: "
operator|+
name|partSpec
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|addPartTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork2
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|,
name|addPartitionDesc
argument_list|)
argument_list|,
name|context
operator|.
name|hiveConf
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|ckptTask
init|=
name|ReplUtils
operator|.
name|getTableCheckpointTask
argument_list|(
name|tableDesc
argument_list|,
operator|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|partSpec
operator|.
name|getPartSpec
argument_list|()
argument_list|,
name|context
operator|.
name|dumpDirectory
argument_list|,
name|context
operator|.
name|hiveConf
argument_list|)
decl_stmt|;
name|boolean
name|isOnlyDDLOperation
init|=
name|event
operator|.
name|replicationSpec
argument_list|()
operator|.
name|isMetadataOnly
argument_list|()
operator|||
operator|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|equals
argument_list|(
name|table
operator|.
name|getTableType
argument_list|()
argument_list|)
operator|&&
operator|!
name|event
operator|.
name|replicationSpec
argument_list|()
operator|.
name|isMigratingToExternalTable
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|isOnlyDDLOperation
condition|)
block|{
comment|// Set Checkpoint task as dependant to add partition tasks. So, if same dump is retried for
comment|// bootstrap, we skip current partition update.
name|addPartTask
operator|.
name|addDependentTask
argument_list|(
name|ckptTask
argument_list|)
expr_stmt|;
if|if
condition|(
name|ptnRootTask
operator|==
literal|null
condition|)
block|{
name|ptnRootTask
operator|=
name|addPartTask
expr_stmt|;
block|}
else|else
block|{
name|ptnRootTask
operator|.
name|addDependentTask
argument_list|(
name|addPartTask
argument_list|)
expr_stmt|;
block|}
return|return
name|ptnRootTask
return|;
block|}
name|Path
name|stagingDir
init|=
name|replicaWarehousePartitionLocation
decl_stmt|;
comment|// if move optimization is enabled, copy the files directly to the target path. No need to create the staging dir.
name|LoadFileType
name|loadFileType
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|replicationSpec
argument_list|()
operator|.
name|isInReplicationScope
argument_list|()
operator|&&
name|context
operator|.
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|REPL_ENABLE_MOVE_OPTIMIZATION
argument_list|)
condition|)
block|{
name|loadFileType
operator|=
name|LoadFileType
operator|.
name|IGNORE
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|replicationSpec
argument_list|()
operator|.
name|isMigratingToTxnTable
argument_list|()
condition|)
block|{
comment|// Migrating to transactional tables in bootstrap load phase.
comment|// It is enough to copy all the original files under base_1 dir and so write-id is hardcoded to 1.
comment|// ReplTxnTask added earlier in the DAG ensure that the write-id=1 is made valid in HMS metadata.
name|stagingDir
operator|=
operator|new
name|Path
argument_list|(
name|stagingDir
argument_list|,
name|AcidUtils
operator|.
name|baseDir
argument_list|(
name|ReplUtils
operator|.
name|REPL_BOOTSTRAP_MIGRATION_BASE_WRITE_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|loadFileType
operator|=
name|event
operator|.
name|replicationSpec
argument_list|()
operator|.
name|isReplace
argument_list|()
condition|?
name|LoadFileType
operator|.
name|REPLACE_ALL
else|:
operator|(
name|event
operator|.
name|replicationSpec
argument_list|()
operator|.
name|isMigratingToTxnTable
argument_list|()
condition|?
name|LoadFileType
operator|.
name|KEEP_EXISTING
else|:
name|LoadFileType
operator|.
name|OVERWRITE_EXISTING
operator|)
expr_stmt|;
name|stagingDir
operator|=
name|PathUtils
operator|.
name|getExternalTmpPath
argument_list|(
name|replicaWarehousePartitionLocation
argument_list|,
name|context
operator|.
name|pathInfo
argument_list|)
expr_stmt|;
block|}
name|Task
argument_list|<
name|?
argument_list|>
name|copyTask
init|=
name|ReplCopyTask
operator|.
name|getLoadCopyTask
argument_list|(
name|event
operator|.
name|replicationSpec
argument_list|()
argument_list|,
name|sourceWarehousePartitionLocation
argument_list|,
name|stagingDir
argument_list|,
name|context
operator|.
name|hiveConf
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|movePartitionTask
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|loadFileType
operator|!=
name|LoadFileType
operator|.
name|IGNORE
condition|)
block|{
comment|// no need to create move task, if file is moved directly to target location.
name|movePartitionTask
operator|=
name|movePartitionTask
argument_list|(
name|table
argument_list|,
name|partSpec
argument_list|,
name|stagingDir
argument_list|,
name|loadFileType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ptnRootTask
operator|==
literal|null
condition|)
block|{
name|ptnRootTask
operator|=
name|copyTask
expr_stmt|;
block|}
else|else
block|{
name|ptnRootTask
operator|.
name|addDependentTask
argument_list|(
name|copyTask
argument_list|)
expr_stmt|;
block|}
comment|// Set Checkpoint task as dependant to the tail of add partition tasks. So, if same dump is
comment|// retried for bootstrap, we skip current partition update.
name|copyTask
operator|.
name|addDependentTask
argument_list|(
name|addPartTask
argument_list|)
expr_stmt|;
if|if
condition|(
name|movePartitionTask
operator|!=
literal|null
condition|)
block|{
name|addPartTask
operator|.
name|addDependentTask
argument_list|(
name|movePartitionTask
argument_list|)
expr_stmt|;
name|movePartitionTask
operator|.
name|addDependentTask
argument_list|(
name|ckptTask
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addPartTask
operator|.
name|addDependentTask
argument_list|(
name|ckptTask
argument_list|)
expr_stmt|;
block|}
return|return
name|ptnRootTask
return|;
block|}
comment|/**    * This will create the move of partition data from temp path to actual path    */
specifier|private
name|Task
argument_list|<
name|?
argument_list|>
name|movePartitionTask
parameter_list|(
name|Table
name|table
parameter_list|,
name|AlterTableAddPartitionDesc
operator|.
name|PartitionDesc
name|partSpec
parameter_list|,
name|Path
name|tmpPath
parameter_list|,
name|LoadFileType
name|loadFileType
parameter_list|)
block|{
name|MoveWork
name|moveWork
init|=
operator|new
name|MoveWork
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|replicationSpec
argument_list|()
operator|.
name|isMigratingToTxnTable
argument_list|()
condition|)
block|{
comment|// Write-id is hardcoded to 1 so that for migration, we just move all original files under base_1 dir.
comment|// ReplTxnTask added earlier in the DAG ensure that the write-id is made valid in HMS metadata.
name|LoadTableDesc
name|loadTableWork
init|=
operator|new
name|LoadTableDesc
argument_list|(
name|tmpPath
argument_list|,
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|table
argument_list|)
argument_list|,
name|partSpec
operator|.
name|getPartSpec
argument_list|()
argument_list|,
name|loadFileType
argument_list|,
name|ReplUtils
operator|.
name|REPL_BOOTSTRAP_MIGRATION_BASE_WRITE_ID
argument_list|)
decl_stmt|;
name|loadTableWork
operator|.
name|setInheritTableSpecs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|loadTableWork
operator|.
name|setStmtId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Need to set insertOverwrite so base_1 is created instead of delta_1_1_0.
name|loadTableWork
operator|.
name|setInsertOverwrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|moveWork
operator|.
name|setLoadTableWork
argument_list|(
name|loadTableWork
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LoadMultiFilesDesc
name|loadFilesWork
init|=
operator|new
name|LoadMultiFilesDesc
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|tmpPath
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Path
argument_list|(
name|partSpec
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|moveWork
operator|.
name|setMultiFilesDesc
argument_list|(
name|loadFilesWork
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LoadTableDesc
name|loadTableWork
init|=
operator|new
name|LoadTableDesc
argument_list|(
name|tmpPath
argument_list|,
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|table
argument_list|)
argument_list|,
name|partSpec
operator|.
name|getPartSpec
argument_list|()
argument_list|,
name|loadFileType
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|loadTableWork
operator|.
name|setInheritTableSpecs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|moveWork
operator|.
name|setLoadTableWork
argument_list|(
name|loadTableWork
argument_list|)
expr_stmt|;
block|}
name|moveWork
operator|.
name|setIsInReplicationScope
argument_list|(
name|event
operator|.
name|replicationSpec
argument_list|()
operator|.
name|isInReplicationScope
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
name|moveWork
argument_list|,
name|context
operator|.
name|hiveConf
argument_list|)
return|;
block|}
comment|/**    * Since the table level location will be set by taking into account the base directory configuration    * for external table, we don't have to do anything specific for partition location since it will always    * be a child of the table level location.    * Looks like replication does not handle a specific location provided for a partition and the partition    * path will always be a child on target.    */
specifier|private
name|Path
name|locationOnReplicaWarehouse
parameter_list|(
name|Table
name|table
parameter_list|,
name|AlterTableAddPartitionDesc
operator|.
name|PartitionDesc
name|partSpec
parameter_list|)
throws|throws
name|MetaException
throws|,
name|HiveException
block|{
name|String
name|child
init|=
name|Warehouse
operator|.
name|makePartPath
argument_list|(
name|partSpec
operator|.
name|getPartSpec
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableDesc
operator|.
name|isExternal
argument_list|()
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|replicationSpec
argument_list|()
operator|.
name|isMigratingToExternalTable
argument_list|()
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|tableDesc
operator|.
name|getLocation
argument_list|()
argument_list|,
name|child
argument_list|)
return|;
block|}
name|String
name|externalLocation
init|=
name|ReplExternalTables
operator|.
name|externalTableLocation
argument_list|(
name|context
operator|.
name|hiveConf
argument_list|,
name|partSpec
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|externalLocation
argument_list|)
return|;
block|}
if|if
condition|(
name|tableDesc
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|table
operator|.
name|getDataLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Database
name|parentDb
init|=
name|context
operator|.
name|hiveDb
operator|.
name|getDatabase
argument_list|(
name|tableDesc
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|context
operator|.
name|warehouse
operator|.
name|getDefaultTablePath
argument_list|(
name|parentDb
argument_list|,
name|tableDesc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tableDesc
operator|.
name|isExternal
argument_list|()
argument_list|)
argument_list|,
name|child
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|child
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|Path
argument_list|(
name|tableDesc
operator|.
name|getLocation
argument_list|()
argument_list|,
name|child
argument_list|)
return|;
block|}
block|}
specifier|private
name|Task
argument_list|<
name|?
argument_list|>
name|dropPartitionTask
parameter_list|(
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Task
argument_list|<
name|DDLWork2
argument_list|>
name|dropPtnTask
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|ExprNodeGenericFuncDesc
argument_list|>
argument_list|>
name|partSpecsExpr
init|=
name|ReplUtils
operator|.
name|genPartSpecs
argument_list|(
name|table
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|partSpec
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|partSpecsExpr
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|AlterTableDropPartitionDesc
name|dropPtnDesc
init|=
operator|new
name|AlterTableDropPartitionDesc
argument_list|(
name|table
operator|.
name|getFullyQualifiedName
argument_list|()
argument_list|,
name|partSpecsExpr
argument_list|,
literal|true
argument_list|,
name|event
operator|.
name|replicationSpec
argument_list|()
argument_list|)
decl_stmt|;
name|dropPtnTask
operator|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork2
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|,
name|dropPtnDesc
argument_list|)
argument_list|,
name|context
operator|.
name|hiveConf
argument_list|)
expr_stmt|;
block|}
return|return
name|dropPtnTask
return|;
block|}
specifier|private
name|TaskTracker
name|forExistingTable
parameter_list|(
name|AlterTableAddPartitionDesc
name|lastPartitionReplicated
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|encounteredTheLastReplicatedPartition
init|=
operator|(
name|lastPartitionReplicated
operator|==
literal|null
operator|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|lastReplicatedPartSpec
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|encounteredTheLastReplicatedPartition
condition|)
block|{
name|lastReplicatedPartSpec
operator|=
name|lastPartitionReplicated
operator|.
name|getPartition
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartSpec
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Start processing from partition info spec : {}"
argument_list|,
name|StringUtils
operator|.
name|mapToString
argument_list|(
name|lastReplicatedPartSpec
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|AlterTableAddPartitionDesc
argument_list|>
name|partitionIterator
init|=
name|event
operator|.
name|partitionDescriptions
argument_list|(
name|tableDesc
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|encounteredTheLastReplicatedPartition
operator|&&
name|partitionIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AlterTableAddPartitionDesc
name|addPartitionDesc
init|=
name|partitionIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|currentSpec
init|=
name|addPartitionDesc
operator|.
name|getPartition
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartSpec
argument_list|()
decl_stmt|;
name|encounteredTheLastReplicatedPartition
operator|=
name|lastReplicatedPartSpec
operator|.
name|equals
argument_list|(
name|currentSpec
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|partitionIterator
operator|.
name|hasNext
argument_list|()
operator|&&
name|tracker
operator|.
name|canAddMoreTasks
argument_list|()
condition|)
block|{
name|AlterTableAddPartitionDesc
name|addPartitionDesc
init|=
name|partitionIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
name|addPartitionDesc
operator|.
name|getPartition
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartSpec
argument_list|()
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|ptnRootTask
init|=
literal|null
decl_stmt|;
name|ReplLoadOpType
name|loadPtnType
init|=
name|getLoadPartitionType
argument_list|(
name|partSpec
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|loadPtnType
condition|)
block|{
case|case
name|LOAD_NEW
case|:
break|break;
case|case
name|LOAD_REPLACE
case|:
name|ptnRootTask
operator|=
name|dropPartitionTask
argument_list|(
name|table
argument_list|,
name|partSpec
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOAD_SKIP
case|:
continue|continue;
default|default:
break|break;
block|}
name|addPartition
argument_list|(
name|partitionIterator
operator|.
name|hasNext
argument_list|()
argument_list|,
name|addPartitionDesc
argument_list|,
name|ptnRootTask
argument_list|)
expr_stmt|;
block|}
return|return
name|tracker
return|;
block|}
specifier|private
name|ReplLoadOpType
name|getLoadPartitionType
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|HiveException
block|{
name|Partition
name|ptn
init|=
name|context
operator|.
name|hiveDb
operator|.
name|getPartition
argument_list|(
name|table
argument_list|,
name|partSpec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptn
operator|==
literal|null
condition|)
block|{
return|return
name|ReplLoadOpType
operator|.
name|LOAD_NEW
return|;
block|}
if|if
condition|(
name|ReplUtils
operator|.
name|replCkptStatus
argument_list|(
name|tableContext
operator|.
name|dbNameToLoadIn
argument_list|,
name|ptn
operator|.
name|getParameters
argument_list|()
argument_list|,
name|context
operator|.
name|dumpDirectory
argument_list|)
condition|)
block|{
return|return
name|ReplLoadOpType
operator|.
name|LOAD_SKIP
return|;
block|}
return|return
name|ReplLoadOpType
operator|.
name|LOAD_REPLACE
return|;
block|}
block|}
end_class

end_unit

