begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLTask2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ReplicationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Level
import|;
end_import

begin_comment
comment|/**  * DDL task description for ALTER TABLE ... DROP PARTITION ... commands.  */
end_comment

begin_class
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Add Partition"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
class|class
name|AlterTableAddPartitionDesc
implements|implements
name|DDLDesc
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
static|static
block|{
name|DDLTask2
operator|.
name|registerOperation
argument_list|(
name|AlterTableAddPartitionDesc
operator|.
name|class
argument_list|,
name|AlterTableAddPartitionOperation
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|PartitionDesc
block|{
name|PartitionDesc
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|,
name|String
name|location
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|this
argument_list|(
name|partSpec
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|partParams
operator|=
name|params
expr_stmt|;
block|}
name|PartitionDesc
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|,
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|partSpec
operator|=
name|partSpec
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partParams
decl_stmt|;
name|String
name|location
decl_stmt|;
name|String
name|inputFormat
init|=
literal|null
decl_stmt|;
name|String
name|outputFormat
init|=
literal|null
decl_stmt|;
name|int
name|numBuckets
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
literal|null
decl_stmt|;
name|String
name|serializationLib
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeParams
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
init|=
literal|null
decl_stmt|;
name|ColumnStatistics
name|colStats
init|=
literal|null
decl_stmt|;
name|long
name|writeId
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPartSpec
parameter_list|()
block|{
return|return
name|partSpec
return|;
block|}
comment|/**      * @return location of partition in relation to table      */
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPartParams
parameter_list|()
block|{
return|return
name|partParams
return|;
block|}
specifier|public
name|void
name|setPartParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partParams
parameter_list|)
block|{
name|this
operator|.
name|partParams
operator|=
name|partParams
expr_stmt|;
block|}
specifier|public
name|int
name|getNumBuckets
parameter_list|()
block|{
return|return
name|numBuckets
return|;
block|}
specifier|public
name|void
name|setNumBuckets
parameter_list|(
name|int
name|numBuckets
parameter_list|)
block|{
name|this
operator|.
name|numBuckets
operator|=
name|numBuckets
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getCols
parameter_list|()
block|{
return|return
name|cols
return|;
block|}
specifier|public
name|void
name|setCols
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|)
block|{
name|this
operator|.
name|cols
operator|=
name|cols
expr_stmt|;
block|}
specifier|public
name|String
name|getSerializationLib
parameter_list|()
block|{
return|return
name|serializationLib
return|;
block|}
specifier|public
name|void
name|setSerializationLib
parameter_list|(
name|String
name|serializationLib
parameter_list|)
block|{
name|this
operator|.
name|serializationLib
operator|=
name|serializationLib
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSerdeParams
parameter_list|()
block|{
return|return
name|serdeParams
return|;
block|}
specifier|public
name|void
name|setSerdeParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeParams
parameter_list|)
block|{
name|this
operator|.
name|serdeParams
operator|=
name|serdeParams
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBucketCols
parameter_list|()
block|{
return|return
name|bucketCols
return|;
block|}
specifier|public
name|void
name|setBucketCols
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|)
block|{
name|this
operator|.
name|bucketCols
operator|=
name|bucketCols
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Order
argument_list|>
name|getSortCols
parameter_list|()
block|{
return|return
name|sortCols
return|;
block|}
specifier|public
name|void
name|setSortCols
parameter_list|(
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
parameter_list|)
block|{
name|this
operator|.
name|sortCols
operator|=
name|sortCols
expr_stmt|;
block|}
specifier|public
name|String
name|getInputFormat
parameter_list|()
block|{
return|return
name|inputFormat
return|;
block|}
specifier|public
name|void
name|setInputFormat
parameter_list|(
name|String
name|inputFormat
parameter_list|)
block|{
name|this
operator|.
name|inputFormat
operator|=
name|inputFormat
expr_stmt|;
block|}
specifier|public
name|String
name|getOutputFormat
parameter_list|()
block|{
return|return
name|outputFormat
return|;
block|}
specifier|public
name|void
name|setOutputFormat
parameter_list|(
name|String
name|outputFormat
parameter_list|)
block|{
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
block|}
specifier|public
name|ColumnStatistics
name|getColStats
parameter_list|()
block|{
return|return
name|colStats
return|;
block|}
specifier|public
name|void
name|setColStats
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|)
block|{
name|this
operator|.
name|colStats
operator|=
name|colStats
expr_stmt|;
block|}
specifier|public
name|long
name|getWriteId
parameter_list|()
block|{
return|return
name|writeId
return|;
block|}
specifier|public
name|void
name|setWriteId
parameter_list|(
name|long
name|writeId
parameter_list|)
block|{
name|this
operator|.
name|writeId
operator|=
name|writeId
expr_stmt|;
block|}
block|}
name|String
name|tableName
decl_stmt|;
name|String
name|dbName
decl_stmt|;
name|boolean
name|ifNotExists
decl_stmt|;
name|List
argument_list|<
name|PartitionDesc
argument_list|>
name|partitions
init|=
literal|null
decl_stmt|;
name|boolean
name|replaceMode
init|=
literal|false
decl_stmt|;
specifier|private
name|ReplicationSpec
name|replicationSpec
init|=
literal|null
decl_stmt|;
comment|/**    * For serialization only.    */
specifier|public
name|AlterTableAddPartitionDesc
parameter_list|()
block|{   }
specifier|public
name|AlterTableAddPartitionDesc
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|ifNotExists
operator|=
name|ifNotExists
expr_stmt|;
block|}
comment|/**    * Legacy single-partition ctor for ImportSemanticAnalyzer    * @param dbName    *          database to add to.    * @param tableName    *          table to add to.    * @param partSpec    *          partition specification.    * @param location    *          partition location, relative to table location.    * @param params    *          partition parameters.    */
annotation|@
name|Deprecated
specifier|public
name|AlterTableAddPartitionDesc
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|,
name|String
name|location
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|ifNotExists
operator|=
literal|true
expr_stmt|;
name|addPartition
argument_list|(
name|partSpec
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addPartition
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|,
name|String
name|location
parameter_list|)
block|{
name|addPartition
argument_list|(
name|partSpec
argument_list|,
name|location
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addPartition
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|,
name|String
name|location
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|partitions
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|partitions
operator|=
operator|new
name|ArrayList
argument_list|<
name|PartitionDesc
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|partitions
operator|.
name|add
argument_list|(
operator|new
name|PartitionDesc
argument_list|(
name|partSpec
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return database name    */
specifier|public
name|String
name|getDbName
parameter_list|()
block|{
return|return
name|dbName
return|;
block|}
comment|/**    * @param dbName    *          database name    */
specifier|public
name|void
name|setDbName
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
block|}
comment|/**    * @return the table we're going to add the partitions to.    */
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**    * @param tableName    *          the table we're going to add the partitions to.    */
specifier|public
name|void
name|setTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
comment|/**    * @return location of partition in relation to table    */
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Location"
argument_list|)
specifier|public
name|String
name|getLocationForExplain
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|partitions
operator|==
literal|null
operator|||
name|this
operator|.
name|partitions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|"<no partition>"
return|;
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|PartitionDesc
name|desc
range|:
name|this
operator|.
name|partitions
control|)
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|isFirst
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|desc
operator|.
name|location
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Spec"
argument_list|)
specifier|public
name|String
name|getPartSpecStringForExplain
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|partitions
operator|==
literal|null
operator|||
name|this
operator|.
name|partitions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|"<no partition>"
return|;
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|PartitionDesc
name|desc
range|:
name|this
operator|.
name|partitions
control|)
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|isFirst
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|desc
operator|.
name|partSpec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @return if the partition should only be added if it doesn't exist already    */
specifier|public
name|boolean
name|isIfNotExists
parameter_list|()
block|{
return|return
name|this
operator|.
name|ifNotExists
return|;
block|}
comment|/**    * @param ifNotExists    *          if the part should be added only if it doesn't exist    */
specifier|public
name|void
name|setIfNotExists
parameter_list|(
name|boolean
name|ifNotExists
parameter_list|)
block|{
name|this
operator|.
name|ifNotExists
operator|=
name|ifNotExists
expr_stmt|;
block|}
specifier|public
name|int
name|getPartitionCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|partitions
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|PartitionDesc
name|getPartition
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|this
operator|.
name|partitions
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
comment|/**    * @param replaceMode Determine if this AddPartition should behave like a replace-into alter instead    */
specifier|public
name|void
name|setReplaceMode
parameter_list|(
name|boolean
name|replaceMode
parameter_list|)
block|{
name|this
operator|.
name|replaceMode
operator|=
name|replaceMode
expr_stmt|;
block|}
comment|/**    * @return true if this AddPartition should behave like a replace-into alter instead    */
specifier|public
name|boolean
name|getReplaceMode
parameter_list|()
block|{
return|return
name|this
operator|.
name|replaceMode
return|;
block|}
comment|/**    * @param replicationSpec Sets the replication spec governing this create.    * This parameter will have meaningful values only for creates happening as a result of a replication.    */
specifier|public
name|void
name|setReplicationSpec
parameter_list|(
name|ReplicationSpec
name|replicationSpec
parameter_list|)
block|{
name|this
operator|.
name|replicationSpec
operator|=
name|replicationSpec
expr_stmt|;
block|}
comment|/**    * @return what kind of replication scope this drop is running under.    * This can result in a "CREATE/REPLACE IF NEWER THAN" kind of semantic    */
specifier|public
name|ReplicationSpec
name|getReplicationSpec
parameter_list|()
block|{
if|if
condition|(
name|replicationSpec
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|replicationSpec
operator|=
operator|new
name|ReplicationSpec
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|replicationSpec
return|;
block|}
block|}
end_class

end_unit

