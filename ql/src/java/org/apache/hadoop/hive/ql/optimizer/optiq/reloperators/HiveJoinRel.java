begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
operator|.
name|reloperators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
operator|.
name|TraitsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
operator|.
name|cost
operator|.
name|HiveCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|InvalidRelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|JoinRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelFactories
operator|.
name|JoinFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_comment
comment|//TODO: Should we convert MultiJoin to be a child of HiveJoinRelBase
end_comment

begin_class
specifier|public
class|class
name|HiveJoinRel
extends|extends
name|JoinRelBase
implements|implements
name|HiveRel
block|{
comment|// NOTE: COMMON_JOIN& SMB_JOIN are Sort Merge Join (in case of COMMON_JOIN
comment|// each parallel computation handles multiple splits where as in case of SMB
comment|// each parallel computation handles one bucket). MAP_JOIN and BUCKET_JOIN is
comment|// hash joins where MAP_JOIN keeps the whole data set of non streaming tables
comment|// in memory where as BUCKET_JOIN keeps only the b
specifier|public
enum|enum
name|JoinAlgorithm
block|{
name|NONE
block|,
name|COMMON_JOIN
block|,
name|MAP_JOIN
block|,
name|BUCKET_JOIN
block|,
name|SMB_JOIN
block|}
specifier|public
enum|enum
name|MapJoinStreamingRelation
block|{
name|NONE
block|,
name|LEFT_RELATION
block|,
name|RIGHT_RELATION
block|}
specifier|public
specifier|static
specifier|final
name|JoinFactory
name|HIVE_JOIN_FACTORY
init|=
operator|new
name|HiveJoinFactoryImpl
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|leftSemiJoin
decl_stmt|;
specifier|private
specifier|final
name|JoinAlgorithm
name|joinAlgorithm
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|final
name|MapJoinStreamingRelation
name|mapJoinStreamingSide
init|=
name|MapJoinStreamingRelation
operator|.
name|NONE
decl_stmt|;
specifier|public
specifier|static
name|HiveJoinRel
name|getJoin
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|boolean
name|leftSemiJoin
parameter_list|)
block|{
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|variablesStopped
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
return|return
operator|new
name|HiveJoinRel
argument_list|(
name|cluster
argument_list|,
literal|null
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|joinType
argument_list|,
name|variablesStopped
argument_list|,
name|JoinAlgorithm
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|leftSemiJoin
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|HiveJoinRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|variablesStopped
parameter_list|,
name|JoinAlgorithm
name|joinAlgo
parameter_list|,
name|MapJoinStreamingRelation
name|streamingSideForMapJoin
parameter_list|,
name|boolean
name|leftSemiJoin
parameter_list|)
throws|throws
name|InvalidRelException
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|TraitsUtil
operator|.
name|getDefaultTraitSet
argument_list|(
name|cluster
argument_list|)
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|joinType
argument_list|,
name|variablesStopped
argument_list|)
expr_stmt|;
name|this
operator|.
name|joinAlgorithm
operator|=
name|joinAlgo
expr_stmt|;
name|this
operator|.
name|leftSemiJoin
operator|=
name|leftSemiJoin
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|implement
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
specifier|final
name|HiveJoinRel
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RexNode
name|conditionExpr
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|boolean
name|semiJoinDone
parameter_list|)
block|{
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|variablesStopped
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
return|return
operator|new
name|HiveJoinRel
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|conditionExpr
argument_list|,
name|joinType
argument_list|,
name|variablesStopped
argument_list|,
name|JoinAlgorithm
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|leftSemiJoin
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
comment|// Semantic error not possible. Must be a bug. Convert to
comment|// internal error.
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|JoinAlgorithm
name|getJoinAlgorithm
parameter_list|()
block|{
return|return
name|joinAlgorithm
return|;
block|}
specifier|public
name|boolean
name|isLeftSemiJoin
parameter_list|()
block|{
return|return
name|leftSemiJoin
return|;
block|}
comment|/**    * Model cost of join as size of Inputs.    */
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
name|double
name|leftRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|rightRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|HiveCost
operator|.
name|FACTORY
operator|.
name|makeCost
argument_list|(
name|leftRCount
operator|+
name|rightRCount
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
return|;
block|}
comment|/**    * @return returns rowtype representing only the left join input    */
annotation|@
name|Override
specifier|public
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
if|if
condition|(
name|leftSemiJoin
condition|)
block|{
return|return
name|deriveJoinRowType
argument_list|(
name|left
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|null
argument_list|,
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|RelDataTypeField
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|deriveRowType
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|HiveJoinFactoryImpl
implements|implements
name|JoinFactory
block|{
comment|/**      * Creates a join.      *      * @param left      *          Left input      * @param right      *          Right input      * @param condition      *          Join condition      * @param joinType      *          Join type      * @param variablesStopped      *          Set of names of variables which are set by the LHS and used by      *          the RHS and are not available to nodes above this JoinRel in the      *          tree      * @param semiJoinDone      *          Whether this join has been translated to a semi-join      */
annotation|@
name|Override
specifier|public
name|RelNode
name|createJoin
parameter_list|(
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|variablesStopped
parameter_list|,
name|boolean
name|semiJoinDone
parameter_list|)
block|{
return|return
name|getJoin
argument_list|(
name|left
operator|.
name|getCluster
argument_list|()
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|joinType
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

