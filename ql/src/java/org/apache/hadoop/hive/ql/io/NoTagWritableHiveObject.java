begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|HiveObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapredWork
import|;
end_import

begin_comment
comment|/**  * A wrapper over hive objects that allows interfacing with Map-Reduce  * serialization layer.  *  * NoTag Writable Hive Objects are deserialized only in reduce phase. They are  * used only when the 'value' fields in the reduce phase are homogenous and don't   * require tagging  *   */
end_comment

begin_class
specifier|public
class|class
name|NoTagWritableHiveObject
extends|extends
name|WritableHiveObject
implements|implements
name|Writable
implements|,
name|Configurable
block|{
specifier|public
name|NoTagWritableHiveObject
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * This constructor will be invoked by hive when creating writable  objects.    */
specifier|public
name|NoTagWritableHiveObject
parameter_list|(
name|int
name|tag
parameter_list|,
name|HiveObject
name|ho
parameter_list|,
name|HiveObjectSerializer
name|hos
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"NoTagWritables should not be initialized with tags"
argument_list|)
throw|;
block|}
specifier|public
name|NoTagWritableHiveObject
parameter_list|(
name|HiveObject
name|ho
parameter_list|,
name|HiveObjectSerializer
name|hos
parameter_list|)
block|{
name|super
argument_list|(
operator|-
literal|1
argument_list|,
name|ho
argument_list|,
name|hos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// we need just one deserializer. Get the first of them!
name|hos
operator|=
name|mapredDeserializer
index|[
literal|0
index|]
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTag
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// don't serialize tag
name|hos
operator|.
name|serialize
argument_list|(
name|ho
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// don't de-serialize tag
name|ho
operator|=
name|hos
operator|.
name|deserialize
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

