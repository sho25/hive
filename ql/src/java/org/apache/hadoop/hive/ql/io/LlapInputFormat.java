begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|api
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|api
operator|.
name|RequestFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|api
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|api
operator|.
name|Vector
operator|.
name|ColumnReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVectorVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedInputFormatInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatchCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|NullUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgumentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|LlapInputFormat
parameter_list|<
name|T
parameter_list|>
implements|implements
name|InputFormat
argument_list|<
name|NullWritable
argument_list|,
name|T
argument_list|>
implements|,
name|VectorizedInputFormatInterface
block|{
comment|/** See RequestFactory class documentation on why this is necessary */
specifier|private
specifier|final
specifier|static
name|String
name|IMPL_CLASS
init|=
literal|"org.apache.hadoop.hive.llap.api.Llap"
decl_stmt|;
specifier|private
specifier|final
name|InputFormat
argument_list|<
name|NullWritable
argument_list|,
name|T
argument_list|>
name|realInputFormat
decl_stmt|;
specifier|private
specifier|final
name|RequestFactory
name|reqFactory
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LlapInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|LlapInputFormat
parameter_list|(
name|InputFormat
argument_list|<
name|NullWritable
argument_list|,
name|T
argument_list|>
name|realInputFormat
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|realInputFormat
operator|=
name|realInputFormat
expr_stmt|;
try|try
block|{
name|reqFactory
operator|=
operator|(
name|RequestFactory
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
name|IMPL_CLASS
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to initialize impl"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|T
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isVectorMode
init|=
name|Utilities
operator|.
name|isVectorMode
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isVectorMode
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No llap in non-vectorized mode; falling back to original"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"No llap in non-vectorized mode"
argument_list|)
throw|;
comment|// return realInputFormat.getRecordReader(split, job, reporter);
block|}
name|FileSplit
name|fileSplit
init|=
operator|(
name|FileSplit
operator|)
name|split
decl_stmt|;
comment|// should work
name|reporter
operator|.
name|setStatus
argument_list|(
name|fileSplit
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|includedCols
init|=
name|ColumnProjectionUtils
operator|.
name|isReadAllColumns
argument_list|(
name|job
argument_list|)
condition|?
literal|null
else|:
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
name|includedCols
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|includedCols
operator|=
literal|null
expr_stmt|;
comment|// Also means read all columns? WTF?
block|}
name|Reader
name|reader
init|=
name|reqFactory
operator|.
name|createLocalRequest
argument_list|()
operator|.
name|setSplit
argument_list|(
name|split
argument_list|)
operator|.
name|setSarg
argument_list|(
name|SearchArgumentFactory
operator|.
name|createFromConf
argument_list|(
name|job
argument_list|)
argument_list|)
operator|.
name|setColumns
argument_list|(
name|includedCols
argument_list|)
operator|.
name|submit
argument_list|()
decl_stmt|;
comment|// TODO: presumably, we'll also pass the means to create original RecordReader
comment|//       for failover to LlapRecordReader somewhere around here. This will
comment|//       actually be quite complex because we'd somehow have to track what parts
comment|//       of file Llap has already returned, and skip these in fallback reader.
comment|// We are actually returning a completely wrong thing here wrt template parameters.
comment|// This is how vectorization does it presently; we hope the caller knows what it is doing.
return|return
name|createRecordReaderUnsafe
argument_list|(
name|job
argument_list|,
name|fileSplit
argument_list|,
name|reader
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Local request failed; falling back to original"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
comment|// just rethrow for now, for clarity
comment|// return realInputFormat.getRecordReader(split, job, reporter);
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|private
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|T
argument_list|>
name|createRecordReaderUnsafe
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|FileSplit
name|fileSplit
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|(
name|RecordReader
operator|)
operator|new
name|VectorizedLlapRecordReader
argument_list|(
name|reader
argument_list|,
name|job
argument_list|,
name|fileSplit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|realInputFormat
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
name|numSplits
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|VectorizedLlapRecordReader
implements|implements
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|VectorizedRowBatch
argument_list|>
block|{
specifier|private
specifier|final
name|Reader
name|reader
decl_stmt|;
specifier|private
name|Vector
name|currentVector
decl_stmt|;
specifier|private
name|ColumnReader
name|currentVectorSlice
decl_stmt|;
comment|// see VectorImpl, really just currentVector
specifier|private
name|int
name|currentVectorOffset
init|=
operator|-
literal|1
decl_stmt|;
comment|// number of rows read from current vector
specifier|private
name|VectorizedRowBatchCtx
name|rbCtx
decl_stmt|;
specifier|private
specifier|final
name|VrbHelper
name|vrbHelper
init|=
operator|new
name|VrbHelper
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|addPartitionCols
init|=
literal|true
decl_stmt|;
specifier|public
name|VectorizedLlapRecordReader
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|FileSplit
name|split
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
try|try
block|{
name|rbCtx
operator|=
operator|new
name|VectorizedRowBatchCtx
argument_list|()
expr_stmt|;
name|rbCtx
operator|.
name|init
argument_list|(
name|job
argument_list|,
name|split
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|NullWritable
name|key
parameter_list|,
name|VectorizedRowBatch
name|value
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
assert|assert
name|value
operator|!=
literal|null
assert|;
if|if
condition|(
name|currentVector
operator|==
literal|null
condition|)
block|{
name|currentVector
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentVector
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentVectorOffset
operator|=
literal|0
expr_stmt|;
block|}
comment|// Add partition cols if necessary (see VectorizedOrcInputFormat for details).
if|if
condition|(
name|addPartitionCols
condition|)
block|{
name|rbCtx
operator|.
name|addPartitionColsToBatch
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|addPartitionCols
operator|=
literal|false
expr_stmt|;
block|}
name|populateBatchFromVector
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|traceLogFirstRow
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|traceLogFirstRow
parameter_list|(
name|VectorizedRowBatch
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
return|return;
name|String
name|tmp
init|=
literal|"First row is ["
decl_stmt|;
for|for
control|(
name|ColumnVector
name|v
range|:
name|value
operator|.
name|cols
control|)
block|{
if|if
condition|(
name|v
operator|instanceof
name|LongColumnVector
condition|)
block|{
name|tmp
operator|+=
operator|(
operator|(
name|LongColumnVector
operator|)
name|v
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|+
literal|", "
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|DoubleColumnVector
condition|)
block|{
name|tmp
operator|+=
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|v
operator|)
operator|.
name|vector
index|[
literal|0
index|]
operator|+
literal|", "
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|tmp
operator|+=
literal|"null, "
expr_stmt|;
block|}
else|else
block|{
name|tmp
operator|+=
literal|"(something), "
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|trace
argument_list|(
name|tmp
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|populateBatchFromVector
parameter_list|(
name|VectorizedRowBatch
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: eventually, when vectorized pipeline can work directly
comment|//       on vectors instead of VRB, this will be a noop.
comment|// TODO: track time spent building VRBs as opposed to processing.
name|int
name|rowCount
init|=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
decl_stmt|,
name|rowsRemaining
init|=
name|currentVector
operator|.
name|getNumberOfRows
argument_list|()
operator|-
name|currentVectorOffset
decl_stmt|;
if|if
condition|(
name|rowsRemaining
operator|<=
name|rowCount
condition|)
block|{
name|rowCount
operator|=
name|rowsRemaining
expr_stmt|;
block|}
name|int
index|[]
name|columnMap
init|=
name|rbCtx
operator|.
name|getIncludedColumnIndexes
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnMap
operator|.
name|length
operator|!=
name|currentVector
operator|.
name|getNumberOfColumns
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected number of columns, VRB has "
operator|+
name|columnMap
operator|.
name|length
operator|+
literal|" included, but vector has "
operator|+
name|currentVector
operator|.
name|getNumberOfColumns
argument_list|()
argument_list|)
throw|;
block|}
name|vrbHelper
operator|.
name|prepare
argument_list|(
name|rowCount
argument_list|)
expr_stmt|;
comment|// VRB was created from VrbCtx, so we already have pre-allocated column vectors
for|for
control|(
name|int
name|vectorIx
init|=
literal|0
init|;
name|vectorIx
operator|<
name|currentVector
operator|.
name|getNumberOfColumns
argument_list|()
condition|;
operator|++
name|vectorIx
control|)
block|{
name|int
name|colIx
init|=
name|columnMap
index|[
name|vectorIx
index|]
decl_stmt|;
name|currentVectorSlice
operator|=
name|currentVector
operator|.
name|next
argument_list|(
name|colIx
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|target
operator|.
name|cols
index|[
name|colIx
index|]
operator|.
name|visit
argument_list|(
name|vrbHelper
argument_list|)
expr_stmt|;
block|}
name|target
operator|.
name|selectedInUse
operator|=
literal|false
expr_stmt|;
name|target
operator|.
name|size
operator|=
name|rowCount
expr_stmt|;
if|if
condition|(
name|rowsRemaining
operator|==
name|rowCount
condition|)
block|{
name|currentVector
operator|=
literal|null
expr_stmt|;
name|currentVectorOffset
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|currentVectorOffset
operator|+=
name|rowCount
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NullWritable
name|createKey
parameter_list|()
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorizedRowBatch
name|createValue
parameter_list|()
block|{
try|try
block|{
return|return
name|rbCtx
operator|.
name|createVectorizedRowBatch
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error creating a batch"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
comment|// Position doesn't make sense for async reader, chunk order is arbitrary.
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO: plumb progress info thru the reader if we can get metadata from loader first.
return|return
literal|0.0f
return|;
block|}
comment|/**      * There's one VrbHelper object per RecordReader object. We could just implement      * the visitor in RecordReader itself, but it's a bit cleaner like this.      */
specifier|private
specifier|final
class|class
name|VrbHelper
implements|implements
name|ColumnVectorVisitor
block|{
specifier|private
name|int
name|rowCount
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|void
name|prepare
parameter_list|(
name|int
name|rowCount
parameter_list|)
block|{
name|this
operator|.
name|rowCount
operator|=
name|rowCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|LongColumnVector
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|hasNulls
init|=
name|currentVectorSlice
operator|.
name|hasNulls
argument_list|()
decl_stmt|;
name|boolean
name|isSameValue
init|=
name|currentVectorSlice
operator|.
name|isSameValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSameValue
condition|)
block|{
if|if
condition|(
name|hasNulls
condition|)
block|{
name|c
operator|.
name|fillWithNulls
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|c
operator|.
name|fill
argument_list|(
name|currentVectorSlice
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|c
operator|.
name|reset
argument_list|()
expr_stmt|;
name|c
operator|.
name|noNulls
operator|=
operator|!
name|hasNulls
expr_stmt|;
name|currentVectorSlice
operator|.
name|copyLongs
argument_list|(
name|c
operator|.
name|vector
argument_list|,
name|hasNulls
condition|?
name|c
operator|.
name|isNull
else|:
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasNulls
condition|)
block|{
name|NullUtil
operator|.
name|setNullDataEntriesLong
argument_list|(
name|c
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|DoubleColumnVector
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|hasNulls
init|=
name|currentVectorSlice
operator|.
name|hasNulls
argument_list|()
decl_stmt|;
name|boolean
name|isSameValue
init|=
name|currentVectorSlice
operator|.
name|isSameValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSameValue
condition|)
block|{
if|if
condition|(
name|hasNulls
condition|)
block|{
name|c
operator|.
name|fillWithNulls
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|c
operator|.
name|fill
argument_list|(
name|currentVectorSlice
operator|.
name|getDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|c
operator|.
name|reset
argument_list|()
expr_stmt|;
name|c
operator|.
name|noNulls
operator|=
operator|!
name|hasNulls
expr_stmt|;
name|currentVectorSlice
operator|.
name|copyDoubles
argument_list|(
name|c
operator|.
name|vector
argument_list|,
name|hasNulls
condition|?
name|c
operator|.
name|isNull
else|:
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasNulls
condition|)
block|{
name|NullUtil
operator|.
name|setNullDataEntriesDouble
argument_list|(
name|c
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|DecimalColumnVector
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|hasNulls
init|=
name|currentVectorSlice
operator|.
name|hasNulls
argument_list|()
decl_stmt|;
name|boolean
name|isSameValue
init|=
name|currentVectorSlice
operator|.
name|isSameValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSameValue
condition|)
block|{
if|if
condition|(
name|hasNulls
condition|)
block|{
name|c
operator|.
name|fillWithNulls
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|c
operator|.
name|fill
argument_list|(
name|currentVectorSlice
operator|.
name|getDecimal
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|c
operator|.
name|reset
argument_list|()
expr_stmt|;
name|c
operator|.
name|noNulls
operator|=
operator|!
name|hasNulls
expr_stmt|;
comment|// TODO#: currentVectorSlice.copyDecimals(c.vector, hasNulls ? c.isNull : null, 0);
if|if
condition|(
name|hasNulls
condition|)
block|{
name|NullUtil
operator|.
name|setNullDataEntriesDecimal
argument_list|(
name|c
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|BytesColumnVector
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|hasNulls
init|=
name|currentVectorSlice
operator|.
name|hasNulls
argument_list|()
decl_stmt|;
name|boolean
name|isSameValue
init|=
name|currentVectorSlice
operator|.
name|isSameValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSameValue
condition|)
block|{
if|if
condition|(
name|hasNulls
condition|)
block|{
name|c
operator|.
name|fillWithNulls
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|c
operator|.
name|fill
argument_list|(
name|currentVectorSlice
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|c
operator|.
name|reset
argument_list|()
expr_stmt|;
name|c
operator|.
name|noNulls
operator|=
operator|!
name|hasNulls
expr_stmt|;
name|currentVectorSlice
operator|.
name|copyBytes
argument_list|(
name|c
operator|.
name|vector
argument_list|,
name|c
operator|.
name|start
argument_list|,
name|c
operator|.
name|length
argument_list|,
name|hasNulls
condition|?
name|c
operator|.
name|isNull
else|:
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasNulls
condition|)
block|{
name|NullUtil
operator|.
name|setNullDataEntriesBytes
argument_list|(
name|c
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

