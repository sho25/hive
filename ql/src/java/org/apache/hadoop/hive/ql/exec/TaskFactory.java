begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_comment
comment|/**  * TaskFactory implementation  **/
end_comment

begin_class
specifier|public
class|class
name|TaskFactory
block|{
specifier|public
specifier|final
specifier|static
class|class
name|taskTuple
parameter_list|<
name|T
extends|extends
name|Serializable
parameter_list|>
block|{
specifier|public
name|Class
argument_list|<
name|T
argument_list|>
name|workClass
decl_stmt|;
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Task
argument_list|<
name|T
argument_list|>
argument_list|>
name|taskClass
decl_stmt|;
specifier|public
name|taskTuple
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|workClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Task
argument_list|<
name|T
argument_list|>
argument_list|>
name|taskClass
parameter_list|)
block|{
name|this
operator|.
name|workClass
operator|=
name|workClass
expr_stmt|;
name|this
operator|.
name|taskClass
operator|=
name|taskClass
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|taskTuple
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|taskvec
decl_stmt|;
static|static
block|{
name|id
operator|=
literal|0
expr_stmt|;
name|taskvec
operator|=
operator|new
name|ArrayList
argument_list|<
name|taskTuple
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|taskvec
operator|.
name|add
argument_list|(
operator|new
name|taskTuple
argument_list|<
name|moveWork
argument_list|>
argument_list|(
name|moveWork
operator|.
name|class
argument_list|,
name|MoveTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|taskvec
operator|.
name|add
argument_list|(
operator|new
name|taskTuple
argument_list|<
name|fetchWork
argument_list|>
argument_list|(
name|fetchWork
operator|.
name|class
argument_list|,
name|FetchTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|taskvec
operator|.
name|add
argument_list|(
operator|new
name|taskTuple
argument_list|<
name|copyWork
argument_list|>
argument_list|(
name|copyWork
operator|.
name|class
argument_list|,
name|CopyTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|taskvec
operator|.
name|add
argument_list|(
operator|new
name|taskTuple
argument_list|<
name|DDLWork
argument_list|>
argument_list|(
name|DDLWork
operator|.
name|class
argument_list|,
name|DDLTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|taskvec
operator|.
name|add
argument_list|(
operator|new
name|taskTuple
argument_list|<
name|FunctionWork
argument_list|>
argument_list|(
name|FunctionWork
operator|.
name|class
argument_list|,
name|FunctionTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|taskvec
operator|.
name|add
argument_list|(
operator|new
name|taskTuple
argument_list|<
name|explainWork
argument_list|>
argument_list|(
name|explainWork
operator|.
name|class
argument_list|,
name|ExplainTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// we are taking this out to allow us to instantiate either MapRedTask or
comment|// ExecDriver dynamically at run time based on configuration
comment|// taskvec.add(new taskTuple<mapredWork>(mapredWork.class, ExecDriver.class));
block|}
specifier|private
specifier|static
name|int
name|id
decl_stmt|;
specifier|public
specifier|static
name|void
name|resetId
parameter_list|()
block|{
name|id
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Serializable
parameter_list|>
name|Task
argument_list|<
name|T
argument_list|>
name|get
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|workClass
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
for|for
control|(
name|taskTuple
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|t
range|:
name|taskvec
control|)
block|{
if|if
condition|(
name|t
operator|.
name|workClass
operator|==
name|workClass
condition|)
block|{
try|try
block|{
name|Task
argument_list|<
name|T
argument_list|>
name|ret
init|=
operator|(
name|Task
argument_list|<
name|T
argument_list|>
operator|)
name|t
operator|.
name|taskClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setId
argument_list|(
literal|"Stage-"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|id
operator|++
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|workClass
operator|==
name|mapredWork
operator|.
name|class
condition|)
block|{
name|String
name|viachild
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SUBMITVIACHILD
argument_list|)
decl_stmt|;
try|try
block|{
comment|// in local mode - or if otherwise so configured - always submit
comment|// jobs via separate jvm
name|Task
argument_list|<
name|T
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPJT
argument_list|)
operator|.
name|equals
argument_list|(
literal|"local"
argument_list|)
operator|||
name|viachild
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|ret
operator|=
operator|(
name|Task
argument_list|<
name|T
argument_list|>
operator|)
name|MapRedTask
operator|.
name|class
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
operator|(
name|Task
argument_list|<
name|T
argument_list|>
operator|)
name|ExecDriver
operator|.
name|class
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
name|ret
operator|.
name|setId
argument_list|(
literal|"Stage-"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|id
operator|++
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No task for work class "
operator|+
name|workClass
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Serializable
parameter_list|>
name|Task
argument_list|<
name|T
argument_list|>
name|get
parameter_list|(
name|T
name|work
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
modifier|...
name|tasklist
parameter_list|)
block|{
name|Task
argument_list|<
name|T
argument_list|>
name|ret
init|=
name|get
argument_list|(
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|work
operator|.
name|getClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ret
operator|.
name|setWork
argument_list|(
name|work
argument_list|)
expr_stmt|;
if|if
condition|(
name|tasklist
operator|.
name|length
operator|==
literal|0
condition|)
return|return
operator|(
name|ret
operator|)
return|;
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|clist
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|tasklist
control|)
block|{
name|clist
operator|.
name|add
argument_list|(
name|tsk
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setChildTasks
argument_list|(
name|clist
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Serializable
parameter_list|>
name|Task
argument_list|<
name|T
argument_list|>
name|getAndMakeChild
parameter_list|(
name|T
name|work
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
modifier|...
name|tasklist
parameter_list|)
block|{
name|Task
argument_list|<
name|T
argument_list|>
name|ret
init|=
name|get
argument_list|(
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|work
operator|.
name|getClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ret
operator|.
name|setWork
argument_list|(
name|work
argument_list|)
expr_stmt|;
if|if
condition|(
name|tasklist
operator|.
name|length
operator|==
literal|0
condition|)
return|return
operator|(
name|ret
operator|)
return|;
comment|// Add the new task as child of each of the passed in tasks
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|tasklist
control|)
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|children
init|=
name|tsk
operator|.
name|getChildTasks
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|children
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|tsk
operator|.
name|setChildTasks
argument_list|(
name|children
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
block|}
end_class

end_unit

