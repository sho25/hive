begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|errors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_comment
comment|/**  * Detects out-of-memory errors when hash tables in map-based aggregation group  * by queries take up too much memory.  *  * Conditions to check  *  * 1. The query contains a group by.  * 2. Map-side aggregation is turned on.  * 3. There is a out of memory exception in the log.  */
end_comment

begin_class
specifier|public
class|class
name|MapAggrMemErrorHeuristic
extends|extends
name|RegexErrorHeuristic
block|{
specifier|private
specifier|static
specifier|final
name|String
name|OUT_OF_MEMORY_REGEX
init|=
literal|"OutOfMemoryError"
decl_stmt|;
specifier|private
name|boolean
name|configMatches
init|=
literal|false
decl_stmt|;
specifier|public
name|MapAggrMemErrorHeuristic
parameter_list|()
block|{
name|setQueryRegex
argument_list|(
literal|"group by"
argument_list|)
expr_stmt|;
name|getLogRegexes
argument_list|()
operator|.
name|add
argument_list|(
name|OUT_OF_MEMORY_REGEX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|String
name|query
parameter_list|,
name|JobConf
name|conf
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|query
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|configMatches
operator|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPSIDEAGGREGATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ErrorAndSolution
name|getErrorAndSolution
parameter_list|()
block|{
name|ErrorAndSolution
name|es
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getQueryMatches
argument_list|()
operator|&&
name|configMatches
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|matchingLines
init|=
name|getRegexToLogLines
argument_list|()
operator|.
name|get
argument_list|(
name|OUT_OF_MEMORY_REGEX
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchingLines
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|confName
init|=
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPAGGRHASHMEMORY
operator|.
name|toString
argument_list|()
decl_stmt|;
name|float
name|confValue
init|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPAGGRHASHMEMORY
argument_list|)
decl_stmt|;
name|es
operator|=
operator|new
name|ErrorAndSolution
argument_list|(
literal|"Out of memory due to hash maps used in map-side aggregation."
argument_list|,
literal|"Currently "
operator|+
name|confName
operator|+
literal|" is set to "
operator|+
name|confValue
operator|+
literal|". "
operator|+
literal|"Try setting it to a lower value. i.e "
operator|+
literal|"'set "
operator|+
name|confName
operator|+
literal|" = "
operator|+
name|confValue
operator|/
literal|2
operator|+
literal|";'"
argument_list|)
expr_stmt|;
block|}
block|}
name|reset
argument_list|()
expr_stmt|;
return|return
name|es
return|;
block|}
block|}
end_class

end_unit

