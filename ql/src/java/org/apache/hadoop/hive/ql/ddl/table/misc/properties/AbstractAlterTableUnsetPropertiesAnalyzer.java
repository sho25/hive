begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|misc
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AbstractAlterTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_comment
comment|/**  * Analyzer for unsetting the properties of table like entities commands.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractAlterTableUnsetPropertiesAnalyzer
extends|extends
name|AbstractAlterTablePropertiesAnalyzer
block|{
specifier|public
name|AbstractAlterTableUnsetPropertiesAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|AbstractAlterTableDesc
name|createDesc
parameter_list|(
name|ASTNode
name|command
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|,
name|boolean
name|isToTxn
parameter_list|,
name|boolean
name|isExplicitStatsUpdate
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|)
throws|throws
name|SemanticException
block|{
name|boolean
name|dropIfExists
init|=
name|command
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|!=
literal|null
decl_stmt|;
comment|// validate Unset Non Existed Table Properties
if|if
condition|(
operator|!
name|dropIfExists
condition|)
block|{
name|Table
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
init|=
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|getParameters
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|tableParams
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|String
name|errorMsg
init|=
literal|"The following property "
operator|+
name|key
operator|+
literal|" does not exist in "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|ALTER_TBL_UNSET_NON_EXIST_PROPERTY
operator|.
name|getMsg
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
return|return
operator|new
name|AlterTableUnsetPropertiesDesc
argument_list|(
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
literal|null
argument_list|,
name|isView
argument_list|()
argument_list|,
name|properties
argument_list|,
name|isExplicitStatsUpdate
argument_list|,
name|environmentContext
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|boolean
name|isView
parameter_list|()
function_decl|;
block|}
end_class

end_unit

