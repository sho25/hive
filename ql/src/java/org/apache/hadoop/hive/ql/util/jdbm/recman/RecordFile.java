begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * JDBM LICENSE v1.00  *  * Redistribution and use of this software and associated documentation  * ("Software"), with or without modification, are permitted provided  * that the following conditions are met:  *  * 1. Redistributions of source code must retain copyright  *    statements and notices.  Redistributions must also contain a  *    copy of this document.  *  * 2. Redistributions in binary form must reproduce the  *    above copyright notice, this list of conditions and the  *    following disclaimer in the documentation and/or other  *    materials provided with the distribution.  *  * 3. The name "JDBM" must not be used to endorse or promote  *    products derived from this Software without prior written  *    permission of Cees de Groot.  For written permission,  *    please contact cg@cdegroot.com.  *  * 4. Products derived from this Software may not be called "JDBM"  *    nor may "JDBM" appear in their names without prior written  *    permission of Cees de Groot.  *  * 5. Due credit should be given to the JDBM Project  *    (http://jdbm.sourceforge.net/).  *  * THIS SOFTWARE IS PROVIDED BY THE JDBM PROJECT AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL  * CEES DE GROOT OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  *  * Copyright 2000 (C) Cees de Groot. All Rights Reserved.  * Contributions are Copyright (C) 2000 by their associated contributors.  *  * $Id: RecordFile.java,v 1.6 2005/06/25 23:12:32 doomdark Exp $  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|recman
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  This class represents a random access file as a set of fixed size  *  records. Each record has a physical record number, and records are  *  cached in order to improve access.  *<p>  *  The set of dirty records on the in-use list constitutes a transaction.  *  Later on, we will send these records to some recovery thingy.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|RecordFile
block|{
specifier|final
name|TransactionManager
name|txnMgr
decl_stmt|;
comment|// Todo: reorganize in hashes and fifos as necessary.
comment|// free -> inUse -> dirty -> inTxn -> free
comment|// free is a cache, thus a FIFO. The rest are hashes.
specifier|private
specifier|final
name|LinkedList
name|free
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HashMap
name|inUse
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HashMap
name|dirty
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HashMap
name|inTxn
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// transactions disabled?
specifier|private
name|boolean
name|transactionsDisabled
init|=
literal|false
decl_stmt|;
comment|/** The length of a single block. */
specifier|public
specifier|final
specifier|static
name|int
name|BLOCK_SIZE
init|=
literal|8192
decl_stmt|;
comment|//4096;
comment|/** The extension of a record file */
specifier|final
specifier|static
name|String
name|extension
init|=
literal|".db"
decl_stmt|;
comment|/** A block of clean data to wipe clean pages. */
specifier|final
specifier|static
name|byte
index|[]
name|cleanData
init|=
operator|new
name|byte
index|[
name|BLOCK_SIZE
index|]
decl_stmt|;
specifier|private
name|RandomAccessFile
name|file
decl_stmt|;
specifier|private
specifier|final
name|String
name|fileName
decl_stmt|;
comment|/**      *  Creates a new object on the indicated filename. The file is      *  opened in read/write mode.      *      *  @param fileName the name of the file to open or create, without      *         an extension.      *  @throws IOException whenever the creation of the underlying      *          RandomAccessFile throws it.      */
name|RecordFile
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
name|file
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|fileName
operator|+
name|extension
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|txnMgr
operator|=
operator|new
name|TransactionManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Creates a new object on the indicated filename. The file is      *  opened in read/write mode.      *      *  @param fileName the name of the file to open or create, without      *         an extension.      *  @throws IOException whenever the creation of the underlying      *          RandomAccessFile throws it.      */
name|RecordFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fileName
operator|=
name|file
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|file
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|txnMgr
operator|=
operator|new
name|TransactionManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Returns the file name.      */
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|fileName
return|;
block|}
comment|/**      *  Disables transactions: doesn't sync and doesn't use the      *  transaction manager.      */
name|void
name|disableTransactions
parameter_list|()
block|{
name|transactionsDisabled
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      *  Gets a block from the file. The returned byte array is      *  the in-memory copy of the record, and thus can be written      *  (and subsequently released with a dirty flag in order to      *  write the block back).      *      *  @param blockid The record number to retrieve.      */
name|BlockIo
name|get
parameter_list|(
name|long
name|blockid
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|key
init|=
operator|new
name|Long
argument_list|(
name|blockid
argument_list|)
decl_stmt|;
comment|// try in transaction list, dirty list, free list
name|BlockIo
name|node
init|=
operator|(
name|BlockIo
operator|)
name|inTxn
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|inTxn
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|inUse
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
name|node
operator|=
operator|(
name|BlockIo
operator|)
name|dirty
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|dirty
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|inUse
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|free
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BlockIo
name|cur
init|=
operator|(
name|BlockIo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cur
operator|.
name|getBlockId
argument_list|()
operator|==
name|blockid
condition|)
block|{
name|node
operator|=
name|cur
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|inUse
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
block|}
comment|// sanity check: can't be on in use list
if|if
condition|(
name|inUse
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"double get for block "
operator|+
name|blockid
argument_list|)
throw|;
block|}
comment|// get a new node and read it from the file
name|node
operator|=
name|getNewNode
argument_list|(
name|blockid
argument_list|)
expr_stmt|;
name|long
name|offset
init|=
name|blockid
operator|*
name|BLOCK_SIZE
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|offset
operator|<=
name|file
operator|.
name|length
argument_list|()
condition|)
block|{
name|read
argument_list|(
name|file
argument_list|,
name|offset
argument_list|,
name|node
operator|.
name|getData
argument_list|()
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|cleanData
argument_list|,
literal|0
argument_list|,
name|node
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
block|}
name|inUse
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|node
operator|.
name|setClean
argument_list|()
expr_stmt|;
return|return
name|node
return|;
block|}
comment|/**      *  Releases a block.      *      *  @param blockid The record number to release.      *  @param isDirty If true, the block was modified since the get().      */
name|void
name|release
parameter_list|(
name|long
name|blockid
parameter_list|,
name|boolean
name|isDirty
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockIo
name|node
init|=
operator|(
name|BlockIo
operator|)
name|inUse
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|blockid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"bad blockid "
operator|+
name|blockid
operator|+
literal|" on release"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|node
operator|.
name|isDirty
argument_list|()
operator|&&
name|isDirty
condition|)
name|node
operator|.
name|setDirty
argument_list|()
expr_stmt|;
name|release
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Releases a block.      *      *  @param block The block to release.      */
name|void
name|release
parameter_list|(
name|BlockIo
name|block
parameter_list|)
block|{
name|Long
name|key
init|=
operator|new
name|Long
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
name|inUse
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|block
operator|.
name|isDirty
argument_list|()
condition|)
block|{
comment|// System.out.println( "Dirty: " + key + block );
name|dirty
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|transactionsDisabled
operator|&&
name|block
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
name|inTxn
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|free
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      *  Discards a block (will not write the block even if it's dirty)      *      *  @param block The block to discard.      */
name|void
name|discard
parameter_list|(
name|BlockIo
name|block
parameter_list|)
block|{
name|Long
name|key
init|=
operator|new
name|Long
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
name|inUse
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// note: block not added to free list on purpose, because
comment|//       it's considered invalid
block|}
comment|/**      *  Commits the current transaction by flushing all dirty buffers      *  to disk.      */
name|void
name|commit
parameter_list|()
throws|throws
name|IOException
block|{
comment|// debugging...
if|if
condition|(
operator|!
name|inUse
operator|.
name|isEmpty
argument_list|()
operator|&&
name|inUse
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|showList
argument_list|(
name|inUse
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|(
literal|"in use list not empty at commit time ("
operator|+
name|inUse
operator|.
name|size
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
comment|//  System.out.println("committing...");
if|if
condition|(
name|dirty
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// if no dirty blocks, skip commit process
return|return;
block|}
if|if
condition|(
operator|!
name|transactionsDisabled
condition|)
block|{
name|txnMgr
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|dirty
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BlockIo
name|node
init|=
operator|(
name|BlockIo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// System.out.println("node " + node + " map size now " + dirty.size());
if|if
condition|(
name|transactionsDisabled
condition|)
block|{
name|long
name|offset
init|=
name|node
operator|.
name|getBlockId
argument_list|()
operator|*
name|BLOCK_SIZE
decl_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
name|node
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setClean
argument_list|()
expr_stmt|;
name|free
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|txnMgr
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|inTxn
operator|.
name|put
argument_list|(
operator|new
name|Long
argument_list|(
name|node
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|transactionsDisabled
condition|)
block|{
name|txnMgr
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      *  Rollback the current transaction by discarding all dirty buffers      */
name|void
name|rollback
parameter_list|()
throws|throws
name|IOException
block|{
comment|// debugging...
if|if
condition|(
operator|!
name|inUse
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|showList
argument_list|(
name|inUse
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|(
literal|"in use list not empty at rollback time ("
operator|+
name|inUse
operator|.
name|size
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
comment|//  System.out.println("rollback...");
name|dirty
operator|.
name|clear
argument_list|()
expr_stmt|;
name|txnMgr
operator|.
name|synchronizeLogFromDisk
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|inTxn
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|showList
argument_list|(
name|inTxn
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|(
literal|"in txn list not empty at rollback time ("
operator|+
name|inTxn
operator|.
name|size
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
empty_stmt|;
block|}
comment|/**      *  Commits and closes file.      */
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|dirty
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|commit
argument_list|()
expr_stmt|;
block|}
name|txnMgr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|transactionsDisabled
condition|)
block|{
name|txnMgr
operator|.
name|removeLogFile
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|inTxn
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|showList
argument_list|(
name|inTxn
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|(
literal|"In transaction not empty"
argument_list|)
throw|;
block|}
comment|// these actually ain't that bad in a production release
if|if
condition|(
operator|!
name|dirty
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: dirty blocks at close time"
argument_list|)
expr_stmt|;
name|showList
argument_list|(
name|dirty
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|(
literal|"Dirty blocks at close time"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|inUse
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: inUse blocks at close time"
argument_list|)
expr_stmt|;
name|showList
argument_list|(
name|inUse
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|(
literal|"inUse blocks at close time"
argument_list|)
throw|;
block|}
comment|// debugging stuff to keep an eye on the free list
comment|// System.out.println("Free list size:" + free.size());
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|file
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Force closing the file and underlying transaction manager.      * Used for testing purposed only.      */
name|void
name|forceClose
parameter_list|()
throws|throws
name|IOException
block|{
name|txnMgr
operator|.
name|forceClose
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      *  Prints contents of a list      */
specifier|private
name|void
name|showList
parameter_list|(
name|Iterator
name|i
parameter_list|)
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"elem "
operator|+
name|cnt
operator|+
literal|": "
operator|+
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
block|}
comment|/**      *  Returns a new node. The node is retrieved (and removed)      *  from the released list or created new.      */
specifier|private
name|BlockIo
name|getNewNode
parameter_list|(
name|long
name|blockid
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockIo
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|free
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|retval
operator|=
operator|(
name|BlockIo
operator|)
name|free
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|retval
operator|==
literal|null
condition|)
name|retval
operator|=
operator|new
name|BlockIo
argument_list|(
literal|0
argument_list|,
operator|new
name|byte
index|[
name|BLOCK_SIZE
index|]
argument_list|)
expr_stmt|;
name|retval
operator|.
name|setBlockId
argument_list|(
name|blockid
argument_list|)
expr_stmt|;
name|retval
operator|.
name|setView
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
comment|/**      *  Synchs a node to disk. This is called by the transaction manager's      *  synchronization code.      */
name|void
name|synch
parameter_list|(
name|BlockIo
name|node
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|node
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|long
name|offset
init|=
name|node
operator|.
name|getBlockId
argument_list|()
operator|*
name|BLOCK_SIZE
decl_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Releases a node from the transaction list, if it was sitting      *  there.      *      *  @param recycle true if block data can be reused      */
name|void
name|releaseFromTransaction
parameter_list|(
name|BlockIo
name|node
parameter_list|,
name|boolean
name|recycle
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|key
init|=
operator|new
name|Long
argument_list|(
name|node
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|inTxn
operator|.
name|remove
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
operator|)
operator|&&
name|recycle
condition|)
block|{
name|free
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Synchronizes the file.      */
name|void
name|sync
parameter_list|()
throws|throws
name|IOException
block|{
name|file
operator|.
name|getFD
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
comment|/**      * Utility method: Read a block from a RandomAccessFile      */
specifier|private
specifier|static
name|void
name|read
parameter_list|(
name|RandomAccessFile
name|file
parameter_list|,
name|long
name|offset
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|nBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|file
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|int
name|remaining
init|=
name|nBytes
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
name|int
name|read
init|=
name|file
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|pos
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|==
operator|-
literal|1
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|cleanData
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
name|pos
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
break|break;
block|}
name|remaining
operator|-=
name|read
expr_stmt|;
name|pos
operator|+=
name|read
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

