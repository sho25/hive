begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDAFPercentile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFAbs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFAcos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFAscii
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFAsin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFAtan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFBin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFCeil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFConcat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFConv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFCos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFDateAdd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFDateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFDateSub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFDayOfMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFDegrees
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFFindInSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFFloor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFFromUnixTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFHex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFHour
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFJson
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLTrim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLength
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLike
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLog10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLog2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLower
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLpad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFMinute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPBitAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPBitNot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPBitOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPBitXor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPDivide
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPLongDivide
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPMinus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPMod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPMultiply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPNegative
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPPositive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFPI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFParseUrl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFPosMod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFPower
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRTrim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRadians
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRegExpExtract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRegExpReplace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRepeat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFReverse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRpad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSecond
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSqrt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSubstr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFTan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToByte
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToShort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFTrim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFUnhex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFUnixTimeStamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFUpper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFWeekOfYear
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFYear
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFAverage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFCollectSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFContextNGrams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFCorrelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFCovariance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFCovarianceSample
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEWAHBitmap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFHistogramNumeric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFMax
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFMin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFParameterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFPercentileApprox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFResolver2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFStd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFStdSample
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFSum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFVariance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFVarianceSample
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFnGrams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFArrayContains
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFCoalesce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFConcatWS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFEWAHBitmapAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFEWAHBitmapEmpty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFEWAHBitmapOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFElt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFFromUtcTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFHash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFIf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFIn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFInstr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFLocate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFMapKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFMapValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFNamedStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFReflect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFSentences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFStringToMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToUtcTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFWhen
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDTF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDTFExplode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDTFJSONTuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDTFParseUrlTuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|SimpleGenericUDAFParameterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|GenericUDFXPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|UDFXPathBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|UDFXPathDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|UDFXPathFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|UDFXPathInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|UDFXPathLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|UDFXPathShort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|UDFXPathString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * FunctionRegistry.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|FunctionRegistry
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FunctionRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The mapping from expression function names to expression classes.    */
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|FunctionInfo
argument_list|>
name|mFunctions
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|FunctionInfo
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|registerUDF
argument_list|(
literal|"concat"
argument_list|,
name|UDFConcat
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"substr"
argument_list|,
name|UDFSubstr
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"substring"
argument_list|,
name|UDFSubstr
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"space"
argument_list|,
name|UDFSpace
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"repeat"
argument_list|,
name|UDFRepeat
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"ascii"
argument_list|,
name|UDFAscii
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"lpad"
argument_list|,
name|UDFLpad
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"rpad"
argument_list|,
name|UDFRpad
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"size"
argument_list|,
name|GenericUDFSize
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"round"
argument_list|,
name|UDFRound
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"floor"
argument_list|,
name|UDFFloor
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"sqrt"
argument_list|,
name|UDFSqrt
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"ceil"
argument_list|,
name|UDFCeil
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"ceiling"
argument_list|,
name|UDFCeil
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"rand"
argument_list|,
name|UDFRand
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"abs"
argument_list|,
name|UDFAbs
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"pmod"
argument_list|,
name|UDFPosMod
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"ln"
argument_list|,
name|UDFLn
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"log2"
argument_list|,
name|UDFLog2
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"sin"
argument_list|,
name|UDFSin
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"asin"
argument_list|,
name|UDFAsin
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"cos"
argument_list|,
name|UDFCos
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"acos"
argument_list|,
name|UDFAcos
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"log10"
argument_list|,
name|UDFLog10
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"log"
argument_list|,
name|UDFLog
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"exp"
argument_list|,
name|UDFExp
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"power"
argument_list|,
name|UDFPower
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"pow"
argument_list|,
name|UDFPower
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"sign"
argument_list|,
name|UDFSign
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"pi"
argument_list|,
name|UDFPI
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"degrees"
argument_list|,
name|UDFDegrees
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"radians"
argument_list|,
name|UDFRadians
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"atan"
argument_list|,
name|UDFAtan
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"tan"
argument_list|,
name|UDFTan
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"e"
argument_list|,
name|UDFE
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"conv"
argument_list|,
name|UDFConv
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"bin"
argument_list|,
name|UDFBin
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"hex"
argument_list|,
name|UDFHex
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"unhex"
argument_list|,
name|UDFUnhex
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"upper"
argument_list|,
name|UDFUpper
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"lower"
argument_list|,
name|UDFLower
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"ucase"
argument_list|,
name|UDFUpper
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"lcase"
argument_list|,
name|UDFLower
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"trim"
argument_list|,
name|UDFTrim
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"ltrim"
argument_list|,
name|UDFLTrim
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"rtrim"
argument_list|,
name|UDFRTrim
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"length"
argument_list|,
name|UDFLength
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"reverse"
argument_list|,
name|UDFReverse
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"field"
argument_list|,
name|GenericUDFField
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"find_in_set"
argument_list|,
name|UDFFindInSet
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"like"
argument_list|,
name|UDFLike
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"rlike"
argument_list|,
name|UDFRegExp
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"regexp"
argument_list|,
name|UDFRegExp
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"regexp_replace"
argument_list|,
name|UDFRegExpReplace
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"regexp_extract"
argument_list|,
name|UDFRegExpExtract
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"parse_url"
argument_list|,
name|UDFParseUrl
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"split"
argument_list|,
name|GenericUDFSplit
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"str_to_map"
argument_list|,
name|GenericUDFStringToMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"positive"
argument_list|,
name|UDFOPPositive
operator|.
name|class
argument_list|,
literal|true
argument_list|,
literal|"+"
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"negative"
argument_list|,
name|UDFOPNegative
operator|.
name|class
argument_list|,
literal|true
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"day"
argument_list|,
name|UDFDayOfMonth
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"dayofmonth"
argument_list|,
name|UDFDayOfMonth
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"month"
argument_list|,
name|UDFMonth
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"year"
argument_list|,
name|UDFYear
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"hour"
argument_list|,
name|UDFHour
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"minute"
argument_list|,
name|UDFMinute
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"second"
argument_list|,
name|UDFSecond
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"from_unixtime"
argument_list|,
name|UDFFromUnixTime
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"unix_timestamp"
argument_list|,
name|UDFUnixTimeStamp
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"to_date"
argument_list|,
name|UDFDate
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"weekofyear"
argument_list|,
name|UDFWeekOfYear
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"date_add"
argument_list|,
name|UDFDateAdd
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"date_sub"
argument_list|,
name|UDFDateSub
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"datediff"
argument_list|,
name|UDFDateDiff
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"get_json_object"
argument_list|,
name|UDFJson
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"xpath_string"
argument_list|,
name|UDFXPathString
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"xpath_boolean"
argument_list|,
name|UDFXPathBoolean
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"xpath_number"
argument_list|,
name|UDFXPathDouble
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"xpath_double"
argument_list|,
name|UDFXPathDouble
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"xpath_float"
argument_list|,
name|UDFXPathFloat
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"xpath_long"
argument_list|,
name|UDFXPathLong
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"xpath_int"
argument_list|,
name|UDFXPathInteger
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"xpath_short"
argument_list|,
name|UDFXPathShort
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"xpath"
argument_list|,
name|GenericUDFXPath
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"+"
argument_list|,
name|UDFOPPlus
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"-"
argument_list|,
name|UDFOPMinus
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"*"
argument_list|,
name|UDFOPMultiply
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"/"
argument_list|,
name|UDFOPDivide
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"%"
argument_list|,
name|UDFOPMod
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"div"
argument_list|,
name|UDFOPLongDivide
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"&"
argument_list|,
name|UDFOPBitAnd
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"|"
argument_list|,
name|UDFOPBitOr
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"^"
argument_list|,
name|UDFOPBitXor
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"~"
argument_list|,
name|UDFOPBitNot
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"isnull"
argument_list|,
name|GenericUDFOPNull
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"isnotnull"
argument_list|,
name|GenericUDFOPNotNull
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"if"
argument_list|,
name|GenericUDFIf
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"in"
argument_list|,
name|GenericUDFIn
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"and"
argument_list|,
name|GenericUDFOPAnd
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"or"
argument_list|,
name|GenericUDFOPOr
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"="
argument_list|,
name|GenericUDFOPEqual
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"=="
argument_list|,
name|GenericUDFOPEqual
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"!="
argument_list|,
name|GenericUDFOPNotEqual
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"<>"
argument_list|,
name|GenericUDFOPNotEqual
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"<"
argument_list|,
name|GenericUDFOPLessThan
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"<="
argument_list|,
name|GenericUDFOPEqualOrLessThan
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|">"
argument_list|,
name|GenericUDFOPGreaterThan
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|">="
argument_list|,
name|GenericUDFOPEqualOrGreaterThan
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"not"
argument_list|,
name|GenericUDFOPNot
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"!"
argument_list|,
name|GenericUDFOPNot
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"ewah_bitmap_and"
argument_list|,
name|GenericUDFEWAHBitmapAnd
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"ewah_bitmap_or"
argument_list|,
name|GenericUDFEWAHBitmapOr
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"ewah_bitmap_empty"
argument_list|,
name|GenericUDFEWAHBitmapEmpty
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Aliases for Java Class Names
comment|// These are used in getImplicitConvertUDFMethod
name|registerUDF
argument_list|(
name|Constants
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|,
name|UDFToBoolean
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|UDFToBoolean
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
name|Constants
operator|.
name|TINYINT_TYPE_NAME
argument_list|,
name|UDFToByte
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|UDFToByte
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
name|Constants
operator|.
name|SMALLINT_TYPE_NAME
argument_list|,
name|UDFToShort
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|UDFToShort
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|,
name|UDFToInteger
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|UDFToInteger
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
name|Constants
operator|.
name|BIGINT_TYPE_NAME
argument_list|,
name|UDFToLong
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|UDFToLong
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
name|Constants
operator|.
name|FLOAT_TYPE_NAME
argument_list|,
name|UDFToFloat
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|UDFToFloat
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
name|Constants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|,
name|UDFToDouble
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|UDFToDouble
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
name|UDFToString
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|UDFToString
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
name|Constants
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|,
name|GenericUDFTimestamp
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Aggregate functions
name|registerGenericUDAF
argument_list|(
literal|"max"
argument_list|,
operator|new
name|GenericUDAFMax
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"min"
argument_list|,
operator|new
name|GenericUDAFMin
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|GenericUDAFSum
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"count"
argument_list|,
operator|new
name|GenericUDAFCount
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"avg"
argument_list|,
operator|new
name|GenericUDAFAverage
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"std"
argument_list|,
operator|new
name|GenericUDAFStd
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"stddev"
argument_list|,
operator|new
name|GenericUDAFStd
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"stddev_pop"
argument_list|,
operator|new
name|GenericUDAFStd
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"stddev_samp"
argument_list|,
operator|new
name|GenericUDAFStdSample
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"variance"
argument_list|,
operator|new
name|GenericUDAFVariance
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"var_pop"
argument_list|,
operator|new
name|GenericUDAFVariance
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"var_samp"
argument_list|,
operator|new
name|GenericUDAFVarianceSample
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"covar_pop"
argument_list|,
operator|new
name|GenericUDAFCovariance
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"covar_samp"
argument_list|,
operator|new
name|GenericUDAFCovarianceSample
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"corr"
argument_list|,
operator|new
name|GenericUDAFCorrelation
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"histogram_numeric"
argument_list|,
operator|new
name|GenericUDAFHistogramNumeric
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"percentile_approx"
argument_list|,
operator|new
name|GenericUDAFPercentileApprox
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"collect_set"
argument_list|,
operator|new
name|GenericUDAFCollectSet
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"ngrams"
argument_list|,
operator|new
name|GenericUDAFnGrams
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"context_ngrams"
argument_list|,
operator|new
name|GenericUDAFContextNGrams
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"ewah_bitmap"
argument_list|,
operator|new
name|GenericUDAFEWAHBitmap
argument_list|()
argument_list|)
expr_stmt|;
name|registerUDAF
argument_list|(
literal|"percentile"
argument_list|,
name|UDAFPercentile
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Generic UDFs
name|registerGenericUDF
argument_list|(
literal|"reflect"
argument_list|,
name|GenericUDFReflect
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"array"
argument_list|,
name|GenericUDFArray
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"map"
argument_list|,
name|GenericUDFMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"struct"
argument_list|,
name|GenericUDFStruct
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"named_struct"
argument_list|,
name|GenericUDFNamedStruct
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"create_union"
argument_list|,
name|GenericUDFUnion
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"case"
argument_list|,
name|GenericUDFCase
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"when"
argument_list|,
name|GenericUDFWhen
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"hash"
argument_list|,
name|GenericUDFHash
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"coalesce"
argument_list|,
name|GenericUDFCoalesce
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"index"
argument_list|,
name|GenericUDFIndex
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"instr"
argument_list|,
name|GenericUDFInstr
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"locate"
argument_list|,
name|GenericUDFLocate
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"elt"
argument_list|,
name|GenericUDFElt
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"concat_ws"
argument_list|,
name|GenericUDFConcatWS
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"array_contains"
argument_list|,
name|GenericUDFArrayContains
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"sentences"
argument_list|,
name|GenericUDFSentences
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"map_keys"
argument_list|,
name|GenericUDFMapKeys
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"map_values"
argument_list|,
name|GenericUDFMapValues
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"from_utc_timestamp"
argument_list|,
name|GenericUDFFromUtcTimestamp
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"to_utc_timestamp"
argument_list|,
name|GenericUDFToUtcTimestamp
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Generic UDTF's
name|registerGenericUDTF
argument_list|(
literal|"explode"
argument_list|,
name|GenericUDTFExplode
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDTF
argument_list|(
literal|"json_tuple"
argument_list|,
name|GenericUDTFJSONTuple
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDTF
argument_list|(
literal|"parse_url_tuple"
argument_list|,
name|GenericUDTFParseUrlTuple
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerTemporaryUDF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|UDFClass
parameter_list|,
name|boolean
name|isOperator
parameter_list|)
block|{
name|registerUDF
argument_list|(
literal|false
argument_list|,
name|functionName
argument_list|,
name|UDFClass
argument_list|,
name|isOperator
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|registerUDF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|UDFClass
parameter_list|,
name|boolean
name|isOperator
parameter_list|)
block|{
name|registerUDF
argument_list|(
literal|true
argument_list|,
name|functionName
argument_list|,
name|UDFClass
argument_list|,
name|isOperator
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerUDF
parameter_list|(
name|boolean
name|isNative
parameter_list|,
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|UDFClass
parameter_list|,
name|boolean
name|isOperator
parameter_list|)
block|{
name|registerUDF
argument_list|(
name|isNative
argument_list|,
name|functionName
argument_list|,
name|UDFClass
argument_list|,
name|isOperator
argument_list|,
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerUDF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|UDFClass
parameter_list|,
name|boolean
name|isOperator
parameter_list|,
name|String
name|displayName
parameter_list|)
block|{
name|registerUDF
argument_list|(
literal|true
argument_list|,
name|functionName
argument_list|,
name|UDFClass
argument_list|,
name|isOperator
argument_list|,
name|displayName
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerUDF
parameter_list|(
name|boolean
name|isNative
parameter_list|,
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|UDFClass
parameter_list|,
name|boolean
name|isOperator
parameter_list|,
name|String
name|displayName
parameter_list|)
block|{
if|if
condition|(
name|UDF
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|UDFClass
argument_list|)
condition|)
block|{
name|FunctionInfo
name|fI
init|=
operator|new
name|FunctionInfo
argument_list|(
name|isNative
argument_list|,
name|displayName
argument_list|,
operator|new
name|GenericUDFBridge
argument_list|(
name|displayName
argument_list|,
name|isOperator
argument_list|,
name|UDFClass
argument_list|)
argument_list|)
decl_stmt|;
name|mFunctions
operator|.
name|put
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Registering UDF Class "
operator|+
name|UDFClass
operator|+
literal|" which does not extend "
operator|+
name|UDF
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|registerTemporaryGenericUDF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDF
argument_list|>
name|genericUDFClass
parameter_list|)
block|{
name|registerGenericUDF
argument_list|(
literal|false
argument_list|,
name|functionName
argument_list|,
name|genericUDFClass
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|registerGenericUDF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDF
argument_list|>
name|genericUDFClass
parameter_list|)
block|{
name|registerGenericUDF
argument_list|(
literal|true
argument_list|,
name|functionName
argument_list|,
name|genericUDFClass
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerGenericUDF
parameter_list|(
name|boolean
name|isNative
parameter_list|,
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDF
argument_list|>
name|genericUDFClass
parameter_list|)
block|{
if|if
condition|(
name|GenericUDF
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|genericUDFClass
argument_list|)
condition|)
block|{
name|FunctionInfo
name|fI
init|=
operator|new
name|FunctionInfo
argument_list|(
name|isNative
argument_list|,
name|functionName
argument_list|,
operator|(
name|GenericUDF
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|genericUDFClass
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|mFunctions
operator|.
name|put
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Registering GenericUDF Class "
operator|+
name|genericUDFClass
operator|+
literal|" which does not extend "
operator|+
name|GenericUDF
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|registerTemporaryGenericUDTF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDTF
argument_list|>
name|genericUDTFClass
parameter_list|)
block|{
name|registerGenericUDTF
argument_list|(
literal|false
argument_list|,
name|functionName
argument_list|,
name|genericUDTFClass
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|registerGenericUDTF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDTF
argument_list|>
name|genericUDTFClass
parameter_list|)
block|{
name|registerGenericUDTF
argument_list|(
literal|true
argument_list|,
name|functionName
argument_list|,
name|genericUDTFClass
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerGenericUDTF
parameter_list|(
name|boolean
name|isNative
parameter_list|,
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDTF
argument_list|>
name|genericUDTFClass
parameter_list|)
block|{
if|if
condition|(
name|GenericUDTF
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|genericUDTFClass
argument_list|)
condition|)
block|{
name|FunctionInfo
name|fI
init|=
operator|new
name|FunctionInfo
argument_list|(
name|isNative
argument_list|,
name|functionName
argument_list|,
operator|(
name|GenericUDTF
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|genericUDTFClass
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|mFunctions
operator|.
name|put
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Registering GenericUDTF Class "
operator|+
name|genericUDTFClass
operator|+
literal|" which does not extend "
operator|+
name|GenericUDTF
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|FunctionInfo
name|getFunctionInfo
parameter_list|(
name|String
name|functionName
parameter_list|)
block|{
return|return
name|mFunctions
operator|.
name|get
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a set of registered function names. This is used for the CLI    * command "SHOW FUNCTIONS;"    *    * @return set of strings contains function names    */
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getFunctionNames
parameter_list|()
block|{
return|return
name|mFunctions
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**    * Returns a set of registered function names. This is used for the CLI    * command "SHOW FUNCTIONS 'regular expression';" Returns an empty set when    * the regular expression is not valid.    *    * @param funcPatternStr    *          regular expression of the interested function names    * @return set of strings contains function names    */
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getFunctionNames
parameter_list|(
name|String
name|funcPatternStr
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|funcNames
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Pattern
name|funcPattern
init|=
literal|null
decl_stmt|;
try|try
block|{
name|funcPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|funcPatternStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
return|return
name|funcNames
return|;
block|}
for|for
control|(
name|String
name|funcName
range|:
name|mFunctions
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|funcPattern
operator|.
name|matcher
argument_list|(
name|funcName
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|funcNames
operator|.
name|add
argument_list|(
name|funcName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|funcNames
return|;
block|}
comment|/**    * Returns the set of synonyms of the supplied function.    *    * @param funcName    *          the name of the function    * @return Set of synonyms for funcName    */
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getFunctionSynonyms
parameter_list|(
name|String
name|funcName
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|synonyms
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FunctionInfo
name|funcInfo
init|=
name|getFunctionInfo
argument_list|(
name|funcName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|funcInfo
condition|)
block|{
return|return
name|synonyms
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|funcClass
init|=
name|funcInfo
operator|.
name|getFunctionClass
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|mFunctions
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|funcName
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|mFunctions
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|getFunctionClass
argument_list|()
operator|.
name|equals
argument_list|(
name|funcClass
argument_list|)
condition|)
block|{
name|synonyms
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|synonyms
return|;
block|}
specifier|static
name|Map
argument_list|<
name|TypeInfo
argument_list|,
name|Integer
argument_list|>
name|numericTypes
init|=
operator|new
name|HashMap
argument_list|<
name|TypeInfo
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|static
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|numericTypeList
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|static
name|void
name|registerNumericType
parameter_list|(
name|String
name|typeName
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|TypeInfo
name|t
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|numericTypeList
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|numericTypes
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
static|static
block|{
name|registerNumericType
argument_list|(
name|Constants
operator|.
name|TINYINT_TYPE_NAME
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|Constants
operator|.
name|SMALLINT_TYPE_NAME
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|Constants
operator|.
name|BIGINT_TYPE_NAME
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|Constants
operator|.
name|FLOAT_TYPE_NAME
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|Constants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
comment|/**    * Find a common class that objects of both TypeInfo a and TypeInfo b can    * convert to. This is used for comparing objects of type a and type b.    *    * When we are comparing string and double, we will always convert both of    * them to double and then compare.    *    * @return null if no common class could be found.    */
specifier|public
specifier|static
name|TypeInfo
name|getCommonClassForComparison
parameter_list|(
name|TypeInfo
name|a
parameter_list|,
name|TypeInfo
name|b
parameter_list|)
block|{
comment|// If same return one of them
if|if
condition|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
condition|)
block|{
return|return
name|a
return|;
block|}
for|for
control|(
name|TypeInfo
name|t
range|:
name|numericTypeList
control|)
block|{
if|if
condition|(
name|FunctionRegistry
operator|.
name|implicitConvertable
argument_list|(
name|a
argument_list|,
name|t
argument_list|)
operator|&&
name|FunctionRegistry
operator|.
name|implicitConvertable
argument_list|(
name|b
argument_list|,
name|t
argument_list|)
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Find a common class that objects of both TypeInfo a and TypeInfo b can    * convert to. This is used for places other than comparison.    *    * The common class of string and double is string.    *    * @return null if no common class could be found.    */
specifier|public
specifier|static
name|TypeInfo
name|getCommonClass
parameter_list|(
name|TypeInfo
name|a
parameter_list|,
name|TypeInfo
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
condition|)
block|{
return|return
name|a
return|;
block|}
name|Integer
name|ai
init|=
name|numericTypes
operator|.
name|get
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|Integer
name|bi
init|=
name|numericTypes
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|ai
operator|==
literal|null
operator|||
name|bi
operator|==
literal|null
condition|)
block|{
comment|// If either is not a numeric type, return null.
return|return
literal|null
return|;
block|}
return|return
operator|(
name|ai
operator|>
name|bi
operator|)
condition|?
name|a
else|:
name|b
return|;
block|}
comment|/**    * Returns whether it is possible to implicitly convert an object of Class    * from to Class to.    */
specifier|public
specifier|static
name|boolean
name|implicitConvertable
parameter_list|(
name|TypeInfo
name|from
parameter_list|,
name|TypeInfo
name|to
parameter_list|)
block|{
if|if
condition|(
name|from
operator|.
name|equals
argument_list|(
name|to
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Allow implicit String to Double conversion
if|if
condition|(
name|from
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
operator|&&
name|to
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Void can be converted to any type
if|if
condition|(
name|from
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|voidTypeInfo
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|from
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|)
operator|&&
name|to
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Allow implicit conversion from Byte -> Integer -> Long -> Float -> Double
comment|// -> String
name|Integer
name|f
init|=
name|numericTypes
operator|.
name|get
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|Integer
name|t
init|=
name|numericTypes
operator|.
name|get
argument_list|(
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
operator|||
name|t
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|f
operator|.
name|intValue
argument_list|()
operator|>
name|t
operator|.
name|intValue
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Get the GenericUDAF evaluator for the name and argumentClasses.    *    * @param name    *          the name of the UDAF    * @param argumentTypeInfos    * @return The UDAF evaluator    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|static
name|GenericUDAFEvaluator
name|getGenericUDAFEvaluator
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argumentTypeInfos
parameter_list|,
name|boolean
name|isDistinct
parameter_list|,
name|boolean
name|isAllColumns
parameter_list|)
throws|throws
name|SemanticException
block|{
name|GenericUDAFResolver
name|udafResolver
init|=
name|getGenericUDAFResolver
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|udafResolver
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|TypeInfo
index|[]
name|parameters
init|=
operator|new
name|TypeInfo
index|[
name|argumentTypeInfos
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parameters
index|[
name|i
index|]
operator|=
name|argumentTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|GenericUDAFEvaluator
name|udafEvaluator
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|udafResolver
operator|instanceof
name|GenericUDAFResolver2
condition|)
block|{
name|GenericUDAFParameterInfo
name|paramInfo
init|=
operator|new
name|SimpleGenericUDAFParameterInfo
argument_list|(
name|parameters
argument_list|,
name|isDistinct
argument_list|,
name|isAllColumns
argument_list|)
decl_stmt|;
name|udafEvaluator
operator|=
operator|(
operator|(
name|GenericUDAFResolver2
operator|)
name|udafResolver
operator|)
operator|.
name|getEvaluator
argument_list|(
name|paramInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|udafEvaluator
operator|=
name|udafResolver
operator|.
name|getEvaluator
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
block|}
return|return
name|udafEvaluator
return|;
block|}
comment|/**    * This method is shared between UDFRegistry and UDAFRegistry. methodName will    * be "evaluate" for UDFRegistry, and "aggregate"/"evaluate"/"evaluatePartial"    * for UDAFRegistry.    * @throws UDFArgumentException    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Method
name|getMethodInternal
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|udfClass
parameter_list|,
name|String
name|methodName
parameter_list|,
name|boolean
name|exact
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argumentClasses
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|List
argument_list|<
name|Method
argument_list|>
name|mlist
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|udfClass
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|mlist
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getMethodInternal
argument_list|(
name|udfClass
argument_list|,
name|mlist
argument_list|,
name|exact
argument_list|,
name|argumentClasses
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|registerTemporaryGenericUDAF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|GenericUDAFResolver
name|genericUDAFResolver
parameter_list|)
block|{
name|registerGenericUDAF
argument_list|(
literal|false
argument_list|,
name|functionName
argument_list|,
name|genericUDAFResolver
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|registerGenericUDAF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|GenericUDAFResolver
name|genericUDAFResolver
parameter_list|)
block|{
name|registerGenericUDAF
argument_list|(
literal|true
argument_list|,
name|functionName
argument_list|,
name|genericUDAFResolver
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerGenericUDAF
parameter_list|(
name|boolean
name|isNative
parameter_list|,
name|String
name|functionName
parameter_list|,
name|GenericUDAFResolver
name|genericUDAFResolver
parameter_list|)
block|{
name|mFunctions
operator|.
name|put
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
operator|new
name|FunctionInfo
argument_list|(
name|isNative
argument_list|,
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|genericUDAFResolver
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerTemporaryUDAF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
name|udafClass
parameter_list|)
block|{
name|registerUDAF
argument_list|(
literal|false
argument_list|,
name|functionName
argument_list|,
name|udafClass
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|registerUDAF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
name|udafClass
parameter_list|)
block|{
name|registerUDAF
argument_list|(
literal|true
argument_list|,
name|functionName
argument_list|,
name|udafClass
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerUDAF
parameter_list|(
name|boolean
name|isNative
parameter_list|,
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
name|udafClass
parameter_list|)
block|{
name|mFunctions
operator|.
name|put
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
operator|new
name|FunctionInfo
argument_list|(
name|isNative
argument_list|,
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
operator|new
name|GenericUDAFBridge
argument_list|(
operator|(
name|UDAF
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|udafClass
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|unregisterTemporaryUDF
parameter_list|(
name|String
name|functionName
parameter_list|)
throws|throws
name|HiveException
block|{
name|FunctionInfo
name|fi
init|=
name|mFunctions
operator|.
name|get
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|fi
operator|.
name|isNative
argument_list|()
condition|)
block|{
name|mFunctions
operator|.
name|remove
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Function "
operator|+
name|functionName
operator|+
literal|" is hive native, it can't be dropped"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|GenericUDAFResolver
name|getGenericUDAFResolver
parameter_list|(
name|String
name|functionName
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking up GenericUDAF: "
operator|+
name|functionName
argument_list|)
expr_stmt|;
block|}
name|FunctionInfo
name|finfo
init|=
name|mFunctions
operator|.
name|get
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|finfo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|GenericUDAFResolver
name|result
init|=
name|finfo
operator|.
name|getGenericUDAFResolver
argument_list|()
decl_stmt|;
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|Object
name|invoke
parameter_list|(
name|Method
name|m
parameter_list|,
name|Object
name|thisObject
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|o
decl_stmt|;
try|try
block|{
name|o
operator|=
name|m
operator|.
name|invoke
argument_list|(
name|thisObject
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|thisObjectString
init|=
literal|""
operator|+
name|thisObject
operator|+
literal|" of class "
operator|+
operator|(
name|thisObject
operator|==
literal|null
condition|?
literal|"null"
else|:
name|thisObject
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|)
decl_stmt|;
name|StringBuilder
name|argumentString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|arguments
operator|==
literal|null
condition|)
block|{
name|argumentString
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argumentString
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|argumentString
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|arguments
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|argumentString
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argumentString
operator|.
name|append
argument_list|(
literal|""
operator|+
name|arguments
index|[
name|i
index|]
operator|+
literal|":"
operator|+
name|arguments
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|argumentString
operator|.
name|append
argument_list|(
literal|"} of size "
operator|+
name|arguments
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unable to execute method "
operator|+
name|m
operator|+
literal|" "
operator|+
literal|" on object "
operator|+
name|thisObjectString
operator|+
literal|" with arguments "
operator|+
name|argumentString
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|o
return|;
block|}
comment|/**    * Returns -1 if passed does not match accepted. Otherwise return the cost    * (usually 0 for no conversion and 1 for conversion).    */
specifier|public
specifier|static
name|int
name|matchCost
parameter_list|(
name|TypeInfo
name|argumentPassed
parameter_list|,
name|TypeInfo
name|argumentAccepted
parameter_list|,
name|boolean
name|exact
parameter_list|)
block|{
if|if
condition|(
name|argumentAccepted
operator|.
name|equals
argument_list|(
name|argumentPassed
argument_list|)
condition|)
block|{
comment|// matches
return|return
literal|0
return|;
block|}
if|if
condition|(
name|argumentPassed
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|voidTypeInfo
argument_list|)
condition|)
block|{
comment|// passing null matches everything
return|return
literal|0
return|;
block|}
if|if
condition|(
name|argumentPassed
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|LIST
argument_list|)
operator|&&
name|argumentAccepted
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|LIST
argument_list|)
condition|)
block|{
comment|// lists are compatible if and only-if the elements are compatible
name|TypeInfo
name|argumentPassedElement
init|=
operator|(
operator|(
name|ListTypeInfo
operator|)
name|argumentPassed
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
name|TypeInfo
name|argumentAcceptedElement
init|=
operator|(
operator|(
name|ListTypeInfo
operator|)
name|argumentAccepted
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
return|return
name|matchCost
argument_list|(
name|argumentPassedElement
argument_list|,
name|argumentAcceptedElement
argument_list|,
name|exact
argument_list|)
return|;
block|}
if|if
condition|(
name|argumentPassed
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|MAP
argument_list|)
operator|&&
name|argumentAccepted
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|MAP
argument_list|)
condition|)
block|{
comment|// lists are compatible if and only-if the elements are compatible
name|TypeInfo
name|argumentPassedKey
init|=
operator|(
operator|(
name|MapTypeInfo
operator|)
name|argumentPassed
operator|)
operator|.
name|getMapKeyTypeInfo
argument_list|()
decl_stmt|;
name|TypeInfo
name|argumentAcceptedKey
init|=
operator|(
operator|(
name|MapTypeInfo
operator|)
name|argumentAccepted
operator|)
operator|.
name|getMapKeyTypeInfo
argument_list|()
decl_stmt|;
name|TypeInfo
name|argumentPassedValue
init|=
operator|(
operator|(
name|MapTypeInfo
operator|)
name|argumentPassed
operator|)
operator|.
name|getMapValueTypeInfo
argument_list|()
decl_stmt|;
name|TypeInfo
name|argumentAcceptedValue
init|=
operator|(
operator|(
name|MapTypeInfo
operator|)
name|argumentAccepted
operator|)
operator|.
name|getMapValueTypeInfo
argument_list|()
decl_stmt|;
name|int
name|cost1
init|=
name|matchCost
argument_list|(
name|argumentPassedKey
argument_list|,
name|argumentAcceptedKey
argument_list|,
name|exact
argument_list|)
decl_stmt|;
name|int
name|cost2
init|=
name|matchCost
argument_list|(
name|argumentPassedValue
argument_list|,
name|argumentAcceptedValue
argument_list|,
name|exact
argument_list|)
decl_stmt|;
if|if
condition|(
name|cost1
operator|<
literal|0
operator|||
name|cost2
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|Math
operator|.
name|max
argument_list|(
name|cost1
argument_list|,
name|cost2
argument_list|)
return|;
block|}
if|if
condition|(
name|argumentAccepted
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|unknownTypeInfo
argument_list|)
condition|)
block|{
comment|// accepting Object means accepting everything,
comment|// but there is a conversion cost.
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|exact
operator|&&
name|implicitConvertable
argument_list|(
name|argumentPassed
argument_list|,
name|argumentAccepted
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Gets the closest matching method corresponding to the argument list from a    * list of methods.    *    * @param mlist    *          The list of methods to inspect.    * @param exact    *          Boolean to indicate whether this is an exact match or not.    * @param argumentsPassed    *          The classes for the argument.    * @return The matching method.    */
specifier|public
specifier|static
name|Method
name|getMethodInternal
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|udfClass
parameter_list|,
name|List
argument_list|<
name|Method
argument_list|>
name|mlist
parameter_list|,
name|boolean
name|exact
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argumentsPassed
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
comment|// result
name|List
argument_list|<
name|Method
argument_list|>
name|udfMethods
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
comment|// The cost of the result
name|int
name|leastConversionCost
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|mlist
control|)
block|{
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argumentsAccepted
init|=
name|TypeInfoUtils
operator|.
name|getParameterTypeInfos
argument_list|(
name|m
argument_list|,
name|argumentsPassed
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|argumentsAccepted
operator|==
literal|null
condition|)
block|{
comment|// null means the method does not accept number of arguments passed.
continue|continue;
block|}
name|boolean
name|match
init|=
operator|(
name|argumentsAccepted
operator|.
name|size
argument_list|()
operator|==
name|argumentsPassed
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
name|int
name|conversionCost
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argumentsPassed
operator|.
name|size
argument_list|()
operator|&&
name|match
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cost
init|=
name|matchCost
argument_list|(
name|argumentsPassed
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|argumentsAccepted
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|exact
argument_list|)
decl_stmt|;
if|if
condition|(
name|cost
operator|==
operator|-
literal|1
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|conversionCost
operator|+=
name|cost
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Method "
operator|+
operator|(
name|match
condition|?
literal|"did"
else|:
literal|"didn't"
operator|)
operator|+
literal|" match: passed = "
operator|+
name|argumentsPassed
operator|+
literal|" accepted = "
operator|+
name|argumentsAccepted
operator|+
literal|" method = "
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|match
condition|)
block|{
comment|// Always choose the function with least implicit conversions.
if|if
condition|(
name|conversionCost
operator|<
name|leastConversionCost
condition|)
block|{
name|udfMethods
operator|.
name|clear
argument_list|()
expr_stmt|;
name|udfMethods
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|leastConversionCost
operator|=
name|conversionCost
expr_stmt|;
comment|// Found an exact match
if|if
condition|(
name|leastConversionCost
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|conversionCost
operator|==
name|leastConversionCost
condition|)
block|{
comment|// Ambiguous call: two methods with the same number of implicit
comment|// conversions
name|udfMethods
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
comment|// Don't break! We might find a better match later.
block|}
else|else
block|{
comment|// do nothing if implicitConversions> leastImplicitConversions
block|}
block|}
block|}
if|if
condition|(
name|udfMethods
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// No matching methods found
throw|throw
operator|new
name|NoMatchingMethodException
argument_list|(
name|udfClass
argument_list|,
name|argumentsPassed
argument_list|,
name|mlist
argument_list|)
throw|;
block|}
if|if
condition|(
name|udfMethods
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// Ambiguous method found
throw|throw
operator|new
name|AmbiguousMethodException
argument_list|(
name|udfClass
argument_list|,
name|argumentsPassed
argument_list|,
name|mlist
argument_list|)
throw|;
block|}
return|return
name|udfMethods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * A shortcut to get the "index" GenericUDF. This is used for getting elements    * out of array and getting values out of map.    */
specifier|public
specifier|static
name|GenericUDF
name|getGenericUDFForIndex
parameter_list|()
block|{
return|return
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
literal|"index"
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
return|;
block|}
comment|/**    * A shortcut to get the "and" GenericUDF.    */
specifier|public
specifier|static
name|GenericUDF
name|getGenericUDFForAnd
parameter_list|()
block|{
return|return
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
literal|"and"
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
return|;
block|}
comment|/**    * Create a copy of an existing GenericUDF.    */
specifier|public
specifier|static
name|GenericUDF
name|cloneGenericUDF
parameter_list|(
name|GenericUDF
name|genericUDF
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|genericUDF
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFBridge
condition|)
block|{
name|GenericUDFBridge
name|bridge
init|=
operator|(
name|GenericUDFBridge
operator|)
name|genericUDF
decl_stmt|;
return|return
operator|new
name|GenericUDFBridge
argument_list|(
name|bridge
operator|.
name|getUdfName
argument_list|()
argument_list|,
name|bridge
operator|.
name|isOperator
argument_list|()
argument_list|,
name|bridge
operator|.
name|getUdfClass
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|(
name|GenericUDF
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|genericUDF
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Create a copy of an existing GenericUDTF.    */
specifier|public
specifier|static
name|GenericUDTF
name|cloneGenericUDTF
parameter_list|(
name|GenericUDTF
name|genericUDTF
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|genericUDTF
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|GenericUDTF
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|genericUDTF
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Get the UDF class from an exprNodeDesc. Returns null if the exprNodeDesc    * does not contain a UDF class.    */
specifier|private
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDF
argument_list|>
name|getGenericUDFClassFromExprDesc
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|desc
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExprNodeGenericFuncDesc
name|genericFuncDesc
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|desc
decl_stmt|;
return|return
name|genericFuncDesc
operator|.
name|getGenericUDF
argument_list|()
operator|.
name|getClass
argument_list|()
return|;
block|}
comment|/**    * Get the UDF class from an exprNodeDesc. Returns null if the exprNodeDesc    * does not contain a UDF class.    */
specifier|private
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|getUDFClassFromExprDesc
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|desc
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExprNodeGenericFuncDesc
name|genericFuncDesc
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|desc
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|genericFuncDesc
operator|.
name|getGenericUDF
argument_list|()
operator|instanceof
name|GenericUDFBridge
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|GenericUDFBridge
name|bridge
init|=
call|(
name|GenericUDFBridge
call|)
argument_list|(
name|genericFuncDesc
operator|.
name|getGenericUDF
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|bridge
operator|.
name|getUdfClass
argument_list|()
return|;
block|}
comment|/**    * Returns whether a GenericUDF is deterministic or not.    */
specifier|public
specifier|static
name|boolean
name|isDeterministic
parameter_list|(
name|GenericUDF
name|genericUDF
parameter_list|)
block|{
if|if
condition|(
name|isStateful
argument_list|(
name|genericUDF
argument_list|)
condition|)
block|{
comment|// stateful implies non-deterministic, regardless of whatever
comment|// the deterministic annotation declares
return|return
literal|false
return|;
block|}
name|UDFType
name|genericUDFType
init|=
name|genericUDF
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|UDFType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|genericUDFType
operator|!=
literal|null
operator|&&
name|genericUDFType
operator|.
name|deterministic
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFBridge
condition|)
block|{
name|GenericUDFBridge
name|bridge
init|=
call|(
name|GenericUDFBridge
call|)
argument_list|(
name|genericUDF
argument_list|)
decl_stmt|;
name|UDFType
name|bridgeUDFType
init|=
name|bridge
operator|.
name|getUdfClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|UDFType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bridgeUDFType
operator|!=
literal|null
operator|&&
name|bridgeUDFType
operator|.
name|deterministic
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Returns whether a GenericUDF is stateful or not.    */
specifier|public
specifier|static
name|boolean
name|isStateful
parameter_list|(
name|GenericUDF
name|genericUDF
parameter_list|)
block|{
name|UDFType
name|genericUDFType
init|=
name|genericUDF
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|UDFType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|genericUDFType
operator|!=
literal|null
operator|&&
name|genericUDFType
operator|.
name|stateful
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFBridge
condition|)
block|{
name|GenericUDFBridge
name|bridge
init|=
operator|(
name|GenericUDFBridge
operator|)
name|genericUDF
decl_stmt|;
name|UDFType
name|bridgeUDFType
init|=
name|bridge
operator|.
name|getUdfClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|UDFType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bridgeUDFType
operator|!=
literal|null
operator|&&
name|bridgeUDFType
operator|.
name|stateful
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns whether the exprNodeDesc is a node of "and", "or", "not".    */
specifier|public
specifier|static
name|boolean
name|isOpAndOrNot
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDF
argument_list|>
name|genericUdfClass
init|=
name|getGenericUDFClassFromExprDesc
argument_list|(
name|desc
argument_list|)
decl_stmt|;
return|return
name|GenericUDFOPAnd
operator|.
name|class
operator|==
name|genericUdfClass
operator|||
name|GenericUDFOPOr
operator|.
name|class
operator|==
name|genericUdfClass
operator|||
name|GenericUDFOPNot
operator|.
name|class
operator|==
name|genericUdfClass
return|;
block|}
comment|/**    * Returns whether the exprNodeDesc is a node of "and".    */
specifier|public
specifier|static
name|boolean
name|isOpAnd
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
return|return
name|GenericUDFOPAnd
operator|.
name|class
operator|==
name|getGenericUDFClassFromExprDesc
argument_list|(
name|desc
argument_list|)
return|;
block|}
comment|/**    * Returns whether the exprNodeDesc is a node of "or".    */
specifier|public
specifier|static
name|boolean
name|isOpOr
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
return|return
name|GenericUDFOPOr
operator|.
name|class
operator|==
name|getGenericUDFClassFromExprDesc
argument_list|(
name|desc
argument_list|)
return|;
block|}
comment|/**    * Returns whether the exprNodeDesc is a node of "not".    */
specifier|public
specifier|static
name|boolean
name|isOpNot
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
return|return
name|GenericUDFOPNot
operator|.
name|class
operator|==
name|getGenericUDFClassFromExprDesc
argument_list|(
name|desc
argument_list|)
return|;
block|}
comment|/**    * Returns whether the exprNodeDesc is a node of "positive".    */
specifier|public
specifier|static
name|boolean
name|isOpPositive
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|udfClass
init|=
name|getUDFClassFromExprDesc
argument_list|(
name|desc
argument_list|)
decl_stmt|;
return|return
name|UDFOPPositive
operator|.
name|class
operator|==
name|udfClass
return|;
block|}
specifier|private
name|FunctionRegistry
parameter_list|()
block|{
comment|// prevent instantiation
block|}
block|}
end_class

end_unit

